{
    "https://api.github.com/repos/welldone-software/why-did-you-render": {
        "forks": 201,
        "watchers": 11517,
        "stars": 11517,
        "languages": {
            "JavaScript": 197594,
            "TypeScript": 4722,
            "Shell": 52
        },
        "commits": [
            "2025-01-20T14:45:40Z",
            "2025-01-18T17:56:42Z",
            "2025-01-18T17:48:04Z",
            "2025-01-18T17:43:28Z",
            "2025-01-18T17:41:41Z",
            "2025-01-18T16:50:03Z",
            "2025-01-18T16:48:04Z",
            "2025-01-18T16:44:33Z",
            "2025-01-18T16:29:00Z",
            "2025-01-18T15:50:27Z",
            "2025-01-18T15:37:44Z",
            "2024-12-29T13:30:09Z",
            "2024-12-29T13:16:05Z",
            "2024-12-29T12:51:22Z",
            "2024-12-29T12:38:19Z",
            "2024-12-29T12:34:51Z",
            "2024-12-29T12:12:25Z",
            "2024-12-29T00:41:18Z",
            "2024-12-29T00:26:06Z",
            "2024-12-28T22:33:39Z",
            "2024-09-15T17:02:32Z",
            "2024-12-28T19:49:28Z",
            "2024-12-28T17:50:46Z",
            "2024-12-28T16:55:58Z",
            "2024-12-28T16:35:30Z",
            "2024-12-28T14:33:11Z",
            "2024-09-15T18:29:25Z",
            "2024-09-15T17:06:34Z",
            "2024-09-15T16:58:33Z",
            "2024-09-15T16:58:11Z"
        ],
        "creation_date": "2018-11-10T19:31:09Z",
        "contributors": 30,
        "topics": [
            "component",
            "hooks-tracking",
            "performance",
            "pure",
            "purecomponent",
            "react",
            "react-native",
            "render",
            "tool",
            "update"
        ],
        "subscribers": 41,
        "readme": "<p align=\"center\">\n  <img src=\"images/WDYR-logo.jpg\" width=\"300px\" />\n</p>\n\n# Why Did You Render\n\n[![npm version](https://badge.fury.io/js/%40welldone-software%2Fwhy-did-you-render.svg)](https://badge.fury.io/js/%40welldone-software%2Fwhy-did-you-render)\n[![Build Status](https://github.com/welldone-software/why-did-you-render/actions/workflows/main.yml/badge.svg)](https://github.com/welldone-software/why-did-you-render/actions/workflows/main.yml)\n![NPM](https://img.shields.io/npm/l/@welldone-software/why-did-you-render?style=flat)\n[![@welldone-software/why-did-you-render](https://snyk.io/advisor/npm-package/@welldone-software/why-did-you-render/badge.svg)](https://snyk.io/advisor/npm-package/@welldone-software/why-did-you-render)\n[![Coverage Status](https://coveralls.io/repos/github/welldone-software/why-did-you-render/badge.svg?branch=add-e2e-tests-using-cypress)](https://coveralls.io/github/welldone-software/why-did-you-render?branch=add-e2e-tests-using-cypress)\n\n`why-did-you-render` by [Welldone Software](https://welldone.software/) monkey patches **`React`** to notify you about potentially avoidable re-renders. (Works with **`React Native`** as well.)\n\nFor example, if you pass `style={{width: '100%'}}` to a big memo component it would always re-render on every element creation:\n```jsx\n<MemoBigList style={{width: '100%'}}/>\n```\nIt can also help you to simply track when and why a certain component re-renders.\n\n> [!CAUTION]\n> The library was not tested with [React Compiler](https://react.dev/learn/react-compiler) at all. I believe it's completely incompatible with it.\n\n> [!CAUTION]\n> Not all re-renders are *\"bad\"*. Sometimes shenanigan to reduce re-renders can either hurt your App's performance or have a neglagable effect, in which case it would be just a waste of your efforts, and complicate your code. Try to focus on heavier components when optimizing and use the [React DevTools Profiler](https://legacy.reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html) to measure the effects of any changes.\n\n> [!NOTE]\nI've joined the React team, specifically working on React tooling. This role has opened up exciting opportunities to enhance the developer experience for React users\u2014 and your input could offer valuable insights to help me with this effort. Please join the conversation in the [discussion thread](https://github.com/welldone-software/why-did-you-render/discussions/309)!\n\n## Setup\nThe latest version of the library was tested [(unit tests and E2E)]((https://travis-ci.com/welldone-software/why-did-you-render.svg?branch=master)) with **`React@19`** only.\n* [For `React 18`, please see the readme for version @^8](https://github.com/welldone-software/why-did-you-render/tree/version-8).\n* [For `React 17` and `React 16`, please see the readme for version @^7](https://github.com/welldone-software/why-did-you-render/tree/version-7).\n\n```\nnpm install @welldone-software/why-did-you-render --save-dev\n```\nor\n```\nyarn add @welldone-software/why-did-you-render -D\n```\nSet the library to be the React's importSource and make sure `preset-react` is in `development` mode.\n\nThis is because `React 19` requires using the `automatic` [JSX transformation](https://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html). \n```js\n['@babel/preset-react', {\n  runtime: 'automatic',\n  development: process.env.NODE_ENV === 'development',\n  importSource: '@welldone-software/why-did-you-render',\n}]\n```\n\n### React Native\n\n#### Bare workflow\n\nAdd the plugin as listed below and start react-native packager as usual. Default env for babel is \"development\". If you do not use expo when working with react-native, the following method will help you.\n\n```js\nmodule.exports = {\n  presets: ['module:metro-react-native-babel-preset'],\n\n  env: {\n    development: {\n      plugins: [['@babel/plugin-transform-react-jsx', {\n        runtime: 'automatic',\n        development: process.env.NODE_ENV === 'development',\n        importSource: '@welldone-software/why-did-you-render',\n      }]],\n    },\n  },\n}\n```\n\n#### Expo managed\n\nYou can pass params to `@babel/preset-react` through `babel-preset-expo`\n\n```js\n// babel.config.js\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: [\n      [\n        \"babel-preset-expo\",\n        {\n          jsxImportSource: \"@welldone-software/why-did-you-render\",\n        },\n      ],\n    ],\n  };\n};\n```\n\n> Notice: Create React App (CRA) ^4 **uses the `automatic` JSX transformation.**\n> [See the following comment on how to do this step with CRA](https://github.com/welldone-software/why-did-you-render/issues/154#issuecomment-773905769)\n\nCreate a `wdyr.js` file and import it as **the very first import** in your application.\n\n`wdyr.js`:\n```jsx\nimport React from 'react';\n\nif (process.env.NODE_ENV === 'development') {\n  const whyDidYouRender = require('@welldone-software/why-did-you-render');\n  whyDidYouRender(React, {\n    trackAllPureComponents: true,\n  });\n}\n```\n\n> [!CAUTION]\n> The library should *NEVER* be used in production because:\n> - It significantly slows down React\n> - It monkey patches React and can result in unexpected behavior\n\nIn [Typescript](https://github.com/welldone-software/why-did-you-render/issues/161), call the file wdyr.ts and add the following line to the top of the file to import the package's types:\n```tsx\n/// <reference types=\"@welldone-software/why-did-you-render\" />\n```\n\nImport `wdyr` as the first import (even before `react-hot-loader` if you use it):\n\n`index.js`:\n\n```jsx\nimport './wdyr'; // <--- first import\n\nimport 'react-hot-loader';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// ...\nimport {App} from './app';\n// ...\nReactDOM.render(<App/>, document.getElementById('root'));\n```\n\nIf you use `trackAllPureComponents`, all pure components ([React.PureComponent](https://reactjs.org/docs/react-api.html#reactpurecomponent) or [React.memo](https://reactjs.org/docs/react-api.html#reactmemo)) will be tracked.\n\nOtherwise, add `whyDidYouRender = true` to ad-hoc components to track them. (f.e `Component.whyDidYouRender = true`)\n\nMore information about what is tracked can be found in [Tracking Components](#tracking-components).\n\nCan't see any WDYR logs? Check out the [troubleshooting section](#troubleshooting) or search in the [issues](https://github.com/welldone-software/why-did-you-render/issues).\n\n## Custom Hooks\n\nAlso, tracking custom hooks is possible by using `trackExtraHooks`. For example if you want to track `useSelector` from React Redux:\n\n`wdyr.js`:\n```jsx\nimport React from 'react';\n\n// For react-native you might want to use \n// the __DEV__ flag instead of process.env.NODE_ENV === 'development'\nif (process.env.NODE_ENV === 'development') {\n  const whyDidYouRender = require('@welldone-software/why-did-you-render');\n  const ReactRedux = require('react-redux');\n  whyDidYouRender(React, {\n    trackAllPureComponents: true,\n    trackExtraHooks: [\n      [ReactRedux, 'useSelector']\n    ]\n  });\n}\n```\n\n> Notice that there's currently a problem with rewriting exports of imported files in `webpack`. A quick workaround can help with it: [#85 - trackExtraHooks cannot set property](https://github.com/welldone-software/why-did-you-render/issues/85).\n\n## Read More\n* [Why Did You Render Mr. Big Pure React Component???](http://bit.ly/wdyr1)\n* [**Common fixing scenarios** this library can help with](http://bit.ly/wdyr02)\n* [**React Hooks** - Understand and fix hooks issues](http://bit.ly/wdyr3)\n* [Why Did You Render v4 Released!](https://medium.com/welldone-software/why-did-you-render-v4-released-48e0f0b99d4c) - TypeScript support, Custom hooks tracking (like React-Redux\u2019s useSelector), Tracking of all pure components.\n\n## Integration With Other Libraries\n* [Next.js example](https://github.com/zeit/next.js/tree/canary/examples/with-why-did-you-render)\n* [React-Redux With Hooks](https://medium.com/welldone-software/why-did-you-render-v4-released-48e0f0b99d4c)\n* [Mobx is currently not supported](https://github.com/welldone-software/why-did-you-render/issues/162)\n* [React-Native flipper plugin made by @allen-hsu](https://github.com/allen-hsu/wdyr-flipper#wdry-flipper-reporter)\n\n## Sandbox\nYou can test the library in [the official sandbox](http://bit.ly/wdyr-sb).\n\nAnd another [official sandbox with hooks tracking](https://codesandbox.io/s/why-did-you-render-sandbox-with-hooks-pyi14)\n\n## Tracking Components\nYou can track all pure components ([React.PureComponent](https://reactjs.org/docs/react-api.html#reactpurecomponent) or [React.memo](https://reactjs.org/docs/react-api.html#reactmemo)) using the `trackAllPureComponents: true` option.\n\nYou can also manually track any component you want by setting `whyDidYouRender` on them like this:\n```js\nclass BigList extends React.Component {\n  static whyDidYouRender = true\n  render(){\n    return (\n      //some heavy render you want to ensure doesn't happen if its not necessary\n    )\n  }\n}\n```\n\nOr for functional components:\n\n```js\nconst BigListPureComponent = props => (\n  <div>\n    //some heavy component you want to ensure doesn't happen if its not necessary\n  </div>\n)\nBigListPureComponent.whyDidYouRender = true\n```\n\nYou can also pass an object to specify more advanced tracking settings:\n\n```js\nEnhancedMenu.whyDidYouRender = {\n  logOnDifferentValues: true,\n  customName: 'Menu'\n}\n```\n\n- `logOnDifferentValues`:\n\n  Normally, only re-renders that are caused by equal values in props / state trigger notifications:\n  ```js\n  render(<Menu a={1}/>)\n  render(<Menu a={1}/>)\n  ```\n  This option will trigger notifications even if they occurred because of different props / state (Thus, because of \"legit\" re-renders):\n  ```js\n  render(<Menu a={1}/>)\n  render(<Menu a={2}/>)\n  ```\n\n- `customName`:\n\n  Sometimes the name of the component can be missing or very inconvenient. For example:\n\n  ```js\n  withPropsOnChange(withPropsOnChange(withStateHandlers(withPropsOnChange(withState(withPropsOnChange(lifecycle(withPropsOnChange(withPropsOnChange(onlyUpdateForKeys(LoadNamespace(Connect(withState(withState(withPropsOnChange(lifecycle(withPropsOnChange(withHandlers(withHandlers(withHandlers(withHandlers(Connect(lifecycle(Menu)))))))))))))))))))))))\n  ```\n\n## Options\nOptionally you can pass in `options` as the second parameter. The following options are available:\n- `include: [RegExp, ...]` (`null` by default)\n- `exclude: [RegExp, ...]` (`null` by default)\n- `trackAllPureComponents: false`\n- `trackHooks: true`\n- `trackExtraHooks: []`\n- `logOwnerReasons: true`\n- `logOnDifferentValues: false`\n- `hotReloadBufferMs: 500`\n- `onlyLogs: false`\n- `collapseGroups: false`\n- `titleColor`\n- `diffNameColor`\n- `diffPathColor`\n- `textBackgroundColor`\n- `notifier: ({Component, displayName, hookName, prevProps, prevState, prevHookResult, nextProps, nextState, nextHookResult, reason, options, ownerDataMap}) => void`\n- `getAdditionalOwnerData: (element) => {...}`\n\n#### include / exclude\n##### (default: `null`)\n\nYou can include or exclude tracking of components by their displayName using the `include` and `exclude` options.\n\nFor example, the following code is used to [track all redundant re-renders that are caused by older React-Redux](http://bit.ly/wdyr04):\n```js\nwhyDidYouRender(React, { include: [/^ConnectFunction/] });\n```\n> *Notice: **exclude** takes priority over both `include` and manually set `whyDidYouRender = `*\n\n#### trackAllPureComponents\n##### (default: `false`)\n\nYou can track all pure components (both `React.memo` and `React.PureComponent` components)\n\n> *Notice: You can exclude the tracking of any specific component with `whyDidYouRender = false`*\n\n#### trackHooks\n##### (default: `true`)\n\nYou can turn off tracking of hooks changes.\n\n[Understand and fix hook issues](http://bit.ly/wdyr3).\n\n#### trackExtraHooks\n##### (default: `[]`)\n\nTrack custom hooks:\n\n```js\nwhyDidYouRender(React, {\n  trackExtraHooks: [\n    // notice that 'useSelector' is a named export\n    [ReactRedux, 'useSelector'],\n  ]\n});\n```\n\n> This feature is rewriting exports of imported files. There is currently a problem with that approach in webpack. A workaround is available here: [#85 - trackExtraHooks cannot set property](https://github.com/welldone-software/why-did-you-render/issues/85)\n\n#### logOwnerReasons\n##### (default: `true`)\n\nOne way of fixing re-render issues is preventing the component's owner from re-rendering.\n\nThis option is `true` by default and it lets you view the reasons why an owner component re-renders.\n\n![demo](images/logOwnerReasons.png)\n\n#### logOnDifferentValues\n##### (default: `false`)\n\nNormally, you only want logs about component re-renders when they could have been avoided.\n\nWith this option, it is possible to track all re-renders.\n\nFor example:\n```js\nrender(<BigListPureComponent a={1}/>)\nrender(<BigListPureComponent a={2}/>)\n// will only log if you use {logOnDifferentValues: true}\n```\n\n#### hotReloadBufferMs\n##### (default: `500`)\n\nTime in milliseconds to ignore updates after a hot reload is detected.\n\nWhen a hot reload is detected, we ignore all updates for `hotReloadBufferMs` to not spam the console.\n\n#### onlyLogs\n##### (default: `false`)\n\nIf you don't want to use `console.group` to group logs you can print them as simple logs.\n\n#### collapseGroups\n##### (default: `false`)\n\nGrouped logs can be collapsed.\n\n#### titleColor / diffNameColor / diffPathColor / textBackgroundColor\n##### (default titleColor: `'#058'`)\n##### (default diffNameColor: `'blue'`)\n##### (default diffPathColor: `'red'`)\n##### (default textBackgroundColor: `'white`)\n\nControls the colors used in the console notifications\n\n#### notifier\n##### (default: defaultNotifier that is exposed from the library)\n\nYou can create a custom notifier if the default one does not suite your needs.\n\n#### getAdditionalOwnerData\n##### (default: `undefined`)\nYou can provide a function that harvests additional data from the original react element. The object returned from this function will be added to the ownerDataMap which can be accessed later within your notifier function override.\n\n## Troubleshooting\n\n### No tracking\n* If you are in production, WDYR is probably disabled.\n* Maybe no component is tracked\n    * Check out [Tracking Components](#tracking-components) once again.\n* If you only track pure components using `trackAllPureComponents: true` then you would only track either ([React.PureComponent](https://reactjs.org/docs/react-api.html#reactpurecomponent) or [React.memo](https://reactjs.org/docs/react-api.html#reactmemo)), maybe none of your components are pure so none of them will get tracked.\n* Maybe you have no issues\n    * Try causing an issue by temporary rendering the whole app twice in it's entry point:\n\n        `index.js`:\n        ```jsx\n        const HotApp = hot(App);\n        HotApp.whyDidYouRender = true;\n        ReactDOM.render(<HotApp/>, document.getElementById('root'));\n        ReactDOM.render(<HotApp/>, document.getElementById('root'));\n        ```\n\n### Custom Hooks tracking (like useSelector)\nThere's currently a problem with rewriting exports of imported files in `webpack`. A quick workaround can help with it: [#85 - trackExtraHooks cannot set property](https://github.com/welldone-software/why-did-you-render/issues/85).\n\n### React-Redux `connect` HOC is spamming the console\nSince `connect` hoists statics, if you add WDYR to the inner component, it is also added to the HOC component where complex hooks are running.\n\nTo fix this, add the `whyDidYouRender = true` static to a component after the connect:\n```js\n  const SimpleComponent = ({a}) => <div data-testid=\"foo\">{a.b}</div>)\n  // not before the connect:\n  // SimpleComponent.whyDidYouRender = true\n  const ConnectedSimpleComponent = connect(\n    state => ({a: state.a})\n  )(SimpleComponent)\n  // after the connect:\n  SimpleComponent.whyDidYouRender = true\n```\n\n### Sourcemaps\nTo see the library's sourcemaps use the [source-map-loader](https://webpack.js.org/loaders/source-map-loader/).\n\n## Credit\n\nInspired by the following previous work:\n\n* github.com/maicki/why-did-you-update (no longer public) which I had the chance to maintain for some time.\n* https://github.com/garbles/why-did-you-update where [A deep dive into React perf debugging](https://benchling.engineering/a-deep-dive-into-react-perf-debugging-fd2063f5a667/) is credited for the idea.\n\n## License\n\nThis library is [MIT licensed](./LICENSE).\n",
        "releases": [
            {
                "name": "",
                "date": "2025-01-18T17:49:06Z"
            },
            {
                "name": "Why Did You Render v10 Supporting React 19! \ud83c\udf89\ud83c\udf7e",
                "date": "2025-01-18T17:15:15Z"
            },
            {
                "name": "Minor update",
                "date": "2024-06-08T13:20:46Z"
            },
            {
                "name": "",
                "date": "2023-12-26T19:05:22Z"
            },
            {
                "name": "v8.0.0",
                "date": "2023-12-26T14:35:02Z"
            },
            {
                "name": "",
                "date": "2022-04-04T09:45:27Z"
            },
            {
                "name": "React 18",
                "date": "2022-04-02T20:18:53Z"
            },
            {
                "name": "maintenance",
                "date": "2021-11-14T16:43:54Z"
            },
            {
                "name": "",
                "date": "2021-08-22T21:01:08Z"
            },
            {
                "name": "",
                "date": "2021-06-13T09:49:45Z"
            },
            {
                "name": "",
                "date": "2021-05-21T08:33:53Z"
            },
            {
                "name": "",
                "date": "2021-05-21T08:33:06Z"
            },
            {
                "name": "",
                "date": "2021-05-17T09:29:31Z"
            },
            {
                "name": "",
                "date": "2021-03-13T09:16:26Z"
            },
            {
                "name": "",
                "date": "2021-03-06T12:09:34Z"
            },
            {
                "name": "",
                "date": "2020-12-30T07:56:00Z"
            },
            {
                "name": "",
                "date": "2020-12-26T17:56:53Z"
            },
            {
                "name": "React 17, Automatic JSX runtime transform",
                "date": "2020-11-24T08:47:00Z"
            },
            {
                "name": "",
                "date": "2020-11-08T19:12:29Z"
            },
            {
                "name": "",
                "date": "2020-11-08T19:01:02Z"
            },
            {
                "name": "",
                "date": "2020-10-22T17:29:24Z"
            },
            {
                "name": "",
                "date": "2020-10-14T16:27:16Z"
            },
            {
                "name": "",
                "date": "2020-09-20T08:59:00Z"
            },
            {
                "name": "",
                "date": "2020-09-20T08:58:20Z"
            },
            {
                "name": "",
                "date": "2020-09-01T13:56:32Z"
            },
            {
                "name": "Version 5 alpha",
                "date": "2020-08-21T14:01:24Z"
            },
            {
                "name": "",
                "date": "2020-09-20T09:21:58Z"
            },
            {
                "name": "Improved development",
                "date": "2020-08-08T17:07:56Z"
            },
            {
                "name": "",
                "date": "2020-07-23T13:11:59Z"
            },
            {
                "name": "",
                "date": "2020-07-17T06:20:40Z"
            },
            {
                "name": "",
                "date": "2020-05-31T08:59:15Z"
            },
            {
                "name": "",
                "date": "2020-05-30T09:21:08Z"
            },
            {
                "name": "",
                "date": "2020-05-30T09:15:37Z"
            },
            {
                "name": "",
                "date": "2020-05-20T05:57:42Z"
            },
            {
                "name": "",
                "date": "2020-05-12T06:47:34Z"
            },
            {
                "name": "",
                "date": "2020-05-06T10:20:45Z"
            },
            {
                "name": "",
                "date": "2020-04-29T07:38:17Z"
            },
            {
                "name": "",
                "date": "2020-04-29T07:37:20Z"
            },
            {
                "name": "",
                "date": "2020-04-23T10:58:08Z"
            },
            {
                "name": "",
                "date": "2020-04-21T17:19:26Z"
            },
            {
                "name": "",
                "date": "2020-04-18T15:36:38Z"
            },
            {
                "name": "",
                "date": "2020-04-18T15:36:01Z"
            },
            {
                "name": "",
                "date": "2020-04-15T12:14:18Z"
            },
            {
                "name": "improved typescript typings",
                "date": "2020-04-09T10:01:30Z"
            },
            {
                "name": "",
                "date": "2020-04-01T06:54:10Z"
            },
            {
                "name": "",
                "date": "2020-02-22T18:39:17Z"
            },
            {
                "name": "improved readme",
                "date": "2020-02-17T07:51:51Z"
            },
            {
                "name": "fixed lack of tracking where a React.memo extended React.memo (which is not recommended by the way)",
                "date": "2020-02-02T21:31:20Z"
            },
            {
                "name": "fixed lack of tracking where display name couldn't be changed",
                "date": "2020-02-02T21:32:00Z"
            },
            {
                "name": "added \"trackAllPureComponents\" to typescript definitions and readme",
                "date": "2020-01-27T16:48:10Z"
            },
            {
                "name": "improved typescript support + dev packages update",
                "date": "2020-01-25T12:04:14Z"
            },
            {
                "name": "hooks traching inner refactor",
                "date": "2019-12-21T14:57:58Z"
            },
            {
                "name": "Component.whyDidYouRender=false ensures the component is not tracked now",
                "date": "2019-12-19T11:02:13Z"
            },
            {
                "name": "added support for tracking custom hooks",
                "date": "2019-12-16T13:40:22Z"
            },
            {
                "name": "",
                "date": "2019-11-09T10:34:08Z"
            },
            {
                "name": "",
                "date": "2019-10-13T11:05:22Z"
            },
            {
                "name": "Improved Typescript Types",
                "date": "2019-10-05T09:10:57Z"
            },
            {
                "name": "[Typescript] React Component and Functional Component now supplied with \"whyDidYouRender\" memer",
                "date": "2019-09-16T13:12:55Z"
            },
            {
                "name": "Added support to React.memo(ClassComponent)",
                "date": "2019-09-13T10:24:48Z"
            },
            {
                "name": "Fixed an issue with Strict mode in React 16.9.0",
                "date": "2019-08-13T18:19:08Z"
            },
            {
                "name": "updated tests to use latest versions of all packages including React 16.9",
                "date": "2019-08-09T07:21:32Z"
            },
            {
                "name": "styled-components support + fixed warnings on forwardref use",
                "date": "2019-08-02T12:28:21Z"
            },
            {
                "name": "added support to React.forwardRef",
                "date": "2019-08-02T09:19:52Z"
            },
            {
                "name": "",
                "date": "2019-07-23T10:09:51Z"
            },
            {
                "name": "",
                "date": "2019-06-18T07:30:48Z"
            },
            {
                "name": "Added TypeScript support",
                "date": "2019-06-13T16:48:14Z"
            },
            {
                "name": "Fixed strict mode and binded render scenarios",
                "date": "2019-06-07T15:46:39Z"
            },
            {
                "name": "Updated all dev-dependencies",
                "date": "2019-06-06T07:40:00Z"
            },
            {
                "name": "",
                "date": "2019-05-04T07:56:45Z"
            },
            {
                "name": "",
                "date": "2019-05-04T07:27:06Z"
            },
            {
                "name": "",
                "date": "2019-04-29T14:03:08Z"
            },
            {
                "name": "",
                "date": "2019-04-13T11:21:34Z"
            },
            {
                "name": "",
                "date": "2019-04-13T09:05:47Z"
            },
            {
                "name": "",
                "date": "2019-04-13T09:04:38Z"
            },
            {
                "name": "",
                "date": "2019-04-12T11:16:24Z"
            },
            {
                "name": "",
                "date": "2019-04-05T18:59:32Z"
            },
            {
                "name": "",
                "date": "2019-04-05T10:33:12Z"
            },
            {
                "name": "React Hooks tracking is here!",
                "date": "2019-04-05T09:44:08Z"
            },
            {
                "name": "Added support to React.memo",
                "date": "2019-03-18T08:32:11Z"
            },
            {
                "name": "Functional components tracking fix",
                "date": "2019-02-12T08:24:50Z"
            },
            {
                "name": "Support extension of untranspiled classes",
                "date": "2019-01-19T12:01:08Z"
            },
            {
                "name": "Support React.createFactory",
                "date": "2018-12-20T15:50:36Z"
            },
            {
                "name": "Using WeakMap instead of Map",
                "date": "2018-12-02T12:51:34Z"
            },
            {
                "name": "Monkey patches functional components using functional component and not a class",
                "date": "2018-12-02T08:04:27Z"
            },
            {
                "name": "Added the option to use \"customName\"",
                "date": "2018-12-02T07:45:30Z"
            },
            {
                "name": "Fixed for inline render functions",
                "date": "2018-12-02T07:47:41Z"
            },
            {
                "name": "Improved how we detect if a component is functional or class components",
                "date": "2018-12-04T07:35:08Z"
            },
            {
                "name": "Monkey patch \"render\" instead of \"componentDidUpdate\"",
                "date": "2018-12-02T07:51:38Z"
            }
        ]
    }
}