{
    "https://api.github.com/repos/kishikawakatsumi/KeychainAccess": {
        "forks": 795,
        "watchers": 8007,
        "stars": 8007,
        "languages": {
            "Swift": 340746,
            "Ruby": 1701,
            "Objective-C": 1391
        },
        "commits": [
            "2023-11-12T10:44:55Z",
            "2023-11-12T10:43:31Z",
            "2023-11-12T10:41:18Z",
            "2023-11-12T10:29:53Z",
            "2023-11-12T10:29:45Z",
            "2023-11-12T09:15:52Z",
            "2023-11-12T09:15:39Z",
            "2023-11-12T09:15:29Z",
            "2023-11-12T09:10:08Z",
            "2023-11-06T22:57:13Z",
            "2023-11-12T08:58:35Z",
            "2023-11-12T08:37:10Z",
            "2023-11-12T07:26:54Z",
            "2023-11-12T07:20:51Z",
            "2023-05-12T09:50:57Z",
            "2023-04-12T06:30:50Z",
            "2023-02-07T13:49:54Z",
            "2023-02-07T13:02:55Z",
            "2021-11-26T17:57:41Z",
            "2021-11-26T17:51:27Z",
            "2021-11-01T18:01:07Z",
            "2021-05-02T06:46:26Z",
            "2021-05-01T17:39:45Z",
            "2021-03-01T18:01:03Z",
            "2021-03-01T18:01:03Z",
            "2021-03-01T17:59:23Z",
            "2020-11-11T22:18:54Z",
            "2020-09-18T21:49:25Z",
            "2020-09-18T20:53:58Z",
            "2020-08-11T17:09:08Z"
        ],
        "creation_date": "2014-12-24T22:04:11Z",
        "contributors": 29,
        "topics": [
            "keychain",
            "security",
            "touch-id"
        ],
        "subscribers": 127,
        "readme": "# KeychainAccess\n\n[![Build Status](https://travis-ci.com/kishikawakatsumi/KeychainAccess.svg?branch=master)](https://travis-ci.com/kishikawakatsumi/KeychainAccess)\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\n[![SPM supported](https://img.shields.io/badge/SPM-supported-DE5C43.svg?style=flat)](https://swift.org/package-manager)\n[![Version](https://img.shields.io/cocoapods/v/KeychainAccess.svg)](http://cocoadocs.org/docsets/KeychainAccess)\n[![Platform](https://img.shields.io/cocoapods/p/KeychainAccess.svg)](http://cocoadocs.org/docsets/KeychainAccess)\n\nKeychainAccess is a simple Swift wrapper for Keychain that works on iOS and macOS. Makes using Keychain APIs extremely easy and much more palatable to use in Swift.\n\n<img src=\"https://github.com/kishikawakatsumi/KeychainAccess/assets/40610/4de4aae1-6fc1-4477-af6d-afbe6d164da0\" width=\"320px\" /> <img src=\"https://github.com/kishikawakatsumi/KeychainAccess/assets/40610/2980ea84-862b-4067-b9b7-90de629171b9\" width=\"320px\" />\n<img src=\"https://github.com/kishikawakatsumi/KeychainAccess/assets/40610/3299347d-eb1b-446c-921c-778fa493f818\" width=\"320px\" />\n\n## :bulb: Features\n\n- Simple interface\n- Support access group\n- [Support accessibility](#accessibility)\n- [Support iCloud sharing](#icloud_sharing)\n- **[Support TouchID and Keychain integration (iOS 8+)](#touch_id_integration)**\n- **[Support Shared Web Credentials (iOS 8+)](#shared_web_credentials)**\n- [Works on both iOS & macOS](#requirements)\n- [watchOS and tvOS are supported](#requirements)\n- **[Mac Catalyst is supported](#requirements)**\n- **[Swift 3, 4 and 5 compatible](#requirements)**\n\n## :book: Usage\n\n##### :eyes: See also:\n\n- [:link: iOS Example Project](https://github.com/kishikawakatsumi/KeychainAccess/tree/master/Examples/Example-iOS)\n\n### :key: Basics\n\n#### Saving Application Password\n\n```swift\nlet keychain = Keychain(service: \"com.example.github-token\")\nkeychain[\"kishikawakatsumi\"] = \"01234567-89ab-cdef-0123-456789abcdef\"\n```\n\n#### Saving Internet Password\n\n```swift\nlet keychain = Keychain(server: \"https://github.com\", protocolType: .https)\nkeychain[\"kishikawakatsumi\"] = \"01234567-89ab-cdef-0123-456789abcdef\"\n```\n\n### :key: Instantiation\n\n#### Create Keychain for Application Password\n\n```swift\nlet keychain = Keychain(service: \"com.example.github-token\")\n```\n\n```swift\nlet keychain = Keychain(service: \"com.example.github-token\", accessGroup: \"12ABCD3E4F.shared\")\n```\n\n#### Create Keychain for Internet Password\n\n```swift\nlet keychain = Keychain(server: \"https://github.com\", protocolType: .https)\n```\n\n```swift\nlet keychain = Keychain(server: \"https://github.com\", protocolType: .https, authenticationType: .htmlForm)\n```\n\n### :key: Adding an item\n\n#### subscripting\n\n##### for String\n\n```swift\nkeychain[\"kishikawakatsumi\"] = \"01234567-89ab-cdef-0123-456789abcdef\"\n```\n\n```swift\nkeychain[string: \"kishikawakatsumi\"] = \"01234567-89ab-cdef-0123-456789abcdef\"\n```\n\n##### for NSData\n\n```swift\nkeychain[data: \"secret\"] = NSData(contentsOfFile: \"secret.bin\")\n```\n\n#### set method\n\n```swift\nkeychain.set(\"01234567-89ab-cdef-0123-456789abcdef\", key: \"kishikawakatsumi\")\n```\n\n#### error handling\n\n```swift\ndo {\n    try keychain.set(\"01234567-89ab-cdef-0123-456789abcdef\", key: \"kishikawakatsumi\")\n}\ncatch let error {\n    print(error)\n}\n```\n\n### :key: Obtaining an item\n\n#### subscripting\n\n##### for String (If the value is NSData, attempt to convert to String)\n\n```swift\nlet token = keychain[\"kishikawakatsumi\"]\n```\n\n```swift\nlet token = keychain[string: \"kishikawakatsumi\"]\n```\n\n##### for NSData\n\n```swift\nlet secretData = keychain[data: \"secret\"]\n```\n\n#### get methods\n\n##### as String\n\n```swift\nlet token = try? keychain.get(\"kishikawakatsumi\")\n```\n\n```swift\nlet token = try? keychain.getString(\"kishikawakatsumi\")\n```\n\n##### as NSData\n\n```swift\nlet data = try? keychain.getData(\"kishikawakatsumi\")\n```\n\n### :key: Removing an item\n\n#### subscripting\n\n```swift\nkeychain[\"kishikawakatsumi\"] = nil\n```\n\n#### remove method\n\n```swift\ndo {\n    try keychain.remove(\"kishikawakatsumi\")\n} catch let error {\n    print(\"error: \\(error)\")\n}\n```\n\n### :key: Set Label and Comment\n\n```swift\nlet keychain = Keychain(server: \"https://github.com\", protocolType: .https)\ndo {\n    try keychain\n        .label(\"github.com (kishikawakatsumi)\")\n        .comment(\"github access token\")\n        .set(\"01234567-89ab-cdef-0123-456789abcdef\", key: \"kishikawakatsumi\")\n} catch let error {\n    print(\"error: \\(error)\")\n}\n```\n\n### :key: Obtaining Other Attributes\n\n#### PersistentRef\n\n```swift\nlet keychain = Keychain()\nlet persistentRef = keychain[attributes: \"kishikawakatsumi\"]?.persistentRef\n...\n```\n\n#### Creation Date\n\n```swift\nlet keychain = Keychain()\nlet creationDate = keychain[attributes: \"kishikawakatsumi\"]?.creationDate\n...\n```\n\n#### All Attributes\n\n```swift\nlet keychain = Keychain()\ndo {\n    let attributes = try keychain.get(\"kishikawakatsumi\") { $0 }\n    print(attributes?.comment)\n    print(attributes?.label)\n    print(attributes?.creator)\n    ...\n} catch let error {\n    print(\"error: \\(error)\")\n}\n```\n\n##### subscripting\n\n```swift\nlet keychain = Keychain()\nif let attributes = keychain[attributes: \"kishikawakatsumi\"] {\n    print(attributes.comment)\n    print(attributes.label)\n    print(attributes.creator)\n}\n```\n\n### :key: Configuration (Accessibility, Sharing, iCloud Sync)\n\n**Provides fluent interfaces**\n\n```swift\nlet keychain = Keychain(service: \"com.example.github-token\")\n    .label(\"github.com (kishikawakatsumi)\")\n    .synchronizable(true)\n    .accessibility(.afterFirstUnlock)\n```\n\n#### <a name=\"accessibility\"> Accessibility\n\n##### Default accessibility matches background application (=kSecAttrAccessibleAfterFirstUnlock)\n\n```swift\nlet keychain = Keychain(service: \"com.example.github-token\")\n```\n\n##### For background application\n\n###### Creating instance\n\n```swift\nlet keychain = Keychain(service: \"com.example.github-token\")\n    .accessibility(.afterFirstUnlock)\n\nkeychain[\"kishikawakatsumi\"] = \"01234567-89ab-cdef-0123-456789abcdef\"\n```\n\n###### One-shot\n\n```swift\nlet keychain = Keychain(service: \"com.example.github-token\")\n\ndo {\n    try keychain\n        .accessibility(.afterFirstUnlock)\n        .set(\"01234567-89ab-cdef-0123-456789abcdef\", key: \"kishikawakatsumi\")\n} catch let error {\n    print(\"error: \\(error)\")\n}\n```\n\n##### For foreground application\n\n###### Creating instance\n\n```swift\nlet keychain = Keychain(service: \"com.example.github-token\")\n    .accessibility(.whenUnlocked)\n\nkeychain[\"kishikawakatsumi\"] = \"01234567-89ab-cdef-0123-456789abcdef\"\n```\n\n###### One-shot\n\n```swift\nlet keychain = Keychain(service: \"com.example.github-token\")\n\ndo {\n    try keychain\n        .accessibility(.whenUnlocked)\n        .set(\"01234567-89ab-cdef-0123-456789abcdef\", key: \"kishikawakatsumi\")\n} catch let error {\n    print(\"error: \\(error)\")\n}\n```\n\n#### :couple: Sharing Keychain items\n\n```swift\nlet keychain = Keychain(service: \"com.example.github-token\", accessGroup: \"12ABCD3E4F.shared\")\n```\n\n#### <a name=\"icloud_sharing\"> :arrows_counterclockwise: Synchronizing Keychain items with iCloud\n\n###### Creating instance\n\n```swift\nlet keychain = Keychain(service: \"com.example.github-token\")\n    .synchronizable(true)\n\nkeychain[\"kishikawakatsumi\"] = \"01234567-89ab-cdef-0123-456789abcdef\"\n```\n\n###### One-shot\n\n```swift\nlet keychain = Keychain(service: \"com.example.github-token\")\n\ndo {\n    try keychain\n        .synchronizable(true)\n        .set(\"01234567-89ab-cdef-0123-456789abcdef\", key: \"kishikawakatsumi\")\n} catch let error {\n    print(\"error: \\(error)\")\n}\n```\n\n### <a name=\"touch_id_integration\"> :cyclone: Touch ID (Face ID) integration\n\n**Any Operation that require authentication must be run in the background thread.**  \n**If you run in the main thread, UI thread will lock for the system to try to display the authentication dialog.**\n\n**To use Face ID, add `NSFaceIDUsageDescription` key to your `Info.plist`**\n\n#### :closed_lock_with_key: Adding a Touch ID (Face ID) protected item\n\nIf you want to store the Touch ID protected Keychain item, specify `accessibility` and `authenticationPolicy` attributes.\n\n```swift\nlet keychain = Keychain(service: \"com.example.github-token\")\n\nDispatchQueue.global().async {\n    do {\n        // Should be the secret invalidated when passcode is removed? If not then use `.WhenUnlocked`\n        try keychain\n            .accessibility(.whenPasscodeSetThisDeviceOnly, authenticationPolicy: [.biometryAny])\n            .set(\"01234567-89ab-cdef-0123-456789abcdef\", key: \"kishikawakatsumi\")\n    } catch let error {\n        // Error handling if needed...\n    }\n}\n```\n\n#### :closed_lock_with_key: Updating a Touch ID (Face ID) protected item\n\nThe same way as when adding.\n\n**Do not run in the main thread if there is a possibility that the item you are trying to add already exists, and protected.**\n**Because updating protected items requires authentication.**\n\nAdditionally, you want to show custom authentication prompt message when updating, specify an `authenticationPrompt` attribute.\nIf the item not protected, the `authenticationPrompt` parameter just be ignored.\n\n```swift\nlet keychain = Keychain(service: \"com.example.github-token\")\n\nDispatchQueue.global().async {\n    do {\n        // Should be the secret invalidated when passcode is removed? If not then use `.WhenUnlocked`\n        try keychain\n            .accessibility(.whenPasscodeSetThisDeviceOnly, authenticationPolicy: [.biometryAny])\n            .authenticationPrompt(\"Authenticate to update your access token\")\n            .set(\"01234567-89ab-cdef-0123-456789abcdef\", key: \"kishikawakatsumi\")\n    } catch let error {\n        // Error handling if needed...\n    }\n}\n```\n\n#### :closed_lock_with_key: Obtaining a Touch ID (Face ID) protected item\n\nThe same way as when you get a normal item. It will be displayed automatically Touch ID or passcode authentication If the item you try to get is protected.  \nIf you want to show custom authentication prompt message, specify an `authenticationPrompt` attribute.\nIf the item not protected, the `authenticationPrompt` parameter just be ignored.\n\n```swift\nlet keychain = Keychain(service: \"com.example.github-token\")\n\nDispatchQueue.global().async {\n    do {\n        let password = try keychain\n            .authenticationPrompt(\"Authenticate to login to server\")\n            .get(\"kishikawakatsumi\")\n\n        print(\"password: \\(password)\")\n    } catch let error {\n        // Error handling if needed...\n    }\n}\n```\n\n#### :closed_lock_with_key: Removing a Touch ID (Face ID) protected item\n\nThe same way as when you remove a normal item.\nThere is no way to show Touch ID or passcode authentication when removing Keychain items.\n\n```swift\nlet keychain = Keychain(service: \"com.example.github-token\")\n\ndo {\n    try keychain.remove(\"kishikawakatsumi\")\n} catch let error {\n    // Error handling if needed...\n}\n```\n\n### <a name=\"shared_web_credentials\"> :key: Shared Web Credentials\n\n> Shared web credentials is a programming interface that enables native iOS apps to share credentials with their website counterparts. For example, a user may log in to a website in Safari, entering a user name and password, and save those credentials using the iCloud Keychain. Later, the user may run a native app from the same developer, and instead of the app requiring the user to reenter a user name and password, shared web credentials gives it access to the credentials that were entered earlier in Safari. The user can also create new accounts, update passwords, or delete her account from within the app. These changes are then saved and used by Safari.  \n> <https://developer.apple.com/library/ios/documentation/Security/Reference/SharedWebCredentialsRef/>\n\n```swift\nlet keychain = Keychain(server: \"https://www.kishikawakatsumi.com\", protocolType: .HTTPS)\n\nlet username = \"kishikawakatsumi@mac.com\"\n\n// First, check the credential in the app's Keychain\nif let password = try? keychain.get(username) {\n    // If found password in the Keychain,\n    // then log into the server\n} else {\n    // If not found password in the Keychain,\n    // try to read from Shared Web Credentials\n    keychain.getSharedPassword(username) { (password, error) -> () in\n        if password != nil {\n            // If found password in the Shared Web Credentials,\n            // then log into the server\n            // and save the password to the Keychain\n\n            keychain[username] = password\n        } else {\n            // If not found password either in the Keychain also Shared Web Credentials,\n            // prompt for username and password\n\n            // Log into server\n\n            // If the login is successful,\n            // save the credentials to both the Keychain and the Shared Web Credentials.\n\n            keychain[username] = inputPassword\n            keychain.setSharedPassword(inputPassword, account: username)\n        }\n    }\n}\n```\n\n#### Request all associated domain's credentials\n\n```swift\nKeychain.requestSharedWebCredential { (credentials, error) -> () in\n\n}\n```\n\n#### Generate strong random password\n\nGenerate strong random password that is in the same format used by Safari autofill (xxx-xxx-xxx-xxx).\n\n```swift\nlet password = Keychain.generatePassword() // => Nhu-GKm-s3n-pMx\n```\n\n#### How to set up Shared Web Credentials\n\n> 1. Add a com.apple.developer.associated-domains entitlement to your app. This entitlement must include all the domains with which you want to share credentials.\n>\n> 2. Add an apple-app-site-association file to your website. This file must include application identifiers for all the apps with which the site wants to share credentials, and it must be properly signed.\n>\n> 3. When the app is installed, the system downloads and verifies the site association file for each of its associated domains. If the verification is successful, the app is associated with the domain.\n\n**More details:**  \n<https://developer.apple.com/library/ios/documentation/Security/Reference/SharedWebCredentialsRef/>\n\n### :mag: Debugging\n\n#### Display all stored items if print keychain object\n\n```swift\nlet keychain = Keychain(server: \"https://github.com\", protocolType: .https)\nprint(\"\\(keychain)\")\n```\n\n```\n=>\n[\n  [authenticationType: default, key: kishikawakatsumi, server: github.com, class: internetPassword, protocol: https]\n  [authenticationType: default, key: hirohamada, server: github.com, class: internetPassword, protocol: https]\n  [authenticationType: default, key: honeylemon, server: github.com, class: internetPassword, protocol: https]\n]\n```\n\n#### Obtaining all stored keys\n\n```swift\nlet keychain = Keychain(server: \"https://github.com\", protocolType: .https)\n\nlet keys = keychain.allKeys()\nfor key in keys {\n  print(\"key: \\(key)\")\n}\n```\n\n```\n=>\nkey: kishikawakatsumi\nkey: hirohamada\nkey: honeylemon\n```\n\n#### Obtaining all stored items\n\n```swift\nlet keychain = Keychain(server: \"https://github.com\", protocolType: .https)\n\nlet items = keychain.allItems()\nfor item in items {\n  print(\"item: \\(item)\")\n}\n```\n\n```\n=>\nitem: [authenticationType: Default, key: kishikawakatsumi, server: github.com, class: InternetPassword, protocol: https]\nitem: [authenticationType: Default, key: hirohamada, server: github.com, class: InternetPassword, protocol: https]\nitem: [authenticationType: Default, key: honeylemon, server: github.com, class: InternetPassword, protocol: https]\n```\n\n## Keychain sharing capability\n\nIf you encounter the error below, you need to add an `Keychain.entitlements`.\n\n```\nOSStatus error:[-34018] Internal error when a required entitlement isn't present, client has neither application-identifier nor keychain-access-groups entitlements.\n```\n\n<img alt=\"Screen Shot 2019-10-27 at 8 08 50\" src=\"https://user-images.githubusercontent.com/40610/67627108-1a7f2f80-f891-11e9-97bc-7f7313cb63d1.png\" width=\"500\">\n\n<img src=\"https://user-images.githubusercontent.com/40610/67627072-333b1580-f890-11e9-9feb-bf507abc2724.png\" width=\"500\" />\n\n## Requirements\n\n|            | OS                                                         | Swift              |\n| ---------- | ---------------------------------------------------------- | ------------------ |\n| **v1.1.x** | iOS 7+, macOS 10.9+                                        | 1.1                |\n| **v1.2.x** | iOS 7+, macOS 10.9+                                        | 1.2                |\n| **v2.0.x** | iOS 7+, macOS 10.9+, watchOS 2+                            | 2.0                |\n| **v2.1.x** | iOS 7+, macOS 10.9+, watchOS 2+                            | 2.0                |\n| **v2.2.x** | iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+                   | 2.0, 2.1           |\n| **v2.3.x** | iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+                   | 2.0, 2.1, 2.2      |\n| **v2.4.x** | iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+                   | 2.2, 2.3           |\n| **v3.0.x** | iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+                   | 3.x                |\n| **v3.1.x** | iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+                   | 4.0, 4.1, 4.2      |\n| **v3.2.x** | iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+                   | 4.0, 4.1, 4.2, 5.0 |\n| **v4.0.x** | iOS 8+, macOS 10.9+, watchOS 2+, tvOS 9+                   | 4.0, 4.1, 4.2, 5.1 |\n| **v4.1.x** | iOS 8+, macOS 10.9+, watchOS 3+, tvOS 9+, Mac Catalyst 13+ | 4.0, 4.1, 4.2, 5.1 |\n\n## Installation\n\n### CocoaPods\n\nKeychainAccess is available through [CocoaPods](http://cocoapods.org). To install\nit, simply add the following lines to your Podfile:\n\n```ruby\nuse_frameworks!\npod 'KeychainAccess'\n```\n\n### Carthage\n\nKeychainAccess is available through [Carthage](https://github.com/Carthage/Carthage). To install\nit, simply add the following line to your Cartfile:\n\n`github \"kishikawakatsumi/KeychainAccess\"`\n\n### Swift Package Manager\n\nKeychainAccess is also available through [Swift Package Manager](https://github.com/apple/swift-package-manager/).\n\n#### Xcode\n\nSelect `File > Add Packages... > Add Package Dependency...`,\n\n<img src=\"https://user-images.githubusercontent.com/40610/67627000-2833b580-f88f-11e9-89ef-18819b1a6c67.png\" width=\"800px\" />\n\n#### CLI\n\nFirst, create `Package.swift` that its package declaration includes:\n\n```swift\n// swift-tools-version:5.0\nimport PackageDescription\n\nlet package = Package(\n    name: \"MyLibrary\",\n    products: [\n        .library(name: \"MyLibrary\", targets: [\"MyLibrary\"]),\n    ],\n    dependencies: [\n        .package(url: \"https://github.com/kishikawakatsumi/KeychainAccess.git\", from: \"3.0.0\"),\n    ],\n    targets: [\n        .target(name: \"MyLibrary\", dependencies: [\"KeychainAccess\"]),\n    ]\n)\n```\n\nThen, type\n\n```shell\n$ swift build\n```\n\n### To manually add to your project\n\n1. Add `Lib/KeychainAccess.xcodeproj` to your project\n2. Link `KeychainAccess.framework` with your target\n3. Add `Copy Files Build Phase` to include the framework to your application bundle\n\n_See [iOS Example Project](https://github.com/kishikawakatsumi/KeychainAccess/tree/master/Examples/Example-iOS) as reference._\n\n<img src=\"https://github.com/kishikawakatsumi/KeychainAccess/assets/40610/b7a46cfb-714d-47d5-84ea-6a80f640e03d\" width=\"800px\" />\n\n## Author\n\nkishikawa katsumi, kishikawakatsumi@mac.com\n\n## License\n\nKeychainAccess is available under the MIT license. See the LICENSE file for more info.\n",
        "releases": [
            {
                "name": "v4.2.2",
                "date": "2021-03-01T18:09:33Z"
            },
            {
                "name": "v4.2.1",
                "date": "2020-09-18T22:15:36Z"
            },
            {
                "name": "v4.2.0",
                "date": "2020-04-29T07:55:05Z"
            },
            {
                "name": "v4.1.0",
                "date": "2019-10-29T04:39:42Z"
            },
            {
                "name": "v4.0.0",
                "date": "2019-10-28T05:03:31Z"
            },
            {
                "name": "v3.2.1",
                "date": "2019-10-20T19:25:04Z"
            },
            {
                "name": "",
                "date": "2019-03-31T20:36:17Z"
            },
            {
                "name": "v3.1.2",
                "date": "2018-10-07T12:30:14Z"
            },
            {
                "name": "v3.1.1",
                "date": "2018-04-09T17:20:00Z"
            },
            {
                "name": "v3.1.0",
                "date": "2017-09-25T17:45:51Z"
            },
            {
                "name": "V3.0.2",
                "date": "2017-04-03T16:33:26Z"
            },
            {
                "name": "v3.0.1",
                "date": "2016-10-15T08:14:18Z"
            },
            {
                "name": "v3.0.0",
                "date": "2016-09-15T04:00:04Z"
            },
            {
                "name": "v2.4.0",
                "date": "2016-09-14T06:02:29Z"
            },
            {
                "name": "v2.3.6",
                "date": "2016-07-11T09:36:38Z"
            },
            {
                "name": "v2.3.5",
                "date": "2016-03-29T07:08:59Z"
            },
            {
                "name": "v2.3.4",
                "date": "2016-03-16T19:27:01Z"
            },
            {
                "name": "v2.3.3",
                "date": "2015-12-12T21:17:47Z"
            },
            {
                "name": "v2.3.2",
                "date": "2015-12-04T13:40:43Z"
            },
            {
                "name": "v2.3.1",
                "date": "2015-11-01T18:08:19Z"
            },
            {
                "name": "",
                "date": "2015-10-31T21:13:21Z"
            },
            {
                "name": "",
                "date": "2015-10-25T09:56:52Z"
            },
            {
                "name": "v2.2.0",
                "date": "2015-10-12T13:20:54Z"
            },
            {
                "name": "v2.1.0",
                "date": "2015-10-12T13:09:13Z"
            },
            {
                "name": "v2.0.1",
                "date": "2015-10-04T21:11:42Z"
            },
            {
                "name": "v2.0.0",
                "date": "2015-09-27T14:42:55Z"
            },
            {
                "name": "v1.2.1",
                "date": "2015-06-01T20:04:51Z"
            },
            {
                "name": "",
                "date": "2015-04-26T10:18:35Z"
            },
            {
                "name": "",
                "date": "2015-01-18T22:17:36Z"
            },
            {
                "name": "",
                "date": "2015-01-02T19:58:00Z"
            },
            {
                "name": "",
                "date": "2015-04-26T14:01:15Z"
            }
        ]
    }
}