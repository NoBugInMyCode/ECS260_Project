{
    "https://api.github.com/repos/exaloop/codon": {
        "forks": 525,
        "watchers": 15300,
        "stars": 15300,
        "languages": {
            "C++": 1689778,
            "Python": 1473741,
            "CMake": 25186,
            "Shell": 8684,
            "C": 5985,
            "Cython": 1834
        },
        "commits": [
            "2024-11-13T16:30:00Z",
            "2024-10-01T19:35:11Z",
            "2024-08-23T23:32:26Z",
            "2024-08-23T22:07:02Z",
            "2024-08-23T22:04:15Z",
            "2024-08-23T20:42:11Z",
            "2024-08-23T19:25:17Z",
            "2024-08-23T17:52:34Z",
            "2024-08-23T14:18:13Z",
            "2024-08-14T20:13:29Z",
            "2024-08-05T21:31:45Z",
            "2024-08-05T18:00:05Z",
            "2024-08-05T03:24:57Z",
            "2024-07-30T23:35:27Z",
            "2024-07-18T17:56:19Z",
            "2024-07-18T12:09:30Z",
            "2024-05-22T14:22:50Z",
            "2024-05-09T19:57:44Z",
            "2024-04-27T16:23:48Z",
            "2024-04-03T16:42:42Z",
            "2024-04-03T15:55:10Z",
            "2024-03-02T21:30:03Z",
            "2024-02-25T16:42:31Z",
            "2024-02-23T00:31:19Z",
            "2024-02-22T01:33:12Z",
            "2024-02-17T20:31:17Z",
            "2024-02-16T03:37:17Z",
            "2024-02-07T15:36:07Z",
            "2024-02-06T02:07:16Z",
            "2024-02-06T01:12:25Z"
        ],
        "creation_date": "2021-09-27T17:56:34Z",
        "contributors": 14,
        "topics": [
            "compiler",
            "gpu-programming",
            "high-performance",
            "llvm",
            "parallel-programming",
            "python"
        ],
        "subscribers": 137,
        "readme": "<p align=\"center\">\n <img src=\"docs/img/codon.png?raw=true\" width=\"600\" alt=\"Codon\"/>\n</p>\n\n<h3 align=\"center\">\n  <a href=\"https://docs.exaloop.io/codon\" target=\"_blank\"><b>Docs</b></a>\n  &nbsp;&#183;&nbsp;\n  <a href=\"https://docs.exaloop.io/codon/general/faq\" target=\"_blank\"><b>FAQ</b></a>\n  &nbsp;&#183;&nbsp;\n  <a href=\"https://blog.exaloop.io\" target=\"_blank\"><b>Blog</b></a>\n  &nbsp;&#183;&nbsp;\n  <a href=\"https://join.slack.com/t/exaloop/shared_invite/zt-1jusa4kc0-T3rRWrrHDk_iZ1dMS8s0JQ\" target=\"_blank\">Chat</a>\n  &nbsp;&#183;&nbsp;\n  <a href=\"https://docs.exaloop.io/codon/general/roadmap\" target=\"_blank\">Roadmap</a>\n  &nbsp;&#183;&nbsp;\n  <a href=\"https://exaloop.io/benchmarks\" target=\"_blank\">Benchmarks</a>\n</h3>\n\n<a href=\"https://github.com/exaloop/codon/actions/workflows/ci.yml\">\n  <img src=\"https://github.com/exaloop/codon/actions/workflows/ci.yml/badge.svg\"\n       alt=\"Build Status\">\n</a>\n\n## What is Codon?\n\nCodon is a high-performance Python implementation that compiles to native machine code without\nany runtime overhead. Typical speedups over vanilla Python are on the order of 10-100x or more, on\na single thread. Codon's performance is typically on par with (and sometimes better than) that of\nC/C++. Unlike Python, Codon supports native multithreading, which can lead to speedups many times\nhigher still.\n\n*Think of Codon as Python reimagined for static, ahead-of-time compilation, built from the ground\nup with best possible performance in mind.*\n\n### Goals\n\n- :bulb: **No learning curve:** Be as close to CPython as possible in terms of syntax, semantics and libraries\n- :rocket: **Top-notch performance:** At *least* on par with low-level languages like C, C++ or Rust\n- :computer: **Hardware support:** Full, seamless support for multicore programming, multithreading (no GIL!), GPU and more\n- :chart_with_upwards_trend: **Optimizations:** Comprehensive optimization framework that can target high-level Python constructs\n  and libraries\n- :battery: **Interoperability:** Full interoperability with Python's ecosystem of packages and libraries\n\n### Non-goals\n\n- :x: *Drop-in replacement for CPython:* Codon is not a drop-in replacement for CPython. There are some\n  aspects of Python that are not suitable for static compilation \u2014 we don't support these in Codon.\n  There are ways to use Codon in larger Python codebases via its [JIT decorator](https://docs.exaloop.io/codon/interoperability/decorator)\n  or [Python extension backend](https://docs.exaloop.io/codon/interoperability/pyext). Codon also supports\n  calling any Python module via its [Python interoperability](https://docs.exaloop.io/codon/interoperability/python).\n  See also [*\"Differences with Python\"*](https://docs.exaloop.io/codon/general/differences) in the docs.\n\n- :x: *New syntax and language constructs:* We try to avoid adding new syntax, keywords or other language\n  features as much as possible. While Codon does add some new syntax in a couple places (e.g. to express\n  parallelism), we try to make it as familiar and intuitive as possible.\n\n## Install\n\nPre-built binaries for Linux (x86_64) and macOS (x86_64 and arm64) are available alongside [each release](https://github.com/exaloop/codon/releases).\nDownload and install with:\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://exaloop.io/install.sh)\"\n```\n\nOr you can [build from source](https://docs.exaloop.io/codon/advanced/build).\n\n## Examples\n\nCodon is a Python-compatible language, and many Python programs will work with few if any modifications:\n\n```python\ndef fib(n):\n    a, b = 0, 1\n    while a < n:\n        print(a, end=' ')\n        a, b = b, a+b\n    print()\nfib(1000)\n```\n\nThe `codon` compiler has a number of options and modes:\n\n```bash\n# compile and run the program\ncodon run fib.py\n# 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987\n\n# compile and run the program with optimizations enabled\ncodon run -release fib.py\n# 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987\n\n# compile to executable with optimizations enabled\ncodon build -release -exe fib.py\n./fib\n# 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987\n\n# compile to LLVM IR file with optimizations enabled\ncodon build -release -llvm fib.py\n# outputs file fib.ll\n```\n\nSee [the docs](https://docs.exaloop.io/codon/general/intro) for more options and examples.\n\nYou can import and use any Python package from Codon. For example:\n\n```python\nfrom python import matplotlib.pyplot as plt\ndata = [x**2 for x in range(10)]\nplt.plot(data)\nplt.show()\n```\n\n(Just remember to set the `CODON_PYTHON` environment variable to the CPython shared library,\nas explained in the [the docs](https://docs.exaloop.io/codon/interoperability/python).)\n\nThis prime counting example showcases Codon's [OpenMP](https://www.openmp.org/) support, enabled\nwith the addition of one line. The `@par` annotation tells the compiler to parallelize the\nfollowing `for`-loop, in this case using a dynamic schedule, chunk size of 100, and 16 threads.\n\n```python\nfrom sys import argv\n\ndef is_prime(n):\n    factors = 0\n    for i in range(2, n):\n        if n % i == 0:\n            factors += 1\n    return factors == 0\n\nlimit = int(argv[1])\ntotal = 0\n\n@par(schedule='dynamic', chunk_size=100, num_threads=16)\nfor i in range(2, limit):\n    if is_prime(i):\n        total += 1\n\nprint(total)\n```\n\nCodon supports writing and executing GPU kernels. Here's an example that computes the\n[Mandelbrot set](https://en.wikipedia.org/wiki/Mandelbrot_set):\n\n```python\nimport gpu\n\nMAX    = 1000  # maximum Mandelbrot iterations\nN      = 4096  # width and height of image\npixels = [0 for _ in range(N * N)]\n\ndef scale(x, a, b):\n    return a + (x/N)*(b - a)\n\n@gpu.kernel\ndef mandelbrot(pixels):\n    idx = (gpu.block.x * gpu.block.dim.x) + gpu.thread.x\n    i, j = divmod(idx, N)\n    c = complex(scale(j, -2.00, 0.47), scale(i, -1.12, 1.12))\n    z = 0j\n    iteration = 0\n\n    while abs(z) <= 2 and iteration < MAX:\n        z = z**2 + c\n        iteration += 1\n\n    pixels[idx] = int(255 * iteration/MAX)\n\nmandelbrot(pixels, grid=(N*N)//1024, block=1024)\n```\n\nGPU programming can also be done using the `@par` syntax with `@par(gpu=True)`.\n\n## Documentation\n\nPlease see [docs.exaloop.io](https://docs.exaloop.io/codon) for in-depth documentation.\n",
        "releases": [
            {
                "name": "v0.17.0",
                "date": "2024-08-23T23:32:49Z"
            },
            {
                "name": "v0.16.3",
                "date": "2023-08-12T22:03:29Z"
            },
            {
                "name": "v0.16.2",
                "date": "2023-07-05T16:05:00Z"
            },
            {
                "name": "v0.16.1",
                "date": "2023-05-23T23:30:57Z"
            },
            {
                "name": "v0.16.0",
                "date": "2023-04-13T21:25:36Z"
            },
            {
                "name": "v0.15.5",
                "date": "2023-02-06T03:28:58Z"
            },
            {
                "name": "v0.15.4",
                "date": "2023-01-17T16:09:20Z"
            },
            {
                "name": "v0.15.3",
                "date": "2022-12-18T20:05:51Z"
            },
            {
                "name": "v0.15.2",
                "date": "2022-12-13T22:23:57Z"
            },
            {
                "name": "v0.15.1",
                "date": "2022-12-05T05:02:16Z"
            }
        ]
    }
}