{
    "https://api.github.com/repos/simdjson/simdjson": {
        "forks": 1035,
        "watchers": 19605,
        "stars": 19605,
        "languages": {
            "C++": 10080301,
            "C": 113157,
            "CMake": 67234,
            "Python": 39977,
            "Shell": 25427,
            "Ruby": 666,
            "JavaScript": 497,
            "Makefile": 301,
            "Dockerfile": 176
        },
        "commits": [
            "2025-01-16T18:33:53Z",
            "2025-01-15T02:33:29Z",
            "2025-01-09T16:01:48Z",
            "2025-01-09T02:29:11Z",
            "2025-01-09T01:35:30Z",
            "2025-01-09T01:28:25Z",
            "2025-01-07T00:33:53Z",
            "2025-01-07T00:23:09Z",
            "2025-01-03T16:01:04Z",
            "2024-12-31T19:34:13Z",
            "2024-12-22T20:00:58Z",
            "2024-12-17T21:27:31Z",
            "2024-12-12T18:38:22Z",
            "2024-12-10T16:47:21Z",
            "2024-12-10T02:36:43Z",
            "2024-12-10T02:36:12Z",
            "2024-12-10T02:35:21Z",
            "2024-12-09T15:20:33Z",
            "2024-12-07T16:13:00Z",
            "2024-12-07T16:12:25Z",
            "2024-12-07T16:12:14Z",
            "2024-12-06T03:05:39Z",
            "2024-12-03T01:24:24Z",
            "2024-12-03T01:23:28Z",
            "2024-12-02T05:06:20Z",
            "2024-12-01T01:43:20Z",
            "2024-11-08T16:53:34Z",
            "2024-11-01T22:11:43Z",
            "2024-11-01T16:23:35Z",
            "2024-11-01T16:15:40Z"
        ],
        "creation_date": "2018-03-23T00:49:18Z",
        "contributors": 30,
        "topics": [
            "aarch64",
            "arm",
            "arm64",
            "avx2",
            "avx512",
            "c-plus-plus",
            "clang",
            "clang-cl",
            "cpp11",
            "gcc-compiler",
            "json",
            "json-parser",
            "json-pointer",
            "loongarch",
            "neon",
            "simd",
            "sse42",
            "vs2019",
            "x64"
        ],
        "subscribers": 243,
        "readme": "\n[![Ubuntu 20.04 CI](https://github.com/simdjson/simdjson/workflows/Ubuntu%2020.04%20CI%20(GCC%209)/badge.svg)](https://simdjson.org/plots.html)\n[![Fuzzing Status](https://oss-fuzz-build-logs.storage.googleapis.com/badges/simdjson.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:simdjson)\n[![][license img]][license]\n\n[![Doxygen Documentation](https://img.shields.io/badge/docs-doxygen-green.svg)](https://simdjson.github.io/simdjson/)\n\nsimdjson : Parsing gigabytes of JSON per second\n===============================================\n\n<img src=\"images/logo.png\" width=\"10%\" style=\"float: right\">\nJSON is everywhere on the Internet. Servers spend a *lot* of time parsing it. We need a fresh\napproach. The simdjson library uses commonly available SIMD instructions and microparallel algorithms\nto parse JSON 4x  faster than RapidJSON and 25x faster than JSON for Modern C++.\n\n* **Fast:** Over 4x faster than commonly used production-grade JSON parsers.\n* **Record Breaking Features:** Minify JSON  at 6 GB/s, validate UTF-8  at 13 GB/s,  NDJSON at 3.5 GB/s.\n* **Easy:** First-class, easy to use and carefully documented APIs.\n* **Strict:** Full JSON and UTF-8 validation, lossless parsing. Performance with no compromises.\n* **Automatic:** Selects a CPU-tailored parser at runtime. No configuration needed.\n* **Reliable:** From memory allocation to error handling, simdjson's design avoids surprises.\n* **Peer Reviewed:** Our research appears in venues like VLDB Journal, Software: Practice and Experience.\n\nThis library is part of the [Awesome Modern C++](https://awesomecpp.com) list.\n\nTable of Contents\n-----------------\n\n* [Real-world usage](#real-world-usage)\n* [Quick Start](#quick-start)\n* [Documentation](#documentation)\n* [Godbolt](#godbolt)\n* [Performance results](#performance-results)\n* [Packages](#packages)\n* [Bindings and Ports of simdjson](#bindings-and-ports-of-simdjson)\n* [About simdjson](#about-simdjson)\n* [Funding](#funding)\n* [Contributing to simdjson](#contributing-to-simdjson)\n* [License](#license)\n\n\nReal-world usage\n----------------\n\n- [Node.js](https://nodejs.org/)\n- [ClickHouse](https://github.com/ClickHouse/ClickHouse)\n- [Meta Velox](https://velox-lib.io)\n- [Google Pax](https://github.com/google/paxml)\n- [milvus](https://github.com/milvus-io/milvus)\n- [QuestDB](https://questdb.io/blog/questdb-release-8-0-3/)\n- [Clang Build Analyzer](https://github.com/aras-p/ClangBuildAnalyzer)\n- [Shopify HeapProfiler](https://github.com/Shopify/heap-profiler)\n- [StarRocks](https://github.com/StarRocks/starrocks)\n- [Microsoft FishStore](https://github.com/microsoft/FishStore)\n- [Intel PCM](https://github.com/intel/pcm)\n- [WatermelonDB](https://github.com/Nozbe/WatermelonDB)\n- [Apache Doris](https://github.com/apache/doris)\n- [Dgraph](https://github.com/dgraph-io/dgraph)\n- [UJRPC](https://github.com/unum-cloud/ujrpc)\n- [fastgltf](https://github.com/spnda/fastgltf)\n- [vast](https://github.com/tenzir/vast)\n- [ada-url](https://github.com/ada-url/ada)\n- [fastgron](https://github.com/adamritter/fastgron)\n- [WasmEdge](https://wasmedge.org)\n\nIf you are planning to use simdjson in a product, please work from one of our releases.\n\nQuick Start\n-----------\n\nThe simdjson library is easily consumable with a single .h and .cpp file.\n\n0. Prerequisites: `g++` (version 7 or better) or `clang++` (version 6 or better), and a 64-bit\n   system with a command-line shell (e.g., Linux, macOS, freeBSD). We also support programming\n   environments like Visual Studio and Xcode, but different steps are needed. Users of clang++ may need to specify the C++ version (e.g., `c++ -std=c++17`) since clang++ tends to default on C++98.\n1. Pull [simdjson.h](singleheader/simdjson.h) and [simdjson.cpp](singleheader/simdjson.cpp) into a\n   directory, along with the sample file [twitter.json](jsonexamples/twitter.json). You can download them with the `wget` utility:\n\n   ```\n   wget https://raw.githubusercontent.com/simdjson/simdjson/master/singleheader/simdjson.h https://raw.githubusercontent.com/simdjson/simdjson/master/singleheader/simdjson.cpp https://raw.githubusercontent.com/simdjson/simdjson/master/jsonexamples/twitter.json\n   ```\n2. Create `quickstart.cpp`:\n\n```c++\n#include <iostream>\n#include \"simdjson.h\"\nusing namespace simdjson;\nint main(void) {\n    ondemand::parser parser;\n    padded_string json = padded_string::load(\"twitter.json\");\n    ondemand::document tweets = parser.iterate(json);\n    std::cout << uint64_t(tweets[\"search_metadata\"][\"count\"]) << \" results.\" << std::endl;\n}\n```\n3. `c++ -o quickstart quickstart.cpp simdjson.cpp`\n4. `./quickstart`\n\n  ```\n   100 results.\n  ```\n\n\nDocumentation\n-------------\n\nUsage documentation is available:\n\n* [Basics](doc/basics.md) is an overview of how to use simdjson and its APIs.\n* [Performance](doc/performance.md) shows some more advanced scenarios and how to tune for them.\n* [Implementation Selection](doc/implementation-selection.md) describes runtime CPU detection and\n  how you can work with it.\n* [API](https://simdjson.github.io/simdjson/) contains the automatically generated API documentation.\n\nGodbolt\n-------------\n\nSome users may want to browse code along with the compiled assembly. You want to check out the following lists of examples:\n* [simdjson examples with errors handled through exceptions](https://godbolt.org/z/7G5qE4sr9)\n* [simdjson examples with errors without exceptions](https://godbolt.org/z/e9dWb9E4v)\n\nPerformance results\n-------------------\n\nThe simdjson library uses three-quarters less instructions than state-of-the-art parser [RapidJSON](https://rapidjson.org). To our knowledge, simdjson is the first fully-validating JSON parser\nto run at [gigabytes per second](https://en.wikipedia.org/wiki/Gigabyte) (GB/s) on commodity processors. It can parse millions of JSON documents per second on a single core.\n\nThe following figure represents parsing speed in GB/s for parsing various files\non an Intel Skylake processor (3.4 GHz) using the GNU GCC 10 compiler (with the -O3 flag).\nWe compare against the best and fastest C++ libraries on benchmarks that load and process the data.\nThe simdjson library offers full unicode ([UTF-8](https://en.wikipedia.org/wiki/UTF-8)) validation and exact\nnumber parsing.\n\n<img src=\"doc/rome.png\" width=\"60%\">\n\nThe simdjson library offers high speed whether it processes tiny files (e.g., 300 bytes)\nor larger files (e.g., 3MB). The following plot presents parsing\nspeed for [synthetic files over various sizes generated with a script](https://github.com/simdjson/simdjson_experiments_vldb2019/blob/master/experiments/growing/gen.py) on a 3.4 GHz Skylake processor (GNU GCC 9, -O3).\n\n<img src=\"doc/growing.png\" width=\"60%\">\n\n[All our experiments are reproducible](https://github.com/simdjson/simdjson_experiments_vldb2019).\n\n\nFor NDJSON files, we can exceed 3 GB/s with [our  multithreaded parsing functions](https://github.com/simdjson/simdjson/blob/master/doc/parse_many.md).\n\n\nPackages\n------------------------------\n[![Packaging status](https://repology.org/badge/vertical-allrepos/simdjson.svg)](https://repology.org/project/simdjson/versions)\n\n\nBindings and Ports of simdjson\n------------------------------\n\nWe distinguish between \"bindings\" (which just wrap the C++ code) and a port to another programming language (which reimplements everything).\n\n- [ZippyJSON](https://github.com/michaeleisel/zippyjson): Swift bindings for the simdjson project.\n- [libpy_simdjson](https://github.com/gerrymanoim/libpy_simdjson/): high-speed Python bindings for simdjson using [libpy](https://github.com/quantopian/libpy).\n- [pysimdjson](https://github.com/TkTech/pysimdjson): Python bindings for the simdjson project.\n- [cysimdjson](https://github.com/TeskaLabs/cysimdjson): high-speed Python bindings for the simdjson project.\n- [simdjson-rs](https://github.com/simd-lite): Rust port.\n- [simdjson-rust](https://github.com/SunDoge/simdjson-rust): Rust wrapper (bindings).\n- [SimdJsonSharp](https://github.com/EgorBo/SimdJsonSharp): C# version for .NET Core (bindings and full port).\n- [simdjson_nodejs](https://github.com/luizperes/simdjson_nodejs): Node.js bindings for the simdjson project.\n- [simdjson_php](https://github.com/crazyxman/simdjson_php): PHP bindings for the simdjson project.\n- [simdjson_ruby](https://github.com/saka1/simdjson_ruby): Ruby bindings for the simdjson project.\n- [fast_jsonparser](https://github.com/anilmaurya/fast_jsonparser): Ruby bindings for the simdjson project.\n- [simdjson-go](https://github.com/minio/simdjson-go): Go port using Golang assembly.\n- [rcppsimdjson](https://github.com/eddelbuettel/rcppsimdjson): R bindings.\n- [simdjson_erlang](https://github.com/ChomperT/simdjson_erlang): erlang bindings.\n- [simdjsone](https://github.com/saleyn/simdjsone): erlang bindings.\n- [lua-simdjson](https://github.com/FourierTransformer/lua-simdjson): lua bindings.\n- [hermes-json](https://hackage.haskell.org/package/hermes-json): haskell bindings.\n- [simdjzon](https://github.com/travisstaloch/simdjzon): zig port.\n- [JSON-Simd](https://github.com/rawleyfowler/JSON-simd): Raku bindings.\n- [JSON::SIMD](https://metacpan.org/pod/JSON::SIMD): Perl bindings; fully-featured JSON module that uses simdjson for decoding.\n- [gemmaJSON](https://github.com/sainttttt/gemmaJSON): Nim JSON parser based on simdjson bindings.\n- [simdjson-java](https://github.com/simdjson/simdjson-java): Java port.\n\nAbout simdjson\n--------------\n\nThe simdjson library takes advantage of modern microarchitectures, parallelizing with SIMD vector\ninstructions, reducing branch misprediction, and reducing data dependency to take advantage of each\nCPU's multiple execution cores.\n\nOur default front-end is called On-Demand, and we wrote a paper about it:\n\n- John Keiser, Daniel Lemire, [On-Demand JSON: A Better Way to Parse Documents?](http://arxiv.org/abs/2312.17149), Software: Practice and Experience 54 (6), 2024.\n\nSome people [enjoy reading the first (2019) simdjson paper](https://arxiv.org/abs/1902.08318): A description of the design\nand implementation of simdjson is in our research article:\n- Geoff Langdale, Daniel Lemire, [Parsing Gigabytes of JSON per Second](https://arxiv.org/abs/1902.08318), VLDB Journal 28 (6), 2019.\n\nWe have an in-depth paper focused on the UTF-8 validation:\n\n- John Keiser, Daniel Lemire, [Validating UTF-8 In Less Than One Instruction Per Byte](https://arxiv.org/abs/2010.03090), Software: Practice & Experience 51 (5), 2021.\n\nWe also have an informal [blog post providing some background and context](https://branchfree.org/2019/02/25/paper-parsing-gigabytes-of-json-per-second/).\n\nFor the video inclined, <br />\n[![simdjson at QCon San Francisco 2019](http://img.youtube.com/vi/wlvKAT7SZIQ/0.jpg)](http://www.youtube.com/watch?v=wlvKAT7SZIQ)<br />\n(It was the best voted talk, we're kinda proud of it.)\n\nFunding\n-------\n\nThe work is supported by the Natural Sciences and Engineering Research Council of Canada under grants\nRGPIN-2017-03910 and RGPIN-2024-03787.\n\n[license]: LICENSE\n[license img]: https://img.shields.io/badge/License-Apache%202-blue.svg\n\nContributing to simdjson\n------------------------\n\nHead over to [CONTRIBUTING.md](CONTRIBUTING.md) for information on contributing to simdjson, and\n[HACKING.md](HACKING.md) for information on source, building, and architecture/design.\n\nLicense\n-------\n\nThis code is made available under the [Apache License 2.0](https://www.apache.org/licenses/LICENSE-2.0.html).\n\nUnder Windows, we build some tools using the windows/dirent_portable.h file (which is outside our library code): it is under the liberal (business-friendly) MIT license.\n\nFor compilers that do not support [C++17](https://en.wikipedia.org/wiki/C%2B%2B17), we bundle the string-view library which is published under the [Boost license](http://www.boost.org/LICENSE_1_0.txt). Like the Apache license, the Boost license is a permissive license allowing commercial redistribution.\n\nFor efficient number serialization, we bundle Florian Loitsch's implementation of the Grisu2 algorithm for binary to decimal floating-point numbers. The implementation was slightly modified by JSON for Modern C++ library. Both Florian Loitsch's implementation and JSON for Modern C++ are provided under the MIT license.\n\nFor runtime dispatching, we use some code from the PyTorch project licensed under 3-clause BSD.\n",
        "releases": [
            {
                "name": "Version 3.11.6",
                "date": "2025-01-15T02:36:26Z"
            },
            {
                "name": "Version 3.11.5",
                "date": "2025-01-09T16:03:39Z"
            },
            {
                "name": "Version 3.11.4",
                "date": "2025-01-07T00:34:56Z"
            },
            {
                "name": "Version 3.11.3",
                "date": "2024-12-12T18:40:49Z"
            },
            {
                "name": "Version 3.11.2",
                "date": "2024-12-10T02:44:28Z"
            },
            {
                "name": "Version 3.11.1",
                "date": "2024-12-07T16:14:01Z"
            },
            {
                "name": "Version 3.11.0",
                "date": "2024-12-06T03:10:33Z"
            },
            {
                "name": "Version 3.10.1",
                "date": "2024-08-26T13:39:09Z"
            },
            {
                "name": "Version 3.10.0",
                "date": "2024-08-01T13:34:44Z"
            },
            {
                "name": "Version 3.9.5",
                "date": "2024-07-04T20:28:36Z"
            },
            {
                "name": "Version 3.9.4",
                "date": "2024-06-11T19:39:06Z"
            },
            {
                "name": "Version 3.9.3",
                "date": "2024-05-30T14:55:42Z"
            },
            {
                "name": "Version 3.9.2",
                "date": "2024-05-07T23:16:54Z"
            },
            {
                "name": "Version 3.9.1",
                "date": "2024-04-05T19:20:15Z"
            },
            {
                "name": "Version 3.9.0",
                "date": "2024-04-04T18:10:04Z"
            },
            {
                "name": "v3.8.0",
                "date": "2024-03-10T17:27:55Z"
            },
            {
                "name": "Version 3.7.0",
                "date": "2024-02-23T21:58:38Z"
            },
            {
                "name": "Version 3.6.4",
                "date": "2024-01-29T15:45:05Z"
            },
            {
                "name": "Version 3.6.3",
                "date": "2023-12-08T17:10:47Z"
            },
            {
                "name": "Version 3.6.2",
                "date": "2023-12-01T18:57:21Z"
            },
            {
                "name": "Version 3.6.1",
                "date": "2023-11-30T23:14:42Z"
            },
            {
                "name": "Version 3.6.0",
                "date": "2023-10-30T16:53:42Z"
            },
            {
                "name": "Version 3.5.0",
                "date": "2023-10-28T01:01:10Z"
            },
            {
                "name": "Version 3.4.0",
                "date": "2023-10-25T23:38:00Z"
            },
            {
                "name": "Version 3.3.0",
                "date": "2023-09-20T14:15:58Z"
            },
            {
                "name": "Version 3.2.3",
                "date": "2023-08-22T18:07:38Z"
            },
            {
                "name": "Version 3.2.2",
                "date": "2023-08-02T20:05:13Z"
            },
            {
                "name": "Version 3.2.1",
                "date": "2023-07-07T01:51:27Z"
            },
            {
                "name": "Version 3.2.0",
                "date": "2023-06-15T13:24:56Z"
            },
            {
                "name": "Version 3.1.8",
                "date": "2023-05-14T21:31:11Z"
            },
            {
                "name": "Version 3.1.7",
                "date": "2023-04-08T20:15:53Z"
            },
            {
                "name": "Version 3.1.6",
                "date": "2023-03-14T01:45:51Z"
            },
            {
                "name": "Version 3.1.5",
                "date": "2023-03-09T16:24:51Z"
            },
            {
                "name": "Version 3.1.4",
                "date": "2023-03-09T16:14:00Z"
            },
            {
                "name": "Version 3.1.3",
                "date": "2023-03-02T19:28:54Z"
            },
            {
                "name": "Version 3.1.2",
                "date": "2023-02-23T01:40:05Z"
            },
            {
                "name": "Version 3.1.1",
                "date": "2023-02-06T23:32:15Z"
            },
            {
                "name": "Version 3.1.0",
                "date": "2023-01-21T23:08:24Z"
            },
            {
                "name": "Version 3.0.1",
                "date": "2022-11-23T16:02:21Z"
            },
            {
                "name": "Version 3.0.0",
                "date": "2022-10-06T15:52:51Z"
            },
            {
                "name": "v2.2.3",
                "date": "2022-10-02T20:32:55Z"
            },
            {
                "name": "Version 2.2.2",
                "date": "2022-07-29T01:47:37Z"
            },
            {
                "name": "Version 2.2.1",
                "date": "2022-07-19T20:48:10Z"
            },
            {
                "name": "Version 2.2.0",
                "date": "2022-07-05T01:57:47Z"
            },
            {
                "name": "Version 2.1.0",
                "date": "2022-06-30T15:50:58Z"
            },
            {
                "name": "Version 2.0.4",
                "date": "2022-06-15T19:28:56Z"
            },
            {
                "name": "Version 2.0.3",
                "date": "2022-06-02T17:59:17Z"
            },
            {
                "name": "Version 2.0.2",
                "date": "2022-06-02T13:21:46Z"
            },
            {
                "name": "Version 2.0.1",
                "date": "2022-05-26T20:27:59Z"
            },
            {
                "name": "Version 2.0.0",
                "date": "2022-05-25T15:49:38Z"
            },
            {
                "name": "Version 1.1.0",
                "date": "2022-05-17T22:14:24Z"
            },
            {
                "name": "Version 1.0.2",
                "date": "2021-10-27T23:32:21Z"
            },
            {
                "name": "Version 1.0.1",
                "date": "2021-10-20T16:20:33Z"
            },
            {
                "name": "Version 1.0",
                "date": "2021-09-07T21:55:20Z"
            },
            {
                "name": "Version 0.9.7",
                "date": "2021-07-31T18:01:23Z"
            },
            {
                "name": "Version 0.9.6",
                "date": "2021-06-06T21:55:08Z"
            },
            {
                "name": "Version 0.9.5",
                "date": "2021-05-28T00:38:59Z"
            },
            {
                "name": "Version 0.9.4",
                "date": "2021-05-20T20:26:21Z"
            },
            {
                "name": "Version 0.9.3",
                "date": "2021-05-14T13:24:42Z"
            },
            {
                "name": "Version 0.9.2",
                "date": "2021-04-01T15:13:59Z"
            },
            {
                "name": "Version 0.9.1",
                "date": "2021-03-18T15:32:41Z"
            },
            {
                "name": "Version 0.9.0",
                "date": "2021-03-17T15:09:35Z"
            },
            {
                "name": "Version 0.8.2",
                "date": "2021-02-11T00:03:43Z"
            },
            {
                "name": "Version 0.8.1",
                "date": "2021-01-28T14:50:29Z"
            },
            {
                "name": "Version 0.8.0",
                "date": "2021-01-22T17:09:12Z"
            },
            {
                "name": "Version 0.7.1",
                "date": "2020-12-14T15:46:43Z"
            },
            {
                "name": "Version 0.7.0",
                "date": "2020-12-05T00:06:36Z"
            },
            {
                "name": "Version 0.6.1",
                "date": "2020-11-04T03:20:30Z"
            },
            {
                "name": "Version 0.6.0",
                "date": "2020-10-23T13:35:51Z"
            },
            {
                "name": "Version 0.5.0",
                "date": "2020-08-19T22:13:57Z"
            },
            {
                "name": "Version 0.4.7",
                "date": "2020-07-17T19:19:16Z"
            },
            {
                "name": "Version 0.4.6",
                "date": "2020-07-01T18:16:30Z"
            },
            {
                "name": "Version 0.4.5",
                "date": "2020-06-30T23:37:56Z"
            },
            {
                "name": "Version 0.4.4",
                "date": "2020-06-30T13:42:59Z"
            },
            {
                "name": "Version 0.4.3",
                "date": "2020-06-30T01:14:14Z"
            },
            {
                "name": "Version 0.4.2",
                "date": "2020-06-28T17:14:14Z"
            },
            {
                "name": "Version 0.4.1",
                "date": "2020-06-27T01:08:51Z"
            },
            {
                "name": "Version 0.4.0",
                "date": "2020-06-24T00:57:28Z"
            },
            {
                "name": "Version 0.3.1",
                "date": "2020-04-02T23:28:20Z"
            },
            {
                "name": "Version 0.3.0 ",
                "date": "2020-03-31T21:48:17Z"
            }
        ]
    }
}