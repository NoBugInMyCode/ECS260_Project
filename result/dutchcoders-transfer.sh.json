{
    "https://api.github.com/repos/dutchcoders/transfer.sh": {
        "forks": 1539,
        "watchers": 15378,
        "stars": 15378,
        "languages": {
            "Go": 112490,
            "Nix": 12206,
            "Shell": 8887,
            "Dockerfile": 1366,
            "Makefile": 92
        },
        "commits": [
            "2024-10-27T18:10:26Z",
            "2024-10-26T08:38:19Z",
            "2024-09-26T08:21:26Z",
            "2024-06-11T11:46:33Z",
            "2024-03-20T00:02:57Z",
            "2024-03-15T06:16:01Z",
            "2024-02-22T09:39:39Z",
            "2024-02-22T09:38:42Z",
            "2024-02-13T11:29:42Z",
            "2024-01-03T11:42:43Z",
            "2023-12-04T05:58:11Z",
            "2023-12-04T05:54:54Z",
            "2023-12-04T05:36:57Z",
            "2023-10-25T22:57:28Z",
            "2023-10-13T21:52:59Z",
            "2023-10-12T09:59:57Z",
            "2023-06-20T18:07:19Z",
            "2023-06-06T10:59:21Z",
            "2023-05-24T09:37:06Z",
            "2023-05-23T02:54:02Z",
            "2023-05-19T10:01:54Z",
            "2023-05-19T05:51:40Z",
            "2023-05-19T04:09:37Z",
            "2023-05-19T02:57:12Z",
            "2023-05-11T16:23:58Z",
            "2023-04-29T11:07:52Z",
            "2023-04-05T14:30:58Z",
            "2023-03-16T01:25:46Z",
            "2023-03-12T04:34:41Z",
            "2023-03-12T02:52:45Z"
        ],
        "creation_date": "2014-10-09T07:01:40Z",
        "contributors": 30,
        "topics": [
            "docker",
            "golang",
            "hacktoberfest",
            "hacktoberfest2021",
            "share",
            "transfer",
            "transfersh"
        ],
        "subscribers": 209,
        "readme": "# transfer.sh [![Go Report Card](https://goreportcard.com/badge/github.com/dutchcoders/transfer.sh)](https://goreportcard.com/report/github.com/dutchcoders/transfer.sh) [![Docker pulls](https://img.shields.io/docker/pulls/dutchcoders/transfer.sh.svg)](https://hub.docker.com/r/dutchcoders/transfer.sh/) [![Build Status](https://github.com/dutchcoders/transfer.sh/actions/workflows/test.yml/badge.svg?branch=main)](https://github.com/dutchcoders/transfer.sh/actions/workflows/test.yml?query=branch%3Amain)\n\nEasy and fast file sharing from the command-line. This code contains the server with everything you need to create your own instance.\n\nTransfer.sh currently supports the s3 (Amazon S3), gdrive (Google Drive), storj (Storj) providers, and local file system (local).\n\n## Disclaimer\n\n@stefanbenten happens to be a maintainer of this repository _and_ the person who host a well known public installation of the software in the repo.\n\nThe two are anyway unrelated, and the repo is not the place to direct requests and issues for any of the pubblic installation.\n\nNo third-party public installation of the software in the repo will be advertised or mentioned in the repo itself, for security reasons.\n\nThe official position of me, @aspacca, as maintainer of the repo, is that if you want to use the software you should host your own installation.\n\n## Usage\n\n### Upload:\n```bash\n$ curl -v --upload-file ./hello.txt https://transfer.sh/hello.txt\n```\n\n### Encrypt & Upload:\n```bash\n$ gpg --armor --symmetric --output - /tmp/hello.txt | curl --upload-file - https://transfer.sh/test.txt\n````\n\n### Download & Decrypt:\n```bash\n$ curl https://transfer.sh/1lDau/test.txt | gpg --decrypt --output /tmp/hello.txt\n```\n\n### Upload to Virustotal:\n```bash\n$ curl -X PUT --upload-file nhgbhhj https://transfer.sh/test.txt/virustotal\n```\n\n### Deleting\n```bash\n$ curl -X DELETE <X-Url-Delete Response Header URL>\n```\n\n## Request Headers\n\n### Max-Downloads\n```bash\n$ curl --upload-file ./hello.txt https://transfer.sh/hello.txt -H \"Max-Downloads: 1\" # Limit the number of downloads\n```\n\n### Max-Days\n```bash\n$ curl --upload-file ./hello.txt https://transfer.sh/hello.txt -H \"Max-Days: 1\" # Set the number of days before deletion\n```\n\n### X-Encrypt-Password\n#### Beware, use this feature only on your self-hosted server: trusting a third-party service for server side encryption is at your own risk\n```bash\n$ curl --upload-file ./hello.txt https://your-transfersh-instance.tld/hello.txt -H \"X-Encrypt-Password: test\" # Encrypt the content sever side with AES265 using \"test\" as password\n```\n\n### X-Decrypt-Password\n#### Beware, use this feature only on your self-hosted server: trusting a third-party service for server side encryption is at your own risk\n```bash\n$ curl https://your-transfersh-instance.tld/BAYh0/hello.txt -H \"X-Decrypt-Password: test\" # Decrypt the content sever side with AES265 using \"test\" as password\n```\n\n## Response Headers\n\n### X-Url-Delete\n\nThe URL used to request the deletion of a file and returned as a response header.\n```bash\ncurl -sD - --upload-file ./hello.txt https://transfer.sh/hello.txt | grep -i -E 'transfer\\.sh|x-url-delete'\nx-url-delete: https://transfer.sh/hello.txt/BAYh0/hello.txt/PDw0NHPcqU\nhttps://transfer.sh/hello.txt/BAYh0/hello.txt\n```\n\n## Examples\n\nSee good usage examples on [examples.md](examples.md)\n\n## Link aliases\n\nCreate direct download link:\n\nhttps://transfer.sh/1lDau/test.txt --> https://transfer.sh/get/1lDau/test.txt\n\nInline file:\n\nhttps://transfer.sh/1lDau/test.txt --> https://transfer.sh/inline/1lDau/test.txt\n\n## Usage\n\nParameter | Description                                                                                 | Value                        | Env                         \n--- |---------------------------------------------------------------------------------------------|------------------------------|-----------------------------\nlistener | port to use for http (:80)                                                                  |                              | LISTENER                    |\nprofile-listener | port to use for profiler (:6060)                                                            |                              | PROFILE_LISTENER            |\nforce-https | redirect to https                                                                           | false                        | FORCE_HTTPS                 \ntls-listener | port to use for https (:443)                                                                |                              | TLS_LISTENER                |\ntls-listener-only | flag to enable tls listener only                                                            |                              | TLS_LISTENER_ONLY           |\ntls-cert-file | path to tls certificate                                                                     |                              | TLS_CERT_FILE               |\ntls-private-key | path to tls private key                                                                     |                              | TLS_PRIVATE_KEY             |\nhttp-auth-user | user for basic http auth on upload                                                          |                              | HTTP_AUTH_USER              |\nhttp-auth-pass | pass for basic http auth on upload                                                          |                              | HTTP_AUTH_PASS              |\nhttp-auth-htpasswd | htpasswd file path for basic http auth on upload                                            |                              | HTTP_AUTH_HTPASSWD          |\nhttp-auth-ip-whitelist | comma separated list of ips allowed to upload without being challenged an http auth        |                              | HTTP_AUTH_IP_WHITELIST      |\nip-whitelist | comma separated list of ips allowed to connect to the service                               |                              | IP_WHITELIST                |\nip-blacklist | comma separated list of ips not allowed to connect to the service                           |                              | IP_BLACKLIST                |\ntemp-path | path to temp folder                                                                         | system temp                  | TEMP_PATH                   |\nweb-path | path to static web files (for development or custom front end)                              |                              | WEB_PATH                    |\nproxy-path | path prefix when service is run behind a proxy                                              |                              | PROXY_PATH                  |\nproxy-port | port of the proxy when the service is run behind a proxy                                    |                              | PROXY_PORT                  |\nemail-contact | email contact for the front end                                                             |                              | EMAIL_CONTACT               |\nga-key | google analytics key for the front end                                                      |                              | GA_KEY                      |\nprovider | which storage provider to use                                                               | (s3, storj, gdrive or local) |\nuservoice-key | user voice key for the front end                                                            |                              | USERVOICE_KEY               |\naws-access-key | aws access key                                                                              |                              | AWS_ACCESS_KEY              |\naws-secret-key | aws access key                                                                              |                              | AWS_SECRET_KEY              |\nbucket | aws bucket                                                                                  |                              | BUCKET                      |\ns3-endpoint | Custom S3 endpoint.                                                                         |                              | S3_ENDPOINT                 |\ns3-region | region of the s3 bucket                                                                     | eu-west-1                    | S3_REGION                   |\ns3-no-multipart | disables s3 multipart upload                                                                | false                        | S3_NO_MULTIPART             |\ns3-path-style | Forces path style URLs, required for Minio.                                                 | false                        | S3_PATH_STYLE               |\nstorj-access | Access for the project                                                                      |                              | STORJ_ACCESS                |\nstorj-bucket | Bucket to use within the project                                                            |                              | STORJ_BUCKET                |\nbasedir | path storage for local/gdrive provider                                                      |                              | BASEDIR                     |\ngdrive-client-json-filepath | path to oauth client json config for gdrive provider                                        |                              | GDRIVE_CLIENT_JSON_FILEPATH |\ngdrive-local-config-path | path to store local transfer.sh config cache for gdrive provider                            |                              | GDRIVE_LOCAL_CONFIG_PATH    |\ngdrive-chunk-size | chunk size for gdrive upload in megabytes, must be lower than available memory (8 MB)       |                              | GDRIVE_CHUNK_SIZE           |\nlets-encrypt-hosts | hosts to use for lets encrypt certificates (comma seperated)                                |                              | HOSTS                       |\nlog | path to log file                                                                            |                              | LOG                         |\ncors-domains | comma separated list of domains for CORS, setting it enable CORS                            |                              | CORS_DOMAINS                |\nclamav-host | host for clamav feature                                                                     |                              | CLAMAV_HOST                 |\nperform-clamav-prescan | prescan every upload through clamav feature (clamav-host must be a local clamd unix socket) |                              | PERFORM_CLAMAV_PRESCAN      |\nrate-limit | request per minute                                                                          |                              | RATE_LIMIT                  |\nmax-upload-size | max upload size in kilobytes                                                                |                              | MAX_UPLOAD_SIZE             |\npurge-days | number of days after the uploads are purged automatically                                   |                              | PURGE_DAYS                  |   \npurge-interval | interval in hours to run the automatic purge for (not applicable to S3 and Storj)           |                              | PURGE_INTERVAL              |   \nrandom-token-length | length of the random token for the upload path (double the size for delete path)            | 6                            | RANDOM_TOKEN_LENGTH         |   \n\nIf you want to use TLS using lets encrypt certificates, set lets-encrypt-hosts to your domain, set tls-listener to :443 and enable force-https.\n\nIf you want to use TLS using your own certificates, set tls-listener to :443, force-https, tls-cert-file and tls-private-key.\n\n## Development\n\nSwitched to GO111MODULE\n\n```bash\ngo run main.go --provider=local --listener :8080 --temp-path=/tmp/ --basedir=/tmp/\n```\n\n## Build\n\n```bash\n$ git clone git@github.com:dutchcoders/transfer.sh.git\n$ cd transfer.sh\n$ go build -o transfersh main.go\n```\n\n## Docker\n\nFor easy deployment, we've created an official Docker container. There are two variants, differing only by which user runs the process.\n\nThe default one will run as `root`:\n\n```bash\ndocker run --publish 8080:8080 dutchcoders/transfer.sh:latest --provider local --basedir /tmp/\n```\n\nThe one tagged with the suffix `-noroot` will use `5000` as both UID and GID:\n```bash\ndocker run --publish 8080:8080 dutchcoders/transfer.sh:latest-noroot --provider local --basedir /tmp/\n```\n\n### Building the Container\nYou can also build the container yourself. This allows you to choose which UID/GID will be used, e.g. when using NFS mounts:\n```bash\n# Build arguments:\n# * RUNAS: If empty, the container will run as root.\n#          Set this to anything to enable UID/GID selection.\n# * PUID:  UID of the process. Needs RUNAS != \"\". Defaults to 5000.\n# * PGID:  GID of the process. Needs RUNAS != \"\". Defaults to 5000.\n\ndocker build -t transfer.sh-noroot --build-arg RUNAS=doesntmatter --build-arg PUID=1337 --build-arg PGID=1338 .\n```\n\n## S3 Usage\n\nFor the usage with a AWS S3 Bucket, you just need to specify the following options:\n- provider `--provider s3`\n- aws-access-key _(either via flag or environment variable `AWS_ACCESS_KEY`)_\n- aws-secret-key _(either via flag or environment variable `AWS_SECRET_KEY`)_\n- bucket _(either via flag or environment variable `BUCKET`)_\n- s3-region _(either via flag or environment variable `S3_REGION`)_\n\nIf you specify the s3-region, you don't need to set the endpoint URL since the correct endpoint will used automatically.\n\n### Custom S3 providers\n\nTo use a custom non-AWS S3 provider, you need to specify the endpoint as defined from your cloud provider.\n\n## Storj Network Provider\n\nTo use the Storj Network as a storage provider you need to specify the following flags:\n- provider `--provider storj`\n- storj-access _(either via flag or environment variable STORJ_ACCESS)_\n- storj-bucket _(either via flag or environment variable STORJ_BUCKET)_\n\n### Creating Bucket and Scope\n\nYou need to create an access grant (or copy it from the uplink configuration) and a bucket in preparation.\n\nTo get started, log in to your account and go to the Access Grant Menu and start the Wizard on the upper right.\n\nEnter your access grant name of choice, hit *Next* and restrict it as necessary/preferred.\nAfterwards continue either in CLI or within the Browser. Next, you'll be asked for a Passphrase used as Encryption Key.\n**Make sure to save it in a safe place. Without it, you will lose the ability to decrypt your files!**\n\nAfterwards, you can copy the access grant and then start the startup of the transfer.sh endpoint. \nIt is recommended to provide both the access grant and the bucket name as ENV Variables for enhanced security.\n\nExample:\n```\nexport STORJ_BUCKET=<BUCKET NAME>\nexport STORJ_ACCESS=<ACCESS GRANT>\ntransfer.sh --provider storj\n```\n\n## Google Drive Usage\n\nFor the usage with Google drive, you need to specify the following options:\n- provider\n- gdrive-client-json-filepath\n- gdrive-local-config-path\n- basedir\n\n### Creating Gdrive Client Json\n\nYou need to create an OAuth Client id from console.cloud.google.com, download the file, and place it into a safe directory.\n\n### Usage example\n\n```go run main.go --provider gdrive --basedir /tmp/ --gdrive-client-json-filepath /[credential_dir] --gdrive-local-config-path [directory_to_save_config] ```\n\n## Shell functions\n\n### Bash, ash and zsh (multiple files uploaded as zip archive)\n##### Add this to .bashrc or .zshrc or its equivalent\n```bash\ntransfer() (if [ $# -eq 0 ]; then printf \"No arguments specified.\\nUsage:\\n transfer <file|directory>\\n ... | transfer <file_name>\\n\">&2; return 1; fi; file_name=$(basename \"$1\"); if [ -t 0 ]; then file=\"$1\"; if [ ! -e \"$file\" ]; then echo \"$file: No such file or directory\">&2; return 1; fi; if [ -d \"$file\" ]; then cd \"$file\" || return 1; file_name=\"$file_name.zip\"; set -- zip -r -q - .; else set -- cat \"$file\"; fi; else set -- cat; fi; url=$(\"$@\" | curl --silent --show-error --progress-bar --upload-file \"-\" \"https://transfer.sh/$file_name\"); echo \"$url\"; )\n```\n\n#### Now you can use transfer function\n```\n$ transfer hello.txt\n```\n\n\n### Bash and zsh (with delete url, delete token output and prompt before uploading)\n##### Add this to .bashrc or .zshrc or its equivalent\n\n<details><summary>Expand</summary><p>\n\n```bash\ntransfer()\n{\n    local file\n    declare -a file_array\n    file_array=(\"${@}\")\n\n    if [[ \"${file_array[@]}\" == \"\" || \"${1}\" == \"--help\" || \"${1}\" == \"-h\" ]]\n    then\n        echo \"${0} - Upload arbitrary files to \\\"transfer.sh\\\".\"\n        echo \"\"\n        echo \"Usage: ${0} [options] [<file>]...\"\n        echo \"\"\n        echo \"OPTIONS:\"\n        echo \"  -h, --help\"\n        echo \"      show this message\"\n        echo \"\"\n        echo \"EXAMPLES:\"\n        echo \"  Upload a single file from the current working directory:\"\n        echo \"      ${0} \\\"image.img\\\"\"\n        echo \"\"\n        echo \"  Upload multiple files from the current working directory:\"\n        echo \"      ${0} \\\"image.img\\\" \\\"image2.img\\\"\"\n        echo \"\"\n        echo \"  Upload a file from a different directory:\"\n        echo \"      ${0} \\\"/tmp/some_file\\\"\"\n        echo \"\"\n        echo \"  Upload all files from the current working directory. Be aware of the webserver's rate limiting!:\"\n        echo \"      ${0} *\"\n        echo \"\"\n        echo \"  Upload a single file from the current working directory and filter out the delete token and download link:\"\n        echo \"      ${0} \\\"image.img\\\" | awk --field-separator=\\\": \\\" '/Delete token:/ { print \\$2 } /Download link:/ { print \\$2 }'\"\n        echo \"\"\n        echo \"  Show help text from \\\"transfer.sh\\\":\"\n        echo \"      curl --request GET \\\"https://transfer.sh\\\"\"\n        return 0\n    else\n        for file in \"${file_array[@]}\"\n        do\n            if [[ ! -f \"${file}\" ]]\n            then\n                echo -e \"\\e[01;31m'${file}' could not be found or is not a file.\\e[0m\" >&2\n                return 1\n            fi\n        done\n        unset file\n    fi\n\n    local upload_files\n    local curl_output\n    local awk_output\n\n    du -c -k -L \"${file_array[@]}\" >&2\n    # be compatible with \"bash\"\n    if [[ \"${ZSH_NAME}\" == \"zsh\" ]]\n    then\n        read $'upload_files?\\e[01;31mDo you really want to upload the above files ('\"${#file_array[@]}\"$') to \"transfer.sh\"? (Y/n): \\e[0m'\n    elif [[ \"${BASH}\" == *\"bash\"* ]]\n    then\n        read -p $'\\e[01;31mDo you really want to upload the above files ('\"${#file_array[@]}\"$') to \"transfer.sh\"? (Y/n): \\e[0m' upload_files\n    fi\n\n    case \"${upload_files:-y}\" in\n        \"y\"|\"Y\")\n            # for the sake of the progress bar, execute \"curl\" for each file.\n            # the parameters \"--include\" and \"--form\" will suppress the progress bar.\n            for file in \"${file_array[@]}\"\n            do\n                # show delete link and filter out the delete token from the response header after upload.\n                # it is important to save \"curl's\" \"stdout\" via a subshell to a variable or redirect it to another command,\n                # which just redirects to \"stdout\" in order to have a sane output afterwards.\n                # the progress bar is redirected to \"stderr\" and is only displayed,\n                # if \"stdout\" is redirected to something; e.g. \">/dev/null\", \"tee /dev/null\" or \"| <some_command>\".\n                # the response header is redirected to \"stdout\", so redirecting \"stdout\" to \"/dev/null\" does not make any sense.\n                # redirecting \"curl's\" \"stderr\" to \"stdout\" (\"2>&1\") will suppress the progress bar.\n                curl_output=$(curl --request PUT --progress-bar --dump-header - --upload-file \"${file}\" \"https://transfer.sh/\")\n                awk_output=$(awk \\\n                    'gsub(\"\\r\", \"\", $0) && tolower($1) ~ /x-url-delete/ \\\n                    {\n                        delete_link=$2;\n                        print \"Delete command: curl --request DELETE \" \"\\\"\"delete_link\"\\\"\";\n\n                        gsub(\".*/\", \"\", delete_link);\n                        delete_token=delete_link;\n                        print \"Delete token: \" delete_token;\n                    }\n\n                    END{\n                        print \"Download link: \" $0;\n                    }' <<< \"${curl_output}\")\n\n                # return the results via \"stdout\", \"awk\" does not do this for some reason.\n                echo -e \"${awk_output}\\n\"\n\n                # avoid rate limiting as much as possible; nginx: too many requests.\n                if (( ${#file_array[@]} > 4 ))\n                then\n                    sleep 5\n                fi\n            done\n            ;;\n\n        \"n\"|\"N\")\n            return 1\n            ;;\n\n        *)\n            echo -e \"\\e[01;31mWrong input: '${upload_files}'.\\e[0m\" >&2\n            return 1\n    esac\n}\n```\n\n</p></details>\n\n#### Sample output\n```bash\n$ ls -lh\ntotal 20M\n-rw-r--r-- 1 <some_username> <some_username> 10M Apr  4 21:08 image.img\n-rw-r--r-- 1 <some_username> <some_username> 10M Apr  4 21:08 image2.img\n$ transfer image*\n10240K  image2.img\n10240K  image.img\n20480K  total\nDo you really want to upload the above files (2) to \"transfer.sh\"? (Y/n):\n######################################################################################################################################################################################################################################## 100.0%\nDelete command: curl --request DELETE \"https://transfer.sh/wJw9pz/image2.img/mSctGx7pYCId\"\nDelete token: mSctGx7pYCId\nDownload link: https://transfer.sh/wJw9pz/image2.img\n\n######################################################################################################################################################################################################################################## 100.0%\nDelete command: curl --request DELETE \"https://transfer.sh/ljJc5I/image.img/nw7qaoiKUwCU\"\nDelete token: nw7qaoiKUwCU\nDownload link: https://transfer.sh/ljJc5I/image.img\n\n$ transfer \"image.img\" | awk --field-separator=\": \" '/Delete token:/ { print $2 } /Download link:/ { print $2 }'\n10240K  image.img\n10240K  total\nDo you really want to upload the above files (1) to \"transfer.sh\"? (Y/n):\n######################################################################################################################################################################################################################################## 100.0%\ntauN5dE3fWJe\nhttps://transfer.sh/MYkuqn/image.img\n```\n\n## Contributions\n\nContributions are welcome.\n\n## Creators\n\n**Remco Verhoef**\n- <https://twitter.com/remco_verhoef>\n- <https://twitter.com/dutchcoders>\n\n**Uvis Grinfelds**\n\n## Maintainer\n\n**Andrea Spacca**\n\n**Stefan Benten**\n\n## Copyright and License\n\nCode and documentation copyright 2011-2018 Remco Verhoef.\nCode and documentation copyright 2018-2020 Andrea Spacca.\nCode and documentation copyright 2020- Andrea Spacca and Stefan Benten.\n\nCode released under [the MIT license](LICENSE).\n",
        "releases": [
            {
                "name": "v1.6.1",
                "date": "2023-12-04T05:58:41Z"
            },
            {
                "name": "v1.6.0",
                "date": "2023-06-06T10:59:53Z"
            },
            {
                "name": "Accept range requests, client side gpg encryption and file paste on front-end",
                "date": "2023-03-11T01:10:51Z"
            },
            {
                "name": "Clamav prescan and minor fixes and improvement",
                "date": "2022-05-20T02:54:52Z"
            },
            {
                "name": "A minor release: docs and bugfixing",
                "date": "2021-12-15T20:15:29Z"
            },
            {
                "name": "Deletion on UI, few enhanchements and bug fixes",
                "date": "2021-08-19T19:04:40Z"
            },
            {
                "name": "v1.2.6",
                "date": "2021-07-06T17:51:41Z"
            },
            {
                "name": "v1.2.4",
                "date": "2021-05-21T15:26:15Z"
            },
            {
                "name": "v1.2.3",
                "date": "2021-05-01T17:56:54Z"
            },
            {
                "name": "v1.2.2",
                "date": "2021-03-16T18:44:36Z"
            },
            {
                "name": "v1.2.1",
                "date": "2021-01-11T15:02:52Z"
            },
            {
                "name": "v1.2.0",
                "date": "2021-01-06T15:11:35Z"
            },
            {
                "name": "Vulnerability fix and env vars",
                "date": "2020-05-09T10:03:18Z"
            },
            {
                "name": "Here we go again",
                "date": "2020-03-15T19:12:31Z"
            },
            {
                "name": "Fix go get",
                "date": "2020-01-06T16:21:15Z"
            },
            {
                "name": "Binary releases",
                "date": "2019-08-24T12:02:40Z"
            },
            {
                "name": "Few bug fixes",
                "date": "2019-07-21T16:44:00Z"
            },
            {
                "name": "v.1.1.0",
                "date": "2019-07-06T19:10:02Z"
            },
            {
                "name": "Now with releases",
                "date": "2019-03-30T17:55:21Z"
            }
        ]
    }
}