{
    "https://api.github.com/repos/realm/SwiftLint": {
        "forks": 2235,
        "watchers": 18766,
        "stars": 18766,
        "languages": {
            "Swift": 2764835,
            "Starlark": 20395,
            "Ruby": 14615,
            "Makefile": 8578,
            "Shell": 5091,
            "Dockerfile": 3247,
            "HTML": 2815,
            "C": 1616
        },
        "commits": [
            "2025-01-19T16:39:16Z",
            "2025-01-19T13:21:51Z",
            "2025-01-19T12:20:39Z",
            "2025-01-18T16:13:48Z",
            "2025-01-18T15:41:39Z",
            "2025-01-18T13:00:27Z",
            "2025-01-17T21:55:30Z",
            "2025-01-17T21:32:06Z",
            "2025-01-17T21:30:03Z",
            "2025-01-16T23:02:16Z",
            "2025-01-16T22:25:26Z",
            "2025-01-16T22:25:20Z",
            "2025-01-16T22:10:28Z",
            "2025-01-16T21:18:23Z",
            "2025-01-16T22:08:12Z",
            "2025-01-16T22:04:57Z",
            "2025-01-16T22:00:19Z",
            "2025-01-16T21:33:27Z",
            "2025-01-16T21:11:39Z",
            "2025-01-16T09:00:06Z",
            "2025-01-15T18:59:11Z",
            "2025-01-15T18:36:24Z",
            "2025-01-15T18:36:17Z",
            "2025-01-15T18:22:57Z",
            "2025-01-15T18:15:44Z",
            "2025-01-14T20:50:11Z",
            "2025-01-14T19:53:19Z",
            "2025-01-14T19:37:25Z",
            "2025-01-13T23:15:40Z",
            "2025-01-13T21:59:01Z"
        ],
        "creation_date": "2015-05-16T16:59:31Z",
        "contributors": 30,
        "topics": [
            "code-quality",
            "hacktoberfest",
            "linter",
            "linting",
            "static-analysis",
            "swift"
        ],
        "subscribers": 245,
        "readme": "# SwiftLint\n\nA tool to enforce Swift style and conventions, loosely based on the now\narchived [GitHub Swift Style Guide](https://github.com/github/swift-style-guide).\nSwiftLint enforces the style guide rules that are generally accepted by the\nSwift community. These rules are well described in popular style guides like\n[Kodeco's Swift Style Guide](https://github.com/kodecocodes/swift-style-guide).\n\nSwiftLint hooks into [Clang](http://clang.llvm.org) and\n[SourceKit](http://www.jpsim.com/uncovering-sourcekit) to use the\n[AST](http://clang.llvm.org/docs/IntroductionToTheClangAST.html) representation\nof your source files for more accurate results.\n\n[![Supported Swift Versions](https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Frealm%2FSwiftLint%2Fbadge%3Ftype%3Dswift-versions)](https://swiftpackageindex.com/realm/SwiftLint)\n[![Supported Platforms](https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Frealm%2FSwiftLint%2Fbadge%3Ftype%3Dplatforms)](https://swiftpackageindex.com/realm/SwiftLint)\n[![Azure Build Status](https://dev.azure.com/jpsim/SwiftLint/_apis/build/status/realm.SwiftLint?branchName=main)](https://dev.azure.com/jpsim/SwiftLint/_build/latest?definitionId=4?branchName=main)\n[![Buildkite Build Status](https://badge.buildkite.com/e2a5bc32c347e76e2793e4c5764a5f42bcd42bbe32f79c3a53.svg?branch=main)](https://buildkite.com/swiftlint/swiftlint)\n\n![](https://raw.githubusercontent.com/realm/SwiftLint/main/assets/screenshot.png)\n\nThis project adheres to the\n[Contributor Covenant Code of Conduct](https://realm.io/conduct).\nBy participating, you are expected to uphold this code.\n\n> Switch Language:\n> [\u4e2d\u6587](https://github.com/realm/SwiftLint/blob/main/README_CN.md)\n> [\ud55c\uad6d\uc5b4](https://github.com/realm/SwiftLint/blob/main/README_KR.md)\n\n## Video Introduction\n\nTo get a high-level overview of SwiftLint, we encourage you to watch this\npresentation recorded January 9th, 2017 by JP Simard (transcript provided):\n\n[![Presentation](https://raw.githubusercontent.com/realm/SwiftLint/main/assets/presentation.svg)](https://youtu.be/9Z1nTMTejqU)\n\n## Installation\n\n### [Swift Package Manager](https://github.com/apple/swift-package-manager)\n\nSwiftLint can be used as a [command plugin](#swift-package-command-plugin)\nor a [build tool plugin](#build-tool-plugins).\n\nAdd\n\n```swift\n.package(url: \"https://github.com/SimplyDanny/SwiftLintPlugins\", from: \"<version>\")\n```\n\nto your `Package.swift` file to consume the latest release of SwiftLint\nautomatically or pin the dependency to a specific version:\n\n```swift\n.package(url: \"https://github.com/SimplyDanny/SwiftLintPlugins\", exact: \"<version>\")\n```\n\nTherein, replace `<version>` with the desired minimum or exact version.\n\n> [!NOTE]\n> Consuming the plugins directly from the SwiftLint repository comes\n> with several drawbacks. To avoid them and reduce the overhead imposed, it's\n> highly recommended to consume the plugins from the dedicated\n> [SwiftLintPlugins repository](https://github.com/SimplyDanny/SwiftLintPlugins),\n> even though plugins from the SwiftLint repository are also absolutely\n> functional. If the plugins from SwiftLint are preferred, just use the URL\n> `https://github.com/realm/SwiftLint` in the package declarations above.\n>\n> However, [SwiftLintPlugins](https://github.com/SimplyDanny/SwiftLintPlugins)\n> facilitates plugin adoption massively. It lists some of the reasons that\n> drive the plugins as provided by SwiftLint itself very troublesome. Since\n> the plugin code and the releases are kept in sync, there is no difference\n> in functionality between the two, but you spare yourself a lot of time and\n> trouble using the dedicated plugins repository.\n>\n> This document assumes you're relying on SwiftLintPlugins.\n\n### [Xcode Package Dependency](https://developer.apple.com/documentation/xcode/adding-package-dependencies-to-your-app)\n\nUse the following link to add SwiftLint as a Package Dependency to an Xcode\nproject:\n\n```bash\nhttps://github.com/SimplyDanny/SwiftLintPlugins\n```\n\n### [Homebrew](http://brew.sh)\n\n```bash\nbrew install swiftlint\n```\n\n### [CocoaPods](https://cocoapods.org)\n\nAdd the following to your `Podfile`:\n\n```ruby\npod 'SwiftLint'\n```\n\nThis will download the SwiftLint binaries and dependencies in `Pods/` during\nyour next `pod install` execution and will allow you to invoke it via\n`${PODS_ROOT}/SwiftLint/swiftlint` in your Script Build Phases.\n\nInstalling via Cocoapods also enables pinning to a specific version of\nSwiftLint rather than simply the latest (which is the case with\n[Homebrew](#homebrew)).\n\nNote that this will add the SwiftLint binaries, its dependencies' binaries, and\nthe Swift binary library distribution to the `Pods/` directory, so checking in\nthis directory to SCM such as Git is discouraged.\n\n### [Mint](https://github.com/yonaskolb/mint)\n\n```bash\nmint install realm/SwiftLint\n```\n\n### [Bazel](https://bazel.build)\n\nPut this in your `MODULE.bazel`:\n\n```bzl\nbazel_dep(name = \"swiftlint\", version = \"0.52.4\", repo_name = \"SwiftLint\")\n```\n\nOr put this in your `WORKSPACE`:\n\n<details>\n\n<summary>WORKSPACE</summary>\n\n```bzl\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\nhttp_archive(\n    name = \"build_bazel_rules_apple\",\n    sha256 = \"390841dd5f8a85fc25776684f4793d56e21b098dfd7243cd145b9831e6ef8be6\",\n    url = \"https://github.com/bazelbuild/rules_apple/releases/download/2.4.1/rules_apple.2.4.1.tar.gz\",\n)\n\nload(\n    \"@build_bazel_rules_apple//apple:repositories.bzl\",\n    \"apple_rules_dependencies\",\n)\n\napple_rules_dependencies()\n\nload(\n    \"@build_bazel_rules_swift//swift:repositories.bzl\",\n    \"swift_rules_dependencies\",\n)\n\nswift_rules_dependencies()\n\nload(\n    \"@build_bazel_rules_swift//swift:extras.bzl\",\n    \"swift_rules_extra_dependencies\",\n)\n\nswift_rules_extra_dependencies()\n\nhttp_archive(\n    name = \"SwiftLint\",\n    sha256 = \"c6ea58b9c72082cdc1ada4a2d48273ecc355896ed72204cedcc586b6ccb8aca6\",\n    url = \"https://github.com/realm/SwiftLint/releases/download/0.52.4/bazel.tar.gz\",\n)\n\nload(\"@SwiftLint//bazel:repos.bzl\", \"swiftlint_repos\")\n\nswiftlint_repos()\n\nload(\"@SwiftLint//bazel:deps.bzl\", \"swiftlint_deps\")\n\nswiftlint_deps()\n```\n\n</details>\n\nThen you can run SwiftLint in the current directory with this command:\n\n```console\nbazel run -c opt @SwiftLint//:swiftlint\n```\n\n### Pre-Built Package\n\nDownload `SwiftLint.pkg` from the\n[latest GitHub release](https://github.com/realm/SwiftLint/releases/latest) and\nrun it.\n\n### From Source\n\nMake sure the build tool [Bazel](https://bazel.build) and a\nrecent [Swift toolchain](https://www.swift.org/download/) are\ninstalled and all tools are discoverable in your `PATH`.\n\nTo build SwiftLint, clone this repository and run `make install`.\n\n## Setup\n\n> [!IMPORTANT]\n> While it may seem intuitive to run SwiftLint before compiling Swift source\n> files to exit a build early when there are lint violations, it is important\n> to understand that SwiftLint is designed to analyze valid source code that\n> is compilable. Non-compiling code can very easily lead to unexpected and\n> confusing results, especially when executing with `--fix`/`--autocorrect`\n> command line arguments.\n\n### Build Tool Plugins\n\nSwiftLint can be used as a build tool plugin for both\n[Swift Package projects](#swift-package-projects)\nand [Xcode projects](#xcode-projects).\n\nThe build tool plugin determines the SwiftLint working directory by locating\nthe topmost config file within the package/project directory. If a config file\nis not found therein, the package/project directory is used as the working\ndirectory.\n\nThe plugin throws an error when it is unable to resolve the SwiftLint working\ndirectory. For example, this will occur in Xcode projects where the target's\nSwift files are not located within the project directory.\n\nTo maximize compatibility with the plugin, avoid project structures that require\nthe use of the `--config` option.\n\n### Swift Package Projects\n\n> [!NOTE]\n> Requires installing via [Swift Package Manager](#swift-package-manager).\n\nBuild tool plugins run when building each target. When a project has multiple\ntargets, the plugin must be added to the desired targets individually.\n\nTo do this, add the plugin to the target(s) to be linted as follows:\n\n```swift\n.target(\n    ...\n    plugins: [.plugin(name: \"SwiftLintBuildToolPlugin\", package: \"SwiftLintPlugins\")]\n),\n```\n\n### Swift Package Command Plugin\n\n> [!NOTE]\n> Requires installing via [Swift Package Manager](#swift-package-manager).\n\nThe command plugin enables running SwiftLint from the command line as follows:\n\n```shell\nswift package plugin swiftlint\n```\n\n### Xcode Projects\n\n> [!NOTE]\n> Requires installing via [Xcode Package Dependency](#xcode-package-dependency).\n\nBuild tool plugins run as a build phase of each target. When a project has\nmultiple targets, the plugin must be added to the desired targets individually.\n\nTo do this, add the `SwiftLintBuildToolPlugin` to the `Run Build Tool Plug-ins`\nphase of the `Build Phases` for the target(s) to be linted.\n\n> [!TIP]\n> When using the plugin for the first time, be sure to trust and enable\n> it when prompted. If a macros build warning exists, select it to trust\n> and enable the macros as well.\n\nFor unattended use (e.g. on CI), package plugin and macro\nvalidations can be disabled with either of the following:\n\n* Using `xcodebuild` options:\n\n  ```bash\n  -skipPackagePluginValidation\n  -skipMacroValidation\n  ```\n\n* Setting Xcode defaults:\n\n  ```bash\n  defaults write com.apple.dt.Xcode IDESkipPackagePluginFingerprintValidatation -bool YES\n  defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES\n  ```\n\n> [!IMPORTANT]\n> The unattended use options bypass Xcode's validation dialogs\n> and implicitly trust all plugins and macros, which has security implications.\n\n#### Unexpected Xcode Project Structures\n\nProject structures where SwiftLint's configuration file is located\noutside of the package/project directory are not directly supported\nby the build tool plugin. This is because it isn't possible to pass\narguments to build tool plugins (e.g., passing the config file path).\n\nIf your project structure doesn't work directly with the build tool\nplugin, please consider one of the following options:\n\n* To use a config file located outside the package/project directory, a config\n  file may be added to that directory specifying a parent config path to the\n  other config file, e.g., `parent_config: path/to/.swiftlint.yml`.\n* You can also consider the use of a\n  [Run Script Build Phase](#xcode-run-script-build-phase) in place of the build\n  tool plugin.\n\n### Xcode Run Script Build Phase\n\n> [!NOTE]\n> Based upon the installation method used, the shell command syntax in the\n> Run Script Build Phase may be different or additional configuration could\n> be required. Refer to the [installation](#installation) instructions for\n> more information.\n\nIf the build tool plugin does not work for your project setup or when\nadditional custom setup is required, SwiftLint can be added as a Run Script\nBuild Phase. This is useful when a project setup relies on the `--config`\nSwiftLint option; or to lint all targets together in a single `swiftlint`\ninvocation. File inclusions and exclusions can be configured in the\n[`.swiftlint.yml` configuration](#configuration).\n\nTo do this, add a custom script to a `Run Script` phase of the `Build Phases`\nof the primary app target, after the `Compile Sources` phase. Use the\nfollowing script implementation:\n\n```bash\nif command -v swiftlint >/dev/null 2>&1\nthen\n    swiftlint\nelse\n    echo \"warning: `swiftlint` command not found - See https://github.com/realm/SwiftLint#installation for installation instructions.\"\nfi\n```\n\nIf you're using the SwiftLintPlugin in a Swift package,\nyou may refer to the `swiftlint` executable in the\nfollowing way:\n\n```bash\nSWIFT_PACKAGE_DIR=\"${BUILD_DIR%Build/*}SourcePackages/artifacts\"\nSWIFTLINT_CMD=$(ls \"$SWIFT_PACKAGE_DIR\"/swiftlintplugins/SwiftLintBinary/SwiftLintBinary.artifactbundle/swiftlint-*-macos/bin/swiftlint | head -n 1)\n\nif test -f \"$SWIFTLINT_CMD\" 2>&1\nthen\n    \"$SWIFTLINT_CMD\"\nelse\n    echo \"warning: `swiftlint` command not found - See https://github.com/realm/SwiftLint#installation for installation instructions.\"\nfi\n```\n\n> [!NOTE]\n> The `SWIFTLINT_CMD` path uses the default Xcode configuration and has been\n> tested on Xcode 15/16. In case of another configuration (e.g. a custom\n> Swift package path), please adapt the values accordingly.\n\n> [!TIP]\n> Uncheck `Based on dependency analysis` to run `swiftlint` on all incremental\n> builds, suppressing the unspecified outputs warning.\n\n#### Consideration for Xcode 15.0\n\nXcode 15 made a significant change by setting the default value of the\n`ENABLE_USER_SCRIPT_SANDBOXING` build setting from `NO` to `YES`.\nAs a result, SwiftLint encounters an error related to missing file permissions,\nwhich typically manifests as\n`error: Sandbox: swiftlint(19427) deny(1) file-read-data.`\n\nTo resolve this issue, it is necessary to manually set the\n`ENABLE_USER_SCRIPT_SANDBOXING` setting to `NO` for the specific target that\nSwiftLint is being configured for.\n\n#### Consideration for Apple Silicon\n\nIf you installed SwiftLint via Homebrew on Apple Silicon, you might experience\nthis warning:\n\n```bash\nwarning: SwiftLint not installed, download from https://github.com/realm/SwiftLint\n```\n\nThat is because Homebrew on Apple Silicon installs the binaries into the\n`/opt/homebrew/bin` folder by default. To instruct Xcode where to find\nSwiftLint, you can either add `/opt/homebrew/bin` to the `PATH` environment\nvariable in your build phase:\n\n```bash\nif [[ \"$(uname -m)\" == arm64 ]]\nthen\n    export PATH=\"/opt/homebrew/bin:$PATH\"\nfi\n\nif command -v swiftlint >/dev/null 2>&1\nthen\n    swiftlint\nelse\n    echo \"warning: `swiftlint` command not found - See https://github.com/realm/SwiftLint#installation for installation instructions.\"\nfi\n```\n\nor you can create a symbolic link in `/usr/local/bin` pointing to the actual\nbinary:\n\n```bash\nln -s /opt/homebrew/bin/swiftlint /usr/local/bin/swiftlint\n```\n\n#### Additional Considerations\n\nIf you wish to fix violations as well, your script could run\n`swiftlint --fix && swiftlint` instead of just `swiftlint`. This will mean\nthat all correctable violations are fixed while ensuring warnings show up in\nyour project for remaining violations.\n\nIf you've installed SwiftLint via CocoaPods the script should look like this:\n\n```bash\n\"${PODS_ROOT}/SwiftLint/swiftlint\"\n```\n\n### Visual Studio Code\n\nTo integrate SwiftLint with [Visual Studio Code](https://code.visualstudio.com), install the\n[`vscode-swiftlint`](https://marketplace.visualstudio.com/items?itemName=vknabel.vscode-swiftlint)\nextension from the marketplace.\n\n### Fastlane\n\nYou can use the official\n[`swiftlint` fastlane action](https://docs.fastlane.tools/actions/swiftlint)\nto run SwiftLint as part of your fastlane process.\n\n```ruby\nswiftlint(\n    mode: :lint,                            # SwiftLint mode: :lint (default) or :autocorrect\n    executable: \"Pods/SwiftLint/swiftlint\", # The SwiftLint binary path (optional). Important if you've installed it via CocoaPods\n    path: \"/path/to/lint\",                  # Specify path to lint (optional)\n    output_file: \"swiftlint.result.json\",   # The path of the output file (optional)\n    reporter: \"json\",                       # The custom reporter to use (optional)\n    config_file: \".swiftlint-ci.yml\",       # The path of the configuration file (optional)\n    files: [                                # List of files to process (optional)\n        \"AppDelegate.swift\",\n        \"path/to/project/Model.swift\"\n    ],\n    ignore_exit_status: true,               # Allow fastlane to continue even if SwiftLint returns a non-zero exit status (Default: false)\n    quiet: true,                            # Don't print status logs like 'Linting ' & 'Done linting' (Default: false)\n    strict: true                            # Fail on warnings? (Default: false)\n)\n```\n\n### Docker\n\nSwiftLint is also available as a [Docker](https://www.docker.com/) image using\n`Ubuntu`. So just the first time you need to pull the docker image using the\nnext command:\n\n```bash\ndocker pull ghcr.io/realm/swiftlint:latest\n```\n\nThen following times, you just run `swiftlint` inside of the docker like:\n\n```bash\ndocker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:latest\n```\n\nThis will execute `swiftlint` in the folder where you are right now (`pwd`),\nshowing an output like:\n\n```bash\n$ docker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:latest\nLinting Swift files in current working directory\nLinting 'RuleDocumentation.swift' (1/490)\n...\nLinting 'YamlSwiftLintTests.swift' (490/490)\nDone linting! Found 0 violations, 0 serious in 490 files.\n```\n\nHere you have more documentation about the usage of\n[Docker Images](https://docs.docker.com/).\n\n## Command Line Usage\n\n```txt\n$ swiftlint help\nOVERVIEW: A tool to enforce Swift style and conventions.\n\nUSAGE: swiftlint <subcommand>\n\nOPTIONS:\n  --version               Show the version.\n  -h, --help              Show help information.\n\nSUBCOMMANDS:\n  analyze                 Run analysis rules\n  docs                    Open SwiftLint documentation website in the default web browser\n  generate-docs           Generates markdown documentation for selected group of rules\n  lint (default)          Print lint warnings and errors\n  baseline                Operations on existing baselines\n  reporters               Display the list of reporters and their identifiers\n  rules                   Display the list of rules and their identifiers\n  version                 Display the current version of SwiftLint\n\n  See 'swiftlint help <subcommand>' for detailed help.\n```\n\nRun `swiftlint` in the directory containing the Swift files to lint. Directories\nwill be searched recursively.\n\nTo specify a list of files when using `lint` or `analyze`\n(like the list of files modified by Xcode specified by the\n[`ExtraBuildPhase`](https://github.com/norio-nomura/ExtraBuildPhase) Xcode\nplugin, or modified files in the working tree based on `git ls-files -m`), you\ncan do so by passing the option `--use-script-input-files` and setting the\nfollowing instance variables: `SCRIPT_INPUT_FILE_COUNT`\nand `SCRIPT_INPUT_FILE_0`, `SCRIPT_INPUT_FILE_1`, ...,\n`SCRIPT_INPUT_FILE_{SCRIPT_INPUT_FILE_COUNT - 1}`.\nSimilarly, files can be read from file lists by passing\nthe option `--use-script-input-file-lists` and setting the\nfollowing instance variables: `SCRIPT_INPUT_FILE_LIST_COUNT`\nand `SCRIPT_INPUT_FILE_LIST_0`, `SCRIPT_INPUT_FILE_LIST_1`, ...,\n`SCRIPT_INPUT_FILE_LIST_{SCRIPT_INPUT_FILE_LIST_COUNT - 1}`.\n\nThese are same environment variables set for input files to\n[custom Xcode script phases](http://indiestack.com/2014/12/speeding-up-custom-script-phases/).\n\n## Working With Multiple Swift Versions\n\nSwiftLint hooks into SourceKit so it continues working even as Swift evolves!\n\nThis also keeps SwiftLint lean, as it doesn't need to ship with a full Swift\ncompiler, it just communicates with the official one you already have installed\non your machine.\n\nYou should always run SwiftLint with the same toolchain you use to compile your\ncode.\n\nYou may want to override SwiftLint's default Swift toolchain if you have\nmultiple toolchains or Xcodes installed.\n\nHere's the order in which SwiftLint determines which Swift toolchain to use:\n\n* `$XCODE_DEFAULT_TOOLCHAIN_OVERRIDE`\n* `$TOOLCHAIN_DIR` or `$TOOLCHAINS`\n* `xcrun -find swift`\n* `/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain`\n* `/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain`\n* `~/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain`\n* `~/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain`\n\n`sourcekitd.framework` is expected to be found in the `usr/lib/` subdirectory of\nthe value passed in the paths above.\n\nYou may also set the `TOOLCHAINS` environment variable to the reverse-DNS\nnotation that identifies a Swift toolchain version:\n\n```shell\nTOOLCHAINS=com.apple.dt.toolchain.Swift_2_3 swiftlint --fix\n```\n\nOn Linux, SourceKit is expected to be located in\n`/usr/lib/libsourcekitdInProc.so` or specified by the `LINUX_SOURCEKIT_LIB_PATH`\nenvironment variable.\n\n## Git `pre-commit` Hook\n\nSwiftLint can be run as a [pre-commit](https://pre-commit.com/) hook.\nOnce [installed](https://pre-commit.com/#install), add this to the\n`.pre-commit-config.yaml` in the root of your repository:\n\n```yaml\nrepos:\n  - repo: https://github.com/realm/SwiftLint\n    rev: 0.57.1\n    hooks:\n      - id: swiftlint\n```\n\nAdjust `rev` to the SwiftLint version of your choice.  `pre-commit autoupdate`\ncan be used to update to the current version.\n\nSwiftLint can be configured using `entry` to apply fixes and fail on errors:\n\n```yaml\n-   repo: https://github.com/realm/SwiftLint\n    rev: 0.57.1\n    hooks:\n    -   id: swiftlint\n        entry: swiftlint --fix --strict\n```\n\n## Rules\n\nOver 200 rules are included in SwiftLint and the Swift community (that's you!)\ncontinues to contribute more over time.\n[Pull requests](https://github.com/realm/SwiftLint/blob/main/CONTRIBUTING.md)\nare encouraged.\n\nYou can find an updated list of rules and more information about them\n[here](https://realm.github.io/SwiftLint/rule-directory.html).\n\nYou can also check the\n[Source/SwiftLintBuiltInRules/Rules](https://github.com/realm/SwiftLint/tree/main/Source/SwiftLintBuiltInRules/Rules)\ndirectory to see their implementation.\n\n### Opt-In Rules\n\n`opt_in_rules` are disabled by default (i.e., you have to explicitly enable them\nin your configuration file).\n\nGuidelines on when to mark a rule as opt-in:\n\n* A rule that can have many false positives (e.g. `empty_count`)\n* A rule that is too slow\n* A rule that is not general consensus or is only useful in some cases\n  (e.g. `force_unwrapping`)\n\n### Disable rules in code\n\nRules can be disabled with a comment inside a source file with the following\nformat:\n\n`// swiftlint:disable <rule1> [<rule2> <rule3>...]`\n\nThe rules will be disabled until the end of the file or until the linter sees a\nmatching enable comment:\n\n`// swiftlint:enable <rule1> [<rule2> <rule3>...]`\n\nFor example:\n\n```swift\n// swiftlint:disable colon\nlet noWarning :String = \"\" // No warning about colons immediately after variable names!\n// swiftlint:enable colon\nlet hasWarning :String = \"\" // Warning generated about colons immediately after variable names\n```\n\nIncluding the `all` keyword will disable all rules until the linter sees a\nmatching enable comment:\n\n`// swiftlint:disable all`\n`// swiftlint:enable all`\n\nFor example:\n\n```swift\n// swiftlint:disable all\nlet noWarning :String = \"\" // No warning about colons immediately after variable names!\nlet i = \"\" // Also no warning about short identifier names\n// swiftlint:enable all\nlet hasWarning :String = \"\" // Warning generated about colons immediately after variable names\nlet y = \"\" // Warning generated about short identifier names\n```\n\nIt's also possible to modify a `disable` or `enable` command by appending\n`:previous`, `:this` or `:next` for only applying the command to the previous,\nthis (current) or next line respectively.\n\nFor example:\n\n```swift\n// swiftlint:disable:next force_cast\nlet noWarning = NSNumber() as! Int\nlet hasWarning = NSNumber() as! Int\nlet noWarning2 = NSNumber() as! Int // swiftlint:disable:this force_cast\nlet noWarning3 = NSNumber() as! Int\n// swiftlint:disable:previous force_cast\n```\n\nRun `swiftlint rules` to print a list of all available rules and their\nidentifiers.\n\n### Configuration\n\nConfigure SwiftLint by adding a `.swiftlint.yml` file from the directory you'll\nrun SwiftLint from. The following parameters can be configured:\n\nRule inclusion:\n\n* `disabled_rules`: Disable rules from the default enabled set.\n* `opt_in_rules`: Enable rules that are not part of the default set. The\n   special `all` identifier will enable all opt in linter rules, except the ones\n   listed in `disabled_rules`.\n* `only_rules`: Only the rules specified in this list will be enabled.\n   Cannot be specified alongside `disabled_rules` or `opt_in_rules`.\n* `analyzer_rules`: This is an entirely separate list of rules that are only\n  run by the `analyze` command. All analyzer rules are opt-in, so this is the\n  only configurable rule list, there are no equivalents for `disabled_rules`\n  and `only_rules`. The special `all` identifier can also be used here to enable\n  all analyzer rules, except the ones listed in `disabled_rules`.\n\n```yaml\n# By default, SwiftLint uses a set of sensible default rules you can adjust:\ndisabled_rules: # rule identifiers turned on by default to exclude from running\n  - colon\n  - comma\n  - control_statement\nopt_in_rules: # some rules are turned off by default, so you need to opt-in\n  - empty_count # find all the available rules by running: `swiftlint rules`\n\n# Alternatively, specify all rules explicitly by uncommenting this option:\n# only_rules: # delete `disabled_rules` & `opt_in_rules` if using this\n#   - empty_parameters\n#   - vertical_whitespace\n\nanalyzer_rules: # rules run by `swiftlint analyze`\n  - explicit_self\n\n# Case-sensitive paths to include during linting. Directory paths supplied on the\n# command line will be ignored.\nincluded: \n  - Sources\nexcluded: # case-sensitive paths to ignore during linting. Takes precedence over `included`\n  - Carthage\n  - Pods\n  - Sources/ExcludedFolder\n  - Sources/ExcludedFile.swift\n  - Sources/*/ExcludedFile.swift # exclude files with a wildcard\n\n# If true, SwiftLint will not fail if no lintable files are found.\nallow_zero_lintable_files: false\n\n# If true, SwiftLint will treat all warnings as errors.\nstrict: false\n\n# If true, SwiftLint will treat all errors as warnings.\nlenient: false\n\n# The path to a baseline file, which will be used to filter out detected violations.\nbaseline: Baseline.json\n\n# The path to save detected violations to as a new baseline.\nwrite_baseline: Baseline.json\n\n# If true, SwiftLint will check for updates after linting or analyzing.\ncheck_for_updates: true\n\n# configurable rules can be customized from this configuration file\n# binary rules can set their severity level\nforce_cast: warning # implicitly\nforce_try:\n  severity: warning # explicitly\n# rules that have both warning and error levels, can set just the warning level\n# implicitly\nline_length: 110\n# they can set both implicitly with an array\ntype_body_length:\n  - 300 # warning\n  - 400 # error\n# or they can set both explicitly\nfile_length:\n  warning: 500\n  error: 1200\n# naming rules can set warnings/errors for min_length and max_length\n# additionally they can set excluded names\ntype_name:\n  min_length: 4 # only warning\n  max_length: # warning and error\n    warning: 40\n    error: 50\n  excluded: iPhone # excluded via string\n  allowed_symbols: [\"_\"] # these are allowed in type names\nidentifier_name:\n  min_length: # only min_length\n    error: 4 # only error\n  excluded: # excluded via string array\n    - id\n    - URL\n    - GlobalAPIKey\nreporter: \"xcode\" # reporter type (xcode, json, csv, checkstyle, codeclimate, junit, html, emoji, sonarqube, markdown, github-actions-logging, summary)\n```\n\nYou can also use environment variables in your configuration file,\nby using `${SOME_VARIABLE}` in a string.\n\n### Defining Custom Rules\n\nIn addition to the rules that the main SwiftLint project ships with, SwiftLint\ncan also run two types of custom rules that you can define yourself in your own\nprojects:\n\n#### 1. Swift Custom Rules\n\nThese rules are written the same way as the Swift-based rules that ship with\nSwiftLint so they're fast, accurate, can leverage SwiftSyntax, can be unit\ntested, and more.\n\nUsing these requires building SwiftLint with Bazel as described in\n[this video](https://vimeo.com/820572803) or its associated code in\n[github.com/jpsim/swiftlint-bazel-example](https://github.com/jpsim/swiftlint-bazel-example).\n\n#### 2. Regex Custom Rules\n\nYou can define custom regex-based rules in your configuration file using the\nfollowing syntax:\n\n```yaml\ncustom_rules:\n  pirates_beat_ninjas: # rule identifier\n    included:\n      - \".*\\\\.swift\" # regex that defines paths to include during linting. optional.\n    excluded:\n      - \".*Test\\\\.swift\" # regex that defines paths to exclude during linting. optional\n    name: \"Pirates Beat Ninjas\" # rule name. optional.\n    regex: \"([nN]inja)\" # matching pattern\n    capture_group: 0 # number of regex capture group to highlight the rule violation at. optional.\n    match_kinds: # SyntaxKinds to match. optional.\n      - comment\n      - identifier\n    message: \"Pirates are better than ninjas.\" # violation message. optional.\n    severity: error # violation severity. optional.\n  no_hiding_in_strings:\n    regex: \"([nN]inja)\"\n    match_kinds: string\n```\n\nThis is what the output would look like:\n\n![](https://raw.githubusercontent.com/realm/SwiftLint/main/assets/custom-rule.png)\n\nIt is important to note that the regular expression pattern is used with the\nflags `s` and `m` enabled, that is `.`\n[matches newlines](https://developer.apple.com/documentation/foundation/nsregularexpression/options/1412529-dotmatcheslineseparators)\nand `^`/`$`\n[match the start and end of lines](https://developer.apple.com/documentation/foundation/nsregularexpression/options/1408263-anchorsmatchlines),\nrespectively. If you do not want to have `.` match newlines, for example, the\nregex can be prepended by `(?-s)`.\n\nYou can filter the matches by providing one or more `match_kinds`, which will\nreject matches that include syntax kinds that are not present in this list. Here\nare all the possible syntax kinds:\n\n* `argument`\n* `attribute.builtin`\n* `attribute.id`\n* `buildconfig.id`\n* `buildconfig.keyword`\n* `comment`\n* `comment.mark`\n* `comment.url`\n* `doccomment`\n* `doccomment.field`\n* `identifier`\n* `keyword`\n* `number`\n* `objectliteral`\n* `parameter`\n* `placeholder`\n* `string`\n* `string_interpolation_anchor`\n* `typeidentifier`\n\nAll syntax kinds used in a snippet of Swift code can be extracted asking\n[SourceKitten](https://github.com/jpsim/SourceKitten). For example,\n`sourcekitten syntax --text \"struct S {}\"` delivers\n\n* `source.lang.swift.syntaxtype.keyword` for the `struct` keyword and\n* `source.lang.swift.syntaxtype.identifier` for its name `S`\n\nwhich match to `keyword` and `identifier` in the above list.\n\nIf using custom rules in combination with `only_rules`, you must include the\nliteral string `custom_rules` in the `only_rules` list:\n\n```yaml\nonly_rules:\n  - custom_rules\n\ncustom_rules:\n  no_hiding_in_strings:\n    regex: \"([nN]inja)\"\n    match_kinds: string\n```\n\nUnlike Swift custom rules, you can use official SwiftLint builds\n(e.g. from Homebrew) to run regex custom rules.\n\n### Auto-correct\n\nSwiftLint can automatically correct certain violations. Files on disk are\noverwritten with a corrected version.\n\nPlease make sure to have backups of these files before running\n`swiftlint --fix`, otherwise important data may be lost.\n\nStandard linting is disabled while correcting because of the high likelihood of\nviolations (or their offsets) being incorrect after modifying a file while\napplying corrections.\n\n### Analyze\n\nThe `swiftlint analyze` command can lint Swift files using the\nfull type-checked AST. The compiler log path containing the clean `swiftc` build\ncommand invocation (incremental builds will fail) must be passed to `analyze`\nvia the `--compiler-log-path` flag.\ne.g. `--compiler-log-path /path/to/xcodebuild.log`\n\nThis can be obtained by\n\n1. Cleaning DerivedData (incremental builds won't work with analyze)\n2. Running `xcodebuild -workspace {WORKSPACE}.xcworkspace -scheme {SCHEME} > xcodebuild.log`\n3. Running `swiftlint analyze --compiler-log-path xcodebuild.log`\n\nAnalyzer rules tend to be considerably slower than lint rules.\n\n## Using Multiple Configuration Files\n\nSwiftLint offers a variety of ways to include multiple configuration files.\nMultiple configuration files get merged into one single configuration that is\nthen applied just as a single configuration file would get applied.\n\nThere are quite a lot of use cases where using multiple configuration files\ncould be helpful:\n\nFor instance, one could use a team-wide shared SwiftLint configuration while\nallowing overrides in each project via a child configuration file.\n\nTeam-Wide Configuration:\n\n```yaml\ndisabled_rules:\n- force_cast\n```\n\nProject-Specific Configuration:\n\n```yaml\nopt_in_rules:\n- force_cast\n```\n\n### Child/Parent Configs (Locally)\n\nYou can specify a `child_config` and/or a `parent_config` reference within a\nconfiguration file. These references should be local paths relative to the\nfolder of the configuration file they are specified in. This even works\nrecursively, as long as there are no cycles and no ambiguities.\n\n**A child config is treated as a refinement and thus has a higher priority**,\nwhile a parent config is considered a base with lower priority in case of\nconflicts.\n\nHere's an example, assuming you have the following file structure:\n\n```txt\nProjectRoot\n    |_ .swiftlint.yml\n    |_ .swiftlint_refinement.yml\n    |_ Base\n        |_ .swiftlint_base.yml\n```\n\nTo include both the refinement and the base file, your `.swiftlint.yml` should\nlook like this:\n\n```yaml\nchild_config: .swiftlint_refinement.yml\nparent_config: Base/.swiftlint_base.yml\n```\n\nWhen merging parent and child configs, `included` and `excluded` configurations\nare processed carefully to account for differences in the directory location\nof the containing configuration files.\n\n### Child/Parent Configs (Remote)\n\nJust as you can provide local `child_config`/`parent_config` references,\ninstead of referencing local paths, you can just put urls that lead to\nconfiguration files. In order for SwiftLint to detect these remote references,\nthey must start with `http://` or `https://`.\n\nThe referenced remote configuration files may even recursively reference other\nremote configuration files, but aren't allowed to include local references.\n\nUsing a remote reference, your `.swiftlint.yml` could look like this:\n\n```yaml\nparent_config: https://myteamserver.com/our-base-swiftlint-config.yml\n```\n\nEvery time you run SwiftLint and have an Internet connection, SwiftLint tries\nto get a new version of every remote configuration that is referenced. If this\nrequest times out, a cached version is used if available. If there is no cached\nversion available, SwiftLint fails \u2013 but no worries, a cached version should be\nthere once SwiftLint has run successfully at least once.\n\nIf needed, the timeouts for the remote configuration fetching can be specified\nmanually via the configuration file(s) using the\n`remote_timeout`/`remote_timeout_if_cached` specifiers. These values default\nto 2 seconds or 1 second, respectively.\n\n### Command Line\n\nInstead of just providing one configuration file when running SwiftLint via the\ncommand line, you can also pass a hierarchy, where the first configuration is\ntreated as a parent, while the last one is treated as the highest-priority\nchild.\n\nA simple example including just two configuration files looks like this:\n\n`swiftlint --config .swiftlint.yml --config .swiftlint_child.yml`\n\n### Nested Configurations\n\nIn addition to a main configuration (the `.swiftlint.yml` file in the root\nfolder), you can put other configuration files named `.swiftlint.yml` into the\ndirectory structure that then get merged as a child config, but only with an\neffect for those files that are within the same directory as the config or in a\ndeeper directory where there isn't another configuration file. In other words:\nNested configurations don't work recursively \u2013 there's a maximum number of one\nnested configuration per file that may be applied in addition to the main\nconfiguration.\n\n`.swiftlint.yml` files are only considered as a nested configuration if they\nhave not been used to build the main configuration already (e. g. by having\nbeen referenced via something like `child_config: Folder/.swiftlint.yml`).\nAlso, `parent_config`/`child_config` specifications of nested configurations\nare getting ignored because there's no sense to that.\n\nIf one (or more) SwiftLint file(s) are explicitly specified via the `--config`\nparameter, that configuration will be treated as an override, no matter whether\nthere exist other `.swiftlint.yml` files somewhere within the directory.\n**So if you want to use nested configurations, you can't use the `--config`\nparameter.**\n\n## License\n\n[MIT licensed.](https://github.com/realm/SwiftLint/blob/main/LICENSE)\n\n## About\n\nSwiftLint is utterly maintained by volunteers contributing to its success\nentirely in their free time. As such, SwiftLint isn't a commercial product\nin any way.\n\nBe kind to the people maintaining SwiftLint as a hobby and accept that their\ntime is limited. Support them by contributing to the project, reporting issues,\nand helping others in the community.\n\nSpecial thanks go to [MacStadium](https://www.macstadium.com) for providing\nphysical Mac mini machines to run our performance tests.\n\n<img src=\"https://raw.githubusercontent.com/realm/SwiftLint/main/assets/macstadium.png\" width=\"184\" />\n\nWe also thank Realm (now MongoDB) for their inital contributions and setup of\nthe project.\n",
        "releases": [
            {
                "name": "0.58.2: New Year\u2019s Fresh Fold",
                "date": "2025-01-16T22:30:41Z"
            },
            {
                "name": "0.58.1: New Year\u2019s Fresh Fold",
                "date": "2025-01-15T18:50:12Z"
            },
            {
                "name": "0.58.0: New Year\u2019s Fresh Fold",
                "date": "2025-01-12T12:51:30Z"
            },
            {
                "name": "0.57.1: Squeaky Clean Cycle",
                "date": "2024-11-24T15:10:48Z"
            },
            {
                "name": "0.57.0: Squeaky Clean Cycle",
                "date": "2024-09-08T16:02:39Z"
            },
            {
                "name": "0.56.2: Heat Pump Dryer",
                "date": "2024-08-22T11:22:14Z"
            },
            {
                "name": "0.56.1: Heat Pump Dryer",
                "date": "2024-08-06T23:09:48Z"
            },
            {
                "name": "0.56.0: Heat Pump Dryer",
                "date": "2024-08-06T20:37:46Z"
            },
            {
                "name": "0.55.1: Universal Washing Powder",
                "date": "2024-05-16T19:42:13Z"
            },
            {
                "name": "0.55.0: Universal Washing Powder",
                "date": "2024-05-11T21:13:59Z"
            },
            {
                "name": "0.54.0: Macro-Economic Forces",
                "date": "2023-11-10T20:54:33Z"
            },
            {
                "name": "0.53.0: Laundry List",
                "date": "2023-09-26T15:09:56Z"
            },
            {
                "name": "0.52.4: Lid Switch",
                "date": "2023-07-06T18:43:58Z"
            },
            {
                "name": "0.52.3: Duplicate Hampers",
                "date": "2023-06-22T15:00:12Z"
            },
            {
                "name": "0.52.2: Crisper Clearer Pleats",
                "date": "2023-05-12T15:02:07Z"
            },
            {
                "name": "0.52.1: Crisp Clear Pleats",
                "date": "2023-05-11T15:15:22Z"
            },
            {
                "name": "0.52.0: Crisp Clear Pleats",
                "date": "2023-05-10T19:16:09Z"
            },
            {
                "name": "0.51.0: bzllint",
                "date": "2023-03-27T15:45:44Z"
            },
            {
                "name": "0.51.0-rc.2: bzllint",
                "date": "2023-02-20T23:55:37Z"
            },
            {
                "name": "0.51.0-rc.1: bzllint",
                "date": "2023-02-20T21:47:33Z"
            },
            {
                "name": "0.50.3: Bundle of Towels",
                "date": "2022-12-09T19:15:28Z"
            },
            {
                "name": "0.50.1: Artisanal Clothes Pegs Fixup Edition",
                "date": "2022-11-25T16:38:49Z"
            },
            {
                "name": "0.50.0: Artisanal Clothes Pegs",
                "date": "2022-11-18T19:46:02Z"
            },
            {
                "name": "0.50.0-rc.4: Artisanal Clothes Pegs",
                "date": "2022-11-04T13:26:38Z"
            },
            {
                "name": "0.50.0-rc.3: Artisanal Clothes Pegs",
                "date": "2022-10-27T13:48:54Z"
            },
            {
                "name": "0.50.0-rc.2: Artisanal Clothes Pegs",
                "date": "2022-10-17T18:54:46Z"
            },
            {
                "name": "0.50.0-rc.1: Artisanal Clothes Pegs",
                "date": "2022-10-07T15:00:10Z"
            },
            {
                "name": "0.49.1: Buanderie Principale",
                "date": "2022-09-01T16:32:51Z"
            },
            {
                "name": "0.49.0: Asynchronous Defuzzer",
                "date": "2022-08-26T14:53:05Z"
            },
            {
                "name": "0.49.0-rc.2: Asynchronous Defuzzer",
                "date": "2022-08-18T17:36:00Z"
            },
            {
                "name": "0.49.0-rc.1: Asynchronous Defuzzer",
                "date": "2022-08-12T13:51:47Z"
            },
            {
                "name": "0.48.0: Rechargeable Defuzzer",
                "date": "2022-07-26T07:34:59Z"
            },
            {
                "name": "0.47.1: Smarter Appliance",
                "date": "2022-04-25T15:31:38Z"
            },
            {
                "name": "0.47.0: Smart Appliance",
                "date": "2022-03-23T14:59:50Z"
            },
            {
                "name": "0.47.0-rc.4: Smart Appliance",
                "date": "2022-03-18T23:07:17Z"
            },
            {
                "name": "0.47.0-rc.3: Smart Appliance",
                "date": "2022-03-17T19:04:04Z"
            },
            {
                "name": "0.47.0-rc.2: Smart Appliance",
                "date": "2022-03-16T14:37:44Z"
            },
            {
                "name": "0.47.0-rc.1: Smart Appliance",
                "date": "2022-03-09T02:13:32Z"
            },
            {
                "name": "0.46.5: Laundry Studio",
                "date": "2022-03-08T21:21:18Z"
            },
            {
                "name": "0.46.4: Detergent Tray",
                "date": "2022-03-07T16:16:11Z"
            },
            {
                "name": "0.46.3: Detergent Spill",
                "date": "2022-02-22T20:30:53Z"
            },
            {
                "name": "0.46.2: Detergent Package",
                "date": "2022-01-27T14:17:53Z"
            },
            {
                "name": "0.46.1: Detergent Container",
                "date": "2022-01-21T22:02:16Z"
            },
            {
                "name": "0.46.0: Detergent Container",
                "date": "2022-01-21T20:59:17Z"
            },
            {
                "name": "0.45.1: Clothes Drying Hooks",
                "date": "2021-11-29T21:52:18Z"
            },
            {
                "name": "0.45.0: Effectful Apparel",
                "date": "2021-10-18T15:58:19Z"
            },
            {
                "name": "0.44.0: Travel Size Lint Roller",
                "date": "2021-09-09T22:00:02Z"
            },
            {
                "name": "0.43.1: Laundroformat",
                "date": "2021-03-15T16:03:01Z"
            },
            {
                "name": "0.43.0: Clothes Line Interface",
                "date": "2021-03-03T21:02:02Z"
            },
            {
                "name": "0.43.0-rc.4: Clothes Line Interface",
                "date": "2021-02-26T20:09:58Z"
            },
            {
                "name": "0.43.0-rc.3: Clothes Line Interface",
                "date": "2021-02-17T20:49:46Z"
            },
            {
                "name": "0.43.0-rc.2: Clothes Line Interface",
                "date": "2021-01-29T20:26:53Z"
            },
            {
                "name": "0.43.0-rc.1: Clothes Line Interface",
                "date": "2021-01-22T18:54:41Z"
            },
            {
                "name": "0.42.0: He Chutes, He Scores",
                "date": "2020-12-14T20:30:52Z"
            },
            {
                "name": "0.42.0-rc.2",
                "date": "2020-12-09T14:24:52Z"
            },
            {
                "name": "0.42.0-rc.1",
                "date": "2020-12-04T15:13:02Z"
            },
            {
                "name": "0.41.0: World\u2019s Cleanest Voting Booth",
                "date": "2020-11-08T17:10:47Z"
            },
            {
                "name": "0.40.3: Greased Up Drum Bearings",
                "date": "2020-09-22T21:24:55Z"
            },
            {
                "name": "0.40.2: Demo Unit",
                "date": "2020-09-11T02:37:07Z"
            },
            {
                "name": "0.40.1: A Baffling Response",
                "date": "2020-08-27T15:35:05Z"
            },
            {
                "name": "0.40.0: Washable Mask",
                "date": "2020-08-10T15:32:06Z"
            },
            {
                "name": "0.39.2: Stay Home",
                "date": "2020-04-04T03:23:38Z"
            },
            {
                "name": "0.39.1: The Laundromat has a Rotating Door",
                "date": "2020-02-11T21:50:54Z"
            },
            {
                "name": "0.39.0: A Visitor in the Laundromat",
                "date": "2020-02-11T06:27:59Z"
            },
            {
                "name": "0.38.2: Machine Repair Manual",
                "date": "2020-01-08T18:35:55Z"
            },
            {
                "name": "0.38.1: Extra Shiny Pulsator Cap",
                "date": "2020-01-04T03:45:06Z"
            },
            {
                "name": "0.38.0: Toroidal Agitation",
                "date": "2019-12-03T18:51:55Z"
            },
            {
                "name": "0.37.0: Double Load",
                "date": "2019-11-09T22:32:47Z"
            },
            {
                "name": "0.36.0: \ud83d\udc55\ud83d\udc5a\ud83d\udc57",
                "date": "2019-10-24T22:26:25Z"
            },
            {
                "name": "0.35.0: Secondary Lint Trap",
                "date": "2019-09-03T14:08:28Z"
            },
            {
                "name": "0.34.0: Anti-Static Wool Dryer Balls",
                "date": "2019-07-19T01:37:56Z"
            },
            {
                "name": "0.33.1: Coin-Operated Property Wrapper",
                "date": "2019-07-08T15:56:15Z"
            },
            {
                "name": "0.33.0: Worldwide Dryers Conference",
                "date": "2019-06-02T17:08:09Z"
            },
            {
                "name": "0.32.0: Wash-N-Fold-N-Reduce",
                "date": "2019-04-29T04:44:27Z"
            },
            {
                "name": "0.31.0: Busy Laundromat",
                "date": "2019-02-28T23:16:19Z"
            },
            {
                "name": "0.30.1: Localized Stain Remover",
                "date": "2019-01-23T19:13:48Z"
            },
            {
                "name": "0.30.0: A New Washer and Dryer Set",
                "date": "2019-01-18T07:36:24Z"
            },
            {
                "name": "0.29.4: In-Unit Operands",
                "date": "2019-01-16T22:30:25Z"
            },
            {
                "name": "0.29.3: Entangled Agitator",
                "date": "2019-01-08T00:31:44Z"
            },
            {
                "name": "0.29.2: Washateria",
                "date": "2018-12-24T04:33:07Z"
            },
            {
                "name": "0.29.1: There\u2019s Always More Laundry",
                "date": "2018-11-29T22:29:46Z"
            },
            {
                "name": "0.29.0: A Laundry List of Changes",
                "date": "2018-11-27T21:32:17Z"
            },
            {
                "name": "0.28.2: EnviroBoost Plus",
                "date": "2018-11-24T19:31:44Z"
            },
            {
                "name": "0.28.1: EnviroBoost",
                "date": "2018-11-18T23:42:49Z"
            },
            {
                "name": "0.28.0: EcoBoost",
                "date": "2018-11-14T06:48:12Z"
            },
            {
                "name": "0.27.0: Heavy Duty",
                "date": "2018-07-31T16:45:07Z"
            },
            {
                "name": "0.26.0: Maytagged Pointers",
                "date": "2018-06-22T16:52:33Z"
            },
            {
                "name": "0.25.1: Lid Locked",
                "date": "2018-04-08T18:14:36Z"
            },
            {
                "name": "0.25.0: Cleaning the Lint Filter",
                "date": "2018-02-12T06:23:08Z"
            },
            {
                "name": "0.24.2: Dented Tumbler",
                "date": "2018-01-10T18:15:28Z"
            },
            {
                "name": "0.24.1: Dented Tumbler",
                "date": "2018-01-08T23:22:42Z"
            },
            {
                "name": "0.24.0: Timed Dry",
                "date": "2017-11-10T23:51:16Z"
            },
            {
                "name": "0.23.1: Rewash: Forgotten Load Edition",
                "date": "2017-10-10T16:56:09Z"
            },
            {
                "name": "0.23.0: Permanent Press Cycle",
                "date": "2017-10-04T01:21:15Z"
            },
            {
                "name": "0.22.0: Wrinkle-free",
                "date": "2017-08-30T17:46:35Z"
            },
            {
                "name": "0.21.0: Vintage Washboard",
                "date": "2017-08-01T22:25:21Z"
            },
            {
                "name": "0.20.1: More Liquid Fabric Softener",
                "date": "2017-07-01T18:29:21Z"
            },
            {
                "name": "0.20.0: Liquid Fabric Softener",
                "date": "2017-06-18T19:13:14Z"
            },
            {
                "name": "0.19.0: Coin-Operated Machine",
                "date": "2017-05-25T21:27:59Z"
            },
            {
                "name": "Coin-Operated Machine RC1",
                "date": "2017-05-22T21:15:04Z"
            },
            {
                "name": "0.18.1: Misaligned Drum",
                "date": "2017-04-06T23:53:59Z"
            },
            {
                "name": "0.18.0: Misaligned Drum",
                "date": "2017-04-06T22:20:43Z"
            },
            {
                "name": "0.17.0: Extra Rinse Cycle",
                "date": "2017-03-23T21:45:59Z"
            },
            {
                "name": "0.16.1: Commutative Fabric Sheets",
                "date": "2017-01-20T18:36:53Z"
            },
            {
                "name": "0.16.0: Maximum Energy Efficiency Setting",
                "date": "2017-01-11T01:22:08Z"
            },
            {
                "name": "0.15.0: Hand Washable Holiday Linens \ud83c\udf84",
                "date": "2016-12-22T22:58:51Z"
            },
            {
                "name": "0.14.0: Super Awesome Retractable Drying Rack",
                "date": "2016-12-19T02:10:05Z"
            },
            {
                "name": "0.13.2: Light Cycle",
                "date": "2016-12-01T18:41:46Z"
            },
            {
                "name": "0.13.1: Heavy Cycle",
                "date": "2016-11-29T21:17:06Z"
            },
            {
                "name": "0.13.0: MakeYourClothesCleanAgain",
                "date": "2016-11-04T08:47:57Z"
            },
            {
                "name": "0.12.0: Vertical Laundry",
                "date": "2016-08-24T20:07:39Z"
            },
            {
                "name": "0.11.2: Communal Clothesline",
                "date": "2016-08-23T18:58:06Z"
            },
            {
                "name": "0.11.1: Cuddles... Or Else!",
                "date": "2016-06-11T03:07:32Z"
            },
            {
                "name": "0.11.0: Laundromat Format",
                "date": "2016-06-08T22:40:59Z"
            },
            {
                "name": "0.10.0: `laundry-select` edition",
                "date": "2016-04-27T19:11:50Z"
            },
            {
                "name": "0.9.2: Multiple Exhaust Codes",
                "date": "2016-03-15T22:30:48Z"
            },
            {
                "name": "0.9.1: Air Duct Cleaning",
                "date": "2016-02-16T21:40:19Z"
            },
            {
                "name": "0.9.0: Appliance Maintenance",
                "date": "2016-02-12T20:46:46Z"
            },
            {
                "name": "0.8.0: High Heat",
                "date": "2016-02-06T03:45:49Z"
            },
            {
                "name": "0.7.2: Appliance Manual",
                "date": "2016-01-29T01:14:07Z"
            },
            {
                "name": "0.7.1: Delicate Cycle",
                "date": "2016-01-26T19:58:59Z"
            },
            {
                "name": "0.7.0: Automatic Permanent Press",
                "date": "2016-01-24T22:42:21Z"
            },
            {
                "name": "0.6.0: Steam Cycle",
                "date": "2016-01-15T00:02:35Z"
            },
            {
                "name": "0.5.6: Bug FixLint",
                "date": "2016-01-14T02:36:09Z"
            },
            {
                "name": "0.5.5: Magic Drying Fluff Balls\u2122",
                "date": "2016-01-04T21:53:39Z"
            },
            {
                "name": "0.5.4: Bounce\u2122",
                "date": "2016-01-03T00:19:10Z"
            },
            {
                "name": "0.5.3: Mountain Scent",
                "date": "2015-12-24T04:59:07Z"
            },
            {
                "name": "0.5.2: Snuggle\u2122",
                "date": "2015-12-18T17:34:45Z"
            },
            {
                "name": "0.5.1: Lint Tray Malfunction",
                "date": "2015-12-14T01:15:02Z"
            },
            {
                "name": "0.5.0: Downy\u2122",
                "date": "2015-12-13T02:18:50Z"
            },
            {
                "name": "0.4.0: Wrinkle Release",
                "date": "2015-11-18T03:58:30Z"
            },
            {
                "name": "0.3.0: Wrinkly Rules",
                "date": "2015-11-03T21:18:20Z"
            },
            {
                "name": "0.2.0: Tumble Dry",
                "date": "2015-09-30T16:58:55Z"
            },
            {
                "name": "0.1.2: FabricSoftenerRule",
                "date": "2015-08-24T20:24:22Z"
            },
            {
                "name": "0.1.1: Top Loading",
                "date": "2015-05-29T16:46:36Z"
            },
            {
                "name": "0.1.0: Fresh Out Of The Dryer",
                "date": "2015-05-18T05:11:53Z"
            }
        ]
    }
}