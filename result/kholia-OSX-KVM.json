{
    "https://api.github.com/repos/kholia/OSX-KVM": {
        "forks": 1890,
        "watchers": 21016,
        "stars": 21016,
        "languages": {
            "Python": 46631,
            "Shell": 39174,
            "Makefile": 6646
        },
        "commits": [
            "2024-10-10T06:13:13Z",
            "2024-10-07T08:29:49Z",
            "2024-09-24T04:46:13Z",
            "2024-04-15T15:13:30Z",
            "2024-04-13T11:48:56Z",
            "2024-04-13T11:47:48Z",
            "2024-04-13T11:36:06Z",
            "2024-04-13T11:31:04Z",
            "2023-12-12T06:46:41Z",
            "2023-11-30T03:53:38Z",
            "2023-11-21T10:39:29Z",
            "2023-04-08T01:20:53Z",
            "2023-02-09T06:13:03Z",
            "2023-01-26T05:19:05Z",
            "2022-10-30T05:29:50Z",
            "2022-10-27T01:57:24Z",
            "2022-10-24T23:11:28Z",
            "2022-10-24T04:07:56Z",
            "2022-06-23T05:17:57Z",
            "2022-06-20T01:17:06Z",
            "2022-04-28T06:52:01Z",
            "2022-03-15T11:31:50Z",
            "2022-03-13T12:56:51Z",
            "2022-01-23T07:04:13Z",
            "2021-12-27T08:58:40Z",
            "2021-11-29T15:51:36Z",
            "2021-11-28T02:05:37Z",
            "2021-11-02T06:43:59Z",
            "2021-11-02T03:15:52Z",
            "2021-10-26T04:52:43Z"
        ],
        "creation_date": "2015-11-06T12:27:28Z",
        "contributors": 10,
        "topics": [
            "bigsur",
            "bigsur-hackintosh",
            "catalina-hackinotsh",
            "emulation",
            "hackintosh",
            "kernel-debugging",
            "kvm",
            "macos",
            "macos-installer",
            "macos-mojave",
            "monterey",
            "monterey-hackintosh",
            "osx",
            "qemu",
            "qemu-kvm",
            "sonoma-hackintosh",
            "ventura",
            "ventura-hackintosh",
            "virtualization"
        ],
        "subscribers": 500,
        "readme": "### Note\n\nThis `README.md` documents the process of creating a `Virtual Hackintosh`\nsystem.\n\nNote: All blobs and resources included in this repository are re-derivable (all\ninstructions are included!).\n\n:green_heart: Looking for **commercial** support with this stuff? I am [available\nover email](mailto:dhiru.kholia@gmail.com?subject=[GitHub]%20OSX-KVM%20Commercial%20Support%20Request&body=Hi%20-%20We%20are%20interested%20in%20purchasing%20commercial%20support%20options%20for%20your%20project.) for a chat for **commercial support options only**. Note: Project sponsors get access to the `Private OSX-KVM` repository, and direct support.\n\nStruggling with `Content Caching` stuff? We can help.\n\nWorking with `Proxmox` and macOS? See [Nick's blog for sure](https://www.nicksherlock.com/).\n\nYes, we support offline macOS installations now - see [this document](./run_offline.md) \ud83c\udf89\n\n\n### Contributing Back\n\nThis project can always use your help, time and attention. I am looking for\nhelp (pull-requests!) with the following work items:\n\n* Documentation around running macOS on popular cloud providers (Hetzner, GCP,\n  AWS). See the `Is This Legal?` section and associated references.\n\n* Document (share) how you use this project to build + test open-source\n  projects / get your stuff done.\n\n* Document how to use this project for XNU kernel debugging and development.\n\n* Document the process to launch a bunch of headless macOS VMs (build farm).\n\n* Document usage of [munki](https://github.com/munki/munki) to deploy software\n  to such a `build farm`.\n\n* Enable VNC + SSH support out of the box or more easily.\n\n* Robustness improvements are always welcome!\n\n* (Not so) crazy idea - automate the macOS installation via OpenCV.\n\n\n### Requirements\n\n* A modern Linux distribution. E.g. Ubuntu 24.04 LTS 64-bit or later.\n\n* QEMU >= 8.2.2\n\n* A CPU with Intel VT-x / AMD SVM support is required (`grep -e vmx -e svm /proc/cpuinfo`)\n\n* A CPU with SSE4.1 support is required for >= macOS Sierra\n\n* A CPU with AVX2 support is required for >= macOS Ventura\n\nNote: Older AMD CPU(s) are known to be problematic but modern AMD Ryzen\nprocessors work just fine (even for macOS Sonoma).\n\n\n### Installation Preparation\n\n* Install QEMU and other packages.\n\n  ```\n  sudo apt-get install qemu-system uml-utilities virt-manager git \\\n      wget libguestfs-tools p7zip-full make dmg2img tesseract-ocr \\\n      tesseract-ocr-eng genisoimage vim net-tools screen -y\n  ```\n\n  This step may need to be adapted for your Linux distribution.\n\n* Clone this repository on your QEMU system. Files from this repository are\n  used in the following steps.\n\n  ```\n  cd ~\n\n  git clone --depth 1 --recursive https://github.com/kholia/OSX-KVM.git\n\n  cd OSX-KVM\n  ```\n\n  Repository updates can be pulled via the following command:\n\n  ```\n  git pull --rebase\n  ```\n\n  This repository uses rebase based workflows heavily.\n\n* KVM may need the following tweak on the host machine to work.\n\n  ```\n  sudo modprobe kvm; echo 1 | sudo tee /sys/module/kvm/parameters/ignore_msrs\n  ```\n\n  To make this change permanent, you may use the following command.\n\n  ```\n  sudo cp kvm.conf /etc/modprobe.d/kvm.conf  # for intel boxes only\n\n  sudo cp kvm_amd.conf /etc/modprobe.d/kvm.conf  # for amd boxes only\n  ```\n\n* Add user to the `kvm` and `libvirt` groups (might be needed).\n\n  ```\n  sudo usermod -aG kvm $(whoami)\n  sudo usermod -aG libvirt $(whoami)\n  sudo usermod -aG input $(whoami)\n  ```\n\n  Note: Re-login after executing this command.\n\n* Fetch macOS installer.\n\n  ```\n  ./fetch-macOS-v2.py\n  ```\n\n  You can choose your desired macOS version here. After executing this step,\n  you should have the `BaseSystem.dmg` file in the current folder.\n\n  ATTENTION: Let `>= Big Sur` setup sit at the `Country Selection` screen, and\n  other similar places for a while if things are being slow. The initial macOS\n  setup wizard will eventually succeed.\n\n  Sample run:\n\n  ```\n  $ ./fetch-macOS-v2.py\n  1. High Sierra (10.13)\n  2. Mojave (10.14)\n  3. Catalina (10.15)\n  4. Big Sur (11.7)\n  5. Monterey (12.6)\n  6. Ventura (13) - RECOMMENDED\n  7. Sonoma (14)\n  8. Sequoia (15)\n\n  Choose a product to download (1-8): 6\n  ```\n\n  Note: Modern NVIDIA GPUs are supported on HighSierra but not on later\n  versions of macOS.\n\n* Convert the downloaded `BaseSystem.dmg` file into the `BaseSystem.img` file.\n\n  ```\n  dmg2img -i BaseSystem.dmg BaseSystem.img\n  ```\n\n* Create a virtual HDD image where macOS will be installed. If you change the\n  name of the disk image from `mac_hdd_ng.img` to something else, the boot scripts\n  will need to be updated to point to the new image name.\n\n  ```\n  qemu-img create -f qcow2 mac_hdd_ng.img 256G\n  ```\n\n  NOTE: Create this HDD image file on a fast SSD/NVMe disk for best results.\n\n* Now you are ready to install macOS \ud83d\ude80\n\n\n### Installation\n\n- CLI method (primary). Just run the `OpenCore-Boot.sh` script to start the\n  installation process.\n\n  ```\n  ./OpenCore-Boot.sh\n  ```\n\n  Note: This same script works for all recent macOS versions.\n\n- Use the `Disk Utility` tool within the macOS installer to partition, and\n  format the virtual disk attached to the macOS VM. Use `APFS` (the default)\n  for modern macOS versions.\n\n- Go ahead, and install macOS \ud83d\ude4c\n\n- (OPTIONAL) Use this macOS VM disk with libvirt (virt-manager / virsh stuff).\n\n  - Edit `macOS-libvirt-Catalina.xml` file and change the various file paths (search\n    for `CHANGEME` strings in that file). The following command should do the\n    trick usually.\n\n    ```\n    sed \"s/CHANGEME/$USER/g\" macOS-libvirt-Catalina.xml > macOS.xml\n\n    virt-xml-validate macOS.xml\n    ```\n\n  - Create a VM by running the following command.\n\n    ```bash\n    virsh --connect qemu:///system define macOS.xml\n    ```\n\n  - If needed, grant necessary permissions to libvirt-qemu user,\n\n    ```\n    sudo setfacl -m u:libvirt-qemu:rx /home/$USER\n    sudo setfacl -R -m u:libvirt-qemu:rx /home/$USER/OSX-KVM\n    ```\n\n  - Launch `virt-manager` and start the `macOS` virtual machine.\n\n\n### Headless macOS\n\n- Use the provided [boot-macOS-headless.sh](./boot-macOS-headless.sh) script.\n\n  ```\n  ./boot-macOS-headless.sh\n  ```\n\n\n### Setting Expectations Right\n\nNice job on setting up a `Virtual Hackintosh` system! Such a system can be used\nfor a variety of purposes (e.g. software builds, testing, reversing work), and\nit may be all you need, along with some tweaks documented in this repository.\n\nHowever, such a system lacks graphical acceleration, a reliable sound sub-system,\nUSB 3 functionality and other similar things. To enable these things, take a\nlook at our [notes](notes.md). We would like to resume our testing and\ndocumentation work around this area. Please [reach out to us](mailto:dhiru.kholia@gmail.com?subject=[GitHub]%20OSX-KVM%20Funding%20Support)\nif you are able to fund this area of work.\n\nIt is possible to have 'beyond-native-apple-hw' performance but it does require\nwork, patience, and a bit of luck (perhaps?).\n\n\n### Post-Installation\n\n* See [networking notes](networking-qemu-kvm-howto.txt) on how to setup networking in your VM, outbound and also inbound for remote access to your VM via SSH, VNC, etc.\n\n* To passthrough GPUs and other devices, see [these notes](notes.md#gpu-passthrough-notes).\n\n* Need a different resolution? Check out the [notes](notes.md#change-resolution-in-opencore) included in this repository.\n\n* Trouble with iMessage? Check out the [notes](notes.md#trouble-with-imessage) included in this repository.\n\n* Highly recommended macOS tweaks - https://github.com/sickcodes/osx-optimizer\n\n\n### Is This Legal?\n\nThe \"secret\" Apple OSK string is widely available on the Internet. It is also included in a public court document [available here](http://www.rcfp.org/sites/default/files/docs/20120105_202426_apple_sealing.pdf). I am not a lawyer but it seems that Apple's attempt(s) to get the OSK string treated as a trade secret did not work out. Due to these reasons, the OSK string is freely included in this repository.\n\nPlease review the ['Legality of Hackintoshing' documentation bits from Dortania's OpenCore Install Guide](https://dortania.github.io/OpenCore-Install-Guide/why-oc.html#legality-of-hackintoshing).\n\nGabriel Somlo also has [some thoughts](http://www.contrib.andrew.cmu.edu/~somlo/OSXKVM/) on the legal aspects involved in running macOS under QEMU/KVM.\n\nYou may also find [this 'Announcing Amazon EC2 Mac instances for macOS' article](https://aws.amazon.com/about-aws/whats-new/2020/11/announcing-amazon-ec2-mac-instances-for-macos/\n) interesting.\n\nNote: It is your responsibility to understand, and accept (or not accept) the\nApple EULA.\n\nNote: This is not legal advice, so please make the proper assessments yourself\nand discuss with your lawyers if you have any concerns (Text credit: Dortania)\n\n\n### Motivation\n\nMy aim is to enable macOS based educational tasks, builds + testing, kernel\ndebugging, reversing, and macOS security research in an easy, reproducible\nmanner without getting 'invested' in Apple's closed ecosystem (too heavily).\n\nThese `Virtual Hackintosh` systems are not intended to replace the genuine\nphysical macOS systems.\n\nPersonally speaking, this repository has been a way for me to 'exit' the Apple\necosystem. It has helped me to test and compare the interoperability of `Canon\nCanoScan LiDE 120` scanner, and `Brother HL-2250DN` laser printer. And these\ndevices now work decently enough on modern versions of Ubuntu (Yay for free\nsoftware). Also, a long time back, I had to completely wipe my (then) brand new\n`MacBook Pro (Retina, 15-inch, Late 2013)` and install Xubuntu on it - as the\n`OS X` kernel kept crashing on it!\n\nBackstory: I was a (poor) student in Canada in a previous life and Apple made [my work on cracking Apple Keychains](https://github.com/openwall/john/blob/bleeding-jumbo/src/keychain_fmt_plug.c) a lot harder than it needed to be. This is how I got interested in Hackintosh systems.\n",
        "releases": []
    }
}