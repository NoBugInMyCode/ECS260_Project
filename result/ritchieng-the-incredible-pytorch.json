{
    "https://api.github.com/repos/ritchieng/the-incredible-pytorch": {
        "forks": 2127,
        "watchers": 11642,
        "stars": 11642,
        "languages": {},
        "commits": [
            "2025-01-08T06:21:12Z",
            "2025-01-07T09:55:13Z",
            "2025-01-01T09:00:21Z",
            "2025-01-01T08:56:03Z",
            "2024-12-18T02:23:24Z",
            "2024-12-17T00:53:21Z",
            "2024-09-25T11:30:19Z",
            "2024-09-25T11:26:29Z",
            "2024-06-16T05:04:15Z",
            "2024-06-04T14:49:50Z",
            "2024-04-21T08:11:32Z",
            "2024-04-21T08:01:15Z",
            "2024-04-21T07:57:20Z",
            "2024-04-21T07:55:29Z",
            "2024-04-13T05:26:08Z",
            "2024-04-09T00:14:03Z",
            "2024-04-03T03:19:08Z",
            "2024-03-23T08:15:43Z",
            "2024-03-23T00:26:59Z",
            "2024-02-19T02:40:58Z",
            "2024-01-17T06:18:18Z",
            "2024-01-02T04:30:39Z",
            "2023-12-08T04:57:18Z",
            "2023-11-30T04:33:42Z",
            "2023-11-25T19:21:28Z",
            "2023-11-25T19:13:28Z",
            "2023-11-20T02:50:24Z",
            "2023-11-20T02:49:23Z",
            "2023-11-17T09:29:50Z",
            "2023-11-17T09:27:07Z"
        ],
        "creation_date": "2017-02-11T08:33:11Z",
        "contributors": 30,
        "topics": [
            "deep-learning",
            "deep-learning-library",
            "deep-learning-tutorial",
            "deep-neural-networks",
            "python",
            "pytorch"
        ],
        "subscribers": 470,
        "readme": "<p align=\"center\"><img width=\"40%\" src=\"the_incredible_pytorch.png\" /></p>\n\n--------------------------------------------------------------------------------\n<p align=\"center\">\n\t<img src=\"https://img.shields.io/badge/stars-10000+-blue.svg\"/>\n\t<img src=\"https://img.shields.io/badge/forks-1900+-blue.svg\"/>\n\t<img src=\"https://img.shields.io/badge/license-MIT-blue.svg\"/>\n</p>\n\nThis is a curated list of tutorials, projects, libraries, videos, papers, books and anything related to the incredible [PyTorch](http://pytorch.org/). Feel free to make a pull request to contribute to this list.\n\n\n# Table Of Contents\n<!-- vscode-markdown-toc -->\n\n- [Table Of Contents](#table-of-contents)\n\t- [Tutorials](#tutorials)\n\t- [Large Language Models (LLMs)](#large-language-models-llms)\n\t- [Tabular Data](#tabular-data)\n\t- [Visualization](#visualization)\n\t- [Explainability](#explainability)\n\t- [Object Detection](#object-detection)\n\t- [Long-Tailed / Out-of-Distribution Recognition](#long-tailed--out-of-distribution-recognition)\n\t- [Activation Functions](#activation-functions)\n\t- [Energy-Based Learning](#energy-based-learning)\n\t- [Missing Data](#missing-data)\n\t- [Architecture Search](#architecture-search)\n\t- [Continual Learning](#continual-learning)\n\t- [Optimization](#optimization)\n\t- [Quantization](#quantization)\n\t- [Quantum Machine Learning](#quantum-machine-learning)\n\t- [Neural Network Compression](#neural-network-compression)\n\t- [Facial, Action and Pose Recognition](#facial-action-and-pose-recognition)\n\t- [Super resolution](#super-resolution)\n\t- [Synthetesizing Views](#synthetesizing-views)\n\t- [Voice](#voice)\n\t- [Medical](#medical)\n\t- [3D Segmentation, Classification and Regression](#3d-segmentation-classification-and-regression)\n\t- [Video Recognition](#video-recognition)\n\t- [Recurrent Neural Networks (RNNs)](#recurrent-neural-networks-rnns)\n\t- [Convolutional Neural Networks (CNNs)](#convolutional-neural-networks-cnns)\n\t- [Segmentation](#segmentation)\n\t- [Geometric Deep Learning: Graph \\& Irregular Structures](#geometric-deep-learning-graph--irregular-structures)\n\t- [Sorting](#sorting)\n\t- [Ordinary Differential Equations Networks](#ordinary-differential-equations-networks)\n\t- [Multi-task Learning](#multi-task-learning)\n\t- [GANs, VAEs, and AEs](#gans-vaes-and-aes)\n\t- [Unsupervised Learning](#unsupervised-learning)\n\t- [Adversarial Attacks](#adversarial-attacks)\n\t- [Style Transfer](#style-transfer)\n\t- [Image Captioning](#image-captioning)\n\t- [Transformers](#transformers)\n\t- [Similarity Networks and Functions](#similarity-networks-and-functions)\n\t- [Reasoning](#reasoning)\n\t- [General NLP](#general-nlp)\n\t- [Question and Answering](#question-and-answering)\n\t- [Speech Generation and Recognition](#speech-generation-and-recognition)\n\t- [Document and Text Classification](#document-and-text-classification)\n\t- [Text Generation](#text-generation)\n\t- [Text to Image](#text-to-image)\n\t- [Translation](#translation)\n\t- [Sentiment Analysis](#sentiment-analysis)\n\t- [Deep Reinforcement Learning](#deep-reinforcement-learning)\n\t- [Deep Bayesian Learning and Probabilistic Programmming](#deep-bayesian-learning-and-probabilistic-programmming)\n\t- [Spiking Neural Networks](#spiking-neural-networks)\n\t- [Anomaly Detection](#anomaly-detection)\n\t- [Regression Types](#regression-types)\n\t- [Time Series](#time-series)\n\t- [Synthetic Datasets](#synthetic-datasets)\n\t- [Neural Network General Improvements](#neural-network-general-improvements)\n\t- [DNN Applications in Chemistry and Physics](#dnn-applications-in-chemistry-and-physics)\n\t- [New Thinking on General Neural Network Architecture](#new-thinking-on-general-neural-network-architecture)\n\t- [Linear Algebra](#linear-algebra)\n\t- [API Abstraction](#api-abstraction)\n\t- [Low Level Utilities](#low-level-utilities)\n\t- [PyTorch Utilities](#pytorch-utilities)\n\t- [PyTorch Video Tutorials](#pytorch-video-tutorials)\n\t- [Community](#community)\n\t- [To be Classified](#to-be-classified)\n\t- [Links to This Repository](#links-to-this-repository)\n\t- [Contributions](#contributions)\n\n<!-- vscode-markdown-toc-config\n\tnumbering=false\n\tautoSave=true\n\t/vscode-markdown-toc-config -->\n<!-- /vscode-markdown-toc -->\n\n## <a name='Tutorials'></a>Tutorials\n- [Official PyTorch Tutorials](https://github.com/pytorch/tutorials)\n- [Official PyTorch Examples](https://github.com/pytorch/examples)\n- [Dive Into Deep Learning with PyTorch](https://github.com/d2l-ai/d2l-en)\n- [How to Read Pytorch](https://github.com/davidbau/how-to-read-pytorch)\n- [Minicourse in Deep Learning with PyTorch (Multi-language)](https://github.com/Atcold/pytorch-Deep-Learning-Minicourse)\n- [Practical Deep Learning with PyTorch](https://github.com/ritchieng/deep-learning-wizard)\n- [Deep Learning Models](https://github.com/rasbt/deeplearning-models)\n- [C++ Implementation of PyTorch Tutorial](https://github.com/prabhuomkar/pytorch-cpp)\n- [Simple Examples to Introduce PyTorch](https://github.com/jcjohnson/pytorch-examples)\n- [Mini Tutorials in PyTorch](https://github.com/vinhkhuc/PyTorch-Mini-Tutorials)\n- [Deep Learning for NLP](https://github.com/rguthrie3/DeepLearningForNLPInPytorch)\n- [Deep Learning Tutorial for Researchers](https://github.com/yunjey/pytorch-tutorial)\n- [Fully Convolutional Networks implemented with PyTorch](https://github.com/wkentaro/pytorch-fcn)\n- [Simple PyTorch Tutorials Zero to ALL](https://github.com/hunkim/PyTorchZeroToAll)\n- [DeepNLP-models-Pytorch](https://github.com/DSKSD/DeepNLP-models-Pytorch)\n- [MILA PyTorch Welcome Tutorials](https://github.com/mila-udem/welcome_tutorials)\n- [Effective PyTorch, Optimizing Runtime with TorchScript and Numerical Stability Optimization](https://github.com/vahidk/EffectivePyTorch)\n- [Practical PyTorch](https://github.com/spro/practical-pytorch)\n- [PyTorch Project Template](https://github.com/moemen95/PyTorch-Project-Template)\n- [Semantic Search with PyTorch](https://github.com/kuutsav/information-retrieval)\n\n## <a name='LargeLanguageModels'></a>Large Language Models (LLMs)\n- LLM Tutorials\n  - [Build a Large Language Model (From Scratch)](https://github.com/rasbt/LLMs-from-scratch)\n  - [Hugginface LLM Training Book, a collection of methodologies to help with successful training of large language models](https://github.com/huggingface/llm_training_handbook)\n- General\n  - [Starcoder 2, family of code generation models](https://github.com/bigcode-project/starcoder2)\n  - [GPT Fast, fast and hackable pytorch native transformer inference](https://github.com/pytorch-labs/gpt-fast)\n  - [Mixtral Offloading, run Mixtral-8x7B models in Colab or consumer desktops](https://github.com/dvmazur/mixtral-offloading)\n  - [Llama](https://github.com/facebookresearch/llama)\n  - [Llama Recipes](https://github.com/facebookresearch/llama-recipes)\n  - [TinyLlama](https://github.com/jzhang38/TinyLlama)\n  - [Mosaic Pretrained Transformers (MPT)](https://github.com/mosaicml/llm-foundry)\n  - [VLLM, high-throughput and memory-efficient inference and serving engine for LLMs](https://github.com/vllm-project/vllm)\n  - [Dolly](https://github.com/databrickslabs/dolly)\n  - [Vicuna](https://github.com/lm-sys/FastChat)\n  - [Mistral 7B](https://github.com/mistralai/mistral-src)\n  - [BigDL LLM, library for running LLM (large language model) on Intel XPU (from Laptop to GPU to Cloud) using INT4 with very low latency1 (for any PyTorch model)](https://github.com/intel-analytics/BigDL)\n  - [Simple LLM Finetuner](https://github.com/lxe/simple-llm-finetuner)\n  - [Petals, run LLMs at home, BitTorrent-style, fine-tuning and inference up to 10x faster than offloading](https://github.com/bigscience-workshop/petals)\n- Japanese\n  - [Japanese Llama](https://github.com/masa3141/japanese-alpaca-lora)\n  - [Japanese GPT Neox and Open Calm](https://github.com/hppRC/llm-lora-classification)\n- Chinese\n  - [Chinese Llamma-2 7B](https://github.com/LinkSoul-AI/Chinese-Llama-2-7b)\n  - [Chinese Vicuna](https://github.com/Facico/Chinese-Vicuna)\n- Retrieval Augmented Generation (RAG)\n  - [LlamaIndex, data framework for your LLM application](https://github.com/run-llama/llama_index)\n- Embeddings\n  - [ChromaDB, open-source embedding database](https://github.com/chroma-core/chroma)\n- Applications\n  - [Langchain, building applications with LLMs through composability](https://github.com/langchain-ai/langchain)\n- Finetuning\n  - [Huggingface PEFT, State-of-the-art Parameter-Efficient Fine-Tuning](https://github.com/huggingface/peft)\n- Training\n  - [Higgsfield, Fault-tolerant, highly scalable GPU orchestration, and a machine learning framework designed for training models with billions to trillions of parameters](https://github.com/higgsfield-ai/higgsfield)\n- Quantization\n  - [AutoGPTQ, easy-to-use LLMs quantization package with user-friendly apis, based on GPTQ algorithm](https://github.com/PanQiWei/AutoGPTQ)\n\n## <a name='TabularData'></a>Tabular Data\n- [PyTorch Frame: A Modular Framework for Multi-Modal Tabular Learning](https://github.com/pyg-team/pytorch-frame)\n- [Pytorch Tabular,standard framework for modelling Deep Learning Models for tabular data](https://github.com/manujosephv/pytorch_tabular)\n- [Tab Transformer](https://github.com/lucidrains/tab-transformer-pytorch)\n- [PyTorch-TabNet: Attentive Interpretable Tabular Learning](https://github.com/dreamquark-ai/tabnet)\n- [carefree-learn: A minimal Automatic Machine Learning (AutoML) solution for tabular datasets based on PyTorch](https://github.com/carefree0910/carefree-learn)\n\n## <a name='Visualization'></a>Visualization\n- [Loss Visualization](https://github.com/tomgoldstein/loss-landscape)\n- [Grad-CAM: Visual Explanations from Deep Networks via Gradient-based Localization](https://github.com/jacobgil/pytorch-grad-cam)\n- [Deep Inside Convolutional Networks: Visualising Image Classification Models and Saliency Maps](https://github.com/utkuozbulak/pytorch-cnn-visualizations)\n- [SmoothGrad: removing noise by adding noise](https://github.com/utkuozbulak/pytorch-cnn-visualizations)\n- [DeepDream: dream-like hallucinogenic visuals](https://github.com/ProGamerGov/neural-dream)\n- [FlashTorch: Visualization toolkit for neural networks in PyTorch](https://github.com/MisaOgura/flashtorch)\n- [Lucent: Lucid adapted for PyTorch](https://github.com/greentfrapp/lucent)\n- [DreamCreator: Training GoogleNet models for DeepDream with custom datasets made simple](https://github.com/ProGamerGov/dream-creator)\n- [CNN Feature Map Visualisation](https://github.com/lewis-morris/mapextrackt)\n\n## <a name='Explainability'></a>Explainability\n- [Neural-Backed Decision Trees](https://github.com/alvinwan/neural-backed-decision-trees)\n- [Efficient Covariance Estimation from Temporal Data](https://github.com/hrayrhar/T-CorEx)\n- [Hierarchical interpretations for neural network predictions](https://github.com/csinva/hierarchical-dnn-interpretations)\n- [Shap, a unified approach to explain the output of any machine learning model](https://github.com/slundberg/shap)\n- [VIsualizing PyTorch saved .pth deep learning models with netron](https://github.com/lutzroeder/netron)\n- [Distilling a Neural Network Into a Soft Decision Tree](https://github.com/kimhc6028/soft-decision-tree)\n- [Captum, A unified model interpretability library for PyTorch](https://github.com/pytorch/captum)\n\n## <a name='ObjectDetection'></a>Object Detection\n- [MMDetection Object Detection Toolbox](https://github.com/open-mmlab/mmdetection)\n- [Mask R-CNN Benchmark: Faster R-CNN and Mask R-CNN in PyTorch 1.0](https://github.com/facebookresearch/maskrcnn-benchmark)\n- [YOLO-World](https://github.com/AILab-CVC/YOLO-World)\n- [YOLOS](https://github.com/hustvl/YOLOS)\n- [YOLOF](https://github.com/megvii-model/YOLOF)\n- [YOLOX](https://github.com/Megvii-BaseDetection/YOLOX)\n- [YOLOv10](https://github.com/THU-MIG/yolov10)\n- [YOLOv9](https://github.com/WongKinYiu/yolov9)\n- [YOLOv8](https://github.com/ultralytics/ultralytics)\n- [Yolov7](https://github.com/WongKinYiu/yolov7)\n- [YOLOv6](https://github.com/meituan/YOLOv6)\n- [Yolov5](https://github.com/ultralytics/yolov5)\n- [Yolov4](https://github.com/AlexeyAB/darknet)\n- [YOLOv3](https://github.com/ultralytics/yolov3)\n- [YOLOv2: Real-Time Object Detection](https://github.com/longcw/yolo2-pytorch)\n- [SSD: Single Shot MultiBox Detector](https://github.com/amdegroot/ssd.pytorch)\n- [Detectron models for Object Detection](https://github.com/ignacio-rocco/detectorch)\n- [Multi-digit Number Recognition from Street View Imagery using Deep Convolutional Neural Networks](https://github.com/potterhsu/SVHNClassifier-PyTorch)\n- [Whale Detector](https://github.com/TarinZ/whale-detector)\n- [Catalyst.Detection](https://github.com/catalyst-team/detection)\n\n## <a name='Long-TailedOut-of-DistributionRecognition'></a>Long-Tailed / Out-of-Distribution Recognition\n- [Distributionally Robust Neural Networks for Group Shifts: On the Importance of Regularization for Worst-Case Generalization](https://github.com/kohpangwei/group_DRO)\n- [Invariant Risk Minimization](https://github.com/facebookresearch/InvariantRiskMinimization)\n- [Training Confidence-Calibrated Classifier for Detecting Out-of-Distribution Samples](https://github.com/alinlab/Confident_classifier)\n- [Deep Anomaly Detection with Outlier Exposure](https://github.com/hendrycks/outlier-exposure)\n- [Large-Scale Long-Tailed Recognition in an Open World](https://github.com/zhmiao/OpenLongTailRecognition-OLTR)\n- [Principled Detection of Out-of-Distribution Examples in Neural Networks](https://github.com/ShiyuLiang/odin-pytorch)\n- [Learning Confidence for Out-of-Distribution Detection in Neural Networks](https://github.com/uoguelph-mlrg/confidence_estimation)\n- [PyTorch Imbalanced Class Sampler](https://github.com/ufoym/imbalanced-dataset-sampler)\n\n## <a name='ActivationFunctions'></a>Activation Functions\n- [Rational Activations - Learnable Rational Activation Functions](https://github.com/ml-research/rational_activations)\n\n## <a name='Energy-BasedLearning'></a>Energy-Based Learning\n- [EBGAN, Energy-Based GANs](https://github.com/eriklindernoren/PyTorch-GAN/blob/master/implementations/ebgan/ebgan.py)\n- [Maximum Entropy Generators for Energy-based Models](https://github.com/ritheshkumar95/energy_based_generative_models)\n\n## <a name='MissingData'></a>Missing Data\n - [BRITS: Bidirectional Recurrent Imputation for Time Series](http://papers.nips.cc/paper/7911-brits-bidirectional-recurrent-imputation-for-time-series)\n\n## <a name='ArchitectureSearch'></a>Architecture Search\n- [EfficientNetV2](https://github.com/lukemelas/EfficientNet-PyTorch)\n- [DenseNAS](https://github.com/JaminFong/DenseNAS)\n- [DARTS: Differentiable Architecture Search](https://github.com/quark0/darts)\n- [Efficient Neural Architecture Search (ENAS)](https://github.com/carpedm20/ENAS-pytorch)\n- [EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks](https://github.com/zsef123/EfficientNets-PyTorch)\n\n## <a name='ContinualLearning'></a>Continual Learning\n- [Renate, Automatic Retraining of Neural Networks](https://github.com/awslabs/renate)\n\n## <a name='Optimization'></a>Optimization\n- [AccSGD, AdaBound, AdaMod, DiffGrad, Lamb, NovoGrad, RAdam, SGDW, Yogi and more](https://github.com/jettify/pytorch-optimizer)\n- [Lookahead Optimizer: k steps forward, 1 step back](https://github.com/alphadl/lookahead.pytorch)\n- [RAdam, On the Variance of the Adaptive Learning Rate and Beyond](https://github.com/LiyuanLucasLiu/RAdam)\n- [Over9000, Comparison of RAdam, Lookahead, Novograd, and combinations](https://github.com/mgrankin/over9000)\n- [AdaBound, Train As Fast as Adam As Good as SGD](https://github.com/Luolc/AdaBound)\n- [Riemannian Adaptive Optimization Methods](https://github.com/ferrine/geoopt)\n- [L-BFGS](https://github.com/hjmshi/PyTorch-LBFGS)\n- [OptNet: Differentiable Optimization as a Layer in Neural Networks](https://github.com/locuslab/optnet)\n- [Learning to learn by gradient descent by gradient descent](https://github.com/ikostrikov/pytorch-meta-optimizer)\n- [Surrogate Gradient Learning in Spiking Neural Networks](https://github.com/fzenke/spytorch)\n- [TorchOpt: An Efficient Library for Differentiable Optimization](https://github.com/metaopt/torchopt)\n\n## <a name='Quantization'></a>Quantization\n- [Additive Power-of-Two Quantization: An Efficient Non-uniform Discretization For Neural Networks](https://github.com/yhhhli/APoT_Quantization)\n\n## <a name='QuantumMachineLearning'></a>Quantum Machine Learning\n- [Tor10, generic tensor-network library for quantum simulation in PyTorch](https://github.com/kaihsin/Tor10)\n- [PennyLane, cross-platform Python library for quantum machine learning with PyTorch interface](https://github.com/XanaduAI/pennylane)\n\n## <a name='NeuralNetworkCompression'></a>Neural Network Compression\n- [Bayesian Compression for Deep Learning](https://github.com/KarenUllrich/Tutorial_BayesianCompressionForDL)\n- [Neural Network Distiller by Intel AI Lab: a Python package for neural network compression research](https://github.com/NervanaSystems/distiller)\n- [Learning Sparse Neural Networks through L0 regularization](https://github.com/AMLab-Amsterdam/L0_regularization)\n- [Energy-constrained Compression for Deep Neural Networks via Weighted Sparse Projection and Layer Input Masking](https://github.com/hyang1990/model_based_energy_constrained_compression)\n- [EigenDamage: Structured Pruning in the Kronecker-Factored Eigenbasis](https://github.com/alecwangcq/EigenDamage-Pytorch)\n- [Pruning Convolutional Neural Networks for Resource Efficient Inference](https://github.com/jacobgil/pytorch-pruning)\n- [Pruning neural networks: is it time to nip it in the bud? (showing reduced networks work better)](https://github.com/BayesWatch/pytorch-prunes)\n\n## <a name='FacialActionandPoseRecognition'></a>Facial, Action and Pose Recognition\n- [Facenet: Pretrained Pytorch face detection and recognition models](https://github.com/timesler/facenet-pytorch)\n- [DGC-Net: Dense Geometric Correspondence Network](https://github.com/AaltoVision/DGC-Net)\n- [High performance facial recognition library on PyTorch](https://github.com/ZhaoJ9014/face.evoLVe.PyTorch)\n- [FaceBoxes, a CPU real-time face detector with high accuracy](https://github.com/zisianw/FaceBoxes.PyTorch)\n- [How far are we from solving the 2D & 3D Face Alignment problem? (and a dataset of 230,000 3D facial landmarks)](https://github.com/1adrianb/face-alignment)\n- [Learning Spatio-Temporal Features with 3D Residual Networks for Action Recognition](https://github.com/kenshohara/3D-ResNets-PyTorch)\n- [PyTorch Realtime Multi-Person Pose Estimation](https://github.com/DavexPro/pytorch-pose-estimation)\n- [SphereFace: Deep Hypersphere Embedding for Face Recognition](https://github.com/clcarwin/sphereface_pytorch)\n- [GANimation: Anatomically-aware Facial Animation from a Single Image](https://github.com/albertpumarola/GANimation)\n- [Shufflenet V2 by Face++ with better results than paper](https://github.com/ericsun99/Shufflenet-v2-Pytorch)\n- [Towards 3D Human Pose Estimation in the Wild: a Weakly-supervised Approach](https://github.com/xingyizhou/pytorch-pose-hg-3d)\n- [Unsupervised Learning of Depth and Ego-Motion from Video](https://github.com/ClementPinard/SfmLearner-Pytorch)\n- [FlowNet 2.0: Evolution of Optical Flow Estimation with Deep Networks](https://github.com/NVIDIA/flownet2-pytorch)\n- [FlowNet: Learning Optical Flow with Convolutional Networks](https://github.com/ClementPinard/FlowNetPytorch)\n- [Optical Flow Estimation using a Spatial Pyramid Network](https://github.com/sniklaus/pytorch-spynet)\n- [OpenFace in PyTorch](https://github.com/thnkim/OpenFacePytorch)\n- [Deep Face Recognition in PyTorch](https://github.com/grib0ed0v/face_recognition.pytorch)\n\n## <a name='Superresolution'></a>Super resolution\n- [Enhanced Deep Residual Networks for Single Image Super-Resolution](https://github.com/thstkdgus35/EDSR-PyTorch)\n- [Superresolution using an efficient sub-pixel convolutional neural network](https://github.com/pytorch/examples/tree/master/super_resolution)\n- [Perceptual Losses for Real-Time Style Transfer and Super-Resolution](https://github.com/bengxy/FastNeuralStyle)\n\n## <a name='SynthetesizingViews'></a>Synthetesizing Views\n- [NeRF, Neural Radian Fields, Synthesizing Novels Views of Complex Scenes](https://github.com/yenchenlin/nerf-pytorch)\n\n## <a name='Voice'></a>Voice\n- [Google AI VoiceFilter: Targeted Voice Separatation by Speaker-Conditioned Spectrogram Masking](https://github.com/mindslab-ai/voicefilter)\n\n## <a name='Medical'></a>Medical\n- [Medical Zoo, 3D multi-modal medical image segmentation library in PyTorch]( https://github.com/black0017/MedicalZooPytorch)\n- [U-Net for FLAIR Abnormality Segmentation in Brain MRI](https://github.com/mateuszbuda/brain-segmentation-pytorch)\n- [Genomic Classification via ULMFiT](https://github.com/kheyer/Genomic-ULMFiT)\n- [Deep Neural Networks Improve Radiologists' Performance in Breast Cancer Screening](https://github.com/nyukat/breast_cancer_classifier)\n- [Delira, lightweight framework for medical imaging prototyping](https://github.com/justusschock/delira)\n- [V-Net: Fully Convolutional Neural Networks for Volumetric Medical Image Segmentation](https://github.com/mattmacy/vnet.pytorch)\n- [Medical Torch, medical imaging framework for PyTorch](https://github.com/perone/medicaltorch)\n- [TorchXRayVision - A library for chest X-ray datasets and models. Including pre-trainined models.](https://github.com/mlmed/torchxrayvision)\n\n## <a name='DSegmentationClassificationandRegression'></a>3D Segmentation, Classification and Regression\n- [Kaolin, Library for Accelerating 3D Deep Learning Research](https://github.com/NVIDIAGameWorks/kaolin)\n- [PointNet: Deep Learning on Point Sets for 3D Classification and Segmentation](https://github.com/fxia22/pointnet.pytorch)\n- [3D segmentation with MONAI and Catalyst](https://colab.research.google.com/drive/15wJus5WZPYxTYE51yBhIBNhk9Tj4k3BT?usp=sharing)\n\n## <a name='VideoRecognition'></a>Video Recognition\n- [Dancing to Music](https://github.com/NVlabs/Dancing2Music)\n- [Devil Is in the Edges: Learning Semantic Boundaries from Noisy Annotations](https://github.com/nv-tlabs/STEAL)\n- [Deep Video Analytics](https://github.com/AKSHAYUBHAT/DeepVideoAnalytics)\n- [PredRNN: Recurrent Neural Networks for Predictive Learning using Spatiotemporal LSTMs](https://github.com/thuml/predrnn-pytorch)\n\n## <a name='RecurrentNeuralNetworksRNNs'></a>Recurrent Neural Networks (RNNs)\n- [SRU: training RNNs as fast as CNNs](https://github.com/asappresearch/sru)\n- [Ordered Neurons: Integrating Tree Structures into Recurrent Neural Networks](https://github.com/yikangshen/Ordered-Neurons)\n- [Averaged Stochastic Gradient Descent with Weight Dropped LSTM](https://github.com/salesforce/awd-lstm-lm)\n- [Training RNNs as Fast as CNNs](https://github.com/taolei87/sru)\n- [Quasi-Recurrent Neural Network (QRNN)](https://github.com/salesforce/pytorch-qrnn)\n- [ReSeg: A Recurrent Neural Network-based Model for Semantic Segmentation](https://github.com/Wizaron/reseg-pytorch)\n- [A Recurrent Latent Variable Model for Sequential Data (VRNN)](https://github.com/emited/VariationalRecurrentNeuralNetwork)\n- [Improved Semantic Representations From Tree-Structured Long Short-Term Memory Networks](https://github.com/dasguptar/treelstm.pytorch)\n- [Attention-Based Recurrent Neural Network Models for Joint Intent Detection and Slot Filling](https://github.com/DSKSD/RNN-for-Joint-NLU)\n- [Attentive Recurrent Comparators](https://github.com/sanyam5/arc-pytorch)\n- [Collection of Sequence to Sequence Models with PyTorch](https://github.com/MaximumEntropy/Seq2Seq-PyTorch)\n\t1. Vanilla Sequence to Sequence models\n\t2. Attention based Sequence to Sequence models\n\t3. Faster attention mechanisms using dot products between the final encoder and decoder hidden states\n\n## <a name='ConvolutionalNeuralNetworksCNNs'></a>Convolutional Neural Networks (CNNs)\n- [LegoNet: Efficient Convolutional Neural Networks with Lego Filters](https://github.com/huawei-noah/LegoNet)\n- [MeshCNN, a convolutional neural network designed specifically for triangular meshes](https://github.com/ranahanocka/MeshCNN)\n- [Octave Convolution](https://github.com/d-li14/octconv.pytorch)\n- [PyTorch Image Models, ResNet/ResNeXT, DPN, MobileNet-V3/V2/V1, MNASNet, Single-Path NAS, FBNet](https://github.com/rwightman/pytorch-image-models)\n- [Deep Neural Networks with Box Convolutions](https://github.com/shrubb/box-convolutions)\n- [Invertible Residual Networks](https://github.com/jarrelscy/iResnet)\n- [Stochastic Downsampling for Cost-Adjustable Inference and Improved Regularization in Convolutional Networks ](https://github.com/xternalz/SDPoint)\n- [Faster Faster R-CNN Implementation](https://github.com/jwyang/faster-rcnn.pytorch)\n\t- [Faster R-CNN Another Implementation](https://github.com/longcw/faster_rcnn_pytorch)\n- [Paying More Attention to Attention: Improving the Performance of Convolutional Neural Networks via Attention Transfer](https://github.com/szagoruyko/attention-transfer)\n- [Wide ResNet model in PyTorch](https://github.com/szagoruyko/functional-zoo)\n\t-[DiracNets: Training Very Deep Neural Networks Without Skip-Connections](https://github.com/szagoruyko/diracnets)\n- [An End-to-End Trainable Neural Network for Image-based Sequence Recognition and Its Application to Scene Text Recognition](https://github.com/bgshih/crnn)\n- [Efficient Densenet](https://github.com/gpleiss/efficient_densenet_pytorch)\n- [Video Frame Interpolation via Adaptive Separable Convolution](https://github.com/sniklaus/pytorch-sepconv)\n- [Learning local feature descriptors with triplets and shallow convolutional neural networks](https://github.com/edgarriba/examples/tree/master/triplet)\n- [Densely Connected Convolutional Networks](https://github.com/bamos/densenet.pytorch)\n- [Very Deep Convolutional Networks for Large-Scale Image Recognition](https://github.com/jcjohnson/pytorch-vgg)\n- [SqueezeNet: AlexNet-level accuracy with 50x fewer parameters and \\<0.5MB model size](https://github.com/gsp-27/pytorch_Squeezenet)\n- [Deep Residual Learning for Image Recognition](https://github.com/szagoruyko/functional-zoo)\n- [Training Wide ResNets for CIFAR-10 and CIFAR-100 in PyTorch](https://github.com/xternalz/WideResNet-pytorch)\n- [Deformable Convolutional Network](https://github.com/oeway/pytorch-deform-conv)\n- [Convolutional Neural Fabrics](https://github.com/vabh/convolutional-neural-fabrics)\n- [Deformable Convolutional Networks in PyTorch](https://github.com/1zb/deformable-convolution-pytorch)\n- [Dilated ResNet combination with Dilated Convolutions](https://github.com/fyu/drn)\n- [Striving for Simplicity: The All Convolutional Net](https://github.com/utkuozbulak/pytorch-cnn-visualizations)\n- [Convolutional LSTM Network](https://github.com/automan000/Convolution_LSTM_pytorch)\n- [Big collection of pretrained classification models](https://github.com/osmr/imgclsmob)\n- [PyTorch Image Classification with Kaggle Dogs vs Cats Dataset](https://github.com/rdcolema/pytorch-image-classification)\n- [CIFAR-10 on Pytorch with VGG, ResNet and DenseNet](https://github.com/kuangliu/pytorch-cifar)\n- [Base pretrained models and datasets in pytorch (MNIST, SVHN, CIFAR10, CIFAR100, STL10, AlexNet, VGG16, VGG19, ResNet, Inception, SqueezeNet)](https://github.com/aaron-xichen/pytorch-playground)\n- [NVIDIA/unsupervised-video-interpolation](https://github.com/NVIDIA/unsupervised-video-interpolation)\n\n## <a name='Segmentation'></a>Segmentation\n- [Detectron2 by FAIR](https://github.com/facebookresearch/detectron2)\n- [Pixel-wise Segmentation on VOC2012 Dataset using PyTorch](https://github.com/bodokaiser/piwise)\n- [Pywick - High-level batteries-included neural network training library for Pytorch](https://github.com/achaiah/pywick)\n- [Improving Semantic Segmentation via Video Propagation and Label Relaxation](https://github.com/NVIDIA/semantic-segmentation)\n- [Super-BPD: Super Boundary-to-Pixel Direction for Fast Image Segmentation](https://github.com/JianqiangWan/Super-BPD)\n- [Catalyst.Segmentation](https://github.com/catalyst-team/segmentation)\n- [Segmentation models with pretrained backbones](https://github.com/qubvel/segmentation_models.pytorch)\n\n## <a name='GeometricDeepLearning:GraphIrregularStructures'></a>Geometric Deep Learning: Graph & Irregular Structures\n- [PyTorch Geometric, Deep Learning Extension](https://github.com/rusty1s/pytorch_geometric)\n- [PyTorch Geometric Temporal: A Temporal Extension Library for PyTorch Geometric](https://github.com/benedekrozemberczki/pytorch_geometric_temporal)\n- [PyTorch Geometric Signed Directed: A Signed & Directed Extension Library for PyTorch Geometric](https://github.com/SherylHYX/pytorch_geometric_signed_directed)\n- [ChemicalX: A PyTorch Based Deep Learning Library for Drug Pair Scoring](https://github.com/AstraZeneca/chemicalx)\n- [Self-Attention Graph Pooling](https://github.com/inyeoplee77/SAGPool)\n- [Position-aware Graph Neural Networks](https://github.com/JiaxuanYou/P-GNN)\n- [Signed Graph Convolutional Neural Network](https://github.com/benedekrozemberczki/SGCN)\n- [Graph U-Nets](https://github.com/HongyangGao/gunet)\n- [Cluster-GCN: An Efficient Algorithm for Training Deep and Large Graph Convolutional Networks](https://github.com/benedekrozemberczki/ClusterGCN)\n- [MixHop: Higher-Order Graph Convolutional Architectures via Sparsified Neighborhood Mixing](https://github.com/benedekrozemberczki/MixHop-and-N-GCN)\n- [Semi-Supervised Graph Classification: A Hierarchical Graph Perspective](https://github.com/benedekrozemberczki/SEAL-CI)\n- [PyTorch BigGraph by FAIR for Generating Embeddings From Large-scale Graph Data](https://github.com/facebookresearch/PyTorch-BigGraph)\n- [Capsule Graph Neural Network](https://github.com/benedekrozemberczki/CapsGNN)\n- [Splitter: Learning Node Representations that Capture Multiple Social Contexts](https://github.com/benedekrozemberczki/Splitter)\n- [A Higher-Order Graph Convolutional Layer](https://github.com/benedekrozemberczki/MixHop-and-N-GCN)\n- [Predict then Propagate: Graph Neural Networks meet Personalized PageRank](https://github.com/benedekrozemberczki/APPNP)\n- [Lorentz Embeddings: Learn Continuous Hierarchies in Hyperbolic Space](https://github.com/theSage21/lorentz-embeddings)\n- [Graph Wavelet Neural Network](https://github.com/benedekrozemberczki/GraphWaveletNeuralNetwork)\n- [Watch Your Step: Learning Node Embeddings via Graph Attention](https://github.com/benedekrozemberczki/AttentionWalk)\n- [Signed Graph Convolutional Network](https://github.com/benedekrozemberczki/SGCN)\n- [Graph Classification Using Structural Attention](https://github.com/benedekrozemberczki/GAM)\n- [SimGNN: A Neural Network Approach to Fast Graph Similarity Computation](https://github.com/benedekrozemberczki/SimGNN)\n- [SINE: Scalable Incomplete Network Embedding](https://github.com/benedekrozemberczki/SINE)\n- [HypER: Hypernetwork Knowledge Graph Embeddings](https://github.com/ibalazevic/HypER)\n- [TuckER: Tensor Factorization for Knowledge Graph Completion](https://github.com/ibalazevic/TuckER)\n- [PyKEEN: A Python library for learning and evaluating knowledge graph embeddings](https://github.com/pykeen/pykeen/)\n- [Pathfinder Discovery Networks for Neural Message Passing](https://github.com/benedekrozemberczki/PDN)\n- [SSSNET: Semi-Supervised Signed Network Clustering](https://github.com/SherylHYX/SSSNET_Signed_Clustering)\n- [MagNet: A Neural Network for Directed Graphs](https://github.com/matthew-hirn/magnet)\n- [PyTorch Geopooling: Geospatial Pooling Modules for Neural Networks in PyTorch](https://github.com/ybubnov/torch_geopooling)\n\n## <a name='Sorting'></a>Sorting\n- [Stochastic Optimization of Sorting Networks via Continuous Relaxations](https://github.com/ermongroup/neuralsort)\n\n## <a name='OrdinaryDifferentialEquationsNetworks'></a>Ordinary Differential Equations Networks\n- [Latent ODEs for Irregularly-Sampled Time Series](https://github.com/YuliaRubanova/latent_ode)\n- [GRU-ODE-Bayes: continuous modelling of sporadically-observed time series](https://github.com/edebrouwer/gru_ode_bayes)\n\n## <a name='Multi-taskLearning'></a>Multi-task Learning\n- [Hierarchical Multi-Task Learning Model](https://github.com/huggingface/hmtl)\n- [Task-based End-to-end Model Learning](https://github.com/locuslab/e2e-model-learning)\n- [torchMTL: A lightweight module for Multi-Task Learning in pytorch](https://github.com/chrisby/torchMTL)\n\n## <a name='GANsVAEsandAEs'></a>GANs, VAEs, and AEs\n- [BigGAN: Large Scale GAN Training for High Fidelity Natural Image Synthesis](https://github.com/ajbrock/BigGAN-PyTorch)\n- [High Fidelity Performance Metrics for Generative Models in PyTorch](https://github.com/toshas/torch-fidelity)\n- [Mimicry, PyTorch Library for Reproducibility of GAN Research](https://github.com/kwotsin/mimicry)\n- [Clean Readable CycleGAN](https://github.com/aitorzip/PyTorch-CycleGAN)\n- [StarGAN](https://github.com/yunjey/stargan)\n- [Block Neural Autoregressive Flow](https://github.com/nicola-decao/BNAF)\n- [High-Resolution Image Synthesis and Semantic Manipulation with Conditional GANs](https://github.com/NVIDIA/pix2pixHD)\n- [A Style-Based Generator Architecture for Generative Adversarial Networks](https://github.com/rosinality/style-based-gan-pytorch)\n- [GANDissect, PyTorch Tool for Visualizing Neurons in GANs](https://github.com/CSAILVision/gandissect)\n- [Learning deep representations by mutual information estimation and maximization](https://github.com/DuaneNielsen/DeepInfomaxPytorch)\n- [Variational Laplace Autoencoders](https://github.com/yookoon/VLAE)\n- [VeGANS, library for easily training GANs](https://github.com/unit8co/vegans)\n- [Progressive Growing of GANs for Improved Quality, Stability, and Variation](https://github.com/github-pengge/PyTorch-progressive_growing_of_gans)\n- [Conditional GAN](https://github.com/kmualim/CGAN-Pytorch/)\n- [Wasserstein GAN](https://github.com/martinarjovsky/WassersteinGAN)\n- [Adversarial Generator-Encoder Network](https://github.com/DmitryUlyanov/AGE)\n- [Image-to-Image Translation with Conditional Adversarial Networks](https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix)\n- [Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks](https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix)\n- [On the Effects of Batch and Weight Normalization in Generative Adversarial Networks](https://github.com/stormraiser/GAN-weight-norm)\n- [Improved Training of Wasserstein GANs](https://github.com/jalola/improved-wgan-pytorch)\n- [Collection of Generative Models with PyTorch](https://github.com/wiseodd/generative-models)\n\t- Generative Adversarial Nets (GAN)\n\t\t1. [Vanilla GAN](https://arxiv.org/abs/1406.2661)\n\t\t2. [Conditional GAN](https://arxiv.org/abs/1411.1784)\n\t\t3. [InfoGAN](https://arxiv.org/abs/1606.03657)\n\t\t4. [Wasserstein GAN](https://arxiv.org/abs/1701.07875)\n\t\t5. [Mode Regularized GAN](https://arxiv.org/abs/1612.02136)\n\t- Variational Autoencoder (VAE)\n\t\t1. [Vanilla VAE](https://arxiv.org/abs/1312.6114)\n\t\t2. [Conditional VAE](https://arxiv.org/abs/1406.5298)\n\t\t3. [Denoising VAE](https://arxiv.org/abs/1511.06406)\n\t\t4. [Adversarial Autoencoder](https://arxiv.org/abs/1511.05644)\n\t\t5. [Adversarial Variational Bayes](https://arxiv.org/abs/1701.04722)\n- [Improved Training of Wasserstein GANs](https://github.com/caogang/wgan-gp)\n- [CycleGAN and Semi-Supervised GAN](https://github.com/yunjey/mnist-svhn-transfer)\n- [Improving Variational Auto-Encoders using Householder Flow and using convex combination linear Inverse Autoregressive Flow](https://github.com/jmtomczak/vae_vpflows)\n- [PyTorch GAN Collection](https://github.com/znxlwm/pytorch-generative-model-collections)\n- [Generative Adversarial Networks, focusing on anime face drawing](https://github.com/jayleicn/animeGAN)\n- [Simple Generative Adversarial Networks](https://github.com/mailmahee/pytorch-generative-adversarial-networks)\n- [Adversarial Auto-encoders](https://github.com/fducau/AAE_pytorch)\n- [torchgan: Framework for modelling Generative Adversarial Networks in Pytorch](https://github.com/torchgan/torchgan)\n- [Evaluating Lossy Compression Rates of Deep Generative Models](https://github.com/huangsicong/rate_distortion)\n- [Catalyst.GAN](https://github.com/catalyst-team/gan)\n    1. [Vanilla GAN](https://arxiv.org/abs/1406.2661)\n    2. [Conditional GAN](https://arxiv.org/abs/1411.1784)\n    3. [Wasserstein GAN](https://arxiv.org/abs/1701.07875)\n    4. [Improved Training of Wasserstein GANs](https://arxiv.org/abs/1704.00028)\n\n## <a name='UnsupervisedLearning'></a>Unsupervised Learning\n- [Unsupervised Embedding Learning via Invariant and Spreading Instance Feature](https://github.com/mangye16/Unsupervised_Embedding_Learning)\n- [AND: Anchor Neighbourhood Discovery](https://github.com/Raymond-sci/AND)\n\n## <a name='AdversarialAttacks'></a>Adversarial Attacks\n- [Deep Neural Networks are Easily Fooled: High Confidence Predictions for Unrecognizable Images](https://github.com/utkuozbulak/pytorch-cnn-adversarial-attacks)\n- [Explaining and Harnessing Adversarial Examples](https://github.com/utkuozbulak/pytorch-cnn-adversarial-attacks)\n- [AdverTorch - A Toolbox for Adversarial Robustness Research](https://github.com/BorealisAI/advertorch)\n\n## <a name='StyleTransfer'></a>Style Transfer\n- [Pystiche: Framework for Neural Style Transfer](https://github.com/pystiche/pystiche)\n- [Detecting Adversarial Examples via Neural Fingerprinting](https://github.com/StephanZheng/neural-fingerprinting)\n- [A Neural Algorithm of Artistic Style](https://github.com/alexis-jacq/Pytorch-Tutorials)\n- [Multi-style Generative Network for Real-time Transfer](https://github.com/zhanghang1989/PyTorch-Style-Transfer)\n- [DeOldify, Coloring Old Images](https://github.com/jantic/DeOldify)\n- [Neural Style Transfer](https://github.com/ProGamerGov/neural-style-pt)\n- [Fast Neural Style Transfer](https://github.com/darkstar112358/fast-neural-style)\n- [Draw like Bob Ross](https://github.com/kendricktan/drawlikebobross)\n\n## <a name='ImageCaptioning'></a>Image Captioning\n- [CLIP (Contrastive Language-Image Pre-Training)](https://github.com/openai/CLIP)\n- [Neuraltalk 2, Image Captioning Model, in PyTorch](https://github.com/ruotianluo/neuraltalk2.pytorch)\n- [Generate captions from an image with PyTorch](https://github.com/eladhoffer/captionGen)\n- [DenseCap: Fully Convolutional Localization Networks for Dense Captioning](https://github.com/jcjohnson/densecap)\n\n## <a name='Transformers'></a>Transformers\n- [Attention is all you need](https://github.com/jadore801120/attention-is-all-you-need-pytorch)\n- [Spatial Transformer Networks](https://github.com/fxia22/stn.pytorch)\n\n## <a name='SimilarityNetworksandFunctions'></a>Similarity Networks and Functions\n- [Conditional Similarity Networks](https://github.com/andreasveit/conditional-similarity-networks)\n\n## <a name='Reasoning'></a>Reasoning\n- [Inferring and Executing Programs for Visual Reasoning](https://github.com/facebookresearch/clevr-iep)\n\n## <a name='GeneralNLP'></a>General NLP\n- [nanoGPT, fastest repository for training/finetuning medium-sized GPTs](https://github.com/karpathy/nanoGPT)\n- [minGPT, Re-implementation of GPT to be small, clean, interpretable and educational](https://github.com/karpathy/minGPT)\n- [Espresso, Module Neural Automatic Speech Recognition Toolkit](https://github.com/freewym/espresso)\n- [Label-aware Document Representation via Hybrid Attention for Extreme Multi-Label Text Classification](https://github.com/HX-idiot/Hybrid_Attention_XML)\n- [XLNet](https://github.com/graykode/xlnet-Pytorch)\n- [Conversing by Reading: Contentful Neural Conversation with On-demand Machine Reading](https://github.com/qkaren/converse_reading_cmr)\n- [Cross-lingual Language Model Pretraining](https://github.com/facebookresearch/XLM)\n- [Libre Office Translate via PyTorch NMT](https://github.com/lernapparat/lotranslate)\n- [BERT](https://github.com/huggingface/pytorch-pretrained-BERT)\n- [VSE++: Improved Visual-Semantic Embeddings](https://github.com/fartashf/vsepp)\n- [A Structured Self-Attentive Sentence Embedding](https://github.com/ExplorerFreda/Structured-Self-Attentive-Sentence-Embedding)\n- [Neural Sequence labeling model](https://github.com/jiesutd/PyTorchSeqLabel)\n- [Skip-Thought Vectors](https://github.com/sanyam5/skip-thoughts)\n- [Complete Suite for Training Seq2Seq Models in PyTorch](https://github.com/eladhoffer/seq2seq.pytorch)\n- [MUSE: Multilingual Unsupervised and Supervised Embeddings](https://github.com/facebookresearch/MUSE)\n- [TorchMoji: PyTorch Implementation of DeepMoji to under Language used to Express Emotions](https://github.com/huggingface/torchMoji)\n\n## <a name='QuestionandAnswering'></a>Question and Answering\n- [Visual Question Answering in Pytorch](https://github.com/Cadene/vqa.pytorch)\n- [Reading Wikipedia to Answer Open-Domain Questions](https://github.com/facebookresearch/DrQA)\n- [Deal or No Deal? End-to-End Learning for Negotiation Dialogues](https://github.com/facebookresearch/end-to-end-negotiator)\n- [Interpretable Counting for Visual Question Answering](https://github.com/sanyam5/irlc-vqa)\n- [Open Source Chatbot with PyTorch](https://github.com/jinfagang/pytorch_chatbot)\n\n## <a name='SpeechGenerationandRecognition'></a>Speech Generation and Recognition\n- [PyTorch-Kaldi Speech Recognition Toolkit](https://github.com/mravanelli/pytorch-kaldi)\n- [WaveGlow: A Flow-based Generative Network for Speech Synthesis](https://github.com/NVIDIA/waveglow)\n- [OpenNMT](https://github.com/OpenNMT/OpenNMT-py)\n- [Deep Speech 2: End-to-End Speech Recognition in English and Mandarin](https://github.com/SeanNaren/deepspeech.pytorch)\n- [WeNet: Production First and Production Ready End-to-End Speech Recognition Toolkit](https://github.com/mobvoi/wenet)\n\n## <a name='DocumentandTextClassification'></a>Document and Text Classification\n- [Hierarchical Attention Network for Document Classification](https://github.com/cedias/HAN-pytorch)\n- [Hierarchical Attention Networks for Document Classification](https://github.com/EdGENetworks/attention-networks-for-classification)\n- [CNN Based Text Classification](https://github.com/xiayandi/Pytorch_text_classification)\n\n## <a name='TextGeneration'></a>Text Generation\n- [Pytorch Poetry Generation](https://github.com/jhave/pytorch-poetry-generation)\n\n## <a name='TexttoImage'></a>Text to Image\n- [Stable Diffusion](https://github.com/CompVis/stable-diffusion)\n- [Dall-E 2](https://github.com/lucidrains/DALLE2-pytorch)\n- [Dall-E](https://github.com/lucidrains/DALLE-pytorch)\n\n## <a name='Translation'></a>Translation\n- [Open-source (MIT) Neural Machine Translation (NMT) System](https://github.com/OpenNMT/OpenNMT-py)\n\n## <a name='SentimentAnalysis'></a>Sentiment Analysis\n- [Recurrent Neural Networks for Sentiment Analysis (Aspect-Based) on SemEval 2014](https://github.com/vanzytay/pytorch_sentiment_rnn)\n- [Seq2Seq Intent Parsing](https://github.com/spro/pytorch-seq2seq-intent-parsing)\n- [Finetuning BERT for Sentiment Analysis](https://github.com/barissayil/SentimentAnalysis)\n\n## <a name='DeepReinforcementLearning'></a>Deep Reinforcement Learning\n- [Image Augmentation Is All You Need: Regularizing Deep Reinforcement Learning from Pixels](https://github.com/denisyarats/drq)\n- [Exploration by Random Network Distillation](https://github.com/openai/random-network-distillation)\n- [EGG: Emergence of lanGuage in Games, quickly implement multi-agent games with discrete channel communication](https://github.com/facebookresearch/EGG)\n- [Temporal Difference VAE](https://openreview.net/pdf?id=S1x4ghC9tQ)\n- [High-performance Atari A3C Agent in 180 Lines PyTorch](https://github.com/greydanus/baby-a3c)\n- [Learning when to communicate at scale in multiagent cooperative and competitive tasks](https://github.com/IC3Net/IC3Net)\n- [Actor-Attention-Critic for Multi-Agent Reinforcement Learning](https://github.com/shariqiqbal2810/MAAC)\n- [PPO in PyTorch C++](https://github.com/mhubii/ppo_pytorch_cpp)\n- [Reinforcement Learning for Bandit Neural Machine Translation with Simulated Human Feedback](https://github.com/khanhptnk/bandit-nmt)\n- [Asynchronous Methods for Deep Reinforcement Learning](https://github.com/ikostrikov/pytorch-a3c)\n- [Continuous Deep Q-Learning with Model-based Acceleration](https://github.com/ikostrikov/pytorch-naf)\n- [Asynchronous Methods for Deep Reinforcement Learning for Atari 2600](https://github.com/dgriff777/rl_a3c_pytorch)\n- [Trust Region Policy Optimization](https://github.com/mjacar/pytorch-trpo)\n- [Neural Combinatorial Optimization with Reinforcement Learning](https://github.com/pemami4911/neural-combinatorial-rl-pytorch)\n- [Noisy Networks for Exploration](https://github.com/Kaixhin/NoisyNet-A3C)\n- [Distributed Proximal Policy Optimization](https://github.com/alexis-jacq/Pytorch-DPPO)\n- [Reinforcement learning models in ViZDoom environment with PyTorch](https://github.com/akolishchak/doom-net-pytorch)\n- [Reinforcement learning models using Gym and Pytorch](https://github.com/jingweiz/pytorch-rl)\n- [SLM-Lab: Modular Deep Reinforcement Learning framework in PyTorch](https://github.com/kengz/SLM-Lab)\n- [Catalyst.RL](https://github.com/catalyst-team/catalyst-rl)\n\n## <a name='DeepBayesianLearningandProbabilisticProgrammming'></a>Deep Bayesian Learning and Probabilistic Programmming\n- [BatchBALD: Efficient and Diverse Batch Acquisition for Deep Bayesian Active Learning](https://github.com/BlackHC/BatchBALD)\n- [Subspace Inference for Bayesian Deep Learning](https://github.com/wjmaddox/drbayes)\n- [Bayesian Deep Learning with Variational Inference Package](https://github.com/ctallec/pyvarinf)\n- [Probabilistic Programming and Statistical Inference in PyTorch](https://github.com/stepelu/ptstat)\n- [Bayesian CNN with Variational Inferece in PyTorch](https://github.com/kumar-shridhar/PyTorch-BayesianCNN)\n\n## <a name='SpikingNeuralNetworks'></a>Spiking Neural Networks\n- [Norse, Library for Deep Learning with Spiking Neural Networks](https://github.com/norse/norse)\n\n## <a name='AnomalyDetection'></a>Anomaly Detection\n- [Detection of Accounting Anomalies using Deep Autoencoder Neural Networks](https://github.com/GitiHubi/deepAI)\n\n## <a name='RegressionTypes'></a>Regression Types\n- [Quantile Regression DQN](https://github.com/ars-ashuha/quantile-regression-dqn-pytorch)\n\n## <a name='TimeSeries'></a>Time Series\n- [Dual Self-Attention Network for Multivariate Time Series Forecasting](https://github.com/bighuang624/DSANet)\n- [DILATE: DIstortion Loss with shApe and tImE](https://github.com/vincent-leguen/DILATE)\n- [Variational Recurrent Autoencoder for Timeseries Clustering](https://github.com/tejaslodaya/timeseries-clustering-vae)\n- [Spatio-Temporal Neural Networks for Space-Time Series Modeling and Relations Discovery](https://github.com/edouardelasalles/stnn)\n- [Flow Forecast: A deep learning for time series forecasting framework built in PyTorch](https://github.com/AIStream-Peelout/flow-forecast)\n\n## <a name='SyntheticDatasets'></a>Synthetic Datasets\n- [Meta-Sim: Learning to Generate Synthetic Datasets](https://github.com/nv-tlabs/meta-sim)\n\n## <a name='NeuralNetworkGeneralImprovements'></a>Neural Network General Improvements\n- [In-Place Activated BatchNorm for Memory-Optimized Training of DNNs](https://github.com/mapillary/inplace_abn)\n- [Train longer, generalize better: closing the generalization gap in large batch training of neural networks](https://github.com/eladhoffer/bigBatch)\n- [FreezeOut: Accelerate Training by Progressively Freezing Layers](https://github.com/ajbrock/FreezeOut)\n- [Binary Stochastic Neurons](https://github.com/Wizaron/binary-stochastic-neurons)\n- [Compact Bilinear Pooling](https://github.com/DeepInsight-PCALab/CompactBilinearPooling-Pytorch)\n- [Mixed Precision Training in PyTorch](https://github.com/suvojit-0x55aa/mixed-precision-pytorch)\n\n## <a name='DNNApplicationsinChemistryandPhysics'></a>DNN Applications in Chemistry and Physics\n- [Wave Physics as an Analog Recurrent Neural Network](https://github.com/fancompute/wavetorch)\n- [Neural Message Passing for Quantum Chemistry](https://github.com/priba/nmp_qc)\n- [Automatic chemical design using a data-driven continuous representation of molecules](https://github.com/cxhernandez/molencoder)\n- [Deep Learning for Physical Processes: Integrating Prior Scientific Knowledge](https://github.com/emited/flow)\n- [Differentiable Molecular Simulation for Learning and Control](https://github.com/wwang2/torchmd)\n\n## <a name='NewThinkingonGeneralNeuralNetworkArchitecture'></a>New Thinking on General Neural Network Architecture\n- [Complement Objective Training](https://github.com/henry8527/COT)\n- [Decoupled Neural Interfaces using Synthetic Gradients](https://github.com/andrewliao11/dni.pytorch)\n\n## <a name='LinearAlgebra'></a>Linear Algebra\n- [Eigenvectors from Eigenvalues](https://github.com/ritchieng/eigenvectors-from-eigenvalues)\n\n## <a name='APIAbstraction'></a>API Abstraction\n- [Torch Layers, Shape inference for PyTorch, SOTA Layers](https://github.com/szymonmaszke/torchlayers)\n- [Hummingbird, run trained scikit-learn models on GPU with PyTorch](https://github.com/microsoft/hummingbird)\n\n## <a name='LowLevelUtilities'></a>Low Level Utilities\n- [TorchSharp, .NET API with access to underlying library powering PyTorch](https://github.com/interesaaat/TorchSharp)\n\n## <a name='PyTorchUtilities'></a>PyTorch Utilities\n- [Functorch: prototype of JAX-like composable Function transformers for PyTorch](https://github.com/zou3519/functorch)\n- [Poutyne: Simplified Framework for Training Neural Networks](https://github.com/GRAAL-Research/poutyne)\n- [PyTorch Metric Learning](https://github.com/KevinMusgrave/pytorch-metric-learning)\n- [Kornia: an Open Source Differentiable Computer Vision Library for PyTorch](https://kornia.org/)\n- [BackPACK to easily Extract Variance, Diagonal of Gauss-Newton, and KFAC](https://f-dangel.github.io/backpack/)\n- [PyHessian for Computing Hessian Eigenvalues, trace of matrix, and ESD](https://github.com/amirgholami/PyHessian)\n- [Hessian in PyTorch](https://github.com/mariogeiger/hessian)\n- [Differentiable Convex Layers](https://github.com/cvxgrp/cvxpylayers)\n- [Albumentations: Fast Image Augmentation Library](https://github.com/albu/albumentations)\n- [Higher, obtain higher order gradients over losses spanning training loops](https://github.com/facebookresearch/higher)\n- [Neural Pipeline, Training Pipeline for PyTorch](https://github.com/toodef/neural-pipeline)\n- [Layer-by-layer PyTorch Model Profiler for Checking Model Time Consumption](https://github.com/awwong1/torchprof)\n- [Sparse Distributions](https://github.com/probabll/sparse-distributions)\n- [Diffdist, Adds Support for Differentiable Communication allowing distributed model parallelism](https://github.com/ag14774/diffdist)\n- [HessianFlow, Library for Hessian Based Algorithms](https://github.com/amirgholami/HessianFlow)\n- [Texar, PyTorch Toolkit for Text Generation](https://github.com/asyml/texar-pytorch)\n- [PyTorch FLOPs counter](https://github.com/Lyken17/pytorch-OpCounter)\n- [PyTorch Inference on C++ in Windows](https://github.com/zccyman/pytorch-inference)\n- [EuclidesDB, Multi-Model Machine Learning Feature Database](https://github.com/perone/euclidesdb)\n- [Data Augmentation and Sampling for Pytorch](https://github.com/ncullen93/torchsample)\n- [PyText, deep learning based NLP modelling framework officially maintained by FAIR](https://github.com/facebookresearch/pytext)\n- [Torchstat for Statistics on PyTorch Models](https://github.com/Swall0w/torchstat)\n- [Load Audio files directly into PyTorch Tensors](https://github.com/pytorch/audio)\n- [Weight Initializations](https://github.com/pytorch/pytorch/blob/master/torch/nn/init.py)\n- [Spatial transformer implemented in PyTorch](https://github.com/fxia22/stn.pytorch)\n- [PyTorch AWS AMI, run PyTorch with GPU support in less than 5 minutes](https://github.com/ritchieng/dlami)\n- [Use tensorboard with PyTorch](https://github.com/lanpa/tensorboard-pytorch)\n- [Simple Fit Module in PyTorch, similar to Keras](https://github.com/henryre/pytorch-fitmodule)\n- [torchbearer: A model fitting library for PyTorch](https://github.com/ecs-vlc/torchbearer)\n- [PyTorch to Keras model converter](https://github.com/nerox8664/pytorch2keras)\n- [Gluon to PyTorch model converter with code generation](https://github.com/nerox8664/gluon2pytorch)\n- [Catalyst: High-level utils for PyTorch DL & RL research](https://github.com/catalyst-team/catalyst)\n- [PyTorch Lightning: Scalable and lightweight deep learning research framework](https://github.com/PyTorchLightning/pytorch-lightning)\n- [Determined: Scalable deep learning platform with PyTorch support](https://github.com/determined-ai/determined)\n- [PyTorch-Ignite: High-level library to help with training and evaluating neural networks in PyTorch flexibly and transparently](https://github.com/pytorch/ignite)\n- [torchvision: A package consisting of popular datasets, model architectures, and common image transformations for computer vision.](https://github.com/pytorch/vision)\n- [Poutyne: A Keras-like framework for PyTorch and handles much of the boilerplating code needed to train neural networks.](https://github.com/GRAAL-Research/poutyne)\n- [torchensemble: Scikit-Learn like ensemble methods in PyTorch](https://github.com/AaronX121/Ensemble-Pytorch)\n- [TorchFix - a linter for PyTorch-using code with autofix support](https://github.com/pytorch-labs/torchfix)\n- [pytorch360convert - Differentiable image conversions between 360\u00b0 equirectangular images, cubemaps, and perspective projections](https://github.com/ProGamerGov/pytorch360convert)\n\n\n## <a name='PyTorchVideoTutorials'></a>PyTorch Video Tutorials\n- [PyTorch Zero to All Lectures](http://bit.ly/PyTorchVideo)\n- [PyTorch For Deep Learning Full Course](https://www.youtube.com/watch?v=GIsg-ZUy0MY)\n- [PyTorch Lightning 101 with Alfredo Canziani and William Falcon](https://www.youtube.com/playlist?list=PLaMu-SDt_RB5NUm67hU2pdE75j6KaIOv2)\n- [Practical Deep Learning with PyTorch](https://www.udemy.com/practical-deep-learning-with-pytorch)\n\n\n## <a name='Community'></a>Community\n- [PyTorch Discussion Forum](https://discuss.pytorch.org/)\n- [StackOverflow PyTorch Tags](http://stackoverflow.com/questions/tagged/pytorch)\n- [Catalyst.Slack](https://join.slack.com/t/catalyst-team-core/shared_invite/zt-d9miirnn-z86oKDzFMKlMG4fgFdZafw)\n\n\n## <a name='TobeClassified'></a>To be Classified\n- [Perturbative Neural Networks](https://github.com/michaelklachko/pnn.pytorch)\n- [Accurate Neural Network Potential](https://github.com/aiqm/torchani)\n- [Scaling the Scattering Transform: Deep Hybrid Networks](https://github.com/edouardoyallon/pyscatwave)\n- [CortexNet: a Generic Network Family for Robust Visual Temporal Representations](https://github.com/e-lab/pytorch-CortexNet)\n- [Oriented Response Networks](https://github.com/ZhouYanzhao/ORN)\n- [Associative Compression Networks](https://github.com/jalexvig/associative_compression_networks)\n- [Clarinet](https://github.com/ksw0306/ClariNet)\n- [Continuous Wavelet Transforms](https://github.com/tomrunia/PyTorchWavelets)\n- [mixup: Beyond Empirical Risk Minimization](https://github.com/leehomyc/mixup_pytorch)\n- [Network In Network](https://github.com/szagoruyko/functional-zoo)\n- [Highway Networks](https://github.com/c0nn3r/pytorch_highway_networks)\n- [Hybrid computing using a neural network with dynamic external memory](https://github.com/ypxie/pytorch-NeuCom)\n- [Value Iteration Networks](https://github.com/onlytailei/PyTorch-value-iteration-networks)\n- [Differentiable Neural Computer](https://github.com/jingweiz/pytorch-dnc)\n- [A Neural Representation of Sketch Drawings](https://github.com/alexis-jacq/Pytorch-Sketch-RNN)\n- [Understanding Deep Image Representations by Inverting Them](https://github.com/utkuozbulak/pytorch-cnn-visualizations)\n- [NIMA: Neural Image Assessment](https://github.com/truskovskiyk/nima.pytorch)\n- [NASNet-A-Mobile. Ported weights](https://github.com/veronikayurchuk/pretrained-models.pytorch)\n- [Graphics code generating model using Processing](https://github.com/jtoy/sketchnet)\n\n## <a name='LinkstoThisRepository'></a>Links to This Repository\n- [Github Repository](https://github.com/ritchieng/the-incredible-pytorch)\n- [Website](https://www.ritchieng.com/the-incredible-pytorch/)\n\n\n## <a name='Contributions'></a>Contributions\nDo feel free to contribute!\n\nYou can raise an issue or submit a pull request, whichever is more convenient for you. The guideline is simple: just follow the format of the previous bullet point or create a new section if it's a new category.\n",
        "releases": []
    }
}