{
    "https://api.github.com/repos/google/closure-compiler": {
        "forks": 1157,
        "watchers": 7448,
        "stars": 7448,
        "languages": {
            "Java": 21394105,
            "JavaScript": 17847042,
            "Starlark": 31191,
            "Python": 6304,
            "Smarty": 2078,
            "HTML": 2029,
            "Shell": 1266
        },
        "commits": [
            "2025-01-22T04:06:33Z",
            "2025-01-22T03:13:04Z",
            "2025-01-21T23:32:50Z",
            "2025-01-21T23:22:11Z",
            "2025-01-21T22:13:52Z",
            "2025-01-21T20:46:06Z",
            "2025-01-21T18:09:21Z",
            "2025-01-21T17:54:04Z",
            "2025-01-21T17:12:03Z",
            "2025-01-17T19:40:42Z",
            "2025-01-17T13:50:10Z",
            "2025-01-17T01:43:57Z",
            "2025-01-17T01:05:14Z",
            "2025-01-16T23:43:24Z",
            "2025-01-16T19:04:01Z",
            "2025-01-16T18:24:23Z",
            "2025-01-16T15:58:48Z",
            "2025-01-16T15:55:13Z",
            "2025-01-15T23:57:11Z",
            "2025-01-15T22:35:13Z",
            "2025-01-15T21:40:38Z",
            "2025-01-15T18:39:38Z",
            "2025-01-14T23:50:11Z",
            "2025-01-14T21:50:57Z",
            "2025-01-14T21:01:56Z",
            "2025-01-14T18:40:18Z",
            "2025-01-13T23:12:53Z",
            "2025-01-13T21:55:20Z",
            "2025-01-13T19:43:38Z",
            "2025-01-13T17:37:31Z"
        ],
        "creation_date": "2014-04-16T15:30:36Z",
        "contributors": 30,
        "topics": [
            "closure-compiler",
            "javascript",
            "optimization",
            "typechecking"
        ],
        "subscribers": 234,
        "readme": "# [Google Closure Compiler](https://developers.google.com/closure/compiler/)\n\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/google/closure-compiler/badge)](https://api.securityscorecards.dev/projects/github.com/google/closure-compiler)\n[![Build Status](https://github.com/google/closure-compiler/workflows/Compiler%20CI/badge.svg)](https://github.com/google/closure-compiler/actions)\n[![Open Source Helpers](https://www.codetriage.com/google/closure-compiler/badges/users.svg)](https://www.codetriage.com/google/closure-compiler)\n[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg)](https://github.com/google/closure-compiler/blob/master/code_of_conduct.md)\n\nThe [Closure Compiler](https://developers.google.com/closure/compiler/) is a\ntool for making JavaScript download and run faster. It is a true compiler for\nJavaScript. Instead of compiling from a source language to machine code, it\ncompiles from JavaScript to better JavaScript. It parses your JavaScript,\nanalyzes it, removes dead code and rewrites and minimizes what's left. It also\nchecks syntax, variable references, and types, and warns about common JavaScript\npitfalls.\n\n## Important Caveats\n\n1. Compilation modes other than `ADVANCED` were always an afterthought and we\n   have deprecated those modes. We believe that other tools perform comparably\n   for non-`ADVANCED` modes and are better integrated into the broader JS\n   ecosystem.\n\n1. Closure Compiler is not suitable for arbitrary JavaScript.  For `ADVANCED`\n   mode to generate working JavaScript, the input JS code must be written with\n   closure-compiler in mind.\n\n1. Closure Compiler is a \"whole world\" optimizer. It expects to directly see or\n   at least receive information about every possible use of every global or\n   exported variable and every property name.\n\n   It will aggressively remove and rename variables and properties in order to\n   make the output code as small as possible. This will result in broken output\n   JS, if uses of global variables or properties are hidden from it.\n\n    Although one can write custom externs files to tell the compiler to leave\n    some names unchanged so they can safely be accessed by code that is not part\n    of the compilation, this is often tedious to maintain.\n\n1. Closure Compiler property renaming requires you to consistently access a\n   property with either `obj[p]` or `obj.propName`, but not both.\n\n   When you access a property with square brackets (e.g. `obj[p]`) or using some\n   other indirect method like `let {p} = obj;` this hides the literal name of\n   the property being referenced from the compiler. It cannot know if\n   `obj.propName` is referring to the same property as `obj[p]`. In some cases\n   it will notice this problem and stop the compilation with an error. In other\n   cases it will rename `propName` to something shorter, without noticing this\n   problem, resulting in broken output JS code.\n\n1. Closure Compiler aggressively inlines global variables and flattens chains\n   of property names on global variables (e.g. `myFoo.some.sub.property` ->\n   `myFoo$some$sub$property`), to make reasoning about them easier for detecting\n   unused code.\n\n   It tries to either back off from doing this or halt with an error when\n   doing it will generate broken JS output, but there are cases where it will\n   fail to recognize the problem and simply generate broken JS without warning.\n   This is much more likely to happen in code that was not explicitly written\n   with Closure Compiler in mind.\n\n1. Closure compiler and the externs it uses by default assume that the target\n   environment is a web browser window.\n\n   WebWorkers are supported also, but the compiler will likely fail to warn\n   you if you try to use features that aren't actually available to a WebWorker.\n\n   Some externs files and features have been added to Closure Compiler to\n   support the NodeJS environment, but they are not actively supported and\n   never worked very well.\n\n1. JavaScript that does not use the `goog.module()` and `goog.require()` from\n   `base.js` to declare and use modules is not well supported.\n\n    The ECMAScript `import` and `export` syntax did not exist until 2015.\n    Closure compiler and `closure-library` developed their own means for\n    declaring and using modules, and this remains the only well supported\n    way of defining modules.\n\n    The compiler does implement some understanding of ECMAScript modules,\n    but changing Google's projects to use the newer syntax has never offered\n    a benefit that was worth the cost of the change. Google's TypeScript code\n    uses ECMAScript modules, but they are converted to `goog.module()` syntax\n    before closure-compiler sees them. So, effectively the ECMAScript modules\n    support is unused within Google. This means we are unlikely to notice\n    or fix bugs in the support for ECMAScript modules.\n\n    Support for CommonJS modules as input was added in the past, but is not\n    used within Google, and is likely to be entirely removed sometime in 2024.\n\n## Supported uses\n\nClosure Compiler is used by Google projects to:\n\n*   Drastically reduce the code size of very large JavaScript applications\n\n*   Check the JS code for errors and for conformance to general and/or\n    project-specific best practices.\n\n*   Define user-visible messages in a way that makes it possible to replace\n    them with translated versions to create localized versions of an\n    application.\n\n*   Transpile newer JS features into a form that will run on browsers that\n    lack support for those features.\n\n*   Break the output application into chunks that may be individually loaded\n    as needed.\n\n    NOTE: These chunks are plain JavaScript scripts. They do not use the\n    ECMAScript `import` and `export` syntax.\n\nTo achieve these goals closure compiler places many restrictions on its input:\n\n*   Use `goog.module()` and `goog.require()` to declare and use modules.\n\n    Support for the `import` and `export` syntax added in ES6 is not actively\n    maintained.\n\n*   Use annotations in comments to declare type information and provide\n    information the compiler needs to avoid breaking some code patterns\n    (e.g. `@nocollapse` and `@noinline`).\n\n*   Either use only dot-access (e.g. `object.property`) or only use dynamic\n    access (e.g. `object[propertyName]` or `Object.keys(object)`) to access\n    the properties of a particular object type.\n\n    Mixing these will hide some uses of a property from the compiler, resulting\n    in broken output code when it renames the property.\n\n*   In general the compiler expects to see an entire application as a single\n    compilation. Interfaces must be carefully and explicitly constructed in\n    order to allow interoperation with code outside of the compilation unit.\n\n    The compiler assumes it can see all uses of all variables and properties\n    and will freely rename them or remove them if they appear unused.\n\n*   Use externs files to inform the compiler of any variables or properties\n    that it must not remove or rename.\n\n    There are default externs files declaring the standard JS and DOM global\n    APIs. More externs files are necessary if you are using less common\n    APIs or expect some external JavaScript code to access an API in the\n    code you are compiling.\n\n## Getting Started\n\nNOTE: NPM releases were put on hold in early 2024 and are not likely to resume\nuntil early 2025.\n\nThe easiest way to install the compiler is with [NPM](https://npmjs.com) or\n[Yarn](https://yarnpkg.com):\n\n```bash\nyarn global add google-closure-compiler\n# OR\nnpm i -g google-closure-compiler\n```\n\nThe package manager will link the binary for you, and you can access the\ncompiler with:\n\n```bash\ngoogle-closure-compiler\n```\n\nThis starts the compiler in interactive mode. Type:\n\n```javascript\nvar x = 17 + 25;\n```\n\nHit `Enter`, then `Ctrl+Z` (on Windows) or `Ctrl+D` (on Mac/Linux), then `Enter`\nagain. The Compiler will respond with the compiled output (using `SIMPLE` mode\nby default):\n\n```javascript\nvar x=42;\n```\n\n#### Downloading from Maven Repository\n\nNOTE: Maven releases were put on hold in early 2024 and are not likely to resume\nuntil early 2025.\n\nA pre-compiled release of the compiler is also available via\n[Maven](https://mvnrepository.com/artifact/com.google.javascript/closure-compiler).\n\n### Basic usage\n\nThe Closure Compiler has many options for reading input from a file, writing\noutput to a file, checking your code, and running optimizations. Here is a\nsimple example of compressing a JS program:\n\n```bash\ngoogle-closure-compiler --js file.js --js_output_file file.out.js\n```\n\nWe get the **most benefit** from the compiler if we give it **all of our source\ncode** (see [Compiling Multiple Scripts](#compiling-multiple-scripts)), which\nallows us to use `ADVANCED` optimizations:\n\n```bash\ngoogle-closure-compiler -O ADVANCED rollup.js --js_output_file rollup.min.js\n```\n\nNOTE: The output below is just an example and not kept up-to-date. The\n  [Flags and Options wiki page](https://github.com/google/closure-compiler/wiki/Flags-and-Options)\n  is updated during each release.\n\nTo see all of the compiler's options, type:\n\n```bash\ngoogle-closure-compiler --help\n```\n\n<table>\n<thead>\n  <tr>\n    <th><code>--flag</code></th>\n    <th>Description</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td><code>--compilation_level (-O)</code></td>\n    <td>\n      Specifies the compilation level to use.\n      Options: <code>BUNDLE</code>, <code>WHITESPACE_ONLY</code>,\n      <code>SIMPLE</code> (default), <code>ADVANCED</code>\n    </td>\n  </tr>\n  <tr>\n    <td><code>--env</code></td>\n    <td>\n      Determines the set of builtin externs to load.\n      Options: <code>BROWSER</code>, <code>CUSTOM</code>.\n      Defaults to <code>BROWSER</code>.\n    </td>\n  </tr>\n  <tr>\n    <td><code>--externs</code></td>\n    <td>The file containing JavaScript externs. You may specify multiple</td>\n  </tr>\n  <tr>\n    <td><code>--js</code></td>\n    <td>\n      The JavaScript filename. You may specify multiple. The flag name is\n      optional, because args are interpreted as files by default. You may also\n      use minimatch-style glob patterns. For example, use\n      <code>--js='**.js' --js='!**_test.js'</code> to recursively include all\n      js files that do not end in <code>_test.js</code>\n    </td>\n  </tr>\n  <tr>\n    <td><code>--js_output_file</code></td>\n    <td>\n      Primary output filename. If not specified, output is written to stdout.\n    </td>\n  </tr>\n  <tr>\n    <td><code>--language_in</code></td>\n    <td>\n      Sets the language spec to which input sources should conform.\n      Options: <code>ECMASCRIPT3</code>, <code>ECMASCRIPT5</code>,\n      <code>ECMASCRIPT5_STRICT</code>, <code>ECMASCRIPT_2015</code>,\n      <code>ECMASCRIPT_2016</code>, <code>ECMASCRIPT_2017</code>,\n      <code>ECMASCRIPT_2018</code>, <code>ECMASCRIPT_2019</code>,\n      <code>STABLE</code>, <code>ECMASCRIPT_NEXT</code>\n    </td>\n  </tr>\n  <tr>\n    <td><code>--language_out</code></td>\n    <td>\n      Sets the language spec to which output should conform.\n      Options: <code>ECMASCRIPT3</code>, <code>ECMASCRIPT5</code>,\n      <code>ECMASCRIPT5_STRICT</code>, <code>ECMASCRIPT_2015</code>,\n      <code>ECMASCRIPT_2016</code>, <code>ECMASCRIPT_2017</code>,\n      <code>ECMASCRIPT_2018</code>, <code>ECMASCRIPT_2019</code>,\n      <code>STABLE</code>\n    </td>\n  </tr>\n  <tr>\n    <td><code>--warning_level (-W)</code></td>\n    <td>Specifies the warning level to use.\n      Options: <code>QUIET</code>, <code>DEFAULT</code>, <code>VERBOSE</code>\n    </td>\n  </tr>\n</tbody>\n</table>\n\n#### See the [Google Developers Site](https://developers.google.com/closure/compiler/docs/gettingstarted_app) for documentation including instructions for running the compiler from the command line.\n\n### NodeJS API\n\nYou can access the compiler in a JS program by importing\n`google-closure-compiler`:\n\n```javascript\nimport closureCompiler from 'google-closure-compiler';\nconst { compiler } = closureCompiler;\n\nnew compiler({\n  js: 'file-one.js',\n  compilation_level: 'ADVANCED'\n});\n```\n\nThis package will provide programmatic access to the native Graal binary in most\ncases, and will fall back to the Java version otherwise.\n\n#### Please see the [closure-compiler-npm](https://github.com/google/closure-compiler-npm/tree/master/packages/google-closure-compiler) repository for documentation on accessing the compiler in JS.\n\n## Compiling Multiple Scripts\n\nIf you have multiple scripts, you should compile them all together with one\ncompile command.\n\n```bash\ngoogle-closure-compiler in1.js in2.js in3.js --js_output_file out.js\n```\n\nYou can also use minimatch-style globs.\n\n```bash\n# Recursively include all js files in subdirs\ngoogle-closure-compiler 'src/**.js' --js_output_file out.js\n\n# Recursively include all js files in subdirs, excluding test files.\n# Use single-quotes, so that bash doesn't try to expand the '!'\ngoogle-closure-compiler 'src/**.js' '!**_test.js' --js_output_file out.js\n```\n\nThe Closure Compiler will concatenate the files in the order they're passed at\nthe command line.\n\nIf you're using globs or many files, you may start to run into problems with\nmanaging dependencies between scripts. In this case, you should use the\nincluded [lib/base.js](lib/base.js) that provides functions for enforcing\ndependencies between scripts (namely `goog.module` and `goog.require`). Closure\nCompiler will re-order the inputs automatically.\n\n## Closure JavaScript Library\n\nThe Closure Compiler releases with [lib/base.js](lib/base.js) that provides\nJavaScript functions and variables that serve as primitives enabling certain\nfeatures of the Closure Compiler. This file is a derivative of the\n[identically named base.js](https://github.com/google/closure-library/blob/7818ff7dc0b53555a7fb3c3427e6761e88bde3a2/closure/goog/base.js)\nin the\n[soon-to-be deprecated](https://github.com/google/closure-library/issues/1214)\nClosure Library. This `base.js` will be supported by Closure Compiler going\nforward and may receive new features. It was designed to only retain its\nperceived core parts.\n\n## Getting Help\n\n1.  Post in the\n    [Closure Compiler Discuss Group](https://groups.google.com/forum/#!forum/closure-compiler-discuss).\n2.  Ask a question on\n    [Stack Overflow](https://stackoverflow.com/questions/tagged/google-closure-compiler).\n3.  Consult the [FAQ](https://github.com/google/closure-compiler/wiki/FAQ).\n\n## Building the Compiler\n\nTo build the compiler yourself, you will need the following:\n\nPrerequisite                                                               | Description\n-------------------------------------------------------------------------- | -----------\n[Java 21 or later](https://java.com)                                       | Used to compile the compiler's source code.\n[NodeJS](https://nodejs.org)                                               | Used to generate resources used by Java compilation\n[Git](https://git-scm.com/)                                                | Used by Bazel to download dependencies.\n[Bazelisk](https://bazel.build/install/bazelisk) | Used to build the various compiler targets.\n\n### Installing Bazelisk\n\nBazelisk is a wrapper around Bazel that dynamically loads the appropriate\nversion of Bazel for a given repository. Using it prevents spurious errors that\nresult from using the wrong version of Bazel to build the compiler, as well as\nmakes it easy to use different Bazel versions for other projects.\n\nBazelisk is available through many package managers. Feel free to use whichever\nyou're most comfortable with.\n\n[Instructions for installing Bazelisk](https://bazel.build/install/bazelisk).\n\n### Building from a terminal\n\n```bash\n$ bazelisk build //:compiler_uberjar_deploy.jar\n# OR to build everything\n$ bazelisk build //:all\n```\n\n### Testing from a terminal\n\nTests can be executed in a similar way. The following command will run all tests\nin the repo.\n\n```bash\n$ bazelisk test //:all\n```\n\nThere are hundreds of individual test targets, so it will take a few\nminutes to run all of them. While developing, it's usually better to specify\nthe exact tests you're interested in.\n\n```bash\nbazelisk test //:$path_to_test_file\n```\n\n### Building from an IDE\n\nSee [Bazel IDE Integrations](https://docs.bazel.build/versions/master/ide.html).\n\n### Running\n\nOnce the compiler has been built, the compiled JAR will be in the `bazel-bin/`\ndirectory. You can access it with a call to `java -jar ...` or by using the\npackage.json script:\n\n```bash\n# java -jar bazel-bin/compiler_uberjar_deploy.jar [...args]\nyarn compile [...args]\n```\n\n#### Running using Eclipse\n\n1.  Open the class `src/com/google/javascript/jscomp/CommandLineRunner.java` or\n    create your own extended version of the class.\n2.  Run the class in Eclipse.\n3.  See the instructions above on how to use the interactive mode - but beware\n    of the\n    [bug](https://stackoverflow.com/questions/4711098/passing-end-of-transmission-ctrl-d-character-in-eclipse-cdt-console)\n    regarding passing \"End of Transmission\" in the Eclipse console.\n\n## Contributing\n\n### Contributor code of conduct\n\nHowever you choose to contribute, please abide by our\n[code of conduct](https://github.com/google/closure-compiler/blob/master/code_of_conduct.md) to\nkeep our community a healthy and welcoming place.\n\n### Reporting a bug\n\n1.  First make sure that it is really a bug and not simply the way that Closure\n    Compiler works (especially true for ADVANCED_OPTIMIZATIONS).\n    *   Check the\n        [official documentation](https://developers.google.com/closure/compiler/)\n    *   Consult the [FAQ](https://github.com/google/closure-compiler/wiki/FAQ)\n    *   Search on\n        [Stack Overflow](https://stackoverflow.com/questions/tagged/google-closure-compiler)\n        and in the\n        [Closure Compiler Discuss Group](https://groups.google.com/forum/#!forum/closure-compiler-discuss)\n    *   Look through the list of\n        [compiler assumptions](https://github.com/google/closure-compiler/wiki/Compiler-Assumptions).\n2.  If you still think you have found a bug, make sure someone hasn't already\n    reported it. See the list of\n    [known issues](https://github.com/google/closure-compiler/issues).\n3.  If it hasn't been reported yet, post a new issue. Make sure to add enough\n    detail so that the bug can be recreated. The smaller the reproduction code,\n    the better.\n\n### Suggesting a feature\n\n1.  Consult the [FAQ](https://github.com/google/closure-compiler/wiki/FAQ) to\n    make sure that the behaviour you would like isn't specifically excluded\n    (such as string inlining).\n2.  Make sure someone hasn't requested the same thing. See the list of\n    [known issues](https://github.com/google/closure-compiler/issues).\n3.  Read up on\n    [what type of feature requests are accepted](https://github.com/google/closure-compiler/wiki/FAQ#how-do-i-submit-a-feature-request-for-a-new-type-of-optimization).\n4.  Submit your request as an issue.\n\n### Submitting patches\n\n1.  All contributors must sign a contributor license agreement (CLA). A CLA\n    basically says that you own the rights to any code you contribute, and that\n    you give us permission to use that code in Closure Compiler. You maintain\n    the copyright on that code. If you own all the rights to your code, you can\n    fill out an\n    [individual CLA](https://code.google.com/legal/individual-cla-v1.0.html). If\n    your employer has any rights to your code, then they also need to fill out a\n    [corporate CLA](https://code.google.com/legal/corporate-cla-v1.0.html). If\n    you don't know if your employer has any rights to your code, you should ask\n    before signing anything. By default, anyone with an @google.com email\n    address already has a CLA signed for them.\n2.  To make sure your changes are of the type that will be accepted, ask about\n    your patch on the\n    [Closure Compiler Discuss Group](https://groups.google.com/forum/#!forum/closure-compiler-discuss)\n3.  Fork the repository.\n4.  Make your changes. Check out our\n    [coding conventions](https://github.com/google/closure-compiler/wiki/Contributors#coding-conventions)\n    for details on making sure your code is in correct style.\n5.  Submit a pull request for your changes. A project developer will review your\n    work and then merge your request into the project.\n\n## Closure Compiler License\n\nCopyright 2009 The Closure Compiler Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0.\n\nUnless required by applicable law or agreed to in writing, software distributed\nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\nCONDITIONS OF ANY KIND, either express or implied. See the License for the\nspecific language governing permissions and limitations under the License.\n\n## Dependency Licenses\n\n### Rhino\n\n<table>\n  <tr>\n    <td>Code Path</td>\n    <td>\n      <code>src/com/google/javascript/rhino</code>, <code>test/com/google/javascript/rhino</code>\n    </td>\n  </tr>\n\n  <tr>\n    <td>URL</td>\n    <td>https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino</td>\n  </tr>\n\n  <tr>\n    <td>Version</td>\n    <td>1.5R3, with heavy modifications</td>\n  </tr>\n\n  <tr>\n    <td>License</td>\n    <td>Netscape Public License and MPL / GPL dual license</td>\n  </tr>\n\n  <tr>\n    <td>Description</td>\n    <td>A partial copy of Mozilla Rhino. Mozilla Rhino is an\nimplementation of JavaScript for the JVM.  The JavaScript parse tree data\nstructures were extracted and modified significantly for use by Google's\nJavaScript compiler.</td>\n  </tr>\n\n  <tr>\n    <td>Local Modifications</td>\n    <td>The packages have been renamespaced. All code not\nrelevant to the parse tree has been removed. A JsDoc parser and static typing\nsystem have been added.</td>\n  </tr>\n</table>\n\n### Args4j\n\n<table>\n  <tr>\n    <td>URL</td>\n    <td>http://args4j.kohsuke.org/</td>\n  </tr>\n\n  <tr>\n    <td>Version</td>\n    <td>2.33</td>\n  </tr>\n\n  <tr>\n    <td>License</td>\n    <td>MIT</td>\n  </tr>\n\n  <tr>\n    <td>Description</td>\n    <td>args4j is a small Java class library that makes it easy to parse command line\noptions/arguments in your CUI application.</td>\n  </tr>\n\n  <tr>\n    <td>Local Modifications</td>\n    <td>None</td>\n  </tr>\n</table>\n\n### Guava Libraries\n\n<table>\n  <tr>\n    <td>URL</td>\n    <td>https://github.com/google/guava</td>\n  </tr>\n\n  <tr>\n    <td>Version</td>\n    <td>31.0.1</td>\n  </tr>\n\n  <tr>\n    <td>License</td>\n    <td>Apache License 2.0</td>\n  </tr>\n\n  <tr>\n    <td>Description</td>\n    <td>Google's core Java libraries.</td>\n  </tr>\n\n  <tr>\n    <td>Local Modifications</td>\n    <td>None</td>\n  </tr>\n</table>\n\n### JSR 305\n\n<table>\n  <tr>\n    <td>URL</td>\n    <td>https://github.com/findbugsproject/findbugs</td>\n  </tr>\n\n  <tr>\n    <td>Version</td>\n    <td>3.0.1</td>\n  </tr>\n\n  <tr>\n    <td>License</td>\n    <td>BSD License</td>\n  </tr>\n\n  <tr>\n    <td>Description</td>\n    <td>Annotations for software defect detection.</td>\n  </tr>\n\n  <tr>\n    <td>Local Modifications</td>\n    <td>None</td>\n  </tr>\n</table>\n\n### JUnit\n\n<table>\n  <tr>\n    <td>URL</td>\n    <td>http://junit.org/junit4/</td>\n  </tr>\n\n  <tr>\n    <td>Version</td>\n    <td>4.13</td>\n  </tr>\n\n  <tr>\n    <td>License</td>\n    <td>Common Public License 1.0</td>\n  </tr>\n\n  <tr>\n    <td>Description</td>\n    <td>A framework for writing and running automated tests in Java.</td>\n  </tr>\n\n  <tr>\n    <td>Local Modifications</td>\n    <td>None</td>\n  </tr>\n</table>\n\n### Protocol Buffers\n\n<table>\n  <tr>\n    <td>URL</td>\n    <td>https://github.com/google/protobuf</td>\n  </tr>\n\n  <tr>\n    <td>Version</td>\n    <td>3.0.2</td>\n  </tr>\n\n  <tr>\n    <td>License</td>\n    <td>New BSD License</td>\n  </tr>\n\n  <tr>\n    <td>Description</td>\n    <td>Supporting libraries for protocol buffers,\nan encoding of structured data.</td>\n  </tr>\n\n  <tr>\n    <td>Local Modifications</td>\n    <td>None</td>\n  </tr>\n</table>\n\n### RE2/J\n\n<table>\n  <tr>\n    <td>URL</td>\n    <td>https://github.com/google/re2j</td>\n  </tr>\n\n  <tr>\n    <td>Version</td>\n    <td>1.3</td>\n  </tr>\n\n  <tr>\n    <td>License</td>\n    <td>New BSD License</td>\n  </tr>\n\n  <tr>\n    <td>Description</td>\n    <td>Linear time regular expression matching in Java.</td>\n  </tr>\n\n  <tr>\n    <td>Local Modifications</td>\n    <td>None</td>\n  </tr>\n</table>\n\n### Truth\n\n<table>\n  <tr>\n    <td>URL</td>\n    <td>https://github.com/google/truth</td>\n  </tr>\n\n  <tr>\n    <td>Version</td>\n    <td>1.1</td>\n  </tr>\n\n  <tr>\n    <td>License</td>\n    <td>Apache License 2.0</td>\n  </tr>\n\n  <tr>\n    <td>Description</td>\n    <td>Assertion/Proposition framework for Java unit tests</td>\n  </tr>\n\n  <tr>\n    <td>Local Modifications</td>\n    <td>None</td>\n  </tr>\n</table>\n\n### Ant\n\n<table>\n  <tr>\n    <td>URL</td>\n    <td>https://ant.apache.org/bindownload.cgi</td>\n  </tr>\n\n  <tr>\n    <td>Version</td>\n    <td>1.10.11</td>\n  </tr>\n\n  <tr>\n    <td>License</td>\n    <td>Apache License 2.0</td>\n  </tr>\n\n  <tr>\n    <td>Description</td>\n    <td>Ant is a Java based build tool. In theory it is kind of like \"make\"\nwithout make's wrinkles and with the full portability of pure java code.</td>\n  </tr>\n\n  <tr>\n    <td>Local Modifications</td>\n    <td>None</td>\n  </tr>\n</table>\n\n### GSON\n\n<table>\n  <tr>\n    <td>URL</td>\n    <td>https://github.com/google/gson</td>\n  </tr>\n\n  <tr>\n    <td>Version</td>\n    <td>2.9.1</td>\n  </tr>\n\n  <tr>\n    <td>License</td>\n    <td>Apache license 2.0</td>\n  </tr>\n\n  <tr>\n    <td>Description</td>\n    <td>A Java library to convert JSON to Java objects and vice-versa</td>\n  </tr>\n\n  <tr>\n    <td>Local Modifications</td>\n    <td>None</td>\n  </tr>\n</table>\n\n### Node.js Closure Compiler Externs\n\n<table>\n  <tr>\n    <td>Code Path</td>\n    <td><code>contrib/nodejs</code></td>\n  </tr>\n\n  <tr>\n    <td>URL</td>\n    <td>https://github.com/dcodeIO/node.js-closure-compiler-externs</td>\n  </tr>\n\n  <tr>\n    <td>Version</td>\n    <td>e891b4fbcf5f466cc4307b0fa842a7d8163a073a</td>\n  </tr>\n\n  <tr>\n    <td>License</td>\n    <td>Apache 2.0 license</td>\n  </tr>\n\n  <tr>\n    <td>Description</td>\n    <td>Type contracts for NodeJS APIs</td>\n  </tr>\n\n  <tr>\n    <td>Local Modifications</td>\n    <td>Substantial changes to make them compatible with NpmCommandLineRunner.</td>\n  </tr>\n</table>\n",
        "releases": []
    }
}