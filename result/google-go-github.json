{
    "https://api.github.com/repos/google/go-github": {
        "forks": 2087,
        "watchers": 10586,
        "stars": 10586,
        "languages": {
            "Go": 4483133,
            "Shell": 4155
        },
        "commits": [
            "2025-01-22T02:34:14Z",
            "2025-01-22T01:30:40Z",
            "2025-01-21T17:37:47Z",
            "2025-01-21T17:19:39Z",
            "2025-01-21T14:04:29Z",
            "2025-01-20T19:25:31Z",
            "2025-01-20T18:38:01Z",
            "2025-01-20T16:31:52Z",
            "2025-01-20T15:00:35Z",
            "2025-01-20T14:48:04Z",
            "2025-01-16T22:21:54Z",
            "2025-01-16T14:58:53Z",
            "2025-01-14T15:25:31Z",
            "2025-01-09T17:19:20Z",
            "2025-01-09T14:58:32Z",
            "2025-01-09T13:48:58Z",
            "2025-01-07T17:47:41Z",
            "2025-01-07T17:14:17Z",
            "2025-01-07T13:26:26Z",
            "2025-01-06T19:30:54Z",
            "2025-01-06T19:19:19Z",
            "2025-01-02T17:00:31Z",
            "2024-12-30T22:09:31Z",
            "2024-12-30T20:38:04Z",
            "2024-12-25T22:33:01Z",
            "2024-12-25T01:17:39Z",
            "2024-12-23T20:02:11Z",
            "2024-12-23T19:25:13Z",
            "2024-12-23T11:54:36Z",
            "2024-12-23T11:41:13Z"
        ],
        "creation_date": "2013-05-24T16:42:58Z",
        "contributors": 30,
        "topics": [
            "github",
            "github-api",
            "go",
            "golang",
            "hacktoberfest"
        ],
        "subscribers": 209,
        "readme": "# go-github #\n\n[![go-github release (latest SemVer)](https://img.shields.io/github/v/release/google/go-github?sort=semver)](https://github.com/google/go-github/releases)\n[![Go Reference](https://img.shields.io/static/v1?label=godoc&message=reference&color=blue)](https://pkg.go.dev/github.com/google/go-github/v68/github)\n[![Test Status](https://github.com/google/go-github/workflows/tests/badge.svg)](https://github.com/google/go-github/actions?query=workflow%3Atests)\n[![Test Coverage](https://codecov.io/gh/google/go-github/branch/master/graph/badge.svg)](https://codecov.io/gh/google/go-github)\n[![Discuss at go-github@googlegroups.com](https://img.shields.io/badge/discuss-go--github%40googlegroups.com-blue.svg)](https://groups.google.com/group/go-github)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/796/badge)](https://bestpractices.coreinfrastructure.org/projects/796)\n\ngo-github is a Go client library for accessing the [GitHub API v3][].\n\ngo-github tracks [Go's version support policy][support-policy] supporting any\nminor version of the latest two major releases of Go and the go directive in\ngo.mod reflects that.\nWe do our best not to break older versions of Go if we don't have to, but we\ndon't explicitly test older versions and as of Go 1.21 the go directive in\ngo.mod declares a hard required _minimum_ version of Go to use with this module\nand this _must_ be greater than or equal to the go line of all dependencies so\ngo-github will require the N-1 major release of Go by default.\n\n[support-policy]: https://golang.org/doc/devel/release.html#policy\n\n## Development\n\nGo version 1.22 introduced significant changes to the pattern syntax and matching\nbehavior of `http.ServerMux` which causes a large number of legacy unit tests to break.\n(See https://pkg.go.dev/net/http#hdr-Compatibility-ServeMux for more information.)\nAs a result, testing of this repo is currently performed by setting this env variable:\n\n```bash\nexport GODEBUG=httpmuxgo121=1\n```\n\nAn issue has been created (#3409) requesting assistance in updating all breaking legacy unit\ntests when this `GODEBUG` environment variable is not set and Go 1.23.4 or later is\nused to perform unit tests.\n\nIf you're interested in using the [GraphQL API v4][], the recommended library is\n[shurcooL/githubv4][].\n\n## Installation ##\n\ngo-github is compatible with modern Go releases in module mode, with Go installed:\n\n```bash\ngo get github.com/google/go-github/v68\n```\n\nwill resolve and add the package to the current development module, along with its dependencies.\n\nAlternatively the same can be achieved if you use import in a package:\n\n```go\nimport \"github.com/google/go-github/v68/github\"\n```\n\nand run `go get` without parameters.\n\nFinally, to use the top-of-trunk version of this repo, use the following command:\n\n```bash\ngo get github.com/google/go-github/v68@master\n```\n\n## Usage ##\n\n```go\nimport \"github.com/google/go-github/v68/github\"\t// with go modules enabled (GO111MODULE=on or outside GOPATH)\nimport \"github.com/google/go-github/github\" // with go modules disabled\n```\n\nConstruct a new GitHub client, then use the various services on the client to\naccess different parts of the GitHub API. For example:\n\n```go\nclient := github.NewClient(nil)\n\n// list all organizations for user \"willnorris\"\norgs, _, err := client.Organizations.List(context.Background(), \"willnorris\", nil)\n```\n\nSome API methods have optional parameters that can be passed. For example:\n\n```go\nclient := github.NewClient(nil)\n\n// list public repositories for org \"github\"\nopt := &github.RepositoryListByOrgOptions{Type: \"public\"}\nrepos, _, err := client.Repositories.ListByOrg(context.Background(), \"github\", opt)\n```\n\nThe services of a client divide the API into logical chunks and correspond to\nthe structure of the [GitHub API documentation](https://docs.github.com/en/rest).\n\nNOTE: Using the [context](https://pkg.go.dev/context) package, one can easily\npass cancelation signals and deadlines to various services of the client for\nhandling a request. In case there is no context available, then `context.Background()`\ncan be used as a starting point.\n\nFor more sample code snippets, head over to the\n[example](https://github.com/google/go-github/tree/master/example) directory.\n\n### Authentication ###\n\nUse the `WithAuthToken` method to configure your client to authenticate using an\nOAuth token (for example, a [personal access token][]). This is what is needed\nfor a majority of use cases aside from GitHub Apps.\n\n```go\nclient := github.NewClient(nil).WithAuthToken(\"... your access token ...\")\n```\n\nNote that when using an authenticated Client, all calls made by the client will\ninclude the specified OAuth token. Therefore, authenticated clients should\nalmost never be shared between different users.\n\nFor API methods that require HTTP Basic Authentication, use the\n[`BasicAuthTransport`](https://pkg.go.dev/github.com/google/go-github/github#BasicAuthTransport).\n\n#### As a GitHub App ####\n\nGitHub Apps authentication can be provided by different pkgs like [bradleyfalzon/ghinstallation](https://github.com/bradleyfalzon/ghinstallation)\nor [jferrl/go-githubauth](https://github.com/jferrl/go-githubauth).\n\n> **Note**: Most endpoints (ex. [`GET /rate_limit`]) require access token authentication\n> while a few others (ex. [`GET /app/hook/deliveries`]) require [JWT] authentication.\n\n[`GET /rate_limit`]: https://docs.github.com/en/rest/rate-limit#get-rate-limit-status-for-the-authenticated-user\n[`GET /app/hook/deliveries`]: https://docs.github.com/en/rest/apps/webhooks#list-deliveries-for-an-app-webhook\n[JWT]: https://docs.github.com/en/developers/apps/building-github-apps/authenticating-with-github-apps#authenticating-as-a-github-app\n\n`ghinstallation` provides `Transport`, which implements `http.RoundTripper` to provide authentication as an installation for GitHub Apps.\n\nHere is an example of how to authenticate as a GitHub App using the `ghinstallation` package:\n\n```go\nimport (\n\t\"net/http\"\n\n\t\"github.com/bradleyfalzon/ghinstallation/v2\"\n\t\"github.com/google/go-github/v68/github\"\n)\n\nfunc main() {\n\t// Wrap the shared transport for use with the integration ID 1 authenticating with installation ID 99.\n\titr, err := ghinstallation.NewKeyFromFile(http.DefaultTransport, 1, 99, \"2016-10-19.private-key.pem\")\n\n\t// Or for endpoints that require JWT authentication\n\t// itr, err := ghinstallation.NewAppsTransportKeyFromFile(http.DefaultTransport, 1, \"2016-10-19.private-key.pem\")\n\n\tif err != nil {\n\t\t// Handle error.\n\t}\n\n\t// Use installation transport with client.\n\tclient := github.NewClient(&http.Client{Transport: itr})\n\n\t// Use client...\n}\n```\n\n`go-githubauth` implements a set of `oauth2.TokenSource` to be used with `oauth2.Client`. An `oauth2.Client` can be injected into the `github.Client` to authenticate requests.\n\nOther example using `go-githubauth`:\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\n\t\"github.com/google/go-github/v68/github\"\n\t\"github.com/jferrl/go-githubauth\"\n\t\"golang.org/x/oauth2\"\n)\n\nfunc main() {\n\tprivateKey := []byte(os.Getenv(\"GITHUB_APP_PRIVATE_KEY\"))\n\n\tappTokenSource, err := githubauth.NewApplicationTokenSource(1112, privateKey)\n\tif err != nil {\n\t\tfmt.Println(\"Error creating application token source:\", err)\n\t\treturn\n\t }\n\n\tinstallationTokenSource := githubauth.NewInstallationTokenSource(1113, appTokenSource)\n\n\t// oauth2.NewClient uses oauth2.ReuseTokenSource to reuse the token until it expires.\n\t// The token will be automatically refreshed when it expires.\n\t// InstallationTokenSource has the mechanism to refresh the token when it expires.\n\thttpClient := oauth2.NewClient(context.Background(), installationTokenSource)\n\n\tclient := github.NewClient(httpClient)\n}\n```\n\n*Note*: In order to interact with certain APIs, for example writing a file to a repo, one must generate an installation token\nusing the installation ID of the GitHub app and authenticate with the OAuth method mentioned above. See the examples.\n\n### Rate Limiting ###\n\nGitHub imposes a rate limit on all API clients. Unauthenticated clients are\nlimited to 60 requests per hour, while authenticated clients can make up to\n5,000 requests per hour. The Search API has a custom rate limit. Unauthenticated\nclients are limited to 10 requests per minute, while authenticated clients\ncan make up to 30 requests per minute. To receive the higher rate limit when\nmaking calls that are not issued on behalf of a user,\nuse `UnauthenticatedRateLimitedTransport`.\n\nThe returned `Response.Rate` value contains the rate limit information\nfrom the most recent API call. If a recent enough response isn't\navailable, you can use `RateLimits` to fetch the most up-to-date rate\nlimit data for the client.\n\nTo detect an API rate limit error, you can check if its type is `*github.RateLimitError`:\n\n```go\nrepos, _, err := client.Repositories.List(ctx, \"\", nil)\nif _, ok := err.(*github.RateLimitError); ok {\n\tlog.Println(\"hit rate limit\")\n}\n```\n\nLearn more about GitHub rate limiting in\n[\"REST API endpoints for rate limits\"](https://docs.github.com/en/rest/rate-limit).\n\nIn addition to these rate limits, GitHub imposes a secondary rate limit on all API clients.\nThis rate limit prevents clients from making too many concurrent requests.\n\nTo detect an API secondary rate limit error, you can check if its type is `*github.AbuseRateLimitError`:\n\n```go\nrepos, _, err := client.Repositories.List(ctx, \"\", nil)\nif _, ok := err.(*github.AbuseRateLimitError); ok {\n\tlog.Println(\"hit secondary rate limit\")\n}\n```\n\nAlternatively, you can block until the rate limit is reset by using the `context.WithValue` method:\n\n```go\nrepos, _, err := client.Repositories.List(context.WithValue(ctx, github.SleepUntilPrimaryRateLimitResetWhenRateLimited, true), \"\", nil)\n```\n\nYou can use [gofri/go-github-ratelimit](https://github.com/gofri/go-github-ratelimit) to handle\nsecondary rate limit sleep-and-retry for you.\n\nLearn more about GitHub secondary rate limiting in\n[\"About secondary rate limits\"](https://docs.github.com/en/rest/using-the-rest-api/rate-limits-for-the-rest-api?apiVersion=2022-11-28#about-secondary-rate-limits).\n\n### Accepted Status ###\n\nSome endpoints may return a 202 Accepted status code, meaning that the\ninformation required is not yet ready and was scheduled to be gathered on\nthe GitHub side. Methods known to behave like this are documented specifying\nthis behavior.\n\nTo detect this condition of error, you can check if its type is\n`*github.AcceptedError`:\n\n```go\nstats, _, err := client.Repositories.ListContributorsStats(ctx, org, repo)\nif _, ok := err.(*github.AcceptedError); ok {\n\tlog.Println(\"scheduled on GitHub side\")\n}\n```\n\n### Conditional Requests ###\n\nThe GitHub API has good support for conditional requests which will help\nprevent you from burning through your rate limit, as well as help speed up your\napplication. `go-github` does not handle conditional requests directly, but is\ninstead designed to work with a caching `http.Transport`. We recommend using\n[gregjones/httpcache](https://github.com/gregjones/httpcache) for that. For example:\n\n```go\nimport \"github.com/gregjones/httpcache\"\n\n\tclient := github.NewClient(\n\t\thttpcache.NewMemoryCacheTransport().Client()\n    ).WithAuthToken(os.Getenv(\"GITHUB_TOKEN\"))\n```\n\nLearn more about GitHub conditional requests in\n[\"Use conditional requests if appropriate\"](https://docs.github.com/en/rest/using-the-rest-api/best-practices-for-using-the-rest-api?apiVersion=2022-11-28#use-conditional-requests-if-appropriate).\n\n### Creating and Updating Resources ###\n\nAll structs for GitHub resources use pointer values for all non-repeated fields.\nThis allows distinguishing between unset fields and those set to a zero-value.\nHelper functions have been provided to easily create these pointers for string,\nbool, and int values. For example:\n\n```go\n// create a new private repository named \"foo\"\nrepo := &github.Repository{\n\tName:    github.Ptr(\"foo\"),\n\tPrivate: github.Ptr(true),\n}\nclient.Repositories.Create(ctx, \"\", repo)\n```\n\nUsers who have worked with protocol buffers should find this pattern familiar.\n\n### Pagination ###\n\nAll requests for resource collections (repos, pull requests, issues, etc.)\nsupport pagination. Pagination options are described in the\n`github.ListOptions` struct and passed to the list methods directly or as an\nembedded type of a more specific list options struct (for example\n`github.PullRequestListOptions`). Pages information is available via the\n`github.Response` struct.\n\n```go\nclient := github.NewClient(nil)\n\nopt := &github.RepositoryListByOrgOptions{\n\tListOptions: github.ListOptions{PerPage: 10},\n}\n// get all pages of results\nvar allRepos []*github.Repository\nfor {\n\trepos, resp, err := client.Repositories.ListByOrg(ctx, \"github\", opt)\n\tif err != nil {\n\t\treturn err\n\t}\n\tallRepos = append(allRepos, repos...)\n\tif resp.NextPage == 0 {\n\t\tbreak\n\t}\n\topt.Page = resp.NextPage\n}\n```\n\n#### Iterators (**experimental**) ####\n\nGo v1.23 introduces the new `iter` package.  \n\nWith the `enrichman/gh-iter` package, it is possible to create iterators for `go-github`. The iterator will handle pagination for you, looping through all the available results.\n\n```go\nclient := github.NewClient(nil)\nvar allRepos []*github.Repository\n\n// create an iterator and start looping through all the results\nrepos := ghiter.NewFromFn1(client.Repositories.ListByOrg, \"github\")\nfor repo := range repos.All() {\n\tallRepos = append(allRepos, repo)\n}\n```\n\nFor complete usage of `enrichman/gh-iter`, see the full [package docs](https://github.com/enrichman/gh-iter).\n\n### Webhooks ###\n\n`go-github` provides structs for almost all [GitHub webhook events][] as well as functions to validate them and unmarshal JSON payloads from `http.Request` structs.\n\n```go\nfunc (s *GitHubEventMonitor) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tpayload, err := github.ValidatePayload(r, s.webhookSecretKey)\n\tif err != nil { ... }\n\tevent, err := github.ParseWebHook(github.WebHookType(r), payload)\n\tif err != nil { ... }\n\tswitch event := event.(type) {\n\tcase *github.CommitCommentEvent:\n\t\tprocessCommitCommentEvent(event)\n\tcase *github.CreateEvent:\n\t\tprocessCreateEvent(event)\n\t...\n\t}\n}\n```\n\nFurthermore, there are libraries like [cbrgm/githubevents][] that build upon the example above and provide functions to subscribe callbacks to specific events.\n\nFor complete usage of go-github, see the full [package docs][].\n\n[GitHub API v3]: https://docs.github.com/en/rest\n[personal access token]: https://github.com/blog/1509-personal-api-tokens\n[package docs]: https://pkg.go.dev/github.com/google/go-github/v68/github\n[GraphQL API v4]: https://developer.github.com/v4/\n[shurcooL/githubv4]: https://github.com/shurcooL/githubv4\n[GitHub webhook events]: https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads\n[cbrgm/githubevents]: https://github.com/cbrgm/githubevents\n\n### Testing code that uses `go-github` ###\n\nThe repo [migueleliasweb/go-github-mock](https://github.com/migueleliasweb/go-github-mock) provides a way to mock responses. Check the repo for more details.\n\n### Integration Tests ###\n\nYou can run integration tests from the `test` directory. See the integration tests [README](test/README.md).\n\n## Contributing ##\n\nI would like to cover the entire GitHub API and contributions are of course always welcome. The\ncalling pattern is pretty well established, so adding new methods is relatively\nstraightforward. See [`CONTRIBUTING.md`](CONTRIBUTING.md) for details.\n\n## Versioning ##\n\nIn general, go-github follows [semver](https://semver.org/) as closely as we\ncan for tagging releases of the package. For self-contained libraries, the\napplication of semantic versioning is relatively straightforward and generally\nunderstood. But because go-github is a client library for the GitHub API, which\nitself changes behavior, and because we are typically pretty aggressive about\nimplementing preview features of the GitHub API, we've adopted the following\nversioning policy:\n\n* We increment the **major version** with any incompatible change to\n\tnon-preview functionality, including changes to the exported Go API surface\n\tor behavior of the API.\n* We increment the **minor version** with any backwards-compatible changes to\n\tfunctionality, as well as any changes to preview functionality in the GitHub\n\tAPI. GitHub makes no guarantee about the stability of preview functionality,\n\tso neither do we consider it a stable part of the go-github API.\n* We increment the **patch version** with any backwards-compatible bug fixes.\n\nPreview functionality may take the form of entire methods or simply additional\ndata returned from an otherwise non-preview method. Refer to the GitHub API\ndocumentation for details on preview functionality.\n\n### Calendar Versioning ###\n\nAs of 2022-11-28, GitHub [has announced](https://github.blog/2022-11-28-to-infinity-and-beyond-enabling-the-future-of-githubs-rest-api-with-api-versioning/)\nthat they are starting to version their v3 API based on \"calendar-versioning\".\n\nIn practice, our goal is to make per-method version overrides (at\nleast in the core library) rare and temporary.\n\nOur understanding of the GitHub docs is that they will be revving the\nentire API to each new date-based version, even if only a few methods\nhave breaking changes. Other methods will accept the new version with\ntheir existing functionality. So when a new date-based version of the\nGitHub API is released, we (the repo maintainers) plan to:\n\n* update each method that had breaking changes, overriding their\n  per-method API version header. This may happen in one or multiple\n  commits and PRs, and is all done in the main branch.\n\n* once all of the methods with breaking changes have been updated,\n  have a final commit that bumps the default API version, and remove\n  all of the per-method overrides. That would now get a major version\n  bump when the next go-github release is made.\n\n### Version Compatibility Table ###\n\nThe following table identifies which version of the GitHub API is\nsupported by this (and past) versions of this repo (go-github).\nVersions prior to 48.2.0 are not listed.\n\n| go-github Version | GitHub v3 API Version |\n| ----------------- | --------------------- |\n| 68.0.0            | 2022-11-28            |\n| ...               | 2022-11-28            |\n| 48.2.0            | 2022-11-28            |\n\n## License ##\n\nThis library is distributed under the BSD-style license found in the [LICENSE](./LICENSE)\nfile.\n",
        "releases": [
            {
                "name": "v68.0.0",
                "date": "2024-12-23T11:42:30Z"
            },
            {
                "name": "v67.0.0",
                "date": "2024-11-27T14:03:39Z"
            },
            {
                "name": "v66.0.0",
                "date": "2024-10-06T17:04:24Z"
            },
            {
                "name": "v65.0.0",
                "date": "2024-09-16T13:28:48Z"
            },
            {
                "name": "v64.0.0",
                "date": "2024-08-21T03:01:27Z"
            },
            {
                "name": "v63.0.0",
                "date": "2024-07-10T20:12:39Z"
            },
            {
                "name": "v62.0.0",
                "date": "2024-05-11T00:02:37Z"
            },
            {
                "name": "v61.0.0",
                "date": "2024-04-01T19:02:56Z"
            },
            {
                "name": "v60.0.0",
                "date": "2024-02-29T17:19:18Z"
            },
            {
                "name": "v59.0.0",
                "date": "2024-02-09T14:34:46Z"
            },
            {
                "name": "v58.0.0",
                "date": "2024-01-10T03:37:02Z"
            },
            {
                "name": "v57.0.0",
                "date": "2023-12-01T17:47:30Z"
            },
            {
                "name": "v56.0.0",
                "date": "2023-10-11T23:49:27Z"
            },
            {
                "name": "v55.0.0",
                "date": "2023-09-05T17:03:33Z"
            },
            {
                "name": "v54.0.0",
                "date": "2023-08-16T18:32:13Z"
            },
            {
                "name": "v53.2.0",
                "date": "2023-06-19T12:27:31Z"
            },
            {
                "name": "v53.1.0",
                "date": "2023-06-12T23:47:15Z"
            },
            {
                "name": "v53.0.0",
                "date": "2023-06-06T14:38:26Z"
            },
            {
                "name": "v52.0.0",
                "date": "2023-04-21T13:54:47Z"
            },
            {
                "name": "v51.0.0",
                "date": "2023-04-05T17:29:55Z"
            },
            {
                "name": "v50.2.0",
                "date": "2023-03-17T17:59:42Z"
            },
            {
                "name": "v50.1.0",
                "date": "2023-02-24T01:03:05Z"
            },
            {
                "name": "v50.0.0",
                "date": "2023-01-26T22:03:50Z"
            },
            {
                "name": "v49.1.0",
                "date": "2023-01-11T00:58:07Z"
            },
            {
                "name": "v49.0.0",
                "date": "2023-01-04T04:44:47Z"
            },
            {
                "name": "v48.2.0",
                "date": "2022-12-09T16:30:15Z"
            },
            {
                "name": "v48.1.0",
                "date": "2022-11-15T02:38:52Z"
            },
            {
                "name": "v48.0.0",
                "date": "2022-10-18T00:31:52Z"
            },
            {
                "name": "v47.1.0",
                "date": "2022-09-19T11:49:54Z"
            },
            {
                "name": "v47.0.0",
                "date": "2022-08-22T22:49:04Z"
            },
            {
                "name": "v46.0.0",
                "date": "2022-08-19T14:23:29Z"
            },
            {
                "name": "v45.2.0",
                "date": "2022-06-21T12:56:06Z"
            },
            {
                "name": "v45.1.0",
                "date": "2022-06-07T14:28:28Z"
            },
            {
                "name": "v45.0.0",
                "date": "2022-05-25T14:51:25Z"
            },
            {
                "name": "v44.1.0",
                "date": "2022-05-13T17:10:27Z"
            },
            {
                "name": "v44.0.0",
                "date": "2022-04-30T00:37:23Z"
            },
            {
                "name": "v43.0.0",
                "date": "2022-03-02T01:48:53Z"
            },
            {
                "name": "v42.0.0",
                "date": "2022-01-13T03:38:20Z"
            },
            {
                "name": "v41.0.0",
                "date": "2021-11-29T15:37:59Z"
            },
            {
                "name": "v40.0.0",
                "date": "2021-11-08T13:23:47Z"
            },
            {
                "name": "v39.2.0",
                "date": "2021-10-13T12:42:07Z"
            },
            {
                "name": "v39.1.0",
                "date": "2021-09-23T16:43:50Z"
            },
            {
                "name": "v39.0.0",
                "date": "2021-09-09T16:56:41Z"
            },
            {
                "name": "v38.1.0",
                "date": "2021-08-12T00:40:27Z"
            },
            {
                "name": "v38.0.0",
                "date": "2021-08-11T11:18:19Z"
            },
            {
                "name": "v37.0.0",
                "date": "2021-07-09T01:13:38Z"
            },
            {
                "name": "v36.0.0",
                "date": "2021-06-26T16:38:44Z"
            },
            {
                "name": "v35.3.0",
                "date": "2021-06-06T11:06:04Z"
            },
            {
                "name": "v35.2.0",
                "date": "2021-05-06T19:41:10Z"
            },
            {
                "name": "v35.1.0",
                "date": "2021-04-24T12:31:24Z"
            },
            {
                "name": "v35.0.0",
                "date": "2021-04-14T12:22:56Z"
            },
            {
                "name": "v34.0.0",
                "date": "2021-03-25T22:23:26Z"
            },
            {
                "name": "v33.0.0",
                "date": "2020-12-02T18:08:57Z"
            },
            {
                "name": "v32.1.0",
                "date": "2020-07-18T13:11:19Z"
            },
            {
                "name": "v32.0.0",
                "date": "2020-05-28T12:34:44Z"
            },
            {
                "name": "v31.0.0",
                "date": "2020-04-10T01:46:48Z"
            },
            {
                "name": "v30.1.0",
                "date": "2020-03-25T12:38:30Z"
            },
            {
                "name": "v30.0.0",
                "date": "2020-03-18T13:34:42Z"
            },
            {
                "name": "v29.0.3",
                "date": "2020-02-10T19:32:24Z"
            },
            {
                "name": "v29.0.2",
                "date": "2020-01-10T12:46:41Z"
            },
            {
                "name": "v29.0.1",
                "date": "2020-01-09T00:20:28Z"
            },
            {
                "name": "v28.1.1",
                "date": "2019-09-07T20:42:01Z"
            },
            {
                "name": "v28.1.0",
                "date": "2019-09-07T20:37:38Z"
            },
            {
                "name": "v28.0.2",
                "date": "2019-09-07T20:17:19Z"
            },
            {
                "name": "v28.0.1",
                "date": "2019-08-30T23:38:36Z"
            },
            {
                "name": "v28.0.0",
                "date": "2019-08-24T01:28:48Z"
            },
            {
                "name": "v27.0.6",
                "date": "2019-08-21T12:12:12Z"
            },
            {
                "name": "v27.0.5",
                "date": "2019-08-20T03:15:41Z"
            },
            {
                "name": "v27.0.4",
                "date": "2019-07-25T12:16:12Z"
            },
            {
                "name": "v27.0.3",
                "date": "2019-07-25T12:09:39Z"
            },
            {
                "name": "v27.0.2",
                "date": "2019-07-25T12:05:59Z"
            },
            {
                "name": "v27.0.1",
                "date": "2019-07-20T01:59:09Z"
            },
            {
                "name": "v27.0.0",
                "date": "2019-07-16T00:28:05Z"
            },
            {
                "name": "v26.1.3",
                "date": "2019-07-08T22:30:25Z"
            },
            {
                "name": "v26.1.2",
                "date": "2019-07-08T22:28:13Z"
            },
            {
                "name": "v26.1.1",
                "date": "2019-07-08T22:07:37Z"
            },
            {
                "name": "v26.1.0",
                "date": "2019-07-08T22:03:28Z"
            },
            {
                "name": "v26.0.10",
                "date": "2019-07-04T13:04:56Z"
            },
            {
                "name": "v26.0.9",
                "date": "2019-06-25T19:30:56Z"
            },
            {
                "name": "v26.0.8",
                "date": "2019-06-25T03:21:00Z"
            },
            {
                "name": "v26.0.7",
                "date": "2019-06-22T16:38:44Z"
            },
            {
                "name": "v26.0.6",
                "date": "2019-06-21T01:50:56Z"
            },
            {
                "name": "v26.0.5",
                "date": "2019-06-19T13:26:31Z"
            },
            {
                "name": "v26.0.4",
                "date": "2019-06-14T13:26:40Z"
            },
            {
                "name": "v26.0.2",
                "date": "2019-06-11T12:06:44Z"
            },
            {
                "name": "v26.0.1",
                "date": "2019-06-11T12:01:08Z"
            },
            {
                "name": "v26.0.0",
                "date": "2019-06-11T11:54:29Z"
            },
            {
                "name": "v25.1.3",
                "date": "2019-06-10T20:19:34Z"
            },
            {
                "name": "v25.1.2",
                "date": "2019-06-09T21:04:03Z"
            },
            {
                "name": "v25.1.1",
                "date": "2019-05-30T23:53:15Z"
            },
            {
                "name": "v25.1.0",
                "date": "2019-05-30T02:06:14Z"
            },
            {
                "name": "v25.0.5",
                "date": "2019-05-30T02:03:22Z"
            },
            {
                "name": "v25.0.4",
                "date": "2019-05-13T05:19:34Z"
            },
            {
                "name": "v25.0.3",
                "date": "2019-05-11T22:38:26Z"
            },
            {
                "name": "v25.0.2",
                "date": "2019-04-25T11:49:22Z"
            },
            {
                "name": "v25.0.1",
                "date": "2019-04-19T20:35:08Z"
            },
            {
                "name": "v25.0.0",
                "date": "2019-04-18T10:49:01Z"
            },
            {
                "name": "v24.0.1",
                "date": "2019-02-28T02:50:56Z"
            },
            {
                "name": "v24.0.0",
                "date": "2019-02-12T21:55:16Z"
            },
            {
                "name": "v23.0.0",
                "date": "2019-02-08T03:54:42Z"
            },
            {
                "name": "v22.0.0",
                "date": "2019-02-02T00:48:00Z"
            },
            {
                "name": "v21.0.1",
                "date": "2019-01-19T01:12:55Z"
            },
            {
                "name": "v21.0.0",
                "date": "2018-12-22T02:29:10Z"
            },
            {
                "name": "v20.0.0",
                "date": "2018-12-13T01:41:00Z"
            },
            {
                "name": "v19.1.0",
                "date": "2018-11-22T02:34:27Z"
            },
            {
                "name": "v19.0.0",
                "date": "2018-11-22T02:21:42Z"
            },
            {
                "name": "v18.2.0",
                "date": "2018-09-26T00:46:55Z"
            },
            {
                "name": "v18.1.0",
                "date": "2018-09-12T00:14:35Z"
            },
            {
                "name": "v18.0.0",
                "date": "2018-08-27T15:33:09Z"
            },
            {
                "name": "v17.0.0",
                "date": "2018-08-10T17:17:53Z"
            },
            {
                "name": "v16.0.0",
                "date": "2018-08-06T15:29:16Z"
            }
        ]
    }
}