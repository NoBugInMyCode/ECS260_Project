{
    "https://api.github.com/repos/kelektiv/node-cron": {
        "forks": 626,
        "watchers": 8563,
        "stars": 8563,
        "languages": {
            "TypeScript": 101839,
            "JavaScript": 2207
        },
        "commits": [
            "2025-01-20T01:18:54Z",
            "2025-01-13T01:54:49Z",
            "2025-01-11T21:54:18Z",
            "2025-01-11T17:22:22Z",
            "2025-01-11T14:17:44Z",
            "2025-01-11T09:54:38Z",
            "2025-01-11T06:18:08Z",
            "2025-01-11T00:48:17Z",
            "2025-01-10T12:08:26Z",
            "2025-01-10T12:03:26Z",
            "2025-01-10T06:41:15Z",
            "2025-01-10T06:31:26Z",
            "2025-01-10T01:44:41Z",
            "2025-01-09T07:31:40Z",
            "2025-01-09T07:26:38Z",
            "2025-01-09T05:45:18Z",
            "2025-01-07T01:36:10Z",
            "2025-01-06T02:38:24Z",
            "2025-01-04T03:24:05Z",
            "2025-01-01T01:02:08Z",
            "2024-12-30T17:14:47Z",
            "2024-12-30T16:42:30Z",
            "2024-12-30T16:37:51Z",
            "2024-12-30T01:22:54Z",
            "2024-12-23T12:15:32Z",
            "2024-12-23T00:25:04Z",
            "2024-12-20T01:50:32Z",
            "2024-12-19T02:38:53Z",
            "2024-12-17T05:18:42Z",
            "2024-12-16T00:10:51Z"
        ],
        "creation_date": "2010-06-23T01:25:18Z",
        "contributors": 30,
        "topics": [
            "hacktoberfest"
        ],
        "subscribers": 109,
        "readme": "<p align=\"center\">\n  <img src=\"logo.svg\" alt=\"cron for Node.js logo\" height=\"150\">\n  <br />\n  <b>cron</b> is a robust tool for running jobs (functions or commands) on schedules defined using the cron syntax.\n  <br />\n  Perfect for tasks like data backups, notifications, and many more!\n</p>\n\n# Cron for Node.js\n\n[![Version](https://img.shields.io/npm/v/cron?label=version&logo=npm)](https://www.npmjs.com/package/cron)\n[![Monthly Downloads](https://img.shields.io/npm/dm/cron?logo=npm)](https://www.npmjs.com/package/cron)\n[![Build Status](https://img.shields.io/github/actions/workflow/status/kelektiv/node-cron/release.yml?logo=github)](https://github.com/kelektiv/node-cron/actions/workflows/release.yml)\n[![CodeQL Status](https://img.shields.io/github/actions/workflow/status/kelektiv/node-cron/codeql.yml?logo=github&label=CodeQL)](https://github.com/kelektiv/node-cron/actions/workflows/codeql.yml)\n[![Coverage](https://img.shields.io/codecov/c/gh/kelektiv/node-cron?logo=codecov)](https://app.codecov.io/gh/kelektiv/node-cron)\n[![Renovate](https://img.shields.io/badge/renovate-enabled-dark_green)](https://github.com/kelektiv/node-cron/issues/718)\n[![OpenSSF Scorecard](https://img.shields.io/ossf-scorecard/github.com/kelektiv/node-cron?label=openssf%20scorecard)](https://securityscorecards.dev/viewer/?uri=github.com/kelektiv/node-cron)\n[![Discord](https://img.shields.io/discord/1075597081017851934?logo=discord)](https://discord.gg/yyKns29zch)\n\n## \ud83c\udf1f Features\n\n- execute a function whenever your scheduled job triggers\n- execute a job external to the javascript process (like a system command) using `child_process`\n- use a Date or Luxon DateTime object instead of cron syntax as the trigger for your callback\n- use an additional slot for seconds (leaving it off will default to 0 and match the Unix behavior)\n\n## \ud83d\ude80 Installation\n\n```bash\nnpm install cron\n```\n\n## Table of Contents\n\n1. [Features](#-features)\n2. [Installation](#-installation)\n3. [Migrating from v2 to v3](#-migrating-from-v2-to-v3)\n4. [Basic Usage](#-basic-usage)\n5. [Cron Patterns](#cron-patterns)\n   - [Cron Syntax Overview](#cron-patterns)\n   - [Supported Ranges](#supported-ranges)\n6. [Gotchas](#gotchas)\n7. [API](#api)\n   - [Standalone Functions](#standalone-functions)\n   - [CronJob Class](#cronjob-class)\n   - [CronTime Class](#crontime-class)\n8. [Community](#-community)\n   - [Join the Community](#-community)\n9. [Contributing](#-contributing)\n   - [General Contribution](#-contributing)\n   - [Submitting Bugs/Issues](#-submitting-bugsissues)\n10. [Acknowledgements](#-acknowledgements)\n11. [License](#license)\n\n## \ud83d\udd04 Migrating from v2 to v3\n\nWith the introduction of TypeScript in version 3 and alignment with UNIX cron patterns, a few changes have been made:\n\n<details>\n  <summary>Migrating from v2 to v3</summary>\n\n### Month & day-of-week indexing changes\n\n- **Month Indexing:** Changed from `0-11` to `1-12`. So you need to increment all numeric months by 1.\n\n- **Day-of-Week Indexing:** Support added for `7` as Sunday.\n\n### Adjustments in `CronJob`\n\n- The constructor no longer accepts an object as its first and only params. Use `CronJob.from(argsObject)` instead.\n- Callbacks are now called in the order they were registered.\n- `nextDates(count?: number)` now always returns an array (empty if no argument is provided). Use `nextDate()` instead for a single date.\n\n### Removed methods\n\n- removed `job()` method in favor of `new CronJob(...args)` / `CronJob.from(argsObject)`\n\n- removed `time()` method in favor of `new CronTime()`\n\n</details>\n\n## \ud83d\udee0 Basic Usage\n\n```javascript\nimport { CronJob } from 'cron';\n\nconst job = new CronJob(\n\t'* * * * * *', // cronTime\n\tfunction () {\n\t\tconsole.log('You will see this message every second');\n\t}, // onTick\n\tnull, // onComplete\n\ttrue, // start\n\t'America/Los_Angeles' // timeZone\n);\n// job.start() is optional here because of the fourth parameter set to true.\n```\n\n```javascript\n// equivalent job using the \"from\" static method, providing parameters as an object\nconst job = CronJob.from({\n\tcronTime: '* * * * * *',\n\tonTick: function () {\n\t\tconsole.log('You will see this message every second');\n\t},\n\tstart: true,\n\ttimeZone: 'America/Los_Angeles'\n});\n```\n\n> **Note:** In the first example above, the fourth parameter to `CronJob()` starts the job automatically. If not provided or set to falsy, you must explicitly start the job using `job.start()`.\n\nFor more advanced examples, check the [examples directory](https://github.com/kelektiv/node-cron/tree/main/examples).\n\n## Cron Patterns\n\nCron patterns are the backbone of this library. Familiarize yourself with the syntax:\n\n```\n- `*` Asterisks: Any value\n- `1-3,5` Ranges: Ranges and individual values\n- `*/2` Steps: Every two units\n```\n\nDetailed patterns and explanations are available at [crontab.org](http://crontab.org). The examples in the link have five fields, and 1 minute as the finest granularity, but our cron scheduling supports an enhanced format with six fields, allowing for second-level precision. Tools like [crontab.guru](https://crontab.guru/) can help in constructing patterns but remember to account for the seconds field.\n\n### Supported Ranges\n\nHere's a quick reference to the UNIX Cron format this library uses, plus an added second field:\n\n```\nfield          allowed values\n-----          --------------\nsecond         0-59\nminute         0-59\nhour           0-23\nday of month   1-31\nmonth          1-12 (or names, see below)\nday of week    0-7 (0 or 7 is Sunday, or use names)\n```\n\n> Names can also be used for the 'month' and 'day of week' fields. Use the first three letters of the particular day or month (case does not matter). Ranges and lists of names are allowed.  \n> Examples: \"mon,wed,fri\", \"jan-mar\".\n\n## Gotchas\n\n- Both JS `Date` and Luxon `DateTime` objects don't guarantee millisecond precision due to computation delays. This module excludes millisecond precision for standard cron syntax but allows execution date specification through JS `Date` or Luxon `DateTime` objects. However, specifying a precise future execution time, such as adding a millisecond to the current time, may not always work due to these computation delays. It's observed that delays less than 4-5 ms might lead to inconsistencies. While we could limit all date granularity to seconds, we've chosen to allow greater precision but advise users of potential issues.\n\n- Using arrow functions for `onTick` binds them to the parent's `this` context. As a result, they won't have access to the cronjob's `this` context. You can read a little more in issue [#47 (comment)](https://github.com/kelektiv/node-cron/issues/47#issuecomment-459762775).\n\n## API\n\n### Standalone Functions\n\n- `sendAt`: Indicates when a `CronTime` will execute (returns a Luxon `DateTime` object).\n\n  ```javascript\n  import * as cron from 'cron';\n\n  const dt = cron.sendAt('0 0 * * *');\n  console.log(`The job would run at: ${dt.toISO()}`);\n  ```\n\n- `timeout`: Indicates the number of milliseconds in the future at which a `CronTime` will execute (returns a number).\n\n  ```javascript\n  import * as cron from 'cron';\n\n  const timeout = cron.timeout('0 0 * * *');\n  console.log(`The job would run in ${timeout}ms`);\n  ```\n\n### CronJob Class\n\n#### Constructor\n\n`constructor(cronTime, onTick, onComplete, start, timeZone, context, runOnInit, utcOffset, unrefTimeout)`:\n\n- `cronTime`: [REQUIRED] - The time to fire off your job. Can be cron syntax, a JS [`Date`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date) object or a Luxon [`DateTime`](https://moment.github.io/luxon/api-docs/index.html#datetime) object.\n\n- `onTick`: [REQUIRED] - Function to execute at the specified time. If an `onComplete` callback was provided, `onTick` will receive it as an argument.\n\n- `onComplete`: [OPTIONAL] - Invoked when the job is halted with `job.stop()`. It might also be triggered by `onTick` post its run.\n\n- `start`: [OPTIONAL] - Determines if the job should commence before constructor exit. Default is `false`.\n\n- `timeZone`: [OPTIONAL] - Sets the execution time zone. Default is local time. Check valid formats in the [Luxon documentation](https://github.com/moment/luxon/blob/master/docs/zones.md#specifying-a-zone).\n\n- `context`: [OPTIONAL] - Execution context for the onTick method.\n\n- `runOnInit`: [OPTIONAL] - Instantly triggers the `onTick` function post initialization. Default is `false`.\n\n- `utcOffset`: [OPTIONAL] - Specifies time zone offset in minutes. Cannot co-exist with `timeZone`.\n\n- `unrefTimeout`: [OPTIONAL] - Useful for controlling event loop behavior. More details [here](https://nodejs.org/api/timers.html#timers_timeout_unref).\n\n- `waitForCompletion`: [OPTIONAL] - If `true`, no additional instances of the `onTick` callback function will run until the current onTick callback has completed. Any new scheduled executions that occur while the current callback is running will be skipped entirely. Default is `false`.\n\n- `errorHandler`: [OPTIONAL] - Function to handle any exceptions that occur in the `onTick` method.\n\n#### Methods\n\n- `from` (static): Create a new CronJob object providing arguments as an object. See argument names and descriptions above.\n\n- `start`: Initiates the job.\n\n- `stop`: Halts the job.\n\n- `setTime`: Modifies the time for the `CronJob`. Parameter must be a `CronTime`.\n\n- `lastDate`: Provides the last execution date.\n\n- `nextDate`: Indicates the subsequent date that will activate an `onTick`.\n\n- `nextDates(count)`: Supplies an array of upcoming dates that will initiate an `onTick`.\n\n- `fireOnTick`: Allows modification of the `onTick` calling behavior.\n\n- `addCallback`: Permits addition of `onTick` callbacks.\n\n#### Properties\n\n- `isCallbackRunning`: [READ-ONLY] Indicates if a callback is currently executing.\n\n  ```javascript\n  const job = new CronJob('* * * * * *', async () => {\n  \tconsole.log(job.isCallbackRunning); // true during callback execution\n  \tawait someAsyncTask();\n  \tconsole.log(job.isCallbackRunning); // still true until callback completes\n  });\n\n  console.log(job.isCallbackRunning); // false\n  job.start();\n  console.log(job.running); // true (schedule is active)\n  console.log(job.isCallbackRunning); // false (no callback executing)\n  ```\n\n### CronTime Class\n\n#### Constructor\n\n`constructor(time, zone, utcOffset)`:\n\n- `time`: [REQUIRED] - The time to initiate your job. Accepts cron syntax or a JS [Date](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date) object.\n\n- `zone`: [OPTIONAL] - Equivalent to `timeZone` from `CronJob` parameters.\n\n- `utcOffset`: [OPTIONAL] - Analogous to `utcOffset` from `CronJob` parameters.\n\n## \ud83e\udd1d Community\n\nJoin the [Discord server](https://discord.gg/yyKns29zch)! Here you can discuss issues and get help in a more casual forum than GitHub.\n\n## \ud83c\udf0d Contributing\n\nThis project is looking for help! If you're interested in helping with the project, please take a look at our [contributing documentation](https://github.com/kelektiv/node-cron/blob/main/CONTRIBUTING.md).\n\n### \ud83d\udc1b Submitting Bugs/Issues\n\nPlease have a look at our [contributing documentation](https://github.com/kelektiv/node-cron/blob/main/CONTRIBUTING.md), it contains all the information you need to know before submitting an issue.\n\n## \ud83d\ude4f Acknowledgements\n\nThis is a community effort project. In the truest sense, this project started as an open source project from [cron.js](http://github.com/padolsey/cron.js) and grew into something else. Other people have contributed code, time, and oversight to the project. At this point there are too many to name here so we'll just say thanks.\n\nSpecial thanks to [Hiroki Horiuchi](https://github.com/horiuchi), [Lundarl Gholoi](https://github.com/winup) and [koooge](https://github.com/koooge) for their work on the [DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped) typings before they were imported in v2.4.0.\n\n## License\n\nMIT\n",
        "releases": [
            {
                "name": "v3.5.0",
                "date": "2025-01-10T12:08:31Z"
            },
            {
                "name": "v3.4.0",
                "date": "2025-01-09T07:31:45Z"
            },
            {
                "name": "v3.3.2",
                "date": "2024-12-30T16:42:36Z"
            },
            {
                "name": "v3.3.2-beta.1",
                "date": "2024-12-27T23:55:41Z"
            },
            {
                "name": "v3.3.1",
                "date": "2024-12-12T02:04:49Z"
            },
            {
                "name": "v3.3.0",
                "date": "2024-12-10T00:31:01Z"
            },
            {
                "name": "v3.2.1",
                "date": "2024-11-12T17:24:05Z"
            },
            {
                "name": "v3.2.0",
                "date": "2024-11-12T02:44:45Z"
            },
            {
                "name": "v3.1.9",
                "date": "2024-11-04T19:36:30Z"
            },
            {
                "name": "v3.1.8",
                "date": "2024-10-29T15:37:11Z"
            },
            {
                "name": "v3.1.7",
                "date": "2024-04-08T21:00:23Z"
            },
            {
                "name": "v3.1.6",
                "date": "2023-10-29T17:35:54Z"
            },
            {
                "name": "v3.1.5",
                "date": "2023-10-26T18:37:56Z"
            },
            {
                "name": "v3.1.4",
                "date": "2023-10-24T00:08:43Z"
            },
            {
                "name": "v3.1.3",
                "date": "2023-10-19T17:23:32Z"
            },
            {
                "name": "v3.1.2",
                "date": "2023-10-19T10:48:43Z"
            },
            {
                "name": "v3.1.1",
                "date": "2023-10-12T22:38:29Z"
            },
            {
                "name": "v3.1.0",
                "date": "2023-10-09T12:46:21Z"
            },
            {
                "name": "v3.0.0",
                "date": "2023-09-30T00:41:06Z"
            },
            {
                "name": "v3.0.0-beta.9",
                "date": "2023-09-29T22:55:56Z"
            },
            {
                "name": "v3.0.0-beta.8",
                "date": "2023-09-26T19:33:45Z"
            },
            {
                "name": "v3.0.0-beta.7",
                "date": "2023-09-26T19:21:48Z"
            },
            {
                "name": "v3.0.0-beta.6",
                "date": "2023-09-26T18:17:39Z"
            },
            {
                "name": "v3.0.0-beta.5",
                "date": "2023-09-25T14:39:53Z"
            },
            {
                "name": "v2.4.4",
                "date": "2023-09-25T14:26:42Z"
            },
            {
                "name": "v3.0.0-beta.4",
                "date": "2023-09-10T15:16:06Z"
            },
            {
                "name": "v2.4.3",
                "date": "2023-08-26T16:46:17Z"
            },
            {
                "name": "v2.4.2",
                "date": "2023-08-26T16:21:02Z"
            },
            {
                "name": "v3.0.0-beta.3",
                "date": "2023-08-15T21:33:37Z"
            },
            {
                "name": "v3.0.0-beta.2",
                "date": "2023-08-15T17:09:19Z"
            },
            {
                "name": "v2.4.1",
                "date": "2023-08-14T22:17:53Z"
            },
            {
                "name": "v2.4.0",
                "date": "2023-07-24T17:05:20Z"
            },
            {
                "name": "v2.3.1",
                "date": "2023-07-24T17:17:06Z"
            },
            {
                "name": "v3.0.0-beta.1",
                "date": "2023-07-23T10:23:37Z"
            },
            {
                "name": "Minor version bump for refactoring get next date function and small bug fixes",
                "date": "2023-03-14T19:53:01Z"
            }
        ]
    }
}