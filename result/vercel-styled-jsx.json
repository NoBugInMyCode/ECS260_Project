{
    "https://api.github.com/repos/vercel/styled-jsx": {
        "forks": 263,
        "watchers": 7745,
        "stars": 7745,
        "languages": {
            "JavaScript": 102414,
            "TypeScript": 28
        },
        "commits": [
            "2024-12-27T15:53:59Z",
            "2024-07-12T22:06:34Z",
            "2024-05-24T20:36:07Z",
            "2024-05-24T16:57:38Z",
            "2024-05-24T15:37:21Z",
            "2024-05-07T22:15:28Z",
            "2024-05-07T22:13:27Z",
            "2023-10-10T15:06:16Z",
            "2023-01-25T00:03:00Z",
            "2022-12-15T23:57:54Z",
            "2022-12-14T11:15:11Z",
            "2022-10-17T22:40:15Z",
            "2022-09-09T18:51:34Z",
            "2022-09-05T17:50:21Z",
            "2022-09-02T00:30:03Z",
            "2022-09-02T00:21:38Z",
            "2022-08-15T18:29:04Z",
            "2022-08-15T18:14:45Z",
            "2022-08-11T14:17:47Z",
            "2022-08-09T01:28:27Z",
            "2022-08-07T16:19:19Z",
            "2022-07-18T15:18:46Z",
            "2022-04-26T13:53:28Z",
            "2022-03-28T17:23:36Z",
            "2022-03-28T10:49:10Z",
            "2022-03-28T10:45:18Z",
            "2022-03-13T19:51:25Z",
            "2022-01-20T22:06:17Z",
            "2022-01-20T21:36:59Z",
            "2022-01-20T21:04:14Z"
        ],
        "creation_date": "2016-12-05T13:58:02Z",
        "contributors": 30,
        "topics": [
            "css",
            "css-in-js",
            "dynamic-styles",
            "jsx",
            "react",
            "shadow-dom"
        ],
        "subscribers": 98,
        "readme": "# styled-jsx\n\n[![build status](https://github.com/vercel/styled-jsx/actions/workflows/main.yml/badge.svg?branch=main)](https://github.com/vercel/styled-jsx/actions?query=branch%3Amain)\n\nFull, scoped and component-friendly CSS support for JSX (rendered on the server or the client).\n\nCode and docs are for v3 which we highly recommend you to try. Looking for styled-jsx v2? Switch to the [v2 branch](https://github.com/vercel/styled-jsx/tree/v2).\n\n- [Getting started](#getting-started)\n- [Configuration options](#configuration-options)\n  - [`optimizeForSpeed`](#optimizeforspeed)\n  - [`sourceMaps`](#sourcemaps)\n  - [`styleModule`](#stylemodule)\n  - [`vendorPrefixes`](#vendorprefixes)\n- [Features](#features)\n- [How It Works](#how-it-works)\n  - [Why It Works Like This](#why-it-works-like-this)\n- [Targeting The Root](#targeting-the-root)\n- [Global styles](#global-styles)\n  - [One-off global selectors](#one-off-global-selectors)\n- [Dynamic styles](#dynamic-styles)\n  - [Via interpolated dynamic props](#via-interpolated-dynamic-props)\n  - [Via `className` toggling](#via-classname-toggling)\n  - [Via inline `style`](#via-inline-style)\n- [Constants](#constants)\n- [Server-Side Rendering](#server-side-rendering)\n- [External CSS and styles outside of the component](#external-css-and-styles-outside-of-the-component)\n  - [External styles](#external-styles)\n  - [Styles outside of components](#styles-outside-of-components)\n  - [The `resolve` tag](#the-resolve-tag)\n  - [Styles in regular CSS files](#styles-in-regular-css-files)\n- [CSS Preprocessing via Plugins](#css-preprocessing-via-plugins)\n  - [Plugin options](#plugin-options)\n  - [Example plugins](#example-plugins)\n- [Rendering in tests](#rendering-in-tests)\n- [FAQ](#faq)\n  - [Warning: unknown `jsx` prop on &lt;style&gt; tag](#warning-unknown-jsx-prop-on-style-tag)\n  - [Can I return an array of components when using React 16?](#can-i-return-an-array-of-components-when-using-react-16)\n  - [Styling third parties / child components from the parent](#styling-third-parties--child-components-from-the-parent)\n  - [Some styles are missing in production](https://github.com/vercel/styled-jsx/issues/319#issuecomment-349239326)\n  - [Build a component library with styled-jsx](#build-a-component-library-with-styled-jsx)\n- [Syntax Highlighting](#syntax-highlighting)\n- [ESLint](#eslint)\n- [TypeScript](#typescript)\n- [Credits](#credits)\n\n## Getting started\n\nFirstly, install the package:\n\n```bash\nnpm install --save styled-jsx\n```\n\nNext, add `styled-jsx/babel` to `plugins` in your babel configuration:\n\n```json\n{\n  \"plugins\": [\"styled-jsx/babel\"]\n}\n```\n\nNow add `<style jsx>` to your code and fill it with CSS:\n\n```jsx\nexport default () => (\n  <div>\n    <p>only this paragraph will get the style :)</p>\n\n    {/* you can include <Component />s here that include\n         other <p>s that don't get unexpected styles! */}\n\n    <style jsx>{`\n      p {\n        color: red;\n      }\n    `}</style>\n  </div>\n)\n```\n\n## Configuration options\n\nThe following are optional settings for the babel plugin.\n\n#### `optimizeForSpeed`\n\nBlazing fast and optimized CSS rules injection system based on the CSSOM APIs.\n\n```json\n{\n  \"plugins\": [[\"styled-jsx/babel\", { \"optimizeForSpeed\": true }]]\n}\n```\n\nWhen in production\\* this mode is automatically enabled.<br>\nBeware that when using this option source maps cannot be generated and styles cannot be edited via the devtools.\n\n\\* `process.env.NODE_ENV === 'production'`\n\n#### `sourceMaps`\n\nGenerates source maps (default: `false`)\n\n#### `styleModule`\n\nModule that the transpiled files should import (default: `styled-jsx/style`)\n\n#### `vendorPrefixes`\n\nTurn on/off automatic vendor prefixing (default: `true`)\n\n## Features\n\n- Full CSS support, no tradeoffs in power\n- Runtime size of just **3kb** (gzipped, from 12kb)\n- Complete isolation: Selectors, animations, keyframes\n- Built-in CSS vendor prefixing\n- Very fast, minimal and efficient transpilation (see below)\n- High-performance runtime-CSS-injection when not server-rendering\n- Future-proof: Equivalent to server-renderable \"Shadow CSS\"\n- Source maps support\n- Dynamic styles and themes support\n- CSS Preprocessing via Plugins\n\n## Using in Next.js\n\nNext.js automatically configures `styled-jsx` with babel or swc, you don't have to configure it manually.\n\n## How It Works\n\nThe example above transpiles to the following:\n\n```jsx\nimport _JSXStyle from 'styled-jsx/style'\n\nexport default () => (\n  <div className=\"jsx-123\">\n    <p className=\"jsx-123\">only this paragraph will get the style :)</p>\n    <_JSXStyle id=\"123\">{`p.jsx-123 {color: red;}`}</_JSXStyle>\n  </div>\n)\n```\n\n### Why It Works Like This\n\nUnique classnames give us style encapsulation and `_JSXStyle` is heavily optimized for:\n\n- Injecting styles upon render\n- Only injecting a certain component's style once (even if the component is included multiple times)\n- Removing unused styles\n- Keeping track of styles for server-side rendering\n\n### Targeting The Root\n\nNotice that the outer `<div>` from the example above also gets a `jsx-123` classname. We do this so that\nyou can target the \"root\" element, in the same manner that\n[`:host`](https://web.dev/articles/shadowdom-v1) works with Shadow DOM.\n\nIf you want to target _only_ the host, we suggest you use a class:\n\n```jsx\nexport default () => (\n  <div className=\"root\">\n    <style jsx>{`\n      .root {\n        color: green;\n      }\n    `}</style>\n  </div>\n)\n```\n\n### Global styles\n\nTo skip scoping entirely, you can make the global-ness of your styles\nexplicit by adding _global_.\n\n```jsx\nexport default () => (\n  <div>\n    <style jsx global>{`\n      body {\n        background: red;\n      }\n    `}</style>\n  </div>\n)\n```\n\nThe advantage of using this over `<style>` is twofold: no need\nto use `dangerouslySetInnerHTML` to avoid escaping issues with CSS\nand take advantage of `styled-jsx`'s de-duping system to avoid\nthe global styles being inserted multiple times.\n\n### One-off global selectors\n\nSometimes it's useful to skip selectors scoping. In order to get a one-off global selector we support `:global()`, inspired by [css-modules](https://github.com/css-modules/css-modules).\n\nThis is very useful in order to, for example, generate a _global class_ that\nyou can pass to 3rd-party components. For example, to style\n`react-select` which supports passing a custom class via `optionClassName`:\n\n```jsx\nimport Select from 'react-select'\nexport default () => (\n  <div>\n    <Select optionClassName=\"react-select\" />\n\n    <style jsx>{`\n      /* \"div\" will be prefixed, but \".react-select\" won't */\n\n      div :global(.react-select) {\n        color: red;\n      }\n    `}</style>\n  </div>\n)\n```\n\n### Dynamic styles\n\nTo make a component's visual representation customizable from the outside world there are three options.\n\n#### Via interpolated dynamic props\n\nAny value that comes from the component's `render` method scope is treated as dynamic. This makes it possible to use `props` and `state` for example.\n\n```jsx\nconst Button = props => (\n  <button>\n    {props.children}\n    <style jsx>{`\n      button {\n        padding: ${'large' in props ? '50' : '20'}px;\n        background: ${props.theme.background};\n        color: #999;\n        display: inline-block;\n        font-size: 1em;\n      }\n    `}</style>\n  </button>\n)\n```\n\nNew styles' injection is optimized to perform well at runtime.\n\nThat said when your CSS is mostly static we recommend to split it up in static and dynamic styles and use two separate `style` tags so that, when changing, only the dynamic parts are recomputed/rendered.\n\n```jsx\nconst Button = props => (\n  <button>\n    {props.children}\n    <style jsx>{`\n      button {\n        color: #999;\n        display: inline-block;\n        font-size: 2em;\n      }\n    `}</style>\n    <style jsx>{`\n      button {\n        padding: ${'large' in props ? '50' : '20'}px;\n        background: ${props.theme.background};\n      }\n    `}</style>\n  </button>\n)\n```\n\n#### Via `className` toggling\n\nThe second option is to pass properties that toggle class names.\n\n```jsx\nconst Button = props => (\n  <button className={'large' in props && 'large'}>\n    {props.children}\n    <style jsx>{`\n      button {\n        padding: 20px;\n        background: #eee;\n        color: #999;\n      }\n      .large {\n        padding: 50px;\n      }\n    `}</style>\n  </button>\n)\n```\n\nThen you would use this component as either `<Button>Hi</Button>` or `<Button large>Big</Button>`.\n\n#### Via inline `style`\n\n\\***best for animations**\n\nImagine that you wanted to make the padding in the button above completely customizable. You can override the CSS you configure via inline-styles:\n\n```jsx\nconst Button = ({ padding, children }) => (\n  <button style={{ padding }}>\n    {children}\n    <style jsx>{`\n      button {\n        padding: 20px;\n        background: #eee;\n        color: #999;\n      }\n    `}</style>\n  </button>\n)\n```\n\nIn this example, the padding defaults to the one set in `<style>` (`20`), but the user can pass a custom one via `<Button padding={30}>`.\n\n### Constants\n\nIt is possible to use constants like so:\n\n```jsx\nimport { colors, spacing } from '../theme'\nimport { invertColor } from '../theme/utils'\n\nconst Button = ({ children }) => (\n  <button>\n    {children}\n    <style jsx>{`\n      button {\n        padding: ${spacing.medium};\n        background: ${colors.primary};\n        color: ${invertColor(colors.primary)};\n      }\n    `}</style>\n  </button>\n)\n```\n\nPlease keep in mind that constants defined outside of the component scope are treated as static styles.\n\n## Server-Side Rendering\n\n`styled-jsx` v5 introduced `StyledRegistry` component and `useStyleRegistry` hook to let you scope styles rendering in each SSR render to keep concurrent-safe.\n\n- `registry.styles()` will return the array of react components for style tags.\n- `registry.flush()` can clean the existing styles in the registry, it's optional for SSR when you have a standalone registry for each SSR render.\n\n> Next.js 12 integrates with `styled-jsx` v5 and manages the registry for you.\n\n```jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom/server'\nimport { StyleRegistry, useStyleRegistry } from 'styled-jsx'\nimport App from './app'\n\nfunction Styles() {\n  const registry = useStyleRegistry()\n  const styles = registry.styles()\n  return <>{styles}</>\n}\n\nexport default (req, res) => {\n  const app = ReactDOM.renderToString(<App />)\n  const html = ReactDOM.renderToStaticMarkup(\n    <StyleRegistry>\n      <html>\n        <head>\n          <Styles />\n        </head>\n        <body>\n          <div id=\"root\" dangerouslySetInnerHTML={{ __html: app }} />\n        </body>\n      </html>\n    </StyleRegistry>\n  )\n  res.end('<!doctype html>' + html)\n}\n```\n\nThere's also a new API `createStyleRegistry` that is introduced when you have to create a registry manually. In this way you can operate the registry yourself to extract the rendered styles (`registry.styles()`) or flush them out (`registry.flush()`).\n\n```js\nconst registry = createStyleRegistry()\nconst styles = registry.styles() // access styles\n\nfunction Page() {\n  return (\n    <StyleRegistry registry={registry}>\n      <App />\n    </StyleRegistry>\n  )\n}\n```\n\nBy default `<StyleRegistry />` will use the `registry` from root top `StyleRegistry`, which means there's only one `registry` in the react tree.\n\nIt's **paramount** that you use one of these two functions so that\nthe generated styles can be diffed when the client loads and\nduplicate styles are avoided.\n\n### Content Security Policy\n\nStrict [CSP](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) is supported.\n\nYou should generate a nonce **per request**.\n\n```js\nimport nanoid from 'nanoid'\n\nconst nonce = Buffer.from(nanoid()).toString('base64') //ex: N2M0MDhkN2EtMmRkYi00MTExLWFhM2YtNDhkNTc4NGJhMjA3\n```\n\nYou must then pass a nonce to `registry.styles({ nonce })` **and** set a `<meta property=\"csp-nonce\" content={nonce} />` tag.\n\nYour CSP policy must share the same nonce as well (the header nonce needs to match the html nonce and remain unpredictable).\n`Content-Security-Policy: default-src 'self'; style-src 'self' 'nonce-N2M0MDhkN2EtMmRkYi00MTExLWFhM2YtNDhkNTc4NGJhMjA3';`\n\n### External CSS and styles outside of the component\n\nIn styled-jsx styles can be defined outside of the component's render method or in separate JavaScript modules using the `styled-jsx/css` library. `styled-jsx/css` exports three tags that can be used to tag your styles:\n\n- `css`, the default export, to define scoped styles.\n- `css.global` to define global styles.\n- `css.resolve` to define scoped styles that resolve to the scoped `className` and a `styles` element.\n\n#### External styles\n\nIn an external file:\n\n```js\n/* styles.js */\nimport css from 'styled-jsx/css'\n\n// Scoped styles\nexport const button = css`\n  button {\n    color: hotpink;\n  }\n`\n\n// Global styles\nexport const body = css.global`body { margin: 0; }`\n\n// Resolved styles\nexport const link = css.resolve`a { color: green; }`\n// link.className -> scoped className to apply to `a` elements e.g. jsx-123\n// link.styles -> styles element to render inside of your component\n\n// Works also with default exports\nexport default css`\n  div {\n    color: green;\n  }\n`\n```\n\nYou can then import and use those styles:\n\n```jsx\nimport styles, { button, body } from './styles'\n\nexport default () => (\n  <div>\n    <button>styled-jsx</button>\n    <style jsx>{styles}</style>\n    <style jsx>{button}</style>\n    <style jsx global>\n      {body}\n    </style>\n  </div>\n)\n```\n\nN.B. All the tags except for [`resolve`](#the-resolve-tag) don't support dynamic styles.\n\n`resolve` and `global` can also be imported individually:\n\n```js\nimport { resolve } from 'styled-jsx/css'\nimport { global } from 'styled-jsx/css'\n```\n\nIf you use Prettier we recommend you to use the default `css` export syntax since the tool doesn't support named imports.\n\n#### Styles outside of components\n\nThe `css` tag from `styled-jsx/css` can be also used to define styles in your components files but outside of the component itself. This might help with keeping `render` methods smaller.\n\n```jsx\nimport css from 'styled-jsx/css'\n\nexport default () => (\n  <div>\n    <button>styled-jsx</button>\n    <style jsx>{button}</style>\n  </div>\n)\n\nconst button = css`\n  button {\n    color: hotpink;\n  }\n`\n```\n\nLike in externals styles `css` doesn't work with dynamic styles. If you have dynamic parts you might want to place them inline inside of your component using a regular `<style jsx>` element.\n\n#### The `resolve` tag\n\nThe `resolve` tag from `styled-jsx/css` can be used when you need to scope some CSS - for example, if you need to style nested components from the parent, such as the `Link` component in the example below.\n\nIt works by returning the generated scoped `className` and related `styles`.\n\n```jsx\nimport React from 'react'\nimport Link from 'some-library'\n\nimport css from 'styled-jsx/css'\n\nconst { className, styles } = css.resolve`\n  a { color: green }\n`\n\nexport default () => (\n  <div>\n    {/* use the className */}\n    <Link className={className}>About</Link>\n\n    {/* render the styles for it */}\n    {styles}\n  </div>\n)\n```\n\nThe `resolve` tag also supports dynamic styles, via template string interpolation:\n\n```jsx\nimport React from 'react'\nimport css from 'styled-jsx/css'\n\nfunction getLinkStyles(color) {\n  return css.resolve`\n    a { color: ${color} }\n  `\n}\n\nexport default props => {\n  const { className, styles } = getLinkStyles(props.theme.color)\n\n  return (\n    <div>\n      <Link className={className}>About</Link>\n      {styles}\n    </div>\n  )\n}\n```\n\n#### Using `resolve` as a Babel macro\n\nIf you can't (or would rather not) make changes to your `.babelrc`, the `resolve` tag can be used as a Babel macro, thanks to the [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros) system.\n\nTo set this up, first of all, install `styled-jsx` and `babel-plugin-macros`:\n\n```bash\nnpm i --save styled-jsx\nnpm i --save-dev babel-plugin-macros\n```\n\nNext, add `babel-plugin-macros` to your Babel configuration:\n\n```json\n{\n  \"plugins\": [\"babel-plugin-macros\"]\n}\n```\n\nYou can then use `resolve` by importing it from `styled-jsx/macro`.\n\n```jsx\nimport css from 'styled-jsx/macro'\n\nconst { className, styles } = css.resolve`\n  a { color: green }\n`\n\nexport default () => (\n  <div>\n    <Link className={className}>About</Link>\n    {styles}\n  </div>\n)\n```\n\n##### Usage with [`create-react-app`](https://create-react-app.dev)\n\n[Create React App](https://create-react-app.dev) comes with `babel-plugin-macros` already installed, so the only thing that needs to be done is to install `styled-jsx`:\n\n```bash\nnpm i --save styled-jsx\n```\n\nThen `resolve` can be imported from `styled-jsx/macro` and used the same way as in the example in the [Using `resolve` as a Babel macro](https://github.com/vercel/styled-jsx/blob/main/readme.md#using-resolve-as-a-babel-macro) section above.\n\n#### Styles in regular CSS files\n\nstyled-jsx v3 comes with a webpack loader that lets you write styles in regular `css` files and consume them in React.\n\n```js\nimport styles from '../components/button/styles.css'\n\nexport default () => (\n  <div>\n    <button>styled-jsx</button>\n    <style jsx>{styles}</style>\n  </div>\n)\n```\n\nTo consume the styles in your component you can import them from your CSS file and render them using a `<style jsx>` tag. Remember to add the `global` prop if you want your styles to be global.\n\nTo use this feature you need to register the loader in your webpack config file, before `babel-loader` which will then transpile the styles via `styled-jsx/babel`\n\n```js\nconfig: {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: require('styled-jsx/webpack').loader,\n            options: {\n              type: 'scoped'\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\nThe plugin accepts a `type` option to configure whether the styles should be `scoped`, `global` or `resolve` (see above). By default its values is set to `scoped`. `type` can also be a `function` which takes the `fileName` and the `fileNameQuery` that is being transpiled and must return a valid type.\n\n```js\ntype validTypes = 'scoped' | 'global' | 'resolve'\ntype fileName = string\ntype Options = {|\n  type: validTypes | ((fileName, options) => validTypes)\n|}\n```\n\n```js\nimport styles from './styles.css?type=global'\n\n// webpack\nconfig: {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: require('styled-jsx/webpack').loader,\n            options: {\n              type: (fileName, options) => options.query.type || 'scoped'\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\nThe type can also be set per individual CSS file via CSS comment:\n\n```css\n/* @styled-jsx=scoped */\n\nbutton {\n  color: red;\n}\n```\n\nThe CSS comment option will override the one in the webpack configuration only for this specific file.\n\n##### Next.js\n\nExample of `next.config.js` to integrate `styled-jsx/webpack`:\n\n```js\nmodule.exports = {\n  webpack: (config, { defaultLoaders }) => {\n    config.module.rules.push({\n      test: /\\.css$/,\n      use: [\n        defaultLoaders.babel,\n        {\n          loader: require('styled-jsx/webpack').loader,\n          options: {\n            type: 'scoped'\n          }\n        }\n      ]\n    })\n\n    return config\n  }\n}\n```\n\n## CSS Preprocessing via Plugins\n\nStyles can be preprocessed via plugins.\n\nPlugins are regular JavaScript modules that export a simple function with the following signature:\n\n```ts\nfunction plugin(css: string, options: Object): string\n```\n\nBasically they accept a CSS string in input, optionally modify it and finally return it.\n\nPlugins make it possible to use popular preprocessors like SASS, Less, Stylus, PostCSS or apply custom transformations to the styles at **compile time**.\n\nTo register a plugin add an option `plugins` for `styled-jsx/babel` to your `.babelrc`. `plugins` must be an array of module names or _full_ paths for local plugins.\n\n```json\n{\n  \"plugins\": [\n    [\n      \"styled-jsx/babel\",\n      {\n        \"plugins\": [\n          \"my-styled-jsx-plugin-package\",\n          \"/full/path/to/local/plugin\"\n        ]\n      }\n    ]\n  ]\n}\n```\n\n<details>\n  <summary>Instructions to integrate with Next.js</summary>\n  In order to register styled-jsx plugins in a Next.js app you need to create a custom .babelrc file:\n\n```json\n{\n  \"presets\": [\n    [\n      \"next/babel\",\n      {\n        \"styled-jsx\": {\n          \"plugins\": [\"styled-jsx-plugin-postcss\"]\n        }\n      }\n    ]\n  ]\n}\n```\n\nThis is a fairly new feature so make sure that you using a version of Next.js that supports passing options to `styled-jsx`.\n\n</details>\n<br>\n\nPlugins are applied in definition order left to right before styles are scoped.\n\nIn order to resolve local plugins paths you can use NodeJS' [require.resolve](https://nodejs.org/api/globals.html#globals_require_resolve).\n\nN.B. when applying the plugins styled-jsx replaces template literals expressions with placeholders because otherwise CSS parsers would get invalid CSS E.g.\n\n```css\n/* `ExprNumber` is a number */\n%%styled-jsx-placeholder-ExprNumber%%\n```\n\n**Plugins won't transform expressions** (eg. dynamic styles).\n\nWhen publishing a plugin you may want to add the keywords: `styled-jsx` and `styled-jsx-plugin`.\nWe also encourage you to use the following naming convention for your plugins:\n\n```\nstyled-jsx-plugin-<your-plugin-name>\n```\n\n#### Plugin options\n\nUsers can set plugin options by registering a plugin as an array that contains\nthe plugin path and an options object.\n\n```json\n{\n  \"plugins\": [\n    [\n      \"styled-jsx/babel\",\n      {\n        \"plugins\": [\n          [\"my-styled-jsx-plugin-package\", { \"exampleOption\": true }]\n        ],\n        \"sourceMaps\": true\n      }\n    ]\n  ]\n}\n```\n\nEach plugin receives a `options` object as second argument which contains\nthe babel and user options:\n\n```js\n;(css, options) => {\n  /* ... */\n}\n```\n\nThe `options` object has the following shape:\n\n```js\n{\n  // user options go here\n  // eg. exampleOption: true\n\n  // babel options\n  babel: {\n    sourceMaps: boolean,\n    vendorPrefixes: boolean,\n    isGlobal: boolean,\n    filename: ?string, // defined only when the filename option is passed to Babel, such as when using Babel CLI or Webpack\n    location: { // the original location of the CSS block in the JavaScript file\n      start: {\n        line: number,\n        column: number,\n      },\n      end: {\n        line: number,\n        column: number,\n      }\n    }\n  }\n}\n```\n\n#### Example plugins\n\nThe following plugins are proof of concepts/sample:\n\n- [styled-jsx-plugin-sass](https://github.com/giuseppeg/styled-jsx-plugin-sass)\n- [styled-jsx-plugin-postcss](https://github.com/giuseppeg/styled-jsx-plugin-postcss)\n- [styled-jsx-plugin-stylelint](https://github.com/giuseppeg/styled-jsx-plugin-stylelint)\n- [styled-jsx-plugin-less](https://github.com/erasmo-marin/styled-jsx-plugin-less)\n- [styled-jsx-plugin-stylus](https://github.com/omardelarosa/styled-jsx-plugin-stylus)\n\n## Rendering in tests\n\nIf you're using a tool such as Enzyme, you might want to avoid compiling your styles in test renders. In general, styled-jsx artifacts like `jsx-123` classnames and vendor prefixing are not direct concerns of your component, and they generate a lot of snapshot noise.\n\nOne option is to exclude the `styled-jsx/babel` plugin from the `test` environment using `env` in your Babel config (see [Config Merging options](https://babeljs.io/docs/en/options#config-merging-options)).\n\nBut this can cause noise in your terminal output when rendering:\n\n```\n   console.error node_modules/react-dom/cjs/react-dom.development.js:527\n      Warning: Received `true` for a non-boolean attribute `jsx`.\n```\n\nThe `styled-jsx/babel-test` solves this problem. It simply strips `jsx` attributes from all `<style>` tags. Be sure to target each environment with the appropriate plugin:\n\n```json\n{\n  \"env\": {\n    \"production\": {\n      \"plugins\": [\"styled-jsx/babel\"]\n    },\n    \"development\": {\n      \"plugins\": [\"styled-jsx/babel\"]\n    },\n    \"test\": {\n      \"plugins\": [\"styled-jsx/babel-test\"]\n    }\n  }\n}\n```\n\n#### styled-jsx/css in tests\n\nWhen using `styled-jsx/babel-test`, `styled-jsx/css` throws the following error:\n\n```\nstyled-jsx/css: if you are getting this error it means that your `css` tagged template literals were not transpiled.\n```\n\nto solve this issue you need to mock `styled-jsx/css`. You can find a guide at the following link https://kevinjalbert.com/jest-snapshots-reducing-styled-jsx-noise/\n\n## FAQ\n\n### Warning: unknown `jsx` prop on &lt;style&gt; tag\n\nIf you get this warning it means that your styles were not compiled by styled-jsx.\n\nPlease take a look at your setup and make sure that everything is correct and that the styled-jsx transformation is ran by Babel.\n\n### Can I return an array of components when using React 16?\n\nNo, this feature is not supported. However we support React Fragments, which are available in React `16.2.0` and above.\n\n```jsx\nconst StyledImage = ({ src, alt = '' }) => (\n  <React.Fragment>\n    <img src={src} alt={alt} />\n    <style jsx>{`\n      img {\n        max-width: 100%;\n      }\n    `}</style>\n  </React.Fragment>\n)\n```\n\n### Styling third parties / child components from the parent\n\nWhen the component accepts a `className` (or ad-hoc) prop as a way to allow customizations then you can use [the `resolve` tag from `styled-jsx/css`](#the-resolve-tag).\n\nWhen the component doesn't accept any `className` or doesn't expose any API to customize the component, then your only option is to use `:global()` styles:\n\n```jsx\nexport default () => (\n  <div>\n    <ExternalComponent />\n\n    <style jsx>{`\n      /* \"div\" will be prefixed, but \".nested-element\" won't */\n\n      div > :global(.nested-element) {\n        color: red;\n      }\n    `}</style>\n  </div>\n)\n```\n\nPlease keep in mind that `:global()` styles will affect the entire subtree, so in many cases you may want to be careful and use the children (direct descendant) selector `>`.\n\n### Build a component library with styled-jsx\n\nThere's an [article](https://medium.com/@tomaszmularczyk89/guide-to-building-a-react-components-library-with-rollup-and-styled-jsx-694ec66bd2) explaining how to bundle React components with Rollup and styled-jsx as an external dependency.\n\n## Syntax Highlighting\n\nWhen working with template literals a common drawback is missing syntax highlighting. The following editors currently have support for highlighting CSS inside `<style jsx>` elements.\n\n_If you have a solution for an editor not on the list_ **please [open a PR](https://github.com/vercel/styled-jsx/pull/new/main)** _and let us now._\n\n### Atom\n\nThe [`language-babel`](https://github.com/gandm/language-babel) package for the [Atom editor](https://atom.io/) has an option to [extend the grammar for JavaScript tagged template literals](https://github.com/gandm/language-babel#javascript-tagged-template-literal-grammar-extensions).\n\nAfter [installing the package](https://github.com/gandm/language-babel#installation) add the code below to the appropriate settings entry. In a few moments you should be blessed with proper CSS syntax highlighting. ([source](https://github.com/gandm/language-babel/issues/324))\n\n```\n\"(?<=<style jsx>{)|(?<=<style jsx global>{)|(?<=css)\":source.css.styled\n```\n\n![babel-language settings entry](https://cloud.githubusercontent.com/assets/2313237/22627258/6c97cb68-ebb7-11e6-82e1-60205f8b31e7.png)\n\n### Webstorm/Idea\n\nThe IDE let you inject any language in place with _Inject language or reference_ in an _Intention Actions_ (default _alt+enter_).\nSimply perform the action in the string template and select CSS.\nYou get full CSS highlighting and autocompletion and it will last until you close the IDE.\n\nAdditionally you can use language injection comments to enable all the IDE language features indefinitely using the language comment style:\n\n```jsx\nimport { colors, spacing } from '../theme'\nimport { invertColor } from '../theme/utils'\n\nconst Button = ({ children }) => (\n  <button>\n    {children}\n\n    {/*language=CSS*/}\n    <style jsx>{`\n      button {\n        padding: ${spacing.medium};\n        background: ${colors.primary};\n        color: ${invertColor(colors.primary)};\n      }\n    `}</style>\n  </button>\n)\n```\n\n### Emmet\n\nIf you're using Emmet you can add the following snippet to `~/emmet/snippets-styledjsx.json` This will allow you to expand `style-jsx` to a styled-jsx block.\n\n```json\n{\n  \"html\": {\n    \"snippets\": {\n      \"style-jsx\": \"<style jsx>{`\\n\\t$1\\n`}</style>\"\n    }\n  }\n}\n```\n\n### Syntax Highlighting [Visual Studio Code Extension](https://marketplace.visualstudio.com/items?itemName=Divlo.vscode-styled-jsx-syntax)\n\nLaunch VS Code Quick Open (\u2318+P), paste the following command, and press enter.\n\n```\next install Divlo.vscode-styled-jsx-syntax\n```\n\nIf you use Stylus instead of plain CSS, install [vscode-styled-jsx-stylus](https://marketplace.visualstudio.com/items?itemName=samuelroy.vscode-styled-jsx-stylus) or paste the command below.\n\n```\next install vscode-styled-jsx-stylus\n```\n\n### Autocomplete [Visual Studio Code Extension](https://marketplace.visualstudio.com/items?itemName=Divlo.vscode-styled-jsx-languageserver)\n\nLaunch VS Code Quick Open (\u2318+P), paste the following command, and press enter.\n\n```\next install Divlo.vscode-styled-jsx-languageserver\n```\n\n### Vim\n\nInstall [vim-styled-jsx](https://github.com/alampros/vim-styled-jsx) with your plugin manager of choice.\n\n## ESLint\n\nIf you're using `eslint-plugin-import`, the `css` import will generate errors, being that it's a \"magic\" import (not listed in package.json). To avoid these, simply add the following line to your eslint configuration:\n\n```\n\"settings\": {\"import/core-modules\": [\"styled-jsx/css\"] }\n```\n\n## TypeScript\n\nIf you're using TypeScript, then in order to allow `<style jsx>` tags to be properly understood by it, create a file named \"styled-jsx.d.ts\" anywhere within your project containing the following, or add this line to the top of any single existing .ts file within your project:\n\n```ts\n/// <reference types=\"styled-jsx\" />\n```\n\n> If you're using babel to transform styled-jsx code with TypeScript, you need to specify `\"jsx\": \"preserve\"` in your tsconfig.json to keep the original JSX and let babel parse and transform with styled-jsx babel plugin.\n\n## Credits\n\n- **Pedram Emrouznejad** ([rijs](https://github.com/rijs/fullstack)) suggested attribute selectors over my initial class prefixing idea.\n- **Sunil Pai** ([glamor](https://github.com/threepointone/glamor)) inspired the use of `murmurhash2` (minimal and fast hashing) and an efficient style injection logic.\n- **Sultan Tarimo** built [stylis.js](https://github.com/thysultan), a super fast and tiny CSS parser and compiler.\n- **Max Stoiber** ([styled-components](https://github.com/styled-components)) proved the value of retaining the familiarity of CSS syntax and pointed me to the very efficient [stylis](https://github.com/thysultan/stylis.js) compiler (which we forked to very efficiently append attribute selectors to the user's css)\n- **Yehuda Katz** ([ember](https://github.com/emberjs)) convinced me on Twitter to transpile CSS as an alternative to CSS-in-JS.\n- **Evan You** ([vuejs](https://github.com/vuejs)) discussed his Vue.js CSS transformation with me.\n- **Henry Zhu** ([babel](https://github.com/babel)) helpfully pointed me to some important areas of the babel plugin API.\n\n## Authors\n\n- Guillermo Rauch ([@rauchg](https://twitter.com/rauchg)) - [\u25b2Vercel](https://vercel.com)\n- Naoyuki Kanezawa ([@nkzawa](https://twitter.com/nkzawa)) - [\u25b2Vercel](https://vercel.com)\n- Giuseppe Gurgone ([@giuseppegurgone](https://twitter.com/giuseppegurgone))\n",
        "releases": [
            {
                "name": "v5.1.6",
                "date": "2024-05-24T20:37:12Z"
            },
            {
                "name": "v5.1.5",
                "date": "2024-05-24T16:59:10Z"
            },
            {
                "name": "v5.1.4",
                "date": "2024-05-24T15:38:35Z"
            },
            {
                "name": "v5.1.3",
                "date": "2024-05-07T22:16:29Z"
            },
            {
                "name": "v5.1.2",
                "date": "2023-01-25T00:04:39Z"
            },
            {
                "name": "v5.1.1",
                "date": "2022-12-15T23:59:07Z"
            },
            {
                "name": "v5.1.0",
                "date": "2022-10-17T22:42:14Z"
            },
            {
                "name": "v5.0.7",
                "date": "2022-09-09T18:53:13Z"
            },
            {
                "name": "v5.0.6",
                "date": "2022-09-05T17:52:36Z"
            },
            {
                "name": "v5.0.5",
                "date": "2022-09-02T00:31:20Z"
            },
            {
                "name": "v5.0.4",
                "date": "2022-08-11T14:19:05Z"
            },
            {
                "name": "v5.0.3",
                "date": "2022-08-09T01:29:42Z"
            },
            {
                "name": "v5.0.2",
                "date": "2022-03-28T17:24:48Z"
            },
            {
                "name": "v5.0.1",
                "date": "2022-03-13T19:53:08Z"
            },
            {
                "name": "v5.0.0",
                "date": "2022-01-20T21:10:38Z"
            },
            {
                "name": "v5.0.0-beta.7",
                "date": "2022-01-14T14:14:06Z"
            },
            {
                "name": "v5.0.0-beta.6",
                "date": "2021-12-22T12:59:33Z"
            },
            {
                "name": "v5.0.0-beta.5",
                "date": "2021-12-17T21:49:52Z"
            },
            {
                "name": "v5.0.0-beta.4",
                "date": "2021-11-10T11:19:41Z"
            },
            {
                "name": "v5.0.0-beta.3",
                "date": "2021-10-22T12:45:26Z"
            },
            {
                "name": "v5.0.0-beta.2",
                "date": "2021-09-15T13:09:56Z"
            },
            {
                "name": "v5.0.0-beta.1",
                "date": "2021-09-08T14:47:10Z"
            },
            {
                "name": "v4.0.1",
                "date": "2021-08-30T14:21:35Z"
            },
            {
                "name": "v4.0.0",
                "date": "2021-08-09T15:00:45Z"
            },
            {
                "name": "v4.0.0-alpha.4",
                "date": "2021-08-06T13:35:54Z"
            },
            {
                "name": "v4.0.0-alpha.3",
                "date": "2021-08-06T13:00:56Z"
            },
            {
                "name": "v3.4.7",
                "date": "2021-08-05T16:25:05Z"
            },
            {
                "name": "v4.0.0-alpha.2",
                "date": "2021-08-04T13:21:46Z"
            },
            {
                "name": "v4.0.0-alpha.1",
                "date": "2021-08-04T13:14:40Z"
            },
            {
                "name": "v3.4.6",
                "date": "2021-08-04T11:18:29Z"
            },
            {
                "name": "v3.4.5",
                "date": "2021-08-02T18:50:24Z"
            },
            {
                "name": "v3.4.4",
                "date": "2021-02-16T15:54:45Z"
            },
            {
                "name": "v3.4.3",
                "date": "2021-02-16T15:21:42Z"
            },
            {
                "name": "v3.4.2",
                "date": "2021-02-07T01:18:28Z"
            },
            {
                "name": "v3.4.1",
                "date": "2021-01-15T15:34:13Z"
            },
            {
                "name": "v3.4.0",
                "date": "2021-01-15T12:22:14Z"
            },
            {
                "name": "v3.3.3",
                "date": "2021-01-14T14:14:45Z"
            },
            {
                "name": "v3.3.2",
                "date": "2020-11-17T15:47:02Z"
            },
            {
                "name": "v3.3.1",
                "date": "2020-11-14T02:50:15Z"
            },
            {
                "name": "",
                "date": "2020-05-14T12:40:04Z"
            },
            {
                "name": "",
                "date": "2020-03-14T09:33:56Z"
            },
            {
                "name": "",
                "date": "2020-02-23T10:03:28Z"
            },
            {
                "name": "",
                "date": "2019-02-10T20:46:10Z"
            },
            {
                "name": "",
                "date": "2019-01-16T10:24:07Z"
            },
            {
                "name": "",
                "date": "2018-12-27T08:02:44Z"
            },
            {
                "name": "",
                "date": "2018-11-15T18:20:56Z"
            },
            {
                "name": "",
                "date": "2018-11-07T13:47:38Z"
            },
            {
                "name": "",
                "date": "2018-08-31T12:14:31Z"
            },
            {
                "name": "",
                "date": "2018-08-05T15:10:11Z"
            },
            {
                "name": "",
                "date": "2018-08-05T09:50:31Z"
            },
            {
                "name": "",
                "date": "2018-08-05T09:49:55Z"
            },
            {
                "name": "",
                "date": "2018-02-18T09:05:13Z"
            },
            {
                "name": "",
                "date": "2018-02-07T09:53:09Z"
            },
            {
                "name": "",
                "date": "2018-01-31T09:31:27Z"
            },
            {
                "name": "",
                "date": "2018-01-28T09:57:24Z"
            },
            {
                "name": "",
                "date": "2017-11-30T18:34:50Z"
            },
            {
                "name": "",
                "date": "2017-11-13T20:04:27Z"
            },
            {
                "name": "",
                "date": "2017-11-06T20:03:59Z"
            },
            {
                "name": "",
                "date": "2017-10-18T08:28:23Z"
            },
            {
                "name": "",
                "date": "2017-10-15T20:11:22Z"
            },
            {
                "name": "",
                "date": "2017-10-15T16:17:50Z"
            },
            {
                "name": "",
                "date": "2017-10-10T20:14:13Z"
            },
            {
                "name": "",
                "date": "2017-10-09T16:20:06Z"
            },
            {
                "name": "",
                "date": "2017-10-08T06:58:47Z"
            },
            {
                "name": "",
                "date": "2017-10-07T21:19:10Z"
            },
            {
                "name": "",
                "date": "2017-10-06T18:57:54Z"
            },
            {
                "name": "",
                "date": "2017-10-05T06:43:07Z"
            },
            {
                "name": "",
                "date": "2017-10-04T13:36:07Z"
            },
            {
                "name": "",
                "date": "2017-09-30T06:45:30Z"
            },
            {
                "name": "",
                "date": "2017-09-29T16:39:56Z"
            },
            {
                "name": "",
                "date": "2017-09-26T09:02:23Z"
            },
            {
                "name": "",
                "date": "2017-07-25T07:45:28Z"
            },
            {
                "name": "",
                "date": "2017-07-20T10:49:26Z"
            },
            {
                "name": "",
                "date": "2017-07-03T15:10:27Z"
            },
            {
                "name": "",
                "date": "2017-06-27T06:48:01Z"
            },
            {
                "name": "",
                "date": "2017-06-24T18:28:21Z"
            },
            {
                "name": "1.0.5",
                "date": "2017-06-11T08:25:16Z"
            },
            {
                "name": "",
                "date": "2017-06-04T10:20:31Z"
            },
            {
                "name": "1.0.3",
                "date": "2017-05-31T10:02:54Z"
            },
            {
                "name": "",
                "date": "2017-05-30T18:20:59Z"
            },
            {
                "name": "1.0.1",
                "date": "2017-05-28T19:50:41Z"
            },
            {
                "name": "1.0.0",
                "date": "2017-05-28T06:59:06Z"
            },
            {
                "name": "",
                "date": "2017-02-18T09:19:43Z"
            },
            {
                "name": "",
                "date": "2017-02-16T22:52:15Z"
            },
            {
                "name": "",
                "date": "2017-02-13T21:56:52Z"
            },
            {
                "name": "",
                "date": "2017-02-05T15:36:31Z"
            },
            {
                "name": "",
                "date": "2017-02-02T18:21:44Z"
            },
            {
                "name": "",
                "date": "2017-01-27T18:31:02Z"
            },
            {
                "name": "",
                "date": "2017-01-25T13:40:14Z"
            },
            {
                "name": "",
                "date": "2017-01-21T02:16:38Z"
            },
            {
                "name": "",
                "date": "2017-01-20T18:17:54Z"
            },
            {
                "name": "",
                "date": "2017-01-18T11:25:38Z"
            },
            {
                "name": "",
                "date": "2017-01-16T15:16:58Z"
            },
            {
                "name": "",
                "date": "2017-01-16T01:23:06Z"
            },
            {
                "name": "",
                "date": "2017-01-06T01:18:40Z"
            },
            {
                "name": "",
                "date": "2017-01-06T00:55:02Z"
            },
            {
                "name": "",
                "date": "2016-12-30T07:15:40Z"
            },
            {
                "name": "0.3.0",
                "date": "2016-12-26T18:32:59Z"
            },
            {
                "name": "0.2.4",
                "date": "2016-12-26T00:24:50Z"
            },
            {
                "name": "0.2.3",
                "date": "2016-12-23T21:14:41Z"
            },
            {
                "name": "0.2.2",
                "date": "2016-12-21T03:06:12Z"
            },
            {
                "name": "0.2.1",
                "date": "2016-12-19T18:19:47Z"
            },
            {
                "name": "0.2.0",
                "date": "2016-12-19T18:13:16Z"
            },
            {
                "name": "0.1.3",
                "date": "2016-12-19T15:59:10Z"
            },
            {
                "name": "0.1.2",
                "date": "2016-12-19T14:55:27Z"
            },
            {
                "name": "0.1.1",
                "date": "2016-12-18T23:48:08Z"
            },
            {
                "name": "",
                "date": "2016-12-12T11:06:34Z"
            },
            {
                "name": "",
                "date": "2016-12-07T09:27:51Z"
            },
            {
                "name": "",
                "date": "2016-12-07T09:21:03Z"
            },
            {
                "name": "",
                "date": "2016-12-07T08:16:39Z"
            },
            {
                "name": "",
                "date": "2016-12-06T16:59:31Z"
            },
            {
                "name": "",
                "date": "2016-12-05T17:20:40Z"
            },
            {
                "name": "",
                "date": "2016-12-05T17:20:29Z"
            },
            {
                "name": "",
                "date": "2016-12-05T15:08:53Z"
            }
        ]
    }
}