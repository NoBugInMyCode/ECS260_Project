{
    "https://api.github.com/repos/trello/RxLifecycle": {
        "forks": 637,
        "watchers": 7707,
        "stars": 7707,
        "languages": {
            "Java": 171714,
            "Kotlin": 10600
        },
        "commits": [
            "2020-11-05T20:57:54Z",
            "2020-11-05T19:48:50Z",
            "2020-11-05T19:47:28Z",
            "2020-11-05T18:13:22Z",
            "2020-10-29T15:34:20Z",
            "2020-10-29T14:30:23Z",
            "2020-10-29T14:28:27Z",
            "2020-10-28T18:59:56Z",
            "2020-05-24T12:12:22Z",
            "2020-05-24T11:10:26Z",
            "2020-05-24T01:16:27Z",
            "2020-05-24T00:54:44Z",
            "2020-05-24T01:06:41Z",
            "2020-05-24T00:56:26Z",
            "2020-05-24T00:52:38Z",
            "2020-05-24T00:42:37Z",
            "2020-05-24T00:37:01Z",
            "2020-05-24T00:32:58Z",
            "2020-05-23T20:01:44Z",
            "2020-05-20T18:08:11Z",
            "2020-05-20T17:39:05Z",
            "2020-05-20T17:20:40Z",
            "2020-05-20T17:18:57Z",
            "2019-09-21T23:36:22Z",
            "2019-09-21T20:14:41Z",
            "2019-09-21T20:11:45Z",
            "2019-09-21T18:11:27Z",
            "2019-09-18T14:26:44Z",
            "2019-09-06T05:27:44Z",
            "2019-09-06T05:27:09Z"
        ],
        "creation_date": "2015-07-20T13:32:23Z",
        "contributors": 16,
        "topics": [],
        "subscribers": 202,
        "readme": "# RxLifecycle\n\nThis library allows one to automatically complete sequences based on a second lifecycle stream.\n\nThis capability is useful in Android, where incomplete subscriptions can cause memory leaks.\n\n## Usage\n\nYou must start with an `Observable<T>` representing a lifecycle stream. Then you use `RxLifecycle` to bind\na sequence to that lifecycle.\n\nYou can bind when the lifecycle emits anything:\n\n```java\nmyObservable\n    .compose(RxLifecycle.bind(lifecycle))\n    .subscribe();\n```\n\nOr you can bind to when a specific lifecyle event occurs:\n\n```java\nmyObservable\n    .compose(RxLifecycle.bindUntilEvent(lifecycle, ActivityEvent.DESTROY))\n    .subscribe();\n```\n\nAlternatively, you can let RxLifecycle determine the appropriate time to end the sequence:\n\n```java\nmyObservable\n    .compose(RxLifecycleAndroid.bindActivity(lifecycle))\n    .subscribe();\n```\n\nIt assumes you want to end the sequence in the opposing lifecycle event - e.g., if subscribing during `START`, it will\nterminate on `STOP`. If you subscribe after `PAUSE`, it will terminate at the next destruction event (e.g.,\n`PAUSE` will terminate in `STOP`).\n\n## Providers\n\nWhere do lifecycles come from? Generally, they are provided by an appropriate `LifecycleProvider<T>`. But where are\nthose implemented?\n\nYou have a few options for that:\n\n1. Use rxlifecycle-components and subclass the provided `RxActivity`, `RxFragment`, etc. classes.\n1. Use [Android's lifecycle](https://developer.android.com/topic/libraries/architecture/lifecycle.html) + rxlifecycle-android-lifecycle to generate providers.\n1. Write the implementation yourself.\n\nIf you use rxlifecycle-components, just extend the appropriate class, then use the built-in `bindToLifecycle()` (or `bindUntilEvent()`) methods:\n\n```java\npublic class MyActivity extends RxActivity {\n    @Override\n    public void onResume() {\n        super.onResume();\n        myObservable\n            .compose(bindToLifecycle())\n            .subscribe();\n    }\n}\n```\n\nIf you use rxlifecycle-android-lifecycle, then you just pass your `LifecycleOwner` to `AndroidLifecycle` to generate a provider:\n\n```java\npublic class MyActivity extends LifecycleActivity {\n    private final LifecycleProvider<Lifecycle.Event> provider\n        = AndroidLifecycle.createLifecycleProvider(this);\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        myObservable\n            .compose(provider.bindToLifecycle())\n            .subscribe();\n    }\n}\n```\n\n## Unsubscription\n\nRxLifecycle does not actually unsubscribe the sequence. Instead it terminates the sequence. The way in which\nit does so varies based on the type:\n\n- `Observable`, `Flowable` and `Maybe` - emits `onCompleted()`\n- `Single` and `Completable` - emits `onError(CancellationException)`\n\nIf a sequence requires the `Subscription.unsubscribe()` behavior, then it is suggested that you manually handle\nthe `Subscription` yourself and call `unsubscribe()` when appropriate.\n\n## Kotlin\n\nThe rxlifecycle-kotlin module provides built-in extensions to the base RxJava types:\n\n```kotlin\nmyObservable\n    .bindToLifecycle(myView)\n    .subscribe { }\n\nmyObservable\n    .bindUntilEvent(myRxActivity, STOP)\n    .subscribe { }\n```\n\nThere is an additional rxlifecycle-android-lifecycle-kotlin module to provider extensions to work\nwith `LifecycleOwner`'s.\n\n```kotlin\n\nmyObservable\n    .bindUntilEvent(myLifecycleActivity, ON_STOP)\n    .subscribe { }\n```\n\n## Installation\n\n```gradle\nimplementation 'com.trello.rxlifecycle4:rxlifecycle:4.0.2'\n\n// If you want to bind to Android-specific lifecycles\nimplementation 'com.trello.rxlifecycle4:rxlifecycle-android:4.0.2'\n\n// If you want pre-written Activities and Fragments you can subclass as providers\nimplementation 'com.trello.rxlifecycle4:rxlifecycle-components:4.0.2'\n\n// If you want pre-written support preference Fragments you can subclass as providers\nimplementation 'com.trello.rxlifecycle4:rxlifecycle-components-preference:4.0.2'\n\n// If you want to use Android Lifecycle for providers\nimplementation 'com.trello.rxlifecycle4:rxlifecycle-android-lifecycle:4.0.2'\n\n// If you want to use Kotlin syntax\nimplementation 'com.trello.rxlifecycle4:rxlifecycle-kotlin:4.0.2'\n\n// If you want to use Kotlin syntax with Android Lifecycle\nimplementation 'com.trello.rxlifecycle4:rxlifecycle-android-lifecycle-kotlin:4.0.2'\n```\n\n## License\n\n    Copyright (C) 2016 Trello\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n",
        "releases": [
            {
                "name": "",
                "date": "2020-11-05T20:58:37Z"
            },
            {
                "name": "",
                "date": "2020-10-29T15:35:05Z"
            },
            {
                "name": "",
                "date": "2020-05-24T01:17:22Z"
            },
            {
                "name": "",
                "date": "2019-09-21T23:37:27Z"
            },
            {
                "name": "",
                "date": "2018-10-25T19:36:00Z"
            },
            {
                "name": "",
                "date": "2018-07-29T16:24:40Z"
            },
            {
                "name": "",
                "date": "2017-11-15T20:03:06Z"
            },
            {
                "name": "",
                "date": "2017-09-07T00:23:41Z"
            },
            {
                "name": "",
                "date": "2017-05-27T15:55:01Z"
            },
            {
                "name": "",
                "date": "2016-11-23T14:20:04Z"
            },
            {
                "name": "",
                "date": "2016-11-21T19:47:05Z"
            },
            {
                "name": "",
                "date": "2016-11-03T19:49:00Z"
            },
            {
                "name": "",
                "date": "2016-09-19T15:08:29Z"
            },
            {
                "name": "",
                "date": "2016-08-24T21:01:01Z"
            },
            {
                "name": "",
                "date": "2016-05-11T22:27:24Z"
            },
            {
                "name": "",
                "date": "2016-05-06T14:05:26Z"
            },
            {
                "name": "",
                "date": "2016-02-27T20:50:55Z"
            },
            {
                "name": "",
                "date": "2015-12-10T15:31:27Z"
            },
            {
                "name": "",
                "date": "2015-11-27T20:58:21Z"
            },
            {
                "name": "",
                "date": "2015-09-05T16:12:36Z"
            },
            {
                "name": "",
                "date": "2015-08-19T18:09:57Z"
            },
            {
                "name": "v0.1.0",
                "date": "2015-07-23T20:05:34Z"
            }
        ]
    }
}