{
    "https://api.github.com/repos/DoctorWkt/acwj": {
        "forks": 1063,
        "watchers": 11347,
        "stars": 11347,
        "languages": {
            "C": 7964887,
            "Shell": 156896,
            "Makefile": 63864,
            "Roff": 5754,
            "Assembly": 881,
            "C++": 332
        },
        "commits": [
            "2024-07-18T21:44:34Z",
            "2024-07-18T06:08:50Z",
            "2024-07-18T06:05:14Z",
            "2024-07-18T06:01:33Z",
            "2024-07-18T05:58:52Z",
            "2024-07-18T05:58:14Z",
            "2024-07-18T05:55:24Z",
            "2024-07-18T05:54:08Z",
            "2023-12-09T03:42:20Z",
            "2023-12-09T03:41:15Z",
            "2023-12-09T03:32:21Z",
            "2023-02-10T21:26:49Z",
            "2023-02-08T02:02:51Z",
            "2023-02-08T01:51:25Z",
            "2023-01-08T03:54:34Z",
            "2023-01-07T05:09:26Z",
            "2023-01-07T05:04:31Z",
            "2023-01-07T04:55:01Z",
            "2023-01-07T04:37:53Z",
            "2023-01-07T00:57:43Z",
            "2023-01-06T02:22:51Z",
            "2023-01-06T00:27:18Z",
            "2023-01-06T00:10:24Z",
            "2023-01-05T23:53:51Z",
            "2023-01-05T23:46:19Z",
            "2023-01-05T02:09:45Z",
            "2023-01-05T02:02:29Z",
            "2023-01-05T01:52:24Z",
            "2023-01-05T01:25:22Z",
            "2023-01-05T01:17:01Z"
        ],
        "creation_date": "2019-10-18T08:11:21Z",
        "contributors": 13,
        "topics": [
            "c",
            "compiler",
            "lexical-analysis",
            "parsing"
        ],
        "subscribers": 218,
        "readme": "# A Compiler Writing Journey\n\nIn this Github repository, I'm documenting my journey to write a\nself-compiling compiler for a subset of the C language.\nI'm also writing out the details so that,\nif you want to follow along, there will be an explanation of what\nI did, why, and with some references back to the theory of compilers.\n\nBut not too much theory, I want this to be a practical journey.\n\nHere are the steps I've taken so far:\n\n + [Part  0](00_Introduction/Readme.md):  Introduction to the Journey\n + [Part  1](01_Scanner/Readme.md):       Introduction to Lexical Scanning\n + [Part  2](02_Parser/Readme.md):        Introduction to Parsing\n + [Part  3](03_Precedence/Readme.md):    Operator Precedence\n + [Part  4](04_Assembly/Readme.md):      An Actual Compiler\n + [Part  5](05_Statements/Readme.md):    Statements\n + [Part  6](06_Variables/Readme.md):     Variables\n + [Part  7](07_Comparisons/Readme.md):   Comparison Operators\n + [Part  8](08_If_Statements/Readme.md): If Statements\n + [Part  9](09_While_Loops/Readme.md):   While Loops\n + [Part 10](10_For_Loops/Readme.md):     For Loops\n + [Part 11](11_Functions_pt1/Readme.md): Functions, part 1\n + [Part 12](12_Types_pt1/Readme.md):     Types, part 1\n + [Part 13](13_Functions_pt2/Readme.md): Functions, part 2\n + [Part 14](14_ARM_Platform/Readme.md):  Generating ARM Assembly Code\n + [Part 15](15_Pointers_pt1/Readme.md):  Pointers, part 1\n + [Part 16](16_Global_Vars/Readme.md):   Declaring Global Variables Properly\n + [Part 17](17_Scaling_Offsets/Readme.md): Better Type Checking and Pointer Offsets\n + [Part 18](18_Lvalues_Revisited/Readme.md): Lvalues and Rvalues Revisited\n + [Part 19](19_Arrays_pt1/Readme.md):    Arrays, part 1\n + [Part 20](20_Char_Str_Literals/Readme.md): Character and String Literals\n + [Part 21](21_More_Operators/Readme.md): More Operators\n + [Part 22](22_Design_Locals/Readme.md): Design Ideas for Local Variables and Function Calls\n + [Part 23](23_Local_Variables/Readme.md): Local Variables\n + [Part 24](24_Function_Params/Readme.md): Function Parameters\n + [Part 25](25_Function_Arguments/Readme.md): Function Calls and Arguments\n + [Part 26](26_Prototypes/Readme.md):    Function Prototypes\n + [Part 27](27_Testing_Errors/Readme.md): Regression Testing and a Nice Surprise\n + [Part 28](28_Runtime_Flags/Readme.md): Adding More Run-time Flags\n + [Part 29](29_Refactoring/Readme.md):   A Bit of Refactoring\n + [Part 30](30_Design_Composites/Readme.md): Designing Structs, Unions and Enums\n + [Part 31](31_Struct_Declarations/Readme.md): Implementing Structs, Part 1\n + [Part 32](32_Struct_Access_pt1/Readme.md): Accessing Members in a Struct\n + [Part 33](33_Unions/Readme.md):        Implementing Unions and Member Access\n + [Part 34](34_Enums_and_Typedefs/Readme.md): Enums and Typedefs\n + [Part 35](35_Preprocessor/Readme.md):  The C Pre-Processor\n + [Part 36](36_Break_Continue/Readme.md): `break` and `continue`\n + [Part 37](37_Switch/Readme.md):        Switch Statements\n + [Part 38](38_Dangling_Else/Readme.md): Dangling Else and More\n + [Part 39](39_Var_Initialisation_pt1/Readme.md): Variable Initialisation, part 1\n + [Part 40](40_Var_Initialisation_pt2/Readme.md): Global Variable Initialisation\n + [Part 41](41_Local_Var_Init/Readme.md): Local Variable Initialisation\n + [Part 42](42_Casting/Readme.md):       Type Casting and NULL\n + [Part 43](43_More_Operators/Readme.md): Bugfixes and More Operators\n + [Part 44](44_Fold_Optimisation/Readme.md): Constant Folding\n + [Part 45](45_Globals_Again/Readme.md): Global Variable Declarations, revisited\n + [Part 46](46_Void_Functions/Readme.md): Void Function Parameters and Scanning Changes\n + [Part 47](47_Sizeof/Readme.md):        A Subset of `sizeof`\n + [Part 48](48_Static/Readme.md):        A Subset of `static`\n + [Part 49](49_Ternary/Readme.md):       The Ternary Operator\n + [Part 50](50_Mop_up_pt1/Readme.md):    Mopping Up, part 1\n + [Part 51](51_Arrays_pt2/Readme.md):    Arrays, part 2\n + [Part 52](52_Pointers_pt2/Readme.md):  Pointers, part 2\n + [Part 53](53_Mop_up_pt2/Readme.md):    Mopping Up, part 2\n + [Part 54](54_Reg_Spills/Readme.md):    Spilling Registers\n + [Part 55](55_Lazy_Evaluation/Readme.md): Lazy Evaluation\n + [Part 56](56_Local_Arrays/Readme.md):  Local Arrays\n + [Part 57](57_Mop_up_pt3/Readme.md):    Mopping Up, part 3\n + [Part 58](58_Ptr_Increments/Readme.md): Fixing Pointer Increments/Decrements\n + [Part 59](59_WDIW_pt1/Readme.md):      Why Doesn't It Work, part 1\n + [Part 60](60_TripleTest/Readme.md):    Passing the Triple Test\n + [Part 61](61_What_Next/Readme.md):     What's Next?\n + [Part 62](62_Cleanup/Readme.md):       Code Cleanup\n + [Part 63](63_QBE/Readme.md):           A New Backend using QBE\n + [Part 64](64_6809_Target/Readme.md):   A Backend for the 6809 CPU\n\nThere isn't a schedule or timeline for the future parts, so\njust keep checking back here to see if I've written any more.\n\n## Copyrights\n\nI have borrowed some of the code, and lots of ideas, from the \n[SubC](http://www.t3x.org/subc/) compiler written by Nils M Holm.\nHis code is in the public domain. I think that my code is substantially\ndifferent enough that I can apply a different license to my code.\n\nUnless otherwise noted,\n\n + all source code and scripts are (c) Warren Toomey under\n   the GPL3 license.\n + all non-source code documents (e.g. English documents,\n   image files) are (c) Warren Toomey under the Creative\n   Commons BY-NC-SA 4.0 license.\n",
        "releases": []
    }
}