{
    "https://api.github.com/repos/webmozarts/assert": {
        "forks": 148,
        "watchers": 7581,
        "stars": 7581,
        "languages": {
            "PHP": 326834
        },
        "commits": [
            "2024-11-19T17:25:59Z",
            "2024-10-23T17:26:17Z",
            "2024-10-17T17:49:26Z",
            "2024-10-17T10:53:39Z",
            "2024-10-16T16:27:34Z",
            "2024-10-16T16:05:02Z",
            "2024-10-16T16:04:21Z",
            "2024-10-16T14:24:50Z",
            "2024-10-16T14:18:00Z",
            "2024-10-16T14:10:32Z",
            "2024-10-15T14:41:52Z",
            "2024-10-15T14:38:54Z",
            "2024-10-15T14:33:42Z",
            "2024-10-15T14:28:19Z",
            "2024-10-15T13:53:30Z",
            "2024-10-15T13:52:15Z",
            "2024-10-15T13:51:47Z",
            "2022-06-03T18:03:27Z",
            "2022-06-03T17:44:12Z",
            "2022-06-03T17:43:28Z",
            "2022-04-18T06:42:29Z",
            "2022-04-17T09:28:27Z",
            "2022-04-17T09:24:13Z",
            "2022-04-16T06:28:39Z",
            "2021-06-19T13:45:26Z",
            "2021-05-28T09:10:12Z",
            "2021-05-28T09:02:29Z",
            "2021-05-20T19:29:08Z",
            "2021-05-20T19:22:15Z",
            "2021-03-11T07:08:13Z"
        ],
        "creation_date": "2015-03-11T12:14:36Z",
        "contributors": 30,
        "topics": [
            "hacktoberfest"
        ],
        "subscribers": 32,
        "readme": "Webmozart Assert\n================\n\n[![Latest Stable Version](https://poser.pugx.org/webmozart/assert/v/stable.svg)](https://packagist.org/packages/webmozart/assert)\n[![Total Downloads](https://poser.pugx.org/webmozart/assert/downloads.svg)](https://packagist.org/packages/webmozart/assert)\n\nThis library contains efficient assertions to test the input and output of\nyour methods. With these assertions, you can greatly reduce the amount of coding\nneeded to write a safe implementation.\n\nAll assertions in the [`Assert`] class throw an `Webmozart\\Assert\\InvalidArgumentException` if\nthey fail.\n\nFAQ\n---\n\n**What's the difference to [beberlei/assert]?**\n\nThis library is heavily inspired by Benjamin Eberlei's wonderful [assert package],\nbut fixes a usability issue with error messages that can't be fixed there without\nbreaking backwards compatibility.\n\nThis package features usable error messages by default. However, you can also\neasily write custom error messages:\n\n```\nAssert::string($path, 'The path is expected to be a string. Got: %s');\n```\n\nIn [beberlei/assert], the ordering of the `%s` placeholders is different for\nevery assertion. This package, on the contrary, provides consistent placeholder\nordering for all assertions:\n\n* `%s`: The tested value as string, e.g. `\"/foo/bar\"`.\n* `%2$s`, `%3$s`, ...: Additional assertion-specific values, e.g. the\n  minimum/maximum length, allowed values, etc.\n\nCheck the source code of the assertions to find out details about the additional\navailable placeholders.\n\nInstallation\n------------\n\nUse [Composer] to install the package:\n\n```bash\ncomposer require webmozart/assert\n```\n\nExample\n-------\n\n```php\nuse Webmozart\\Assert\\Assert;\n\nclass Employee\n{\n    public function __construct($id)\n    {\n        Assert::integer($id, 'The employee ID must be an integer. Got: %s');\n        Assert::greaterThan($id, 0, 'The employee ID must be a positive integer. Got: %s');\n    }\n}\n```\n\nIf you create an employee with an invalid ID, an exception is thrown:\n\n```php\nnew Employee('foobar');\n// => Webmozart\\Assert\\InvalidArgumentException:\n//    The employee ID must be an integer. Got: string\n\nnew Employee(-10);\n// => Webmozart\\Assert\\InvalidArgumentException:\n//    The employee ID must be a positive integer. Got: -10\n```\n\nAssertions\n----------\n\nThe [`Assert`] class provides the following assertions:\n\n### Type Assertions\n\nMethod                                                   | Description\n-------------------------------------------------------- | --------------------------------------------------\n`string($value, $message = '')`                          | Check that a value is a string\n`stringNotEmpty($value, $message = '')`                  | Check that a value is a non-empty string\n`integer($value, $message = '')`                         | Check that a value is an integer\n`integerish($value, $message = '')`                      | Check that a value casts to an integer\n`positiveInteger($value, $message = '')`                 | Check that a value is a positive (non-zero) integer\n`float($value, $message = '')`                           | Check that a value is a float\n`numeric($value, $message = '')`                         | Check that a value is numeric\n`natural($value, $message = '')`                         | Check that a value is a non-negative integer\n`boolean($value, $message = '')`                         | Check that a value is a boolean\n`scalar($value, $message = '')`                          | Check that a value is a scalar\n`object($value, $message = '')`                          | Check that a value is an object\n`resource($value, $type = null, $message = '')`          | Check that a value is a resource\n`isCallable($value, $message = '')`                      | Check that a value is a callable\n`isArray($value, $message = '')`                         | Check that a value is an array\n`isTraversable($value, $message = '')`  (deprecated)     | Check that a value is an array or a `\\Traversable`\n`isIterable($value, $message = '')`                      | Check that a value is an array or a `\\Traversable`\n`isCountable($value, $message = '')`                     | Check that a value is an array or a `\\Countable`\n`isInstanceOf($value, $class, $message = '')`            | Check that a value is an `instanceof` a class\n`isInstanceOfAny($value, array $classes, $message = '')` | Check that a value is an `instanceof` at least one class on the array of classes\n`notInstanceOf($value, $class, $message = '')`           | Check that a value is not an `instanceof` a class\n`isAOf($value, $class, $message = '')`                   | Check that a value is of the class or has one of its parents\n`isAnyOf($value, array $classes, $message = '')`         | Check that a value is of at least one of the classes or has one of its parents\n`isNotA($value, $class, $message = '')`                  | Check that a value is not of the class or has not one of its parents\n`isArrayAccessible($value, $message = '')`               | Check that a value can be accessed as an array\n`uniqueValues($values, $message = '')`                   | Check that the given array contains unique values\n\n### Comparison Assertions\n\nMethod                                          | Description\n----------------------------------------------- | ------------------------------------------------------------------\n`true($value, $message = '')`                   | Check that a value is `true`\n`false($value, $message = '')`                  | Check that a value is `false`\n`notFalse($value, $message = '')`               | Check that a value is not `false`\n`null($value, $message = '')`                   | Check that a value is `null`\n`notNull($value, $message = '')`                | Check that a value is not `null`\n`isEmpty($value, $message = '')`                | Check that a value is `empty()`\n`notEmpty($value, $message = '')`               | Check that a value is not `empty()`\n`eq($value, $value2, $message = '')`            | Check that a value equals another (`==`)\n`notEq($value, $value2, $message = '')`         | Check that a value does not equal another (`!=`)\n`same($value, $value2, $message = '')`          | Check that a value is identical to another (`===`)\n`notSame($value, $value2, $message = '')`       | Check that a value is not identical to another (`!==`)\n`greaterThan($value, $value2, $message = '')`   | Check that a value is greater than another\n`greaterThanEq($value, $value2, $message = '')` | Check that a value is greater than or equal to another\n`lessThan($value, $value2, $message = '')`      | Check that a value is less than another\n`lessThanEq($value, $value2, $message = '')`    | Check that a value is less than or equal to another\n`range($value, $min, $max, $message = '')`      | Check that a value is within a range\n`inArray($value, array $values, $message = '')` | Check that a value is one of a list of values\n`oneOf($value, array $values, $message = '')`   | Check that a value is one of a list of values (alias of `inArray`)\n\n### String Assertions\n\nYou should check that a value is a string with `Assert::string()` before making\nany of the following assertions.\n\nMethod                                              | Description\n--------------------------------------------------- | -----------------------------------------------------------------\n`contains($value, $subString, $message = '')`       | Check that a string contains a substring\n`notContains($value, $subString, $message = '')`    | Check that a string does not contain a substring\n`startsWith($value, $prefix, $message = '')`        | Check that a string has a prefix\n`notStartsWith($value, $prefix, $message = '')`     | Check that a string does not have a prefix\n`startsWithLetter($value, $message = '')`           | Check that a string starts with a letter\n`endsWith($value, $suffix, $message = '')`          | Check that a string has a suffix\n`notEndsWith($value, $suffix, $message = '')`       | Check that a string does not have a suffix\n`regex($value, $pattern, $message = '')`            | Check that a string matches a regular expression\n`notRegex($value, $pattern, $message = '')`         | Check that a string does not match a regular expression\n`unicodeLetters($value, $message = '')`             | Check that a string contains Unicode letters only\n`alpha($value, $message = '')`                      | Check that a string contains letters only\n`digits($value, $message = '')`                     | Check that a string contains digits only\n`alnum($value, $message = '')`                      | Check that a string contains letters and digits only\n`lower($value, $message = '')`                      | Check that a string contains lowercase characters only\n`upper($value, $message = '')`                      | Check that a string contains uppercase characters only\n`length($value, $length, $message = '')`            | Check that a string has a certain number of characters\n`minLength($value, $min, $message = '')`            | Check that a string has at least a certain number of characters\n`maxLength($value, $max, $message = '')`            | Check that a string has at most a certain number of characters\n`lengthBetween($value, $min, $max, $message = '')`  | Check that a string has a length in the given range\n`uuid($value, $message = '')`                       | Check that a string is a valid UUID\n`ip($value, $message = '')`                         | Check that a string is a valid IP (either IPv4 or IPv6)\n`ipv4($value, $message = '')`                       | Check that a string is a valid IPv4\n`ipv6($value, $message = '')`                       | Check that a string is a valid IPv6\n`email($value, $message = '')`                      | Check that a string is a valid e-mail address\n`notWhitespaceOnly($value, $message = '')`          | Check that a string contains at least one non-whitespace character\n\n### File Assertions\n\nMethod                              | Description\n----------------------------------- | --------------------------------------------------\n`fileExists($value, $message = '')` | Check that a value is an existing path\n`file($value, $message = '')`       | Check that a value is an existing file\n`directory($value, $message = '')`  | Check that a value is an existing directory\n`readable($value, $message = '')`   | Check that a value is a readable path\n`writable($value, $message = '')`   | Check that a value is a writable path\n\n### Object Assertions\n\nMethod                                                | Description\n----------------------------------------------------- | --------------------------------------------------\n`classExists($value, $message = '')`                  | Check that a value is an existing class name\n`subclassOf($value, $class, $message = '')`           | Check that a class is a subclass of another\n`interfaceExists($value, $message = '')`              | Check that a value is an existing interface name\n`implementsInterface($value, $class, $message = '')`  | Check that a class implements an interface\n`propertyExists($value, $property, $message = '')`    | Check that a property exists in a class/object\n`propertyNotExists($value, $property, $message = '')` | Check that a property does not exist in a class/object\n`methodExists($value, $method, $message = '')`        | Check that a method exists in a class/object\n`methodNotExists($value, $method, $message = '')`     | Check that a method does not exist in a class/object\n\n### Array Assertions\n\nMethod                                             | Description\n-------------------------------------------------- | ------------------------------------------------------------------\n`keyExists($array, $key, $message = '')`           | Check that a key exists in an array\n`keyNotExists($array, $key, $message = '')`        | Check that a key does not exist in an array\n`validArrayKey($key, $message = '')`               | Check that a value is a valid array key (int or string)\n`count($array, $number, $message = '')`            | Check that an array contains a specific number of elements\n`minCount($array, $min, $message = '')`            | Check that an array contains at least a certain number of elements\n`maxCount($array, $max, $message = '')`            | Check that an array contains at most a certain number of elements\n`countBetween($array, $min, $max, $message = '')`  | Check that an array has a count in the given range\n`isList($array, $message = '')`                    | Check that an array is a non-associative list\n`isNonEmptyList($array, $message = '')`            | Check that an array is a non-associative list, and not empty\n`isMap($array, $message = '')`                     | Check that an array is associative and has strings as keys\n`isNonEmptyMap($array, $message = '')`             | Check that an array is associative and has strings as keys, and is not empty\n\n### Function Assertions\n\nMethod                                      | Description\n------------------------------------------- | -----------------------------------------------------------------------------------------------------\n`throws($closure, $class, $message = '')`   | Check that a function throws a certain exception. Subclasses of the exception class will be accepted.\n\n### Collection Assertions\n\nAll of the above assertions can be prefixed with `all*()` to test the contents\nof an array or a `\\Traversable`:\n\n```php\nAssert::allIsInstanceOf($employees, 'Acme\\Employee');\n```\n\n### Nullable Assertions\n\nAll of the above assertions can be prefixed with `nullOr*()` to run the\nassertion only if the value is not `null`:\n\n```php\nAssert::nullOrString($middleName, 'The middle name must be a string or null. Got: %s');\n```\n\n### Extending Assert\n\nThe `Assert` class comes with a few methods, which can be overridden to change the class behaviour. You can also extend it to\nadd your own assertions.\n\n#### Overriding methods\n\nOverriding the following methods in your assertion class allows you to change the behaviour of the assertions:\n\n* `public static function __callStatic($name, $arguments)`\n  * This method is used to 'create' the `nullOr` and `all` versions of the assertions.\n* `protected static function valueToString($value)`\n  * This method is used for error messages, to convert the value to a string value for displaying. You could use this for representing a value object with a `__toString` method for example.\n* `protected static function typeToString($value)`\n  * This method is used for error messages, to convert a value to a string representing its type.\n* `protected static function strlen($value)`\n  * This method is used to calculate string length for relevant methods, using the `mb_strlen` if available and useful.\n* `protected static function reportInvalidArgument($message)`\n  * This method is called when an assertion fails, with the specified error message. Here you can throw your own exception, or log something.\n\n## Static analysis support\n\nWhere applicable, assertion functions are annotated to support Psalm's\n[Assertion syntax](https://psalm.dev/docs/annotating_code/assertion_syntax/).\nA dedicated [PHPStan Plugin](https://github.com/phpstan/phpstan-webmozart-assert) is\nrequired for proper type support.\n\nAuthors\n-------\n\n* [Bernhard Schussek] a.k.a. [@webmozart]\n* [The Community Contributors]\n\nContribute\n----------\n\nContributions to the package are always welcome!\n\n* Report any bugs or issues you find on the [issue tracker].\n* You can grab the source code at the package's [Git repository].\n\nLicense\n-------\n\nAll contents of this package are licensed under the [MIT license].\n\n[beberlei/assert]: https://github.com/beberlei/assert\n[assert package]: https://github.com/beberlei/assert\n[Composer]: https://getcomposer.org\n[Bernhard Schussek]: https://webmozarts.com\n[The Community Contributors]: https://github.com/webmozart/assert/graphs/contributors\n[issue tracker]: https://github.com/webmozart/assert/issues\n[Git repository]: https://github.com/webmozart/assert\n[@webmozart]: https://twitter.com/webmozart\n[MIT license]: LICENSE\n[`Assert`]: src/Assert.php\n",
        "releases": [
            {
                "name": "Release 1.11.0",
                "date": "2022-06-03T18:04:45Z"
            },
            {
                "name": "Release 1.10.0",
                "date": "2021-03-09T11:08:55Z"
            },
            {
                "name": "Release 1.9.1",
                "date": "2020-07-08T17:03:38Z"
            },
            {
                "name": "Release 1.9.0",
                "date": "2020-06-16T10:17:17Z"
            },
            {
                "name": "Release 1.8.0",
                "date": "2020-04-18T12:13:32Z"
            },
            {
                "name": "Release 1.7.0",
                "date": "2020-02-14T12:16:44Z"
            },
            {
                "name": "Release 1.6.0",
                "date": "2019-11-24T13:37:29Z"
            },
            {
                "name": "Release 1.5.0",
                "date": "2019-08-24T08:45:15Z"
            },
            {
                "name": "Release 1.4.0",
                "date": "2018-12-25T11:20:11Z"
            },
            {
                "name": "Release 1.3.0",
                "date": "2018-01-29T20:05:57Z"
            },
            {
                "name": "",
                "date": "2016-11-23T20:07:14Z"
            },
            {
                "name": "",
                "date": "2016-08-09T15:05:08Z"
            },
            {
                "name": "",
                "date": "2015-08-24T13:30:07Z"
            },
            {
                "name": "",
                "date": "2015-05-12T15:20:16Z"
            },
            {
                "name": "",
                "date": "2015-05-12T12:41:58Z"
            },
            {
                "name": "",
                "date": "2015-03-19T11:06:48Z"
            }
        ]
    }
}