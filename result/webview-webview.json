{
    "https://api.github.com/repos/webview/webview": {
        "forks": 967,
        "watchers": 12821,
        "stars": 12821,
        "languages": {
            "C++": 212704,
            "CMake": 41286,
            "C": 22542,
            "Python": 6305,
            "SWIG": 1230
        },
        "commits": [
            "2025-01-21T12:35:45Z",
            "2025-01-09T04:54:48Z",
            "2025-01-09T04:37:24Z",
            "2024-11-27T09:03:40Z",
            "2024-11-14T13:58:55Z",
            "2024-11-14T13:33:28Z",
            "2024-11-14T09:03:36Z",
            "2024-11-13T21:20:24Z",
            "2024-10-10T17:37:27Z",
            "2024-09-30T16:18:09Z",
            "2024-09-29T17:26:36Z",
            "2024-09-29T15:09:04Z",
            "2024-09-28T08:31:31Z",
            "2024-09-28T03:51:15Z",
            "2024-09-26T05:18:48Z",
            "2024-09-25T22:13:52Z",
            "2024-09-21T13:03:14Z",
            "2024-09-21T02:31:48Z",
            "2024-09-21T02:15:41Z",
            "2024-09-12T08:13:16Z",
            "2024-09-11T16:18:58Z",
            "2024-09-11T07:48:50Z",
            "2024-09-11T07:36:35Z",
            "2024-09-09T13:48:28Z",
            "2024-09-04T11:36:52Z",
            "2024-09-01T10:43:03Z",
            "2024-09-01T06:53:07Z",
            "2024-08-29T17:38:55Z",
            "2024-08-29T17:34:09Z",
            "2024-08-29T17:10:12Z"
        ],
        "creation_date": "2017-08-19T08:26:00Z",
        "contributors": 30,
        "topics": [
            "c",
            "cpp",
            "cross-platform",
            "css",
            "gtk",
            "gui",
            "html",
            "javascript",
            "library",
            "single-header-lib",
            "web",
            "webkit",
            "webui",
            "webview",
            "webview2"
        ],
        "subscribers": 222,
        "readme": "# webview\n\n<a href=\"https://discord.gg/24KMecn\" title=\"Join the chat at Discord\"><img src=\"https://assets-global.website-files.com/6257adef93867e50d84d30e2/636e0b5061df29d55a92d945_full_logo_blurple_RGB.svg\" alt=\"Discord\" height=\"20\" /></a>\n[![Build Status](https://img.shields.io/github/actions/workflow/status/webview/webview/ci.yaml?branch=master)](https://github.com/webview/webview/actions)\n\nA tiny cross-platform webview library for C/C++ to build modern cross-platform GUIs.\n\nThe goal of the project is to create a common HTML5 UI abstraction layer for the most widely used platforms.\n\nIt supports two-way JavaScript bindings (to call JavaScript from C/C++ and to call C/C++ from JavaScript).\n\n> [!NOTE]\n> Language binding for Go [has moved][webview_go]. Versions <= 0.1.1 are available in *this* repository.\n\n## Platform Support\n\nPlatform | Technologies\n-------- | ------------\nLinux    | [GTK][gtk], [WebKitGTK][webkitgtk]\nmacOS    | Cocoa, [WebKit][webkit]\nWindows  | [Windows API][win32-api], [WebView2][ms-webview2]\n\n## Documentation\n\nThe most up-to-date documentation is right in the source code. Improving the documentation is a continuous effort and you are more than welcome to contribute.\n\n## Prerequisites\n\nYour compiler must support minimum C++11 except for platforms that require a more modern version.\n\nThis project uses CMake and Ninja, and while recommended for your convenience, these tools aren't required for using the library.\n\n### Linux and BSD\n\nThe [GTK][gtk] and [WebKitGTK][webkitgtk] libraries are required for development and distribution. You need to check your package repositories regarding which packages to install.\n\n#### Packages\n\n* Debian:\n  * WebKitGTK 6.0, GTK 4:\n    * Development: `apt install libgtk-4-dev libwebkitgtk-6.0-dev`\n    * Production: `apt install libgtk-4-1 libwebkitgtk-6.0-4`\n  * WebKitGTK 4.1, GTK 3, libsoup 3:\n    * Development: `apt install libgtk-3-dev libwebkit2gtk-4.1-dev`\n    * Production: `apt install libgtk-3-0 libwebkit2gtk-4.1-0`\n  * WebKitGTK 4.0, GTK 3, libsoup 2:\n    * Development: `apt install libgtk-3-dev libwebkit2gtk-4.0-dev`\n    * Production: `apt install libgtk-3-0 libwebkit2gtk-4.0-37`\n* Fedora:\n  * WebKitGTK 6.0, GTK 4:\n    * Development: `dnf install gtk4-devel webkitgtk6.0-devel`\n    * Production: `dnf install gtk4 webkitgtk6.0`\n  * WebKitGTK 4.1, GTK 3, libsoup 3:\n    * Development: `dnf install gtk3-devel webkit2gtk4.1-devel`\n    * Production: `dnf install gtk3 webkit2gtk4.1`\n  * WebKitGTK 4.0, GTK 3, libsoup 2:\n    * Development: `dnf install gtk3-devel webkit2gtk4.0-devel`\n    * Production: `dnf install gtk3 webkit2gtk4.0`\n* FreeBSD:\n  * GTK 4: `pkg install webkit2-gtk4`\n  * GTK 3: `pkg install webkit2-gtk3`\n\n#### Library Dependencies\n\n* Linux:\n  * Use `pkg-config` with `--cflags` and `--libs` to get the compiler/linker options for one of these sets of modules:\n    * `gtk4 webkitgtk-6.0`\n    * `gtk+-3.0 webkit2gtk-4.1`\n    * `gtk+-3.0 webkit2gtk-4.0`\n  * Link libraries: `dl`\n* macOS:\n  * Link frameworks: `WebKit`\n  * Link libraries: `dl`\n* Windows:\n  * [WebView2 from NuGet](https://www.nuget.org/packages/Microsoft.Web.WebView2).\n  * Windows libraries: `advapi32 ole32 shell32 shlwapi user32 version`\n\n#### BSD\n\n* Execution on BSD-based systems may require adding the `wxallowed` option (see [mount(8)](https://man.openbsd.org/mount.8))  to your fstab to bypass [W^X](https://en.wikipedia.org/wiki/W%5EX \"write xor execute\") memory protection for your executable. Please see if it works without disabling this security feature first.\n\n### Windows\n\nYour compiler must support C++14 and we recommend to pair it with an up-to-date Windows 10 SDK.\n\nFor Visual C++ we recommend Visual Studio 2022 or later. There are some [requirements when using MinGW-w64](#mingw-w64-requirements).\n\nDevelopers and end-users must have the [WebView2 runtime][ms-webview2-rt] installed on their system for any version of Windows before Windows 11.\n\n## Getting Started\n\nIf you are a developer of this project then please go to the [development section](#development).\n\nYou will have a working app, but you are encouraged to explore the [available examples][examples].\n\nCreate the following files in a new directory:\n\n`.gitignore`:\n```\n# Build artifacts\n/build\n```\n\n### C++ Example\n\n`CMakeLists.txt`:\n```cmake\ncmake_minimum_required(VERSION 3.16)\nproject(example LANGUAGES CXX)\n\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/lib\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/lib\")\n\ninclude(FetchContent)\n\nFetchContent_Declare(\n    webview\n    GIT_REPOSITORY https://github.com/webview/webview\n    GIT_TAG 0.12.0)\nFetchContent_MakeAvailable(webview)\n\nadd_executable(example WIN32)\ntarget_sources(example PRIVATE main.cc)\ntarget_link_libraries(example PRIVATE webview::core)\n```\n\n`main.cc`:\n```cpp\n#include \"webview/webview.h\"\n\n#include <iostream>\n\n#ifdef _WIN32\nint WINAPI WinMain(HINSTANCE /*hInst*/, HINSTANCE /*hPrevInst*/,\n                   LPSTR /*lpCmdLine*/, int /*nCmdShow*/) {\n#else\nint main() {\n#endif\n  try {\n    webview::webview w(false, nullptr);\n    w.set_title(\"Basic Example\");\n    w.set_size(480, 320, WEBVIEW_HINT_NONE);\n    w.set_html(\"Thanks for using webview!\");\n    w.run();\n  } catch (const webview::exception &e) {\n    std::cerr << e.what() << '\\n';\n    return 1;\n  }\n\n  return 0;\n}\n```\n\n### C Example\n\n`CMakeLists.txt`:\n```cmake\ncmake_minimum_required(VERSION 3.16)\nproject(example LANGUAGES C CXX)\n\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin\")\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/lib\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/lib\")\n\ninclude(FetchContent)\n\nFetchContent_Declare(\n    webview\n    GIT_REPOSITORY https://github.com/webview/webview\n    GIT_TAG 0.12.0)\nFetchContent_MakeAvailable(webview)\n\nadd_executable(example WIN32)\ntarget_sources(example PRIVATE main.c)\ntarget_link_libraries(example PRIVATE webview::core_static)\n```\n\n`main.c`:\n```cpp\n#include \"webview/webview.h\"\n#include <stddef.h>\n\n#ifdef _WIN32\n#include <windows.h>\n#endif\n\n#ifdef _WIN32\nint WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPSTR lpCmdLine,\n                   int nCmdShow) {\n  (void)hInst;\n  (void)hPrevInst;\n  (void)lpCmdLine;\n  (void)nCmdShow;\n#else\nint main(void) {\n#endif\n  webview_t w = webview_create(0, NULL);\n  webview_set_title(w, \"Basic Example\");\n  webview_set_size(w, 480, 320, WEBVIEW_HINT_NONE);\n  webview_set_html(w, \"Thanks for using webview!\");\n  webview_run(w);\n  webview_destroy(w);\n  return 0;\n}\n```\n\n### Building the Example\n\nBuild the project:\n\n```sh\ncmake -G Ninja -B build -S . -D CMAKE_BUILD_TYPE=Release\ncmake --build build\n```\n\nFind the executable in the `build/bin` directory.\n\n### Building Amalgamated Library\n\nAn amalgamated library can be built when building the project using CMake, or the `amalgamate.py` script can be invoked directly.\n\nThe latter is described below.\n\n```sh\npython3 scripts/amalgamate.py --output webview_amalgamation.h core/include/webview/webview.h\n```\n\nSee `python3 scripts/amalgamate.py --help` for script usage.\n\n### Non-CMake Usage\n\nHere's an example for invoking GCC/Clang-like compilers directly. Use the `main.cc` file from the previous example.\n\nPlace either the amalgamated `webview.h` header or all of the individual files into `libs/webview`, and `WebView2.h` from [MS WebView2][ms-webview2-sdk] into `libs`.\n\nBuild the project on your chosen platform.\n\n<details>\n  <summary>macOS</summary>\n  <pre><code>c++ main.cc -O2 --std=c++11 -Ilibs -framework WebKit -ldl -o example</code></pre>\n</details>\n\n<details>\n  <summary>Linux</summary>\n  <pre><code>c++ main.cc -O2 --std=c++11 -Ilibs $(pkg-config --cflags --libs gtk+-3.0 webkit2gtk-4.1) -ldl -o example</code></pre>\n</details>\n\n<details>\n  <summary>Windows</summary>\n  <pre><code>c++ main.cc -O2 --std=c++14 -static -mwindows -Ilibs -ladvapi32 -lole32 -lshell32 -lshlwapi -luser32 -lversion -o example</code></pre>\n</details>\n\n## Customization\n\n### CMake Targets\n\nThe following CMake targets are available:\n\nName                   | Description\n----                   | -----------\n`webview::core`        | Headers for C++.\n`webview::core_shared` | Shared library for C.\n`webview::core_static` | Static library for C.\n\nSpecial targets for on-demand checks and related tasks:\n\nName                   | Description\n----                   | -----------\n`webview_format_check` | Check files with clang-format.\n`webview_reformat`     | Reformat files with clang-format.\n\n### CMake Options\n\nThe following boolean options can be used when building the webview project standalone or when building it as part of your project (e.g. with FetchContent).\n\nOption                            | Description\n------                            | -----------\n`WEBVIEW_BUILD`                   | Enable building\n`WEBVIEW_BUILD_AMALGAMATION`      | Build amalgamated library\n`WEBVIEW_BUILD_DOCS`              | Build documentation\n`WEBVIEW_BUILD_EXAMPLES`          | Build examples\n`WEBVIEW_BUILD_SHARED_LIBRARY`    | Build shared libraries\n`WEBVIEW_BUILD_STATIC_LIBRARY`    | Build static libraries\n`WEBVIEW_BUILD_TESTS`             | Build tests\n`WEBVIEW_ENABLE_CHECKS`           | Enable checks\n`WEBVIEW_ENABLE_CLANG_FORMAT`     | Enable clang-format\n`WEBVIEW_ENABLE_CLANG_TIDY`       | Enable clang-tidy\n`WEBVIEW_ENABLE_PACKAGING`        | Enable packaging\n`WEBVIEW_INSTALL_DOCS`            | Install documentation\n`WEBVIEW_INSTALL_TARGETS`         | Install targets\n`WEBVIEW_IS_CI`                   | Initialized by the `CI` environment variable\n`WEBVIEW_PACKAGE_AMALGAMATION`    | Package amalgamated library\n`WEBVIEW_PACKAGE_DOCS`            | Package documentation\n`WEBVIEW_PACKAGE_HEADERS`         | Package headers\n`WEBVIEW_PACKAGE_LIB`             | Package compiled libraries\n`WEBVIEW_STRICT_CHECKS`           | Make checks strict\n`WEBVIEW_STRICT_CLANG_FORMAT`     | Make clang-format check strict\n`WEBVIEW_STRICT_CLANG_TIDY`       | Make clang-tidy check strict\n`WEBVIEW_USE_COMPAT_MINGW`        | Use compatibility helper for MinGW\n`WEBVIEW_USE_STATIC_MSVC_RUNTIME` | Use static runtime library (MSVC)\n\n> [!NOTE]\n> Checks are *enabled* by default, but aren't *enforced* by default for local development (controlled by the `WEBVIEW_IS_CI` option).\n\nNon-boolean options:\n\nOption                            | Description\n------                            | -----------\n`WEBVIEW_CLANG_FORMAT_EXE`        | Path of the `clang-format` executable.\n`WEBVIEW_CLANG_TIDY_EXE`          | Path of the `clang-tidy` executable.\n\n### Package Consumer Options\n\nThese options can be used when when using the webview CMake package.\n\n#### Linux-specific Options\n\nOption                          | Description\n------                          | -----------\n`WEBVIEW_WEBKITGTK_API`         | WebKitGTK API to interface with, e.g. `6.0`, `4.1` (recommended) or `4.0`. This will also automatically decide the GTK version. Uses the latest recommended API by default if available, or the latest known and available API. Note that there can be major differences between API versions that can affect feature availability. See webview API documentation for details on feature availability.\n\n#### Windows-specific Options\n\nOption                          | Description\n------                          | -----------\n`WEBVIEW_MSWEBVIEW2_VERSION`    | MS WebView2 version, e.g. `1.0.1150.38`.\n`WEBVIEW_USE_BUILTIN_MSWEBVIEW2`| Use built-in MS WebView2.\n\n### Compile-time Options\n\nThese options can be specified as preprocessor macros to modify the build, but are not needed when using CMake.\n\n#### C API Linkage\n\nName                   | Description\n----                   | -----------\n`WEBVIEW_API`          | Controls C API linkage, symbol visibility and whether it's a shared library. By default this is `inline` for C++ and `extern` for C.\n`WEBVIEW_BUILD_SHARED` | Modifies `WEBVIEW_API` for building a shared library.\n`WEBVIEW_SHARED`       | Modifies `WEBVIEW_API` for using a shared library.\n`WEBVIEW_STATIC`       | Modifies `WEBVIEW_API` for building or using a static library.\n\n#### Backend Selection\n\nName                   | Description\n----                   | -----------\n`WEBVIEW_GTK`          | Compile the GTK/WebKitGTK backend.\n`WEBVIEW_COCOA`        | Compile the Cocoa/WebKit backend.\n`WEBVIEW_EDGE`         | Compile the Win32/WebView2 backend.\n\n#### Windows-specific Options\n\nOption                            | Description\n------                            | -----------\n`WEBVIEW_MSWEBVIEW2_BUILTIN_IMPL` | Enables (`1`) or disables (`0`) the built-in implementation of the WebView2 loader. Enabling this avoids the need for `WebView2Loader.dll` but if the DLL is present then the DLL takes priority. This option is enabled by default.\n`WEBVIEW_MSWEBVIEW2_EXPLICIT_LINK`| Enables (`1`) or disables (`0`) explicit linking of `WebView2Loader.dll`. Enabling this avoids the need for import libraries (`*.lib`). This option is enabled by default if `WEBVIEW_MSWEBVIEW2_BUILTIN_IMPL` is enabled.\n\n## MinGW-w64 Requirements\n\nIn order to build this library using MinGW-w64 on Windows then it must support C++14 and have an up-to-date Windows SDK.\n\nDistributions that are known to be compatible:\n\n* [LLVM MinGW](https://github.com/mstorsjo/llvm-mingw)\n* [MSYS2](https://www.msys2.org/)\n* [WinLibs](https://winlibs.com/)\n\n## MS WebView2 Loader\n\nLinking the WebView2 loader part of the Microsoft WebView2 SDK is not a hard requirement when using our webview library, and neither is distributing `WebView2Loader.dll` with your app.\n\nIf, however, `WebView2Loader.dll` is loadable at runtime, e.g. from the executable's directory, then it will be used; otherwise our minimalistic implementation will be used instead.\n\nShould you wish to use the official loader then remember to distribute it along with your app unless you link it statically. Linking it statically is possible with Visual C++ but not MinGW-w64.\n\nHere are some of the noteworthy ways our implementation of the loader differs from the official implementation:\n\n* Does not support configuring WebView2 using environment variables such as `WEBVIEW2_BROWSER_EXECUTABLE_FOLDER`.\n* Microsoft Edge Insider (preview) channels are not supported.\n\n[Customization options](#Customization) can be used to change how the library integrates the WebView2 loader.\n\n## Development\n\nThis project uses the CMake build system.\n\n### Development Dependencies\n\nIn addition to the dependencies mentioned earlier in this document for developing *with* the webview library, the following are used during development *of* the webview library.\n\n* Amalgamation:\n  * Python >= 3.9\n* Checks:\n  * `clang-format`\n  * `clang-tidy`\n* Documentation:\n  * Doxygen\n  * Graphvis\n\n### Building\n\n```sh\ncmake -G \"Ninja Multi-Config\" -B build -S .\ncmake --build build --config CONFIG\n```\n\nReplace `CONFIG` with one of `Debug`, `Release`, or `Profile`. Use `Profile` to enable code coverage (GCC/Clang).\n\nRun tests:\n\n```sh\nctest --test-dir build --build-config CONFIG\n```\n\nGenerate test coverage report:\n\n```sh\ngcovr\n```\n\nFind the coverage report in `build/coverage`.\n\n### Packaging\n\nRun this after building the `Debug` and `Release` configs of the project:\n\n```sh\ncd build\ncpack -G External -C \"Debug;Release\" --config CPackConfig.cmake\n```\n\n### Cross-compilation\n\nSee CMake toolchain files in the `cmake/toolchains` directory.\n\nFor example, this targets Windows x64 on Linux with POSIX threads:\n\n```sh\ncmake -G \"Ninja Multi-Config\" -B build -S . -D CMAKE_TOOLCHAIN_FILE=cmake/toolchains/x86_64-w64-mingw32.cmake -D WEBVIEW_TOOLCHAIN_EXECUTABLE_SUFFIX=-posix\ncmake --build build --config CONFIG\n```\n\n## Limitations\n\n### Browser Features\n\nSince a browser engine is not a full web browser it may not support every feature you may expect from a browser. If you find that a feature does not work as expected then please consult with the browser engine's documentation and [open an issue][issues-new] if you think that the library should support it.\n\nFor example, the library does not attempt to support user interaction features like `alert()`, `confirm()` and `prompt()` and other non-essential features like `console.log()`.\n\n## Bindings\n\nLanguage    | Project\n----------  | -------\nAda         | [thechampagne/webview-ada](https://github.com/thechampagne/webview-ada)\nBun         | [tr1ckydev/webview-bun](https://github.com/tr1ckydev/webview-bun)\nC#          | [webview/webview_csharp](https://github.com/webview/webview_csharp)\nC3          | [thechampagne/webview-c3](https://github.com/thechampagne/webview-c3)\nCrystal     | [naqvis/webview](https://github.com/naqvis/webview)\nD           | [thechampagne/webview-d](https://github.com/thechampagne/webview-d), [ronnie-w/webviewd](https://github.com/ronnie-w/webviewd)\nDeno        | [webview/webview_deno](https://github.com/webview/webview_deno)\nGo          | [webview/webview_go][webview_go]\nHarbour     | [EricLendvai/Harbour_WebView](https://github.com/EricLendvai/Harbour_WebView)\nHaskell     | [lettier/webviewhs](https://github.com/lettier/webviewhs)\nJanet       | [janet-lang/webview](https://github.com/janet-lang/webview)\nJava        | [webview/webview_java](https://github.com/webview/webview_java)\nKotlin      | [Winterreisender/webviewko](https://github.com/Winterreisender/webviewko)\nNim         | [oskca/webview](https://github.com/oskca/webview), [neroist/webview](https://github.com/neroist/webview)\nNode.js     | [Winterreisender/webview-nodejs](https://github.com/Winterreisender/webview-nodejs)\nOdin        | [thechampagne/webview-odin](https://github.com/thechampagne/webview-odin)\nPascal      | [PierceNg/fpwebview](http://github.com/PierceNg/fpwebview)\nPython      | [congzhangzh/webview_python](https://github.com/congzhangzh/webview_python),[zserge/webview-python](https://github.com/zserge/webview-python)\nPHP         | [0hr/php-webview](https://github.com/0hr/php-webview)\nRuby        | [Maaarcocr/webview_ruby](https://github.com/Maaarcocr/webview_ruby)\nRust        | [Boscop/web-view](https://github.com/Boscop/web-view)\nSwift       | [jakenvac/SwiftWebview](https://github.com/jakenvac/SwiftWebview)\nV           | [malisipi/mui](https://github.com/malisipi/mui/tree/main/webview), [ttytm/webview](https://github.com/ttytm/webview)\nZig         | [thechampagne/webview-zig](https://github.com/thechampagne/webview-zig)\n\nIf you wish to add bindings to the list, feel free to submit a pull request or [open an issue][issues-new].\n\n## Generating Bindings\n\nYou can generate bindings for the library by yourself using the included SWIG interface (`webview.i`).\n\nHere are some examples to get you started. Unix-style command lines are used for conciseness.\n\n```sh\nmkdir -p build/bindings/{python,csharp,java,ruby}\nswig -c++ -python -outdir build/bindings/python -o build/bindings/python/python_wrap.cpp webview.i\nswig -c++ -csharp -outdir build/bindings/csharp -o build/bindings/csharp/csharp_wrap.cpp webview.i\nswig -c++ -java -outdir build/bindings/java -o build/bindings/java/java_wrap.cpp webview.i\nswig -c++ -ruby -outdir build/bindings/ruby -o build/bindings/ruby/ruby_wrap.cpp webview.i\n```\n\n## License\n\nCode is distributed under MIT license, feel free to use it in your proprietary projects as well.\n\n[examples]:          https://github.com/webview/webview/tree/master/examples\n[gtk]:               https://gtk.org/\n[issues]:            https://github.com/webview/docs/issues\n[issues-new]:        https://github.com/webview/webview/issues/new\n[webkit]:            https://webkit.org/\n[webkitgtk]:         https://webkitgtk.org/\n[webview]:           https://github.com/webview/webview\n[webview_go]:        https://github.com/webview/webview_go\n[webview.dev]:       https://webview.dev\n[ms-webview2]:       https://developer.microsoft.com/en-us/microsoft-edge/webview2/\n[ms-webview2-sdk]:   https://www.nuget.org/packages/Microsoft.Web.WebView2\n[ms-webview2-rt]:    https://developer.microsoft.com/en-us/microsoft-edge/webview2/\n[win32-api]:         https://docs.microsoft.com/en-us/windows/win32/apiindex/windows-api-list\n",
        "releases": []
    }
}