{
    "https://api.github.com/repos/raineorshine/npm-check-updates": {
        "forks": 332,
        "watchers": 9573,
        "stars": 9573,
        "languages": {
            "TypeScript": 538619,
            "JavaScript": 19668,
            "Shell": 4850,
            "Dockerfile": 123
        },
        "commits": [
            "2025-01-16T17:45:42Z",
            "2025-01-16T17:30:19Z",
            "2025-01-01T14:20:52Z",
            "2024-12-29T16:55:52Z",
            "2024-12-29T16:54:52Z",
            "2024-12-20T15:05:15Z",
            "2024-12-20T15:04:06Z",
            "2024-12-20T14:44:36Z",
            "2024-11-12T15:37:10Z",
            "2024-11-12T15:36:54Z",
            "2024-11-07T09:44:44Z",
            "2024-11-03T08:47:16Z",
            "2024-11-03T08:46:19Z",
            "2024-10-28T15:58:26Z",
            "2024-10-28T15:40:12Z",
            "2024-10-27T17:37:58Z",
            "2024-10-27T17:37:48Z",
            "2024-10-27T12:53:37Z",
            "2024-10-27T12:53:18Z",
            "2024-10-25T07:19:01Z",
            "2024-10-25T07:06:33Z",
            "2024-10-24T19:00:11Z",
            "2024-10-24T18:59:50Z",
            "2024-10-17T07:08:15Z",
            "2024-10-17T07:07:55Z",
            "2024-10-16T21:21:54Z",
            "2024-10-16T21:15:04Z",
            "2024-10-16T21:01:28Z",
            "2024-10-16T17:29:39Z",
            "2024-09-22T09:36:41Z"
        ],
        "creation_date": "2013-09-07T01:36:03Z",
        "contributors": 30,
        "topics": [
            "npm",
            "npm-check-updates"
        ],
        "subscribers": 61,
        "readme": "# npm-check-updates\n\n[![npm version](https://img.shields.io/npm/v/npm-check-updates)](https://www.npmjs.com/package/npm-check-updates)\n[![Build Status](https://img.shields.io/github/actions/workflow/status/raineorshine/npm-check-updates/test.yml?branch=main&label=tests&logo=github)](https://github.com/raineorshine/npm-check-updates/actions?query=workflow%3ATests+branch%3Amain)\n\n**npm-check-updates upgrades your package.json dependencies to the _latest_ versions, ignoring specified versions.**\n\n- maintains existing semantic versioning _policies_, i.e. `\"react\": \"^17.0.2\"` to `\"react\": \"^18.3.1\"`.\n- _only_ modifies package.json file. Run `npm install` to update your installed packages and package-lock.json.\n- sensible defaults, but highly customizable\n- compatible with npm, yarn, pnpm, deno, and bun\n- CLI and module usage\n\n<img width=\"500\" alt=\"example output\" src=\"https://github.com/user-attachments/assets/4808618b-ac20-4fc0-92e0-a777de70a2b6\">\n\n$${\\color{red}Red}$$ major upgrade (and all [major version zero](https://semver.org/#spec-item-4))<br/>\n$${\\color{cyan}Cyan}$$ minor upgrade<br/>\n$${\\color{green}Green}$$ patch upgrade<br/>\n\n## Installation\n\nInstall globally to use `npm-check-updates` or the shorter `ncu`:\n\n```sh\nnpm install -g npm-check-updates\n```\n\nOr run with [npx](https://docs.npmjs.com/cli/v7/commands/npx) (only the long form is supported):\n\n```sh\nnpx npm-check-updates\n```\n\n## Usage\n\nCheck the latest versions of all project dependencies:\n\n```sh\n$ ncu\nChecking package.json\n[====================] 5/5 100%\n\n eslint             7.32.0  \u2192    8.0.0\n prettier           ^2.7.1  \u2192   ^3.0.0\n svelte            ^3.48.0  \u2192  ^3.51.0\n typescript         >3.0.0  \u2192   >4.0.0\n untildify          <4.0.0  \u2192   ^4.0.0\n webpack               4.x  \u2192      5.x\n\nRun ncu -u to upgrade package.json\n```\n\nUpgrade a project's package file:\n\n> **Make sure your package file is in version control and all changes have been committed. This _will_ overwrite your package file.**\n\n```sh\n$ ncu -u\nUpgrading package.json\n[====================] 1/1 100%\n\n express           4.12.x  \u2192   4.13.x\n\nRun npm install to install new versions.\n\n$ npm install      # update installed packages and package-lock.json\n```\n\nCheck global packages:\n\n```sh\nncu -g\n```\n\n## Interactive Mode\n\nChoose which packages to update in interactive mode:\n\n```sh\nncu --interactive\nncu -i\n```\n\n![ncu --interactive](https://user-images.githubusercontent.com/750276/175337598-cdbb2c46-64f8-44f5-b54e-4ad74d7b52b4.png)\n\nCombine with `--format group` for a truly _luxe_ experience:\n\n![ncu --interactive --format group](https://user-images.githubusercontent.com/750276/175336533-539261e4-5cf1-458f-9fbb-a7be2b477ebb.png)\n\n## Filter packages\n\nFilter packages using the `--filter` option or adding additional cli arguments:\n\n```sh\n# upgrade only mocha\nncu mocha\nncu -f mocha\nncu --filter mocha\n\n# upgrade only chalk, mocha, and react\nncu chalk mocha react\nncu chalk, mocha, react\nncu -f \"chalk mocha react\"\n```\n\nFilter with wildcards or regex:\n\n```sh\n# upgrade packages that start with \"react-\"\nncu react-*\nncu \"/^react-.*$/\"\n```\n\nExclude specific packages with the `--reject` option or prefixing a filter with `!`. Supports strings, wildcards, globs, comma-or-space-delimited lists, and regex:\n\n```sh\n# upgrade everything except nodemon\nncu \\!nodemon\nncu -x nodemon\nncu --reject nodemon\n\n# upgrade packages that do not start with \"react-\".\nncu \\!react-*\nncu '/^(?!react-).*$/' # mac/linux\nncu \"/^(?!react-).*$/\" # windows\n```\n\nAdvanced filters: [filter](https://github.com/raineorshine/npm-check-updates#filter), [filterResults](https://github.com/raineorshine/npm-check-updates#filterresults), [filterVersion](https://github.com/raineorshine/npm-check-updates#filterversion)\n\n## How dependency updates are determined\n\n- Direct dependencies are updated to the latest stable version:\n  - `2.0.1` \u2192 `2.2.0`\n  - `1.2` \u2192 `1.3`\n  - `0.1.0` \u2192 `1.0.1`\n- Range operators are preserved and the version is updated:\n  - `^1.2.0` \u2192 `^2.0.0`\n  - `1.x` \u2192 `2.x`\n  - `>0.2.0` \u2192 `>0.3.0`\n- \"Less than\" is replaced with a wildcard:\n  - `<2.0.0` \u2192 `^3.0.0`\n  - `1.0.0 < 2.0.0` \u2192 `^3.0.0`\n- \"Any version\" is preserved:\n  - `*` \u2192 `*`\n- Prerelease versions are ignored by default.\n  - Use `--pre` to include prerelease versions (e.g. `alpha`, `beta`, `build1235`)\n- Choose what level to upgrade to:\n  - With `--target semver`, update according to your specified [semver](https://semver.org/) version ranges:\n    - `^1.1.0` \u2192 `^1.9.99`\n  - With `--target minor`, strictly update the patch and minor versions (including major version zero):\n    - `0.1.0` \u2192 `0.2.1`\n  - With `--target patch`, strictly update the patch version (including major version zero):\n    - `0.1.0` \u2192 `0.1.2`\n  - With `--target @next`, update to the version published on the `next` tag:\n    - `0.1.0` -> `0.1.1-next.1`\n\n## Options\n\nOptions are merged with the following precedence:\n\n1. Command line options\n2. Local [Config File](#config-file) (current working directory)\n3. Project Config File (next to package.json)\n4. User Config File (`$HOME`)\n\nOptions that take no arguments can be negated by prefixing them with `--no-`, e.g. `--no-peer`.\n\n<!-- BEGIN Options -->\n<!-- Do not edit this section by hand. It is auto-generated in build-options.ts. Run \"npm run build\" or \"npm run build:options\" to build. -->\n\n<table>\n  <tr>\n    <td>--cache</td>\n    <td>Cache versions to a local cache file. Default <code>--cacheFile</code> is ~/.ncu-cache.json and default <code>--cacheExpiration</code> is 10 minutes.</td>\n  </tr>\n  <tr>\n    <td>--cacheClear</td>\n    <td>Clear the default cache, or the cache file specified by <code>--cacheFile</code>.</td>\n  </tr>\n  <tr>\n    <td>--cacheExpiration &lt;min&gt;</td>\n    <td>Cache expiration in minutes. Only works with <code>--cache</code>. (default: 10)</td>\n  </tr>\n  <tr>\n    <td>--cacheFile &lt;path&gt;</td>\n    <td>Filepath for the cache file. Only works with <code>--cache</code>. (default: \"~/.ncu-cache.json\")</td>\n  </tr>\n  <tr>\n    <td>--color</td>\n    <td>Force color in terminal.</td>\n  </tr>\n  <tr>\n    <td>--concurrency &lt;n&gt;</td>\n    <td>Max number of concurrent HTTP requests to registry. (default: 8)</td>\n  </tr>\n  <tr>\n    <td>--configFileName &lt;s&gt;</td>\n    <td>Config file name. (default: .ncurc.{json,yml,js,cjs})</td>\n  </tr>\n  <tr>\n    <td>--configFilePath &lt;path&gt;</td>\n    <td>Directory of .ncurc config file. (default: directory of <code>packageFile</code>)</td>\n  </tr>\n  <tr>\n    <td>--cwd &lt;path&gt;</td>\n    <td>Working directory in which npm will be executed.</td>\n  </tr>\n  <tr>\n    <td>--deep</td>\n    <td>Run recursively in current working directory. Alias of (<code>--packageFile '**/package.json'<code>).</td>\n  </tr>\n  <tr>\n    <td>--dep &lt;value&gt;</td>\n    <td>Check one or more sections of dependencies only: dev, optional, peer, prod, or packageManager (comma-delimited). (default: [\"prod\",\"dev\",\"optional\",\"packageManager\"])</td>\n  </tr>\n  <tr>\n    <td>--deprecated</td>\n    <td>Include deprecated packages. Use <code>--no-deprecated</code> to exclude deprecated packages (uses more bandwidth). (default: true)</td>\n  </tr>\n  <tr>\n    <td><a href=\"#doctor\">-d, --doctor</a></td>\n    <td>Iteratively installs upgrades and runs tests to identify breaking upgrades. Requires <code>-u</code> to execute.</td>\n  </tr>\n  <tr>\n    <td>--doctorInstall &lt;command&gt;</td>\n    <td>Specifies the install script to use in doctor mode. (default: <code>npm install</code> or the equivalent for your package manager)</td>\n  </tr>\n  <tr>\n    <td>--doctorTest &lt;command&gt;</td>\n    <td>Specifies the test script to use in doctor mode. (default: <code>npm test</code>)</td>\n  </tr>\n  <tr>\n    <td>--enginesNode</td>\n    <td>Include only packages that satisfy engines.node as specified in the package file.</td>\n  </tr>\n  <tr>\n    <td>-e, --errorLevel &lt;n&gt;</td>\n    <td>Set the error level. 1: exits with error code 0 if no errors occur. 2: exits with error code 0 if no packages need updating (useful for continuous integration). (default: 1)</td>\n  </tr>\n  <tr>\n    <td><a href=\"#filter\">-f, --filter &lt;p&gt;</a></td>\n    <td>Include only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.</td>\n  </tr>\n  <tr>\n    <td><a href=\"#filterresults\">filterResults &lt;fn&gt;</a></td>\n    <td>Filters out upgrades based on a user provided function.</td>\n  </tr>\n  <tr>\n    <td><a href=\"#filterversion\">--filterVersion &lt;p&gt;</a></td>\n    <td>Filter on package version using comma-or-space-delimited list, /regex/, or predicate function.</td>\n  </tr>\n  <tr>\n    <td><a href=\"#format\">--format &lt;value&gt;</a></td>\n    <td>Modify the output formatting or show additional information. Specify one or more comma-delimited values: group, ownerChanged, repo, time, lines, installedVersion. (default: [])</td>\n  </tr>\n  <tr>\n    <td>-g, --global</td>\n    <td>Check global packages instead of in the current project.</td>\n  </tr>\n  <tr>\n    <td><a href=\"#groupfunction\">groupFunction &lt;fn&gt;</a></td>\n    <td>Customize how packages are divided into groups when using <code>--format group</code>.</td>\n  </tr>\n  <tr>\n    <td><a href=\"#install\">--install &lt;value&gt;</a></td>\n    <td>Control the auto-install behavior: always, never, prompt. (default: \"prompt\")</td>\n  </tr>\n  <tr>\n    <td>-i, --interactive</td>\n    <td>Enable interactive prompts for each dependency; implies <code>-u</code> unless one of the json options are set.</td>\n  </tr>\n  <tr>\n    <td>-j, --jsonAll</td>\n    <td>Output new package file instead of human-readable message.</td>\n  </tr>\n  <tr>\n    <td>--jsonDeps</td>\n    <td>Like <code>jsonAll</code> but only lists <code>dependencies</code>, <code>devDependencies</code>, <code>optionalDependencies</code>, etc of the new package data.</td>\n  </tr>\n  <tr>\n    <td>--jsonUpgraded</td>\n    <td>Output upgraded dependencies in json.</td>\n  </tr>\n  <tr>\n    <td>-l, --loglevel &lt;n&gt;</td>\n    <td>Amount to log: silent, error, minimal, warn, info, verbose, silly. (default: \"warn\")</td>\n  </tr>\n  <tr>\n    <td>--mergeConfig</td>\n    <td>Merges nested configs with the root config file for <code>--deep</code> or <code>--packageFile</code> options. (default: false)</td>\n  </tr>\n  <tr>\n    <td>-m, --minimal</td>\n    <td>Do not upgrade newer versions that are already satisfied by the version range according to semver.</td>\n  </tr>\n  <tr>\n    <td>--packageData &lt;value&gt;</td>\n    <td>Package file data (you can also use stdin).</td>\n  </tr>\n  <tr>\n    <td>--packageFile &lt;path|glob&gt;</td>\n    <td>Package file(s) location. (default: ./package.json)</td>\n  </tr>\n  <tr>\n    <td><a href=\"#packagemanager\">-p, --packageManager &lt;s&gt;</a></td>\n    <td>npm, yarn, pnpm, deno, bun, staticRegistry (default: npm).</td>\n  </tr>\n  <tr>\n    <td><a href=\"#peer\">--peer</a></td>\n    <td>Check peer dependencies of installed packages and filter updates to compatible versions.</td>\n  </tr>\n  <tr>\n    <td>--pre &lt;n&gt;</td>\n    <td>Include prerelease versions, e.g. -alpha.0, -beta.5, -rc.2. Automatically set to 1 when <code>--target</code> is newest or greatest, or when the current version is a prerelease. (default: 0)</td>\n  </tr>\n  <tr>\n    <td>--prefix &lt;path&gt;</td>\n    <td>Current working directory of npm.</td>\n  </tr>\n  <tr>\n    <td>-r, --registry &lt;uri&gt;</td>\n    <td>Specify the registry to use when looking up package versions.</td>\n  </tr>\n  <tr>\n    <td><a href=\"#registrytype\">--registryType &lt;type&gt;</a></td>\n    <td>Specify whether --registry refers to a full npm registry or a simple JSON file or url: npm, json. (default: npm)</td>\n  </tr>\n  <tr>\n    <td><a href=\"#reject\">-x, --reject &lt;p&gt;</a></td>\n    <td>Exclude packages matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.</td>\n  </tr>\n  <tr>\n    <td><a href=\"#rejectversion\">--rejectVersion &lt;p&gt;</a></td>\n    <td>Exclude package.json versions using comma-or-space-delimited list, /regex/, or predicate function.</td>\n  </tr>\n  <tr>\n    <td>--removeRange</td>\n    <td>Remove version ranges from the final package version.</td>\n  </tr>\n  <tr>\n    <td>--retry &lt;n&gt;</td>\n    <td>Number of times to retry failed requests for package info. (default: 3)</td>\n  </tr>\n  <tr>\n    <td>--root</td>\n    <td>Runs updates on the root project in addition to specified workspaces. Only allowed with <code>--workspace</code> or <code>--workspaces</code>. (default: true)</td>\n  </tr>\n  <tr>\n    <td>-s, --silent</td>\n    <td>Don't output anything. Alias for <code>--loglevel</code> silent.</td>\n  </tr>\n  <tr>\n    <td>--stdin</td>\n    <td>Read package.json from stdin.</td>\n  </tr>\n  <tr>\n    <td><a href=\"#target\">-t, --target &lt;value&gt;</a></td>\n    <td>Determines the version to upgrade to: latest, newest, greatest, minor, patch, semver, <code>@[tag]<code>, or [function]. (default: latest)</td>\n  </tr>\n  <tr>\n    <td>--timeout &lt;ms&gt;</td>\n    <td>Global timeout in milliseconds. (default: no global timeout and 30 seconds per npm-registry-fetch)</td>\n  </tr>\n  <tr>\n    <td>-u, --upgrade</td>\n    <td>Overwrite package file with upgraded versions instead of just outputting to console.</td>\n  </tr>\n  <tr>\n    <td>--verbose</td>\n    <td>Log additional information for debugging. Alias for <code>--loglevel</code> verbose.</td>\n  </tr>\n  <tr>\n    <td>-w, --workspace &lt;s&gt;</td>\n    <td>Run on one or more specified workspaces. Add <code>--root</code> to also upgrade the root project. (default: [])</td>\n  </tr>\n  <tr>\n    <td>-ws, --workspaces</td>\n    <td>Run on all workspaces. Add <code>--root</code> to also upgrade the root project.</td>\n  </tr>\n</table>\n\n<!-- END Options -->\n\n## Advanced Options\n\nSome options have advanced usage, or allow per-package values by specifying a function in your .ncurc.js file.\n\nRun `ncu --help [OPTION]` to view advanced help for a specific option, or see below:\n\n<!-- BEGIN Advanced Options -->\n<!-- Do not edit this section by hand. It is auto-generated in build-options.ts. Run \"npm run build\" or \"npm run build:options\" to build. -->\n\n## doctor\n\nUsage:\n\n    ncu --doctor -u\n    ncu --no-doctor\n    ncu -du\n\nIteratively installs upgrades and runs your project's tests to identify breaking upgrades. Reverts broken upgrades and updates package.json with working upgrades.\n\nRequires `-u` to execute (modifies your package file, lock file, and node_modules)\n\nTo be more precise:\n\n1. Runs `npm install` and `npm test` to ensure tests are currently passing.\n2. Runs `ncu -u` to optimistically upgrade all dependencies.\n3. If tests pass, hurray!\n4. If tests fail, restores package file and lock file.\n5. For each dependency, install upgrade and run tests.\n6. Prints broken upgrades with test error.\n7. Saves working upgrades to package.json.\n\nAdditional options:\n\n<table>\n  <tr><td>--doctorInstall</td><td>specify a custom install script (default: `npm install` or `yarn`)</td></tr>\n  <tr><td>--doctorTest</td><td>specify a custom test script (default: `npm test`)</td></tr>\n</table>\n\nExample:\n\n    $ ncu --doctor -u\n    Running tests before upgrading\n    npm install\n    npm run test\n    Upgrading all dependencies and re-running tests\n    ncu -u\n    npm install\n    npm run test\n    Tests failed\n    Identifying broken dependencies\n    npm install\n    npm install --no-save react@16.0.0\n    npm run test\n      \u2713 react 15.0.0 \u2192 16.0.0\n    npm install --no-save react-redux@7.0.0\n    npm run test\n      \u2717 react-redux 6.0.0 \u2192 7.0.0\n\n    /projects/myproject/test.js:13\n      throw new Error('Test failed!')\n      ^\n\n    npm install --no-save react-dnd@11.1.3\n    npm run test\n      \u2713 react-dnd 10.0.0 \u2192 11.1.3\n    Saving partially upgraded package.json\n\n## filter\n\nUsage:\n\n    ncu --filter [p]\n    ncu -f [p]\n\nInclude only package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. Only included packages will be checked with `--peer`.\n\n`--filter` runs _before_ new versions are fetched, in contrast to `--filterResults` which runs _after_.\n\nYou can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.\n\n> :warning: The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.\n\n```js\n/**\n  @param name     The name of the dependency.\n  @param semver   A parsed Semver array of the current version.\n    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)\n  @returns        True if the package should be included, false if it should be excluded.\n*/\nfilter: (name, semver) => {\n  if (name.startsWith('@myorg/')) {\n    return false\n  }\n  return true\n}\n```\n\n## filterResults\n\nFilters out upgrades based on a user provided function.\n\n`filterResults` runs _after_ new versions are fetched, in contrast to `filter`, `reject`, `filterVersion`, and `rejectVersion`, which run _before_. This allows you to filter out upgrades with `filterResults` based on how the version has changed (e.g. a major version change).\n\n> :warning: The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.\n\n```js\n/** Filter out non-major version updates. Note this could also be achieved with --target semver.\n  @param {string} packageName               The name of the dependency.\n  @param {string} current                   Current version declaration (may be a range).\n  @param {SemVer[]} currentVersionSemver    Current version declaration in semantic versioning format (may be a range).\n  @param {string} upgraded                  Upgraded version.\n  @param {SemVer} upgradedVersionSemver     Upgraded version in semantic versioning format.\n  @returns {boolean}                        Return true if the upgrade should be kept, otherwise it will be ignored.\n*/\nfilterResults: (packageName, { current, currentVersionSemver, upgraded, upgradedVersionSemver }) => {\n  const currentMajor = parseInt(currentVersionSemver[0]?.major, 10)\n  const upgradedMajor = parseInt(upgradedVersionSemver?.major, 10)\n  if (currentMajor && upgradedMajor) {\n    return currentMajor < upgradedMajor\n  }\n  return true\n}\n```\n\nFor the SemVer type definition, see: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring\n\n## filterVersion\n\nUsage:\n\n    ncu --filterVersion [p]\n\nInclude only versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.\n\n`--filterVersion` runs _before_ new versions are fetched, in contrast to `--filterResults` which runs _after_.\n\nYou can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.\n\n> :warning: The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the `filter` option function.\n\n```js\n/**\n  @param name     The name of the dependency.\n  @param semver   A parsed Semver array of the current version.\n    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)\n  @returns        True if the package should be included, false if it should be excluded.\n*/\nfilterVersion: (name, semver) => {\n  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {\n    return false\n  }\n  return true\n}\n```\n\n## format\n\nUsage:\n\n    ncu --format [value]\n\nModify the output formatting or show additional information. Specify one or more comma-delimited values.\n\n<table>\n  <tr><td>group</td><td>Groups packages by major, minor, patch, and major version zero updates.</td></tr>\n  <tr><td>ownerChanged</td><td>Shows if the package owner has changed.</td></tr>\n  <tr><td>repo</td><td>Infers and displays links to the package's source code repository. Requires packages to be installed.</td></tr>\n  <tr><td>time</td><td>Shows the publish time of each upgrade.</td></tr>\n  <tr><td>lines</td><td>Prints name@version on separate lines. Useful for piping to npm install.</td></tr>\n  <tr><td>installedVersion</td><td>Prints the exact current version number instead of a range.</td></tr>\n</table>\n\n## groupFunction\n\nCustomize how packages are divided into groups when using `--format group`.\n\nOnly available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.\n\n```js\n/**\n  @param name             The name of the dependency.\n  @param defaultGroup     The predefined group name which will be used by default.\n  @param currentSpec      The current version range in your package.json.\n  @param upgradedSpec     The upgraded version range that will be written to your package.json.\n  @param upgradedVersion  The upgraded version number returned by the registry.\n  @returns                A predefined group name ('major' | 'minor' | 'patch' | 'majorVersionZero' | 'none') or a custom string to create your own group.\n*/\ngroupFunction: (name, defaultGroup, currentSpec, upgradedSpec, upgradedVersion) => {\n  if (name === 'typescript' && defaultGroup === 'minor') {\n    return 'major'\n  }\n  if (name.startsWith('@myorg/')) {\n    return 'My Org'\n  }\n  return defaultGroup\n}\n```\n\n## install\n\nUsage:\n\n    ncu --install [value]\n\nDefault: prompt\n\nControl the auto-install behavior.\n\n<table>\n  <tr><td>always</td><td>Runs your package manager's install command automatically after upgrading.</td></tr>\n  <tr><td>never</td><td>Does not install and does not prompt.</td></tr>\n  <tr><td>prompt</td><td>Shows a message after upgrading that recommends an install, but does not install. In interactive mode, prompts for install. (default)</td></tr>\n</table>\n\n## packageManager\n\nUsage:\n\n    ncu --packageManager [s]\n    ncu -p [s]\n\nSpecifies the package manager to use when looking up versions.\n\n<table>\n  <tr><td>npm</td><td>System-installed npm. Default.</td></tr>\n  <tr><td>yarn</td><td>System-installed yarn. Automatically used if yarn.lock is present.</td></tr>\n  <tr><td>pnpm</td><td>System-installed pnpm. Automatically used if pnpm-lock.yaml is present.</td></tr>\n  <tr><td>bun</td><td>System-installed bun. Automatically used if bun.lock or bun.lockb is present.</td></tr>\n</table>\n\n## peer\n\nUsage:\n\n    ncu --peer\n    ncu --no-peer\n\nCheck peer dependencies of installed packages and filter updates to compatible versions.\n\nExample:\n\nThe following example demonstrates how `--peer` works, and how it uses peer dependencies from upgraded modules.\n\nThe package ncu-test-peer-update has two versions published:\n\n- 1.0.0 has peer dependency `\"ncu-test-return-version\": \"1.0.x\"`\n- 1.1.0 has peer dependency `\"ncu-test-return-version\": \"1.1.x\"`\n\nOur test app has the following dependencies:\n\n    \"ncu-test-peer-update\": \"1.0.0\",\n    \"ncu-test-return-version\": \"1.0.0\"\n\nThe latest versions of these packages are:\n\n    \"ncu-test-peer-update\": \"1.1.0\",\n    \"ncu-test-return-version\": \"2.0.0\"\n\nWith `--peer`:\n\nncu upgrades packages to the highest version that still adheres to the peer dependency constraints:\n\n    ncu-test-peer-update     1.0.0  \u2192  1.1.0\n    ncu-test-return-version  1.0.0  \u2192  1.1.0\n\nWithout `--peer`:\n\nAs a comparison: without using the `--peer` option, ncu will suggest the latest versions, ignoring peer dependencies:\n\n    ncu-test-peer-update     1.0.0  \u2192  1.1.0\n    ncu-test-return-version  1.0.0  \u2192  2.0.0\n\n## registryType\n\nUsage:\n\n    ncu --registryType [type]\n\nSpecify whether `--registry` refers to a full npm registry or a simple JSON file.\n\n<table>\n  <tr><td>npm</td><td>Default npm registry</td></tr>\n  <tr><td>json</td><td>Checks versions from a file or url to a simple JSON registry. Must include the `--registry` option.\n\nExample:\n\n    // local file\n    $ ncu --registryType json --registry ./registry.json\n\n    // url\n    $ ncu --registryType json --registry https://api.mydomain/registry.json\n\n    // you can omit --registryType when the registry ends in .json\n    $ ncu --registry ./registry.json\n    $ ncu --registry https://api.mydomain/registry.json\n\nregistry.json:\n\n    {\n      \"prettier\": \"2.7.1\",\n      \"typescript\": \"4.7.4\"\n    }\n\n</td></tr>\n</table>\n\n## reject\n\nUsage:\n\n    ncu --reject [p]\n    ncu -x [p]\n\nThe inverse of `--filter`. Exclude package names matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function. This will also exclude them from the `--peer` check.\n\n`--reject` runs _before_ new versions are fetched, in contrast to `--filterResults` which runs _after_.\n\nYou can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.\n\n> :warning: The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.\n\n```js\n/**\n  @param name     The name of the dependency.\n  @param semver   A parsed Semver array of the current version.\n    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)\n  @returns        True if the package should be excluded, false if it should be included.\n*/\nreject: (name, semver) => {\n  if (name.startsWith('@myorg/')) {\n    return true\n  }\n  return false\n}\n```\n\n## rejectVersion\n\nUsage:\n\n    ncu --rejectVersion [p]\n\nThe inverse of `--filterVersion`. Exclude versions matching the given string, wildcard, glob, comma-or-space-delimited list, /regex/, or predicate function.\n\n`--rejectVersion` runs _before_ new versions are fetched, in contrast to `--filterResults` which runs _after_.\n\nYou can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.\n\n> :warning: The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions. This function is an alias for the reject option function.\n\n```js\n/**\n  @param name     The name of the dependency.\n  @param semver   A parsed Semver array of the current version.\n    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)\n  @returns        True if the package should be excluded, false if it should be included.\n*/\nrejectVersion: (name, semver) => {\n  if (name.startsWith('@myorg/') && parseInt(semver[0]?.major) > 5) {\n    return true\n  }\n  return false\n}\n```\n\n## target\n\nUsage:\n\n    ncu --target [value]\n    ncu -t [value]\n\nDetermines the version to upgrade to. (default: \"latest\")\n\n<table>\n  <tr><td>greatest</td><td>Upgrade to the highest version number published, regardless of release date or tag. Includes prereleases.</td></tr>\n  <tr><td>latest</td><td>Upgrade to whatever the package's \"latest\" git tag points to. Excludes prereleases unless --pre is specified.</td></tr>\n  <tr><td>minor</td><td>Upgrade to the highest minor version without bumping the major version.</td></tr>\n  <tr><td>newest</td><td>Upgrade to the version with the most recent publish date, even if there are other version numbers that are higher. Includes prereleases.</td></tr>\n  <tr><td>patch</td><td>Upgrade to the highest patch version without bumping the minor or major versions.</td></tr>\n  <tr><td>semver</td><td>Upgrade to the highest version within the semver range specified in your package.json.</td></tr>\n  <tr><td>@[tag]</td><td>Upgrade to the version published to a specific tag, e.g. 'next' or 'beta'.</td></tr>\n</table>\n\ne.g.\n\n    ncu --target semver\n\nYou can also specify a custom function in your .ncurc.js file, or when importing npm-check-updates as a module.\n\n> :warning: The predicate function is only available in .ncurc.js or when importing npm-check-updates as a module, not on the command line. To convert a JSON config to a JS config, follow the instructions at https://github.com/raineorshine/npm-check-updates#config-functions.\n\n```js\n/** Upgrade major version zero to the next minor version, and everything else to latest.\n  @param name     The name of the dependency.\n  @param semver   A parsed Semver object of the upgraded version.\n    (See: https://git.coolaj86.com/coolaj86/semver-utils.js#semverutils-parse-semverstring)\n  @returns        One of the valid target values (specified in the table above).\n*/\ntarget: (name, semver) => {\n  if (parseInt(semver[0]?.major) === '0') return 'minor'\n  return 'latest'\n}\n```\n\n<!-- END Advanced Options -->\n\n## Config File\n\nAdd a `.ncurc.{json,yml,js,cjs}` file to your project directory to specify configuration information.\n\nFor example, `.ncurc.json`:\n\n```json\n{\n  \"upgrade\": true,\n  \"filter\": \"svelte\",\n  \"reject\": [\"@types/estree\", \"ts-node\"]\n}\n```\n\nOptions are merged with the following precedence:\n\n1. Command line options\n2. Local Config File (current working directory)\n3. Project Config File (next to package.json)\n4. User Config File (`$HOME`)\n\nYou can also specify a custom config file name or path using the `--configFileName` or `--configFilePath` command line options.\n\n### Config Functions\n\nSome options offer more advanced configuration using a function definition. These include [filter](https://github.com/raineorshine/npm-check-updates#filter), [filterVersion](https://github.com/raineorshine/npm-check-updates#filterversion), [filterResults](https://github.com/raineorshine/npm-check-updates#filterresults), [reject](https://github.com/raineorshine/npm-check-updates#reject), [rejectVersion](https://github.com/raineorshine/npm-check-updates#rejectversion), and [groupFunction](https://github.com/raineorshine/npm-check-updates#groupfunction). To define an options function, convert the config file to a JS file by adding the `.js` extension and setting module.exports:\n\nFor example, `.ncurc.js`:\n\n```js\nmodule.exports = {\n  upgrade: true,\n  filter: name => name.startsWith('@myorg/'),\n}\n```\n\n### JSON Schema\n\nIf you write `.ncurc` config files using json or yaml, you can add the JSON Schema to your IDE settings for completions.\n\ne.g. for VS Code:\n\n```json\n  \"json.schemas\": [\n    {\n      \"fileMatch\": [\n        \".ncurc\",\n        \".ncurc.json\",\n      ],\n      \"url\": \"https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json\"\n    }\n  ],\n  \"yaml.schemas\": {\n    \"https://raw.githubusercontent.com/raineorshine/npm-check-updates/main/src/types/RunOptions.json\": [\n        \".ncurc.yml\",\n    ]\n  },\n```\n\n## Module/Programmatic Usage\n\nnpm-check-updates can be imported as a module:\n\n```js\nimport ncu from 'npm-check-updates'\n\nconst upgraded = await ncu.run({\n  // Pass any cli option\n  packageFile: '../package.json',\n  upgrade: true,\n  // Defaults:\n  // jsonUpgraded: true,\n  // silent: true,\n})\n\nconsole.log(upgraded) // { \"mypackage\": \"^2.0.0\", ... }\n```\n\n## Contributing\n\nContributions are happily accepted. I respond to all PR's and can offer guidance on where to make changes. For contributing tips see [CONTRIBUTING.md](https://github.com/raineorshine/npm-check-updates/blob/main/.github/CONTRIBUTING.md).\n\n## Problems?\n\n[File an issue](https://github.com/raineorshine/npm-check-updates/issues). Please [search existing issues](https://github.com/raineorshine/npm-check-updates/issues?utf8=%E2%9C%93&q=is%3Aissue) first.\n",
        "releases": [
            {
                "name": "",
                "date": "2024-07-31T12:14:27Z"
            },
            {
                "name": "v17.0.0-1",
                "date": "2024-03-14T20:36:20Z"
            },
            {
                "name": "",
                "date": "2023-09-13T01:15:44Z"
            },
            {
                "name": "",
                "date": "2023-08-22T15:58:29Z"
            },
            {
                "name": "",
                "date": "2023-04-02T03:18:27Z"
            },
            {
                "name": "",
                "date": "2023-03-22T20:37:16Z"
            },
            {
                "name": "",
                "date": "2022-11-14T13:22:05Z"
            },
            {
                "name": "",
                "date": "2022-09-23T17:22:02Z"
            },
            {
                "name": "",
                "date": "2022-07-23T13:51:19Z"
            },
            {
                "name": "",
                "date": "2022-06-30T13:43:31Z"
            },
            {
                "name": "",
                "date": "2022-06-23T16:19:43Z"
            },
            {
                "name": "",
                "date": "2022-06-16T13:57:07Z"
            },
            {
                "name": "",
                "date": "2022-05-15T19:51:40Z"
            },
            {
                "name": "",
                "date": "2022-01-21T18:07:06Z"
            },
            {
                "name": "",
                "date": "2021-11-04T14:10:40Z"
            },
            {
                "name": "",
                "date": "2021-05-29T17:44:29Z"
            },
            {
                "name": "",
                "date": "2021-04-20T16:14:55Z"
            },
            {
                "name": "",
                "date": "2021-04-07T22:37:28Z"
            },
            {
                "name": "",
                "date": "2021-03-07T20:39:44Z"
            },
            {
                "name": "",
                "date": "2021-01-21T00:20:24Z"
            },
            {
                "name": "",
                "date": "2020-11-08T15:35:15Z"
            },
            {
                "name": "",
                "date": "2020-09-10T17:04:03Z"
            },
            {
                "name": "",
                "date": "2020-08-29T14:49:31Z"
            },
            {
                "name": "",
                "date": "2020-06-09T14:12:28Z"
            },
            {
                "name": "",
                "date": "2020-05-15T00:04:21Z"
            },
            {
                "name": "",
                "date": "2020-05-11T15:31:32Z"
            },
            {
                "name": "",
                "date": "2020-03-26T22:40:25Z"
            },
            {
                "name": "",
                "date": "2019-12-10T17:17:22Z"
            },
            {
                "name": "",
                "date": "2019-11-03T12:59:08Z"
            },
            {
                "name": "v3",
                "date": "2019-03-07T16:47:49Z"
            },
            {
                "name": "",
                "date": "2017-06-20T18:49:02Z"
            },
            {
                "name": "",
                "date": "2017-05-24T18:02:43Z"
            },
            {
                "name": "",
                "date": "2017-05-10T15:08:22Z"
            },
            {
                "name": "",
                "date": "2017-04-17T23:20:10Z"
            },
            {
                "name": "",
                "date": "2017-04-03T18:16:12Z"
            },
            {
                "name": "",
                "date": "2017-03-22T02:24:39Z"
            },
            {
                "name": "v2.3.2",
                "date": "2015-10-13T18:41:37Z"
            },
            {
                "name": "v2.3.1",
                "date": "2015-10-13T18:20:18Z"
            },
            {
                "name": "v2.3.0",
                "date": "2015-10-03T19:05:16Z"
            },
            {
                "name": "",
                "date": "2015-09-09T15:39:10Z"
            },
            {
                "name": "",
                "date": "2015-08-14T17:52:51Z"
            },
            {
                "name": "",
                "date": "2015-08-14T17:56:22Z"
            },
            {
                "name": "",
                "date": "2015-08-14T17:56:09Z"
            },
            {
                "name": "",
                "date": "2015-08-14T17:55:47Z"
            },
            {
                "name": "",
                "date": "2015-08-14T17:55:37Z"
            },
            {
                "name": "",
                "date": "2015-08-14T17:55:26Z"
            },
            {
                "name": "",
                "date": "2015-08-14T17:55:09Z"
            },
            {
                "name": "",
                "date": "2015-08-14T17:54:57Z"
            },
            {
                "name": "",
                "date": "2015-08-14T17:54:44Z"
            },
            {
                "name": "",
                "date": "2015-08-14T17:54:04Z"
            }
        ]
    }
}