{
    "https://api.github.com/repos/celery/celery": {
        "forks": 4704,
        "watchers": 25319,
        "stars": 25319,
        "languages": {
            "Python": 2995213,
            "Shell": 28762,
            "Dockerfile": 6862,
            "Makefile": 6084,
            "Batchfile": 2386,
            "Smarty": 1722
        },
        "commits": [
            "2025-01-06T16:55:26Z",
            "2025-01-08T15:52:14Z",
            "2024-12-25T18:09:05Z",
            "2024-12-25T15:12:21Z",
            "2024-12-23T17:12:41Z",
            "2024-12-23T13:30:40Z",
            "2024-12-21T02:48:17Z",
            "2024-12-19T15:08:22Z",
            "2024-12-19T00:43:36Z",
            "2024-12-17T18:55:41Z",
            "2024-12-17T17:49:43Z",
            "2024-12-17T17:04:26Z",
            "2024-12-12T18:55:40Z",
            "2024-12-03T11:58:31Z",
            "2024-12-01T20:17:40Z",
            "2024-12-01T16:52:12Z",
            "2024-12-01T15:54:45Z",
            "2024-12-01T11:59:55Z",
            "2024-11-28T15:48:15Z",
            "2024-11-28T14:55:38Z",
            "2024-11-28T14:43:24Z",
            "2024-11-27T22:09:13Z",
            "2024-11-25T13:13:40Z",
            "2024-11-20T14:15:03Z",
            "2024-11-20T13:58:57Z",
            "2024-11-19T14:39:53Z",
            "2024-11-19T14:38:20Z",
            "2024-11-18T18:00:05Z",
            "2024-11-17T15:24:04Z",
            "2024-11-15T12:53:01Z"
        ],
        "creation_date": "2009-04-24T11:31:24Z",
        "contributors": 30,
        "topics": [
            "amqp",
            "python",
            "python-library",
            "python3",
            "queue-tasks",
            "queue-workers",
            "queued-jobs",
            "redis",
            "redis-queue",
            "sqs",
            "sqs-queue",
            "task-manager",
            "task-runner",
            "task-scheduler"
        ],
        "subscribers": 471,
        "readme": ".. image:: https://docs.celeryq.dev/en/latest/_images/celery-banner-small.png\n\n|build-status| |coverage| |license| |wheel| |semgrep| |pyversion| |pyimp| |ocbackerbadge| |ocsponsorbadge|\n\n:Version: 5.5.0rc4 (immunity)\n:Web: https://docs.celeryq.dev/en/stable/index.html\n:Download: https://pypi.org/project/celery/\n:Source: https://github.com/celery/celery/\n:Keywords: task, queue, job, async, rabbitmq, amqp, redis,\n  python, distributed, actors\n\nDonations\n=========\n\nThis project relies on your generous donations.\n\nIf you are using Celery to create a commercial product, please consider becoming our `backer`_ or our `sponsor`_ to ensure Celery's future.\n\n.. _`backer`: https://opencollective.com/celery#backer\n.. _`sponsor`: https://opencollective.com/celery#sponsor\n\nFor enterprise\n==============\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of ``celery`` and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. `Learn more. <https://tidelift.com/subscription/pkg/pypi-celery?utm_source=pypi-celery&utm_medium=referral&utm_campaign=enterprise&utm_term=repo>`_\n\n\nSponsor\n=======\n\n`Dragonfly <https://www.dragonflydb.io/>`_ is a drop-in Redis replacement that cuts costs and boosts performance. Designed to fully utilize the power of modern cloud hardware and deliver on the data demands of modern applications, Dragonfly frees developers from the limits of traditional in-memory data stores.\n\n\n.. image:: https://github.com/celery/celery/raw/main/docs/images/dragonfly.svg\n   :alt: Dragonfly logo\n   :width: 150px\n\n\n\n\n\nWhat's a Task Queue?\n====================\n\nTask queues are used as a mechanism to distribute work across threads or\nmachines.\n\nA task queue's input is a unit of work, called a task, dedicated worker\nprocesses then constantly monitor the queue for new work to perform.\n\nCelery communicates via messages, usually using a broker\nto mediate between clients and workers. To initiate a task a client puts a\nmessage on the queue, the broker then delivers the message to a worker.\n\nA Celery system can consist of multiple workers and brokers, giving way\nto high availability and horizontal scaling.\n\nCelery is written in Python, but the protocol can be implemented in any\nlanguage. In addition to Python there's node-celery_ for Node.js,\na `PHP client`_, `gocelery`_, gopher-celery_ for Go, and rusty-celery_ for Rust.\n\nLanguage interoperability can also be achieved by using webhooks\nin such a way that the client enqueues an URL to be requested by a worker.\n\n.. _node-celery: https://github.com/mher/node-celery\n.. _`PHP client`: https://github.com/gjedeer/celery-php\n.. _`gocelery`: https://github.com/gocelery/gocelery\n.. _gopher-celery: https://github.com/marselester/gopher-celery\n.. _rusty-celery: https://github.com/rusty-celery/rusty-celery\n\nWhat do I need?\n===============\n\nCelery version 5.5.x runs on:\n\n- Python (3.8, 3.9, 3.10, 3.11, 3.12, 3.13)\n- PyPy3.9+ (v7.3.12+)\n\n\nThis is the version of celery which will support Python 3.8 or newer.\n\nIf you're running an older version of Python, you need to be running\nan older version of Celery:\n\n- Python 3.7: Celery 5.2 or earlier.\n- Python 3.6: Celery 5.1 or earlier.\n- Python 2.7: Celery 4.x series.\n- Python 2.6: Celery series 3.1 or earlier.\n- Python 2.5: Celery series 3.0 or earlier.\n- Python 2.4: Celery series 2.2 or earlier.\n\nCelery is a project with minimal funding,\nso we don't support Microsoft Windows but it should be working.\nPlease don't open any issues related to that platform.\n\n*Celery* is usually used with a message broker to send and receive messages.\nThe RabbitMQ, Redis transports are feature complete,\nbut there's also experimental support for a myriad of other solutions, including\nusing SQLite for local development.\n\n*Celery* can run on a single machine, on multiple machines, or even\nacross datacenters.\n\nGet Started\n===========\n\nIf this is the first time you're trying to use Celery, or you're\nnew to Celery v5.5.x coming from previous versions then you should read our\ngetting started tutorials:\n\n- `First steps with Celery`_\n\n    Tutorial teaching you the bare minimum needed to get started with Celery.\n\n- `Next steps`_\n\n    A more complete overview, showing more features.\n\n.. _`First steps with Celery`:\n    https://docs.celeryq.dev/en/stable/getting-started/first-steps-with-celery.html\n\n.. _`Next steps`:\n    https://docs.celeryq.dev/en/stable/getting-started/next-steps.html\n\n You can also get started with Celery by using a hosted broker transport CloudAMQP. The largest hosting provider of RabbitMQ is a proud sponsor of Celery.\n\nCelery is...\n=============\n\n- **Simple**\n\n    Celery is easy to use and maintain, and does *not need configuration files*.\n\n    It has an active, friendly community you can talk to for support,\n    like at our `mailing-list`_, or the IRC channel.\n\n    Here's one of the simplest applications you can make:\n\n    .. code-block:: python\n\n        from celery import Celery\n\n        app = Celery('hello', broker='amqp://guest@localhost//')\n\n        @app.task\n        def hello():\n            return 'hello world'\n\n- **Highly Available**\n\n    Workers and clients will automatically retry in the event\n    of connection loss or failure, and some brokers support\n    HA in way of *Primary/Primary* or *Primary/Replica* replication.\n\n- **Fast**\n\n    A single Celery process can process millions of tasks a minute,\n    with sub-millisecond round-trip latency (using RabbitMQ,\n    py-librabbitmq, and optimized settings).\n\n- **Flexible**\n\n    Almost every part of *Celery* can be extended or used on its own,\n    Custom pool implementations, serializers, compression schemes, logging,\n    schedulers, consumers, producers, broker transports, and much more.\n\nIt supports...\n================\n\n    - **Message Transports**\n\n        - RabbitMQ_, Redis_, Amazon SQS, Google Pub/Sub\n\n    - **Concurrency**\n\n        - Prefork, Eventlet_, gevent_, single threaded (``solo``)\n\n    - **Result Stores**\n\n        - AMQP, Redis\n        - memcached\n        - SQLAlchemy, Django ORM\n        - Apache Cassandra, IronCache, Elasticsearch\n        - Google Cloud Storage\n\n    - **Serialization**\n\n        - *pickle*, *json*, *yaml*, *msgpack*.\n        - *zlib*, *bzip2* compression.\n        - Cryptographic message signing.\n\n.. _`Eventlet`: http://eventlet.net/\n.. _`gevent`: http://gevent.org/\n\n.. _RabbitMQ: https://rabbitmq.com\n.. _Redis: https://redis.io\n.. _SQLAlchemy: http://sqlalchemy.org\n\nFramework Integration\n=====================\n\nCelery is easy to integrate with web frameworks, some of which even have\nintegration packages:\n\n    +--------------------+------------------------+\n    | `Django`_          | not needed             |\n    +--------------------+------------------------+\n    | `Pyramid`_         | `pyramid_celery`_      |\n    +--------------------+------------------------+\n    | `Pylons`_          | `celery-pylons`_       |\n    +--------------------+------------------------+\n    | `Flask`_           | not needed             |\n    +--------------------+------------------------+\n    | `web2py`_          | `web2py-celery`_       |\n    +--------------------+------------------------+\n    | `Tornado`_         | `tornado-celery`_      |\n    +--------------------+------------------------+\n    | `FastAPI`_         | not needed             |\n    +--------------------+------------------------+\n\nThe integration packages aren't strictly necessary, but they can make\ndevelopment easier, and sometimes they add important hooks like closing\ndatabase connections at ``fork``.\n\n.. _`Django`: https://djangoproject.com/\n.. _`Pylons`: http://pylonsproject.org/\n.. _`Flask`: https://flask.palletsprojects.com/\n.. _`web2py`: http://web2py.com/\n.. _`Bottle`: https://bottlepy.org/\n.. _`Pyramid`: https://docs.pylonsproject.org/projects/pyramid/en/latest/\n.. _`pyramid_celery`: https://pypi.org/project/pyramid_celery/\n.. _`celery-pylons`: https://pypi.org/project/celery-pylons/\n.. _`web2py-celery`: https://code.google.com/p/web2py-celery/\n.. _`Tornado`: https://www.tornadoweb.org/\n.. _`tornado-celery`: https://github.com/mher/tornado-celery/\n.. _`FastAPI`: https://fastapi.tiangolo.com/\n\n.. _celery-documentation:\n\nDocumentation\n=============\n\nThe `latest documentation`_ is hosted at Read The Docs, containing user guides,\ntutorials, and an API reference.\n\n.. _`latest documentation`: https://docs.celeryq.dev/en/latest/\n\n.. _celery-installation:\n\nInstallation\n============\n\nYou can install Celery either via the Python Package Index (PyPI)\nor from source.\n\nTo install using ``pip``:\n\n::\n\n\n    $ pip install -U Celery\n\n.. _bundles:\n\nBundles\n-------\n\nCelery also defines a group of bundles that can be used\nto install Celery and the dependencies for a given feature.\n\nYou can specify these in your requirements or on the ``pip``\ncommand-line by using brackets. Multiple bundles can be specified by\nseparating them by commas.\n\n::\n\n\n    $ pip install \"celery[redis]\"\n\n    $ pip install \"celery[redis,auth,msgpack]\"\n\nThe following bundles are available:\n\nSerializers\n~~~~~~~~~~~\n\n:``celery[auth]``:\n    for using the ``auth`` security serializer.\n\n:``celery[msgpack]``:\n    for using the msgpack serializer.\n\n:``celery[yaml]``:\n    for using the yaml serializer.\n\nConcurrency\n~~~~~~~~~~~\n\n:``celery[eventlet]``:\n    for using the ``eventlet`` pool.\n\n:``celery[gevent]``:\n    for using the ``gevent`` pool.\n\nTransports and Backends\n~~~~~~~~~~~~~~~~~~~~~~~\n\n:``celery[amqp]``:\n    for using the RabbitMQ amqp python library.\n\n:``celery[redis]``:\n    for using Redis as a message transport or as a result backend.\n\n:``celery[sqs]``:\n    for using Amazon SQS as a message transport.\n\n:``celery[tblib``]:\n    for using the ``task_remote_tracebacks`` feature.\n\n:``celery[memcache]``:\n    for using Memcached as a result backend (using ``pylibmc``)\n\n:``celery[pymemcache]``:\n    for using Memcached as a result backend (pure-Python implementation).\n\n:``celery[cassandra]``:\n    for using Apache Cassandra/Astra DB as a result backend with the DataStax driver.\n\n:``celery[azureblockblob]``:\n    for using Azure Storage as a result backend (using ``azure-storage``)\n\n:``celery[s3]``:\n    for using S3 Storage as a result backend.\n\n:``celery[gcs]``:\n    for using Google Cloud Storage as a result backend.\n\n:``celery[couchbase]``:\n    for using Couchbase as a result backend.\n\n:``celery[arangodb]``:\n    for using ArangoDB as a result backend.\n\n:``celery[elasticsearch]``:\n    for using Elasticsearch as a result backend.\n\n:``celery[riak]``:\n    for using Riak as a result backend.\n\n:``celery[cosmosdbsql]``:\n    for using Azure Cosmos DB as a result backend (using ``pydocumentdb``)\n\n:``celery[zookeeper]``:\n    for using Zookeeper as a message transport.\n\n:``celery[sqlalchemy]``:\n    for using SQLAlchemy as a result backend (*supported*).\n\n:``celery[pyro]``:\n    for using the Pyro4 message transport (*experimental*).\n\n:``celery[slmq]``:\n    for using the SoftLayer Message Queue transport (*experimental*).\n\n:``celery[consul]``:\n    for using the Consul.io Key/Value store as a message transport or result backend (*experimental*).\n\n:``celery[django]``:\n    specifies the lowest version possible for Django support.\n\n    You should probably not use this in your requirements, it's here\n    for informational purposes only.\n\n:``celery[gcpubsub]``:\n    for using Google Pub/Sub as a message transport.\n\n\n\n.. _celery-installing-from-source:\n\nDownloading and installing from source\n--------------------------------------\n\nDownload the latest version of Celery from PyPI:\n\nhttps://pypi.org/project/celery/\n\nYou can install it by doing the following:\n\n::\n\n\n    $ tar xvfz celery-0.0.0.tar.gz\n    $ cd celery-0.0.0\n    $ python setup.py build\n    # python setup.py install\n\nThe last command must be executed as a privileged user if\nyou aren't currently using a virtualenv.\n\n.. _celery-installing-from-git:\n\nUsing the development version\n-----------------------------\n\nWith pip\n~~~~~~~~\n\nThe Celery development version also requires the development\nversions of ``kombu``, ``amqp``, ``billiard``, and ``vine``.\n\nYou can install the latest snapshot of these using the following\npip commands:\n\n::\n\n\n    $ pip install https://github.com/celery/celery/zipball/main#egg=celery\n    $ pip install https://github.com/celery/billiard/zipball/main#egg=billiard\n    $ pip install https://github.com/celery/py-amqp/zipball/main#egg=amqp\n    $ pip install https://github.com/celery/kombu/zipball/main#egg=kombu\n    $ pip install https://github.com/celery/vine/zipball/main#egg=vine\n\nWith git\n~~~~~~~~\n\nPlease see the Contributing section.\n\n.. _getting-help:\n\nGetting Help\n============\n\n.. _mailing-list:\n\nMailing list\n------------\n\nFor discussions about the usage, development, and future of Celery,\nplease join the `celery-users`_ mailing list.\n\n.. _`celery-users`: https://groups.google.com/group/celery-users/\n\n.. _irc-channel:\n\nIRC\n---\n\nCome chat with us on IRC. The **#celery** channel is located at the\n`Libera Chat`_ network.\n\n.. _`Libera Chat`: https://libera.chat/\n\n.. _bug-tracker:\n\nBug tracker\n===========\n\nIf you have any suggestions, bug reports, or annoyances please report them\nto our issue tracker at https://github.com/celery/celery/issues/\n\n.. _wiki:\n\nWiki\n====\n\nhttps://github.com/celery/celery/wiki\n\nCredits\n=======\n\n.. _contributing-short:\n\nContributors\n------------\n\nThis project exists thanks to all the people who contribute. Development of\n`celery` happens at GitHub: https://github.com/celery/celery\n\nYou're highly encouraged to participate in the development\nof `celery`. If you don't like GitHub (for some reason) you're welcome\nto send regular patches.\n\nBe sure to also read the `Contributing to Celery`_ section in the\ndocumentation.\n\n.. _`Contributing to Celery`:\n    https://docs.celeryq.dev/en/stable/contributing.html\n\n|oc-contributors|\n\n.. |oc-contributors| image:: https://opencollective.com/celery/contributors.svg?width=890&button=false\n    :target: https://github.com/celery/celery/graphs/contributors\n\nBackers\n-------\n\nThank you to all our backers! \ud83d\ude4f [`Become a backer`_]\n\n.. _`Become a backer`: https://opencollective.com/celery#backer\n\n|oc-backers|\n\n.. |oc-backers| image:: https://opencollective.com/celery/backers.svg?width=890\n    :target: https://opencollective.com/celery#backers\n\nSponsors\n--------\n\nSupport this project by becoming a sponsor. Your logo will show up here with a\nlink to your website. [`Become a sponsor`_]\n\n.. _`Become a sponsor`: https://opencollective.com/celery#sponsor\n\n|oc-sponsor-1| |oc-sponsor-2| |oc-sponsor-3|\n\n.. |oc-sponsor-1| image:: https://opencollective.com/celery/sponsor/0/avatar.svg\n    :target: https://opencollective.com/celery/sponsor/0/website\n\n.. |oc-sponsor-2| image:: ./docs/images/blacksmith-logo-white-on-black.svg\n    :target: https://www.blacksmith.sh/\n    :alt: Blacksmith.sh\n    :width: 240\n    :height: 57\n\n.. |oc-sponsor-3| image:: https://upstash.com/logo/upstash-dark-bg.svg\n    :target: http://upstash.com/?code=celery\n    :alt: Upstash\n    :width: 200\n    :height: 57\n\n.. _license:\n\nLicense\n=======\n\nThis software is licensed under the `New BSD License`. See the ``LICENSE``\nfile in the top distribution directory for the full license text.\n\n.. # vim: syntax=rst expandtab tabstop=4 shiftwidth=4 shiftround\n\n.. |build-status| image:: https://github.com/celery/celery/actions/workflows/python-package.yml/badge.svg\n    :alt: Build status\n    :target: https://github.com/celery/celery/actions/workflows/python-package.yml\n\n.. |coverage| image:: https://codecov.io/github/celery/celery/coverage.svg?branch=main\n    :target: https://codecov.io/github/celery/celery?branch=main\n\n.. |license| image:: https://img.shields.io/pypi/l/celery.svg\n    :alt: BSD License\n    :target: https://opensource.org/licenses/BSD-3-Clause\n\n.. |wheel| image:: https://img.shields.io/pypi/wheel/celery.svg\n    :alt: Celery can be installed via wheel\n    :target: https://pypi.org/project/celery/\n\n.. |semgrep| image:: https://img.shields.io/badge/semgrep-security-green.svg\n    :alt: Semgrep security\n    :target: https://go.semgrep.dev/home\n\n.. |pyversion| image:: https://img.shields.io/pypi/pyversions/celery.svg\n    :alt: Supported Python versions.\n    :target: https://pypi.org/project/celery/\n\n.. |pyimp| image:: https://img.shields.io/pypi/implementation/celery.svg\n    :alt: Supported Python implementations.\n    :target: https://pypi.org/project/celery/\n\n.. |ocbackerbadge| image:: https://opencollective.com/celery/backers/badge.svg\n    :alt: Backers on Open Collective\n    :target: #backers\n\n.. |ocsponsorbadge| image:: https://opencollective.com/celery/sponsors/badge.svg\n    :alt: Sponsors on Open Collective\n    :target: #sponsors\n\n.. |downloads| image:: https://pepy.tech/badge/celery\n    :alt: Downloads\n    :target: https://pepy.tech/project/celery\n",
        "releases": [
            {
                "name": "v5.5.0rc4",
                "date": "2024-12-19T15:09:32Z"
            },
            {
                "name": "v5.5.0rc3",
                "date": "2024-12-03T12:00:29Z"
            },
            {
                "name": "v5.5.0rc2",
                "date": "2024-11-18T18:01:16Z"
            },
            {
                "name": "v5.5.0rc1",
                "date": "2024-10-08T12:43:27Z"
            },
            {
                "name": "v5.5.0b4",
                "date": "2024-09-30T18:38:58Z"
            },
            {
                "name": "v5.5.0b3",
                "date": "2024-09-08T13:40:09Z"
            },
            {
                "name": "v5.5.0b2",
                "date": "2024-08-06T20:47:31Z"
            },
            {
                "name": "v5.5.0b1",
                "date": "2024-07-24T13:49:39Z"
            },
            {
                "name": "v5.4.0",
                "date": "2024-04-17T20:32:41Z"
            },
            {
                "name": "v5.4.0rc2",
                "date": "2024-03-27T15:20:37Z"
            },
            {
                "name": "v5.4.0rc1",
                "date": "2024-01-17T18:00:33Z"
            },
            {
                "name": "v5.3.6",
                "date": "2023-11-22T15:18:14Z"
            },
            {
                "name": "v5.3.5",
                "date": "2023-11-10T13:32:30Z"
            },
            {
                "name": "v5.3.4",
                "date": "2023-09-03T20:03:56Z"
            },
            {
                "name": "v5.3.1",
                "date": "2023-06-18T14:18:25Z"
            },
            {
                "name": "v5.3.0",
                "date": "2023-06-06T06:02:33Z"
            },
            {
                "name": "v5.3.0rc2",
                "date": "2023-05-31T14:47:57Z"
            },
            {
                "name": "v5.3.0rc1",
                "date": "2023-05-11T13:24:00Z"
            },
            {
                "name": "v5.3.0b2",
                "date": "2023-02-19T11:47:50Z"
            },
            {
                "name": "v5.3.0b1",
                "date": "2022-08-01T11:20:41Z"
            },
            {
                "name": "v5.3.0a1",
                "date": "2022-06-29T11:35:14Z"
            },
            {
                "name": "5.2.7",
                "date": "2022-05-29T12:59:05Z"
            },
            {
                "name": "5.2.6",
                "date": "2022-04-05T08:36:05Z"
            },
            {
                "name": "5.2.5",
                "date": "2022-04-03T17:45:11Z"
            },
            {
                "name": "5.2.4",
                "date": "2022-04-03T17:17:11Z"
            },
            {
                "name": "v5.2.3",
                "date": "2021-12-29T05:51:04Z"
            },
            {
                "name": "5.2.2",
                "date": "2021-12-26T14:32:57Z"
            },
            {
                "name": "v5.2.1",
                "date": "2021-11-16T14:56:22Z"
            },
            {
                "name": "v5.2.0",
                "date": "2021-11-08T01:15:16Z"
            },
            {
                "name": "v5.2.0rc2",
                "date": "2021-11-05T05:19:47Z"
            },
            {
                "name": "v5.2.0b3",
                "date": "2021-09-04T15:58:18Z"
            },
            {
                "name": "v5.2.0b1",
                "date": "2021-08-11T17:48:56Z"
            },
            {
                "name": "v5.1.2",
                "date": "2021-07-12T14:26:26Z"
            },
            {
                "name": "v5.1.1",
                "date": "2021-06-18T05:54:40Z"
            },
            {
                "name": "v5.1.0",
                "date": "2021-05-26T15:28:52Z"
            },
            {
                "name": "v5.1.0rc1",
                "date": "2021-05-19T13:25:18Z"
            },
            {
                "name": "v5.1.0b2",
                "date": "2021-05-02T13:32:41Z"
            },
            {
                "name": "v5.1.0b1",
                "date": "2021-04-02T04:55:05Z"
            },
            {
                "name": "v5.0.2",
                "date": "2020-11-03T10:26:48Z"
            },
            {
                "name": "v5.0.0",
                "date": "2020-09-25T02:59:44Z"
            },
            {
                "name": "v4.4.7",
                "date": "2020-07-31T17:44:53Z"
            },
            {
                "name": "v4.4.6",
                "date": "2020-06-24T08:42:18Z"
            },
            {
                "name": "v4.4.5",
                "date": "2020-06-08T06:11:15Z"
            },
            {
                "name": "v4.4.4",
                "date": "2020-06-03T05:09:42Z"
            },
            {
                "name": "4.4.3",
                "date": "2020-06-01T09:53:44Z"
            },
            {
                "name": "4.4.2",
                "date": "2020-04-16T01:55:03Z"
            },
            {
                "name": "4.4.1",
                "date": "2020-03-02T11:07:19Z"
            },
            {
                "name": "4.4.0",
                "date": "2019-12-16T06:01:53Z"
            },
            {
                "name": "4.4.0rc5",
                "date": "2019-12-07T15:09:04Z"
            },
            {
                "name": "3.0.20",
                "date": "2013-07-03T10:43:44Z"
            }
        ]
    }
}