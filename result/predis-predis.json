{
    "https://api.github.com/repos/predis/predis": {
        "forks": 988,
        "watchers": 7630,
        "stars": 7630,
        "languages": {
            "PHP": 2889611
        },
        "commits": [
            "2025-01-20T17:52:18Z",
            "2025-01-16T16:47:57Z",
            "2025-01-16T07:36:42Z",
            "2025-01-16T07:35:26Z",
            "2025-01-14T17:38:39Z",
            "2025-01-14T08:02:27Z",
            "2024-11-25T17:58:29Z",
            "2024-11-22T15:54:01Z",
            "2024-11-21T20:14:32Z",
            "2024-11-21T20:00:02Z",
            "2024-11-21T19:37:03Z",
            "2024-11-21T18:19:51Z",
            "2024-11-21T18:00:34Z",
            "2024-10-22T16:16:07Z",
            "2024-10-15T17:01:39Z",
            "2024-07-11T06:46:52Z",
            "2024-07-11T06:35:52Z",
            "2024-07-09T11:10:58Z",
            "2024-07-05T13:36:58Z",
            "2024-07-05T13:16:16Z",
            "2024-07-02T19:41:07Z",
            "2024-06-28T18:18:07Z",
            "2024-05-02T15:55:20Z",
            "2024-04-30T19:29:30Z",
            "2024-04-30T19:14:13Z",
            "2024-04-11T01:07:03Z",
            "2024-03-06T16:19:48Z",
            "2023-10-25T17:08:55Z",
            "2023-10-24T16:17:43Z",
            "2023-09-26T16:11:00Z"
        ],
        "creation_date": "2009-11-07T11:27:33Z",
        "contributors": 30,
        "topics": [
            "php",
            "predis",
            "redis",
            "redis-cluster",
            "redis-sentinel"
        ],
        "subscribers": 212,
        "readme": "# Predis #\n\n[![Software license][ico-license]](LICENSE)\n[![Latest stable][ico-version-stable]][link-releases]\n[![Latest development][ico-version-dev]][link-releases]\n[![Monthly installs][ico-downloads-monthly]][link-downloads]\n[![Build status][ico-build]][link-actions]\n[![Coverage Status][ico-coverage]][link-coverage]\n\nA flexible and feature-complete [Redis](http://redis.io) / [Valkey](https://github.com/valkey-io/valkey) client for PHP 7.2 and newer.\n\nMore details about this project can be found on the [frequently asked questions](FAQ.md).\n\n\n## Main features ##\n\n- Support for Redis from __3.0__ to __7.4__.\n- Support for clustering using client-side sharding and pluggable keyspace distributors.\n- Support for [redis-cluster](http://redis.io/topics/cluster-tutorial) (Redis >= 3.0).\n- Support for master-slave replication setups and [redis-sentinel](http://redis.io/topics/sentinel).\n- Transparent key prefixing of keys using a customizable prefix strategy.\n- Command pipelining on both single nodes and clusters (client-side sharding only).\n- Abstraction for Redis transactions (Redis >= 2.0) and CAS operations (Redis >= 2.2).\n- Abstraction for Lua scripting (Redis >= 2.6) and automatic switching between `EVALSHA` or `EVAL`.\n- Abstraction for `SCAN`, `SSCAN`, `ZSCAN` and `HSCAN` (Redis >= 2.8) based on PHP iterators.\n- Connections are established lazily by the client upon the first command and can be persisted.\n- Connections can be established via TCP/IP (also TLS/SSL-encrypted) or UNIX domain sockets.\n- Support for custom connection classes for providing different network or protocol backends.\n- Flexible system for defining custom commands and override the default ones.\n\n\n## How to _install_ and use Predis ##\n\nThis library can be found on [Packagist](http://packagist.org/packages/predis/predis) for an easier\nmanagement of projects dependencies using [Composer](http://packagist.org/about-composer).\nCompressed archives of each release are [available on GitHub](https://github.com/predis/predis/releases).\n\n```shell\ncomposer require predis/predis\n```\n\n\n### Loading the library ###\n\nPredis relies on the autoloading features of PHP to load its files when needed and complies with the\n[PSR-4 standard](https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md).\nAutoloading is handled automatically when dependencies are managed through Composer, but it is also\npossible to leverage its own autoloader in projects or scripts lacking any autoload facility:\n\n```php\n// Prepend a base path if Predis is not available in your \"include_path\".\nrequire 'Predis/Autoloader.php';\n\nPredis\\Autoloader::register();\n```\n\n\n### Connecting to Redis ###\n\nWhen creating a client instance without passing any connection parameter, Predis assumes `127.0.0.1`\nand `6379` as default host and port. The default timeout for the `connect()` operation is 5 seconds:\n\n```php\n$client = new Predis\\Client();\n$client->set('foo', 'bar');\n$value = $client->get('foo');\n```\n\nConnection parameters can be supplied either in the form of URI strings or named arrays. The latter\nis the preferred way to supply parameters, but URI strings can be useful when parameters are read\nfrom non-structured or partially-structured sources:\n\n```php\n// Parameters passed using a named array:\n$client = new Predis\\Client([\n    'scheme' => 'tcp',\n    'host'   => '10.0.0.1',\n    'port'   => 6379,\n]);\n\n// Same set of parameters, passed using an URI string:\n$client = new Predis\\Client('tcp://10.0.0.1:6379');\n```\n\nPassword protected servers can be accessed by adding `password` to the parameters set. When ACLs are\nenabled on Redis >= 6.0, both `username` and `password` are required for user authentication.\n\nIt is also possible to connect to local instances of Redis using UNIX domain sockets, in this case\nthe parameters must use the `unix` scheme and specify a path for the socket file:\n\n```php\n$client = new Predis\\Client(['scheme' => 'unix', 'path' => '/path/to/redis.sock']);\n$client = new Predis\\Client('unix:/path/to/redis.sock');\n```\n\nThe client can leverage TLS/SSL encryption to connect to secured remote Redis instances without the\nneed to configure an SSL proxy like stunnel. This can be useful when connecting to nodes running on\nvarious cloud hosting providers. Encryption can be enabled with using the `tls` scheme and an array\nof suitable [options](http://php.net/manual/context.ssl.php) passed via the `ssl` parameter:\n\n```php\n// Named array of connection parameters:\n$client = new Predis\\Client([\n  'scheme' => 'tls',\n  'ssl'    => ['cafile' => 'private.pem', 'verify_peer' => true],\n]);\n\n// Same set of parameters, but using an URI string:\n$client = new Predis\\Client('tls://127.0.0.1?ssl[cafile]=private.pem&ssl[verify_peer]=1');\n```\n\nThe connection schemes [`redis`](http://www.iana.org/assignments/uri-schemes/prov/redis) (alias of\n`tcp`) and [`rediss`](http://www.iana.org/assignments/uri-schemes/prov/rediss) (alias of `tls`) are\nalso supported, with the difference that URI strings containing these schemes are parsed following\nthe rules described on their respective IANA provisional registration documents.\n\nThe actual list of supported connection parameters can vary depending on each connection backend so\nit is recommended to refer to their specific documentation or implementation for details.\n\nPredis can aggregate multiple connections when providing an array of connection parameters and the\nappropriate option to instruct the client about how to aggregate them (clustering, replication or a\ncustom aggregation logic). Named arrays and URI strings can be mixed when providing configurations\nfor each node:\n\n```php\n$client = new Predis\\Client([\n    'tcp://10.0.0.1?alias=first-node', ['host' => '10.0.0.2', 'alias' => 'second-node'],\n], [\n    'cluster' => 'predis',\n]);\n```\n\nSee the [aggregate connections](#aggregate-connections) section of this document for more details.\n\nConnections to Redis are lazy meaning that the client connects to a server only if and when needed.\nWhile it is recommended to let the client do its own stuff under the hood, there may be times when\nit is still desired to have control of when the connection is opened or closed: this can easily be\nachieved by invoking `$client->connect()` and `$client->disconnect()`. Please note that the effect\nof these methods on aggregate connections may differ depending on each specific implementation.\n\n\n### Client configuration ###\n\nMany aspects and behaviors of the client can be configured by passing specific client options to the\nsecond argument of `Predis\\Client::__construct()`:\n\n```php\n$client = new Predis\\Client($parameters, ['prefix' => 'sample:']);\n```\n\nOptions are managed using a mini DI-alike container and their values can be lazily initialized only\nwhen needed. The client options supported by default in Predis are:\n\n  - `prefix`: prefix string applied to every key found in commands.\n  - `exceptions`: whether the client should throw or return responses upon Redis errors.\n  - `connections`: list of connection backends or a connection factory instance.\n  - `cluster`: specifies a cluster backend (`predis`, `redis` or callable).\n  - `replication`: specifies a replication backend (`predis`, `sentinel` or callable).\n  - `aggregate`: configures the client with a custom aggregate connection (callable).\n  - `parameters`: list of default connection parameters for aggregate connections.\n  - `commands`: specifies a command factory instance to use through the library.\n\nUsers can also provide custom options with values or callable objects (for lazy initialization) that\nare stored in the options container for later use through the library.\n\n\n### Aggregate connections ###\n\nAggregate connections are the foundation upon which Predis implements clustering and replication and\nthey are used to group multiple connections to single Redis nodes and hide the specific logic needed\nto handle them properly depending on the context. Aggregate connections usually require an array of\nconnection parameters along with the appropriate client option when creating a new client instance.\n\n#### Cluster ####\n\nPredis can be configured to work in clustering mode with a traditional client-side sharding approach\nto create a cluster of independent nodes and distribute the keyspace among them. This approach needs\nsome sort of external health monitoring of nodes and requires the keyspace to be rebalanced manually\nwhen nodes are added or removed:\n\n```php\n$parameters = ['tcp://10.0.0.1', 'tcp://10.0.0.2', 'tcp://10.0.0.3'];\n$options    = ['cluster' => 'predis'];\n\n$client = new Predis\\Client($parameters);\n```\n\nAlong with Redis 3.0, a new supervised and coordinated type of clustering was introduced in the form\nof [redis-cluster](http://redis.io/topics/cluster-tutorial). This kind of approach uses a different\nalgorithm to distribute the keyspaces, with Redis nodes coordinating themselves by communicating via\na gossip protocol to handle health status, rebalancing, nodes discovery and request redirection. In\norder to connect to a cluster managed by redis-cluster, the client requires a list of its nodes (not\nnecessarily complete since it will automatically discover new nodes if necessary) and the `cluster`\nclient options set to `redis`:\n\n```php\n$parameters = ['tcp://10.0.0.1', 'tcp://10.0.0.2', 'tcp://10.0.0.3'];\n$options    = ['cluster' => 'redis'];\n\n$client = new Predis\\Client($parameters, $options);\n```\n\n#### Replication ####\n\nThe client can be configured to operate in a single master / multiple slaves setup to provide better\nservice availability. When using replication, Predis recognizes read-only commands and sends them to\na random slave in order to provide some sort of load-balancing and switches to the master as soon as\nit detects a command that performs any kind of operation that would end up modifying the keyspace or\nthe value of a key. Instead of raising a connection error when a slave fails, the client attempts to\nfall back to a different slave among the ones provided in the configuration.\n\nThe basic configuration needed to use the client in replication mode requires one Redis server to be\nidentified as the master (this can be done via connection parameters by setting the `role` parameter\nto `master`) and one or more slaves (in this case setting `role` to `slave` for slaves is optional):\n\n```php\n$parameters = ['tcp://10.0.0.1?role=master', 'tcp://10.0.0.2', 'tcp://10.0.0.3'];\n$options    = ['replication' => 'predis'];\n\n$client = new Predis\\Client($parameters, $options);\n```\n\nThe above configuration has a static list of servers and relies entirely on the client's logic, but\nit is possible to rely on [`redis-sentinel`](http://redis.io/topics/sentinel) for a more robust HA\nenvironment with sentinel servers acting as a source of authority for clients for service discovery.\nThe minimum configuration required by the client to work with redis-sentinel is a list of connection\nparameters pointing to a bunch of sentinel instances, the `replication` option set to `sentinel` and\nthe `service` option set to the name of the service:\n\n```php\n$sentinels = ['tcp://10.0.0.1', 'tcp://10.0.0.2', 'tcp://10.0.0.3'];\n$options   = ['replication' => 'sentinel', 'service' => 'mymaster'];\n\n$client = new Predis\\Client($sentinels, $options);\n```\n\nIf the master and slave nodes are configured to require an authentication from clients, a password\nmust be provided via the global `parameters` client option. This option can also be used to specify\na different database index. The client options array would then look like this:\n\n```php\n$options = [\n    'replication' => 'sentinel',\n    'service' => 'mymaster',\n    'parameters' => [\n        'password' => $secretpassword,\n        'database' => 10,\n    ],\n];\n```\n\nWhile Predis is able to distinguish commands performing write and read-only operations, `EVAL` and\n`EVALSHA` represent a corner case in which the client switches to the master node because it cannot\ntell when a Lua script is safe to be executed on slaves. While this is indeed the default behavior,\nwhen certain Lua scripts do not perform write operations it is possible to provide an hint to tell\nthe client to stick with slaves for their execution:\n\n```php\n$parameters = ['tcp://10.0.0.1?role=master', 'tcp://10.0.0.2', 'tcp://10.0.0.3'];\n$options    = ['replication' => function () {\n    // Set scripts that won't trigger a switch from a slave to the master node.\n    $strategy = new Predis\\Replication\\ReplicationStrategy();\n    $strategy->setScriptReadOnly($LUA_SCRIPT);\n\n    return new Predis\\Connection\\Replication\\MasterSlaveReplication($strategy);\n}];\n\n$client = new Predis\\Client($parameters, $options);\n$client->eval($LUA_SCRIPT, 0);             // Sticks to slave using `eval`...\n$client->evalsha(sha1($LUA_SCRIPT), 0);    // ... and `evalsha`, too.\n```\n\nThe [`examples`](examples/) directory contains a few scripts that demonstrate how the client can be\nconfigured and used to leverage replication in both basic and complex scenarios.\n\n\n### Command pipelines ###\n\nPipelining can help with performances when many commands need to be sent to a server by reducing the\nlatency introduced by network round-trip timings. Pipelining also works with aggregate connections.\nThe client can execute the pipeline inside a callable block or return a pipeline instance with the\nability to chain commands thanks to its fluent interface:\n\n```php\n// Executes a pipeline inside the given callable block:\n$responses = $client->pipeline(function ($pipe) {\n    for ($i = 0; $i < 1000; $i++) {\n        $pipe->set(\"key:$i\", str_pad($i, 4, '0', 0));\n        $pipe->get(\"key:$i\");\n    }\n});\n\n// Returns a pipeline that can be chained thanks to its fluent interface:\n$responses = $client->pipeline()->set('foo', 'bar')->get('foo')->execute();\n```\n\n\n### Transactions ###\n\nThe client provides an abstraction for Redis transactions based on `MULTI` and `EXEC` with a similar\ninterface to command pipelines:\n\n```php\n// Executes a transaction inside the given callable block:\n$responses = $client->transaction(function ($tx) {\n    $tx->set('foo', 'bar');\n    $tx->get('foo');\n});\n\n// Returns a transaction that can be chained thanks to its fluent interface:\n$responses = $client->transaction()->set('foo', 'bar')->get('foo')->execute();\n```\n\nThis abstraction can perform check-and-set operations thanks to `WATCH` and `UNWATCH` and provides\nautomatic retries of transactions aborted by Redis when `WATCH`ed keys are touched. For an example\nof a transaction using CAS you can see [the following example](examples/transaction_using_cas.php).\n\n\n### Adding new commands ###\n\nWhile we try to update Predis to stay up to date with all the commands available in Redis, you might\nprefer to stick with an old version of the library or provide a different way to filter arguments or\nparse responses for specific commands. To achieve that, Predis provides the ability to implement new\ncommand classes to define or override commands in the default command factory used by the client:\n\n```php\n// Define a new command by extending Predis\\Command\\Command:\nclass BrandNewRedisCommand extends Predis\\Command\\Command\n{\n    public function getId()\n    {\n        return 'NEWCMD';\n    }\n}\n\n// Inject your command in the current command factory:\n$client = new Predis\\Client($parameters, [\n    'commands' => [\n        'newcmd' => 'BrandNewRedisCommand',\n    ],\n]);\n\n$response = $client->newcmd();\n```\n\nThere is also a method to send raw commands without filtering their arguments or parsing responses.\nUsers must provide the list of arguments for the command as an array, following the signatures as\ndefined by the [Redis documentation for commands](http://redis.io/commands):\n\n```php\n$response = $client->executeRaw(['SET', 'foo', 'bar']);\n```\n\n\n### Script commands ###\n\nWhile it is possible to leverage [Lua scripting](http://redis.io/commands/eval) on Redis 2.6+ using\ndirectly [`EVAL`](http://redis.io/commands/eval) and [`EVALSHA`](http://redis.io/commands/evalsha),\nPredis offers script commands as an higher level abstraction built upon them to make things simple.\nScript commands can be registered in the command factory used by the client and are accessible as if\nthey were plain Redis commands, but they define Lua scripts that get transmitted to the server for\nremote execution. Internally they use [`EVALSHA`](http://redis.io/commands/evalsha) by default and\nidentify a script by its SHA1 hash to save bandwidth, but [`EVAL`](http://redis.io/commands/eval)\nis used as a fall back when needed:\n\n```php\n// Define a new script command by extending Predis\\Command\\ScriptCommand:\nclass ListPushRandomValue extends Predis\\Command\\ScriptCommand\n{\n    public function getKeysCount()\n    {\n        return 1;\n    }\n\n    public function getScript()\n    {\n        return <<<LUA\nmath.randomseed(ARGV[1])\nlocal rnd = tostring(math.random())\nredis.call('lpush', KEYS[1], rnd)\nreturn rnd\nLUA;\n    }\n}\n\n// Inject the script command in the current command factory:\n$client = new Predis\\Client($parameters, [\n    'commands' => [\n        'lpushrand' => 'ListPushRandomValue',\n    ],\n]);\n\n$response = $client->lpushrand('random_values', $seed = mt_rand());\n```\n\n\n### Customizable connection backends ###\n\nPredis can use different connection backends to connect to Redis. The builtin Relay integration\nleverages the [Relay](https://github.com/cachewerk/relay) extension for PHP for major performance\ngains, by caching a partial replica of the Redis dataset in PHP shared runtime memory.\n\n```php\n$client = new Predis\\Client('tcp://127.0.0.1', [\n    'connections' => 'relay',\n]);\n```\n\nDevelopers can create their own connection classes to support whole new network backends, extend\nexisting classes or provide completely different implementations. Connection classes must implement\n`Predis\\Connection\\NodeConnectionInterface` or extend `Predis\\Connection\\AbstractConnection`:\n\n```php\nclass MyConnectionClass implements Predis\\Connection\\NodeConnectionInterface\n{\n    // Implementation goes here...\n}\n\n// Use MyConnectionClass to handle connections for the `tcp` scheme:\n$client = new Predis\\Client('tcp://127.0.0.1', [\n    'connections' => ['tcp' => 'MyConnectionClass'],\n]);\n```\n\nFor a more in-depth insight on how to create new connection backends you can refer to the actual\nimplementation of the standard connection classes available in the `Predis\\Connection` namespace.\n\n\n## Development ##\n\n\n### Reporting bugs and contributing code ###\n\nContributions to Predis are highly appreciated either in the form of pull requests for new features,\nbug fixes, or just bug reports. We only ask you to adhere to issue and pull request templates.\n\n\n### Test suite ###\n\n__ATTENTION__: Do not ever run the test suite shipped with Predis against instances of Redis running\nin production environments or containing data you are interested in!\n\nPredis has a comprehensive test suite covering every aspect of the library and that can optionally\nperform integration tests against a running instance of Redis (required >= 2.4.0 in order to verify\nthe correct behavior of the implementation of each command. Integration tests for unsupported Redis\ncommands are automatically skipped. If you do not have Redis up and running, integration tests can\nbe disabled. See [the tests README](tests/README.md) for more details about testing this library.\n\nPredis uses GitHub Actions for continuous integration and the history for past and current builds can be\nfound [on its actions page](https://github.com/predis/predis/actions).\n\n### License ###\n\nThe code for Predis is distributed under the terms of the MIT license (see [LICENSE](LICENSE)).\n\n[ico-license]: https://img.shields.io/github/license/predis/predis.svg?style=flat-square\n[ico-version-stable]: https://img.shields.io/github/v/tag/predis/predis?label=stable&style=flat-square\n[ico-version-dev]: https://img.shields.io/github/v/tag/predis/predis?include_prereleases&label=pre-release&style=flat-square\n[ico-downloads-monthly]: https://img.shields.io/packagist/dm/predis/predis.svg?style=flat-square\n[ico-build]: https://img.shields.io/github/actions/workflow/status/predis/predis/tests.yml?branch=main&style=flat-square\n[ico-coverage]: https://img.shields.io/coverallsCoverage/github/predis/predis?style=flat-square\n\n[link-releases]: https://github.com/predis/predis/releases\n[link-actions]: https://github.com/predis/predis/actions\n[link-downloads]: https://packagist.org/packages/predis/predis/stats\n[link-coverage]: https://coveralls.io/github/predis/predis\n",
        "releases": [
            {
                "name": "v2.3.0",
                "date": "2024-11-21T20:01:38Z"
            },
            {
                "name": "v3.0.0-alpha1",
                "date": "2024-01-19T17:00:04Z"
            },
            {
                "name": "v2.2.2",
                "date": "2023-09-13T16:44:42Z"
            },
            {
                "name": "v2.2.1",
                "date": "2023-08-15T23:02:49Z"
            },
            {
                "name": "v2.2.0",
                "date": "2023-06-14T10:38:43Z"
            },
            {
                "name": "v2.2.0 RC1",
                "date": "2023-05-09T17:46:56Z"
            },
            {
                "name": "v2.1.2",
                "date": "2023-03-02T18:36:09Z"
            },
            {
                "name": "v2.1.1",
                "date": "2023-01-17T21:00:23Z"
            },
            {
                "name": "v2.1.0",
                "date": "2023-01-16T23:35:37Z"
            },
            {
                "name": "v2.0.3",
                "date": "2022-10-11T16:53:29Z"
            },
            {
                "name": "v2.0.2",
                "date": "2022-09-06T14:38:36Z"
            },
            {
                "name": "v2.0.1",
                "date": "2022-09-04T21:58:07Z"
            },
            {
                "name": "v2.0.0",
                "date": "2022-06-08T13:15:40Z"
            },
            {
                "name": "2.0.0-beta.1",
                "date": "2022-05-26T18:49:26Z"
            },
            {
                "name": "Predis v1.1.10",
                "date": "2022-01-05T17:47:07Z"
            },
            {
                "name": "Predis v1.1.9",
                "date": "2021-10-05T19:03:05Z"
            },
            {
                "name": "Predis v1.1.8",
                "date": "2021-09-29T17:49:30Z"
            },
            {
                "name": "Predis v1.1.7",
                "date": "2021-04-04T19:50:07Z"
            },
            {
                "name": "Predis v1.1.6",
                "date": "2020-09-11T19:46:51Z"
            },
            {
                "name": "Predis v1.1.5",
                "date": "2020-09-10T14:50:38Z"
            },
            {
                "name": "Predis v1.1.4",
                "date": "2020-08-31T10:25:25Z"
            },
            {
                "name": "Predis v1.1.3",
                "date": "2020-08-18T21:02:05Z"
            },
            {
                "name": "Predis v1.1.2",
                "date": "2020-08-11T17:35:31Z"
            },
            {
                "name": "Predis v1.1.1",
                "date": "2016-06-17T08:45:24Z"
            },
            {
                "name": "Predis v1.1.0",
                "date": "2016-06-02T08:34:58Z"
            },
            {
                "name": "Predis v1.0.4",
                "date": "2016-05-30T15:34:34Z"
            },
            {
                "name": "Predis v1.0.3",
                "date": "2015-07-30T18:54:57Z"
            },
            {
                "name": "Predis v1.0.2",
                "date": "2015-07-30T10:28:06Z"
            },
            {
                "name": "Predis v1.0.1",
                "date": "2015-07-30T10:34:58Z"
            },
            {
                "name": "Predis v1.0.0",
                "date": "2016-06-01T14:19:13Z"
            },
            {
                "name": "Predis v0.8.7",
                "date": "2014-08-01T10:11:35Z"
            },
            {
                "name": "Predis v0.8.6",
                "date": "2014-07-15T10:03:01Z"
            },
            {
                "name": "Predis v0.8.5",
                "date": "2014-01-16T14:30:29Z"
            },
            {
                "name": "Predis v0.8.4",
                "date": "2013-07-27T09:48:21Z"
            },
            {
                "name": "Predis v0.8.3",
                "date": "2014-07-16T10:11:15Z"
            },
            {
                "name": "Predis v0.8.2",
                "date": "2014-07-16T10:12:21Z"
            },
            {
                "name": "Predis v0.8.1",
                "date": "2014-07-16T10:09:11Z"
            },
            {
                "name": "Predis v0.8.0",
                "date": "2014-07-16T10:05:16Z"
            },
            {
                "name": "Predis v0.7.3",
                "date": "2014-07-16T10:04:15Z"
            },
            {
                "name": "Predis v0.7.2",
                "date": "2014-07-16T10:03:29Z"
            },
            {
                "name": "Predis v0.7.1",
                "date": "2014-07-16T10:02:43Z"
            },
            {
                "name": "Predis v0.7.0",
                "date": "2014-07-16T10:01:05Z"
            },
            {
                "name": "Predis v0.6.6",
                "date": "2014-07-16T09:55:59Z"
            },
            {
                "name": "Predis v0.6.5",
                "date": "2014-07-16T09:54:54Z"
            },
            {
                "name": "Predis v0.6.4",
                "date": "2014-07-16T09:53:59Z"
            },
            {
                "name": "Predis v0.6.3",
                "date": "2014-07-16T09:52:40Z"
            },
            {
                "name": "Predis v0.6.2",
                "date": "2014-07-16T09:50:37Z"
            },
            {
                "name": "Predis v0.6.1",
                "date": "2014-07-16T09:48:53Z"
            },
            {
                "name": "Predis v0.6.0",
                "date": "2014-07-16T09:47:42Z"
            }
        ]
    }
}