{
    "https://api.github.com/repos/kkroening/ffmpeg-python": {
        "forks": 895,
        "watchers": 10238,
        "stars": 10238,
        "languages": {
            "Python": 91711
        },
        "commits": [
            "2022-07-11T21:03:07Z",
            "2022-07-11T21:02:31Z",
            "2022-07-11T20:51:06Z",
            "2022-07-11T20:39:36Z",
            "2022-03-07T09:55:30Z",
            "2022-03-07T09:46:52Z",
            "2022-03-07T09:19:09Z",
            "2022-03-07T08:05:43Z",
            "2022-03-06T21:24:40Z",
            "2021-02-16T22:27:34Z",
            "2021-02-16T22:26:53Z",
            "2021-02-16T21:55:10Z",
            "2021-02-16T21:54:27Z",
            "2021-02-15T17:45:52Z",
            "2020-12-13T04:24:28Z",
            "2020-10-15T09:18:00Z",
            "2020-12-06T22:54:08Z",
            "2020-12-03T16:01:40Z",
            "2020-12-02T17:19:53Z",
            "2020-12-02T14:57:14Z",
            "2020-11-08T10:51:35Z",
            "2020-10-30T21:41:59Z",
            "2020-10-30T20:29:44Z",
            "2020-10-09T14:53:17Z",
            "2020-10-07T16:56:05Z",
            "2020-10-07T16:52:15Z",
            "2020-09-16T01:08:51Z",
            "2019-12-30T08:23:02Z",
            "2019-12-30T08:20:24Z",
            "2019-12-30T08:19:42Z"
        ],
        "creation_date": "2017-05-14T05:25:44Z",
        "contributors": 22,
        "topics": [],
        "subscribers": 113,
        "readme": "# ffmpeg-python: Python bindings for FFmpeg\n\n[![CI][ci-badge]][ci]\n\n[ci-badge]: https://github.com/kkroening/ffmpeg-python/actions/workflows/ci.yml/badge.svg\n[ci]: https://github.com/kkroening/ffmpeg-python/actions/workflows/ci.yml\n\n<img src=\"https://raw.githubusercontent.com/kkroening/ffmpeg-python/master/doc/formula.png\" alt=\"ffmpeg-python logo\" width=\"60%\" />\n\n## Overview\n\nThere are tons of Python FFmpeg wrappers out there but they seem to lack complex filter support.  `ffmpeg-python` works well for simple as well as complex signal graphs.\n\n\n## Quickstart\n\nFlip a video horizontally:\n```python\nimport ffmpeg\nstream = ffmpeg.input('input.mp4')\nstream = ffmpeg.hflip(stream)\nstream = ffmpeg.output(stream, 'output.mp4')\nffmpeg.run(stream)\n```\n\nOr if you prefer a fluent interface:\n```python\nimport ffmpeg\n(\n    ffmpeg\n    .input('input.mp4')\n    .hflip()\n    .output('output.mp4')\n    .run()\n)\n```\n\n## [API reference](https://kkroening.github.io/ffmpeg-python/)\n\n## Complex filter graphs\nFFmpeg is extremely powerful, but its command-line interface gets really complicated rather quickly - especially when working with signal graphs and doing anything more than trivial.\n\nTake for example a signal graph that looks like this:\n\n![Signal graph](https://raw.githubusercontent.com/kkroening/ffmpeg-python/master/doc/graph1.png)\n\nThe corresponding command-line arguments are pretty gnarly:\n```bash\nffmpeg -i input.mp4 -i overlay.png -filter_complex \"[0]trim=start_frame=10:end_frame=20[v0];\\\n    [0]trim=start_frame=30:end_frame=40[v1];[v0][v1]concat=n=2[v2];[1]hflip[v3];\\\n    [v2][v3]overlay=eof_action=repeat[v4];[v4]drawbox=50:50:120:120:red:t=5[v5]\"\\\n    -map [v5] output.mp4\n```\n\nMaybe this looks great to you, but if you're not an FFmpeg command-line expert, it probably looks alien.\n\nIf you're like me and find Python to be powerful and readable, it's easier with `ffmpeg-python`:\n```python\nimport ffmpeg\n\nin_file = ffmpeg.input('input.mp4')\noverlay_file = ffmpeg.input('overlay.png')\n(\n    ffmpeg\n    .concat(\n        in_file.trim(start_frame=10, end_frame=20),\n        in_file.trim(start_frame=30, end_frame=40),\n    )\n    .overlay(overlay_file.hflip())\n    .drawbox(50, 50, 120, 120, color='red', thickness=5)\n    .output('out.mp4')\n    .run()\n)\n```\n\n`ffmpeg-python` takes care of running `ffmpeg` with the command-line arguments that correspond to the above filter diagram, in familiar Python terms.\n\n<img src=\"https://raw.githubusercontent.com/kkroening/ffmpeg-python/master/doc/screenshot.png\" alt=\"Screenshot\" align=\"middle\" width=\"60%\" />\n\nReal-world signal graphs can get a heck of a lot more complex, but `ffmpeg-python` handles arbitrarily large (directed-acyclic) signal graphs.\n\n## Installation\n\n### Installing `ffmpeg-python`\n\nThe latest version of `ffmpeg-python` can be acquired via a typical pip install:\n\n```bash\npip install ffmpeg-python\n```\n\nOr the source can be cloned and installed from locally:\n```bash\ngit clone git@github.com:kkroening/ffmpeg-python.git\npip install -e ./ffmpeg-python\n```\n\n> **Note**: `ffmpeg-python` makes no attempt to download/install FFmpeg, as `ffmpeg-python` is merely a pure-Python wrapper - whereas FFmpeg installation is platform-dependent/environment-specific, and is thus the responsibility of the user, as described below.\n\n### Installing FFmpeg\n\nBefore using `ffmpeg-python`, FFmpeg must be installed and accessible via the `$PATH` environment variable.\n\nThere are a variety of ways to install FFmpeg, such as the [official download links](https://ffmpeg.org/download.html), or using your package manager of choice (e.g. `sudo apt install ffmpeg` on Debian/Ubuntu, `brew install ffmpeg` on OS X, etc.).\n\nRegardless of how FFmpeg is installed, you can check if your environment path is set correctly by running the `ffmpeg` command from the terminal, in which case the version information should appear, as in the following example (truncated for brevity):\n\n```\n$ ffmpeg\nffmpeg version 4.2.4-1ubuntu0.1 Copyright (c) 2000-2020 the FFmpeg developers\n  built with gcc 9 (Ubuntu 9.3.0-10ubuntu2)\n```\n\n> **Note**: The actual version information displayed here may vary from one system to another; but if a message such as `ffmpeg: command not found` appears instead of the version information, FFmpeg is not properly installed.\n\n## [Examples](https://github.com/kkroening/ffmpeg-python/tree/master/examples)\n\nWhen in doubt, take a look at the [examples](https://github.com/kkroening/ffmpeg-python/tree/master/examples) to see if there's something that's close to whatever you're trying to do.\n\nHere are a few:\n- [Convert video to numpy array](https://github.com/kkroening/ffmpeg-python/blob/master/examples/README.md#convert-video-to-numpy-array)\n- [Generate thumbnail for video](https://github.com/kkroening/ffmpeg-python/blob/master/examples/README.md#generate-thumbnail-for-video)\n- [Read raw PCM audio via pipe](https://github.com/kkroening/ffmpeg-python/blob/master/examples/README.md#convert-sound-to-raw-pcm-audio)\n\n- [JupyterLab/Notebook stream editor](https://github.com/kkroening/ffmpeg-python/blob/master/examples/README.md#jupyter-stream-editor)\n\n<img src=\"https://raw.githubusercontent.com/kkroening/ffmpeg-python/master/doc/jupyter-demo.gif\" alt=\"jupyter demo\" width=\"75%\" />\n\n- [Tensorflow/DeepDream streaming](https://github.com/kkroening/ffmpeg-python/blob/master/examples/README.md#tensorflow-streaming)\n\n<img src=\"https://raw.githubusercontent.com/kkroening/ffmpeg-python/master/examples/graphs/dream.png\" alt=\"deep dream streaming\" width=\"40%\" />\n\nSee the [Examples README](https://github.com/kkroening/ffmpeg-python/tree/master/examples) for additional examples.\n\n## Custom Filters\n\nDon't see the filter you're looking for?  While `ffmpeg-python` includes shorthand notation for some of the most commonly used filters (such as `concat`), all filters can be referenced via the `.filter` operator:\n```python\nstream = ffmpeg.input('dummy.mp4')\nstream = ffmpeg.filter(stream, 'fps', fps=25, round='up')\nstream = ffmpeg.output(stream, 'dummy2.mp4')\nffmpeg.run(stream)\n```\n\nOr fluently:\n```python\n(\n    ffmpeg\n    .input('dummy.mp4')\n    .filter('fps', fps=25, round='up')\n    .output('dummy2.mp4')\n    .run()\n)\n```\n\n**Special option names:**\n\nArguments with special names such as `-qscale:v` (variable bitrate), `-b:v` (constant bitrate), etc. can be specified as a keyword-args dictionary as follows:\n```python\n(\n    ffmpeg\n    .input('in.mp4')\n    .output('out.mp4', **{'qscale:v': 3})\n    .run()\n)\n```\n\n**Multiple inputs:**\n\nFilters that take multiple input streams can be used by passing the input streams as an array to `ffmpeg.filter`:\n```python\nmain = ffmpeg.input('main.mp4')\nlogo = ffmpeg.input('logo.png')\n(\n    ffmpeg\n    .filter([main, logo], 'overlay', 10, 10)\n    .output('out.mp4')\n    .run()\n)\n```\n\n**Multiple outputs:**\n\nFilters that produce multiple outputs can be used with `.filter_multi_output`:\n```python\nsplit = (\n    ffmpeg\n    .input('in.mp4')\n    .filter_multi_output('split')  # or `.split()`\n)\n(\n    ffmpeg\n    .concat(split[0], split[1].reverse())\n    .output('out.mp4')\n    .run()\n)\n```\n(In this particular case, `.split()` is the equivalent shorthand, but the general approach works for other multi-output filters)\n\n**String expressions:**\n\nExpressions to be interpreted by ffmpeg can be included as string parameters and reference any special ffmpeg variable names:\n```python\n(\n    ffmpeg\n    .input('in.mp4')\n    .filter('crop', 'in_w-2*10', 'in_h-2*20')\n    .input('out.mp4')\n)\n```\n\n<br />\n\nWhen in doubt, refer to the [existing filters](https://github.com/kkroening/ffmpeg-python/blob/master/ffmpeg/_filters.py), [examples](https://github.com/kkroening/ffmpeg-python/tree/master/examples), and/or the [official ffmpeg documentation](https://ffmpeg.org/ffmpeg-filters.html).\n\n## Frequently asked questions\n\n**Why do I get an import/attribute/etc. error from `import ffmpeg`?**\n\nMake sure you ran `pip install ffmpeg-python` and _**not**_ `pip install ffmpeg` (wrong) or `pip install python-ffmpeg` (also wrong).\n\n**Why did my audio stream get dropped?**\n\nSome ffmpeg filters drop audio streams, and care must be taken to preserve the audio in the final output.  The ``.audio`` and ``.video`` operators can be used to reference the audio/video portions of a stream so that they can be processed separately and then re-combined later in the pipeline.\n\nThis dilemma is intrinsic to ffmpeg, and ffmpeg-python tries to stay out of the way while users may refer to the official ffmpeg documentation as to why certain filters drop audio.\n\nAs usual, take a look at the [examples](https://github.com/kkroening/ffmpeg-python/tree/master/examples#audiovideo-pipeline) (*Audio/video pipeline* in particular).\n\n**How can I find out the used command line arguments?**\n\nYou can run `stream.get_args()` before `stream.run()` to retrieve the command line arguments that will be passed to `ffmpeg`. You can also run `stream.compile()` that also includes the `ffmpeg` executable as the first argument.\n\n**How do I do XYZ?**\n\nTake a look at each of the links in the [Additional Resources](https://kkroening.github.io/ffmpeg-python/) section at the end of this README.  If you look everywhere and can't find what you're looking for and have a question that may be relevant to other users, you may open an issue asking how to do it, while providing a thorough explanation of what you're trying to do and what you've tried so far.\n\nIssues not directly related to `ffmpeg-python` or issues asking others to write your code for you or how to do the work of solving a complex signal processing problem for you that's not relevant to other users will be closed.\n\nThat said, we hope to continue improving our documentation and provide a community of support for people using `ffmpeg-python` to do cool and exciting things.\n\n## Contributing\n\n<img align=\"right\" src=\"https://raw.githubusercontent.com/kkroening/ffmpeg-python/master/doc/logo.png\" alt=\"ffmpeg-python logo\" width=\"20%\" />\n\nOne of the best things you can do to help make `ffmpeg-python` better is to answer [open questions](https://github.com/kkroening/ffmpeg-python/labels/question) in the issue tracker.  The questions that are answered will be tagged and incorporated into the documentation, examples, and other learning resources.\n\nIf you notice things that could be better in the documentation or overall development experience, please say so in the [issue tracker](https://github.com/kkroening/ffmpeg-python/issues).  And of course, feel free to report any bugs or submit feature requests.\n\nPull requests are welcome as well, but it wouldn't hurt to touch base in the issue tracker or hop on the [Matrix chat channel](https://riot.im/app/#/room/#ffmpeg-python:matrix.org) first.\n\nAnyone who fixes any of the [open bugs](https://github.com/kkroening/ffmpeg-python/labels/bug) or implements [requested enhancements](https://github.com/kkroening/ffmpeg-python/labels/enhancement) is a hero, but changes should include passing tests.\n\n### Running tests\n\n```bash\ngit clone git@github.com:kkroening/ffmpeg-python.git\ncd ffmpeg-python\nvirtualenv venv\n. venv/bin/activate  # (OS X / Linux)\nvenv\\bin\\activate    # (Windows)\npip install -e .[dev]\npytest\n```\n\n<br />\n\n### Special thanks\n\n- [Fabrice Bellard](https://bellard.org/)\n- [The FFmpeg team](https://ffmpeg.org/donations.html)\n- [Arne de Laat](https://github.com/153957)\n- [Davide Depau](https://github.com/depau)\n- [Dim](https://github.com/lloti)\n- [Noah Stier](https://github.com/noahstier)\n\n## Additional Resources\n\n- [API Reference](https://kkroening.github.io/ffmpeg-python/)\n- [Examples](https://github.com/kkroening/ffmpeg-python/tree/master/examples)\n- [Filters](https://github.com/kkroening/ffmpeg-python/blob/master/ffmpeg/_filters.py)\n- [FFmpeg Homepage](https://ffmpeg.org/)\n- [FFmpeg Documentation](https://ffmpeg.org/ffmpeg.html)\n- [FFmpeg Filters Documentation](https://ffmpeg.org/ffmpeg-filters.html)\n- [Test cases](https://github.com/kkroening/ffmpeg-python/blob/master/ffmpeg/tests/test_ffmpeg.py)\n- [Issue tracker](https://github.com/kkroening/ffmpeg-python/issues)\n- Matrix Chat: [#ffmpeg-python:matrix.org](https://riot.im/app/#/room/#ffmpeg-python:matrix.org)\n",
        "releases": []
    }
}