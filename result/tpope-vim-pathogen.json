{
    "https://api.github.com/repos/tpope/vim-pathogen": {
        "forks": 1159,
        "watchers": 12128,
        "stars": 12128,
        "languages": {
            "Vim Script": 8720
        },
        "commits": [
            "2022-08-24T17:19:25Z",
            "2021-01-04T17:35:31Z",
            "2019-06-25T15:45:47Z",
            "2019-08-26T22:09:00Z",
            "2018-12-13T20:00:59Z",
            "2018-12-12T15:38:22Z",
            "2018-04-05T21:59:12Z",
            "2018-03-14T21:25:06Z",
            "2017-08-04T23:36:41Z",
            "2017-05-27T18:48:52Z",
            "2017-05-27T18:38:29Z",
            "2017-05-23T21:39:30Z",
            "2017-05-23T21:34:51Z",
            "2017-05-22T20:28:09Z",
            "2017-05-22T20:22:57Z",
            "2017-05-22T19:47:34Z",
            "2015-11-27T14:28:16Z",
            "2017-02-13T21:15:42Z",
            "2016-10-13T15:17:15Z",
            "2016-01-26T19:10:25Z",
            "2016-01-20T01:13:29Z",
            "2015-12-26T00:56:20Z",
            "2015-12-26T00:06:34Z",
            "2015-12-26T00:06:00Z",
            "2015-12-22T17:35:35Z",
            "2015-12-22T01:32:51Z",
            "2015-12-22T01:31:13Z",
            "2015-12-21T23:32:29Z",
            "2015-09-20T18:28:35Z",
            "2014-11-06T18:41:58Z"
        ],
        "creation_date": "2009-12-13T20:59:18Z",
        "contributors": 17,
        "topics": [],
        "subscribers": 419,
        "readme": "# pathogen.vim\n\nManage your `'runtimepath'` with ease.  In practical terms, pathogen.vim\nmakes it super easy to install plugins and runtime files in their own\nprivate directories.\n\n**For new users, I recommend using Vim's built-in package management\ninstead.**  `:help packages`\n\n## Installation\n\nInstall to `~/.vim/autoload/pathogen.vim`.\nOr copy and paste the following into your terminal/shell:\n\n    mkdir -p ~/.vim/autoload ~/.vim/bundle && \\\n    curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim\n\nIf you're using Windows, change all occurrences of `~/.vim` to `~\\vimfiles`.\n\n## Runtime Path Manipulation\n\nAdd this to your vimrc:\n\n    execute pathogen#infect()\n\nIf you're brand new to Vim and lacking a vimrc, `vim ~/.vimrc` and paste\nin the following super-minimal example:\n\n    execute pathogen#infect()\n    syntax on\n    filetype plugin indent on\n\nNow any plugins you wish to install can be extracted to a subdirectory\nunder `~/.vim/bundle`, and they will be added to the `'runtimepath'`.\nObserve:\n\n    cd ~/.vim/bundle && \\\n    git clone https://github.com/tpope/vim-sensible.git\n\nNow [sensible.vim](https://github.com/tpope/vim-sensible) is installed.\nIf you really want to get crazy, you could set it up as a submodule in\nwhatever repository you keep your dot files in.  I don't like to get\ncrazy.\n\nIf you don't like the directory name `bundle`, you can pass a runtime relative\nglob as an argument:\n\n    execute pathogen#infect('stuff/{}')\n\nThe `{}` indicates where the expansion should occur.\n\nYou can also pass an absolute path instead.  I keep the plugins I maintain under `~/src`, and this is how I add them:\n\n    execute pathogen#infect('bundle/{}', '~/src/vim/bundle/{}')\n\nNormally to generate documentation, Vim expects you to run `:helptags`\non each directory with documentation (e.g., `:helptags ~/.vim/doc`).\nProvided with pathogen.vim is a `:Helptags` command that does this on\nevery directory in your `'runtimepath'`.  If you really want to get\ncrazy, you could even invoke `Helptags` in your vimrc.  I don't like to\nget crazy.\n\nFinally, pathogen.vim has a rich API that can manipulate `'runtimepath'`\nand other comma-delimited path options in ways most people will never\nneed to do.  If you're one of those edge cases, look at the source.\nIt's well documented.\n\n## Native Vim Package Management\n\nVim 8 includes support for package management in a manner similar to\npathogen.vim.  If you'd like to transition to this native support,\npathogen.vim can help.  Calling `pathogen#infect()` on an older version of Vim\nwill supplement the `bundle/{}` default with `pack/{}/start/{}`, effectively\nbackporting a subset of the new native functionality.\n\n## Runtime File Editing\n\n`:Vopen`, `:Vedit`, `:Vsplit`, `:Vvsplit`, `:Vtabedit`, `:Vpedit`, and\n`:Vread` have all moved to [scriptease.vim][].\n\n[scriptease.vim]: https://github.com/tpope/vim-scriptease\n\n## FAQ\n\n> Can I put pathogen.vim in a submodule like all my other plugins?\n\nSure, stick it under `~/.vim/bundle`, and prepend the following to your\nvimrc:\n\n    runtime bundle/vim-pathogen/autoload/pathogen.vim\n\nOr if your bundles are somewhere other than `~/.vim` (say, `~/src/vim`):\n\n    source ~/src/vim/bundle/vim-pathogen/autoload/pathogen.vim\n\n> Will you accept these 14 pull requests adding a `.gitignore` for\n> `tags` so I don't see untracked changes in my dot files repository?\n\nNo, but I'll teach you how to ignore `tags` globally:\n\n    git config --global core.excludesfile '~/.cvsignore'\n    echo tags >> ~/.cvsignore\n\nWhile any filename will work, I've chosen to follow the ancient\ntradition of `.cvsignore` because utilities like rsync use it, too.\nClever, huh?\n\n> What about Vimballs?\n\nIf you really must use one:\n\n    :e name.vba\n    :!mkdir ~/.vim/bundle/name\n    :UseVimball ~/.vim/bundle/name\n\n> Why don't my plugins load when I use Vim sessions?\n\nVim sessions default to capturing all global options, which includes the\n`'runtimepath'` that pathogen.vim manipulates.  This can cause other problems\ntoo, so I recommend turning that behavior off:\n\n    set sessionoptions-=options\n\n## Contributing\n\nIf your [commit message sucks](http://stopwritingramblingcommitmessages.com/),\nI'm not going to accept your pull request.  I've explained very politely\ndozens of times that\n[my general guidelines](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)\nare absolute rules on my own repositories, so I may lack the energy to\nexplain it to you yet another time.  And please, if I ask you to change\nsomething, `git commit --amend`.\n\nBeyond that, don't be shy about asking before patching.  What takes you\nhours might take me minutes simply because I have both domain knowledge\nand a perverse knowledge of Vim script so vast that many would consider\nit a symptom of mental illness.  On the flip side, some ideas I'll\nreject no matter how good the implementation is.  \"Send a patch\" is an\nedge case answer in my book.\n\n## Self-Promotion\n\nLike pathogen.vim?  Follow the repository on\n[GitHub](https://github.com/tpope/vim-pathogen) and vote for it on\n[vim.org](http://www.vim.org/scripts/script.php?script_id=2332).  And if\nyou're feeling especially charitable, follow [tpope](http://tpo.pe/) on\n[Twitter](http://twitter.com/tpope) and\n[GitHub](https://github.com/tpope).\n\n## License\n\nCopyright (c) Tim Pope.  Distributed under the same terms as Vim itself.\nSee `:help license`.\n",
        "releases": []
    }
}