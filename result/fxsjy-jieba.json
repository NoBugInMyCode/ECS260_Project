{
    "https://api.github.com/repos/fxsjy/jieba": {
        "forks": 6727,
        "watchers": 33610,
        "stars": 33610,
        "languages": {
            "Python": 7349705,
            "OpenEdge ABL": 6770809
        },
        "commits": [
            "2020-02-15T08:33:35Z",
            "2020-01-20T14:22:34Z",
            "2020-01-13T13:24:45Z",
            "2020-01-13T13:03:38Z",
            "2020-01-13T12:53:43Z",
            "2020-01-10T08:30:46Z",
            "2020-01-09T11:23:11Z",
            "2020-01-08T08:21:07Z",
            "2020-01-08T08:04:30Z",
            "2020-01-08T07:26:12Z",
            "2020-01-03T06:10:48Z",
            "2020-01-02T02:26:00Z",
            "2019-12-31T07:03:14Z",
            "2019-12-31T06:14:50Z",
            "2019-12-30T09:11:22Z",
            "2019-12-25T11:46:49Z",
            "2019-12-25T02:49:02Z",
            "2019-12-25T02:35:22Z",
            "2019-12-25T02:34:18Z",
            "2019-12-24T13:02:55Z",
            "2019-12-24T11:29:17Z",
            "2019-12-24T11:19:51Z",
            "2019-12-24T09:27:41Z",
            "2019-07-01T11:43:45Z",
            "2019-07-01T11:41:47Z",
            "2018-12-03T08:29:32Z",
            "2018-09-20T02:44:47Z",
            "2018-09-20T02:40:35Z",
            "2018-09-20T02:39:29Z",
            "2018-09-15T03:59:01Z"
        ],
        "creation_date": "2012-09-29T07:52:01Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 1281,
        "readme": "jieba\n========\n\u201c\u7ed3\u5df4\u201d\u4e2d\u6587\u5206\u8bcd\uff1a\u505a\u6700\u597d\u7684 Python \u4e2d\u6587\u5206\u8bcd\u7ec4\u4ef6\n\n\"Jieba\" (Chinese for \"to stutter\") Chinese text segmentation: built to be the best Python Chinese word segmentation module.\n\n- _Scroll down for English documentation._\n\n\n\u7279\u70b9\n========\n* \u652f\u6301\u56db\u79cd\u5206\u8bcd\u6a21\u5f0f\uff1a\n    * \u7cbe\u786e\u6a21\u5f0f\uff0c\u8bd5\u56fe\u5c06\u53e5\u5b50\u6700\u7cbe\u786e\u5730\u5207\u5f00\uff0c\u9002\u5408\u6587\u672c\u5206\u6790\uff1b\n    * \u5168\u6a21\u5f0f\uff0c\u628a\u53e5\u5b50\u4e2d\u6240\u6709\u7684\u53ef\u4ee5\u6210\u8bcd\u7684\u8bcd\u8bed\u90fd\u626b\u63cf\u51fa\u6765, \u901f\u5ea6\u975e\u5e38\u5feb\uff0c\u4f46\u662f\u4e0d\u80fd\u89e3\u51b3\u6b67\u4e49\uff1b\n    * \u641c\u7d22\u5f15\u64ce\u6a21\u5f0f\uff0c\u5728\u7cbe\u786e\u6a21\u5f0f\u7684\u57fa\u7840\u4e0a\uff0c\u5bf9\u957f\u8bcd\u518d\u6b21\u5207\u5206\uff0c\u63d0\u9ad8\u53ec\u56de\u7387\uff0c\u9002\u5408\u7528\u4e8e\u641c\u7d22\u5f15\u64ce\u5206\u8bcd\u3002\n    * paddle\u6a21\u5f0f\uff0c\u5229\u7528PaddlePaddle\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u8bad\u7ec3\u5e8f\u5217\u6807\u6ce8\uff08\u53cc\u5411GRU\uff09\u7f51\u7edc\u6a21\u578b\u5b9e\u73b0\u5206\u8bcd\u3002\u540c\u65f6\u652f\u6301\u8bcd\u6027\u6807\u6ce8\u3002paddle\u6a21\u5f0f\u4f7f\u7528\u9700\u5b89\u88c5paddlepaddle-tiny\uff0c`pip install paddlepaddle-tiny==1.6.1`\u3002\u76ee\u524dpaddle\u6a21\u5f0f\u652f\u6301jieba v0.40\u53ca\u4ee5\u4e0a\u7248\u672c\u3002jieba v0.40\u4ee5\u4e0b\u7248\u672c\uff0c\u8bf7\u5347\u7ea7jieba\uff0c`pip install jieba --upgrade` \u3002[PaddlePaddle\u5b98\u7f51](https://www.paddlepaddle.org.cn/)\n* \u652f\u6301\u7e41\u4f53\u5206\u8bcd\n* \u652f\u6301\u81ea\u5b9a\u4e49\u8bcd\u5178\n* MIT \u6388\u6743\u534f\u8bae\n\n\u5b89\u88c5\u8bf4\u660e\n=======\n\n\u4ee3\u7801\u5bf9 Python 2/3 \u5747\u517c\u5bb9\n\n* \u5168\u81ea\u52a8\u5b89\u88c5\uff1a`easy_install jieba` \u6216\u8005 `pip install jieba` / `pip3 install jieba`\n* \u534a\u81ea\u52a8\u5b89\u88c5\uff1a\u5148\u4e0b\u8f7d http://pypi.python.org/pypi/jieba/ \uff0c\u89e3\u538b\u540e\u8fd0\u884c `python setup.py install`\n* \u624b\u52a8\u5b89\u88c5\uff1a\u5c06 jieba \u76ee\u5f55\u653e\u7f6e\u4e8e\u5f53\u524d\u76ee\u5f55\u6216\u8005 site-packages \u76ee\u5f55\n* \u901a\u8fc7 `import jieba` \u6765\u5f15\u7528\n* \u5982\u679c\u9700\u8981\u4f7f\u7528paddle\u6a21\u5f0f\u4e0b\u7684\u5206\u8bcd\u548c\u8bcd\u6027\u6807\u6ce8\u529f\u80fd\uff0c\u8bf7\u5148\u5b89\u88c5paddlepaddle-tiny\uff0c`pip install paddlepaddle-tiny==1.6.1`\u3002\n\n\u7b97\u6cd5\n========\n* \u57fa\u4e8e\u524d\u7f00\u8bcd\u5178\u5b9e\u73b0\u9ad8\u6548\u7684\u8bcd\u56fe\u626b\u63cf\uff0c\u751f\u6210\u53e5\u5b50\u4e2d\u6c49\u5b57\u6240\u6709\u53ef\u80fd\u6210\u8bcd\u60c5\u51b5\u6240\u6784\u6210\u7684\u6709\u5411\u65e0\u73af\u56fe (DAG)\n* \u91c7\u7528\u4e86\u52a8\u6001\u89c4\u5212\u67e5\u627e\u6700\u5927\u6982\u7387\u8def\u5f84, \u627e\u51fa\u57fa\u4e8e\u8bcd\u9891\u7684\u6700\u5927\u5207\u5206\u7ec4\u5408\n* \u5bf9\u4e8e\u672a\u767b\u5f55\u8bcd\uff0c\u91c7\u7528\u4e86\u57fa\u4e8e\u6c49\u5b57\u6210\u8bcd\u80fd\u529b\u7684 HMM \u6a21\u578b\uff0c\u4f7f\u7528\u4e86 Viterbi \u7b97\u6cd5\n\n\u4e3b\u8981\u529f\u80fd\n=======\n1. \u5206\u8bcd\n--------\n* `jieba.cut` \u65b9\u6cd5\u63a5\u53d7\u56db\u4e2a\u8f93\u5165\u53c2\u6570: \u9700\u8981\u5206\u8bcd\u7684\u5b57\u7b26\u4e32\uff1bcut_all \u53c2\u6570\u7528\u6765\u63a7\u5236\u662f\u5426\u91c7\u7528\u5168\u6a21\u5f0f\uff1bHMM \u53c2\u6570\u7528\u6765\u63a7\u5236\u662f\u5426\u4f7f\u7528 HMM \u6a21\u578b\uff1buse_paddle \u53c2\u6570\u7528\u6765\u63a7\u5236\u662f\u5426\u4f7f\u7528paddle\u6a21\u5f0f\u4e0b\u7684\u5206\u8bcd\u6a21\u5f0f\uff0cpaddle\u6a21\u5f0f\u91c7\u7528\u5ef6\u8fdf\u52a0\u8f7d\u65b9\u5f0f\uff0c\u901a\u8fc7enable_paddle\u63a5\u53e3\u5b89\u88c5paddlepaddle-tiny\uff0c\u5e76\u4e14import\u76f8\u5173\u4ee3\u7801\uff1b\n* `jieba.cut_for_search` \u65b9\u6cd5\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff1a\u9700\u8981\u5206\u8bcd\u7684\u5b57\u7b26\u4e32\uff1b\u662f\u5426\u4f7f\u7528 HMM \u6a21\u578b\u3002\u8be5\u65b9\u6cd5\u9002\u5408\u7528\u4e8e\u641c\u7d22\u5f15\u64ce\u6784\u5efa\u5012\u6392\u7d22\u5f15\u7684\u5206\u8bcd\uff0c\u7c92\u5ea6\u6bd4\u8f83\u7ec6\n* \u5f85\u5206\u8bcd\u7684\u5b57\u7b26\u4e32\u53ef\u4ee5\u662f unicode \u6216 UTF-8 \u5b57\u7b26\u4e32\u3001GBK \u5b57\u7b26\u4e32\u3002\u6ce8\u610f\uff1a\u4e0d\u5efa\u8bae\u76f4\u63a5\u8f93\u5165 GBK \u5b57\u7b26\u4e32\uff0c\u53ef\u80fd\u65e0\u6cd5\u9884\u6599\u5730\u9519\u8bef\u89e3\u7801\u6210 UTF-8\n* `jieba.cut` \u4ee5\u53ca `jieba.cut_for_search` \u8fd4\u56de\u7684\u7ed3\u6784\u90fd\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u7684 generator\uff0c\u53ef\u4ee5\u4f7f\u7528 for \u5faa\u73af\u6765\u83b7\u5f97\u5206\u8bcd\u540e\u5f97\u5230\u7684\u6bcf\u4e00\u4e2a\u8bcd\u8bed(unicode)\uff0c\u6216\u8005\u7528\n* `jieba.lcut` \u4ee5\u53ca `jieba.lcut_for_search` \u76f4\u63a5\u8fd4\u56de list\n* `jieba.Tokenizer(dictionary=DEFAULT_DICT)` \u65b0\u5efa\u81ea\u5b9a\u4e49\u5206\u8bcd\u5668\uff0c\u53ef\u7528\u4e8e\u540c\u65f6\u4f7f\u7528\u4e0d\u540c\u8bcd\u5178\u3002`jieba.dt` \u4e3a\u9ed8\u8ba4\u5206\u8bcd\u5668\uff0c\u6240\u6709\u5168\u5c40\u5206\u8bcd\u76f8\u5173\u51fd\u6570\u90fd\u662f\u8be5\u5206\u8bcd\u5668\u7684\u6620\u5c04\u3002\n\n\u4ee3\u7801\u793a\u4f8b\n\n```python\n# encoding=utf-8\nimport jieba\n\njieba.enable_paddle()# \u542f\u52a8paddle\u6a21\u5f0f\u3002 0.40\u7248\u4e4b\u540e\u5f00\u59cb\u652f\u6301\uff0c\u65e9\u671f\u7248\u672c\u4e0d\u652f\u6301\nstrs=[\"\u6211\u6765\u5230\u5317\u4eac\u6e05\u534e\u5927\u5b66\",\"\u4e52\u4e53\u7403\u62cd\u5356\u5b8c\u4e86\",\"\u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66\"]\nfor str in strs:\n    seg_list = jieba.cut(str,use_paddle=True) # \u4f7f\u7528paddle\u6a21\u5f0f\n    print(\"Paddle Mode: \" + '/'.join(list(seg_list)))\n\nseg_list = jieba.cut(\"\u6211\u6765\u5230\u5317\u4eac\u6e05\u534e\u5927\u5b66\", cut_all=True)\nprint(\"Full Mode: \" + \"/ \".join(seg_list))  # \u5168\u6a21\u5f0f\n\nseg_list = jieba.cut(\"\u6211\u6765\u5230\u5317\u4eac\u6e05\u534e\u5927\u5b66\", cut_all=False)\nprint(\"Default Mode: \" + \"/ \".join(seg_list))  # \u7cbe\u786e\u6a21\u5f0f\n\nseg_list = jieba.cut(\"\u4ed6\u6765\u5230\u4e86\u7f51\u6613\u676d\u7814\u5927\u53a6\")  # \u9ed8\u8ba4\u662f\u7cbe\u786e\u6a21\u5f0f\nprint(\", \".join(seg_list))\n\nseg_list = jieba.cut_for_search(\"\u5c0f\u660e\u7855\u58eb\u6bd5\u4e1a\u4e8e\u4e2d\u56fd\u79d1\u5b66\u9662\u8ba1\u7b97\u6240\uff0c\u540e\u5728\u65e5\u672c\u4eac\u90fd\u5927\u5b66\u6df1\u9020\")  # \u641c\u7d22\u5f15\u64ce\u6a21\u5f0f\nprint(\", \".join(seg_list))\n```\n\n\u8f93\u51fa:\n\n    \u3010\u5168\u6a21\u5f0f\u3011: \u6211/ \u6765\u5230/ \u5317\u4eac/ \u6e05\u534e/ \u6e05\u534e\u5927\u5b66/ \u534e\u5927/ \u5927\u5b66\n\n    \u3010\u7cbe\u786e\u6a21\u5f0f\u3011: \u6211/ \u6765\u5230/ \u5317\u4eac/ \u6e05\u534e\u5927\u5b66\n\n    \u3010\u65b0\u8bcd\u8bc6\u522b\u3011\uff1a\u4ed6, \u6765\u5230, \u4e86, \u7f51\u6613, \u676d\u7814, \u5927\u53a6    (\u6b64\u5904\uff0c\u201c\u676d\u7814\u201d\u5e76\u6ca1\u6709\u5728\u8bcd\u5178\u4e2d\uff0c\u4f46\u662f\u4e5f\u88abViterbi\u7b97\u6cd5\u8bc6\u522b\u51fa\u6765\u4e86)\n\n    \u3010\u641c\u7d22\u5f15\u64ce\u6a21\u5f0f\u3011\uff1a \u5c0f\u660e, \u7855\u58eb, \u6bd5\u4e1a, \u4e8e, \u4e2d\u56fd, \u79d1\u5b66, \u5b66\u9662, \u79d1\u5b66\u9662, \u4e2d\u56fd\u79d1\u5b66\u9662, \u8ba1\u7b97, \u8ba1\u7b97\u6240, \u540e, \u5728, \u65e5\u672c, \u4eac\u90fd, \u5927\u5b66, \u65e5\u672c\u4eac\u90fd\u5927\u5b66, \u6df1\u9020\n\n2. \u6dfb\u52a0\u81ea\u5b9a\u4e49\u8bcd\u5178\n----------------\n\n### \u8f7d\u5165\u8bcd\u5178\n\n* \u5f00\u53d1\u8005\u53ef\u4ee5\u6307\u5b9a\u81ea\u5df1\u81ea\u5b9a\u4e49\u7684\u8bcd\u5178\uff0c\u4ee5\u4fbf\u5305\u542b jieba \u8bcd\u5e93\u91cc\u6ca1\u6709\u7684\u8bcd\u3002\u867d\u7136 jieba \u6709\u65b0\u8bcd\u8bc6\u522b\u80fd\u529b\uff0c\u4f46\u662f\u81ea\u884c\u6dfb\u52a0\u65b0\u8bcd\u53ef\u4ee5\u4fdd\u8bc1\u66f4\u9ad8\u7684\u6b63\u786e\u7387\n* \u7528\u6cd5\uff1a jieba.load_userdict(file_name) # file_name \u4e3a\u6587\u4ef6\u7c7b\u5bf9\u8c61\u6216\u81ea\u5b9a\u4e49\u8bcd\u5178\u7684\u8def\u5f84\n* \u8bcd\u5178\u683c\u5f0f\u548c `dict.txt` \u4e00\u6837\uff0c\u4e00\u4e2a\u8bcd\u5360\u4e00\u884c\uff1b\u6bcf\u4e00\u884c\u5206\u4e09\u90e8\u5206\uff1a\u8bcd\u8bed\u3001\u8bcd\u9891\uff08\u53ef\u7701\u7565\uff09\u3001\u8bcd\u6027\uff08\u53ef\u7701\u7565\uff09\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u987a\u5e8f\u4e0d\u53ef\u98a0\u5012\u3002`file_name` \u82e5\u4e3a\u8def\u5f84\u6216\u4e8c\u8fdb\u5236\u65b9\u5f0f\u6253\u5f00\u7684\u6587\u4ef6\uff0c\u5219\u6587\u4ef6\u5fc5\u987b\u4e3a UTF-8 \u7f16\u7801\u3002\n* \u8bcd\u9891\u7701\u7565\u65f6\u4f7f\u7528\u81ea\u52a8\u8ba1\u7b97\u7684\u80fd\u4fdd\u8bc1\u5206\u51fa\u8be5\u8bcd\u7684\u8bcd\u9891\u3002\n\n**\u4f8b\u5982\uff1a**\n\n```\n\u521b\u65b0\u529e 3 i\n\u4e91\u8ba1\u7b97 5\n\u51f1\u7279\u7433 nz\n\u53f0\u4e2d\n```\n\n* \u66f4\u6539\u5206\u8bcd\u5668\uff08\u9ed8\u8ba4\u4e3a `jieba.dt`\uff09\u7684 `tmp_dir` \u548c `cache_file` \u5c5e\u6027\uff0c\u53ef\u5206\u522b\u6307\u5b9a\u7f13\u5b58\u6587\u4ef6\u6240\u5728\u7684\u6587\u4ef6\u5939\u53ca\u5176\u6587\u4ef6\u540d\uff0c\u7528\u4e8e\u53d7\u9650\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\n\n* \u8303\u4f8b\uff1a\n\n    * \u81ea\u5b9a\u4e49\u8bcd\u5178\uff1ahttps://github.com/fxsjy/jieba/blob/master/test/userdict.txt\n\n    * \u7528\u6cd5\u793a\u4f8b\uff1ahttps://github.com/fxsjy/jieba/blob/master/test/test_userdict.py\n\n\n        * \u4e4b\u524d\uff1a \u674e\u5c0f\u798f / \u662f / \u521b\u65b0 / \u529e / \u4e3b\u4efb / \u4e5f / \u662f / \u4e91 / \u8ba1\u7b97 / \u65b9\u9762 / \u7684 / \u4e13\u5bb6 /\n\n        * \u52a0\u8f7d\u81ea\u5b9a\u4e49\u8bcd\u5e93\u540e\uff1a\u3000\u674e\u5c0f\u798f / \u662f / \u521b\u65b0\u529e / \u4e3b\u4efb / \u4e5f / \u662f / \u4e91\u8ba1\u7b97 / \u65b9\u9762 / \u7684 / \u4e13\u5bb6 /\n\n### \u8c03\u6574\u8bcd\u5178\n\n* \u4f7f\u7528 `add_word(word, freq=None, tag=None)` \u548c `del_word(word)` \u53ef\u5728\u7a0b\u5e8f\u4e2d\u52a8\u6001\u4fee\u6539\u8bcd\u5178\u3002\n* \u4f7f\u7528 `suggest_freq(segment, tune=True)` \u53ef\u8c03\u8282\u5355\u4e2a\u8bcd\u8bed\u7684\u8bcd\u9891\uff0c\u4f7f\u5176\u80fd\uff08\u6216\u4e0d\u80fd\uff09\u88ab\u5206\u51fa\u6765\u3002\n\n* \u6ce8\u610f\uff1a\u81ea\u52a8\u8ba1\u7b97\u7684\u8bcd\u9891\u5728\u4f7f\u7528 HMM \u65b0\u8bcd\u53d1\u73b0\u529f\u80fd\u65f6\u53ef\u80fd\u65e0\u6548\u3002\n\n\u4ee3\u7801\u793a\u4f8b\uff1a\n\n```pycon\n>>> print('/'.join(jieba.cut('\u5982\u679c\u653e\u5230post\u4e2d\u5c06\u51fa\u9519\u3002', HMM=False)))\n\u5982\u679c/\u653e\u5230/post/\u4e2d\u5c06/\u51fa\u9519/\u3002\n>>> jieba.suggest_freq(('\u4e2d', '\u5c06'), True)\n494\n>>> print('/'.join(jieba.cut('\u5982\u679c\u653e\u5230post\u4e2d\u5c06\u51fa\u9519\u3002', HMM=False)))\n\u5982\u679c/\u653e\u5230/post/\u4e2d/\u5c06/\u51fa\u9519/\u3002\n>>> print('/'.join(jieba.cut('\u300c\u53f0\u4e2d\u300d\u6b63\u786e\u5e94\u8be5\u4e0d\u4f1a\u88ab\u5207\u5f00', HMM=False)))\n\u300c/\u53f0/\u4e2d/\u300d/\u6b63\u786e/\u5e94\u8be5/\u4e0d\u4f1a/\u88ab/\u5207\u5f00\n>>> jieba.suggest_freq('\u53f0\u4e2d', True)\n69\n>>> print('/'.join(jieba.cut('\u300c\u53f0\u4e2d\u300d\u6b63\u786e\u5e94\u8be5\u4e0d\u4f1a\u88ab\u5207\u5f00', HMM=False)))\n\u300c/\u53f0\u4e2d/\u300d/\u6b63\u786e/\u5e94\u8be5/\u4e0d\u4f1a/\u88ab/\u5207\u5f00\n```\n\n* \"\u901a\u8fc7\u7528\u6237\u81ea\u5b9a\u4e49\u8bcd\u5178\u6765\u589e\u5f3a\u6b67\u4e49\u7ea0\u9519\u80fd\u529b\" --- https://github.com/fxsjy/jieba/issues/14\n\n3. \u5173\u952e\u8bcd\u63d0\u53d6\n-------------\n### \u57fa\u4e8e TF-IDF \u7b97\u6cd5\u7684\u5173\u952e\u8bcd\u62bd\u53d6\n\n`import jieba.analyse`\n\n* jieba.analyse.extract_tags(sentence, topK=20, withWeight=False, allowPOS=())\n  * sentence \u4e3a\u5f85\u63d0\u53d6\u7684\u6587\u672c\n  * topK \u4e3a\u8fd4\u56de\u51e0\u4e2a TF/IDF \u6743\u91cd\u6700\u5927\u7684\u5173\u952e\u8bcd\uff0c\u9ed8\u8ba4\u503c\u4e3a 20\n  * withWeight \u4e3a\u662f\u5426\u4e00\u5e76\u8fd4\u56de\u5173\u952e\u8bcd\u6743\u91cd\u503c\uff0c\u9ed8\u8ba4\u503c\u4e3a False\n  * allowPOS \u4ec5\u5305\u62ec\u6307\u5b9a\u8bcd\u6027\u7684\u8bcd\uff0c\u9ed8\u8ba4\u503c\u4e3a\u7a7a\uff0c\u5373\u4e0d\u7b5b\u9009\n* jieba.analyse.TFIDF(idf_path=None) \u65b0\u5efa TFIDF \u5b9e\u4f8b\uff0cidf_path \u4e3a IDF \u9891\u7387\u6587\u4ef6\n\n\u4ee3\u7801\u793a\u4f8b \uff08\u5173\u952e\u8bcd\u63d0\u53d6\uff09\n\nhttps://github.com/fxsjy/jieba/blob/master/test/extract_tags.py\n\n\u5173\u952e\u8bcd\u63d0\u53d6\u6240\u4f7f\u7528\u9006\u5411\u6587\u4ef6\u9891\u7387\uff08IDF\uff09\u6587\u672c\u8bed\u6599\u5e93\u53ef\u4ee5\u5207\u6362\u6210\u81ea\u5b9a\u4e49\u8bed\u6599\u5e93\u7684\u8def\u5f84\n\n* \u7528\u6cd5\uff1a jieba.analyse.set_idf_path(file_name) # file_name\u4e3a\u81ea\u5b9a\u4e49\u8bed\u6599\u5e93\u7684\u8def\u5f84\n* \u81ea\u5b9a\u4e49\u8bed\u6599\u5e93\u793a\u4f8b\uff1ahttps://github.com/fxsjy/jieba/blob/master/extra_dict/idf.txt.big\n* \u7528\u6cd5\u793a\u4f8b\uff1ahttps://github.com/fxsjy/jieba/blob/master/test/extract_tags_idfpath.py\n\n\u5173\u952e\u8bcd\u63d0\u53d6\u6240\u4f7f\u7528\u505c\u6b62\u8bcd\uff08Stop Words\uff09\u6587\u672c\u8bed\u6599\u5e93\u53ef\u4ee5\u5207\u6362\u6210\u81ea\u5b9a\u4e49\u8bed\u6599\u5e93\u7684\u8def\u5f84\n\n* \u7528\u6cd5\uff1a jieba.analyse.set_stop_words(file_name) # file_name\u4e3a\u81ea\u5b9a\u4e49\u8bed\u6599\u5e93\u7684\u8def\u5f84\n* \u81ea\u5b9a\u4e49\u8bed\u6599\u5e93\u793a\u4f8b\uff1ahttps://github.com/fxsjy/jieba/blob/master/extra_dict/stop_words.txt\n* \u7528\u6cd5\u793a\u4f8b\uff1ahttps://github.com/fxsjy/jieba/blob/master/test/extract_tags_stop_words.py\n\n\u5173\u952e\u8bcd\u4e00\u5e76\u8fd4\u56de\u5173\u952e\u8bcd\u6743\u91cd\u503c\u793a\u4f8b\n\n* \u7528\u6cd5\u793a\u4f8b\uff1ahttps://github.com/fxsjy/jieba/blob/master/test/extract_tags_with_weight.py\n\n### \u57fa\u4e8e TextRank \u7b97\u6cd5\u7684\u5173\u952e\u8bcd\u62bd\u53d6\n\n* jieba.analyse.textrank(sentence, topK=20, withWeight=False, allowPOS=('ns', 'n', 'vn', 'v')) \u76f4\u63a5\u4f7f\u7528\uff0c\u63a5\u53e3\u76f8\u540c\uff0c\u6ce8\u610f\u9ed8\u8ba4\u8fc7\u6ee4\u8bcd\u6027\u3002\n* jieba.analyse.TextRank() \u65b0\u5efa\u81ea\u5b9a\u4e49 TextRank \u5b9e\u4f8b\n\n\u7b97\u6cd5\u8bba\u6587\uff1a [TextRank: Bringing Order into Texts](http://web.eecs.umich.edu/~mihalcea/papers/mihalcea.emnlp04.pdf)\n\n#### \u57fa\u672c\u601d\u60f3:\n\n1. \u5c06\u5f85\u62bd\u53d6\u5173\u952e\u8bcd\u7684\u6587\u672c\u8fdb\u884c\u5206\u8bcd\n2. \u4ee5\u56fa\u5b9a\u7a97\u53e3\u5927\u5c0f(\u9ed8\u8ba4\u4e3a5\uff0c\u901a\u8fc7span\u5c5e\u6027\u8c03\u6574)\uff0c\u8bcd\u4e4b\u95f4\u7684\u5171\u73b0\u5173\u7cfb\uff0c\u6784\u5efa\u56fe\n3. \u8ba1\u7b97\u56fe\u4e2d\u8282\u70b9\u7684PageRank\uff0c\u6ce8\u610f\u662f\u65e0\u5411\u5e26\u6743\u56fe\n\n#### \u4f7f\u7528\u793a\u4f8b:\n\n\u89c1 [test/demo.py](https://github.com/fxsjy/jieba/blob/master/test/demo.py)\n\n4. \u8bcd\u6027\u6807\u6ce8\n-----------\n* `jieba.posseg.POSTokenizer(tokenizer=None)` \u65b0\u5efa\u81ea\u5b9a\u4e49\u5206\u8bcd\u5668\uff0c`tokenizer` \u53c2\u6570\u53ef\u6307\u5b9a\u5185\u90e8\u4f7f\u7528\u7684 `jieba.Tokenizer` \u5206\u8bcd\u5668\u3002`jieba.posseg.dt` \u4e3a\u9ed8\u8ba4\u8bcd\u6027\u6807\u6ce8\u5206\u8bcd\u5668\u3002\n* \u6807\u6ce8\u53e5\u5b50\u5206\u8bcd\u540e\u6bcf\u4e2a\u8bcd\u7684\u8bcd\u6027\uff0c\u91c7\u7528\u548c ictclas \u517c\u5bb9\u7684\u6807\u8bb0\u6cd5\u3002\n* \u9664\u4e86jieba\u9ed8\u8ba4\u5206\u8bcd\u6a21\u5f0f\uff0c\u63d0\u4f9bpaddle\u6a21\u5f0f\u4e0b\u7684\u8bcd\u6027\u6807\u6ce8\u529f\u80fd\u3002paddle\u6a21\u5f0f\u91c7\u7528\u5ef6\u8fdf\u52a0\u8f7d\u65b9\u5f0f\uff0c\u901a\u8fc7enable_paddle()\u5b89\u88c5paddlepaddle-tiny\uff0c\u5e76\u4e14import\u76f8\u5173\u4ee3\u7801\uff1b\n* \u7528\u6cd5\u793a\u4f8b\n\n```pycon\n>>> import jieba\n>>> import jieba.posseg as pseg\n>>> words = pseg.cut(\"\u6211\u7231\u5317\u4eac\u5929\u5b89\u95e8\") #jieba\u9ed8\u8ba4\u6a21\u5f0f\n>>> jieba.enable_paddle() #\u542f\u52a8paddle\u6a21\u5f0f\u3002 0.40\u7248\u4e4b\u540e\u5f00\u59cb\u652f\u6301\uff0c\u65e9\u671f\u7248\u672c\u4e0d\u652f\u6301\n>>> words = pseg.cut(\"\u6211\u7231\u5317\u4eac\u5929\u5b89\u95e8\",use_paddle=True) #paddle\u6a21\u5f0f\n>>> for word, flag in words:\n...    print('%s %s' % (word, flag))\n...\n\u6211 r\n\u7231 v\n\u5317\u4eac ns\n\u5929\u5b89\u95e8 ns\n```\n\npaddle\u6a21\u5f0f\u8bcd\u6027\u6807\u6ce8\u5bf9\u5e94\u8868\u5982\u4e0b\uff1a\n\npaddle\u6a21\u5f0f\u8bcd\u6027\u548c\u4e13\u540d\u7c7b\u522b\u6807\u7b7e\u96c6\u5408\u5982\u4e0b\u8868\uff0c\u5176\u4e2d\u8bcd\u6027\u6807\u7b7e 24 \u4e2a\uff08\u5c0f\u5199\u5b57\u6bcd\uff09\uff0c\u4e13\u540d\u7c7b\u522b\u6807\u7b7e 4 \u4e2a\uff08\u5927\u5199\u5b57\u6bcd\uff09\u3002\n\n| \u6807\u7b7e | \u542b\u4e49     | \u6807\u7b7e | \u542b\u4e49     | \u6807\u7b7e | \u542b\u4e49     | \u6807\u7b7e | \u542b\u4e49     |\n| ---- | -------- | ---- | -------- | ---- | -------- | ---- | -------- |\n| n    | \u666e\u901a\u540d\u8bcd | f    | \u65b9\u4f4d\u540d\u8bcd | s    | \u5904\u6240\u540d\u8bcd | t    | \u65f6\u95f4     |\n| nr   | \u4eba\u540d     | ns   | \u5730\u540d     | nt   | \u673a\u6784\u540d   | nw   | \u4f5c\u54c1\u540d   |\n| nz   | \u5176\u4ed6\u4e13\u540d | v    | \u666e\u901a\u52a8\u8bcd | vd   | \u52a8\u526f\u8bcd   | vn   | \u540d\u52a8\u8bcd   |\n| a    | \u5f62\u5bb9\u8bcd   | ad   | \u526f\u5f62\u8bcd   | an   | \u540d\u5f62\u8bcd   | d    | \u526f\u8bcd     |\n| m    | \u6570\u91cf\u8bcd   | q    | \u91cf\u8bcd     | r    | \u4ee3\u8bcd     | p    | \u4ecb\u8bcd     |\n| c    | \u8fde\u8bcd     | u    | \u52a9\u8bcd     | xc   | \u5176\u4ed6\u865a\u8bcd | w    | \u6807\u70b9\u7b26\u53f7 |\n| PER  | \u4eba\u540d     | LOC  | \u5730\u540d     | ORG  | \u673a\u6784\u540d   | TIME | \u65f6\u95f4     |\n\n\n5. \u5e76\u884c\u5206\u8bcd\n-----------\n* \u539f\u7406\uff1a\u5c06\u76ee\u6807\u6587\u672c\u6309\u884c\u5206\u9694\u540e\uff0c\u628a\u5404\u884c\u6587\u672c\u5206\u914d\u5230\u591a\u4e2a Python \u8fdb\u7a0b\u5e76\u884c\u5206\u8bcd\uff0c\u7136\u540e\u5f52\u5e76\u7ed3\u679c\uff0c\u4ece\u800c\u83b7\u5f97\u5206\u8bcd\u901f\u5ea6\u7684\u53ef\u89c2\u63d0\u5347\n* \u57fa\u4e8e python \u81ea\u5e26\u7684 multiprocessing \u6a21\u5757\uff0c\u76ee\u524d\u6682\u4e0d\u652f\u6301 Windows\n* \u7528\u6cd5\uff1a\n    * `jieba.enable_parallel(4)` # \u5f00\u542f\u5e76\u884c\u5206\u8bcd\u6a21\u5f0f\uff0c\u53c2\u6570\u4e3a\u5e76\u884c\u8fdb\u7a0b\u6570\n    * `jieba.disable_parallel()` # \u5173\u95ed\u5e76\u884c\u5206\u8bcd\u6a21\u5f0f\n\n* \u4f8b\u5b50\uff1ahttps://github.com/fxsjy/jieba/blob/master/test/parallel/test_file.py\n\n* \u5b9e\u9a8c\u7ed3\u679c\uff1a\u5728 4 \u6838 3.4GHz Linux \u673a\u5668\u4e0a\uff0c\u5bf9\u91d1\u5eb8\u5168\u96c6\u8fdb\u884c\u7cbe\u786e\u5206\u8bcd\uff0c\u83b7\u5f97\u4e86 1MB/s \u7684\u901f\u5ea6\uff0c\u662f\u5355\u8fdb\u7a0b\u7248\u7684 3.3 \u500d\u3002\n\n* **\u6ce8\u610f**\uff1a\u5e76\u884c\u5206\u8bcd\u4ec5\u652f\u6301\u9ed8\u8ba4\u5206\u8bcd\u5668 `jieba.dt` \u548c `jieba.posseg.dt`\u3002\n\n6. Tokenize\uff1a\u8fd4\u56de\u8bcd\u8bed\u5728\u539f\u6587\u7684\u8d77\u6b62\u4f4d\u7f6e\n----------------------------------\n* \u6ce8\u610f\uff0c\u8f93\u5165\u53c2\u6570\u53ea\u63a5\u53d7 unicode\n* \u9ed8\u8ba4\u6a21\u5f0f\n\n```python\nresult = jieba.tokenize(u'\u6c38\u548c\u670d\u88c5\u9970\u54c1\u6709\u9650\u516c\u53f8')\nfor tk in result:\n    print(\"word %s\\t\\t start: %d \\t\\t end:%d\" % (tk[0],tk[1],tk[2]))\n```\n\n```\nword \u6c38\u548c                start: 0                end:2\nword \u670d\u88c5                start: 2                end:4\nword \u9970\u54c1                start: 4                end:6\nword \u6709\u9650\u516c\u53f8            start: 6                end:10\n\n```\n\n* \u641c\u7d22\u6a21\u5f0f\n\n```python\nresult = jieba.tokenize(u'\u6c38\u548c\u670d\u88c5\u9970\u54c1\u6709\u9650\u516c\u53f8', mode='search')\nfor tk in result:\n    print(\"word %s\\t\\t start: %d \\t\\t end:%d\" % (tk[0],tk[1],tk[2]))\n```\n\n```\nword \u6c38\u548c                start: 0                end:2\nword \u670d\u88c5                start: 2                end:4\nword \u9970\u54c1                start: 4                end:6\nword \u6709\u9650                start: 6                end:8\nword \u516c\u53f8                start: 8                end:10\nword \u6709\u9650\u516c\u53f8            start: 6                end:10\n```\n\n\n7. ChineseAnalyzer for Whoosh \u641c\u7d22\u5f15\u64ce\n--------------------------------------------\n* \u5f15\u7528\uff1a `from jieba.analyse import ChineseAnalyzer`\n* \u7528\u6cd5\u793a\u4f8b\uff1ahttps://github.com/fxsjy/jieba/blob/master/test/test_whoosh.py\n\n8. \u547d\u4ee4\u884c\u5206\u8bcd\n-------------------\n\n\u4f7f\u7528\u793a\u4f8b\uff1a`python -m jieba news.txt > cut_result.txt`\n\n\u547d\u4ee4\u884c\u9009\u9879\uff08\u7ffb\u8bd1\uff09\uff1a\n\n    \u4f7f\u7528: python -m jieba [options] filename\n\n    \u7ed3\u5df4\u547d\u4ee4\u884c\u754c\u9762\u3002\n\n    \u56fa\u5b9a\u53c2\u6570:\n      filename              \u8f93\u5165\u6587\u4ef6\n\n    \u53ef\u9009\u53c2\u6570:\n      -h, --help            \u663e\u793a\u6b64\u5e2e\u52a9\u4fe1\u606f\u5e76\u9000\u51fa\n      -d [DELIM], --delimiter [DELIM]\n                            \u4f7f\u7528 DELIM \u5206\u9694\u8bcd\u8bed\uff0c\u800c\u4e0d\u662f\u7528\u9ed8\u8ba4\u7684' / '\u3002\n                            \u82e5\u4e0d\u6307\u5b9a DELIM\uff0c\u5219\u4f7f\u7528\u4e00\u4e2a\u7a7a\u683c\u5206\u9694\u3002\n      -p [DELIM], --pos [DELIM]\n                            \u542f\u7528\u8bcd\u6027\u6807\u6ce8\uff1b\u5982\u679c\u6307\u5b9a DELIM\uff0c\u8bcd\u8bed\u548c\u8bcd\u6027\u4e4b\u95f4\n                            \u7528\u5b83\u5206\u9694\uff0c\u5426\u5219\u7528 _ \u5206\u9694\n      -D DICT, --dict DICT  \u4f7f\u7528 DICT \u4ee3\u66ff\u9ed8\u8ba4\u8bcd\u5178\n      -u USER_DICT, --user-dict USER_DICT\n                            \u4f7f\u7528 USER_DICT \u4f5c\u4e3a\u9644\u52a0\u8bcd\u5178\uff0c\u4e0e\u9ed8\u8ba4\u8bcd\u5178\u6216\u81ea\u5b9a\u4e49\u8bcd\u5178\u914d\u5408\u4f7f\u7528\n      -a, --cut-all         \u5168\u6a21\u5f0f\u5206\u8bcd\uff08\u4e0d\u652f\u6301\u8bcd\u6027\u6807\u6ce8\uff09\n      -n, --no-hmm          \u4e0d\u4f7f\u7528\u9690\u542b\u9a6c\u5c14\u53ef\u592b\u6a21\u578b\n      -q, --quiet           \u4e0d\u8f93\u51fa\u8f7d\u5165\u4fe1\u606f\u5230 STDERR\n      -V, --version         \u663e\u793a\u7248\u672c\u4fe1\u606f\u5e76\u9000\u51fa\n\n    \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u6587\u4ef6\u540d\uff0c\u5219\u4f7f\u7528\u6807\u51c6\u8f93\u5165\u3002\n\n`--help` \u9009\u9879\u8f93\u51fa\uff1a\n\n    $> python -m jieba --help\n    Jieba command line interface.\n\n    positional arguments:\n      filename              input file\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -d [DELIM], --delimiter [DELIM]\n                            use DELIM instead of ' / ' for word delimiter; or a\n                            space if it is used without DELIM\n      -p [DELIM], --pos [DELIM]\n                            enable POS tagging; if DELIM is specified, use DELIM\n                            instead of '_' for POS delimiter\n      -D DICT, --dict DICT  use DICT as dictionary\n      -u USER_DICT, --user-dict USER_DICT\n                            use USER_DICT together with the default dictionary or\n                            DICT (if specified)\n      -a, --cut-all         full pattern cutting (ignored with POS tagging)\n      -n, --no-hmm          don't use the Hidden Markov Model\n      -q, --quiet           don't print loading messages to stderr\n      -V, --version         show program's version number and exit\n\n    If no filename specified, use STDIN instead.\n\n\u5ef6\u8fdf\u52a0\u8f7d\u673a\u5236\n------------\n\njieba \u91c7\u7528\u5ef6\u8fdf\u52a0\u8f7d\uff0c`import jieba` \u548c `jieba.Tokenizer()` \u4e0d\u4f1a\u7acb\u5373\u89e6\u53d1\u8bcd\u5178\u7684\u52a0\u8f7d\uff0c\u4e00\u65e6\u6709\u5fc5\u8981\u624d\u5f00\u59cb\u52a0\u8f7d\u8bcd\u5178\u6784\u5efa\u524d\u7f00\u5b57\u5178\u3002\u5982\u679c\u4f60\u60f3\u624b\u5de5\u521d\u59cb jieba\uff0c\u4e5f\u53ef\u4ee5\u624b\u52a8\u521d\u59cb\u5316\u3002\n\n    import jieba\n    jieba.initialize()  # \u624b\u52a8\u521d\u59cb\u5316\uff08\u53ef\u9009\uff09\n\n\n\u5728 0.28 \u4e4b\u524d\u7684\u7248\u672c\u662f\u4e0d\u80fd\u6307\u5b9a\u4e3b\u8bcd\u5178\u7684\u8def\u5f84\u7684\uff0c\u6709\u4e86\u5ef6\u8fdf\u52a0\u8f7d\u673a\u5236\u540e\uff0c\u4f60\u53ef\u4ee5\u6539\u53d8\u4e3b\u8bcd\u5178\u7684\u8def\u5f84:\n\n    jieba.set_dictionary('data/dict.txt.big')\n\n\u4f8b\u5b50\uff1a https://github.com/fxsjy/jieba/blob/master/test/test_change_dictpath.py\n\n\u5176\u4ed6\u8bcd\u5178\n========\n1. \u5360\u7528\u5185\u5b58\u8f83\u5c0f\u7684\u8bcd\u5178\u6587\u4ef6\nhttps://github.com/fxsjy/jieba/raw/master/extra_dict/dict.txt.small\n\n2. \u652f\u6301\u7e41\u4f53\u5206\u8bcd\u66f4\u597d\u7684\u8bcd\u5178\u6587\u4ef6\nhttps://github.com/fxsjy/jieba/raw/master/extra_dict/dict.txt.big\n\n\u4e0b\u8f7d\u4f60\u6240\u9700\u8981\u7684\u8bcd\u5178\uff0c\u7136\u540e\u8986\u76d6 jieba/dict.txt \u5373\u53ef\uff1b\u6216\u8005\u7528 `jieba.set_dictionary('data/dict.txt.big')`\n\n\u5176\u4ed6\u8bed\u8a00\u5b9e\u73b0\n==========\n\n\u7ed3\u5df4\u5206\u8bcd Java \u7248\u672c\n----------------\n\u4f5c\u8005\uff1apiaolingxue\n\u5730\u5740\uff1ahttps://github.com/huaban/jieba-analysis\n\n\u7ed3\u5df4\u5206\u8bcd C++ \u7248\u672c\n----------------\n\u4f5c\u8005\uff1ayanyiwu\n\u5730\u5740\uff1ahttps://github.com/yanyiwu/cppjieba\n\n\u7ed3\u5df4\u5206\u8bcd Rust \u7248\u672c\n----------------\n\u4f5c\u8005\uff1amessense, MnO2\n\u5730\u5740\uff1ahttps://github.com/messense/jieba-rs\n\n\u7ed3\u5df4\u5206\u8bcd Node.js \u7248\u672c\n----------------\n\u4f5c\u8005\uff1ayanyiwu\n\u5730\u5740\uff1ahttps://github.com/yanyiwu/nodejieba\n\n\u7ed3\u5df4\u5206\u8bcd Erlang \u7248\u672c\n----------------\n\u4f5c\u8005\uff1afalood\n\u5730\u5740\uff1ahttps://github.com/falood/exjieba\n\n\u7ed3\u5df4\u5206\u8bcd R \u7248\u672c\n----------------\n\u4f5c\u8005\uff1aqinwf\n\u5730\u5740\uff1ahttps://github.com/qinwf/jiebaR\n\n\u7ed3\u5df4\u5206\u8bcd iOS \u7248\u672c\n----------------\n\u4f5c\u8005\uff1ayanyiwu\n\u5730\u5740\uff1ahttps://github.com/yanyiwu/iosjieba\n\n\u7ed3\u5df4\u5206\u8bcd PHP \u7248\u672c\n----------------\n\u4f5c\u8005\uff1afukuball\n\u5730\u5740\uff1ahttps://github.com/fukuball/jieba-php\n\n\u7ed3\u5df4\u5206\u8bcd .NET(C#) \u7248\u672c\n----------------\n\u4f5c\u8005\uff1aanderscui\n\u5730\u5740\uff1ahttps://github.com/anderscui/jieba.NET/\n\n\u7ed3\u5df4\u5206\u8bcd Go \u7248\u672c\n----------------\n\n+ \u4f5c\u8005: wangbin \u5730\u5740: https://github.com/wangbin/jiebago\n+ \u4f5c\u8005: yanyiwu \u5730\u5740: https://github.com/yanyiwu/gojieba\n\n\u7ed3\u5df4\u5206\u8bcdAndroid\u7248\u672c\n------------------\n+ \u4f5c\u8005   Dongliang.W  \u5730\u5740\uff1ahttps://github.com/452896915/jieba-android\n\n\n\u53cb\u60c5\u94fe\u63a5\n=========\n* https://github.com/baidu/lac   \u767e\u5ea6\u4e2d\u6587\u8bcd\u6cd5\u5206\u6790\uff08\u5206\u8bcd+\u8bcd\u6027+\u4e13\u540d\uff09\u7cfb\u7edf\n* https://github.com/baidu/AnyQ  \u767e\u5ea6FAQ\u81ea\u52a8\u95ee\u7b54\u7cfb\u7edf\n* https://github.com/baidu/Senta \u767e\u5ea6\u60c5\u611f\u8bc6\u522b\u7cfb\u7edf\n\n\u7cfb\u7edf\u96c6\u6210\n========\n1. Solr: https://github.com/sing1ee/jieba-solr\n\n\u5206\u8bcd\u901f\u5ea6\n=========\n* 1.5 MB / Second in Full Mode\n* 400 KB / Second in Default Mode\n* \u6d4b\u8bd5\u73af\u5883: Intel(R) Core(TM) i7-2600 CPU @ 3.4GHz\uff1b\u300a\u56f4\u57ce\u300b.txt\n\n\u5e38\u89c1\u95ee\u9898\n=========\n\n## 1. \u6a21\u578b\u7684\u6570\u636e\u662f\u5982\u4f55\u751f\u6210\u7684\uff1f\n\n\u8be6\u89c1\uff1a https://github.com/fxsjy/jieba/issues/7\n\n## 2. \u201c\u53f0\u4e2d\u201d\u603b\u662f\u88ab\u5207\u6210\u201c\u53f0 \u4e2d\u201d\uff1f\uff08\u4ee5\u53ca\u7c7b\u4f3c\u60c5\u51b5\uff09\n\nP(\u53f0\u4e2d) \uff1c P(\u53f0)\u00d7P(\u4e2d)\uff0c\u201c\u53f0\u4e2d\u201d\u8bcd\u9891\u4e0d\u591f\u5bfc\u81f4\u5176\u6210\u8bcd\u6982\u7387\u8f83\u4f4e\n\n\u89e3\u51b3\u65b9\u6cd5\uff1a\u5f3a\u5236\u8c03\u9ad8\u8bcd\u9891\n\n`jieba.add_word('\u53f0\u4e2d')` \u6216\u8005 `jieba.suggest_freq('\u53f0\u4e2d', True)`\n\n## 3. \u201c\u4eca\u5929\u5929\u6c14 \u4e0d\u9519\u201d\u5e94\u8be5\u88ab\u5207\u6210\u201c\u4eca\u5929 \u5929\u6c14 \u4e0d\u9519\u201d\uff1f\uff08\u4ee5\u53ca\u7c7b\u4f3c\u60c5\u51b5\uff09\n\n\u89e3\u51b3\u65b9\u6cd5\uff1a\u5f3a\u5236\u8c03\u4f4e\u8bcd\u9891\n\n`jieba.suggest_freq(('\u4eca\u5929', '\u5929\u6c14'), True)`\n\n\u6216\u8005\u76f4\u63a5\u5220\u9664\u8be5\u8bcd `jieba.del_word('\u4eca\u5929\u5929\u6c14')`\n\n## 4. \u5207\u51fa\u4e86\u8bcd\u5178\u4e2d\u6ca1\u6709\u7684\u8bcd\u8bed\uff0c\u6548\u679c\u4e0d\u7406\u60f3\uff1f\n\n\u89e3\u51b3\u65b9\u6cd5\uff1a\u5173\u95ed\u65b0\u8bcd\u53d1\u73b0\n\n`jieba.cut('\u4e30\u7530\u592a\u7701\u4e86', HMM=False)`\n`jieba.cut('\u6211\u4eec\u4e2d\u51fa\u4e86\u4e00\u4e2a\u53db\u5f92', HMM=False)`\n\n**\u66f4\u591a\u95ee\u9898\u8bf7\u70b9\u51fb**\uff1ahttps://github.com/fxsjy/jieba/issues?sort=updated&state=closed\n\n\u4fee\u8ba2\u5386\u53f2\n==========\nhttps://github.com/fxsjy/jieba/blob/master/Changelog\n\n--------------------\n\njieba\n========\n\"Jieba\" (Chinese for \"to stutter\") Chinese text segmentation: built to be the best Python Chinese word segmentation module.\n\nFeatures\n========\n* Support three types of segmentation mode:\n\n1. Accurate Mode attempts to cut the sentence into the most accurate segmentations, which is suitable for text analysis.\n2. Full Mode gets all the possible words from the sentence. Fast but not accurate.\n3. Search Engine Mode, based on the Accurate Mode, attempts to cut long words into several short words, which can raise the recall rate. Suitable for search engines.\n\n* Supports Traditional Chinese\n* Supports customized dictionaries\n* MIT License\n\n\nOnline demo\n=========\nhttp://jiebademo.ap01.aws.af.cm/\n\n(Powered by Appfog)\n\nUsage\n========\n* Fully automatic installation: `easy_install jieba` or `pip install jieba`\n* Semi-automatic installation: Download http://pypi.python.org/pypi/jieba/ , run `python setup.py install` after extracting.\n* Manual installation: place the `jieba` directory in the current directory or python `site-packages` directory.\n* `import jieba`.\n\nAlgorithm\n========\n* Based on a prefix dictionary structure to achieve efficient word graph scanning. Build a directed acyclic graph (DAG) for all possible word combinations.\n* Use dynamic programming to find the most probable combination based on the word frequency.\n* For unknown words, a HMM-based model is used with the Viterbi algorithm.\n\nMain Functions\n==============\n\n1. Cut\n--------\n* The `jieba.cut` function accepts three input parameters: the first parameter is the string to be cut; the second parameter is `cut_all`, controlling the cut mode; the third parameter is to control whether to use the Hidden Markov Model.\n* `jieba.cut_for_search` accepts two parameter: the string to be cut; whether to use the Hidden Markov Model. This will cut the sentence into short words suitable for search engines.\n* The input string can be an unicode/str object, or a str/bytes object which is encoded in UTF-8 or GBK. Note that using GBK encoding is not recommended because it may be unexpectly decoded as UTF-8.\n* `jieba.cut` and `jieba.cut_for_search` returns an generator, from which you can use a `for` loop to get the segmentation result (in unicode).\n* `jieba.lcut` and `jieba.lcut_for_search` returns a list.\n* `jieba.Tokenizer(dictionary=DEFAULT_DICT)` creates a new customized Tokenizer, which enables you to use different dictionaries at the same time. `jieba.dt` is the default Tokenizer, to which almost all global functions are mapped.\n\n\n**Code example: segmentation**\n\n```python\n#encoding=utf-8\nimport jieba\n\nseg_list = jieba.cut(\"\u6211\u6765\u5230\u5317\u4eac\u6e05\u534e\u5927\u5b66\", cut_all=True)\nprint(\"Full Mode: \" + \"/ \".join(seg_list))  # \u5168\u6a21\u5f0f\n\nseg_list = jieba.cut(\"\u6211\u6765\u5230\u5317\u4eac\u6e05\u534e\u5927\u5b66\", cut_all=False)\nprint(\"Default Mode: \" + \"/ \".join(seg_list))  # \u9ed8\u8ba4\u6a21\u5f0f\n\nseg_list = jieba.cut(\"\u4ed6\u6765\u5230\u4e86\u7f51\u6613\u676d\u7814\u5927\u53a6\")\nprint(\", \".join(seg_list))\n\nseg_list = jieba.cut_for_search(\"\u5c0f\u660e\u7855\u58eb\u6bd5\u4e1a\u4e8e\u4e2d\u56fd\u79d1\u5b66\u9662\u8ba1\u7b97\u6240\uff0c\u540e\u5728\u65e5\u672c\u4eac\u90fd\u5927\u5b66\u6df1\u9020\")  # \u641c\u7d22\u5f15\u64ce\u6a21\u5f0f\nprint(\", \".join(seg_list))\n```\n\nOutput:\n\n    [Full Mode]: \u6211/ \u6765\u5230/ \u5317\u4eac/ \u6e05\u534e/ \u6e05\u534e\u5927\u5b66/ \u534e\u5927/ \u5927\u5b66\n\n    [Accurate Mode]: \u6211/ \u6765\u5230/ \u5317\u4eac/ \u6e05\u534e\u5927\u5b66\n\n    [Unknown Words Recognize] \u4ed6, \u6765\u5230, \u4e86, \u7f51\u6613, \u676d\u7814, \u5927\u53a6    (In this case, \"\u676d\u7814\" is not in the dictionary, but is identified by the Viterbi algorithm)\n\n    [Search Engine Mode]\uff1a \u5c0f\u660e, \u7855\u58eb, \u6bd5\u4e1a, \u4e8e, \u4e2d\u56fd, \u79d1\u5b66, \u5b66\u9662, \u79d1\u5b66\u9662, \u4e2d\u56fd\u79d1\u5b66\u9662, \u8ba1\u7b97, \u8ba1\u7b97\u6240, \u540e, \u5728, \u65e5\u672c, \u4eac\u90fd, \u5927\u5b66, \u65e5\u672c\u4eac\u90fd\u5927\u5b66, \u6df1\u9020\n\n\n2. Add a custom dictionary\n----------------------------\n\n### Load dictionary\n\n* Developers can specify their own custom dictionary to be included in the jieba default dictionary. Jieba is able to identify new words, but you can add your own new words can ensure a higher accuracy.\n* Usage\uff1a `jieba.load_userdict(file_name)` # file_name is a file-like object or the path of the custom dictionary\n* The dictionary format is the same as that of `dict.txt`: one word per line; each line is divided into three parts separated by a space: word, word frequency, POS tag. If `file_name` is a path or a file opened in binary mode, the dictionary must be UTF-8 encoded.\n* The word frequency and POS tag can be omitted respectively. The word frequency will be filled with a suitable value if omitted.\n\n**For example:**\n\n```\n\u521b\u65b0\u529e 3 i\n\u4e91\u8ba1\u7b97 5\n\u51f1\u7279\u7433 nz\n\u53f0\u4e2d\n```\n\n\n* Change a Tokenizer's `tmp_dir` and `cache_file` to specify the path of the cache file, for using on a restricted file system.\n\n* Example:\n\n        \u4e91\u8ba1\u7b97 5\n        \u674e\u5c0f\u798f 2\n        \u521b\u65b0\u529e 3\n\n        [Before]\uff1a \u674e\u5c0f\u798f / \u662f / \u521b\u65b0 / \u529e / \u4e3b\u4efb / \u4e5f / \u662f / \u4e91 / \u8ba1\u7b97 / \u65b9\u9762 / \u7684 / \u4e13\u5bb6 /\n\n        [After]\uff1a\u3000\u674e\u5c0f\u798f / \u662f / \u521b\u65b0\u529e / \u4e3b\u4efb / \u4e5f / \u662f / \u4e91\u8ba1\u7b97 / \u65b9\u9762 / \u7684 / \u4e13\u5bb6 /\n\n\n### Modify dictionary\n\n* Use `add_word(word, freq=None, tag=None)` and `del_word(word)` to modify the dictionary dynamically in programs.\n* Use `suggest_freq(segment, tune=True)` to adjust the frequency of a single word so that it can (or cannot) be segmented.\n\n* Note that HMM may affect the final result.\n\nExample:\n\n```pycon\n>>> print('/'.join(jieba.cut('\u5982\u679c\u653e\u5230post\u4e2d\u5c06\u51fa\u9519\u3002', HMM=False)))\n\u5982\u679c/\u653e\u5230/post/\u4e2d\u5c06/\u51fa\u9519/\u3002\n>>> jieba.suggest_freq(('\u4e2d', '\u5c06'), True)\n494\n>>> print('/'.join(jieba.cut('\u5982\u679c\u653e\u5230post\u4e2d\u5c06\u51fa\u9519\u3002', HMM=False)))\n\u5982\u679c/\u653e\u5230/post/\u4e2d/\u5c06/\u51fa\u9519/\u3002\n>>> print('/'.join(jieba.cut('\u300c\u53f0\u4e2d\u300d\u6b63\u786e\u5e94\u8be5\u4e0d\u4f1a\u88ab\u5207\u5f00', HMM=False)))\n\u300c/\u53f0/\u4e2d/\u300d/\u6b63\u786e/\u5e94\u8be5/\u4e0d\u4f1a/\u88ab/\u5207\u5f00\n>>> jieba.suggest_freq('\u53f0\u4e2d', True)\n69\n>>> print('/'.join(jieba.cut('\u300c\u53f0\u4e2d\u300d\u6b63\u786e\u5e94\u8be5\u4e0d\u4f1a\u88ab\u5207\u5f00', HMM=False)))\n\u300c/\u53f0\u4e2d/\u300d/\u6b63\u786e/\u5e94\u8be5/\u4e0d\u4f1a/\u88ab/\u5207\u5f00\n```\n\n3. Keyword Extraction\n-----------------------\n`import jieba.analyse`\n\n* `jieba.analyse.extract_tags(sentence, topK=20, withWeight=False, allowPOS=())`\n  * `sentence`: the text to be extracted\n  * `topK`: return how many keywords with the highest TF/IDF weights. The default value is 20\n  * `withWeight`: whether return TF/IDF weights with the keywords. The default value is False\n  * `allowPOS`: filter words with which POSs are included. Empty for no filtering.\n* `jieba.analyse.TFIDF(idf_path=None)` creates a new TFIDF instance, `idf_path` specifies IDF file path.\n\nExample (keyword extraction)\n\nhttps://github.com/fxsjy/jieba/blob/master/test/extract_tags.py\n\nDevelopers can specify their own custom IDF corpus in jieba keyword extraction\n\n* Usage\uff1a `jieba.analyse.set_idf_path(file_name) # file_name is the path for the custom corpus`\n* Custom Corpus Sample\uff1ahttps://github.com/fxsjy/jieba/blob/master/extra_dict/idf.txt.big\n* Sample Code\uff1ahttps://github.com/fxsjy/jieba/blob/master/test/extract_tags_idfpath.py\n\nDevelopers can specify their own custom stop words corpus in jieba keyword extraction\n\n* Usage\uff1a `jieba.analyse.set_stop_words(file_name) # file_name is the path for the custom corpus`\n* Custom Corpus Sample\uff1ahttps://github.com/fxsjy/jieba/blob/master/extra_dict/stop_words.txt\n* Sample Code\uff1ahttps://github.com/fxsjy/jieba/blob/master/test/extract_tags_stop_words.py\n\nThere's also a [TextRank](http://web.eecs.umich.edu/~mihalcea/papers/mihalcea.emnlp04.pdf) implementation available.\n\nUse: `jieba.analyse.textrank(sentence, topK=20, withWeight=False, allowPOS=('ns', 'n', 'vn', 'v'))`\n\nNote that it filters POS by default.\n\n`jieba.analyse.TextRank()` creates a new TextRank instance.\n\n4. Part of Speech Tagging\n-------------------------\n* `jieba.posseg.POSTokenizer(tokenizer=None)` creates a new customized Tokenizer. `tokenizer` specifies the jieba.Tokenizer to internally use. `jieba.posseg.dt` is the default POSTokenizer.\n* Tags the POS of each word after segmentation, using labels compatible with ictclas.\n* Example:\n\n```pycon\n>>> import jieba.posseg as pseg\n>>> words = pseg.cut(\"\u6211\u7231\u5317\u4eac\u5929\u5b89\u95e8\")\n>>> for w in words:\n...    print('%s %s' % (w.word, w.flag))\n...\n\u6211 r\n\u7231 v\n\u5317\u4eac ns\n\u5929\u5b89\u95e8 ns\n```\n\n5. Parallel Processing\n----------------------\n* Principle: Split target text by line, assign the lines into multiple Python processes, and then merge the results, which is considerably faster.\n* Based on the multiprocessing module of Python.\n* Usage:\n    * `jieba.enable_parallel(4)` # Enable parallel processing. The parameter is the number of processes.\n    * `jieba.disable_parallel()` # Disable parallel processing.\n\n* Example:\n    https://github.com/fxsjy/jieba/blob/master/test/parallel/test_file.py\n\n* Result: On a four-core 3.4GHz Linux machine, do accurate word segmentation on Complete Works of Jin Yong, and the speed reaches 1MB/s, which is 3.3 times faster than the single-process version.\n\n* **Note** that parallel processing supports only default tokenizers, `jieba.dt` and `jieba.posseg.dt`.\n\n6. Tokenize: return words with position\n----------------------------------------\n* The input must be unicode\n* Default mode\n\n```python\nresult = jieba.tokenize(u'\u6c38\u548c\u670d\u88c5\u9970\u54c1\u6709\u9650\u516c\u53f8')\nfor tk in result:\n    print(\"word %s\\t\\t start: %d \\t\\t end:%d\" % (tk[0],tk[1],tk[2]))\n```\n\n```\nword \u6c38\u548c                start: 0                end:2\nword \u670d\u88c5                start: 2                end:4\nword \u9970\u54c1                start: 4                end:6\nword \u6709\u9650\u516c\u53f8            start: 6                end:10\n\n```\n\n* Search mode\n\n```python\nresult = jieba.tokenize(u'\u6c38\u548c\u670d\u88c5\u9970\u54c1\u6709\u9650\u516c\u53f8',mode='search')\nfor tk in result:\n    print(\"word %s\\t\\t start: %d \\t\\t end:%d\" % (tk[0],tk[1],tk[2]))\n```\n\n```\nword \u6c38\u548c                start: 0                end:2\nword \u670d\u88c5                start: 2                end:4\nword \u9970\u54c1                start: 4                end:6\nword \u6709\u9650                start: 6                end:8\nword \u516c\u53f8                start: 8                end:10\nword \u6709\u9650\u516c\u53f8            start: 6                end:10\n```\n\n\n7. ChineseAnalyzer for Whoosh\n-------------------------------\n* `from jieba.analyse import ChineseAnalyzer`\n* Example: https://github.com/fxsjy/jieba/blob/master/test/test_whoosh.py\n\n8. Command Line Interface\n--------------------------------\n\n    $> python -m jieba --help\n    Jieba command line interface.\n\n    positional arguments:\n      filename              input file\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -d [DELIM], --delimiter [DELIM]\n                            use DELIM instead of ' / ' for word delimiter; or a\n                            space if it is used without DELIM\n      -p [DELIM], --pos [DELIM]\n                            enable POS tagging; if DELIM is specified, use DELIM\n                            instead of '_' for POS delimiter\n      -D DICT, --dict DICT  use DICT as dictionary\n      -u USER_DICT, --user-dict USER_DICT\n                            use USER_DICT together with the default dictionary or\n                            DICT (if specified)\n      -a, --cut-all         full pattern cutting (ignored with POS tagging)\n      -n, --no-hmm          don't use the Hidden Markov Model\n      -q, --quiet           don't print loading messages to stderr\n      -V, --version         show program's version number and exit\n\n    If no filename specified, use STDIN instead.\n\nInitialization\n---------------\nBy default, Jieba don't build the prefix dictionary unless it's necessary. This takes 1-3 seconds, after which it is not initialized again. If you want to initialize Jieba manually, you can call:\n\n    import jieba\n    jieba.initialize()  # (optional)\n\nYou can also specify the dictionary (not supported before version 0.28) :\n\n    jieba.set_dictionary('data/dict.txt.big')\n\n\nUsing Other Dictionaries\n===========================\n\nIt is possible to use your own dictionary with Jieba, and there are also two dictionaries ready for download:\n\n1. A smaller dictionary for a smaller memory footprint:\nhttps://github.com/fxsjy/jieba/raw/master/extra_dict/dict.txt.small\n\n2. There is also a bigger dictionary that has better support for traditional Chinese (\u7e41\u9ad4):\nhttps://github.com/fxsjy/jieba/raw/master/extra_dict/dict.txt.big\n\nBy default, an in-between dictionary is used, called `dict.txt` and included in the distribution.\n\nIn either case, download the file you want, and then call `jieba.set_dictionary('data/dict.txt.big')` or just replace the existing `dict.txt`.\n\nSegmentation speed\n=========\n* 1.5 MB / Second in Full Mode\n* 400 KB / Second in Default Mode\n* Test Env: Intel(R) Core(TM) i7-2600 CPU @ 3.4GHz\uff1b\u300a\u56f4\u57ce\u300b.txt\n\n",
        "releases": [
            {
                "name": "v0.42.1 Released",
                "date": "2020-01-20T14:23:50Z"
            },
            {
                "name": "v0.42 Released",
                "date": "2020-01-13T13:27:19Z"
            },
            {
                "name": "v0.41 Released",
                "date": "2020-01-09T09:12:14Z"
            },
            {
                "name": "v0.40 Released (paddlepaddle inside)",
                "date": "2019-12-25T02:52:54Z"
            },
            {
                "name": "",
                "date": "2017-08-31T06:04:14Z"
            },
            {
                "name": "",
                "date": "2015-04-01T11:30:44Z"
            },
            {
                "name": "version 0.33",
                "date": "2014-08-31T12:04:47Z"
            },
            {
                "name": "",
                "date": "2014-02-18T08:47:53Z"
            },
            {
                "name": "version 0.31",
                "date": "2013-07-29T02:10:58Z"
            }
        ]
    }
}