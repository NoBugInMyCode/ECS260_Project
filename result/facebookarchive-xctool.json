{
    "https://api.github.com/repos/facebookarchive/xctool": {
        "forks": 737,
        "watchers": 6906,
        "stars": 6906,
        "languages": {
            "Objective-C": 1405422,
            "Objective-C++": 23795,
            "Shell": 22601,
            "Python": 12165,
            "C++": 9060,
            "C": 4082,
            "Rich Text Format": 1308,
            "Makefile": 889,
            "Swift": 448,
            "Ruby": 372
        },
        "commits": [
            "2019-12-11T08:20:53Z",
            "2019-12-10T15:27:00Z",
            "2019-12-09T15:09:04Z",
            "2019-12-09T14:57:40Z",
            "2019-12-09T14:52:57Z",
            "2019-12-09T14:41:14Z",
            "2019-12-09T09:13:50Z",
            "2019-12-06T22:44:14Z",
            "2019-09-28T19:06:20Z",
            "2019-09-27T08:57:04Z",
            "2019-09-26T10:49:28Z",
            "2019-09-16T20:56:56Z",
            "2019-08-29T23:55:51Z",
            "2019-05-23T19:06:22Z",
            "2019-05-16T22:26:52Z",
            "2019-05-16T22:30:49Z",
            "2019-05-16T22:06:39Z",
            "2019-05-16T21:48:34Z",
            "2019-05-16T19:13:31Z",
            "2019-05-16T19:12:27Z",
            "2019-05-16T19:07:58Z",
            "2019-05-15T04:06:30Z",
            "2019-03-28T01:55:48Z",
            "2019-03-28T01:55:18Z",
            "2019-03-27T22:22:40Z",
            "2019-03-27T22:22:28Z",
            "2019-01-29T06:39:00Z",
            "2018-09-28T18:41:56Z",
            "2018-09-28T18:16:55Z",
            "2018-09-14T21:41:52Z"
        ],
        "creation_date": "2013-04-24T05:18:44Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 273,
        "readme": "# xctool\n\n__xctool__ is an extension for Apple's __xcodebuild__ which makes it\neasier to test iOS and Mac products.  It's especially helpful\nfor continuous integration.\n\n[![Build Status](https://travis-ci.org/facebook/xctool.png?branch=master)](https://travis-ci.org/facebook/xctool)\n\n[ [Features](#features) &bull; [Requirements](#requirements) &bull; [Usage](#usage)\n&bull; [Continuous Integration](#continuous-integration)\n&bull; [Reporters](#reporters) &bull;\n[Configuration](#configuration-xctool-args) &bull; \n[Contributing](#contributing) &bull; [Known Issues & Tips](#known-issues--tips) &bull; [License](#license) ]\n\n## Features\n\n__xctool__ is drop-in replacement for `xcodebuild test` that adds a few\nextra features:\n\n* **Faster, parallelized test runs.**\n\n  _xctool_ can optionally run all of your test bundles in parallel,\nspeeding up your test runs significantly.  At Facebook, we've seen 2x\nand 3x speed ups by parallelizing our runs.\n\n  Use the `-parallelize` option with _run-tests_ or _test_ to enable.\nSee [Parallelizing Test Runs](#parallelizing-test-runs) for more info.\n\n* **Structured output of test results.**\n\n  _xctool_ captures all test results as structured JSON objects.  If\nyou're building a continuous integration system, this means you don't\nhave to regex parse _xcodebuild_ output anymore.\n\n  Try one of the [Reporters](#reporters) to customize the output or get\nthe full event stream with the `-reporter json-stream` option.\n\n* **Human-friendly, ANSI-colored output.**\n\n  _xcodebuild_ is incredibly verbose, printing the full compile command\nand output for every source file.  By default, _xctool_ is only verbose\nif something goes wrong, making it much easier to identify where the\nproblems are.\n\n  Example:\n\n\t![pretty output](https://fpotter_public.s3.amazonaws.com/xctool-uicatalog.gif)\n\n* **Written in Objective-C.**\n\n  _xctool_ is written in Objective-C. Mac OS X and iOS developers can\neasily submit new features and fix any bugs they may encounter without\nlearning a new language. We very much welcome pull requests!\n\n\n**Note:** Support for building projects with xctool is deprecated and will\nnot be updated to support future versions of Xcode. We suggest moving to\n`xcodebuild` (with [xcpretty](https://github.com/supermarin/xcpretty)) for\nsimple needs, or [xcbuild](https://github.com/facebook/xcbuild) for more\ninvolved requirements. xctool will continue to support testing (see above).\n\n## Requirements\n\n* Xcode 7 or higher\n* You'll need Xcode's Command Line Tools installed.  From Xcode, install\nvia _Xcode &rarr; Preferences &rarr; Downloads_.\n\n## Installation\n\nxctool can be installed from homebrew via \n```bash\nbrew install xctool\n```\n\nor can be downloaded and run via the xctool.sh command. \n\n## Usage\n\nxctool's commands and options are mostly a superset of xcodebuild's.  In\nmost cases, you can just swap __xcodebuild__ with __xctool__ and things will\nrun as expected but with more attractive output.\n\nYou can always get help and a full list of options with:\n\n```bash\npath/to/xctool.sh -help\n```\n\n### Testing\n\n_xctool_ has a __run-tests__ action which knows how to run the\ntests in your scheme.  You can optionally limit what tests are run\nor change the SDK they're run against.\n\nTo run all tests in your scheme, you would use:\n\n```bash\npath/to/xctool.sh \\\n  -workspace YourWorkspace.xcworkspace \\\n  -scheme YourScheme \\\n  run-tests\n```\n\nTo run just the tests in a specific target, use the `-only` option:\n\n```bash\npath/to/xctool.sh \\\n  -workspace YourWorkspace.xcworkspace \\\n  -scheme YourScheme \\\n  run-tests -only SomeTestTarget\n```\n\nYou can go further and just run a specific test class:\n\n```bash\npath/to/xctool.sh \\\n  -workspace YourWorkspace.xcworkspace \\\n  -scheme YourScheme \\\n  run-tests -only SomeTestTarget:SomeTestClass\n```\n\nOr, even further and run just a single test method:\n\n```bash\npath/to/xctool.sh \\\n  -workspace YourWorkspace.xcworkspace \\\n  -scheme YourScheme \\\n  run-tests -only SomeTestTarget:SomeTestClass/testSomeMethod\n```\n\nYou can also specify prefix matching for classes or test methods:\n\n```bash\npath/to/xctool.sh \\\n  -workspace YourWorkspace.xcworkspace \\\n  -scheme YourScheme \\\n  run-tests -only SomeTestTarget:SomeTestClassPrefix*,SomeTestClass/testSomeMethodPrefix*\n```\n\nAlternatively, you can omit a specific item by prefix matching for classes or test methods:\n\n```bash\npath/to/xctool.sh \\\n  -workspace YourWorkspace.xcworkspace \\\n  -scheme YourScheme \\\n  run-tests -omit SomeTestTarget:SomeTestClass/testSomeMethodPrefix*\n```\n\nYou can also run tests against a different SDK:\n\n```bash\npath/to/xctool.sh \\\n  -workspace YourWorkspace.xcworkspace \\\n  -scheme YourScheme \\\n  run-tests -test-sdk iphonesimulator5.1\n```\n\nOptionally you can specify `-testTimeout` when running tests. When an individual\ntest hits this timeout, it is considered a failure rather than waiting indefinitely. \nThis can prevent your test run from deadlocking forever due to misbehaving tests.\n\nBy default application tests will wait at most 30 seconds for the simulator\nto launch. If you need to change this timeout, use the `-launch-timeout` option.\n\n#### Building Tests\n\nBefore running tests you need to build them. You can use __xcodebuild__,  __xcbuild__ or __Buck__ to do that. \n\nFor example:\n\n```bash\nxcodebuild \\\n  -workspace YourWorkspace.xcworkspace \\\n  -scheme YourScheme \\\n  build-for-testing\n```\n\n\n\n##### Xcode 7\n\nIf you are using Xcode 7 for building you can continue using xctool to build tests using\n__build-tests__ or just use __test__ actions to run tests.\n\nFor example:\n\n```bash\npath/to/xctool.sh \\\n  -workspace YourWorkspace.xcworkspace \\\n  -scheme YourScheme \\\n  build-tests\n```\n\nYou can optionally just build a single test target with the `-only` option:\n\n```bash\npath/to/xctool.sh \\\n  -workspace YourWorkspace.xcworkspace \\\n  -scheme YourScheme \\\n  build-tests -only SomeTestTarget\n```\n\n\n#### Parallelizing Test Runs\n\n_xctool_ can optionally run unit tests in parallel, making better use of\notherwise idle CPU cores.  At Facebook, we've seen 2x and 3x gains by\nparallelizing our test runs.\n\nTo allow test bundles to run concurrently, use the `-parallelize`\noption:\n\n```bash\npath/to/xctool.sh \\\n  -workspace YourWorkspace.xcworkspace \\\n  -scheme YourScheme \\\n  run-tests -parallelize\n```\n\nThe above gives you parallelism, but you're bounded by your slowest test\nbundle.  For example, if you had two test bundles ('A' and 'B'), but 'B'\ntook 10 times as long to run because it contained 10 times as many\ntests, then the above parallelism won't help much.\n\nYou can get further gains by breaking your test execution into buckets\nusing the `-logicTestBucketSize` option:\n\n```bash\npath/to/xctool.sh \\\n  -workspace YourWorkspace.xcworkspace \\\n  -scheme YourScheme \\\n  run-tests -parallelize -logicTestBucketSize 20\n```\n\nThe above will break your test execution into buckets of _20_ test\ncases each, and those bundles will be run concurrently.  If some of your\ntest bundles are much larger than others, this will help even things out\nand speed up the overall test run.\n\n### Building (Xcode 7 only)\n\n**Note:** Support for building projects with xctool is deprecated and isn't\nsupported in Xcode 8 and later. We suggest moving to `xcodebuild` (with \n[xcpretty](https://github.com/supermarin/xcpretty)) for\nsimple needs, or [xcbuild](https://github.com/facebook/xcbuild) for more\ninvolved requirements. Alternatively, you can use [Buck](https://buckbuild.com/).\n\nBuilding products with _xctool_ is the same as building them with\n_xcodebuild_.\n\nIf you use workspaces and schemes:\n\n```bash\npath/to/xctool.sh \\\n  -workspace YourWorkspace.xcworkspace \\\n  -scheme YourScheme \\\n  build\n```\n\nIf you use projects and schemes:\n\n```bash\npath/to/xctool.sh \\\n  -project YourProject.xcodeproj \\\n  -scheme YourScheme \\\n  build\n```\n\nAll of the common options like `-configuration`, `-sdk`, `-arch` work\njust as they do with _xcodebuild_.\n\nNOTE: _xctool_ doesn't support directly building targets using\n`-target`; you must use schemes.\n\n## Continuous Integration\n\nxctool is an excellent choice for running your tests under a continuous\nintegration server such as [Travis CI](https://travis-ci.org/) or [Jenkins](http://jenkins-ci.org/).\nTo run tests within a continuous integration environment,\nyou must create **Shared Schemes** for your application target and ensure that all dependencies (such as CocoaPods) are added explicitly to the Scheme. To do so:\n\n1. Open up the **Manage Schemes** sheet by selecting the **Product** menu > **Schemes** > **Manage Schemes...**\n1. Locate your application target in the list. Ensure that the **Shared** checkbox in far right hand column of the sheet is checked.\n1. If your application or test targets include cross-project dependencies such as CocoaPods, then you will need to ensure that they have been\nconfigured as explicit dependencies. To do so:\n    1. Highlight your application target and hit the **Edit...** button to open the Scheme editing sheet.\n    1. Click the **Build** tab in the left-hand panel of the Scheme editor.\n    1. Click the **+** button and add each dependency to the project. CocoaPods will appear as a static library named **Pods**.\n    1. Drag the dependency above your application target so that it is built first.\n\nYou will now have a new file in the **xcshareddata/xcschemes** directory underneath your Xcode project. This is the\nshared Scheme that you just configured. Check this file into your repository and xctool will be able to find and execute\nyour tests on the next CI build.\n\n### Example Travis CI Configuration\n\n[Travis CI](https://travis-ci.org/) is a very popular continuous\nintegration system offered for free to Open Source projects.  It\nintegrates well with Github, and it now uses _xctool_ as the default\nbuild and test tool for Objective-C projects.  Once you have set up your\nshared Scheme for use with xctool, you will need to configure a\n`.travis.yml` file.\n\nIf you're using workspaces, your `.travis.yml` might be:\n\n```yaml\nlanguage: objective-c\nxcode_workspace: path/to/YourApp.xcworkspace\nxcode_scheme: YourApp\n```\n\nIf you're using projects, your `.travis.yml` might be:\n\n```yaml\nlanguage: objective-c\nxcode_project: path/to/YourApp.xcodeproj\nxcode_scheme: YourApp\n```\n\nFor more flexibility, you can also control how Travis installs and\ninvokes xctool:\n\n```yaml\nlanguage: objective-c\nbefore_install:\n    - brew update\n    - brew install xctool\nscript: xctool -workspace MyApp.xcworkspace -scheme MyApp test\n```\n\nYou can learn more about the Travis CI environment for iOS and OS X\napplication by referring to the [About OS X Travis CI\nEnvironment](http://about.travis-ci.org/docs/user/osx-ci-environment/)\ndocument and find in-depth documentation for configuring your project by\nconsulting the [Getting\nStarted](http://about.travis-ci.org/docs/user/getting-started/) page.\n\n## Reporters\n\nxctool has reporters that output build and test results in different\nformats.  If you do not specify any reporters yourself, xctool uses\nthe `pretty` and `user-notifications` reporters by default. xctool also\nhas these special rules:\n\n* Overwrite is disabled on the `pretty` reporter when xctool does not\ndetect a TTY. This can be overridden by setting `XCTOOL_FORCE_TTY` in\nthe environment.\n* The `user-notifications` reporter will not be used\nif xctool detects that the build is being run by Travis CI, CircleCI, TeamCity,\nor Jenkins (i.e. `TRAVIS=true`, `CIRCLECI=true`, `TEAMCITY_VERSION`, or\n`JENKINS_URL` in the environment).\n\nYou can choose your own reporters with the `-reporter` option:\n\n```bash\npath/to/xctool.sh \\\n  -workspace YourWorkspace.xcworkspace \\\n  -scheme YourScheme \\\n  -reporter plain \\\n  build\n```\n\nBy default, reporters output to standard out, but you can also direct\nthe output to a file by adding `:OUTPUT_PATH` after the reporter name:\n\n```bash\npath/to/xctool.sh \\\n  -workspace YourWorkspace.xcworkspace \\\n  -scheme YourScheme \\\n  -reporter plain:/path/to/plain-output.txt \\\n  build\n```\n\nYou can use as many reporters as you like; just use the `-reporter`\noption multiple times.\n\n### Included Reporters\n\n* __pretty__: a text-based reporter that uses ANSI colors and unicode\nsymbols for pretty output (the default).\n* __plain__: like _pretty_, but with no colors or unicode.\n* __phabricator__: outputs a JSON array of build/test results which can\nbe fed into the [Phabricator](http://phabricator.org/) code-review tool.\n* __junit__: produces a JUnit/xUnit compatible XML file with test\nresults.\n* __json-stream__: a stream of build/test events as JSON dictionaries,\none per line [(example\noutput)](https://gist.github.com/fpotter/82ffcc3d9a49d10ee41b).\n* __json-compilation-database__: outputs a [JSON Compilation Database](http://clang.llvm.org/docs/JSONCompilationDatabase.html) of build events which can be used by [Clang Tooling](http://clang.llvm.org/docs/LibTooling.html) based tools, e.g. [OCLint](http://oclint.org).\n* __user-notifications__: sends notification to Notification Center when action is completed [(example notifications)](https://cloud.githubusercontent.com/assets/1044236/2771974/a2715306-ca74-11e3-9889-fa50607cc412.png).\n* __teamcity__: sends service messages to [TeamCity](http://www.jetbrains.com/teamcity/) Continuous Integration Server\n\n### Implementing Your Own Reporters\n\nYou can also implement your own reporters using whatever language you\nlike.  Reporters in xctool are separate executables that read JSON\nobjects from STDIN and write formatted results to STDOUT.\n\nYou can invoke reporters by passing their full path via the `-reporter`\noption:\n\n```bash\npath/to/xctool.sh \\\n  -workspace YourWorkspace.xcworkspace \\\n  -scheme YourScheme \\\n  -reporter /path/to/your/reporter \\\n  test\n```\n\nFor example, here's a simple reporter in Python that outputs a _period_\nfor every passing test and an _exclamation mark_ for every failing test:\n\n```python\n#!/usr/bin/python\n\nimport fileinput\nimport json\nimport sys\n\nfor line in fileinput.input():\n    obj = json.loads(line)\n\n    if obj['event'] == 'end-test':\n        if obj['succeeded']:\n            sys.stdout.write('.')\n        else:\n            sys.stdout.write('!')\n\nsys.stdout.write('\\n')\n```\n\nIf you're writing a reporter in Objective-C, you'll find the\n`Reporter` class helpful - see [Reporter.h](https://github.com/facebook/xctool/blob/master/Common/Reporter.h).\n\n\n## Configuration (.xctool-args)\n\nIf you routinely need to pass many arguments to _xctool_ on the\ncommand-line, you can use an __.xctool-args__ file to speed up your workflow.\nIf _xctool_ finds an __.xctool-args__ file in the current directory, it\nwill automatically pre-populate its arguments from there.\n\nThe format is just a JSON array of arguments:\n\n```json\n[\n  \"-workspace\", \"YourWorkspace.xcworkspace\",\n  \"-scheme\", \"YourScheme\",\n  \"-configuration\", \"Debug\",\n  \"-sdk\", \"iphonesimulator\",\n  \"-arch\", \"i386\"\n]\n```\n\nAny extra arguments you pass on the command-line will take precedence \nover those in the _.xctool-args_ file.\n\n## Contributing\n\nBug fixes, improvements, and especially new\n[Reporter](#reporters)\nimplementations are welcome.  Before submitting a [pull\nrequest](https://help.github.com/articles/using-pull-requests), please\nbe sure to sign the [Facebook\nContributor License\nAgreement](https://developers.facebook.com/opensource/cla).  We can't\naccept pull requests unless it's been signed.\n\n#### Workflow \n\n1. Fork.\n2. Make a feature branch: __git checkout -b my-feature__\n3. Make your feature.  Keep things tidy so you have one commit per self-contained change (squashing can help).\n3. Push your branch to your fork: __git push -u origin my-feature__\n4. Open GitHub, under \"Your recently pushed branches\", click __Pull\n   Request__ for _my-feature_.\n\nBe sure to use a separate feature branch and pull request for every\nself-contained feature.  If you need to make changes from feedback, make\nthe changes in place rather than layering on commits (use interactive\nrebase to edit your earlier commits).  Then use __git push --force\norigin my-feature__ to update your pull request.\n\n#### Workflow (for Facebook people, other committers)\n\nMostly the same, but use branches in the main xctool repo if you prefer.\nIt's a nice way to keep things together.\n\n1. Make a feature branch: __git checkout -b myusername/my-feature__\n2. Push your branch: __git push -u origin myusername/my-feature__\n3. Open GitHub to [facebook/xctool](https://github.com/facebook/xctool),\n   under \"Your recently pushed branches\", click __Pull Request__ for\n   _myusername/my-feature_.\n\n## Known Issues & Tips\n\n* __Use shared schemes and disable the Autocreate Schemes feature.__\n\n  Xcode has two kinds of schemes: shared, and user.  User schemes are\n  the default, and they're stored under a folder called `USERNAME.xcuserdatad`,\n  which most people correctly add to their _.gitignore_.\n\n  Use shared schemes instead, and commit them to your repo.  This way\n  everyone on your team (and your build server) are working from the\n  same information, and are building in the same way.\n  \n  ![example](https://fpotter_public.s3.amazonaws.com/xctool-shared-schemes.png)\n  \n* __Make sure simulators run in a GUI context__.\n\n  If you are running `xctool` in continuous integration, the user account\n  calling `xctool` **must** have an active GUI context.\n  If not, the simulator will fail to start with cryptic warnings like:\n  \n  ```\n  Tried to install the test host app 'com.myapp.test' but failed.\n  Preparing test environment failed.\n  -[TEST_BUNDLE FAILED_TO_START] \n  There was a problem starting the test bundle: Simulator 'iPhone 6' was not prepared: Failed for unknown reason.\n  Test did not run: Simulator 'iPhone 6' was not prepared: Failed for unknown reason.\n  2015-01-21 12:02:19.296 xcodebuild[35135:875297]  iPhoneSimulator: Timed out waiting 120 seconds for simulator to boot, current state is 1.\n  Testing failed:\n  Test target MyProjectTests encountered an error (Timed out waiting 120 seconds for simulator to boot, current state is 1.  \n  ```\n  \n  Note that the\n  same holds true with `xcodebuild`...this is not `xctool` specific.\n  \n  For more information, see [this post by Jason Jarrett](http://staxmanade.com/2015/01/setting-jenkins-up-to-run-xctool-and-xcode-simulator-tests/).\n\n## License\n\nCopyright 2014-present Facebook\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may\nnot use this work except in compliance with the License. You may obtain\na copy of the License in the LICENSE file, or at:\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
        "releases": [
            {
                "name": "0.3.7",
                "date": "2019-12-11T08:17:41Z"
            },
            {
                "name": "0.3.6",
                "date": "2019-05-23T19:05:30Z"
            },
            {
                "name": "0.3.5",
                "date": "2018-09-28T18:41:15Z"
            },
            {
                "name": "0.3.4",
                "date": "2017-10-31T05:25:31Z"
            },
            {
                "name": "0.3.3",
                "date": "2017-09-01T01:29:12Z"
            },
            {
                "name": "0.3.2",
                "date": "2017-07-03T05:34:53Z"
            },
            {
                "name": "0.3.1",
                "date": "2016-11-12T22:51:14Z"
            },
            {
                "name": "0.3",
                "date": "2016-10-27T20:52:51Z"
            },
            {
                "name": "0.2.9",
                "date": "2016-04-11T16:55:48Z"
            },
            {
                "name": "0.2.8",
                "date": "2016-02-09T01:16:25Z"
            },
            {
                "name": "0.2.7",
                "date": "2015-10-24T19:19:22Z"
            },
            {
                "name": "0.2.6",
                "date": "2015-09-18T03:54:07Z"
            },
            {
                "name": "0.2.5",
                "date": "2015-08-21T20:38:12Z"
            },
            {
                "name": "0.2.4",
                "date": "2015-06-02T00:16:42Z"
            },
            {
                "name": "0.2.3",
                "date": "2015-03-03T07:01:35Z"
            },
            {
                "name": "0.2.2",
                "date": "2014-12-08T03:04:19Z"
            },
            {
                "name": "0.2.1",
                "date": "2014-09-25T19:14:58Z"
            },
            {
                "name": "0.2",
                "date": "2014-09-19T00:22:25Z"
            },
            {
                "name": "0.1.16",
                "date": "2014-05-29T00:08:30Z"
            },
            {
                "name": "0.1.15",
                "date": "2014-04-11T18:30:50Z"
            },
            {
                "name": "0.1.14",
                "date": "2013-11-26T08:19:57Z"
            },
            {
                "name": "0.1.13",
                "date": "2013-09-30T17:51:29Z"
            },
            {
                "name": "0.1.12",
                "date": "2013-09-17T05:52:06Z"
            },
            {
                "name": "0.1.11",
                "date": "2013-09-04T20:54:16Z"
            },
            {
                "name": "0.1.10",
                "date": "2013-08-29T19:58:49Z"
            },
            {
                "name": "0.1.9",
                "date": "2013-08-28T00:04:27Z"
            },
            {
                "name": "0.1.7",
                "date": "2013-07-14T02:21:39Z"
            },
            {
                "name": "0.1.6",
                "date": "2013-07-14T01:14:46Z"
            }
        ]
    }
}