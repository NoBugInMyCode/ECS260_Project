{
    "https://api.github.com/repos/sharkdp/hyperfine": {
        "forks": 382,
        "watchers": 23746,
        "stars": 23746,
        "languages": {
            "Rust": 193113,
            "Python": 12757
        },
        "commits": [
            "2025-01-10T07:51:13Z",
            "2025-01-04T21:27:16Z",
            "2025-01-01T03:17:55Z",
            "2025-01-01T03:18:01Z",
            "2024-12-29T13:10:01Z",
            "2024-12-29T12:57:53Z",
            "2024-12-29T12:57:18Z",
            "2024-12-29T12:40:05Z",
            "2024-12-29T12:38:54Z",
            "2024-12-29T12:10:50Z",
            "2024-12-29T11:46:37Z",
            "2024-06-23T11:29:05Z",
            "2024-12-01T20:13:31Z",
            "2024-12-01T03:42:05Z",
            "2024-12-01T03:41:58Z",
            "2024-11-13T14:00:12Z",
            "2024-11-11T21:41:35Z",
            "2024-11-11T21:39:30Z",
            "2024-11-11T21:18:19Z",
            "2024-11-10T22:49:49Z",
            "2024-11-11T07:30:58Z",
            "2024-06-21T02:15:12Z",
            "2024-11-10T21:37:04Z",
            "2024-11-10T21:21:22Z",
            "2024-10-26T11:06:52Z",
            "2024-08-28T15:26:40Z",
            "2024-08-28T15:25:05Z",
            "2024-08-28T15:18:42Z",
            "2024-08-28T15:10:33Z",
            "2024-08-28T15:01:09Z"
        ],
        "creation_date": "2018-01-13T15:49:54Z",
        "contributors": 30,
        "topics": [
            "benchmark",
            "cli",
            "command-line",
            "rust",
            "terminal",
            "tool"
        ],
        "subscribers": 97,
        "readme": "# hyperfine\n[![CICD](https://github.com/sharkdp/hyperfine/actions/workflows/CICD.yml/badge.svg)](https://github.com/sharkdp/hyperfine/actions/workflows/CICD.yml)\n[![Version info](https://img.shields.io/crates/v/hyperfine.svg)](https://crates.io/crates/hyperfine)\n[\u4e2d\u6587](https://github.com/chinanf-boy/hyperfine-zh)\n\nA command-line benchmarking tool.\n\n**Demo**: Benchmarking [`fd`](https://github.com/sharkdp/fd) and\n[`find`](https://www.gnu.org/software/findutils/):\n\n![hyperfine](https://i.imgur.com/z19OYxE.gif)\n\n## Features\n\n* Statistical analysis across multiple runs.\n* Support for arbitrary shell commands.\n* Constant feedback about the benchmark progress and current estimates.\n* Warmup runs can be executed before the actual benchmark.\n* Cache-clearing commands can be set up before each timing run.\n* Statistical outlier detection to detect interference from other programs and caching effects.\n* Export results to various formats: CSV, JSON, Markdown, AsciiDoc.\n* Parameterized benchmarks (e.g. vary the number of threads).\n* Cross-platform\n\n## Usage\n\n### Basic benchmarks\n\nTo run a benchmark, you can simply call `hyperfine <command>...`. The argument(s) can be any\nshell command. For example:\n```sh\nhyperfine 'sleep 0.3'\n```\n\nHyperfine will automatically determine the number of runs to perform for each command. By default,\nit will perform *at least* 10 benchmarking runs and measure for at least 3 seconds. To change this,\nyou can use the `-r`/`--runs` option:\n```sh\nhyperfine --runs 5 'sleep 0.3'\n```\n\nIf you want to compare the runtimes of different programs, you can pass multiple commands:\n```sh\nhyperfine 'hexdump file' 'xxd file'\n```\n\n### Warmup runs and preparation commands\n\nFor programs that perform a lot of disk I/O, the benchmarking results can be heavily influenced\nby disk caches and whether they are cold or warm.\n\nIf you want to run the benchmark on a warm cache, you can use the `-w`/`--warmup` option to\nperform a certain number of program executions before the actual benchmark:\n```sh\nhyperfine --warmup 3 'grep -R TODO *'\n```\n\nConversely, if you want to run the benchmark for a cold cache, you can use the `-p`/`--prepare`\noption to run a special command before *each* timing run. For example, to clear harddisk caches\non Linux, you can run\n```sh\nsync; echo 3 | sudo tee /proc/sys/vm/drop_caches\n```\nTo use this specific command with hyperfine, call `sudo -v` to temporarily gain sudo permissions\nand then call:\n```sh\nhyperfine --prepare 'sync; echo 3 | sudo tee /proc/sys/vm/drop_caches' 'grep -R TODO *'\n```\n\n### Parameterized benchmarks\n\nIf you want to run a series of benchmarks where a single parameter is varied (say, the number of\nthreads), you can use the `-P`/`--parameter-scan` option and call:\n```sh\nhyperfine --prepare 'make clean' --parameter-scan num_threads 1 12 'make -j {num_threads}'\n```\nThis also works with decimal numbers. The `-D`/`--parameter-step-size` option can be used\nto control the step size:\n```sh\nhyperfine --parameter-scan delay 0.3 0.7 -D 0.2 'sleep {delay}'\n```\nThis runs `sleep 0.3`, `sleep 0.5` and `sleep 0.7`.\n\nFor non-numeric parameters, you can also supply a list of values with the `-L`/`--parameter-list`\noption:\n```\nhyperfine -L compiler gcc,clang '{compiler} -O2 main.cpp'\n```\n\n### Intermediate shell\n\nBy default, commands are executed using a predefined shell (`/bin/sh` on Unix, `cmd.exe` on Windows).\nIf you want to use a different shell, you can use the `-S, --shell <SHELL>` option:\n```sh\nhyperfine --shell zsh 'for i in {1..10000}; do echo test; done'\n```\n\nNote that hyperfine always *corrects for the shell spawning time*. To do this, it performs a calibration\nprocedure where it runs the shell with an empty command (multiple times), to measure the startup time\nof the shell. It will then subtract this time from the total to show the actual time used by the command\nin question.\n\nIf you want to run a benchmark *without an intermediate shell*, you can use the `-N` or `--shell=none`\noption. This is helpful for very fast commands (< 5 ms) where the shell startup overhead correction would\nproduce a significant amount of noise. Note that you cannot use shell syntax like `*` or `~` in this case.\n```\nhyperfine -N 'grep TODO /home/user'\n```\n\n\n### Shell functions and aliases\n\nIf you are using bash, you can export shell functions to directly benchmark them with hyperfine:\n\n```bash\nmy_function() { sleep 1; }\nexport -f my_function\nhyperfine --shell=bash my_function\n```\n\nOtherwise, inline them into or source them from the benchmarked program:\n\n```sh\nhyperfine 'my_function() { sleep 1; }; my_function'\n\necho 'alias my_alias=\"sleep 1\"' > /tmp/my_alias.sh\nhyperfine '. /tmp/my_alias.sh; my_alias'\n```\n\n### Exporting results\n\nHyperfine has multiple options for exporting benchmark results to CSV, JSON, Markdown and other\nformats (see `--help` text for details).\n\n#### Markdown\n\nYou can use the `--export-markdown <file>` option to create tables like the following:\n\n| Command | Mean [s] | Min [s] | Max [s] | Relative |\n|:---|---:|---:|---:|---:|\n| `find . -iregex '.*[0-9]\\.jpg$'` | 2.275 \u00b1 0.046 | 2.243 | 2.397 | 9.79 \u00b1 0.22 |\n| `find . -iname '*[0-9].jpg'` | 1.427 \u00b1 0.026 | 1.405 | 1.468 | 6.14 \u00b1 0.13 |\n| `fd -HI '.*[0-9]\\.jpg$'` | 0.232 \u00b1 0.002 | 0.230 | 0.236 | 1.00 |\n\n#### JSON\n\nThe JSON output is useful if you want to analyze the benchmark results in more detail. The\n[`scripts/`](https://github.com/sharkdp/hyperfine/tree/master/scripts) folder includes a lot\nof helpful Python programs to further analyze benchmark results and create helpful\nvisualizations, like a histogram of runtimes or a whisker plot to compare\nmultiple benchmarks:\n\n| ![](doc/histogram.png) | ![](doc/whisker.png) |\n|---:|---:|\n\n\n### Detailed benchmark flowchart\n\nThe following chart explains the execution order of various timing runs when using options\nlike `--warmup`, `--prepare <cmd>`, `--setup <cmd>` or `--cleanup <cmd>`:\n\n![](doc/execution-order.png)\n\n## Installation\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/hyperfine.svg?columns=3&exclude_unsupported=1)](https://repology.org/project/hyperfine/versions)\n\n### On Ubuntu\n\nDownload the appropriate `.deb` package from the [Release page](https://github.com/sharkdp/hyperfine/releases)\nand install it via `dpkg`:\n```\nwget https://github.com/sharkdp/hyperfine/releases/download/v1.19.0/hyperfine_1.19.0_amd64.deb\nsudo dpkg -i hyperfine_1.19.0_amd64.deb\n```\n\n### On Fedora\n\nOn Fedora, hyperfine can be installed from the official repositories:\n\n```sh\ndnf install hyperfine\n```\n\n### On Alpine Linux\n\nOn Alpine Linux, hyperfine can be installed [from the official repositories](https://pkgs.alpinelinux.org/packages?name=hyperfine):\n```\napk add hyperfine\n```\n\n### On Arch Linux\n\nOn Arch Linux, hyperfine can be installed [from the official repositories](https://archlinux.org/packages/extra/x86_64/hyperfine/):\n```\npacman -S hyperfine\n```\n\n### On Debian Linux\n\nOn Debian Linux, hyperfine can be installed [from the testing repositories](https://packages.debian.org/testing/main/hyperfine):\n```\napt install hyperfine\n```\n\n### On Exherbo Linux\n\nOn Exherbo Linux, hyperfine can be installed [from the rust repositories](https://gitlab.exherbo.org/exherbo/rust/-/tree/master/packages/sys-apps/hyperfine):\n```\ncave resolve -x repository/rust\ncave resolve -x hyperfine\n```\n\n### On Funtoo Linux\n\nOn Funtoo Linux, hyperfine can be installed [from core-kit](https://github.com/funtoo/core-kit/tree/1.4-release/app-benchmarks/hyperfine):\n```\nemerge app-benchmarks/hyperfine\n```\n\n### On NixOS\n\nOn NixOS, hyperfine can be installed [from the official repositories](https://nixos.org/nixos/packages.html?query=hyperfine):\n```\nnix-env -i hyperfine\n```\n\n### On Flox\n\nOn Flox, hyperfine can be installed as follows.\n```\nflox install hyperfine\n```\nHyperfine's version in Flox follows that of Nix.\n\n### On openSUSE\n\nOn openSUSE, hyperfine can be installed [from the official repositories](https://software.opensuse.org/package/hyperfine):\n```\nzypper install hyperfine\n```\n\n### On Void Linux\n\nHyperfine can be installed via xbps\n\n```\nxbps-install -S hyperfine\n```\n\n### On macOS\n\nHyperfine can be installed via [Homebrew](https://brew.sh):\n```\nbrew install hyperfine\n```\n\nOr you can install using [MacPorts](https://www.macports.org):\n```\nsudo port selfupdate\nsudo port install hyperfine\n```\n\n### On FreeBSD\n\nHyperfine can be installed via pkg:\n```\npkg install hyperfine\n```\n\n### On OpenBSD\n\n```\ndoas pkg_add hyperfine\n```\n\n### On Windows\n\nHyperfine can be installed via [Chocolatey](https://community.chocolatey.org/packages/hyperfine), [Scoop](https://scoop.sh/#/apps?q=hyperfine&s=0&d=1&o=true&id=8f7c10f75ecf5f9e42a862c615257328e2f70f61), or [Winget](https://github.com/microsoft/winget-pkgs/tree/master/manifests/s/sharkdp/hyperfine):\n```\nchoco install hyperfine\n```\n```\nscoop install hyperfine\n```\n```\nwinget install hyperfine\n```\n\n### With conda\n\nHyperfine can be installed via [`conda`](https://conda.io/en/latest/) from the [`conda-forge`](https://anaconda.org/conda-forge/hyperfine) channel:\n```\nconda install -c conda-forge hyperfine\n```\n\n### With cargo (Linux, macOS, Windows)\n\nHyperfine can be installed from source via [cargo](https://doc.rust-lang.org/cargo/):\n```\ncargo install --locked hyperfine\n```\n\nMake sure that you use Rust 1.76 or newer.\n\n### From binaries (Linux, macOS, Windows)\n\nDownload the corresponding archive from the [Release page](https://github.com/sharkdp/hyperfine/releases).\n\n## Alternative tools\n\nHyperfine is inspired by [bench](https://github.com/Gabriella439/bench).\n\n## Integration with other tools\n\n[Chronologer](https://github.com/dandavison/chronologer) is a tool that uses `hyperfine` to\nvisualize changes in benchmark timings across your Git history.\n\n[Bencher](https://github.com/bencherdev/bencher) is a continuous benchmarking tool that supports `hyperfine` to\ntrack benchmarks and catch performance regressions in CI.\n\nDrop hyperfine JSON outputs onto the [Venz](https://try.venz.dev) chart to visualize the results,\nand manage hyperfine configurations.\n\nMake sure to check out the [`scripts` folder](https://github.com/sharkdp/hyperfine/tree/master/scripts)\nin this repository for a set of tools to work with `hyperfine` benchmark results.\n\n## Origin of the name\n\nThe name *hyperfine* was chosen in reference to the hyperfine levels of caesium 133 which play a crucial role in the\n[definition of our base unit of time](https://en.wikipedia.org/wiki/Second#History_of_definition)\n\u2014 the second.\n\n## Citing hyperfine\n\nThank you for considering to cite hyperfine in your research work. Please see the information\nin the sidebar on how to properly cite hyperfine.\n\n## License\n\n`hyperfine` is dual-licensed under the terms of the MIT License and the Apache License 2.0.\n\nSee the [LICENSE-APACHE](LICENSE-APACHE) and [LICENSE-MIT](LICENSE-MIT) files for details.\n",
        "releases": [
            {
                "name": "v1.19.0",
                "date": "2024-11-11T21:43:25Z"
            },
            {
                "name": "v1.18.0",
                "date": "2023-10-05T08:07:11Z"
            },
            {
                "name": "v1.17.0",
                "date": "2023-06-04T06:22:26Z"
            },
            {
                "name": "v1.16.1",
                "date": "2023-03-21T20:06:42Z"
            },
            {
                "name": "v1.16.0",
                "date": "2023-03-15T09:14:51Z"
            },
            {
                "name": "v1.15.0",
                "date": "2022-09-07T07:30:16Z"
            },
            {
                "name": "v1.14.0",
                "date": "2022-05-17T20:58:22Z"
            },
            {
                "name": "v1.13.0",
                "date": "2022-03-05T11:59:28Z"
            },
            {
                "name": "v1.12.0",
                "date": "2021-10-17T17:47:28Z"
            },
            {
                "name": "v1.11.0",
                "date": "2020-10-16T22:13:20Z"
            },
            {
                "name": "v1.10.0",
                "date": "2020-05-25T14:21:50Z"
            },
            {
                "name": "v1.9.0",
                "date": "2019-11-25T19:10:20Z"
            },
            {
                "name": "v1.8.0",
                "date": "2019-10-13T14:34:49Z"
            },
            {
                "name": "v1.7.0",
                "date": "2019-09-01T13:15:02Z"
            },
            {
                "name": "v1.6.0",
                "date": "2019-06-08T12:51:38Z"
            },
            {
                "name": "v1.5.0",
                "date": "2018-12-12T22:35:40Z"
            },
            {
                "name": "v1.4.0",
                "date": "2018-11-21T19:10:02Z"
            },
            {
                "name": "v1.3.0",
                "date": "2018-09-28T20:40:25Z"
            },
            {
                "name": "v1.2.0",
                "date": "2018-07-18T16:31:27Z"
            },
            {
                "name": "v1.1.0",
                "date": "2018-06-11T19:03:32Z"
            },
            {
                "name": "v1.0.0",
                "date": "2018-03-24T20:46:15Z"
            },
            {
                "name": "v0.5.0",
                "date": "2018-03-03T15:52:24Z"
            },
            {
                "name": "v0.4.0",
                "date": "2018-01-28T17:50:51Z"
            },
            {
                "name": "v0.3.0",
                "date": "2018-01-20T13:06:48Z"
            },
            {
                "name": "v0.2.0",
                "date": "2018-01-14T21:15:37Z"
            }
        ]
    }
}