{
    "https://api.github.com/repos/ericchiang/pup": {
        "forks": 261,
        "watchers": 8203,
        "stars": 8203,
        "languages": {
            "HTML": 185554,
            "Go": 32398,
            "Ruby": 582,
            "Python": 396,
            "Shell": 88
        },
        "commits": [
            "2022-03-06T20:45:36Z",
            "2019-09-19T18:11:24Z",
            "2017-04-18T04:47:20Z",
            "2017-04-18T04:18:09Z",
            "2017-04-01T20:09:52Z",
            "2017-04-01T02:04:08Z",
            "2016-10-12T03:57:02Z",
            "2016-09-01T21:57:44Z",
            "2016-08-19T17:09:31Z",
            "2016-08-19T16:57:26Z",
            "2016-07-23T05:03:27Z",
            "2016-07-23T04:52:15Z",
            "2016-07-23T04:45:46Z",
            "2016-07-23T04:44:52Z",
            "2016-07-23T04:42:23Z",
            "2016-07-23T04:41:26Z",
            "2016-07-23T04:40:07Z",
            "2016-04-25T15:17:42Z",
            "2016-04-25T15:16:03Z",
            "2015-10-01T13:37:25Z",
            "2015-10-01T11:19:43Z",
            "2015-06-10T12:03:06Z",
            "2015-06-01T14:26:39Z",
            "2015-05-31T19:58:19Z",
            "2015-04-05T19:26:22Z",
            "2015-04-05T19:23:49Z",
            "2015-04-05T19:21:06Z",
            "2015-04-05T19:02:03Z",
            "2015-02-01T20:45:38Z",
            "2015-02-01T19:21:55Z"
        ],
        "creation_date": "2014-09-01T01:31:29Z",
        "contributors": 8,
        "topics": [],
        "subscribers": 90,
        "readme": "# pup\n\npup is a command line tool for processing HTML. It reads from stdin,\nprints to stdout, and allows the user to filter parts of the page using\n[CSS selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_started/Selectors).\n\nInspired by [jq](http://stedolan.github.io/jq/), pup aims to be a\nfast and flexible way of exploring HTML from the terminal.\n\n## Install\n\nDirect downloads are available through the [releases page](https://github.com/EricChiang/pup/releases/latest).\n\nIf you have Go installed on your computer just run `go get`.\n\n    go get github.com/ericchiang/pup\n\nIf you're on OS X, use [Homebrew](http://brew.sh/) to install (no Go required).\n\n    brew install https://raw.githubusercontent.com/EricChiang/pup/master/pup.rb\n\n## Quick start\n\n```bash\n$ curl -s https://news.ycombinator.com/\n```\n\nEw, HTML. Let's run that through some pup selectors:\n\n```bash\n$ curl -s https://news.ycombinator.com/ | pup 'table table tr:nth-last-of-type(n+2) td.title a'\n```\n\nOkay, how about only the links?\n\n```bash\n$ curl -s https://news.ycombinator.com/ | pup 'table table tr:nth-last-of-type(n+2) td.title a attr{href}'\n```\n\nEven better, let's grab the titles too:\n\n```bash\n$ curl -s https://news.ycombinator.com/ | pup 'table table tr:nth-last-of-type(n+2) td.title a json{}'\n```\n\n## Basic Usage\n\n```bash\n$ cat index.html | pup [flags] '[selectors] [display function]'\n```\n\n## Examples\n\nDownload a webpage with wget.\n\n```bash\n$ wget http://en.wikipedia.org/wiki/Robots_exclusion_standard -O robots.html\n```\n\n#### Clean and indent\n\nBy default pup will fill in missing tags and properly indent the page.\n\n```bash\n$ cat robots.html\n# nasty looking HTML\n$ cat robots.html | pup --color\n# cleaned, indented, and colorful HTML\n```\n\n#### Filter by tag\n\n```bash\n$ cat robots.html | pup 'title'\n<title>\n Robots exclusion standard - Wikipedia, the free encyclopedia\n</title>\n```\n\n#### Filter by id\n\n```bash\n$ cat robots.html | pup 'span#See_also'\n<span class=\"mw-headline\" id=\"See_also\">\n See also\n</span>\n```\n\n#### Filter by attribute\n\n```bash\n$ cat robots.html | pup 'th[scope=\"row\"]'\n<th scope=\"row\" class=\"navbox-group\">\n Exclusion standards\n</th>\n<th scope=\"row\" class=\"navbox-group\">\n Related marketing topics\n</th>\n<th scope=\"row\" class=\"navbox-group\">\n Search marketing related topics\n</th>\n<th scope=\"row\" class=\"navbox-group\">\n Search engine spam\n</th>\n<th scope=\"row\" class=\"navbox-group\">\n Linking\n</th>\n<th scope=\"row\" class=\"navbox-group\">\n People\n</th>\n<th scope=\"row\" class=\"navbox-group\">\n Other\n</th>\n```\n\n#### Pseudo Classes\n\nCSS selectors have a group of specifiers called [\"pseudo classes\"](\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes)  which are pretty\ncool. pup implements a majority of the relevant ones them.\n\nHere are some examples.\n\n```bash\n$ cat robots.html | pup 'a[rel]:empty'\n<a rel=\"license\" href=\"//creativecommons.org/licenses/by-sa/3.0/\" style=\"display:none;\">\n</a>\n```\n\n```bash\n$ cat robots.html | pup ':contains(\"History\")'\n<span class=\"toctext\">\n History\n</span>\n<span class=\"mw-headline\" id=\"History\">\n History\n</span>\n```\n\n```bash\n$ cat robots.html | pup ':parent-of([action=\"edit\"])'\n<span class=\"wb-langlinks-edit wb-langlinks-link\">\n <a action=\"edit\" href=\"//www.wikidata.org/wiki/Q80776#sitelinks-wikipedia\" text=\"Edit links\" title=\"Edit interlanguage links\" class=\"wbc-editpage\">\n  Edit links\n </a>\n</span>\n```\n\nFor a complete list, view the [implemented selectors](#implemented-selectors)\nsection.\n\n\n#### `+`, `>`, and `,`\n\nThese are intermediate characters that declare special instructions. For\ninstance, a comma `,` allows pup to specify multiple groups of selectors.\n\n```bash\n$ cat robots.html | pup 'title, h1 span[dir=\"auto\"]'\n<title>\n Robots exclusion standard - Wikipedia, the free encyclopedia\n</title>\n<span dir=\"auto\">\n Robots exclusion standard\n</span>\n```\n\n#### Chain selectors together\n\nWhen combining selectors, the HTML nodes selected by the previous selector will\nbe passed to the next ones.\n\n```bash\n$ cat robots.html | pup 'h1#firstHeading'\n<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\">\n <span dir=\"auto\">\n  Robots exclusion standard\n </span>\n</h1>\n```\n\n```bash\n$ cat robots.html | pup 'h1#firstHeading span'\n<span dir=\"auto\">\n Robots exclusion standard\n</span>\n```\n\n## Implemented Selectors\n\nFor further examples of these selectors head over to [MDN](\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/Reference).\n\n```bash\npup '.class'\npup '#id'\npup 'element'\npup 'selector + selector'\npup 'selector > selector'\npup '[attribute]'\npup '[attribute=\"value\"]'\npup '[attribute*=\"value\"]'\npup '[attribute~=\"value\"]'\npup '[attribute^=\"value\"]'\npup '[attribute$=\"value\"]'\npup ':empty'\npup ':first-child'\npup ':first-of-type'\npup ':last-child'\npup ':last-of-type'\npup ':only-child'\npup ':only-of-type'\npup ':contains(\"text\")'\npup ':nth-child(n)'\npup ':nth-of-type(n)'\npup ':nth-last-child(n)'\npup ':nth-last-of-type(n)'\npup ':not(selector)'\npup ':parent-of(selector)'\n```\n\nYou can mix and match selectors as you wish.\n\n```bash\ncat index.html | pup 'element#id[attribute=\"value\"]:first-of-type'\n```\n\n## Display Functions\n\nNon-HTML selectors which effect the output type are implemented as functions\nwhich can be provided as a final argument.\n\n#### `text{}`\n\nPrint all text from selected nodes and children in depth first order.\n\n```bash\n$ cat robots.html | pup '.mw-headline text{}'\nHistory\nAbout the standard\nDisadvantages\nAlternatives\nExamples\nNonstandard extensions\nCrawl-delay directive\nAllow directive\nSitemap\nHost\nUniversal \"*\" match\nMeta tags and headers\nSee also\nReferences\nExternal links\n```\n\n#### `attr{attrkey}`\n\nPrint the values of all attributes with a given key from all selected nodes.\n\n```bash\n$ cat robots.html | pup '.catlinks div attr{id}'\nmw-normal-catlinks\nmw-hidden-catlinks\n```\n\n#### `json{}`\n\nPrint HTML as JSON.\n\n```bash\n$ cat robots.html  | pup 'div#p-namespaces a'\n<a href=\"/wiki/Robots_exclusion_standard\" title=\"View the content page [c]\" accesskey=\"c\">\n Article\n</a>\n<a href=\"/wiki/Talk:Robots_exclusion_standard\" title=\"Discussion about the content page [t]\" accesskey=\"t\">\n Talk\n</a>\n```\n\n```bash\n$ cat robots.html | pup 'div#p-namespaces a json{}'\n[\n {\n  \"accesskey\": \"c\",\n  \"href\": \"/wiki/Robots_exclusion_standard\",\n  \"tag\": \"a\",\n  \"text\": \"Article\",\n  \"title\": \"View the content page [c]\"\n },\n {\n  \"accesskey\": \"t\",\n  \"href\": \"/wiki/Talk:Robots_exclusion_standard\",\n  \"tag\": \"a\",\n  \"text\": \"Talk\",\n  \"title\": \"Discussion about the content page [t]\"\n }\n]\n```\n\nUse the `-i` / `--indent` flag to control the intent level.\n\n```bash\n$ cat robots.html | pup -i 4 'div#p-namespaces a json{}'\n[\n    {\n        \"accesskey\": \"c\",\n        \"href\": \"/wiki/Robots_exclusion_standard\",\n        \"tag\": \"a\",\n        \"text\": \"Article\",\n        \"title\": \"View the content page [c]\"\n    },\n    {\n        \"accesskey\": \"t\",\n        \"href\": \"/wiki/Talk:Robots_exclusion_standard\",\n        \"tag\": \"a\",\n        \"text\": \"Talk\",\n        \"title\": \"Discussion about the content page [t]\"\n    }\n]\n```\n\nIf the selectors only return one element the results will be printed as a JSON\nobject, not a list.\n\n```bash\n$ cat robots.html  | pup --indent 4 'title json{}'\n{\n    \"tag\": \"title\",\n    \"text\": \"Robots exclusion standard - Wikipedia, the free encyclopedia\"\n}\n```\n\nBecause there is no universal standard for converting HTML/XML to JSON, a\nmethod has been chosen which hopefully fits. The goal is simply to get the\noutput of pup into a more consumable format.\n\n## Flags\n\nRun `pup --help` for a list of further options\n",
        "releases": [
            {
                "name": "pup - v0.4.0",
                "date": "2016-07-23T04:49:49Z"
            },
            {
                "name": "pup - 0.3.9",
                "date": "2015-04-05T19:32:05Z"
            },
            {
                "name": "pup - 0.3.8",
                "date": "2015-02-01T19:24:43Z"
            },
            {
                "name": "pup - 0.3.7",
                "date": "2014-12-14T04:56:53Z"
            },
            {
                "name": "pup - 0.3.6",
                "date": "2014-12-07T18:33:08Z"
            },
            {
                "name": "pup - 0.3.5",
                "date": "2014-11-23T20:18:07Z"
            },
            {
                "name": "pup - 0.3.4",
                "date": "2014-11-10T14:21:09Z"
            },
            {
                "name": "pup - 0.3.3 - pseudo classes added",
                "date": "2014-11-10T02:48:48Z"
            },
            {
                "name": "pup - 0.3.2",
                "date": "2014-10-13T15:16:45Z"
            },
            {
                "name": "pup - 0.3.1 - JSON displayer added",
                "date": "2014-10-11T17:14:14Z"
            },
            {
                "name": "pup - 0.3.0",
                "date": "2014-09-28T22:18:17Z"
            },
            {
                "name": "pup - 0.2.2",
                "date": "2014-09-20T22:57:34Z"
            },
            {
                "name": "pup - 0.1.2",
                "date": "2014-09-16T01:58:01Z"
            },
            {
                "name": "pup",
                "date": "2014-09-15T00:02:43Z"
            },
            {
                "name": "pup initial release",
                "date": "2014-09-14T20:13:43Z"
            }
        ]
    }
}