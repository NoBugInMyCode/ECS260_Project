{
    "https://api.github.com/repos/robertkrimen/otto": {
        "forks": 588,
        "watchers": 8184,
        "stars": 8184,
        "languages": {
            "Go": 1006571,
            "Perl": 1604
        },
        "commits": [
            "2024-11-05T09:52:49Z",
            "2024-11-04T11:07:44Z",
            "2024-11-04T10:49:04Z",
            "2024-11-03T16:40:47Z",
            "2024-11-03T15:54:54Z",
            "2024-07-09T16:20:35Z",
            "2024-06-12T09:20:22Z",
            "2024-05-03T14:20:42Z",
            "2024-04-13T17:15:49Z",
            "2024-04-13T16:05:50Z",
            "2023-12-30T16:06:52Z",
            "2023-12-19T19:17:47Z",
            "2023-08-16T18:08:32Z",
            "2023-07-25T17:25:01Z",
            "2023-07-21T21:47:33Z",
            "2023-07-20T19:54:28Z",
            "2023-07-18T09:42:59Z",
            "2023-07-17T21:27:09Z",
            "2023-07-16T18:17:11Z",
            "2023-07-10T10:21:40Z",
            "2023-07-06T10:41:55Z",
            "2023-05-22T16:23:07Z",
            "2023-05-20T12:35:41Z",
            "2023-05-19T12:04:21Z",
            "2023-02-23T16:13:49Z",
            "2023-01-13T19:47:05Z",
            "2022-12-07T00:24:38Z",
            "2022-12-07T00:23:10Z",
            "2022-12-07T00:13:42Z",
            "2022-12-06T21:49:48Z"
        ],
        "creation_date": "2012-10-06T01:48:39Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 184,
        "readme": "# otto\n\n[![GoDoc Reference](https://pkg.go.dev/badge/github.com/robertkrimen/otto.svg)](https://pkg.go.dev/github.com/robertkrimen/otto)\n\n## Basic Usage\n\nPackage otto is a JavaScript parser and interpreter written natively in Go.\n\nTo use import it with the following:\n\n```go\nimport (\n   \"github.com/robertkrimen/otto\"\n)\n```\n\nRun something in the VM\n\n```go\nvm := otto.New()\nvm.Run(`\n    abc = 2 + 2;\n    console.log(\"The value of abc is \" + abc); // 4\n`)\n```\n\nGet a value out of the VM\n\n```go\nif value, err := vm.Get(\"abc\"); err == nil {\n    if value_int, err := value.ToInteger(); err == nil {\n        fmt.Printf(\"\", value_int, err)\n    }\n}\n```\n\nSet a number\n\n```go\nvm.Set(\"def\", 11)\nvm.Run(`\n    console.log(\"The value of def is \" + def);\n    // The value of def is 11\n`)\n```\n\nSet a string\n\n```go\nvm.Set(\"xyzzy\", \"Nothing happens.\")\nvm.Run(`\n    console.log(xyzzy.length); // 16\n`)\n```\n\nGet the value of an expression\n\n```go\nvalue, _ = vm.Run(\"xyzzy.length\")\n{\n    // value is an int64 with a value of 16\n    value, _ := value.ToInteger()\n}\n```\n\nAn error happens\n\n```go\nvalue, err = vm.Run(\"abcdefghijlmnopqrstuvwxyz.length\")\nif err != nil {\n    // err = ReferenceError: abcdefghijlmnopqrstuvwxyz is not defined\n    // If there is an error, then value.IsUndefined() is true\n    ...\n}\n```\n\nSet a Go function\n\n```go\nvm.Set(\"sayHello\", func(call otto.FunctionCall) otto.Value {\n    fmt.Printf(\"Hello, %s.\\n\", call.Argument(0).String())\n    return otto.Value{}\n})\n```\n\nSet a Go function that returns something useful\n\n```go\nvm.Set(\"twoPlus\", func(call otto.FunctionCall) otto.Value {\n    right, _ := call.Argument(0).ToInteger()\n    result, _ := vm.ToValue(2 + right)\n    return result\n})\n```\n\nUse the functions in JavaScript\n\n```go\nresult, _ = vm.Run(`\n    sayHello(\"Xyzzy\");      // Hello, Xyzzy.\n    sayHello();             // Hello, undefined\n\n    result = twoPlus(2.0); // 4\n`)\n```\n\n## Parser\n\nA separate parser is available in the parser package if you're just interested\nin building an AST.\n\n[![GoDoc Reference](https://pkg.go.dev/badge/github.com/robertkrimen/otto/parser.svg)](https://pkg.go.dev/github.com/robertkrimen/otto/parser)\n\nParse and return an AST\n\n```go\nfilename := \"\" // A filename is optional\nsrc := `\n    // Sample xyzzy example\n    (function(){\n        if (3.14159 > 0) {\n            console.log(\"Hello, World.\");\n            return;\n        }\n\n        var xyzzy = NaN;\n        console.log(\"Nothing happens.\");\n        return xyzzy;\n    })();\n`\n\n// Parse some JavaScript, yielding a *ast.Program and/or an ErrorList\nprogram, err := parser.ParseFile(nil, filename, src, 0)\n```\n\n## Setup\n\nYou can run (Go) JavaScript from the command line with\n[otto](http://github.com/robertkrimen/otto/tree/master/otto).\n\n```shell\ngo install github.com/robertkrimen/otto/otto@latest\n```\n\nRun JavaScript by entering some source on stdin or by giving otto a filename:\n\n```shell\notto example.js\n```\n\n## Underscore\n\nOptionally include the JavaScript utility-belt library, underscore, with this\nimport:\n\n```go\nimport (\n    \"github.com/robertkrimen/otto\"\n    _ \"github.com/robertkrimen/otto/underscore\"\n)\n\n// Now every otto runtime will come loaded with underscore\n```\n\nFor more information: [underscore](http://github.com/robertkrimen/otto/tree/master/underscore)\n\n## Caveat Emptor\n\nThe following are some limitations with otto:\n\n* `use strict` will parse, but does nothing.\n* The regular expression engine ([re2/regexp](https://pkg.go.dev/regexp)) is not fully compatible with the ECMA5 specification.\n* Otto targets ES5. Some ES6 features e.g. Typed Arrays are not supported, PR's to add functionality are always welcome.\n\n### Regular Expression Incompatibility\n\nGo translates JavaScript-style regular expressions into something that is\n\"regexp\" compatible via `parser.TransformRegExp`. Unfortunately, RegExp requires\nbacktracking for some patterns, and backtracking is not supported by Go\n[re2](https://github.com/google/re2/wiki/syntax).\n\nTherefore, the following syntax is incompatible:\n\n```plaintext\n(?=)  // Lookahead (positive), currently a parsing error\n(?!)  // Lookahead (backhead), currently a parsing error\n\\1    // Backreference (\\1, \\2, \\3, ...), currently a parsing error\n```\n\nA brief discussion of these limitations: [Regexp (?!re)](https://groups.google.com/forum/?fromgroups=#%21topic/golang-nuts/7qgSDWPIh_E)\n\nMore information [about re2](https://github.com/google/re2)\n\nIn addition to the above, re2 (Go) has a different definition for `\\s`: `[\\t\\n\\f\\r\n]`. The JavaScript definition, on the other hand, also includes `\\v`, Unicode\n\"Separator, Space\", etc.\n\n### Halting Problem\n\nIf you want to stop long running executions (like third-party code), you can use\nthe interrupt channel to do this:\n\n```go\npackage main\n\nimport (\n    \"errors\"\n    \"fmt\"\n    \"os\"\n    \"time\"\n\n    \"github.com/robertkrimen/otto\"\n)\n\nvar halt = errors.New(\"Stahp\")\n\nfunc main() {\n    runUnsafe(`var abc = [];`)\n    runUnsafe(`\n    while (true) {\n        // Loop forever\n    }`)\n}\n\nfunc runUnsafe(unsafe string) {\n    start := time.Now()\n    defer func() {\n        duration := time.Since(start)\n        if caught := recover(); caught != nil {\n            if caught == halt {\n                fmt.Fprintf(os.Stderr, \"Some code took to long! Stopping after: %v\\n\", duration)\n                return\n            }\n            panic(caught) // Something else happened, repanic!\n        }\n        fmt.Fprintf(os.Stderr, \"Ran code successfully: %v\\n\", duration)\n    }()\n\n    vm := otto.New()\n    vm.Interrupt = make(chan func(), 1) // The buffer prevents blocking\n    watchdogCleanup := make(chan struct{})\n    defer close(watchdogCleanup)\n\n    go func() {\n        select {\n        case <-time.After(2 * time.Second): // Stop after two seconds\n            vm.Interrupt <- func() {\n                panic(halt)\n            }\n        case <-watchdogCleanup:\n        }\n        close(vm.Interrupt)\n    }()\n\n    vm.Run(unsafe) // Here be dragons (risky code)\n}\n```\n\nWhere is `setTimeout` / `setInterval`?\n\nThese timing functions are not actually part of the [ECMA-262 specification](https://ecma-international.org/publications-and-standards/standards/ecma-262/).\nTypically, they belong to the `window` object (in the browser). It would not be\ndifficult to provide something like these via Go, but you probably want to wrap\notto in an event loop in that case.\n\nFor an example of how this could be done in Go with otto, see [natto](http://github.com/robertkrimen/natto).\n\nHere is some more discussion of the issue:\n\n* [What is Node.js?](http://book.mixu.net/node/ch2.html)\n* [Reentrancy (computing)](http://en.wikipedia.org/wiki/Reentrancy_%28computing%29)\n* [Perl Safe Signals](https://metacpan.org/pod/Perl::Unsafe::Signals)\n\n## Usage\n\n```go\nvar ErrVersion = errors.New(\"version mismatch\")\n```\n\n### type Error\n\n```go\ntype Error struct {}\n```\n\nAn Error represents a runtime error, e.g. a `TypeError`, a `ReferenceError`, etc.\n\n### func (Error) Error\n\n```go\nfunc (err Error) Error() string\n```\n\nError returns a description of the error\n\n```plaintext\n    TypeError: 'def' is not a function\n```\n\n### func (Error) String\n\n```go\nfunc (err Error) String() string\n```\n\nString returns a description of the error and a trace of where the error\noccurred.\n\n```plaintext\n    TypeError: 'def' is not a function\n        at xyz (<anonymous>:3:9)\n        at <anonymous>:7:1/\n```\n\n### type FunctionCall\n\n```go\ntype FunctionCall struct {\n    This         Value\n    ArgumentList []Value\n    Otto         *Otto\n}\n```\n\nFunctionCall is an encapsulation of a JavaScript function call.\n\n### func (FunctionCall) Argument\n\n```go\nfunc (self FunctionCall) Argument(index int) Value\n```\n\nArgument will return the value of the argument at the given index.\n\nIf no such argument exists, undefined is returned.\n\n### type Object\n\n```go\ntype Object struct {}\n```\n\nObject is the representation of a JavaScript object.\n\n### func (Object) Call\n\n```go\nfunc (self Object) Call(name string, argumentList ...interface{}) (Value, error)\n```\n\nCall a method on the object.\n\nIt is essentially equivalent to:\n\n```go\nvar method, _ := object.Get(name)\nmethod.Call(object, argumentList...)\n```\n\nAn undefined value and an error will result if:\n\n1. There is an error during conversion of the argument list\n2. The property is not actually a function\n3. An (uncaught) exception is thrown\n\n### func (Object) Class\n\n```go\nfunc (self Object) Class() string\n```\n\nClass will return the class string of the object.\n\nThe return value will (generally) be one of:\n\n```plaintext\n    Object\n    Function\n    Array\n    String\n    Number\n    Boolean\n    Date\n    RegExp\n```\n\n### func (Object) Get\n\n```go\nfunc (self Object) Get(name string) (Value, error)\n```\n\nGet the value of the property with the given name.\n\n### func (Object) Keys\n\n```go\nfunc (self Object) Keys() []string\n```\n\nGet the keys for the object\n\nEquivalent to calling Object.keys on the object\n\n### func (Object) Set\n\n```go\nfunc (self Object) Set(name string, value interface{}) error\n```\n\nSet the property of the given name to the given value.\n\nAn error will result if the setting the property triggers an exception (i.e.\nread-only), or there is an error during conversion of the given value.\n\n### func (Object) Value\n\n```go\nfunc (self Object) Value() Value\n```\n\nValue will return self as a value.\n\n### type Otto\n\n```go\ntype Otto struct {\n    // Interrupt is a channel for interrupting the runtime. You can use this to halt a long running execution, for example.\n    // See \"Halting Problem\" for more information.\n    Interrupt chan func()\n}\n```\n\nOtto is the representation of the JavaScript runtime. Each instance of Otto has\na self-contained namespace.\n\n### func New\n\n```go\nfunc New() *Otto\n```\n\nNew will allocate a new JavaScript runtime\n\n### func Run\n\n```go\nfunc Run(src interface{}) (*Otto, Value, error)\n```\n\nRun will allocate a new JavaScript runtime, run the given source on the\nallocated runtime, and return the runtime, resulting value, and error (if any).\n\nsrc may be a string, a byte slice, a bytes.Buffer, or an io.Reader, but it MUST\nalways be in UTF-8.\n\nsrc may also be a Script.\n\nsrc may also be a Program, but if the AST has been modified, then runtime\nbehavior is undefined.\n\n### func (Otto) Call\n\n```go\nfunc (self Otto) Call(source string, this interface{}, argumentList ...interface{}) (Value, error)\n```\n\nCall the given JavaScript with a given this and arguments.\n\nIf this is nil, then some special handling takes place to determine the proper\nthis value, falling back to a \"standard\" invocation if necessary (where this is\nundefined).\n\nIf source begins with \"new \" (A lowercase new followed by a space), then Call\nwill invoke the function constructor rather than performing a function call. In\nthis case, the this argument has no effect.\n\n```go\n// value is a String object\nvalue, _ := vm.Call(\"Object\", nil, \"Hello, World.\")\n\n// Likewise...\nvalue, _ := vm.Call(\"new Object\", nil, \"Hello, World.\")\n\n// This will perform a concat on the given array and return the result\n// value is [ 1, 2, 3, undefined, 4, 5, 6, 7, \"abc\" ]\nvalue, _ := vm.Call(`[ 1, 2, 3, undefined, 4 ].concat`, nil, 5, 6, 7, \"abc\")\n```\n\n### func (*Otto) Compile\n\n```go\nfunc (self *Otto) Compile(filename string, src interface{}) (*Script, error)\n```\n\nCompile will parse the given source and return a Script value or nil and an\nerror if there was a problem during compilation.\n\n```go\nscript, err := vm.Compile(\"\", `var abc; if (!abc) abc = 0; abc += 2; abc;`)\nvm.Run(script)\n```\n\n### func (*Otto) Copy\n\n```go\nfunc (in *Otto) Copy() *Otto\n```\n\nCopy will create a copy/clone of the runtime.\n\nCopy is useful for saving some time when creating many similar runtimes.\n\nThis method works by walking the original runtime and cloning each object,\nscope, stash, etc. into a new runtime.\n\nBe on the lookout for memory leaks or inadvertent sharing of resources.\n\n### func (Otto) Get\n\n```go\nfunc (self Otto) Get(name string) (Value, error)\n```\n\nGet the value of the top-level binding of the given name.\n\nIf there is an error (like the binding does not exist), then the value will be\nundefined.\n\n### func (Otto) Object\n\n```go\nfunc (self Otto) Object(source string) (*Object, error)\n```\n\nObject will run the given source and return the result as an object.\n\nFor example, accessing an existing object:\n\n```go\nobject, _ := vm.Object(`Number`)\n```\n\nOr, creating a new object:\n\n```go\nobject, _ := vm.Object(`({ xyzzy: \"Nothing happens.\" })`)\n```\n\nOr, creating and assigning an object:\n\n```go\nobject, _ := vm.Object(`xyzzy = {}`)\nobject.Set(\"volume\", 11)\n```\n\nIf there is an error (like the source does not result in an object), then nil\nand an error is returned.\n\n### func (Otto) Run\n\n```go\nfunc (self Otto) Run(src interface{}) (Value, error)\n```\n\nRun will run the given source (parsing it first if necessary), returning the\nresulting value and error (if any)\n\nsrc may be a string, a byte slice, a bytes.Buffer, or an io.Reader, but it MUST\nalways be in UTF-8.\n\nIf the runtime is unable to parse source, then this function will return\nundefined and the parse error (nothing will be evaluated in this case).\n\nsrc may also be a Script.\n\nsrc may also be a Program, but if the AST has been modified, then runtime\nbehavior is undefined.\n\n### func (Otto) Set\n\n```go\nfunc (self Otto) Set(name string, value interface{}) error\n```\n\nSet the top-level binding of the given name to the given value.\n\nSet will automatically apply ToValue to the given value in order to convert it\nto a JavaScript value (type Value).\n\nIf there is an error (like the binding is read-only, or the ToValue conversion\nfails), then an error is returned.\n\nIf the top-level binding does not exist, it will be created.\n\n### func (Otto) ToValue\n\n```go\nfunc (self Otto) ToValue(value interface{}) (Value, error)\n```\n\nToValue will convert an interface{} value to a value digestible by\notto/JavaScript.\n\n### type Script\n\n```go\ntype Script struct {}\n```\n\nScript is a handle for some (reusable) JavaScript. Passing a Script value to a\nrun method will evaluate the JavaScript.\n\n### func (*Script) String\n\n```go\nfunc (self *Script) String() string\n```\n\n### type Value\n\n```go\ntype Value struct {}\n```\n\nValue is the representation of a JavaScript value.\n\n### func FalseValue\n\n```go\nfunc FalseValue() Value\n```\n\nFalseValue will return a value representing false.\n\nIt is equivalent to:\n\n```go\nToValue(false)\n```\n\n### func  NaNValue\n\n```go\nfunc NaNValue() Value\n```\n\nNaNValue will return a value representing NaN.\n\nIt is equivalent to:\n\n```go\nToValue(math.NaN())\n```\n\n### func  NullValue\n\n```go\nfunc NullValue() Value\n```\n\nNullValue will return a Value representing null.\n\n### func  ToValue\n\n```go\nfunc ToValue(value interface{}) (Value, error)\n```\n\nToValue will convert an interface{} value to a value digestible by\notto/JavaScript\n\nThis function will not work for advanced types (struct, map, slice/array, etc.)\nand you should use Otto.ToValue instead.\n\n### func  TrueValue\n\n```go\nfunc TrueValue() Value\n```\n\nTrueValue will return a value representing true.\n\nIt is equivalent to:\n\n```go\nToValue(true)\n```\n\n### func UndefinedValue\n\n```go\nfunc UndefinedValue() Value\n```\n\nUndefinedValue will return a Value representing undefined.\n\n### func (Value) Call\n\n```go\nfunc (value Value) Call(this Value, argumentList ...interface{}) (Value, error)\n```\n\nCall the value as a function with the given this value and argument list and\nreturn the result of invocation. It is essentially equivalent to:\n\n```js\n    value.apply(thisValue, argumentList)\n```\n\nAn undefined value and an error will result if:\n\n1. There is an error during conversion of the argument list\n2. The value is not actually a function\n3. An (uncaught) exception is thrown\n\n### func (Value) Class\n\n```go\nfunc (value Value) Class() string\n```\n\nClass will return the class string of the value or the empty string if value is\nnot an object.\n\nThe return value will (generally) be one of:\n\n```plaintext\n    Object\n    Function\n    Array\n    String\n    Number\n    Boolean\n    Date\n    RegExp\n```\n\n### func (Value) Export\n\n```go\nfunc (self Value) Export() (interface{}, error)\n```\n\nExport will attempt to convert the value to a Go representation and return it\nvia an interface{} kind.\n\nExport returns an error, but it will always be nil. It is present for backwards\ncompatibility.\n\nIf a reasonable conversion is not possible, then the original value is returned.\n\n```plaintext\n    undefined   -> nil (FIXME?: Should be Value{})\n    null        -> nil\n    boolean     -> bool\n    number      -> A number type (int, float32, uint64, ...)\n    string      -> string\n    Array       -> []interface{}\n    Object      -> map[string]interface{}\n```\n\n### func (Value) IsBoolean\n\n```go\nfunc (value Value) IsBoolean() bool\n```\n\nIsBoolean will return true if value is a boolean (primitive).\n\n### func (Value) IsDefined\n\n```go\nfunc (value Value) IsDefined() bool\n```\n\nIsDefined will return false if the value is undefined, and true otherwise.\n\n### func (Value) IsFunction\n\n```go\nfunc (value Value) IsFunction() bool\n```\n\nIsFunction will return true if value is a function.\n\n### func (Value) IsNaN\n\n```go\nfunc (value Value) IsNaN() bool\n```\n\nIsNaN will return true if value is NaN (or would convert to NaN).\n\n### func (Value) IsNull\n\n```go\nfunc (value Value) IsNull() bool\n```\n\nIsNull will return true if the value is null, and false otherwise.\n\n### func (Value) IsNumber\n\n```go\nfunc (value Value) IsNumber() bool\n```\n\nIsNumber will return true if value is a number (primitive).\n\n### func (Value) IsObject\n\n```go\nfunc (value Value) IsObject() bool\n```\n\nIsObject will return true if value is an object.\n\n### func (Value) IsPrimitive\n\n```go\nfunc (value Value) IsPrimitive() bool\n```\n\nIsPrimitive will return true if value is a primitive (any kind of primitive).\n\n### func (Value) IsString\n\n```go\nfunc (value Value) IsString() bool\n```\n\nIsString will return true if value is a string (primitive).\n\n### func (Value) IsUndefined\n\n```go\nfunc (value Value) IsUndefined() bool\n```\n\nIsUndefined will return true if the value is undefined, and false otherwise.\n\n### func (Value) Object\n\n```go\nfunc (value Value) Object() *Object\n```\n\nObject will return the object of the value, or nil if value is not an object.\n\nThis method will not do any implicit conversion. For example, calling this\nmethod on a string primitive value will not return a String object.\n\n### func (Value) String\n\n```go\nfunc (value Value) String() string\n```\n\nString will return the value as a string.\n\nThis method will make return the empty string if there is an error.\n\n### func (Value) ToBoolean\n\n```go\nfunc (value Value) ToBoolean() (bool, error)\n```\n\nToBoolean will convert the value to a boolean (bool).\n\n```plaintext\n    ToValue(0).ToBoolean() => false\n    ToValue(\"\").ToBoolean() => false\n    ToValue(true).ToBoolean() => true\n    ToValue(1).ToBoolean() => true\n    ToValue(\"Nothing happens\").ToBoolean() => true\n```\n\nIf there is an error during the conversion process (like an uncaught exception),\nthen the result will be false and an error.\n\n### func (Value) ToFloat\n\n```go\nfunc (value Value) ToFloat() (float64, error)\n```\n\nToFloat will convert the value to a number (float64).\n\n```plaintext\n    ToValue(0).ToFloat() => 0.\n    ToValue(1.1).ToFloat() => 1.1\n    ToValue(\"11\").ToFloat() => 11.\n```\n\nIf there is an error during the conversion process (like an uncaught exception),\nthen the result will be 0 and an error.\n\n### func (Value) ToInteger\n\n```go\nfunc (value Value) ToInteger() (int64, error)\n```\n\nToInteger will convert the value to a number (int64).\n\n```plaintext\n    ToValue(0).ToInteger() => 0\n    ToValue(1.1).ToInteger() => 1\n    ToValue(\"11\").ToInteger() => 11\n```\n\nIf there is an error during the conversion process (like an uncaught exception),\nthen the result will be 0 and an error.\n\n### func (Value) ToString\n\n```go\nfunc (value Value) ToString() (string, error)\n```\n\nToString will convert the value to a string (string).\n\n```plaintext\n    ToValue(0).ToString() => \"0\"\n    ToValue(false).ToString() => \"false\"\n    ToValue(1.1).ToString() => \"1.1\"\n    ToValue(\"11\").ToString() => \"11\"\n    ToValue('Nothing happens.').ToString() => \"Nothing happens.\"\n```\n\nIf there is an error during the conversion process (like an uncaught exception),\nthen the result will be the empty string (\"\") and an error.\n",
        "releases": [
            {
                "name": "v0.5.1",
                "date": "2024-11-05T09:53:13Z"
            },
            {
                "name": "v0.5.0",
                "date": "2024-11-04T11:14:33Z"
            },
            {
                "name": "v0.4.0",
                "date": "2024-04-15T19:14:30Z"
            },
            {
                "name": "v0.3.0",
                "date": "2023-12-20T21:04:32Z"
            },
            {
                "name": "v0.2.1",
                "date": "2022-12-04T21:46:29Z"
            },
            {
                "name": "v0.2.0",
                "date": "2022-11-29T14:43:35Z"
            },
            {
                "name": "",
                "date": "2022-11-29T09:04:16Z"
            }
        ]
    }
}