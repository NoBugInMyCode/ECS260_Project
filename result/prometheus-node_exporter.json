{
    "https://api.github.com/repos/prometheus/node_exporter": {
        "forks": 2409,
        "watchers": 11570,
        "stars": 11570,
        "languages": {
            "Go": 856593,
            "Shell": 16461,
            "C": 5757,
            "Makefile": 4464,
            "Dockerfile": 334
        },
        "commits": [
            "2025-01-16T09:03:38Z",
            "2025-01-10T09:58:08Z",
            "2024-08-27T20:59:20Z",
            "2024-08-27T20:48:32Z",
            "2024-08-23T20:34:23Z",
            "2024-08-22T20:42:48Z",
            "2025-01-01T17:08:28Z",
            "2024-12-29T18:18:49Z",
            "2024-05-30T07:30:31Z",
            "2024-09-22T22:14:34Z",
            "2024-12-11T03:39:59Z",
            "2022-09-12T13:11:50Z",
            "2024-12-19T15:49:22Z",
            "2024-11-10T10:58:03Z",
            "2024-12-17T17:22:08Z",
            "2024-12-17T13:11:26Z",
            "2024-12-17T13:04:22Z",
            "2024-11-05T09:36:13Z",
            "2024-11-26T11:17:19Z",
            "2024-11-12T18:21:23Z",
            "2024-11-11T18:13:13Z",
            "2024-11-11T07:45:18Z",
            "2024-11-11T07:44:55Z",
            "2024-11-07T20:46:38Z",
            "2024-11-01T16:19:23Z",
            "2024-11-01T16:19:13Z",
            "2024-11-01T16:19:10Z",
            "2024-11-01T16:19:06Z",
            "2024-10-08T17:47:42Z",
            "2024-10-08T12:39:30Z"
        ],
        "creation_date": "2013-04-18T14:44:52Z",
        "contributors": 30,
        "topics": [
            "host-metrics",
            "machine-metrics",
            "metrics",
            "node-metrics",
            "procfs",
            "prometheus",
            "prometheus-exporter",
            "system-information",
            "system-metrics"
        ],
        "subscribers": 178,
        "readme": "# Node exporter\n\n[![CircleCI](https://circleci.com/gh/prometheus/node_exporter/tree/master.svg?style=shield)][circleci]\n[![Buildkite status](https://badge.buildkite.com/94a0c1fb00b1f46883219c256efe9ce01d63b6505f3a942f9b.svg)](https://buildkite.com/prometheus/node-exporter)\n[![Docker Repository on Quay](https://quay.io/repository/prometheus/node-exporter/status)][quay]\n[![Docker Pulls](https://img.shields.io/docker/pulls/prom/node-exporter.svg?maxAge=604800)][hub]\n[![Go Report Card](https://goreportcard.com/badge/github.com/prometheus/node_exporter)][goreportcard]\n\nPrometheus exporter for hardware and OS metrics exposed by \\*NIX kernels, written\nin Go with pluggable metric collectors.\n\nThe [Windows exporter](https://github.com/prometheus-community/windows_exporter) is recommended for Windows users.\nTo expose NVIDIA GPU metrics, [prometheus-dcgm\n](https://github.com/NVIDIA/dcgm-exporter)\ncan be used.\n\n## Installation and Usage\n\nIf you are new to Prometheus and `node_exporter` there is a [simple step-by-step guide](https://prometheus.io/docs/guides/node-exporter/).\n\nThe `node_exporter` listens on HTTP port 9100 by default. See the `--help` output for more options.\n\n### Ansible\n\nFor automated installs with [Ansible](https://www.ansible.com/), there is the [Prometheus Community role](https://github.com/prometheus-community/ansible).\n\n### Docker\n\nThe `node_exporter` is designed to monitor the host system. Deploying in containers requires\nextra care in order to avoid monitoring the container itself.\n\nFor situations where containerized deployment is needed, some extra flags must be used to allow\nthe `node_exporter` access to the host namespaces.\n\nBe aware that any non-root mount points you want to monitor will need to be bind-mounted\ninto the container.\n\nIf you start container for host monitoring, specify `path.rootfs` argument.\nThis argument must match path in bind-mount of host root. The node\\_exporter will use\n`path.rootfs` as prefix to access host filesystem.\n\n```bash\ndocker run -d \\\n  --net=\"host\" \\\n  --pid=\"host\" \\\n  -v \"/:/host:ro,rslave\" \\\n  quay.io/prometheus/node-exporter:latest \\\n  --path.rootfs=/host\n```\n\nFor Docker compose, similar flag changes are needed.\n\n```yaml\n---\nversion: '3.8'\n\nservices:\n  node_exporter:\n    image: quay.io/prometheus/node-exporter:latest\n    container_name: node_exporter\n    command:\n      - '--path.rootfs=/host'\n    network_mode: host\n    pid: host\n    restart: unless-stopped\n    volumes:\n      - '/:/host:ro,rslave'\n```\n\nOn some systems, the `timex` collector requires an additional Docker flag,\n`--cap-add=SYS_TIME`, in order to access the required syscalls.\n\n## Collectors\n\nThere is varying support for collectors on each operating system. The tables\nbelow list all existing collectors and the supported systems.\n\nCollectors are enabled by providing a `--collector.<name>` flag.\nCollectors that are enabled by default can be disabled by providing a `--no-collector.<name>` flag.\nTo enable only some specific collector(s), use `--collector.disable-defaults --collector.<name> ...`.\n\n### Include & Exclude flags\n\nA few collectors can be configured to include or exclude certain patterns using dedicated flags. The exclude flags are used to indicate \"all except\", while the include flags are used to say \"none except\". Note that these flags are mutually exclusive on collectors that support both.\n\nExample:\n\n```txt\n--collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)\n```\n\nList:\n\nCollector | Scope | Include Flag | Exclude Flag\n--- | --- | --- | ---\narp | device | --collector.arp.device-include | --collector.arp.device-exclude\ncpu | bugs | --collector.cpu.info.bugs-include | N/A\ncpu | flags | --collector.cpu.info.flags-include | N/A\ndiskstats | device | --collector.diskstats.device-include | --collector.diskstats.device-exclude\nethtool | device | --collector.ethtool.device-include | --collector.ethtool.device-exclude\nethtool | metrics | --collector.ethtool.metrics-include | N/A\nfilesystem | fs-types | --collector.filesystem.fs-types-include | --collector.filesystem.fs-types-exclude\nfilesystem | mount-points | --collector.filesystem.mount-points-include | --collector.filesystem.mount-points-exclude\nhwmon | chip | --collector.hwmon.chip-include | --collector.hwmon.chip-exclude\nhwmon | sensor | --collector.hwmon.sensor-include | --collector.hwmon.sensor-exclude\ninterrupts | name | --collector.interrupts.name-include | --collector.interrupts.name-exclude\nnetdev | device | --collector.netdev.device-include | --collector.netdev.device-exclude\nqdisk | device | --collector.qdisk.device-include | --collector.qdisk.device-exclude\nslabinfo | slab-names | --collector.slabinfo.slabs-include | --collector.slabinfo.slabs-exclude\nsysctl | all | --collector.sysctl.include | N/A\nsystemd | unit | --collector.systemd.unit-include | --collector.systemd.unit-exclude\n\n### Enabled by default\n\nName     | Description | OS\n---------|-------------|----\narp | Exposes ARP statistics from `/proc/net/arp`. | Linux\nbcache | Exposes bcache statistics from `/sys/fs/bcache/`. | Linux\nbonding | Exposes the number of configured and active slaves of Linux bonding interfaces. | Linux\nbtrfs | Exposes btrfs statistics | Linux\nboottime | Exposes system boot time derived from the `kern.boottime` sysctl. | Darwin, Dragonfly, FreeBSD, NetBSD, OpenBSD, Solaris\nconntrack | Shows conntrack statistics (does nothing if no `/proc/sys/net/netfilter/` present). | Linux\ncpu | Exposes CPU statistics | Darwin, Dragonfly, FreeBSD, Linux, Solaris, OpenBSD\ncpufreq | Exposes CPU frequency statistics | Linux, Solaris\ndiskstats | Exposes disk I/O statistics. | Darwin, Linux, OpenBSD\ndmi | Expose Desktop Management Interface (DMI) info from `/sys/class/dmi/id/` | Linux\nedac | Exposes error detection and correction statistics. | Linux\nentropy | Exposes available entropy. | Linux\nexec | Exposes execution statistics. | Dragonfly, FreeBSD\nfibrechannel | Exposes fibre channel information and statistics from `/sys/class/fc_host/`. | Linux\nfilefd | Exposes file descriptor statistics from `/proc/sys/fs/file-nr`. | Linux\nfilesystem | Exposes filesystem statistics, such as disk space used. | Darwin, Dragonfly, FreeBSD, Linux, OpenBSD\nhwmon | Expose hardware monitoring and sensor data from `/sys/class/hwmon/`. | Linux\ninfiniband | Exposes network statistics specific to InfiniBand and Intel OmniPath configurations. | Linux\nipvs | Exposes IPVS status from `/proc/net/ip_vs` and stats from `/proc/net/ip_vs_stats`. | Linux\nloadavg | Exposes load average. | Darwin, Dragonfly, FreeBSD, Linux, NetBSD, OpenBSD, Solaris\nmdadm | Exposes statistics about devices in `/proc/mdstat` (does nothing if no `/proc/mdstat` present). | Linux\nmeminfo | Exposes memory statistics. | Darwin, Dragonfly, FreeBSD, Linux, OpenBSD\nnetclass | Exposes network interface info from `/sys/class/net/` | Linux\nnetdev | Exposes network interface statistics such as bytes transferred. | Darwin, Dragonfly, FreeBSD, Linux, OpenBSD\nnetisr | Exposes netisr statistics | FreeBSD\nnetstat | Exposes network statistics from `/proc/net/netstat`. This is the same information as `netstat -s`. | Linux\nnfs | Exposes NFS client statistics from `/proc/net/rpc/nfs`. This is the same information as `nfsstat -c`. | Linux\nnfsd | Exposes NFS kernel server statistics from `/proc/net/rpc/nfsd`. This is the same information as `nfsstat -s`. | Linux\nnvme | Exposes NVMe info from `/sys/class/nvme/` | Linux\nos | Expose OS release info from `/etc/os-release` or `/usr/lib/os-release` | _any_\npowersupplyclass | Exposes Power Supply statistics from `/sys/class/power_supply` | Linux\npressure | Exposes pressure stall statistics from `/proc/pressure/`. | Linux (kernel 4.20+ and/or [CONFIG\\_PSI](https://www.kernel.org/doc/html/latest/accounting/psi.html))\nrapl | Exposes various statistics from `/sys/class/powercap`. | Linux\nschedstat | Exposes task scheduler statistics from `/proc/schedstat`. | Linux\nselinux | Exposes SELinux statistics. | Linux\nsockstat | Exposes various statistics from `/proc/net/sockstat`. | Linux\nsoftnet | Exposes statistics from `/proc/net/softnet_stat`. | Linux\nstat | Exposes various statistics from `/proc/stat`. This includes boot time, forks and interrupts. | Linux\ntapestats | Exposes statistics from `/sys/class/scsi_tape`. | Linux\ntextfile | Exposes statistics read from local disk. The `--collector.textfile.directory` flag must be set. | _any_\nthermal | Exposes thermal statistics like `pmset -g therm`. | Darwin\nthermal\\_zone | Exposes thermal zone & cooling device statistics from `/sys/class/thermal`. | Linux\ntime | Exposes the current system time. | _any_\ntimex | Exposes selected adjtimex(2) system call stats. | Linux\nudp_queues | Exposes UDP total lengths of the rx_queue and tx_queue from `/proc/net/udp` and `/proc/net/udp6`. | Linux\nuname | Exposes system information as provided by the uname system call. | Darwin, FreeBSD, Linux, OpenBSD\nvmstat | Exposes statistics from `/proc/vmstat`. | Linux\nwatchdog | Exposes statistics from `/sys/class/watchdog` | Linux\nxfs | Exposes XFS runtime statistics. | Linux (kernel 4.4+)\nzfs | Exposes [ZFS](http://open-zfs.org/) performance statistics. | FreeBSD, [Linux](http://zfsonlinux.org/), Solaris\n\n### Disabled by default\n\n`node_exporter` also implements a number of collectors that are disabled by default.  Reasons for this vary by\ncollector, and may include:\n* High cardinality\n* Prolonged runtime that exceeds the Prometheus `scrape_interval` or `scrape_timeout`\n* Significant resource demands on the host\n\nYou can enable additional collectors as desired by adding them to your\ninit system's or service supervisor's startup configuration for\n`node_exporter` but caution is advised.  Enable at most one at a time,\ntesting first on a non-production system, then by hand on a single\nproduction node.  When enabling additional collectors, you should\ncarefully monitor the change by observing the `\nscrape_duration_seconds` metric to ensure that collection completes\nand does not time out.  In addition, monitor the\n`scrape_samples_post_metric_relabeling` metric to see the changes in\ncardinality.\n\nName     | Description | OS\n---------|-------------|----\nbuddyinfo | Exposes statistics of memory fragments as reported by /proc/buddyinfo. | Linux\ncgroups | A summary of the number of active and enabled cgroups | Linux\ncpu\\_vulnerabilities | Exposes CPU vulnerability information from sysfs. | Linux\ndevstat | Exposes device statistics | Dragonfly, FreeBSD\ndrm | Expose GPU metrics using sysfs / DRM, `amdgpu` is the only driver which exposes this information through DRM | Linux\ndrbd | Exposes Distributed Replicated Block Device statistics (to version 8.4) | Linux\nethtool | Exposes network interface information and network driver statistics equivalent to `ethtool`, `ethtool -S`, and `ethtool -i`. | Linux\ninterrupts | Exposes detailed interrupts statistics. | Linux, OpenBSD\nksmd | Exposes kernel and system statistics from `/sys/kernel/mm/ksm`. | Linux\nlnstat | Exposes stats from `/proc/net/stat/`. | Linux\nlogind | Exposes session counts from [logind](http://www.freedesktop.org/wiki/Software/systemd/logind/). | Linux\nmeminfo\\_numa | Exposes memory statistics from `/sys/devices/system/node/node[0-9]*/meminfo`, `/sys/devices/system/node/node[0-9]*/numastat`. | Linux\nmountstats | Exposes filesystem statistics from `/proc/self/mountstats`. Exposes detailed NFS client statistics. | Linux\nnetwork_route | Exposes the routing table as metrics | Linux\nperf | Exposes perf based metrics (Warning: Metrics are dependent on kernel configuration and settings). | Linux\nprocesses | Exposes aggregate process statistics from `/proc`. | Linux\nqdisc | Exposes [queuing discipline](https://en.wikipedia.org/wiki/Network_scheduler#Linux_kernel) statistics | Linux\nslabinfo | Exposes slab statistics from `/proc/slabinfo`. Note that permission of `/proc/slabinfo` is usually 0400, so set it appropriately. | Linux\nsoftirqs | Exposes detailed softirq statistics from `/proc/softirqs`. | Linux\nsysctl | Expose sysctl values from `/proc/sys`. Use `--collector.sysctl.include(-info)` to configure. | Linux\nsystemd | Exposes service and system status from [systemd](http://www.freedesktop.org/wiki/Software/systemd/). | Linux\ntcpstat | Exposes TCP connection status information from `/proc/net/tcp` and `/proc/net/tcp6`. (Warning: the current version has potential performance issues in high load situations.) | Linux\nwifi | Exposes WiFi device and station statistics. | Linux\nxfrm | Exposes statistics from `/proc/net/xfrm_stat` | Linux\nzoneinfo | Exposes NUMA memory zone metrics. | Linux\n\n### Deprecated\n\nThese collectors are deprecated and will be removed in the next major release.\n\nName     | Description | OS\n---------|-------------|----\nntp | Exposes local NTP daemon health to check [time](./docs/TIME.md) | _any_\nrunit | Exposes service status from [runit](http://smarden.org/runit/). | _any_\nsupervisord | Exposes service status from [supervisord](http://supervisord.org/). | _any_\n\n### Perf Collector\n\nThe `perf` collector may not work out of the box on some Linux systems due to kernel\nconfiguration and security settings. To allow access, set the following `sysctl`\nparameter:\n\n```\nsysctl -w kernel.perf_event_paranoid=X\n```\n\n- 2 allow only user-space measurements (default since Linux 4.6).\n- 1 allow both kernel and user measurements (default before Linux 4.6).\n- 0 allow access to CPU-specific data but not raw tracepoint samples.\n- -1 no restrictions.\n\nDepending on the configured value different metrics will be available, for most\ncases `0` will provide the most complete set. For more information see [`man 2\nperf_event_open`](http://man7.org/linux/man-pages/man2/perf_event_open.2.html).\n\nBy default, the `perf` collector will only collect metrics of the CPUs that\n`node_exporter` is running on (ie\n[`runtime.NumCPU`](https://golang.org/pkg/runtime/#NumCPU). If this is\ninsufficient (e.g. if you run `node_exporter` with its CPU affinity set to\nspecific CPUs), you can specify a list of alternate CPUs by using the\n`--collector.perf.cpus` flag. For example, to collect metrics on CPUs 2-6, you\nwould specify: `--collector.perf --collector.perf.cpus=2-6`. The CPU\nconfiguration is zero indexed and can also take a stride value; e.g.\n`--collector.perf --collector.perf.cpus=1-10:5` would collect on CPUs\n1, 5, and 10.\n\nThe `perf` collector is also able to collect\n[tracepoint](https://www.kernel.org/doc/html/latest/core-api/tracepoint.html)\ncounts when using the `--collector.perf.tracepoint` flag. Tracepoints can be\nfound using [`perf list`](http://man7.org/linux/man-pages/man1/perf.1.html) or\nfrom debugfs. And example usage of this would be\n`--collector.perf.tracepoint=\"sched:sched_process_exec\"`.\n\n### Sysctl Collector\n\nThe `sysctl` collector can be enabled with `--collector.sysctl`. It supports exposing numeric sysctl values\nas metrics using the `--collector.sysctl.include` flag and string values as info metrics by using the\n`--collector.sysctl.include-info` flag. The flags can be repeated. For sysctl with multiple numeric values,\nan optional mapping can be given to expose each value as its own metric. Otherwise an `index` label is used\nto identify the different fields.\n\n#### Examples\n##### Numeric values\n###### Single values\nUsing `--collector.sysctl.include=vm.user_reserve_kbytes`:\n`vm.user_reserve_kbytes = 131072` -> `node_sysctl_vm_user_reserve_kbytes 131072`\n\n###### Multiple values\nA sysctl can contain multiple values, for example:\n```\nnet.ipv4.tcp_rmem = 4096\t131072\t6291456\n```\nUsing `--collector.sysctl.include=net.ipv4.tcp_rmem` the collector will expose:\n```\nnode_sysctl_net_ipv4_tcp_rmem{index=\"0\"} 4096\nnode_sysctl_net_ipv4_tcp_rmem{index=\"1\"} 131072\nnode_sysctl_net_ipv4_tcp_rmem{index=\"2\"} 6291456\n```\nIf the indexes have defined meaning like in this case, the values can be mapped to multiple metrics by appending the mapping to the --collector.sysctl.include flag:\nUsing `--collector.sysctl.include=net.ipv4.tcp_rmem:min,default,max` the collector will expose:\n```\nnode_sysctl_net_ipv4_tcp_rmem_min 4096\nnode_sysctl_net_ipv4_tcp_rmem_default 131072\nnode_sysctl_net_ipv4_tcp_rmem_max 6291456\n```\n\n##### String values\nString values need to be exposed as info metric. The user selects them by using the `--collector.sysctl.include-info` flag.\n\n###### Single values\n`kernel.core_pattern = core` -> `node_sysctl_info{key=\"kernel.core_pattern_info\", value=\"core\"} 1`\n\n###### Multiple values\nGiven the following sysctl:\n```\nkernel.seccomp.actions_avail = kill_process kill_thread trap errno trace log allow\n```\nSetting `--collector.sysctl.include-info=kernel.seccomp.actions_avail` will yield:\n```\nnode_sysctl_info{key=\"kernel.seccomp.actions_avail\", index=\"0\", value=\"kill_process\"} 1\nnode_sysctl_info{key=\"kernel.seccomp.actions_avail\", index=\"1\", value=\"kill_thread\"} 1\n...\n```\n\n### Textfile Collector\n\nThe `textfile` collector is similar to the [Pushgateway](https://github.com/prometheus/pushgateway),\nin that it allows exporting of statistics from batch jobs. It can also be used\nto export static metrics, such as what role a machine has. The Pushgateway\nshould be used for service-level metrics. The `textfile` module is for metrics\nthat are tied to a machine.\n\nTo use it, set the `--collector.textfile.directory` flag on the `node_exporter` commandline. The\ncollector will parse all files in that directory matching the glob `*.prom`\nusing the [text\nformat](http://prometheus.io/docs/instrumenting/exposition_formats/). **Note:** Timestamps are not supported.\n\nTo atomically push completion time for a cron job:\n```\necho my_batch_job_completion_time $(date +%s) > /path/to/directory/my_batch_job.prom.$$\nmv /path/to/directory/my_batch_job.prom.$$ /path/to/directory/my_batch_job.prom\n```\n\nTo statically set roles for a machine using labels:\n```\necho 'role{role=\"application_server\"} 1' > /path/to/directory/role.prom.$$\nmv /path/to/directory/role.prom.$$ /path/to/directory/role.prom\n```\n\n### Filtering enabled collectors\n\nThe `node_exporter` will expose all metrics from enabled collectors by default.  This is the recommended way to collect metrics to avoid errors when comparing metrics of different families.\n\nFor advanced use the `node_exporter` can be passed an optional list of collectors to filter metrics. The parameters `collect[]` and `exclude[]` can be used multiple times (but cannot be combined).  In Prometheus configuration you can use this syntax under the [scrape config](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#<scrape_config>).\n\nCollect only `cpu` and `meminfo` collector metrics:\n```\n  params:\n    collect[]:\n      - cpu\n      - meminfo\n```\n\nCollect all enabled collector metrics but exclude `netdev`:\n```\n  params:\n    exclude[]:\n      - netdev\n```\n\nThis can be useful for having different Prometheus servers collect specific metrics from nodes.\n\n## Development building and running\n\nPrerequisites:\n\n* [Go compiler](https://golang.org/dl/)\n* RHEL/CentOS: `glibc-static` package.\n\nBuilding:\n\n    git clone https://github.com/prometheus/node_exporter.git\n    cd node_exporter\n    make build\n    ./node_exporter <flags>\n\nTo see all available configuration flags:\n\n    ./node_exporter -h\n\n## Running tests\n\n    make test\n\n## TLS endpoint\n\n**EXPERIMENTAL**\n\nThe exporter supports TLS via a new web configuration file.\n\n```console\n./node_exporter --web.config.file=web-config.yml\n```\n\nSee the [exporter-toolkit web-configuration](https://github.com/prometheus/exporter-toolkit/blob/master/docs/web-configuration.md) for more details.\n\n[travis]: https://travis-ci.org/prometheus/node_exporter\n[hub]: https://hub.docker.com/r/prom/node-exporter/\n[circleci]: https://circleci.com/gh/prometheus/node_exporter\n[quay]: https://quay.io/repository/prometheus/node-exporter\n[goreportcard]: https://goreportcard.com/report/github.com/prometheus/node_exporter\n",
        "releases": [
            {
                "name": "1.8.2 / 2024-06-19",
                "date": "2024-07-14T12:37:45Z"
            },
            {
                "name": "1.8.1 / 2024-05-16",
                "date": "2024-05-21T19:28:43Z"
            },
            {
                "name": "1.8.0 / 2024-04-24",
                "date": "2024-04-24T13:33:54Z"
            },
            {
                "name": "1.7.0 / 2023-11-11",
                "date": "2023-11-13T01:09:55Z"
            },
            {
                "name": "1.6.1 / 2023-06-17",
                "date": "2023-07-17T12:42:47Z"
            },
            {
                "name": "1.6.0 / 2023-05-27",
                "date": "2023-05-27T12:17:07Z"
            },
            {
                "name": "1.5.0 / 2022-11-29",
                "date": "2022-11-29T19:33:28Z"
            },
            {
                "name": "1.4.1 / 2022-11-29",
                "date": "2022-11-29T18:57:41Z"
            },
            {
                "name": "1.4.0 / 2022-09-24",
                "date": "2022-09-26T17:04:48Z"
            },
            {
                "name": "1.4.0-rc.0 / 2022-07-27",
                "date": "2022-07-27T16:25:26Z"
            },
            {
                "name": "1.3.1 / 2021-12-01",
                "date": "2021-12-05T16:05:21Z"
            },
            {
                "name": "1.3.0 / 2021-10-20",
                "date": "2021-11-18T16:45:56Z"
            },
            {
                "name": "1.2.2 / 2021-08-06",
                "date": "2021-08-06T16:50:51Z"
            },
            {
                "name": "1.2.1 / 2021-07-23",
                "date": "2021-08-05T10:43:44Z"
            },
            {
                "name": "1.2.0 / 2021-07-15",
                "date": "2021-07-15T17:51:24Z"
            },
            {
                "name": "1.1.2 / 2021-03-05",
                "date": "2021-03-05T10:24:36Z"
            },
            {
                "name": "1.1.1 / 2021-02-12",
                "date": "2021-02-13T18:47:24Z"
            },
            {
                "name": "1.1.0 / 2021-02-05",
                "date": "2021-02-06T08:33:28Z"
            },
            {
                "name": "1.0.1 / 2020-06-15",
                "date": "2020-06-16T14:18:56Z"
            },
            {
                "name": "1.0.0 / 2020-05-25",
                "date": "2020-05-26T06:19:52Z"
            },
            {
                "name": "1.0.0-rc.1 / 2020-05-14",
                "date": "2020-05-14T15:57:06Z"
            },
            {
                "name": "1.0.0-rc.0 / 2020-02-20",
                "date": "2020-02-20T13:09:02Z"
            },
            {
                "name": "0.18.1 / 2019-06-04",
                "date": "2019-06-04T19:27:59Z"
            },
            {
                "name": "0.18.0 / 2019-05-09",
                "date": "2019-05-09T23:29:36Z"
            },
            {
                "name": "0.17.0 / 2018-11-30",
                "date": "2018-11-30T16:01:01Z"
            },
            {
                "name": "0.17.0-rc.0 / 2018-10-19",
                "date": "2018-10-20T06:37:31Z"
            },
            {
                "name": "0.16.0 / 2018-05-15",
                "date": "2018-05-15T16:33:41Z"
            },
            {
                "name": "0.16.0-rc.3 / 2018-04-27",
                "date": "2018-04-27T16:02:17Z"
            },
            {
                "name": "0.16.0-rc.2 / 2018-04-17",
                "date": "2018-04-17T14:59:07Z"
            },
            {
                "name": "0.16.0-rc.1 / 2018-04-04",
                "date": "2018-04-05T05:52:58Z"
            },
            {
                "name": "0.16.0-rc.0 / 2018-03-09",
                "date": "2018-03-09T15:25:06Z"
            },
            {
                "name": "v0.15.2 / 2017-12-06",
                "date": "2017-12-06T11:16:19Z"
            },
            {
                "name": "v0.15.1 / 2017-11-07",
                "date": "2017-11-07T18:37:18Z"
            },
            {
                "name": "v0.15.0 / 2017-10-06",
                "date": "2017-10-06T11:49:01Z"
            },
            {
                "name": "0.14.0 / 2017-03-21",
                "date": "2017-03-21T12:10:24Z"
            },
            {
                "name": "0.14.0-rc.2 / 2017-03-07",
                "date": "2017-03-07T14:39:00Z"
            },
            {
                "name": "0.14.0-rc.1 / 2017-01-16",
                "date": "2017-01-16T15:57:37Z"
            },
            {
                "name": "0.13.0 / 2016-11-26",
                "date": "2016-11-26T13:08:34Z"
            },
            {
                "name": "0.13.0-rc.2 / 2016-11-19",
                "date": "2016-11-19T07:26:46Z"
            },
            {
                "name": "0.13.0-rc.1 / 2016-10-16",
                "date": "2016-10-16T12:34:06Z"
            },
            {
                "name": "0.12.0 / 2016-05-05",
                "date": "2016-05-05T22:12:24Z"
            },
            {
                "name": "0.12.0rc3",
                "date": "2016-02-04T12:44:50Z"
            },
            {
                "name": "0.12.0rc2",
                "date": "2016-02-04T12:37:40Z"
            },
            {
                "name": "0.12.0rc1",
                "date": "2015-10-06T17:40:35Z"
            },
            {
                "name": "0.11.0 / 2015-07-27",
                "date": "2015-07-27T21:33:55Z"
            },
            {
                "name": "0.10.0 / 2015-06-10",
                "date": "2015-06-10T16:11:27Z"
            },
            {
                "name": "0.9.0 / 2015-05-26",
                "date": "2015-05-26T08:46:57Z"
            },
            {
                "name": "0.8.1 / 05.05.2015",
                "date": "2015-05-05T11:29:23Z"
            },
            {
                "name": "0.8.0 / 2015-03-09",
                "date": "2015-04-20T16:40:25Z"
            }
        ]
    }
}