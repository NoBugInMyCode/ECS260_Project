{
    "https://api.github.com/repos/mtdvio/every-programmer-should-know": {
        "forks": 7915,
        "watchers": 85897,
        "stars": 85897,
        "languages": {},
        "commits": [
            "2024-05-10T06:51:02Z",
            "2024-05-09T21:26:25Z",
            "2022-11-23T11:06:04Z",
            "2022-11-23T11:05:19Z",
            "2022-11-23T11:04:48Z",
            "2022-11-23T11:03:08Z",
            "2022-11-23T11:02:17Z",
            "2022-11-23T11:01:38Z",
            "2022-11-23T11:01:00Z",
            "2022-11-23T11:00:16Z",
            "2022-11-23T10:59:42Z",
            "2022-11-23T10:59:11Z",
            "2022-11-23T10:58:29Z",
            "2022-11-23T10:58:01Z",
            "2022-11-23T10:17:42Z",
            "2022-11-14T18:41:29Z",
            "2022-11-07T13:53:51Z",
            "2022-10-11T16:42:53Z",
            "2022-09-11T13:59:00Z",
            "2022-09-01T14:13:45Z",
            "2022-08-13T16:07:07Z",
            "2022-08-13T15:57:20Z",
            "2022-08-07T22:17:55Z",
            "2022-07-25T19:27:33Z",
            "2022-07-08T13:23:28Z",
            "2022-07-08T13:17:34Z",
            "2022-07-08T13:15:14Z",
            "2022-07-08T13:14:29Z",
            "2022-07-08T13:12:18Z",
            "2022-07-06T13:24:32Z"
        ],
        "creation_date": "2017-08-24T13:18:26Z",
        "contributors": 30,
        "topics": [
            "cc-by",
            "collection",
            "computer-science",
            "educational",
            "novice"
        ],
        "subscribers": 1974,
        "readme": "> *[Join our community](https://metadevelopment.io/)* for professional Software Developers and get more control over your life and career! \n\n----\n\n# Every Programmer Should Know :thinking:\nA collection of (mostly) technical things every software developer should know.\n\n:point_up: *These are resources I can recommend to every programmer regardless of their skill level or tech stack*\n\nHighly opinionated :bomb:. Not backed by science.\nComes in no particular order :recycle:\n\nU like it? :star: it and [share](https://twitter.com/mr_mig_by/status/900735231552098306) with a friendly developer!\nU don't like it? [Watch the doggo](https://twitter.com/RespectfulMemes/status/900147758845308930) :dog:\n\n*P.S. You [don't need to know](https://xkcd.com/1050/) all of that by heart to be a programmer.\nBut knowing the stuff will help you become better! :muscle:*\n\n*P.P.S. [Contributions](CONTRIBUTING.md) are welcome!*\n\n----\n\n### Introduction\n- :movie_camera: [Map of Computer Science](https://www.youtube.com/watch?v=SzJ46YA_RaA)\n- :movie_camera: [40 Key Computer Science Concepts Explained In Layman\u2019s Terms](http://carlcheo.com/compsci)\n- :page_facing_up: [Computer Science Roadmap](https://roadmap.sh/computer-science)\n\n### Falsehoods\n- [Awesome Falsehoods](https://github.com/kdeldycke/awesome-falsehood)\n  \ud83d\udc8a Curated list of falsehoods programmers believe in.\n  Check for things you do not know about Strings, Addresses, Names, Numbers, Emails, Timezones and Dates and more.\n\n### Algorithms\n- [Big O Cheatsheet](http://bigocheatsheet.com/)\n- :book: [Computer Science Distilled](https://www.goodreads.com/book/show/34189798-computer-science-distilled)\n- :book: [Grokking Algorithms](https://www.goodreads.com/book/show/22847284-grokking-algorithms-an-illustrated-guide-for-programmers-and-other-curio)\n- :book: [Introduction to Algorithms](https://www.goodreads.com/book/show/108986.Introduction_to_Algorithms?from_search=true&from_srp=true&qid=8mUglV9uZ1&rank=1)\n- [Algorithms Visualization](https://www.cs.usfca.edu/~galles/visualization/Algorithms.html)\n- [Algorithms for Competitive Programming](https://cp-algorithms.com/)\n\n### Data Structures\n- :movie_camera: [UC Berkeley, Data Structures Course](https://sp19.datastructur.es/)\n- [Foundations of Data Structures - EDX](https://www.edx.org/course/foundations-data-structures-iitbombayx-cs213-1x-0#!)\n- [Data Structures - Coursera](https://www.coursera.org/learn/data-structures)\n- [Mathematics for Computer Science - Eric Lehman](https://courses.csail.mit.edu/6.042/spring17/mcs.pdf)\n\n### Numbers\n- :book: [How to Count](https://www.goodreads.com/book/show/12093869-how-to-count)\n- :page_facing_up: [Floating Point Guide](http://floating-point-gui.de/)\n- :page_facing_up: [What Every Computer Scientist Should Know About Floating-Point Arithmetic](https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html#680)\n- :page_facing_up: [Basic Number Theory Every Programmer Should Know...](https://www.codechef.com/wiki/tutorial-number-theory/)\n\n### Strings\n- :page_facing_up: [Unicode and Character Sets](https://www.joelonsoftware.com/articles/Unicode.html)\n- [Homoglyphs](https://github.com/codebox/homoglyph/)\n- [Unicode Common Locale Data Repository](http://cldr.unicode.org/)\n- :movie_camera: [ASCII](https://www.youtube.com/watch?v=B1Sf1IhA0j4)\n- :movie_camera: [UTF-8](https://www.youtube.com/watch?v=vLBtrd9Ar28)\n\n### Latency\n- [Interactive Latency Infographics](https://people.eecs.berkeley.edu/~rcs/research/interactive_latency.html)\n- :page_facing_up: [Latency Numbers Every Programmer Should Know](https://gist.github.com/jboner/2841832)\n\n### Time\n- :page_facing_up: [Some notes about time](https://unix4lyfe.org/time/)\n- :movie_camera: [The Problem with Timezones](https://www.youtube.com/watch?v=-5wpm-gesOY)\n\n### Memory\n- :page_facing_up: [What every Programmer should know about memory](https://lwn.net/Articles/250967/)\n\n### Distributed Systems\n- :book: [Understanding Distributed Systems](https://www.goodreads.com/book/show/56977420-understanding-distributed-systems)\n- :book: [Designing Data-Intensive Applications](https://www.goodreads.com/book/show/23463279-designing-data-intensive-applications)\n- :scroll: [Designs, Lessons and Advice from Building Large Distributed Systems](https://www.cs.cornell.edu/projects/ladis2009/talks/dean-keynote-ladis2009.pdf)\n- :scroll: [Time, Clocks and the Ordering of Events in a Distributed System](https://www.microsoft.com/en-us/research/publication/time-clocks-ordering-events-distributed-system/?from=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Flamport%2Fpubs%2Ftime-clocks.pdf)\n- :page_facing_up: [There is No Now](https://queue.acm.org/detail.cfm?id=2745385)\n- :page_facing_up: [Jepsen: how different databases behave under partition](https://aphyr.com/tags/jepsen)\n- :scroll: [Fallacies of Distributed Computing Explained](https://pages.cs.wisc.edu/~zuyu/files/fallacies.pdf)\n\n### RegExp\n- [RegexHQ](https://github.com/regexhq)\n- [Learn regex the easy way](https://github.com/ziishaned/learn-regex)\n\n### Security\n- :book: [Security Programming](https://www.dwheeler.com/secure-programs/)\n- :page_facing_up: [Rolling Your Own Crypto](http://loup-vaillant.fr/articles/rolling-your-own-crypto)\n- :page_facing_up: [Cryptographic Right Answers](https://gist.github.com/tqbf/be58d2d39690c3b366ad)\n- :page_facing_up: [An Open Letter to Developers Everywhere (About Cryptography)](https://gist.github.com/paragonie-scott/e9319254c8ecbad4f227)\n- :book: [Foundations of Security: What Every Programmer Needs to Know ](https://www.goodreads.com/book/show/128003.Foundations_of_Security)\n- [OWASP Top 10](https://owasp.org/www-project-top-ten)\n- [Web Application Exploits and Defenses](https://google-gruyere.appspot.com/part1)\n- :page_facing_up: [Hashing, Encryption and Encoding](https://www.integralist.co.uk/posts/hashing-and-encryption/)\n\n### UX/Usability\n- :book: [Don't Make Me Think: A Common Sense Approach to Web Usability](https://www.goodreads.com/book/show/18197267-don-t-make-me-think-revisited)\n- :movie_camera: [Inventing on Principle](https://vimeo.com/36579366)\n\n\n### SEO\n- :page_facing_up: [What Every Programmer Should Know About SEO](https://katemats.com/blog/what-every-programmer-should-know-about-seo)\n\n### Architecture\n- :scroll: [A Field Guide to Boxology](https://web.cs.wpi.edu/~cs562/s98/pdf/Boxology.pdf)\n- :scroll: [Out of the Tar Pit](https://github.com/papers-we-love/papers-we-love/blob/master/design/out-of-the-tar-pit.pdf?raw=true)\n- :scroll: [No Silver Bullet \u2014 Essence and Accidents of Software Engineering](http://www.cs.unc.edu/techreports/86-020.pdf)\n- :movie_camera: [Growing a Language](https://www.youtube.com/watch?v=_ahvzDzKdB0)\n- :movie_camera: [CQRS and Event Sourcing](https://www.youtube.com/watch?v=JHGkaShoyNs)\n- :book: [Practical Object Oriented Design in Ruby](https://www.poodr.com/)\n- :movie_camera: [Evolutionary Software Architectures](https://www.youtube.com/watch?v=CglSFhwbI3s)\n- [System Design: A Primer](https://github.com/donnemartin/system-design-primer)\n- :page_facing_up: [How JavaScript works: part-1](https://blog.sessionstack.com/how-does-javascript-actually-work-part-1-b0bacc073cf), [2](https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e), [3](https://blog.sessionstack.com/how-javascript-works-memory-management-how-to-handle-4-common-memory-leaks-3f28b94cfbec), [4](https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5)\n- :movie_camera: [Entity-Component-System Architecture with Unity by example](https://www.youtube.com/watch?v=lNTaC-JWmdI&t=166s&list=PLZlJZzHmx31XvgT96DfbXQ4IMb1ryztbp&index=33)\n\n### Code Design\n- :page_facing_up: [Programming Principles Wiki](http://www.principles-wiki.net/)\n\n### Engineering Philosophy\n- :movie_camera: [Category Theory in Life](https://www.youtube.com/watch?v=ho7oagHeqNc)\n- :movie_camera: [Simple Made Easy](https://www.infoq.com/presentations/Simple-Made-Easy)\n- :page_facing_up: [Speed In Software Development](https://www.targetprocess.com/articles/speed-in-software-development/)\n- :movie_camera: [#NoEstimates](https://www.youtube.com/watch?v=QVBlnCTu9Ms)\n- :movie_camera: [The Myth of the Genius Programmer](https://www.youtube.com/watch?v=0SARbwvhupQ&feature=youtu.be)\n- :movie_camera: [Making Badass Developers](https://www.youtube.com/watch?v=FKTxC9pl-WM&t=2s)\n- :page_facing_up: [The Ten Rules of a Zen Programmer](https://www.zenprogrammer.org/en/10-rules-of-a-zen-programmer.html)\n- :page_facing_up: [The mythical 10x programmer](http://antirez.com/news/112)\n- :page_facing_up: [The Debugging Mindset](https://queue.acm.org/detail.cfm?id=3068754)\n- :movie_camera: [The Future of Programming](http://worrydream.com/dbx/)\n- :page_facing_up: [The Good Software Development Manifesto](https://www.infoworld.com/article/3214481/application-development/the-good-software-development-manifesto.html)\n- :movie_camera: [All the Little Things](https://www.youtube.com/watch?v=8bZh5LMaSmE)\n- :page_facing_up: [Teach Yourself Programming in Ten Years](http://norvig.com/21-days.html)\n\n\n### Practices\n- :book: [Working Effectively with Legacy Code](https://www.goodreads.com/book/show/44919.Working_Effectively_with_Legacy_Code)\n- :book: [The Art of Readable Code: Simple and Practical Techniques for Writing Better Code](https://www.goodreads.com/ru/book/show/8677004-the-art-of-readable-code)\n- :book: [Code Complete](https://www.goodreads.com/book/show/4845.Code_Complete)\n- :book: [Clean Code: A Handbook of Agile Software Craftsmanship](https://www.goodreads.com/book/show/3735293-clean-code)\n- :book: [Test Driven Development: By Example](https://www.goodreads.com/book/show/387190.Test_Driven_Development)\n- :white_check_mark: [Going To Production Checklist](https://github.com/mr-mig/going-to-production)\n- :book: [Release It!](https://www.goodreads.com/book/show/1069827.Release_It_)\n- :book: [Professor Frisby's Mostly Adequate Guide to Functional Programming](https://mostly-adequate.gitbook.io/mostly-adequate-guide/)\n- :book: [SICP: Structure and Interpretation of Computer Programs](https://www.goodreads.com/book/show/43713.Structure_and_Interpretation_of_Computer_Programs)\n- :page_facing_up: [Thirteen Ways of Looking at a Turtle](https://fsharpforfunandprofit.com/posts/13-ways-of-looking-at-a-turtle-3/)\n- :scroll: [Programming Paradigms for Dummies: What Every Programmer Should Know](https://www.info.ucl.ac.be/~pvr/VanRoyChapter.pdf)\n- [Learn X in Y Minutes](https://learnxinyminutes.com/)\n  Learn the basics of a language in a highly condensed way.\n- [Hyperpolyglot](http://hyperpolyglot.org/)\n  Compare commonly used features of more or less similar languages side-by-side. Helps you to jump Python<->Ruby, Ocaml<->Haskell, etc.\n- :page_facing_up: [Pomodoro for Programmers](https://medium.com/@mr_mig_by/pomodoro-for-programmers-d6568dd1e6fc)\n- :book: [Site Reliability Engineering](https://landing.google.com/sre/sre-book/toc/index.html)\n\n### Career\n- :moneybag: [Levels FYI](https://www.levels.fyi)  \n  Salary stats for various tech companies. Better than Glassdoor. \n- :page_facing_up: [10 Things Every Programmer Should Know For Their First Job](http://www.applematters.com/article/10-things-every-programmer-should-know-for-their-first-job/)\n- :page_facing_up: [How Much Do Software Engineers Really Make in Each City?](https://www.codementor.io/blog/best-cities-software-engineer-earnings-271vpf599k)\n- :page_facing_up: [Software Engineers Tenure in San Francisco](https://hackerlife.co/blog/san-francisco-large-corporation-employee-tenure)\n- [Software Engineering 101](https://slides.com/mr-mig/se101)\n- :book: [The Passionate Programmer](https://www.goodreads.com/book/show/6399113-the-passionate-programmer)\n- :book: [Soft Skills: The software developer's life manual](https://www.goodreads.com/book/show/23232941-soft-skills)\n- :book: [The Complete Software Developer's Career Guide](https://www.goodreads.com/book/show/35674293-the-complete-software-developer-s-career-guide)\n- :book: [Programming Beyond Practices: Be More Than Just a Code Monkey](https://www.goodreads.com/book/show/29895093-programming-beyond-practices)\n- [A list of European Investors](https://docs.google.com/spreadsheets/d/1hfl67rI0Pk_hSm0GIX0QByW4NgfAH-cEmMa4N6UoO1w/edit#gid=1203141194)\n- :page_facing_up: [Ten Rules for Negotiating a Job Offer](https://medium.com/free-code-camp/ten-rules-for-negotiating-a-job-offer-ee17cccbdab6)\n- :page_facing_up: [How To Interview As a Developer Candidate](https://medium.freecodecamp.com/how-to-interview-as-a-developer-candidate-b666734f12dd)\n- :page_facing_up: [How To Get a Tech Job Abroad Faster](https://relocate.me/blog/job-relocation/landing-a-tech-job-abroad-7-simple-tips/#more-514)\n- :book: [How To Be A STAR Engineer](http://vlsicad.ucsd.edu/Research/Advice/star_engineer.pdf)\n- :page_facing_up: [TL;DR; Stock Options](https://tldroptions.io/)\n- :page_facing_up: [Equity 101 for Startup Employees](https://blog.carta.com/equity-101-stock-option-basics/)\n- :book: [Cracking the Coding Interview: 189 Programming Questions and Solutions](https://www.goodreads.com/book/show/25707092-cracking-the-coding-interview)\n- :fire: [Everything you need to know to get the job](https://github.com/kdn251/interviews)\n- :book: [Tech Interview Handbook](https://github.com/yangshun/tech-interview-handbook)\n- :page_facing_up: [Teach Yourself Programming in Ten Years](https://norvig.com/21-days.html)\n- :page_facing_up: [What you should know as a founder of a software company](https://qotoqot.com/blog/founder-skills/)\n- :movie_camera: [Code Interview Prep & Programming Questions | Pramp](https://www.pramp.com/)\n- :book: [97 things every programmer should know](https://github.com/97-things/97-things-every-programmer-should-know)\n- :movie_camera: [A Philosophy of Software Design | John Ousterhout | Talks at Google](https://www.youtube.com/watch?v=bmSAYlu0NcY&t=403s)\n\n###  Fine-tune Your Resume \n- :hammer: [CV Compiler](https://cvcompiler.com/)\n\n### Open Source\n- :globe_with_meridians: [Learn how to use Git and GitHub](https://www.deployhq.com/git)\n\n### Remote Work\n- :globe_with_meridians: [Remotive.io: Startups hiring remotely](https://docs.google.com/spreadsheets/d/1TLJSlNxCbwRNxy14Toe1PYwbCTY7h0CNHeer9J0VRzE/htmlview?sle=true#gid=1279011369)\n- :globe_with_meridians: [Remote Work List for Developers](https://github.com/georgemandis/remote-working-list)\n- :zap: [NomadList](https://nomadlist.com/)\n- :book: [The Ultimate Guide to Remote Work](https://zapier.com/learn/remote-work/)\n- :house: [Awesome Remote Job](https://github.com/lukasz-madon/awesome-remote-job)\n\n### Problem Solving\n- :book: [The Art and Craft of Problem Solving](https://www.goodreads.com/book/show/593458.The_Art_and_Craft_of_Problem_Solving)\n- :book: [How to Solve It: A New Aspect of Mathematical Method](https://www.goodreads.com/book/show/192221.How_to_Solve_It)\n\n### Soft Skills\n- :book: [Difficult Conversations](https://www.goodreads.com/book/show/774088.Difficult_Conversations)\n- :book: [Crucial Conversations](https://www.goodreads.com/book/show/15014.Crucial_Conversations)\n- :book: [How to Win Friends and Influence People](https://www.goodreads.com/book/show/4865.How_to_Win_Friends_and_Influence_People)\n\n### Mental Health\n- [Awesome Mental Health](https://github.com/dreamingechoes/awesome-mental-health)  \n  A curated list of awesome articles, websites and resources about mental health in the software industry.\n\n### Papers on Programming\n- :heart: [Papers We Love](https://github.com/papers-we-love/papers-we-love)\n- :newspaper: [The Morning Paper](https://blog.acolyer.org/)\n- \ud83d\udcdc [What Every Programmer Should Know About Memory](https://akkadia.org/drepper/cpumemory.pdf)\n- \ud83d\udcdc [Go To Statement Considered Harmful](https://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf)\n- :newspaper: [Arxiv](https://arxiv.org/)\n- :newspaper: [Sci-hub](https://sci-hub.se/)\n\n### Free Books on Programming\n- :books: [Free Programming Books](https://github.com/EbookFoundation/free-programming-books)\n\n### Services :zap:\n- \ud83e\udd16 [Abstract API's](https://www.abstractapi.com)\n- [Free For Dev](https://github.com/ripienaar/free-for-dev/blob/master/README.md)\n- [Public APIs](https://github.com/abhishekbanthia/Public-APIs)\n- [The Noun Project](https://thenounproject.com/)\n- [Without Coding](https://www.producthunt.com/@jurica87/collections/without-coding)\n- [Simpleicons](https://simpleicons.org/)\n- [Learn Anything](https://learn-anything.xyz/)\n- [repl.it](https://repl.it/)\n\n### Licenses\n- [Choose An Open Source License](https://choosealicense.com/)\n- [Well-explained Software licenses in TLDR version](https://tldrlegal.com/)\n- [How open source licenses work and how to add them to your projects](https://medium.freecodecamp.org/how-open-source-licenses-work-and-how-to-add-them-to-your-projects-34310c3cf94)\n\n### Where To Look For Further Info\n- [freeCodeCamp Guide](https://guide.freecodecamp.org/)\n- [GeeksForGeeks](https://www.geeksforgeeks.org/)\n- [Dev.To](https://dev.to/)\n- [Stack Overflow](https://stackoverflow.com/)\n- [Dzone](https://dzone.com/)\n\n### Coding Practice Sites :zap:\n- :link: [CodeForces](http://codeforces.com/)\n- :link: [CodeChef](https://www.codechef.com)\n- :link: [Coderbyte](https://coderbyte.com/)\n- :link: [CodinGame](https://www.codingame.com/)\n- :link: [Cs Academy](https://csacademy.com/)\n- :link: [HackerRank](https://hackerrank.com/)\n- :link: [Spoj](https://spoj.com/)\n- :link: [HackerEarth](https://hackerearth.com/)\n- :link: [TopCoder](https://www.topcoder.com/)\n- :link: [Codewars](https://codewars.com/)\n- :link: [Exercism](http://www.exercism.io/)\n- :link: [CodeSignal](https://codesignal.com/)\n- :link: [Project Euler](https://projecteuler.net/)\n- :link: [LeetCode](https://leetcode.com/)\n- :link: [Firecode.io](https://www.firecode.io/)\n- :link: [InterviewBit](https://www.interviewbit.com/)\n- :link: [uCoder](https://ucoder.com.br)\n- :link: [LintCode](https://www.lintcode.com/)\n- :link: [CodeCombat](https://codecombat.com/)\n- :link: [InterviewCake](https://www.interviewcake.com/)\n- :link: [At Coder](https://atcoder.jp/)\n- :link: [Codility](https://www.codility.com/)\n- :link: [ICPC Problem Archive](https://icpc.kattis.com/)\n- :link: [Codemia](https://codemia.io/)\n",
        "releases": []
    }
}