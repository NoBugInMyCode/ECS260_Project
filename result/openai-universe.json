{
    "https://api.github.com/repos/openai/universe": {
        "forks": 951,
        "watchers": 7491,
        "stars": 7491,
        "languages": {
            "Python": 546632,
            "Makefile": 828
        },
        "commits": [
            "2018-04-05T18:56:26Z",
            "2017-05-18T03:57:50Z",
            "2017-04-05T08:38:24Z",
            "2017-03-31T15:14:22Z",
            "2017-03-28T22:30:59Z",
            "2017-03-09T01:42:25Z",
            "2017-03-05T22:27:01Z",
            "2017-03-05T22:18:37Z",
            "2017-03-05T21:53:12Z",
            "2017-03-02T22:03:43Z",
            "2017-03-02T21:50:41Z",
            "2017-02-25T02:30:39Z",
            "2017-02-23T00:32:50Z",
            "2017-02-20T20:26:17Z",
            "2017-02-16T18:44:41Z",
            "2017-02-16T01:41:03Z",
            "2017-02-16T01:08:06Z",
            "2017-02-15T23:30:28Z",
            "2017-02-15T00:28:35Z",
            "2017-02-10T21:27:10Z",
            "2017-02-10T21:11:29Z",
            "2017-02-10T02:06:29Z",
            "2017-02-10T02:01:45Z",
            "2017-02-07T07:00:36Z",
            "2017-02-03T17:41:50Z",
            "2017-02-03T17:41:13Z",
            "2017-02-01T20:57:55Z",
            "2017-02-01T18:46:53Z",
            "2017-02-01T03:22:29Z",
            "2017-02-01T02:25:36Z"
        ],
        "creation_date": "2016-12-04T21:53:35Z",
        "contributors": 23,
        "topics": [],
        "subscribers": 541,
        "readme": "**This repository has been deprecated in favor of the Retro (https://github.com/openai/retro) library. See our Retro Contest (https://blog.openai.com/retro-contest) blog post for detalis.**\n\nuniverse\n***************\n\n`Universe <https://openai.com/blog/universe/>`_ is a software\nplatform for measuring and training an AI's general intelligence\nacross the world's supply of games, websites and other\napplications. This is the ``universe`` open-source library, which\nprovides a simple `Gym <https://github.com/openai/gym>`__\ninterface to each Universe environment.\n\nUniverse allows anyone to train and evaluate AI agents on an extremely\nwide range of real-time, complex environments.\n\nUniverse makes it possible for any existing program to become an\nOpenAI Gym environment, without needing special access to the\nprogram's internals, source code, or APIs. It does this by packaging\nthe program into a Docker container, and presenting the AI with the\nsame interface a human uses: sending keyboard and mouse events, and\nreceiving screen pixels. Our initial release contains over 1,000\nenvironments in which an AI agent can take actions and gather\nobservations.\n\nAdditionally, some environments include a reward signal sent to the\nagent, to guide reinforcement learning. We've included a few hundred\nenvironments with reward signals. These environments also include\nautomated start menu clickthroughs, allowing your agent to skip to the\ninteresting part of the environment.\n\nWe'd like the community's `help <https://openai.com/blog/universe/#help>`_\nto grow the number of available environments, including integrating\nincreasingly large and complex games.\n\nThe following classes of tasks are packaged inside of\npublicly-available Docker containers, and can be run today with no\nwork on your part:\n\n- Atari and CartPole environments over VNC: ``gym-core.Pong-v3``, ``gym-core.CartPole-v0``, etc.\n- Flashgames over VNC: ``flashgames.DuskDrive-v0``, etc.\n- Browser tasks (\"World of Bits\") over VNC: ``wob.mini.TicTacToe-v0``, etc.\n\nWe've scoped out integrations for many other games, including\ncompleting a high-quality GTA V integration (thanks to `Craig Quiter <http://deepdrive.io/>`_ and NVIDIA), but these aren't included in today's release.\n\n.. contents:: **Contents of this document**\n   :depth: 2\n\n\nGetting started\n===============\n\nInstallation\n------------\n\nSupported systems\n~~~~~~~~~~~~~~~~~\n\nWe currently support Linux and OSX running Python 2.7 or 3.5.\n\nWe recommend setting up a `conda environment <http://conda.pydata.org/docs/using/envs.html>`__\nbefore getting started, to keep all your Universe-related packages in the same place.\n\nInstall Universe\n~~~~~~~~~~~~~~~~\nTo get started, first install ``universe``:\n\n.. code:: shell\n\n    git clone https://github.com/openai/universe.git\n    cd universe\n    pip install -e .\n\nIf this errors out, you may be missing some required packages. Here's\nthe list of required packages we know about so far (please let us know\nif you had to install any others).\n\nOn Ubuntu 16.04:\n\n.. code:: shell\n\n    pip install numpy\n    sudo apt-get install golang libjpeg-turbo8-dev make\n\nOn Ubuntu 14.04:\n\n.. code:: shell\n\n    sudo add-apt-repository ppa:ubuntu-lxc/lxd-stable  # for newer golang\n    sudo apt-get update\n    sudo apt-get install golang libjpeg-turbo8-dev make\n\nOn OSX:\n\nYou might need to install Command Line Tools by running:\n\n.. code:: shell\n\n    xcode-select --install\n\nOr ``numpy``, ``libjpeg-turbo`` and ``incremental`` packages:\n\n.. code:: shell\n\n    pip install numpy incremental\n    brew install golang libjpeg-turbo\n\nInstall Docker\n~~~~~~~~~~~~~~\n\nThe majority of the environments in Universe run inside Docker\ncontainers, so you will need to `install Docker\n<https://docs.docker.com/engine/installation/>`__ (on OSX, we\nrecommend `Docker for Mac\n<https://docs.docker.com/docker-for-mac/>`__). You should be able to\nrun ``docker ps`` and get something like this:\n\n.. code:: shell\n\n     $ docker ps\n     CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n\nAlternate configuration - running the agent in docker\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nThe above instructions result in an agent that runs as a regular python process in your OS, and launches docker containers as needed for the remotes.\nAlternatively, you can build a docker image for the agent and run it as a container as well.\nYou can do this in any operating system that has a recent version of docker installed, and the git client.\n\nTo get started, clone the ``universe`` repo:\n\n.. code:: shell\n\n    git clone https://github.com/openai/universe.git\n    cd universe\n\t\nBuild a docker image, tag it as 'universe':\n\n.. code:: shell\n\n    docker build -t universe .\n\nThis may take a while the first time, as the docker image layers are pulled from docker hub.\n\nOnce the image is built, you can do a quick run of the test cases to make sure everything is working:\n\n.. code:: shell\n\n    docker run --privileged --rm -e DOCKER_NET_HOST=172.17.0.1 -v /var/run/docker.sock:/var/run/docker.sock universe pytest\n\nHere's a breakdown of that command:\n\n* ``docker run`` - launch a docker container\n* ``--rm`` - delete the container once the launched process finishes\n* ``-e DOCKER_NET_HOST=172.17.0.1`` - tells the universe remote (when launched) to make its VNC connection back to this docker-allocated IP\n* ``-v /var/run/docker.sock:/var/run/docker.sock`` - makes the docker unix socket from the host available to the container. This is a common technique used to allow containers to launch other containers alongside itself.\n* ``universe`` - use the imaged named 'universe' built above\n* ``pytest`` - run 'pytest' in the container, which runs all the tests\n\nAt this point, you'll see a bunch of tests run and hopefully all pass.\n\nTo do some actual development work, you probably want to do another volume map from the universe repo on your host into the container, then shell in interactively:\n\n.. code:: shell\n\n    docker run --privileged --rm -it -e DOCKER_NET_HOST=172.17.0.1 -v /var/run/docker.sock:/var/run/docker.sock -v (full path to cloned repo above):/usr/local/universe universe python\n\nAs you edit the files in your cloned git repo, they will be changed in your docker container and you'll be able to run them in python.\n\nNote if you are using docker for Windows, you'll need to enable the relevant shared drive for this to work.\n\n\nNotes on installation\n~~~~~~~~~~~~~~~~~~~~~\n\n* When installing ``universe``, you may see ``warning`` messages.  These lines occur when installing numpy and are normal.\n* You'll need a ``go version`` of at least 1.5. Ubuntu 14.04 has an older Go, so you'll need to `upgrade <https://golang.org/doc/install>`_ your Go installation.\n* We run Python 3.5 internally, so the Python 3.5 variants will be much more thoroughly performance tested. Please let us know if you see any issues on 2.7.\n* While we don't officially support Windows, we expect our code to be very close to working there. We'd be happy to take pull requests that take our Windows compatibility to 100%. In the meantime, the easiest way for Windows users to run universe is to use the alternate configuration described above.\n\nSystem overview\n---------------\n\nA Universe **environment** is similar to any other Gym environment:\nthe agent submits actions and receives observations using the ``step()``\nmethod.\n\nInternally, a Universe environment consists of two pieces: a **client** and a **remote**:\n\n* The **client** is a `VNCEnv\n  <https://github.com/openai/universe/blob/master/universe/envs/vnc_env.py>`_\n  instance which lives in the same process as the agent. It performs\n  functions like receiving the agent's actions, proxying them to the\n  **remote**, queuing up rewards for the agent, and maintaining a\n  local view of the current episode state.\n* The **remote** is the running environment dynamics, usually a\n  program running inside of a Docker container. It can run anywhere --\n  locally, on a remote server, or in the cloud. (We have a separate\n  page describing how to manage `remotes <doc/remotes.rst>`__.)\n* The client and the remote communicate with one another using the\n  `VNC <https://en.wikipedia.org/wiki/Virtual_Network_Computing>`__\n  remote desktop system, as well as over an auxiliary WebSocket\n  channel for reward, diagnostic, and control messages. (For more\n  information on client-remote communication, see the separate page on\n  the `Universe internal communication protocols\n  <doc/protocols.rst>`__.)\n\nThe code in this repository corresponds to the **client** side of the\nUniverse environments. Additionally, you can freely access the Docker\nimages for the **remotes**. We'll release the source repositories for\nthe remotes in the future, along with tools to enable users to\nintegrate new environments. Please sign up for our `beta\n<https://docs.google.com/forms/d/e/1FAIpQLScAiW-kIS0mz6hdzzFZJJFlXlicDvQs1TX9XMEkipNwjV5VlA/viewform>`_\nif you'd like early access.\n\nRun your first agent\n--------------------\n\nNow that you've installed the ``universe`` library, you should make\nsure it actually works. You can paste the example below into your\n``python`` REPL. (You may need to press enter an extra time to make\nsure the ``while`` loop is executing.)\n\n.. code:: python\n\n  import gym\n  import universe  # register the universe environments\n\n  env = gym.make('flashgames.DuskDrive-v0')\n  env.configure(remotes=1)  # automatically creates a local docker container\n  observation_n = env.reset()\n\n  while True:\n    action_n = [[('KeyEvent', 'ArrowUp', True)] for ob in observation_n]  # your agent here\n    observation_n, reward_n, done_n, info = env.step(action_n)\n    env.render()\n\nThe example will instantiate a client in your Python process,\nautomatically pull the ``quay.io/openai/universe.flashgames`` image,\nand will start that image as the remote. (In our `remotes\n<doc/remotes.rst>`__ documentation page, we explain other ways you can run\nremotes.)\n\nIt will take a few minutes for the image to pull the first time. After that,\nif all goes well, a window like the one below will soon pop up. Your\nagent, which is just pressing the up arrow repeatedly, is now\nplaying a Flash racing game called `Dusk Drive\n<http://www.kongregate.com/games/longanimals/dusk-drive>`__. Your agent\nis programmatically controlling a VNC client, connected to a VNC\nserver running inside of a Docker container in the cloud, rendering a\nheadless Chrome with Flash enabled:\n\n.. image:: https://github.com/openai/universe/blob/master/doc/dusk-drive.png?raw=true\n     :width: 600px\n\nYou can even connect your own VNC client to the environment, either\njust to observe or to interfere with your agent. Our ``flashgames``\nand ``gym-core`` images conveniently bundle a browser-based VNC\nclient, which can be accessed at\n``http://localhost:15900/viewer/?password=openai``. If you're on Mac,\nconnecting to a VNC server is as easy as running: ``open\nvnc://localhost:5900``.\n\n(If using docker-machine, you'll need to replace \"localhost\" with the\nIP address of your Docker daemon, and use ``openai`` as the password.)\n\nBreaking down the example\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSo we managed to run an agent, what did all the code actually\nmean? We'll go line-by-line through the example.\n\n* First, we import the `gym <https://github.com/openai/gym>`__ library,\n  which is the base on which Universe is built. We also import\n  ``universe``, which `registers\n  <https://github.com/openai/universe/blob/master/universe/__init__.py>`__\n  all the Universe environments.\n\n.. code:: python\n\n  import gym\n  import universe # register the universe environments\n\n* Next, we create the environment instance. Behind the scenes, ``gym``\n  looks up the `registration\n  <https://github.com/openai/universe/blob/master/universe/__init__.py>`__\n  for ``flashgames.DuskDrive-v0``, and instantiates a `VNCEnv\n  <https://github.com/openai/universe/blob/master/universe/envs/vnc_env.py#L88>`__\n  object which has been `wrapped\n  <https://github.com/openai/universe/blob/master/universe/wrappers/__init__.py#L42>`__\n  to add a few useful diagnostics and utilities. The ``VNCEnv`` object\n  is the *client* part of the environment, and it is not yet connected\n  to a *remote*.\n\n.. code:: python\n\n  env = gym.make('flashgames.DuskDrive-v0')\n\n* The call to ``configure()`` connects the client to a remote\n  environment server. When called with ``configure(remotes=1)``,\n  Universe will automatically create a Docker image running locally on\n  your computer. The local client connects to the remote using VNC.\n  (More information on client-remote communication can be found in the\n  page on `universe internal communication protocols\n  <doc/protocols.rst>`__. More on configuring remotes is at `remotes <doc/remotes.rst>`__.)\n\n.. code:: python\n\n  env.configure(remotes=1)\n\n* When starting a new environment, you call ``env.reset()``. Universe\n  environments run in real-time, rather than stepping synchronously\n  with the agent's actions, so ``reset`` is asynchronous and returns\n  immediately. Since the environment will not have waited to finish\n  connecting to the VNC server before returning, the initial observations\n  from ``reset`` will be ``None`` to indicate that there is\n  not yet a valid observation.\n\n  Similarly, the environment keeps running in the background even\n  if the agent does not call ``env.step()``.  This means that an agent\n  that successfully learns from a Universe environment cannot take\n  \"thinking breaks\":  it must keep sending actions to the environment at all times.\n\n  Additionally, Universe introduces the *vectorized* Gym\n  API. Rather than controlling a single environment at a time, the agent\n  can control a fixed-size vector of ``n`` environments, each with its\n  own remote. The return value from ``reset`` is therefore a *vector*\n  of observations. For more information, see the separate page on\n  `environment semantics <doc/env_semantics.rst>`__)\n\n.. code:: python\n\n  observation_n = env.reset()\n\n* At each ``step()`` call, the agent submits a vector of actions; one for\n  each environment instance it is controlling. Each VNC action is a\n  list of events; above, each action is the single event \"press the\n  ``ArrowUp`` key\". The agent could press and release the key in one\n  action by instead submitting ``[('KeyEvent', 'ArrowUp', True),\n  ('KeyEvent', 'ArrowUp', False)]`` for each observation.\n\n  In fact, the agent could largely have the same effect by just\n  submitting ``('KeyEvent', 'ArrowUp', True)`` once and then calling\n  ``env.step([[] for ob in observation_n])`` thereafter, without ever\n  releasing the key using ``('KeyEvent', 'ArrowUp', False)``. The\n  browser running inside the remote would continue to statefully\n  represent the arrow key as being pressed. Sending other unrelated\n  keypresses would not disrupt the up arrow keypress; only explicitly\n  releasing the key would cancel it.  There's one slight subtlety:\n  when the episode resets, the browser will reset, and will forget\n  about the keypress; you'd need to submit a new ``ArrowUp`` at the\n  start of each episode.\n\n.. code:: python\n\n  action_n = [[('KeyEvent', 'ArrowUp', True)] for ob in observation_n]\n\n* After we submit the action to the environment and render one frame,\n  ``step()`` returns a list of *observations*, a list of *rewards*, a\n  list of *\"done\" booleans* indicating whether the episode has ended,\n  and then finally an *info dictionary* of the form ``{'n': [{},\n  ...]}``, in which you can access the info for environment ``i`` as\n  ``info['n'][i]``.\n\n  Each environment's ``info`` message contains useful diagnostic\n  information, including latency data, client and remote timings,\n  VNC update counts, and reward message counts.\n\n.. code:: python\n\n    observation_n, reward_n, done_n, info = env.step(action_n)\n    env.render()\n\n* We call ``step`` in what looks like a busy loop. In reality, there\n  is a `Throttle\n  <https://github.com/openai/universe/blob/master/universe/wrappers/__init__.py#L18>`__\n  wrapper on the client which defaults to a target frame rate of 60fps, or one\n  frame every 16.7ms. If you call it more frequently than that,\n  ``step`` will `sleep\n  <https://github.com/openai/universe/blob/master/universe/wrappers/throttle.py>`__\n  with any leftover time.\n\n\nTesting\n=======\n\nWe are using `pytest <http://doc.pytest.org/en/latest/>`__ for tests. You can run them via:\n\n.. code:: shell\n\n    pytest\n\nRun ``pytest --help`` for useful options, such as ``pytest -s`` (disables output capture) or ``pytest -k <expression>`` (runs only specific tests).\n\nAdditional documentation\n========================\n\nMore documentation not covered in this README can be found in the\n`doc folder <doc>`__ of this repository.\n\nGetting help\n============\n\nIf you encounter a problem that is not addressed in this README page\nor in the `extra docs <doc>`__, then try our wiki page of `solutions\nto common problems\n<https://github.com/openai/universe/wiki/Solutions-to-common-problems>`__ -\nand add to it if your solution isn't there!\n\nYou can also search through the `issues\n<https://github.com/openai/universe/issues?utf8=%E2%9C%93&q=is%3Aissue>`__\non this repository and our `discussion board\n<https://discuss.openai.com/c/Universe>`__ to see if another user has posted\nabout the same problem or to ask for help from the community.\n\nIf you still can't solve your problem after trying all of the above\nsteps, please post an issue on this repository.\n\nWhat's next?\n============\n\n* Get started training RL algorithms! You can try out the `Universe Starter Agent <https://github.com/openai/universe-starter-agent>`_, an implementation of the `A3C algorithm <https://arxiv.org/abs/1602.01783>`_ that can solve several VNC environments.\n\n* For more information on how to manage remotes, see the separate documentation page on `remotes <doc/remotes.rst>`__.\n\n* Sign up for a `beta <https://docs.google.com/forms/d/e/1FAIpQLScAiW-kIS0mz6hdzzFZJJFlXlicDvQs1TX9XMEkipNwjV5VlA/viewform>`_ to get early access to upcoming Universe releases, such as tools to integrate new Universe environments or a dataset of recorded human demonstrations.\n\n\nChangelog\n---------\n- 2017-02-08: The old location for wrappers.SafeActionSpace has been moved to wrappers.experimental.SafeActionSpace. SoftmaxClickMouse has also been moved to wrappers.experimental.SoftmaxClickMouse\n- 2017-01-08: The wrappers.SafeActionSpace has been moved to wrappers.experimental.SafeActionSpace. The old location will remain with a deprecation warning until 2017-02-08.\n- 2016-12-27: BACKWARDS INCOMPATIBILITY: The gym monitor is now a\n  wrapper. Rather than starting monitoring as\n  `env.monitor.start(directory)`, envs are now wrapped as follows:\n  `env = wrappers.Monitor(env, directory)`. This change is on master\n  and will be released with 0.21.0.\n",
        "releases": [
            {
                "name": "v0.21.3",
                "date": "2017-03-05T22:22:01Z"
            },
            {
                "name": "",
                "date": "2017-02-01T03:47:09Z"
            }
        ]
    }
}