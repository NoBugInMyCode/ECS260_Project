{
    "https://api.github.com/repos/iced-rs/iced": {
        "forks": 1209,
        "watchers": 25427,
        "stars": 25427,
        "languages": {
            "Rust": 1988232,
            "WGSL": 22299,
            "RenderScript": 1
        },
        "commits": [
            "2025-01-20T22:55:05Z",
            "2025-01-20T22:44:16Z",
            "2025-01-16T18:11:41Z",
            "2025-01-16T15:49:35Z",
            "2025-01-16T12:28:39Z",
            "2025-01-16T12:17:28Z",
            "2025-01-16T12:07:41Z",
            "2025-01-16T11:44:15Z",
            "2025-01-16T11:36:03Z",
            "2025-01-16T11:18:15Z",
            "2024-10-16T16:17:10Z",
            "2025-01-15T11:07:32Z",
            "2024-10-16T12:35:03Z",
            "2025-01-14T11:56:51Z",
            "2025-01-14T11:45:30Z",
            "2025-01-02T18:44:08Z",
            "2025-01-14T11:44:59Z",
            "2025-01-14T11:36:02Z",
            "2025-01-14T11:35:53Z",
            "2025-01-14T11:32:38Z",
            "2025-01-14T11:16:03Z",
            "2025-01-10T22:46:40Z",
            "2025-01-10T22:36:45Z",
            "2025-01-09T23:30:09Z",
            "2025-01-09T23:20:21Z",
            "2025-01-06T23:30:14Z",
            "2025-01-06T22:36:35Z",
            "2025-01-06T22:25:57Z",
            "2025-01-06T22:24:12Z",
            "2025-01-06T22:24:01Z"
        ],
        "creation_date": "2019-07-15T22:34:46Z",
        "contributors": 30,
        "topics": [
            "elm",
            "graphics",
            "gui",
            "interface",
            "renderer-agnostic",
            "rust",
            "toolkit",
            "user-interface",
            "widget",
            "widgets"
        ],
        "subscribers": 196,
        "readme": "<div align=\"center\">\n\n<img src=\"docs/logo.svg\" width=\"140px\" />\n\n# Iced\n\n[![Documentation](https://docs.rs/iced/badge.svg)][documentation]\n[![Crates.io](https://img.shields.io/crates/v/iced.svg)](https://crates.io/crates/iced)\n[![License](https://img.shields.io/crates/l/iced.svg)](https://github.com/iced-rs/iced/blob/master/LICENSE)\n[![Downloads](https://img.shields.io/crates/d/iced.svg)](https://crates.io/crates/iced)\n[![Test Status](https://img.shields.io/github/actions/workflow/status/iced-rs/iced/test.yml?branch=master&event=push&label=test)](https://github.com/iced-rs/iced/actions)\n[![Discourse](https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fdiscourse.iced.rs%2Fsite%2Fstatistics.json&query=%24.users_count&suffix=%20users&label=discourse&color=5e7ce2)](https://discourse.iced.rs/)\n[![Discord Server](https://img.shields.io/discord/628993209984614400?label=&labelColor=6A7EC2&logo=discord&logoColor=ffffff&color=7389D8)](https://discord.gg/3xZJ65GAhd)\n\nA cross-platform GUI library for Rust focused on simplicity and type-safety.\nInspired by [Elm].\n\n<a href=\"https://github.com/squidowl/halloy\">\n  <img src=\"https://iced.rs/showcase/halloy.gif\" width=\"460px\">\n</a>\n<a href=\"https://github.com/hecrj/icebreaker\">\n  <img src=\"https://iced.rs/showcase/icebreaker.gif\" width=\"360px\">\n</a>\n\n</div>\n\n## Features\n\n* Simple, easy-to-use, batteries-included API\n* Type-safe, reactive programming model\n* [Cross-platform support] (Windows, macOS, Linux, and the Web)\n* Responsive layout\n* Built-in widgets (including [text inputs], [scrollables], and more!)\n* Custom widget support (create your own!)\n* [Debug overlay with performance metrics]\n* First-class support for async actions (use futures!)\n* Modular ecosystem split into reusable parts:\n  * A [renderer-agnostic native runtime] enabling integration with existing systems\n  * Two built-in renderers leveraging [`wgpu`] and [`tiny-skia`]\n    * [`iced_wgpu`] supporting Vulkan, Metal and DX12\n    * [`iced_tiny_skia`] offering a software alternative as a fallback\n  * A [windowing shell]\n\n__Iced is currently experimental software.__ [Take a look at the roadmap] and\n[check out the issues].\n\n[Cross-platform support]: https://raw.githubusercontent.com/iced-rs/iced/master/docs/images/todos_desktop.jpg\n[text inputs]: https://iced.rs/examples/text_input.mp4\n[scrollables]: https://iced.rs/examples/scrollable.mp4\n[Debug overlay with performance metrics]: https://iced.rs/examples/debug.mp4\n[renderer-agnostic native runtime]: runtime/\n[`wgpu`]: https://github.com/gfx-rs/wgpu\n[`tiny-skia`]: https://github.com/RazrFalcon/tiny-skia\n[`iced_wgpu`]: wgpu/\n[`iced_tiny_skia`]: tiny_skia/\n[windowing shell]: winit/\n[Take a look at the roadmap]: ROADMAP.md\n[check out the issues]: https://github.com/iced-rs/iced/issues\n\n## Overview\n\nInspired by [The Elm Architecture], Iced expects you to split user interfaces\ninto four different concepts:\n\n* __State__ \u2014 the state of your application\n* __Messages__ \u2014 user interactions or meaningful events that you care\n  about\n* __View logic__ \u2014 a way to display your __state__ as widgets that\n  may produce __messages__ on user interaction\n* __Update logic__ \u2014 a way to react to __messages__ and update your\n  __state__\n\nWe can build something to see how this works! Let's say we want a simple counter\nthat can be incremented and decremented using two buttons.\n\nWe start by modelling the __state__ of our application:\n\n```rust\n#[derive(Default)]\nstruct Counter {\n    value: i32,\n}\n```\n\nNext, we need to define the possible user interactions of our counter:\nthe button presses. These interactions are our __messages__:\n\n```rust\n#[derive(Debug, Clone, Copy)]\npub enum Message {\n    Increment,\n    Decrement,\n}\n```\n\nNow, let's show the actual counter by putting it all together in our\n__view logic__:\n\n```rust\nuse iced::widget::{button, column, text, Column};\n\nimpl Counter {\n    pub fn view(&self) -> Column<Message> {\n        // We use a column: a simple vertical layout\n        column![\n            // The increment button. We tell it to produce an\n            // `Increment` message when pressed\n            button(\"+\").on_press(Message::Increment),\n\n            // We show the value of the counter here\n            text(self.value).size(50),\n\n            // The decrement button. We tell it to produce a\n            // `Decrement` message when pressed\n            button(\"-\").on_press(Message::Decrement),\n        ]\n    }\n}\n```\n\nFinally, we need to be able to react to any produced __messages__ and change our\n__state__ accordingly in our __update logic__:\n\n```rust\nimpl Counter {\n    // ...\n\n    pub fn update(&mut self, message: Message) {\n        match message {\n            Message::Increment => {\n                self.value += 1;\n            }\n            Message::Decrement => {\n                self.value -= 1;\n            }\n        }\n    }\n}\n```\n\nAnd that's everything! We just wrote a whole user interface. Let's run it:\n\n```rust\nfn main() -> iced::Result {\n    iced::run(\"A cool counter\", Counter::update, Counter::view)\n}\n```\n\nIced will automatically:\n\n  1. Take the result of our __view logic__ and layout its widgets.\n  1. Process events from our system and produce __messages__ for our\n     __update logic__.\n  1. Draw the resulting user interface.\n\nRead the [book], the [documentation], and the [examples] to learn more!\n\n## Implementation details\n\nIced was originally born as an attempt at bringing the simplicity of [Elm] and\n[The Elm Architecture] into [Coffee], a 2D game library I am working on.\n\nThe core of the library was implemented during May 2019 in [this pull request].\n[The first alpha version] was eventually released as\n[a renderer-agnostic GUI library]. The library did not provide a renderer and\nimplemented the current [tour example] on top of [`ggez`], a game library.\n\nSince then, the focus has shifted towards providing a batteries-included,\nend-user-oriented GUI library, while keeping the ecosystem modular.\n\n[this pull request]: https://github.com/hecrj/coffee/pull/35\n[The first alpha version]: https://github.com/iced-rs/iced/tree/0.1.0-alpha\n[a renderer-agnostic GUI library]: https://www.reddit.com/r/rust/comments/czzjnv/iced_a_rendereragnostic_gui_library_focused_on/\n[tour example]: examples/README.md#tour\n[`ggez`]: https://github.com/ggez/ggez\n\n## Contributing / Feedback\n\nIf you want to contribute, please read our [contributing guidelines] for more details.\n\nFeedback is also welcome! You can create a new topic in [our Discourse forum] or\ncome chat to [our Discord server].\n\n## Sponsors\n\nThe development of Iced is sponsored by the [Cryptowatch] team at [Kraken.com]\n\n[book]: https://book.iced.rs/\n[documentation]: https://docs.rs/iced/\n[examples]: https://github.com/iced-rs/iced/tree/master/examples#examples\n[Coffee]: https://github.com/hecrj/coffee\n[Elm]: https://elm-lang.org/\n[The Elm Architecture]: https://guide.elm-lang.org/architecture/\n[the current issues]: https://github.com/iced-rs/iced/issues\n[contributing guidelines]: https://github.com/iced-rs/iced/blob/master/CONTRIBUTING.md\n[our Discourse forum]: https://discourse.iced.rs/\n[our Discord server]: https://discord.gg/3xZJ65GAhd\n[Cryptowatch]: https://cryptowat.ch/charts\n[Kraken.com]: https://kraken.com/\n",
        "releases": [
            {
                "name": "0.13.1",
                "date": "2024-09-19T05:26:52Z"
            },
            {
                "name": "0.13.0",
                "date": "2024-09-18T01:39:05Z"
            },
            {
                "name": "0.12.1",
                "date": "2024-02-22T09:00:21Z"
            },
            {
                "name": "0.12.0",
                "date": "2024-02-15T02:42:54Z"
            },
            {
                "name": "0.10.0",
                "date": "2023-07-28T18:01:42Z"
            },
            {
                "name": "0.9.0",
                "date": "2023-04-13T06:44:38Z"
            },
            {
                "name": "0.8.0",
                "date": "2023-02-18T11:11:53Z"
            },
            {
                "name": "0.7.0",
                "date": "2023-01-14T00:21:56Z"
            },
            {
                "name": "0.6.0",
                "date": "2022-12-07T03:49:06Z"
            },
            {
                "name": "0.5.0",
                "date": "2022-11-10T00:39:31Z"
            },
            {
                "name": "0.4.0",
                "date": "2022-05-03T17:24:32Z"
            },
            {
                "name": "0.3.0",
                "date": "2021-03-31T18:37:49Z"
            },
            {
                "name": "0.2.0",
                "date": "2020-11-26T16:28:57Z"
            },
            {
                "name": "0.1.1",
                "date": "2020-04-15T07:15:33Z"
            },
            {
                "name": "0.1.0",
                "date": "2020-04-02T16:57:56Z"
            },
            {
                "name": "0.1.0-beta",
                "date": "2019-11-25T14:24:03Z"
            },
            {
                "name": "0.1.0-alpha",
                "date": "2019-09-05T11:17:13Z"
            }
        ]
    }
}