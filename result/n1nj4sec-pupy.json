{
    "https://api.github.com/repos/n1nj4sec/pupy": {
        "forks": 1816,
        "watchers": 8545,
        "stars": 8545,
        "languages": {
            "Python": 3099233,
            "C": 539928,
            "C++": 102091,
            "Go": 41430,
            "Makefile": 32150,
            "C#": 32028,
            "Shell": 26136,
            "Ruby": 2267,
            "JavaScript": 2189,
            "HTML": 1970
        },
        "commits": [
            "2024-03-22T08:52:37Z",
            "2024-03-22T08:06:32Z",
            "2021-09-01T17:25:47Z",
            "2021-02-27T14:46:46Z",
            "2021-02-17T06:01:23Z",
            "2021-02-17T05:35:20Z",
            "2021-02-17T05:22:45Z",
            "2021-02-04T21:42:12Z",
            "2020-10-09T06:03:58Z",
            "2020-10-09T00:43:47Z",
            "2020-10-02T06:15:19Z",
            "2020-10-01T19:31:15Z",
            "2020-10-01T17:56:30Z",
            "2020-10-01T17:44:53Z",
            "2020-10-01T17:41:25Z",
            "2020-08-19T04:45:23Z",
            "2020-08-16T03:40:20Z",
            "2020-06-28T17:54:56Z",
            "2020-06-26T05:20:53Z",
            "2020-06-21T18:48:13Z",
            "2020-06-21T11:29:56Z",
            "2020-06-21T10:32:12Z",
            "2020-06-21T09:12:54Z",
            "2020-06-01T21:13:06Z",
            "2020-06-01T18:30:56Z",
            "2020-06-01T18:25:51Z",
            "2020-06-01T06:50:41Z",
            "2020-06-01T06:49:59Z",
            "2020-04-28T08:22:36Z",
            "2020-04-21T18:26:35Z"
        ],
        "creation_date": "2015-09-21T17:30:53Z",
        "contributors": 28,
        "topics": [
            "android",
            "backdoor",
            "linux",
            "mac-os",
            "meterpreter",
            "payload",
            "pentesting",
            "post-exploitation",
            "pupy",
            "python",
            "rat",
            "reflective-injection",
            "remote-access",
            "remote-admin-tool",
            "reverse-shell",
            "shell",
            "windows"
        ],
        "subscribers": 470,
        "readme": "# Pupy\n\n[![Build Status](https://api.travis-ci.org/n1nj4sec/pupy.svg?branch=unstable)](https://travis-ci.org/n1nj4sec/pupy)\n\n## Installation\n\nInstallation instructions are on the wiki, in addition to all other documentation. For maximum compatibility, it is recommended to use Docker Compose.\n\n[Refer to the wiki](https://github.com/n1nj4sec/pupy/wiki/Installation)\n\n## Description\n\nPupy is a cross-platform, multi function RAT and post-exploitation tool mainly written in python. It features an all-in-memory execution guideline and leaves a very low footprint. Pupy can communicate using multiple transports, migrate into processes using reflective injection, and load remote python code, python packages and python C-extensions from memory.\n\n## Features\n\n- Windows payload can load the entire Python interpreter from memory using a reflective DLL.\n\t- Pupy does not touch the disk.\n\n- Can be packed into a single .py file and run without any dependencies other than the python standard library on all OSes.\n\t- PyCrypto gets replaced by pure Python AES & RSA implementations when unavailable.\n\n- Reflectively migrate into other processes.\n- Remotely import pure python packages (.py, .pyc) and compiled python C extensions (.pyd, .so) from memory.\n\t- Imported python modules do not touch the disk.\n\n- Easily extensible, modules are simple to write and are sorted by os and category.\n\n- Modules can directly access python objects on the remote client using [rpyc](https://github.com/tomerfiliba/rpyc).\n\n- Access remote objects interactively from the pupy shell and get auto-completion of remote attributes.\n\n- Communication transports are modular and stackable. Exfiltrate data using HTTP over HTTP over AES over XOR, or any combination of the available transports.\n\n- Communicate using obfsproxy [pluggable transports.](https://www.torproject.org/docs/pluggable-transports.html.en)\n\n- Execute noninteractive commands on multiple hosts at once.\n\n- Commands and scripts running on remote hosts are interruptible.\n\n- Auto-completion for commands and arguments.\n\n- Custom config can be defined: command aliases, modules. automatically run at connection, etc.\n\n- Open interactive python shells with auto-completion on the all-in-memory remote python interpreter.\n\n- Interactive shells (cmd.exe, /bin/bash, etc) can be opened remotely.\n\t- Remote shells on Unix & Windows clients have a real tty with all keyboard signals working just like an SSH shell.\n\n- Execute PE executable remotely and from memory.\n\n- Generate payloads in various formats:\n\n| Format | Architecture | Short Name |\n|---|---|---|\nAndroid Package | x86 & ARMv7 | apk\nLinux Binary | x86 | lin_x86\nLinux Binary | x64 | lin_x64\nLinux Shared Object | x86 | so_x86\nLinux Shared Object | x64 | so_x64\nWindows PE Executable | x86 | exe_x86\nWindows PE Executable | x64 | exe_x64\nWindows DLL | x86 | dll_x86\nWindows DLL | x64 | dll_x64\nPython Script | x86 & x64 | py\nPyInstaller | x86 & x64 | pyinst\nPython Oneliner | x86 & x64 | py_oneliner\nPowershell | x86 & x64 | ps1\nPowershell Oneliner | x86 & x64 | ps1_oneliner\nDucky Script | N/A | rubber_ducky\n\n- Deploy in memory from a single command line using python or powershell one-liners.\n\n- Embed \"scriptlets\" in generated payloads to perform some tasks \"offline\" without needing network connectivity (ex: start keylogger, add persistence, execute custom python script, check_vm, etc.)\n\n- Multiple Target Platforms:\n\n| Platform | Support Status |\n|---|---|\nWindows XP | Supported\nWindows 7 | Supported\nWindows 8 | Supported\nWindows 10 | Supported\nLinux | Supported\nMac OSX | Limited Support\nAndroid | Limited Support\n\n## Documentation\n\nAll documentation can be found on the wiki.\n\n[Refer to the wiki](https://github.com/n1nj4sec/pupy/wiki)\n\n## FAQ\n\n> Does the server work on windows?\n\nPupy has not been tested on Windows. Theoretically, it should work on any platform that supports Docker and Docker Compose. However, you will need to adapt the Docker Compose installation instructions for the Windows platform.\n\n> I can't install Pupy. The installation fails.\n\n1. Please refer to the wiki. It is possible that your answer is there.\n2. Search the Github issues and see if your issue was already solved.\n3. If you issue was not solved, open a new issue following the [issue guidelines](https://github.com/n1nj4sec/pupy/wiki/Issue-Guidelines).\n\nIf you do not follow these steps, you issue will be closed.\n\n> Android and/or Mac OSX payloads and modules don't work.\n\nPupy has _limited_ support for Android and OSX. These platforms may not be well maintained and may break intermittently. Some modules (i.e. keylogger) may be missing for these platforms.\n\n## Development\n\nIf some of you want to participate to pupy development, don't hesitate! All help is greatly appreciated and all pull requests will be reviewed.\n\nAlso there is small [note](https://github.com/n1nj4sec/pupy/wiki/Development) about development. Please run flake8 before doing any commits. File with config is [here](pupy/tox.ini).\n\n## Contact\n\n| Platform | Contact Info |\n|---|---|\nEmail | contact@n1nj4.eu\nTwitter | https://twitter.com/n1nj4sec\n\nThis project is a [personal development](https://en.wikipedia.org/wiki/Personal_development), please respect its philosophy and don't use it for evil purposes!\n\n## Special thanks\n\nSpecial thanks to all contributors that help improve pupy and make it a better tool! :)\n",
        "releases": []
    }
}