{
    "https://api.github.com/repos/qax-os/excelize": {
        "forks": 1734,
        "watchers": 18602,
        "stars": 18602,
        "languages": {
            "Go": 3261967
        },
        "commits": [
            "2024-11-26T14:58:19Z",
            "2025-01-21T01:13:23Z",
            "2025-01-14T11:19:16Z",
            "2025-01-05T01:37:31Z",
            "2025-01-04T03:17:56Z",
            "2025-01-01T23:32:49Z",
            "2024-12-29T04:30:28Z",
            "2024-12-21T07:11:17Z",
            "2024-12-20T01:43:44Z",
            "2024-12-14T01:45:36Z",
            "2024-12-12T08:43:48Z",
            "2024-12-08T03:39:54Z",
            "2024-11-22T13:56:38Z",
            "2024-11-15T14:03:10Z",
            "2024-11-09T10:36:42Z",
            "2024-11-08T08:59:07Z",
            "2024-11-04T02:39:55Z",
            "2024-10-25T00:52:59Z",
            "2024-10-23T13:52:32Z",
            "2024-10-21T01:36:04Z",
            "2024-10-10T14:44:38Z",
            "2024-09-30T13:00:59Z",
            "2024-09-27T06:58:18Z",
            "2024-09-21T07:39:36Z",
            "2024-09-12T14:07:18Z",
            "2024-09-08T04:19:58Z",
            "2024-09-05T13:38:19Z",
            "2024-09-04T11:47:02Z",
            "2024-09-02T01:19:50Z",
            "2024-09-01T04:10:01Z"
        ],
        "creation_date": "2016-08-29T12:32:12Z",
        "contributors": 30,
        "topics": [
            "analytics",
            "chart",
            "data-science",
            "ecma-376",
            "excel",
            "excelize",
            "formula",
            "go",
            "golang",
            "microsoft",
            "office",
            "ooxml",
            "openxml",
            "spreadsheet",
            "statistics",
            "table",
            "vba",
            "visualization",
            "xlsx",
            "xml"
        ],
        "subscribers": 244,
        "readme": "<p align=\"center\"><img width=\"650\" src=\"./excelize.svg\" alt=\"Excelize logo\"></p>\n\n<p align=\"center\">\n    <a href=\"https://github.com/xuri/excelize/actions/workflows/go.yml\"><img src=\"https://github.com/xuri/excelize/actions/workflows/go.yml/badge.svg\" alt=\"Build Status\"></a>\n    <a href=\"https://codecov.io/gh/qax-os/excelize\"><img src=\"https://codecov.io/gh/qax-os/excelize/branch/master/graph/badge.svg\" alt=\"Code Coverage\"></a>\n    <a href=\"https://goreportcard.com/report/github.com/xuri/excelize/v2\"><img src=\"https://goreportcard.com/badge/github.com/xuri/excelize/v2\" alt=\"Go Report Card\"></a>\n    <a href=\"https://pkg.go.dev/github.com/xuri/excelize/v2\"><img src=\"https://img.shields.io/badge/go.dev-reference-007d9c?logo=go&logoColor=white\" alt=\"go.dev\"></a>\n    <a href=\"https://opensource.org/licenses/BSD-3-Clause\"><img src=\"https://img.shields.io/badge/license-bsd-orange.svg\" alt=\"Licenses\"></a>\n    <a href=\"https://www.paypal.com/paypalme/xuri\"><img src=\"https://img.shields.io/badge/Donate-PayPal-green.svg\" alt=\"Donate\"></a>\n</p>\n\n# Excelize\n\n## Introduction\n\nExcelize is a library written in pure Go providing a set of functions that allow you to write to and read from XLAM / XLSM / XLSX / XLTM / XLTX files. Supports reading and writing spreadsheet documents generated by Microsoft Excel&trade; 2007 and later. Supports complex components by high compatibility, and provided streaming API for generating or reading data from a worksheet with huge amounts of data. This library needs Go version 1.20 or later. There are some [incompatible changes](https://github.com/golang/go/issues/61881) in the Go 1.21.0, the Excelize library can not working with that version normally, if you are using the Go 1.21.x, please upgrade to the Go 1.21.1 and later version. The full docs can be seen using go's built-in documentation tool, or online at [go.dev](https://pkg.go.dev/github.com/xuri/excelize/v2) and [docs reference](https://xuri.me/excelize/).\n\n## Basic Usage\n\n### Installation\n\n```bash\ngo get github.com/xuri/excelize\n```\n\n- If your packages are managed using [Go Modules](https://go.dev/blog/using-go-modules), please install with following command.\n\n```bash\ngo get github.com/xuri/excelize/v2\n```\n\n### Create spreadsheet\n\nHere is a minimal example usage that will create spreadsheet file.\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n\n    \"github.com/xuri/excelize/v2\"\n)\n\nfunc main() {\n    f := excelize.NewFile()\n    defer func() {\n        if err := f.Close(); err != nil {\n            fmt.Println(err)\n        }\n    }()\n    // Create a new sheet.\n    index, err := f.NewSheet(\"Sheet2\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    // Set value of a cell.\n    f.SetCellValue(\"Sheet2\", \"A2\", \"Hello world.\")\n    f.SetCellValue(\"Sheet1\", \"B2\", 100)\n    // Set active sheet of the workbook.\n    f.SetActiveSheet(index)\n    // Save spreadsheet by the given path.\n    if err := f.SaveAs(\"Book1.xlsx\"); err != nil {\n        fmt.Println(err)\n    }\n}\n```\n\n### Reading spreadsheet\n\nThe following constitutes the bare to read a spreadsheet document.\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n\n    \"github.com/xuri/excelize/v2\"\n)\n\nfunc main() {\n    f, err := excelize.OpenFile(\"Book1.xlsx\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    defer func() {\n        // Close the spreadsheet.\n        if err := f.Close(); err != nil {\n            fmt.Println(err)\n        }\n    }()\n    // Get value from cell by given worksheet name and cell reference.\n    cell, err := f.GetCellValue(\"Sheet1\", \"B2\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    fmt.Println(cell)\n    // Get all the rows in the Sheet1.\n    rows, err := f.GetRows(\"Sheet1\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    for _, row := range rows {\n        for _, colCell := range row {\n            fmt.Print(colCell, \"\\t\")\n        }\n        fmt.Println()\n    }\n}\n```\n\n### Add chart to spreadsheet file\n\nWith Excelize chart generation and management is as easy as a few lines of code. You can build charts based on data in your worksheet or generate charts without any data in your worksheet at all.\n\n<p align=\"center\"><img width=\"650\" src=\"./test/images/chart.png\" alt=\"Excelize\"></p>\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n\n    \"github.com/xuri/excelize/v2\"\n)\n\nfunc main() {\n    f := excelize.NewFile()\n    defer func() {\n        if err := f.Close(); err != nil {\n            fmt.Println(err)\n        }\n    }()\n    for idx, row := range [][]interface{}{\n        {nil, \"Apple\", \"Orange\", \"Pear\"}, {\"Small\", 2, 3, 3},\n        {\"Normal\", 5, 2, 4}, {\"Large\", 6, 7, 8},\n    } {\n        cell, err := excelize.CoordinatesToCellName(1, idx+1)\n        if err != nil {\n            fmt.Println(err)\n            return\n        }\n        f.SetSheetRow(\"Sheet1\", cell, &row)\n    }\n    if err := f.AddChart(\"Sheet1\", \"E1\", &excelize.Chart{\n        Type: excelize.Col3DClustered,\n        Series: []excelize.ChartSeries{\n            {\n                Name:       \"Sheet1!$A$2\",\n                Categories: \"Sheet1!$B$1:$D$1\",\n                Values:     \"Sheet1!$B$2:$D$2\",\n            },\n            {\n                Name:       \"Sheet1!$A$3\",\n                Categories: \"Sheet1!$B$1:$D$1\",\n                Values:     \"Sheet1!$B$3:$D$3\",\n            },\n            {\n                Name:       \"Sheet1!$A$4\",\n                Categories: \"Sheet1!$B$1:$D$1\",\n                Values:     \"Sheet1!$B$4:$D$4\",\n            }},\n        Title: []excelize.RichTextRun{\n            {\n                Text: \"Fruit 3D Clustered Column Chart\",\n            },\n        },\n    }); err != nil {\n        fmt.Println(err)\n        return\n    }\n    // Save spreadsheet by the given path.\n    if err := f.SaveAs(\"Book1.xlsx\"); err != nil {\n        fmt.Println(err)\n    }\n}\n```\n\n### Add picture to spreadsheet file\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    _ \"image/gif\"\n    _ \"image/jpeg\"\n    _ \"image/png\"\n\n    \"github.com/xuri/excelize/v2\"\n)\n\nfunc main() {\n    f, err := excelize.OpenFile(\"Book1.xlsx\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    defer func() {\n        // Close the spreadsheet.\n        if err := f.Close(); err != nil {\n            fmt.Println(err)\n        }\n    }()\n    // Insert a picture.\n    if err := f.AddPicture(\"Sheet1\", \"A2\", \"image.png\", nil); err != nil {\n        fmt.Println(err)\n    }\n    // Insert a picture to worksheet with scaling.\n    if err := f.AddPicture(\"Sheet1\", \"D2\", \"image.jpg\",\n        &excelize.GraphicOptions{ScaleX: 0.5, ScaleY: 0.5}); err != nil {\n        fmt.Println(err)\n    }\n    // Insert a picture offset in the cell with printing support.\n    enable, disable := true, false\n    if err := f.AddPicture(\"Sheet1\", \"H2\", \"image.gif\",\n        &excelize.GraphicOptions{\n            PrintObject:     &enable,\n            LockAspectRatio: false,\n            OffsetX:         15,\n            OffsetY:         10,\n            Locked:          &disable,\n        }); err != nil {\n        fmt.Println(err)\n    }\n    // Save the spreadsheet with the origin path.\n    if err = f.Save(); err != nil {\n        fmt.Println(err)\n    }\n}\n```\n\n## Contributing\n\nContributions are welcome! Open a pull request to fix a bug, or open an issue to discuss a new feature or change. XML is compliant with [part 1 of the 5th edition of the ECMA-376 Standard for Office Open XML](https://www.ecma-international.org/publications-and-standards/standards/ecma-376/).\n\n## Licenses\n\nThis program is under the terms of the BSD 3-Clause License. See [https://opensource.org/licenses/BSD-3-Clause](https://opensource.org/licenses/BSD-3-Clause).\n\nThe Excel logo is a trademark of [Microsoft Corporation](https://aka.ms/trademarks-usage). This artwork is an adaptation.\n\ngopher.{ai,svg,png} was created by [Takuya Ueda](https://twitter.com/tenntenn). Licensed under the [Creative Commons 3.0 Attributions license](http://creativecommons.org/licenses/by/3.0/).\n",
        "releases": [
            {
                "name": "v2.9.0",
                "date": "2024-10-14T16:04:31Z"
            },
            {
                "name": "v2.8.1",
                "date": "2024-02-25T18:47:39Z"
            },
            {
                "name": "v2.8.0",
                "date": "2023-08-27T16:04:10Z"
            },
            {
                "name": "v2.7.1",
                "date": "2023-04-09T16:08:53Z"
            },
            {
                "name": "v2.7.0",
                "date": "2023-01-08T16:04:43Z"
            },
            {
                "name": "v2.6.1",
                "date": "2022-08-21T16:06:58Z"
            },
            {
                "name": "v2.6.0",
                "date": "2022-04-10T16:13:31Z"
            },
            {
                "name": "v2.5.0",
                "date": "2022-01-02T16:02:21Z"
            },
            {
                "name": "v2.4.1",
                "date": "2021-08-01T16:02:05Z"
            },
            {
                "name": "v2.4.0",
                "date": "2021-04-18T16:02:57Z"
            },
            {
                "name": "v2.3.2",
                "date": "2021-01-03T16:18:50Z"
            },
            {
                "name": "v2.3.1",
                "date": "2020-09-22T16:14:04Z"
            },
            {
                "name": "v2.3.0",
                "date": "2020-08-09T16:13:05Z"
            },
            {
                "name": "v2.2.0",
                "date": "2020-05-10T16:08:17Z"
            },
            {
                "name": "v2.1.0",
                "date": "2020-02-09T16:03:02Z"
            },
            {
                "name": "v2.0.2",
                "date": "2019-10-09T14:13:38Z"
            },
            {
                "name": "v2.0.1",
                "date": "2019-06-30T23:33:50Z"
            },
            {
                "name": "v2.0.0",
                "date": "2019-05-02T08:00:12Z"
            },
            {
                "name": "v1.4.1",
                "date": "2019-01-03T03:23:27Z"
            },
            {
                "name": "v1.4.0",
                "date": "2018-09-27T03:02:33Z"
            },
            {
                "name": "v1.3.0",
                "date": "2018-05-13T03:55:18Z"
            },
            {
                "name": "v1.2.0",
                "date": "2018-06-11T04:35:06Z"
            },
            {
                "name": "v1.1.0",
                "date": "2018-06-11T04:39:20Z"
            }
        ]
    }
}