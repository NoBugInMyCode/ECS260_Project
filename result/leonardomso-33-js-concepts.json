{
    "https://api.github.com/repos/leonardomso/33-js-concepts": {
        "forks": 9006,
        "watchers": 64452,
        "stars": 64452,
        "languages": {
            "JavaScript": 338
        },
        "commits": [
            "2024-10-07T15:31:44Z",
            "2024-10-07T15:30:17Z",
            "2024-10-07T15:29:26Z",
            "2024-10-07T15:24:44Z",
            "2024-10-07T15:23:29Z",
            "2024-10-07T15:23:13Z",
            "2024-10-07T15:22:50Z",
            "2024-10-07T15:20:34Z",
            "2024-10-07T15:19:55Z",
            "2024-10-07T15:19:32Z",
            "2024-10-07T15:19:12Z",
            "2024-10-06T14:34:56Z",
            "2024-10-06T14:33:20Z",
            "2024-10-06T11:45:12Z",
            "2024-10-06T04:23:08Z",
            "2024-10-03T16:39:07Z",
            "2024-10-02T07:03:10Z",
            "2024-10-01T20:19:26Z",
            "2024-10-01T14:05:36Z",
            "2024-10-01T07:01:35Z",
            "2024-09-30T21:05:04Z",
            "2024-09-15T12:22:59Z",
            "2024-09-08T16:47:25Z",
            "2024-08-06T19:18:34Z",
            "2024-08-06T15:32:10Z",
            "2024-06-30T14:43:42Z",
            "2024-06-08T10:41:53Z",
            "2024-06-01T18:42:35Z",
            "2024-06-01T18:28:04Z",
            "2024-04-08T13:57:43Z"
        ],
        "creation_date": "2018-09-04T13:27:04Z",
        "contributors": 30,
        "topics": [
            "angular",
            "concepts",
            "es6",
            "es6-javascript",
            "hacktoberfest",
            "javascript",
            "javascript-closures",
            "javascript-engines",
            "javascript-programming",
            "nodejs",
            "primitive-types",
            "programming",
            "react"
        ],
        "subscribers": 1200,
        "readme": "<h1 align=\"center\">\n<br>\n  <a href=\"https://github.com/leonardomso/33\"><img src=\"https://i.imgur.com/dsHmk6H.jpg\" alt=\"33 Concepts Every JS Developer Should Know\" width=200\" /></a>\n  <br>\n    <br>\n  33 Concepts Every JavaScript Developer Should Know\n  <br><br>\n</h1>\n\n## Introduction \n\nThis repository was created with the intention of helping developers master their concepts in JavaScript. It is not a requirement, but a guide for future studies. It is based on an article written by Stephen Curtis and you can read it [here](https://medium.com/@stephenthecurt/33-fundamentals-every-javascript-developer-should-know-13dd720a90d1).\n\n**\ud83d\ude80 Considered by GitHub as one of the [top open source projects of 2018!](https://blog.github.com/2018-12-13-new-open-source-projects/)**\n\n## Community\n\nFeel free to submit a PR by adding a link to your own recaps or reviews. If you want to translate the repo into your native language, please feel free to do so.\n\nAll the translations for this repo will be listed below:\n\n- [\u0627\u064e\u0644\u0652\u0639\u064e\u0631\u064e\u0628\u0650\u064a\u064e\u0651\u0629\u064f\u200e (Arabic)](https://github.com/amrsekilly/33-js-concepts) \u2014 Amr Elsekilly\n- [\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 (Bulgarian)](https://github.com/thewebmasterp/33-js-concepts) - thewebmasterp\n- [\u6c49\u8bed (Chinese)](https://github.com/stephentian/33-js-concepts) \u2014 Re Tian\n- [Portugu\u00eas do Brasil (Brazilian Portuguese)](https://github.com/tiagoboeing/33-js-concepts) \u2014 Tiago Boeing\n- [\ud55c\uad6d\uc5b4 (Korean)](https://github.com/yjs03057/33-js-concepts.git) \u2014 Suin Lee\n- [Espa\u00f1ol (Spanish)](https://github.com/adonismendozaperez/33-js-conceptos) \u2014 Adonis Mendoza\n- [T\u00fcrk\u00e7e (Turkish)](https://github.com/ilker0/33-js-concepts) \u2014 \u0130lker Demir\n- [\u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a (Russian)](https://github.com/gumennii/33-js-concepts) \u2014 Mihail Gumennii\n- [Ti\u1ebfng Vi\u1ec7t (Vietnamese)](https://github.com/nguyentranchung/33-js-concepts) \u2014 Nguy\u1ec5n Tr\u1ea7n Chung\n- [Polski (Polish)](https://github.com/lip3k/33-js-concepts) \u2014 Dawid Lipinski\n- [\u0641\u0627\u0631\u0633\u06cc (Persian)](https://github.com/majidalavizadeh/33-js-concepts) \u2014 Majid Alavizadeh\n- [Bahasa Indonesia (Indonesian)](https://github.com/rijdz/33-js-concepts) \u2014 Rijdzuan Sampoerna\n- [Fran\u00e7ais (French)](https://github.com/robinmetral/33-concepts-js) \u2014 Robin M\u00e9tral\n- [\u0939\u093f\u0928\u094d\u0926\u0940 (Hindi)](https://github.com/vikaschauhan/33-js-concepts) \u2014 Vikas Chauhan\n- [\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac (Greek)](https://github.com/DimitrisZx/33-js-concepts) \u2014 Dimitris Zarachanis\n- [\u65e5\u672c\u8a9e (Japanese)](https://github.com/oimo23/33-js-concepts) \u2014 oimo23\n- [Deutsch (German)](https://github.com/burhannn/33-js-concepts) \u2014 burhannn\n- [\u0443\u043a\u0440\u0430\u0457\u0301\u043d\u0441\u044c\u043a\u0430 \u043c\u043e\u0301\u0432\u0430 (Ukrainian)](https://github.com/AndrewSavetchuk/33-js-concepts-ukrainian-translation) \u2014 Andrew Savetchuk\n- [\u0dc3\u0dd2\u0d82\u0dc4\u0dbd (Sinhala)](https://github.com/ududsha/33-js-concepts) \u2014 Udaya Shamendra\n- [Italiano (Italian)](https://github.com/Donearm/33-js-concepts) \u2014 Gianluca Fiore\n- [Latvie\u0161u (Latvian)](https://github.com/ANormalStick/33-js-concepts) - J\u0101nis \u012av\u0101ns\n- [Afaan Oromoo (Oromo)](https://github.com/Amandagne/33-js-concepts) - Amanuel Dagnachew\n- [\u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22 (Thai)](https://github.com/ninearif/33-js-concepts) \u2014 Arif Waram\n- [Catal\u00e0 (Catalan)](https://github.com/marioestradaf/33-js-concepts) \u2014 Mario Estrada\n- [Svenska (Swedish)](https://github.com/FenixHongell/33-js-concepts/) \u2014 Fenix Hongell\n- [\u1781\u17d2\u1798\u17c2\u179a (Khmer)](https://github.com/Chhunneng/33-js-concepts) \u2014 Chrea Chanchhunneng\n- [\u12a0\u121b\u122d\u129b (Ethiopian)](https://github.com/hmhard/33-js-concepts) - Miniyahil Kebede(\u121d\u1295\u12eb\u1205\u120d \u12a8\u1260\u12f0)\n- [\u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u043c\u043e\u0432\u0430 (Belarussian)](https://github.com/Yafimau/33-js-concepts) \u2014 Dzianis Yafimau\n- [O'zbekcha (Uzbek)](https://github.com/smnv-shokh/33-js-concepts) \u2014 Shokhrukh Usmonov\n- [Urdu (\u0627\u0631\u062f\u0648)](https://github.com/sudoyasir/33-js-concepts) \u2014 Yasir Nawaz\n- [Marathi (\u092e\u0930\u093e\u0920\u0940)](https://github.com/dhruvchandak30/33-js-concepts) - Dhruv Chandak\n- [\u0939\u093f\u0928\u094d\u0926\u0940 (Hindi)](https://github.com/milostivyy/33-js-concepts) \u2014 Mahima Chauhan\n- [\u09ac\u09be\u0982\u09b2\u09be (Bengali)](https://github.com/Jisan-mia/33-js-concepts) \u2014 Jisan Mia\n- [\u0a97\u0ac1\u0a9c\u0ab0\u0abe\u0aa4\u0ac0 (Gujarati)](https://github.com/VatsalBhuva11/33-js-concepts) \u2014 Vatsal Bhuva\n- [\u0633\u0646\u068c\u064a (Sindhi)](https://github.com/Sunny-unik/33-js-concepts) \u2014 Sunny Gandhwani\n- [\u092d\u094b\u091c\u092a\u0941\u0930\u0940 (Bhojpuri)](https://github.com/debnath003/33-js-concepts) \u2014 Pronay Debnath\n- [\u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 (Punjabi)](https://github.com/Harshdev098/33-js-concepts) \u2014 Harsh Dev Pathak\n- [\u0ba4\u0bae\u0bbf\u0bb4\u0bcd (Tamil)](https://github.com/Jaimin25/33-js-concepts) - Jaimin Chovatia\n- [Latin (Latin)](https://github.com/Harshdev098/33-js-concepts) \u2014 Harsh Dev Pathak\n- [\u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02 (Malayalam)](https://github.com/Stark-Akshay/33-js-concepts) \u2014 Akshay Manoj\n- [Yor\u00f9b\u00e1 (Yoruba)](https://github.com/ayobaj/33-js-concepts) - Ayomide Bajulaye\n- [\u05e2\u05d1\u05e8\u05d9\u05ea\u200e (Hebrew)](https://github.com/rafyzg/33-js-concepts) \u2014 Refael Yzgea\n\n---\n## <img  align= center width=50px height=50px src=\"https://media4.giphy.com/media/3hoLIVAJYkz6T0Ichp/giphy.gif?cid=6c09b952m4j3poopinf91rquev6qy4e8avu0bflq1e0vh4gp&ep=v1_internal_gif_by_id&rid=giphy.gif&ct=s\"> <a id=\"table-of-contents\">Table of Contents</a>\n\n1. **[Call Stack](#1-call-stack)**\n2. **[Primitive Types](#2-primitive-types)**\n3. **[Value Types and Reference Types](#3-value-types-and-reference-types)**\n4. **[Implicit, Explicit, Nominal, Structuring and Duck Typing](#4-implicit-explicit-nominal-structuring-and-duck-typing)**\n5. **[== vs === vs typeof](#5--vs--vs-typeof)**\n6. **[Function Scope, Block Scope and Lexical Scope](#6-function-scope-block-scope-and-lexical-scope)**\n7. **[Expression vs Statement](#7-expression-vs-statement)**\n8. **[IIFE, Modules and Namespaces](#8-iife-modules-and-namespaces)**\n9. **[Message Queue and Event Loop](#9-message-queue-and-event-loop)**\n10. **[setTimeout, setInterval and requestAnimationFrame](#10-settimeout-setinterval-and-requestanimationframe)**\n11. **[JavaScript Engines](#11-javascript-engines)**\n12. **[Bitwise Operators, Type Arrays and Array Buffers](#12-bitwise-operators-type-arrays-and-array-buffers)**\n13. **[DOM and Layout Trees](#13-dom-and-layout-trees)**\n14. **[Factories and Classes](#14-factories-and-classes)**\n15. **[this, call, apply and bind](#15-this-call-apply-and-bind)**\n16. **[new, Constructor, instanceof and Instances](#16-new-constructor-instanceof-and-instances)**\n17. **[Prototype Inheritance and Prototype Chain](#17-prototype-inheritance-and-prototype-chain)**\n18. **[Object.create and Object.assign](#18-objectcreate-and-objectassign)**\n19. **[map, reduce, filter](#19-map-reduce-filter)**\n20. **[Pure Functions, Side Effects, State Mutation and Event Propagation](#20-pure-functions-side-effects-state-mutation-and-event-propagation)**\n21. **[Closures](#21-closures)**\n22. **[High Order Functions](#22-high-order-functions)**\n23. **[Recursion](#23-recursion)**\n24. **[Collections and Generators](#24-collections-and-generators)**\n25. **[Promises](#25-promises)**\n26. **[async/await](#26-asyncawait)**\n27. **[Data Structures](#27-data-structures)**\n28. **[Expensive Operation and Big O Notation](#28-expensive-operation-and-big-o-notation)**\n29. **[Algorithms](#29-algorithms)**\n30. **[Inheritance, Polymorphism and Code Reuse](#30-inheritance-polymorphism-and-code-reuse)**\n31. **[Design Patterns](#31-design-patterns)**\n32. **[Partial Applications, Currying, Compose and Pipe](#32-partial-applications-currying-compose-and-pipe)**\n33. **[Clean Code](#33-clean-code)**\n\n---\n\n## 1. Call Stack\n\nThe call stack is a mechanism that the JavaScript interpreter uses to keep track of function execution within a program. In JavaScript, functions are executed in the order they are called. The call stack follows the Last In, First Out (LIFO) principle, meaning that the last function pushed onto the stack is the first one to be executed.\n\nAccording to the ECMAScript specification, the call stack is defined as part of the execution context. Whenever a function is called, a new execution context is created and placed at the top of the stack. Once the function completes, its execution context is removed from the stack, and control returns to the previous context. This helps manage synchronous code execution, as each function call must complete before the next one can begin.\n\n### Reference\n\n-  [Call Stack \u2014 MDN](https://developer.mozilla.org/en-US/docs/Glossary/Call_stack)\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n- [Understanding Javascript Call Stack, Event Loops \u2014 Gaurav Pandvia](https://medium.com/@gaurav.pandvia/understanding-javascript-function-executions-tasks-event-loop-call-stack-more-part-1-5683dea1f5ec)\n- [Understanding the JavaScript Call Stack \u2014 Charles Freeborn](https://medium.freecodecamp.org/understanding-the-javascript-call-stack-861e41ae61d4)\n-  [Javascript: What Is The Execution Context? What Is The Call Stack? \u2014 Valentino Gagliardi](https://medium.com/@valentinog/javascript-what-is-the-execution-context-what-is-the-call-stack-bd23c78f10d1)\n-  [What is the JS Event Loop and Call Stack? \u2014 Jess Telford](https://gist.github.com/jesstelford/9a35d20a2aa044df8bf241e00d7bc2d0)\n-  [Understanding Execution Context and Execution Stack in Javascript \u2014 Sukhjinder Arora](https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0)\n-  [How JavaScript Works Under The Hood: An Overview of JavaScript Engine, Heap and, Call Stack \u2014 Bipin Rajbhar](https://dev.to/bipinrajbhar/how-javascript-works-under-the-hood-an-overview-of-javascript-engine-heap-and-call-stack-1j5o)\n-  [The JS Call stack Explained in 9 minutes](https://www.youtube.com/watch?v=W8AeMrVtFLY) - Colt Steel (YouTube)\n-  [Call Stack in JavaScript - Syed Rafsan Raiyan](https://srafsan.hashnode.dev/call-stack-in-javascript)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [Javascript: the Call Stack explained \u2014 Coding Blocks India](https://www.youtube.com/watch?v=w6QGEiQceOM)\n- [The JS Call Stack Explained In 9 Minutes \u2014 Colt Steele](https://www.youtube.com/watch?v=W8AeMrVtFLY)\n- [What is the Call Stack? \u2014 Eric Traub](https://www.youtube.com/watch?v=w7QWQlkLY_s)\n- [The Call Stack \u2014 Kevin Drumm](https://www.youtube.com/watch?v=Q2sFmqvpBe0)\n- [Understanding JavaScript Execution \u2014 Codesmith](https://www.youtube.com/watch?v=Z6a1cLyq7Ac&list=PLWrQZnG8l0E4kd1T_nyuVoxQUaYEWFgcD)\n- [What the heck is the event loop anyway? \u2014 Philip Roberts](https://www.youtube.com/watch?v=8aGhZQkoFbQ)\n- [How JavaScript Code is executed? \u2764\ufe0f& Call Stack \u2014 Akshay Saini](https://www.youtube.com/watch?v=iLWTnMzWtj4&list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP)\n- [Call Stacks - CS50](https://www.youtube.com/watch?v=aCPkszeKRa4)\n- [Learn the JavaScript Call Stack - codecupdev](https://www.youtube.com/watch?v=HXqXPGS96rw)\n- [JavaScript Functions and the Call Stack | How does the Call stack work - Chidre'sTechTutorials](https://www.youtube.com/watch?v=P6H-T4cUDR4)\n    \n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 2. Primitive Types\nAccording to the ECMAScript specification, JavaScript has six primitive data types: string, number, bigint, boolean, undefined, and symbol. These types are immutable, meaning their values cannot be altered. There is also a special primitive type called null, which represents the intentional absence of any object value.\n\nPrimitive values are directly assigned to a variable, and when you manipulate a primitive type, you're working directly on the value. Unlike objects, primitives do not have properties or methods, but JavaScript automatically wraps primitive values with object counterparts when necessary (e.g., when calling methods on strings).\n\n### Reference\n\n-  [JavaScript data types and data structures \u2014 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values)\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [Primitive and Non-primitive data-types in JavaScript - GeeksforGeeks](https://www.geeksforgeeks.org/primitive-and-non-primitive-data-types-in-javascript)\n-  [Javascript variables (Beginner thinking)](https://robiul.dev/javascript-variables-beginner-thinking)\n-  [How numbers are encoded in JavaScript \u2014 Dr. Axel Rauschmayer](http://2ality.com/2012/04/number-encoding.html)\n-  [What You Need to Know About JavaScript Number Type \u2014 Max Wizard K](https://indepth.dev/posts/1139/here-is-what-you-need-to-know-about-javascripts-number-type)\n-  [What Every JavaScript Developer Should Know About Floating Point Numbers \u2014 Chewxy](https://blog.chewxy.com/2014/02/24/what-every-javascript-developer-should-know-about-floating-point-numbers/)\n-  [The Secret Life of JavaScript Primitives \u2014 Angus Croll](https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/)\n-  [Primitive Types \u2014 Flow](https://flow.org/en/docs/types/primitives/)\n-  [(Not) Everything in JavaScript is an Object \u2014 Daniel Li](https://dev.to/d4nyll/not-everything-in-javascript-is-an-object)\n-  [JavaScript data types and data structures \u2014 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values)\n-  [Diving Deeper in JavaScripts Objects \u2014 Arfat Salman](https://blog.bitsrc.io/diving-deeper-in-javascripts-objects-318b1e13dc12)\n-  [The differences between Object.freeze() vs Const in JavaScript \u2014 Bolaji Ayodeji](https://medium.com/@bolajiayodeji/the-differences-between-object-freeze-vs-const-in-javascript-4eacea534d7c)\n-  [Object to primitive conversion \u2014 JavaScript.info](https://javascript.info/object-toprimitive)\n- [Methods of primitives - Javascript.info](https://javascript.info/primitives-methods)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [JavaScript Reference vs Primitive Types \u2014 Academind](https://www.youtube.com/watch?v=9ooYYRLdg_g)\n- [JavaScript Primitive Types \u2014 Simon Sez IT](https://www.youtube.com/watch?v=HsbWQsSCE5Y)\n- [Value Types and Reference Types in JavaScript \u2014 Programming with Mosh](https://www.youtube.com/watch?v=e-_mDyqm2oU)\n- [JavaScript Primitive Data Types \u2014 Avelx](https://www.youtube.com/watch?v=qw3j0A3DIzQ)\n- [Everything you never wanted to know about JavaScript numbers \u2014 Bartek Szopka](https://www.youtube.com/watch?v=MqHDDtVYJRI)\n- [What are variables in Javascript? \u2014 JS For Everyone](https://www.youtube.com/watch?v=B4Bbmei_thw)\n- [TIPOS DE DATOS PRIMITIVOS en JAVASCRIPT - La Cocina del C\u00f3digo](https://www.youtube.com/watch?v=cC65D2q5f8I)\n- [Data Type in JavaScript - ScholarHat](https://www.youtube.com/watch?v=aFDvBjVjCh8)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 3. Value Types and Reference Types\nAccording to the ECMAScript specification, value types are stored directly in the location that the variable accesses. These include types like number, string, boolean, undefined, bigint, symbol, and null. When you assign a value type to a variable, the value itself is stored.\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [Explaining Value vs. Reference in Javascript \u2014 Arnav Aggarwal](https://codeburst.io/explaining-value-vs-reference-in-javascript-647a975e12a0)\n-  [Primitive Types & Reference Types in JavaScript \u2014 Bran van der Meer](https://gist.github.com/branneman/7fb06d8a74d7e6d4cbcf75c50fec599c)\n-  [Value Types, Reference Types and Scope in JavaScript \u2014 Ben Aston](https://medium.com/@benastontweet/lesson-1b-javascript-fundamentals-380f601ba851)\n-  [Back to roots: JavaScript Value vs Reference \u2014 Miro Koczka](https://medium.com/dailyjs/back-to-roots-javascript-value-vs-reference-8fb69d587a18)\n-  [Grasp \u201cBy Value\u201d and \u201cBy Reference\u201d in JavaScript \u2014 L\u00e9na Faure](https://hackernoon.com/grasp-by-value-and-by-reference-in-javascript-7ed75efa1293)\n-  [JavaScript Reference and Copy Variables \u2014 V\u00edtor Capretz](https://hackernoon.com/javascript-reference-and-copy-variables-b0103074fdf0)\n-  [JavaScript Primitive vs Reference Values](http://www.javascripttutorial.net/javascript-primitive-vs-reference-values/)\n-  [JavaScript by Reference vs. by Value \u2014 nrabinowitz](https://stackoverflow.com/questions/6605640/javascript-by-reference-vs-by-value)\n-  [JavaScript Interview Prep: Primitive vs. Reference Types \u2014 Mike Cronin](https://dev.to/mostlyfocusedmike/javascript-interview-prep-primitive-vs-reference-types-3o4f)\n-  [forEach method in JavaScript - A Comprehensive Guide](https://robiul.dev/foreach-method-in-javascript-a-comprehensive-guide)\n-  [JavaScript map vs. forEach: When to Use Each One - Sajal Soni](https://code.tutsplus.com/tutorials/javascript-map-vs-foreach-when-to-use-each-one--cms-38365)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [Javascript Pass by Value vs Pass by Reference \u2014 techsith](https://www.youtube.com/watch?v=E-dAnFdq8k8)\n- [JavaScript Value vs Reference Types \u2014 Programming with Mosh](https://www.youtube.com/watch?v=fD0t_DKREbE)\n- [VALORES vs REFERENCIAS en JAVASCRIPT - La Cocina del C\u00f3digo](https://www.youtube.com/watch?v=AvkyOrWkuQc)\n- [JavaScript - Reference vs Primitive Values/ Types - Academind](https://www.youtube.com/watch?v=9ooYYRLdg_g)\n- [Value Types and Reference Types in JavaScript - Programming with Mosh](https://www.youtube.com/watch?v=e-_mDyqm2oU)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 4. Implicit, Explicit, Nominal, Structuring and Duck Typing\nThe ECMAScript specification defines JavaScript as a dynamically typed language, meaning that types are associated with values rather than variables, and type checking occurs at runtime. There are various ways JavaScript manages types:\n\nImplicit Typing (or Type Coercion): This occurs when JavaScript automatically converts one data type to another when required. For instance, JavaScript might convert a string to a number during an arithmetic operation. While this can simplify some code, it can also lead to unexpected results if not handled carefully.\n\nExplicit Typing: Unlike implicit typing, explicit typing involves manually converting a value from one type to another using functions like Number(), String(), or Boolean().\n\nNominal Typing: JavaScript doesn't natively support nominal typing, where types are explicitly declared and checked. However, TypeScript, a superset of JavaScript, brings this feature to help catch type errors during development.\n\nStructuring Typing: In this type system, types are based on the structure or properties of the data. JavaScript is a structurally typed language where objects are compatible if they share the same structure (i.e., the same set of properties and methods).\n\nDuck Typing: This is a concept where an object's suitability is determined by the presence of certain properties and methods, rather than by the actual type of the object. JavaScript relies heavily on duck typing, where behavior is inferred from an object's properties rather than its declared type.\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [What you need to know about Javascript's Implicit Coercion \u2014 Promise Tochi](https://dev.to/promhize/what-you-need-to-know-about-javascripts-implicit-coercion-e23)\n-  [JavaScript Type Coercion Explained \u2014 Alexey Samoshkin](https://medium.freecodecamp.org/js-type-coercion-explained-27ba3d9a2839)\n-  [Javascript Coercion Explained \u2014 Ben Garrison](https://hackernoon.com/javascript-coercion-explained-545c895213d3)\n-  [What exactly is Type Coercion in Javascript? - Stack Overflow](https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [== ? === ??? ...#@^% - Shirmung Bielefeld](https://www.youtube.com/watch?v=qGyqzN0bjhc&t)\n- [Coercion in Javascript - Hitesh Choudhary](https://www.youtube.com/watch?v=b04Q_vyqEG8)\n- [JavaScript Questions: What is Coercion? - Steven Hancock](https://www.youtube.com/watch?v=z4-8wMSPJyI)\n- [Typing: Static vs Dynamic, Weak vs. Strong - Codexpanse](https://www.youtube.com/watch?v=C5fr0LZLMAs)\n- [EL SISTEMA de TIPOS DE JAVASCRIPT - La Cocina del C\u00f3digo](https://www.youtube.com/watch?v=0ei4nb49GKo)\n- [Duck Typing in Javascript - Techmaker Studio](https://www.youtube.com/watch?v=oEpgyoMEkrM)\n- [Duck Typing in Javascript - Programming with Kartik](https://youtu.be/e4X1KAuk6Bs?si=krZKbsM2i3tmIl2G)\n\n### Books\n\n- [You Don't Know JS, 1st Edition: Types & Grammar \u2014 Kyle Simpson](https://github.com/getify/You-Dont-Know-JS/tree/1st-ed)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 5. == vs === vs typeof\n According to the ECMAScript specification, JavaScript includes both strict (===) and loose (==) equality operators, which behave differently when comparing values. Here's a breakdown:\n\n== (Loose Equality): This operator performs type coercion before comparing two values. If the values are of different types, JavaScript will attempt to convert one or both values to a common type before comparison, which can lead to unexpected results.\n\n=== (Strict Equality): This operator compares both the value and the type without any type coercion. If the two values are not of the same type, the comparison will return false.\n\ntypeof Operator: The typeof operator is used to check the data type of a variable. While it's generally reliable, there are certain quirks, like how typeof null returns \"object\" instead of \"null\", due to a long-standing behavior in JavaScript's implementation.\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [JavaScript Double Equals vs. Triple Equals \u2014 Brandon Morelli](https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a)\n-  [Should I use === or == equality comparison operator in JavaScript? \u2014 Panu Pitkamaki](https://bytearcher.com/articles/equality-comparison-operator-javascript/)\n-  [Why Use the Triple-Equals Operator in JavaScript? \u2014 Louis Lazaris](https://www.impressivewebs.com/why-use-triple-equals-javascipt/)\n-  [What is the difference between == and === in JavaScript? \u2014 Craig Buckler](https://www.oreilly.com/learning/what-is-the-difference-between-and-in-javascript)\n-  [Why javascript's typeof always return \"object\"? \u2014 Stack Overflow](https://stackoverflow.com/questions/3787901/why-javascripts-typeof-always-return-object)\n-  [Checking Types in Javascript \u2014 Toby Ho](http://tobyho.com/2011/01/28/checking-types-in-javascript/)\n-  [How to better check data types in JavaScript \u2014 Webbjocke](https://webbjocke.com/javascript-check-data-types/)\n-  [Checking for the Absence of a Value in JavaScript \u2014 Tomer Aberbach](https://tomeraberba.ch/html/post/checking-for-the-absence-of-a-value-in-javascript.html)\n-  [Difference Between == and === in Javascript](https://www.scaler.com/topics/javascript/difference-between-double-equals-and-triple-equals-in-javascript/)    \n-  [Difference between == and === in JavaScript \u2014 GeeksforGeeks](https://www.geeksforgeeks.org/difference-between-double-equal-vs-triple-equal-javascript/)\n-  [=== vs == Comparision in JavaScript \u2014 FreeCodeCamp](https://www.freecodecamp.org/news/javascript-triple-equals-sign-vs-double-equals-sign-comparison-operators-explained-with-examples/)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [JavaScript - The typeof operator \u2014 Java Brains](https://www.youtube.com/watch?v=ol_su88I3kw)\n- [Javascript typeof operator \u2014 DevDelight](https://www.youtube.com/watch?v=qPYhTPt_SbQ)\n- [JavaScript \"==\" VS \"===\" \u2014 Web Dev Simplified](https://www.youtube.com/watch?v=C5ZVC4HHgIg)\n- [=== vs == in javascript - Hitesh Choudhary](https://www.youtube.com/watch?v=a0S1iG3TgP0)\n- [The typeof operator in JS - CodeVault](https://www.youtube.com/watch?v=NSS5WRcv7yM)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 6. Function Scope, Block Scope and Lexical Scope\n The ECMAScript specification outlines three key types of scope:\n\nFunction Scope: Variables declared within a function using var are only accessible within that function. This scope isolates variables from being accessed outside of the function where they are declared.\n\nBlock Scope: Introduced with ES6, variables declared with let and const are block-scoped. This means they are only accessible within the specific block {} in which they are defined, such as inside loops or conditionals.\n\nLexical Scope: Refers to how variable access is determined based on the physical location of the variables in the code. Functions are lexically scoped, meaning that they can access variables from their parent scope.\n\n### Books\n\n- [You Don't Know JS Yet, 2nd Edition: Scope & Closures \u2014 Kyle Simpson](https://github.com/getify/You-Dont-Know-JS/tree/2nd-ed/scope-closures)\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [JavaScript Functions\u200a\u2014\u200aUnderstanding The Basics \u2014 Brandon Morelli](https://codeburst.io/javascript-functions-understanding-the-basics-207dbf42ed99)\n-  [Var, Let, and Const \u2013 What's the Difference?](https://www.freecodecamp.org/news/var-let-and-const-whats-the-difference/)\n-  [Functions in JavaScript - Deepa Pandey](https://www.scaler.com/topics/javascript/javascript-functions/)\n-  [Emulating Block Scope in JavaScript \u2014 Josh Clanton](http://adripofjavascript.com/blog/drips/emulating-block-scope-in-javascript.html)\n-  [The Difference Between Function and Block Scope in JavaScript \u2014 Joseph Cardillo](https://medium.com/@josephcardillo/the-difference-between-function-and-block-scope-in-javascript-4296b2322abe)\n-  [Function Scopes and Block Scopes in JavaScript \u2014 Samer Buna](https://edgecoders.com/function-scopes-and-block-scopes-in-javascript-25bbd7f293d7)\n-  [Understanding Scope and Context in JavaScript \u2014 Ryan Morr](http://ryanmorr.com/understanding-scope-and-context-in-javascript/)\n-  [JavaScript Scope and Closures \u2014 Zell Liew](https://css-tricks.com/javascript-scope-closures/)\n-  [Understanding Scope in JavaScript \u2014 Wissam Abirached](https://developer.telerik.com/topics/web-development/understanding-scope-in-javascript/)\n-  [Understanding Scope in JavaScript \u2015 Hammad Ahmed](https://scotch.io/tutorials/understanding-scope-in-javascript)\n-  [When to use a function declaration vs. a function expression \u2015 Amber Wilkie](https://medium.freecodecamp.org/when-to-use-a-function-declarations-vs-a-function-expression-70f15152a0a0)\n-  [A JavaScript Fundamentals Cheat Sheet: Scope, Context, and \u201cthis\u201d \u2015 Alexandra Fren](https://dev.to/alexandrafren/a-javascript-fundamentals-cheat-sheet-scope-context-and-this-28ai)\n-  [Functions / Function scope \u2015 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#function_scope)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [What Makes Javascript Weird ... and Awesome pt. 4 \u2014 LearnCode.academy](https://www.youtube.com/watch?v=SBwoFkRjZvE)\n- [Variable Scope in JavaScript \u2014 Kirupa Chinnathambi](https://www.youtube.com/watch?v=dhp57T3p760)\n- [JavaScript Block Scope and Function Scope \u2014 mmtuts](https://www.youtube.com/watch?v=aK_nuUAdr8E)\n- [What the Heck is Lexical Scope? \u2014 NWCalvank](https://www.youtube.com/watch?v=GhNA0r10MmA)\n- [Variable Scope \u2014 Steve Griffith](https://www.youtube.com/watch?v=FyWdrCZZavQ)\n- [Javascript Tutorials for Beginners \u2014 Mosh Hemadani](https://www.youtube.com/watch?v=W6NZfCO5SIk)\n- [JavaScript Block scope vs Function scope - nivek](https://www.youtube.com/watch?v=IaTztAtoNEY)\n- [Lexical scoping in javascript - Hitesh Choudhary](https://www.youtube.com/watch?v=qT5S7GgIioE)\n- [Modern Scope Handling in JavaScript (ES6 and Beyond) -Prashant Dewangan ](https://www.youtube.com/watch?v=zMseUdOR7z8)\n\n \n\n\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 7. Expression vs Statement\nAccording to the ECMAScript specification, expressions produce a value, and statements are instructions to perform an action, such as variable assignment or control flow. Function declarations are hoisted and can be called before they are defined in the code, while function expressions are not hoisted and must be defined before being invoked.\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [All you need to know about Javascript's Expressions, Statements and Expression Statements \u2014 Promise Tochi](https://dev.to/promhize/javascript-in-depth-all-you-need-to-know-about-expressions-statements-and-expression-statements-5k2)\n-  [Function Expressions vs Function Declarations \u2014 Paul Wilkins](https://www.sitepoint.com/function-expressions-vs-declarations/)\n-  [JavaScript Function \u2014 Declaration vs Expression \u2014 Ravi Roshan](https://medium.com/@raviroshan.talk/javascript-function-declaration-vs-expression-f5873b8c7b38)\n-  [Function Declarations vs. Function Expressions \u2014 Mandeep Singh](https://medium.com/@mandeep1012/function-declarations-vs-function-expressions-b43646042052)\n-  [Function Declarations vs. Function Expressions \u2014 Anguls Croll](https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/)\n- [Expression statement \u2014 MDN web docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Expression_statement)\n\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [Expressions vs. Statements in JavaScript \u2014 Hexlet](https://www.youtube.com/watch?v=WVyCrI1cHi8)\n- [JavaScript - Expression vs. Statement \u2014 WebTunings](https://www.youtube.com/watch?v=3jDpNGJkupA)\n- [Javascript Function Expression Vs Declaration For Beginners \u2014 Dev Material](https://www.youtube.com/watch?v=qz7Nq1tV7Io)\n- [The difference between an expression and a statement in JavaScript](https://youtu.be/eWTuFoBYiwg)\n- [Expression in javascript | Statement in javascript - Sathelli Srikanth](https://www.youtube.com/watch?v=cVDs3TZ-kXs)\n\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 8. IIFE, Modules and Namespaces\nWith the introduction of ES6 modules, the role of IIFEs in scope isolation has diminished but they still remain relevant.\n### Reference\n\n-  [IIFE \u2014 MDN](https://developer.mozilla.org/en-US/docs/Glossary/IIFE)\n-  [Modularity \u2014 MDN](https://developer.mozilla.org/en-US/docs/Glossary/modularity)\n-  [Namespace \u2014 MDN](https://developer.mozilla.org/en-US/docs/Glossary/Namespace)\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [Mastering Immediately-Invoked Function Expressions \u2015 Chandra Gundamaraju](https://medium.com/@vvkchandra/essential-javascript-mastering-immediately-invoked-function-expressions-67791338ddc6)\n-  [JavaScript Immediately Invoked Function Expression \u2014 javascripttutorial.net](https://www.javascripttutorial.net/javascript-immediately-invoked-function-expression-iife/)\n-  [Do ES6 Modules make the case of IIFEs obsolete?](https://hashnode.com/post/do-es6-modules-make-the-case-of-iifes-obsolete-civ96wet80scqgc538un20es0)\n-  [A 10 minute primer to JavaScript modules, module formats, module loaders and module bundlers \u2015 Jurgen Van de Moere](https://www.jvandemo.com/a-10-minute-primer-to-javascript-modules-module-formats-module-loaders-and-module-bundlers/)\n-  [Modules \u2015 Exploring JS](http://exploringjs.com/es6/ch_modules.html)\n-  [ES modules: A cartoon deep-dive \u2014 Lin Clark](https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/)\n-  [Understanding ES6 Modules \u2014 Craig Buckler](https://www.sitepoint.com/understanding-es6-modules/)\n-  [An overview of ES6 Modules in JavaScript \u2014 Brent Graham](https://blog.cloud66.com/an-overview-of-es6-modules-in-javascript/)\n-  [ES6 Modules in Depth \u2014 Nicol\u00e1s Bevacqua](https://ponyfoo.com/articles/es6-modules-in-depth)\n-  [ES6 modules, Node.js and the Michael Jackson Solution \u2014 Alberto Gimeno](https://medium.com/dailyjs/es6-modules-node-js-and-the-michael-jackson-solution-828dc244b8b)\n-  [JavaScript Modules: A Beginner\u2019s Guide \u2014 Preethi Kasireddy](https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc)\n-  [Using JavaScript modules on the web \u2014 Addy Osmani & Mathias Bynens](https://developers.google.com/web/fundamentals/primers/modules)\n-  [IIFE: Immediately Invoked Function Expressions \u2014 Parwinder](https://dev.to/bhagatparwinder/iife-immediately-invoked-function-expressions-49c5)\n-  [Javascript Module Bundlers \u2014 Vanshu Hassija](https://sassy-butter-197.notion.site/Javascript-bundlers-016932b17b0744e983c2cc0db31e6f02)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [Immediately Invoked Function Expression - Beau teaches JavaScript \u2014 freeCodeCamp](https://www.youtube.com/watch?v=3cbiZV4H22c)\n- [Understanding JavaScript IIFE \u2014 Sheo Narayan](https://www.youtube.com/watch?v=I5EntfMeIIQ)\n- [JavaScript Modules: ES6 Import and Export \u2014 Kyle Robinson](https://www.youtube.com/watch?v=_3oSWwapPKQ)\n- [ES6 - Modules \u2014 Ryan Christiani](https://www.youtube.com/watch?v=aQr2bV1BPyE)\n- [ES6 Modules in the Real World \u2014 Sam Thorogood](https://www.youtube.com/watch?v=fIP4pjAqCtQ)\n- [ES6 Modules \u2014 TempleCoding](https://www.youtube.com/watch?v=5P04OK6KlXA)\n- [JavaScript IIFE (Immediately Invoked Function Expressions) \u2014 Steve Griffith](https://www.youtube.com/watch?v=Xd7zgPFwVX8&)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 9. Message Queue and Event Loop\nThe Event Loop is a critical part of JavaScript\u2019s concurrency model, ensuring non-blocking behavior by processing tasks in an asynchronous manner. Understanding how it interacts with the Message Queue and Microtasks is key to mastering JavaScript behavior.\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [JavaScript Event Loop Explained \u2014 Anoop Raveendran](https://medium.com/front-end-hacking/javascript-event-loop-explained-4cd26af121d4)\n-  [The JavaScript Event Loop: Explained \u2014 Erin Sweson-Healey](https://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/)\n-  [Understanding JS: The Event Loop \u2014 Alexander Kondov](https://hackernoon.com/understanding-js-the-event-loop-959beae3ac40)\n-  [The JavaScript Event Loop \u2014 Flavio Copes](https://flaviocopes.com/javascript-event-loop/)\n-  [Tasks, microtasks, queues and schedules \u2014 Jake Archibald](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)\n-  [Visualising the JavaScript Event Loop with a Pizza Restaurant analogy \u2014 Priyansh Jain](https://dev.to/presto412/visualising-the-javascript-event-loop-with-a-pizza-restaurant-analogy-47a8)\n-  [JavaScript Visualized: Event Loop \u2014 Lydia Hallie](https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif)\n-  [setTimeout vs setImmediate in JavaScript \u2014 Navneet Singh](https://medium.com/@navneetskahlon/settimeout-vs-setimmediate-in-javascript-a2eaab973490)\n- [Understanding and Optimizing JavaScript\u2019s Event Loop \u2014 Xiuer Old](https://medium.com/javascript-zone/understanding-and-optimizing-javascripts-event-loop-717ae0095038#:~:text=The%20event%20loop%20is%20the,%2Dblocking%20I%2FO%20operations.)\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [What the heck is the event loop anyway? | JSConf EU \u2014 Philip Roberts](https://www.youtube.com/watch?v=8aGhZQkoFbQ)\n- [JavaScript Event Loop \u2014 ComScience Simplified](https://www.youtube.com/watch?v=XzXIMZMN9k4)\n- [I'm stuck in an Event Loop \u2014 Philip Roberts](https://www.youtube.com/watch?v=6MXRNXXgP_0)\n- [In The Loop - Jake Archibald | JSConf.Asia 2018](https://www.youtube.com/watch?v=cCOL7MC4Pl0)\n- [Desmitificando el Event Loop (Spanish)](https://www.youtube.com/watch?v=Eqq2Rb7LzYE)\n- [Callbacks, Sincrono, Ass\u00edncrono e Event Loop (PT-BR)](https://www.youtube.com/watch?v=6lbBaM18X3g)\n- [JavaScript Event Loop: How it Works and Why it Matters in 5 Minutes - James Q Quick](https://www.youtube.com/watch?v=6lbBaM18X3g)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 10. setTimeout, setInterval and requestAnimationFrame\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [Javascript setTimeout - All you need to know](https://robiul.dev/javascript-settimeout-all-you-need-to-know)\n-  [setTimeout and setInterval \u2014 JavaScript.Info](https://javascript.info/settimeout-setinterval)\n-  [Why not to use setInterval \u2014 Akanksha Sharma](https://dev.to/akanksha_9560/why-not-to-use-setinterval--2na9)\n-  [setTimeout VS setInterval \u2014 Develoger](https://develoger.com/settimeout-vs-setinterval-cff85142555b)\n-  [Using requestAnimationFrame \u2014 Chris Coyier](https://css-tricks.com/using-requestanimationframe/)\n-  [Understanding JavaScript's requestAnimationFrame() \u2014 JavaScript Kit](http://www.javascriptkit.com/javatutors/requestanimationframe.shtml)\n-  [Handling time intervals in JavaScript - Amit Merchant](https://www.amitmerchant.com/Handling-Time-Intervals-In-Javascript/)\n-  [Debounce \u2013 How to Delay a Function in JavaScript - Ondrej Polesny](https://www.freecodecamp.org/news/javascript-debounce-example/)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [Javascript: How setTimeout and setInterval works \u2014 Coding Blocks India](https://www.youtube.com/watch?v=6bPKyl8WYWI)\n- [TRUST ISSUES with setTimeout() \u2014 Akshay Saini ](https://youtu.be/nqsPmuicJJc?si=4FXKlZfqiJUqO2Y4)                  \n- [setTimeout and setInterval in JavaScript \u2014 techsith](https://www.youtube.com/watch?v=TbCgGWe8LN8)\n- [JavaScript Timers \u2014 Steve Griffith](https://www.youtube.com/watch?v=0VVJSvlUgtg)\n- [JavaScript setTimeOut and setInterval Explained \u2014 Theodore Anderson](https://www.youtube.com/watch?v=mVKfrWCOB60)   \n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 11. JavaScript Engines\n\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [Is javascript compiled or interpreted language?](https://robiul.dev/is-javascript-compiled-or-interpreted-language)\n-  [JavaScript Engines \u2014 Jen Looper](http://www.softwaremag.com/javascript-engines/)\n-  [Understanding How the Chrome V8 Engine Translates JavaScript into Machine Code \u2014 DroidHead](https://medium.freecodecamp.org/understanding-the-core-of-nodejs-the-powerful-chrome-v8-engine-79e7eb8af964)\n-  [Understanding V8\u2019s Bytecode \u2014 Franziska Hinkelmann](https://medium.com/dailyjs/understanding-v8s-bytecode-317d46c94775)\n-  [A Brief History of Google\u2019s V8 Javascript Engine \u2014 Clair Smith](https://www.mediacurrent.com/blog/brief-history-googles-v8-javascript-engine/)\n-  [JavaScript essentials: why you should know how the engine works - Rainer Hahnekamp](https://www.freecodecamp.org/news/javascript-essentials-why-you-should-know-how-the-engine-works-c2cc0d321553)\n-  [JavaScript engine fundamentals: Shapes and Inline Caches](https://mathiasbynens.be/notes/shapes-ics)\n-  [JavaScript engine fundamentals: optimizing prototypes](https://mathiasbynens.be/notes/prototypes)\n-  [How V8 optimizes array operations](https://v8.dev/blog/elements-kinds)\n-  [JavaScript Internals: JavaScript engine, Run-time environment & setTimeout Web API \u2014 Rupesh Mishra](https://blog.bitsrc.io/javascript-internals-javascript-engine-run-time-environment-settimeout-web-api-eeed263b1617)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [JavaScript Engines: The Good Parts\u2122 \u2014 Mathias Bynens & Benedikt Meurer](https://www.youtube.com/watch?v=5nmpokoRaZI)\n- [JS Engine EXPOSED \ud83d\udd25 Google's V8 Architecture \ud83d\ude80 | Namaste JavaScript Ep. 16 - Akshay Saini](https://www.youtube.com/watch?v=2WJL19wDH68)\n- [How JavaScript Code is executed? How Javascript works behind the scenes](https://youtu.be/iLWTnMzWtj4)   \n- [Understanding the V8 JavaScript Engine - freeCodeCamp Talks](https://www.youtube.com/watch?v=xckH5s3UuX4)\n- [JavaScript Under The Hood - JavaScript Engine Overview - Traversy Media](https://www.youtube.com/watch?v=oc6faXVc54E)\n- [Arindam Paul - JavaScript VM internals, EventLoop, Async and ScopeChains](https://www.youtube.com/watch?v=QyUFheng6J0)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 12. Bitwise Operators, Type Arrays and Array Buffers\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [Programming with JS: Bitwise Operations \u2014 Alexander Kondov](https://hackernoon.com/programming-with-js-bitwise-operations-393eb0745dc4)\n-  [Using JavaScript\u2019s Bitwise Operators in Real Life \u2014 ian m](https://codeburst.io/using-javascript-bitwise-operators-in-real-life-f551a731ff5)\n-  [JavaScript Bitwise Operators \u2014 w3resource](https://www.w3resource.com/javascript/operators/bitwise-operator.php)\n-  [Bitwise Operators in Javascript \u2014 Joe Cha](https://medium.com/bother7-blog/bitwise-operators-in-javascript-65c4c69be0d3)\n-  [A Comprehensive Primer on Binary Computation and Bitwise Operators in Javascript \u2014 Paul Brown](https://medium.com/techtrument/a-comprehensive-primer-on-binary-computation-and-bitwise-operators-in-javascript-81acf8341f04)\n-  [How can I understand Bitwise operation in JavaScript?](https://www.quora.com/How-can-I-understand-Bitwise-operation-in-JavaScript)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [JavaScript Bitwise Operators \u2014 Programming with Mosh](https://www.youtube.com/watch?v=mesu75PTDC8)\n- [Bitwise Operators and WHY we use them \u2014 Alex Hyett](https://www.youtube.com/watch?v=igIjGxF2J-w)\n- [JS Bitwise Operators and Binary Numbers \u2014 Steve Griffith - Prof3ssorSt3v3](https://www.youtube.com/watch?v=RRyxCmLX_ag)\n- [Deep Dive into Blobs, Files, and ArrayBuffers \u2014 Steve Griffith - Prof3ssorSt3v3](https://www.youtube.com/watch?v=ScZZoHj7mqY)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 13. DOM and Layout Trees\n\n### Reference\n\n- [Document Object Model (DOM) \u2014 MDN](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model)\n\n### Books\n\n-  [Eloquent JavaScript, 3rd Edition: Ch. 14 - The Document Object Model](https://eloquentjavascript.net/14_dom.html)\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [How To Understand and Modify the DOM in JavaScript \u2014 Tania Rascia](https://www.digitalocean.com/community/tutorials/introduction-to-the-dom)\n-  [What\u2019s the Document Object Model, and why you should know how to use it \u2014 Leonardo Maldonado](https://medium.freecodecamp.org/whats-the-document-object-model-and-why-you-should-know-how-to-use-it-1a2d0bc5429d)\n-  [JavaScript DOM Tutorial with Example \u2014 Guru99](https://www.guru99.com/how-to-use-dom-and-events-in-javascript.html)\n-  [What is the DOM? \u2014 Chris Coyier](https://css-tricks.com/dom/)\n-  [Traversing the DOM with JavaScript \u2014 Zell Liew](https://zellwk.com/blog/dom-traversals/)\n-  [DOM Tree](https://javascript.info/dom-nodes)\n-  [How to traverse the DOM in Javascript \u2014 Vojislav Gruji\u0107](https://medium.com/javascript-in-plain-english/how-to-traverse-the-dom-in-javascript-d6555c335b4e)\n-  [Render Tree Construction \u2014 Ilya Grigorik](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction)\n-  [What exactly is the DOM?](https://bitsofco.de/what-exactly-is-the-dom/)\n-  [JavaScript DOM](https://www.javascripttutorial.net/javascript-dom/)\n-  [Traversing the Dom with Javascript](https://www.youtube.com/watch?v=Pr4LLrmDLLo) - Steve Griffith (YouTube)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [JavaScript DOM \u2014 The Net Ninja](https://www.youtube.com/watch?v=FIORjGvT0kk)\n- [JavaScript DOM Crash Course \u2014 Traversy Media](https://www.youtube.com/watch?v=0ik6X4DJKCc)\n- [JavaScript DOM Manipulation Methods \u2014 Web Dev Simplified](https://www.youtube.com/watch?v=y17RuWkWdn8)\n- [JavaScript DOM Traversal Methods \u2014 Web Dev Simplified](https://www.youtube.com/watch?v=v7rSSy8CaYE)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 14. Factories and Classes\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [How To Use Classes in JavaScript \u2014 Tania Rascia](https://www.digitalocean.com/community/tutorials/understanding-classes-in-javascript)\n-  [Javascript Classes \u2014 Under The Hood \u2014 Majid](https://medium.com/tech-tajawal/javascript-classes-under-the-hood-6b26d2667677)\n-  [Better JavaScript with ES6, Pt. II: A Deep Dive into Classes \u2015 Peleke Sengstacke](https://scotch.io/tutorials/better-javascript-with-es6-pt-ii-a-deep-dive-into-classes)\n-  [Understand the Factory Design Pattern in Plain JavaScript \u2014 Aditya Agarwal](https://medium.com/front-end-hacking/understand-the-factory-design-pattern-in-plain-javascript-20b348c832bd)\n-  [Factory Functions in JavaScript \u2014 Josh Miller](https://atendesigngroup.com/blog/factory-functions-javascript)\n-  [The Factory Pattern in JS ES6 \u2014 SnstsDev](https://medium.com/@SntsDev/the-factory-pattern-in-js-es6-78f0afad17e9)\n-  [Class vs Factory function: exploring the way forward \u2014 Cristi Salcescu](https://medium.freecodecamp.org/class-vs-factory-function-exploring-the-way-forward-73258b6a8d15)\n-  [How ES6 classes really work and how to build your own \u2014 Robert Grosse](https://medium.com/@robertgrosse/how-es6-classes-really-work-and-how-to-build-your-own-fd6085eb326a)\n-  [Understanding `super` in JavaScript](https://jordankasper.com/understanding-super-in-javascript)\n-  [An Easy Guide To Understanding Classes In JavaScript](https://dev.to/lawrence_eagles/an-easy-guide-to-understanding-classes-in-javascript-3bcm)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [JavaScript Factory Functions \u2014 Programming with Mosh](https://www.youtube.com/watch?v=jpegXpQpb3o)\n- [Factory Functions in JavaScript \u2014 Fun Fun Function](https://www.youtube.com/watch?v=ImwrezYhw4w)\n- [Javascript Tutorial Function Factories \u2014 Crypto Chan](https://www.youtube.com/watch?v=R7-IwpH80UE)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 15. this, call, apply and bind\n\n### Reference\n\n-  [call() \u2014 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call)\n-  [bind() \u2014 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind)\n-  [apply() \u2014 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [Grokking call(), apply() and bind() methods in JavaScript \u2014 Aniket Kudale](https://levelup.gitconnected.com/grokking-call-apply-and-bind-methods-in-javascript-392351a4be8b)\n-  [JavaScript\u2019s Apply, Call, and Bind Methods are Essential for JavaScript Professionals \u2014 Richard Bovell](http://javascriptissexy.com/javascript-apply-call-and-bind-methods-are-essential-for-javascript-professionals/)\n-  [Javascript: call(), apply() and bind() \u2014 Omer Goldberg](https://medium.com/@omergoldberg/javascript-call-apply-and-bind-e5c27301f7bb)\n-  [The difference between call / apply / bind \u2014 Ivan Sifrim](https://medium.com/@ivansifrim/the-differences-between-call-apply-bind-276724bb825b)\n-  [What the hack is call, apply, bind in JavaScript \u2014 Ritik](https://dev.to/ritik_dev_js/what-the-hack-is-call-apply-bind-in-javascript-11ce)\n-  [Mastering 'this' in JavaScript: Callbacks and bind(), apply(), call() \u2014 Michelle Gienow](https://thenewstack.io/mastering-javascript-callbacks-bind-apply-call/)\n-  [JavaScript\u2019s apply, call, and bind explained by hosting a cookout \u2014 Kevin Kononenko](https://dev.to/kbk0125/javascripts-apply-call-and-bind-explained-by-hosting-a-cookout-32jo)\n-  [How AND When to use bind, call, and apply in Javascript \u2014 Eigen X](https://www.eigenx.com/blog/https/mediumcom/eigen-x/how-and-when-to-use-bind-call-and-apply-in-javascript-77b6f42898fb)\n-  [Let me explain to you what is `this`. (Javascript) \u2014 Jason Yu](https://dev.to/ycmjason/let-me-explain-to-you-what-is-this-javascript-44ja)\n-  [Understanding the \u201cthis\u201d Keyword in JavaScript \u2014 Pavan](https://medium.com/quick-code/understanding-the-this-keyword-in-javascript-cb76d4c7c5e8)\n-  [How to understand the keyword this and context in JavaScript \u2014 Lukas Gisder-Dub\u00e9](https://medium.freecodecamp.org/how-to-understand-the-keyword-this-and-context-in-javascript-cd624c6b74b8)\n-  [What the heck is this in Javascript? \u2014 Hridayesh Sharma](https://dev.to/_hridaysharma/what-the-heck-is-this-in-javascript-37n1)\n-  [This and Bind In Javascript \u2014 Brian Barbour](https://dev.to/steelvoltage/this-and-bind-in-javascript-2pam)\n-  [3 Techniques for Maintaining Your Sanity Using \"This\" in JavaScript \u2014 Carl](https://dev.to/canderson93/3-techniques-for-maintaining-your-sanity-using-this-in-javascript-3idf)\n-  [Mastering the JavaScript \"this\" Keyword \u2014 Aakash Srivastav](https://dev.to/aakashsr/mastering-the-javascript-this-keyword-4pfa)\n-  [This binding in JavaScript \u2013 4. New binding \u2014 Spyros Argalias](https://dev.to/sargalias/this-binding-in-javascript-4-new-binding-2p1n)\n-  [A quick intro to 'this' in JavaScript \u2014 Natalie Smith](https://dev.to/thatgalnatalie/a-quick-intro-to-this-in-javascript-2mhp)\n-  [A conversation with the 'this' keyword in Javascript \u2014 Karen Efereyan](https://dev.to/developerkaren/a-conversation-with-the-this-keyword-in-javascript-3j6g)\n-  [What are call(), apply() and bind() in JavaScript \u2014 Amitav Mishra](https://jscurious.com/what-are-call-apply-and-bind-in-javascript/)\n-  [Understanding 'this' binding in JavaScript \u2014 Yasemin Cidem](https://yasemincidem.medium.com/understanding-this-binding-in-javascript-86687397c76d)\n-  [Top 7 tricky questions of 'this' keyword](https://dmitripavlutin.com/javascript-this-interview-questions/)\n    \n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [JavaScript call, apply and bind \u2014 techsith](https://www.youtube.com/watch?v=c0mLRpw-9rI)\n- [JavaScript Practical Applications of Call, Apply and Bind functions\u2014 techsith](https://www.youtube.com/watch?v=AYVYxezrMWA)\n- [JavaScript (call, bind, apply) \u2014 curious aatma](https://www.youtube.com/watch?v=Uy0NOXLBraE)\n- [Understanding Functions and 'this' In The World of ES2017 \u2014 Bryan Hughes](https://www.youtube.com/watch?v=AOSYY1_np_4)\n- [bind and this - Object Creation in JavaScript - FunFunFunction](https://www.youtube.com/watch?v=GhbhD1HR5vk)\n- [JS Function Methods call(), apply(), and bind() \u2014 Steve Griffith](https://www.youtube.com/watch?v=uBdH0iB1VDM)\n- [call, apply and bind method in JavaScript \u2014 Akshay Saini](https://www.youtube.com/watch?v=75W8UPQ5l7k)\n- .[Javascript Interview Questions ( Call, Bind and Apply ) - Polyfills, Output Based, Explicit Binding - Roadside Coder] (https://youtu.be/VkmUOktYDAU?si=SdvLZ8FBmephPxjS)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 16. new, Constructor, instanceof and Instances\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [JavaScript For Beginners: the \u2018new\u2019 operator \u2014 Brandon Morelli](https://codeburst.io/javascript-for-beginners-the-new-operator-cee35beb669e)\n-  [Let\u2019s demystify JavaScript\u2019s \u2018new\u2019 keyword \u2014 Cynthia Lee](https://medium.freecodecamp.org/demystifying-javascripts-new-keyword-874df126184c)\n-  [Constructor, operator \"new\" \u2014 JavaScript.Info](https://javascript.info/constructor-new)\n-  [Understanding JavaScript Constructors \u2014 Faraz Kelhini](https://css-tricks.com/understanding-javascript-constructors/)\n-  [Use Constructor Functions \u2014 Openclassrooms](https://openclassrooms.com/en/courses/3523231-learn-to-code-with-javascript/4379006-use-constructor-functions)\n-  [Beyond `typeof` and `instanceof`: simplifying dynamic type checks \u2014 Dr. Axel Rauschmayer](http://2ality.com/2017/08/type-right.html)\n-  [Function and Object, instances of each other \u2014 Kiro Risk](https://javascriptrefined.io/function-and-object-instances-of-each-other-1e1095d5faac)\n-  [JavaScript instanceof operator](https://flexiple.com/javascript/instanceof-javascript)\n  \n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 17. Prototype Inheritance and Prototype Chain\n\n### Reference\n\n-  [Inheritance and the prototype chain \u2014 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [Javascript : Prototype vs Class \u2014 Valentin PARSY](https://medium.com/@parsyval/javascript-prototype-vs-class-a7015d5473b)\n-  [JavaScript engine fundamentals: optimizing prototypes \u2014 Mathias Bynens](https://mathiasbynens.be/notes/prototypes)\n-  [JavaScript Prototype \u2014 NC Patro](https://codeburst.io/javascript-prototype-cb29d82b8809)\n-  [Prototypes in JavaScript \u2014 Rupesh Mishra](https://hackernoon.com/prototypes-in-javascript-5bba2990e04b)\n-  [Prototype in JavaScript: it\u2019s quirky, but here\u2019s how it works \u2014 Pranav Jindal](https://medium.freecodecamp.org/prototype-in-js-busted-5547ec68872)\n-  [Understanding JavaScript: Prototype and Inheritance \u2014 Alexander Kondov](https://hackernoon.com/understanding-javascript-prototype-and-inheritance-d55a9a23bde2)\n-  [Understanding Classes (ES5) and Prototypal Inheritance in JavaScript \u2014 Hridayesh Sharma](https://dev.to/_hridaysharma/understanding-classes-es5-and-prototypal-inheritance-in-javascript-n8d)\n-  [prototype, **proto** and Prototypal inheritance in JavaScript \u2014 Varun Dey](https://dev.to/varundey/prototype-proto-and-prototypal-inheritance-in-javascript-2inl)\n-  [Prototypal Inheritance \u2014 JavaScript.Info](https://javascript.info/prototype-inheritance)\n-  [How To Work with Prototypes and Inheritance in JavaScript \u2014 Tania Rascia](https://www.digitalocean.com/community/tutorials/understanding-prototypes-and-inheritance-in-javascript)\n-  [Master JavaScript Prototypes & Inheritance \u2014 Arnav Aggarwal](https://codeburst.io/master-javascript-prototypes-inheritance-d0a9a5a75c4e)\n-  [JavaScript\u2019s Prototypal Inheritance Explained Using CSS \u2014 Nash Vail](https://medium.freecodecamp.org/understanding-prototypal-inheritance-in-javascript-with-css-93b2fcda75e4)\n-  [Prototypal Inheritance in JavaScript \u2014 Jannis Redmann](https://gist.github.com/derhuerst/a585c4916b1c361cc6f0)\n-  [Demystifying ES6 Classes And Prototypal Inheritance \u2015 Neo Ighodaro](https://scotch.io/tutorials/demystifying-es6-classes-and-prototypal-inheritance)\n-  [Intro To Prototypal Inheritance \u2014 Dharani Jayakanthan](https://dev.to/danny/intro-to-prototypal-inheritance---js-9di)\n-  [Let\u2019s Build Prototypal Inheritance in JS \u2014 var-che](https://dev.to/varche/let-s-build-prototypal-inheritance-in-js-56mm)\n-  [Objects, Prototypes and Classes in JavaScript \u2014 Atta](https://dev.to/attacomsian/objects-prototypes-and-classes-in-javascript-3i9b)\n-  [The magical world of JavaScript prototypes \u2014 Bel\u00e9n](https://dev.to/ladybenko/the-magical-world-of-javascript-prototypes-1mhg)\n-  [Understanding Prototypal Inheritance In JavaScript \u2014 Lawrence Eagles](https://dev.to/lawrence_eagles/understanding-prototypal-inheritance-in-javascript-4f31#chp-4)\n-  [Objects and Prototypes in JavaScript \u2014 Irena Popova](https://dev.to/irenejpopova/objects-and-prototypes-in-javascript-2eie)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [Javascript Prototype Inheritance \u2014 Avelx](https://www.youtube.com/watch?v=sOrtAjyk4lQ)\n- [JavaScript Prototype Inheritance Explained pt. I \u2014 techsith](https://www.youtube.com/watch?v=7oNWNlMrkpc)\n- [JavaScript Prototype Inheritance Explained pt. II \u2014 techsith](https://www.youtube.com/watch?v=uIlj6_z_wL8)\n- [JavaScript Prototype Inheritance Explained \u2014 Kyle Robinson](https://www.youtube.com/watch?v=qMO-LTOrJaE)\n- [Advanced Javascript - Prototypal Inheritance In 1 Minute](https://www.youtube.com/watch?v=G6l5CHl67HQ)\n- [An Overview Of Classical Javascript Classes and Prototypal Inheritance \u2014 Pentacode](https://www.youtube.com/watch?v=phwzuiJJPpQ)\n- [Object Oriented JavaScript - Prototype \u2014 The Net Ninja](https://www.youtube.com/watch?v=4jb4AYEyhRc)\n- [Prototype in JavaScript \u2014 kudvenkat](https://www.youtube.com/watch?v=2rkEbcptR64)\n- [JavaScript Using Prototypes \u2014 O'Reilly](https://www.youtube.com/watch?v=oCwCcNvaXAQ)\n- [A Beginner's Guide to Javascript's Prototype \u2014 Tyler Mcginnis](https://www.youtube.com/watch?v=XskMWBXNbp0)\n- [Prototypes in Javascript - p5.js Tutorial \u2014 The Coding Train](https://www.youtube.com/watch?v=hS_WqkyUah8)\n\n### Books\n\n- [You Don't Know JS, 1st Edition: this & Object Prototypes \u2014 Kyle Simpson](https://github.com/getify/You-Dont-Know-JS/tree/1st-ed)\n- [The Principles of Object-Oriented JavaScript - Nicholas C. Zakas](https://www.google.com.pk/books/edition/The_Principles_of_Object_Oriented_JavaSc/rorlAwAAQBAJ?hl=en&gbpv=1&pg=PP1&printsec=frontcover)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 18. Object.create and Object.assign\n\n### Reference\n\n-  [Object.create() \u2014 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create)\n-  [Object.assign() \u2014 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [Object.create in JavaScript \u2014 Rupesh Mishra](https://medium.com/@happymishra66/object-create-in-javascript-fa8674df6ed2)\n-  [Object.create(): the New Way to Create Objects in JavaScript \u2014 Rob Gravelle](https://www.htmlgoodies.com/beyond/javascript/object.create-the-new-way-to-create-objects-in-javascript.html)\n-  [Basic Inheritance with Object.create \u2014 Joshua Clanton](http://adripofjavascript.com/blog/drips/basic-inheritance-with-object-create.html)\n-  [Object.create() In JavaScript \u2014 GeeksforGeeks](https://www.geeksforgeeks.org/object-create-javascript/)\n-  [Understanding the difference between Object.create() and the new operator \u2014 Jonathan Voxland](https://medium.com/@jonathanvox01/understanding-the-difference-between-object-create-and-the-new-operator-b2a2f4749358)\n-  [JavaScript Object Creation: Patterns and Best Practices \u2014 Jeff Mott](https://www.sitepoint.com/javascript-object-creation-patterns-best-practises/)\n-  [Javascript hasOwnProperty: A Powerful Property Checking tool](https://robiul.dev/javascript-hasownproperty-method)\n-  [Dealing With Objects in JavaScript With Object.assign, Object.keys and hasOwnProperty](https://www.digitalocean.com/community/tutorials/js-dealing-with-objects)\n-  [Copying Objects in JavaScript \u2015 Orinami Olatunji](https://scotch.io/bar-talk/copying-objects-in-javascript)\n-  [JavaScript: Object.assign() \u2014 Thiago S. Adriano](https://codeburst.io/javascript-object-assign-bc9696dcbb6e)\n-  [How to deep clone a JavaScript Object \u2014 Flavio Copes](https://flaviocopes.com/how-to-clone-javascript-object/)\n-  [Object.create(): When and Why to Use \u2014 VZing](https://dev.to/vzing/object-create-when-and-why-to-use-20m9)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [Object.assign() explained \u2014 Aaron Writes Code](https://www.youtube.com/watch?v=aw7NfYhR5rc)\n- [Object.assign() Method \u2014 techsith](https://www.youtube.com/watch?v=9Ky4X6inpi4)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 19. map, reduce, filter\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [JavaScript Functional Programming \u2014 map, filter and reduce \u2014 Bojan Gvozderac](https://medium.com/jsguru/javascript-functional-programming-map-filter-and-reduce-846ff9ba492d)\n-  [Learn map, filter and reduce in Javascript \u2014 Jo\u00e3o Miguel Cunha](https://medium.com/@joomiguelcunha/learn-map-filter-and-reduce-in-javascript-ea59009593c4)\n-  [JavaScript\u2019s Map, Reduce, and Filter \u2014 Dan Martensen](https://danmartensen.svbtle.com/javascripts-map-reduce-and-filter)\n-  [How to Use Map, Filter, & Reduce in JavaScript \u2014 Peleke Sengstacke](https://code.tutsplus.com/tutorials/how-to-use-map-filter-reduce-in-javascript--cms-26209)\n-  [JavaScript \u2014 Learn to Chain Map, Filter, and Reduce \u2014 Brandon Morelli](https://codeburst.io/javascript-learn-to-chain-map-filter-and-reduce-acd2d0562cd4)\n-  [Javascript data structure with map, reduce, filter and ES6 \u2014 Deepak Gupta](https://codeburst.io/write-beautiful-javascript-with-%CE%BB-fp-es6-350cd64ab5bf)\n-  [Understanding map, filter and reduce in Javascript \u2014 Luuk Gruijs](https://hackernoon.com/understanding-map-filter-and-reduce-in-javascript-5df1c7eee464)\n-  [Functional Programming in JS: map, filter, reduce (Pt. 5) \u2014 Omer Goldberg](https://hackernoon.com/functional-programming-in-js-map-filter-reduce-pt-5-308a205fdd5f)\n-  [JavaScript: Map, Filter, Reduce \u2014 William S. Vincent](https://wsvincent.com/functional-javascript-map-filter-reduce/)\n-  [Arrow Functions: Fat and Concise Syntax in JavaScript \u2014 Kyle Pennell](https://www.sitepoint.com/es6-arrow-functions-new-fat-concise-syntax-javascript/)\n-  [JavaScript: Arrow Functions for Beginners \u2014 Brandon Morelli](https://codeburst.io/javascript-arrow-functions-for-beginners-926947fc0cdc)\n-  [When (and why) you should use ES6 arrow functions \u2014 and when you shouldn\u2019t \u2014 Cynthia Lee](https://medium.freecodecamp.org/when-and-why-you-should-use-es6-arrow-functions-and-when-you-shouldnt-3d851d7f0b26)\n-  [JavaScript \u2014 Learn & Understand Arrow Functions \u2014 Brandon Morelli](https://codeburst.io/javascript-learn-understand-arrow-functions-fe2083533946)\n-  [(JavaScript )=> Arrow functions \u2014 sigu](https://medium.com/podiihq/javascript-arrow-functions-27d4c3334b83)\n-  [Javascript.reduce() \u2014 Paul Anderson](https://medium.com/@panderson.dev/javascript-reduce-79aab078da23)\n-  [Why you should replace forEach with map and filter in JavaScript \u2014 Roope Hakulinen](https://gofore.com/en/why-you-should-replace-foreach/)\n-  [Simplify your JavaScript \u2013 Use .map(), .reduce(), and .filter() \u2014 Etienne Talbot](https://medium.com/poka-techblog/simplify-your-javascript-use-map-reduce-and-filter-bd02c593cc2d)\n-  [JavaScript\u2019s Reduce Method Explained By Going On a Diet \u2014 Kevin Kononenko](https://blog.codeanalogies.com/2018/07/24/javascripts-reduce-method-explained-by-going-on-a-diet/)\n-  [Difference between map, filter and reduce in JavaScript \u2014 Amirata Khodaparast](https://medium.com/@amiratak88/difference-between-map-filter-and-reduce-in-javascript-822ff79d5160)\n-  [Map\u21c4Filter\u21c4Reduce\u21bb \u2014 ashay mandwarya](https://hackernoon.com/map-filter-reduce-ebbed4be4201)\n-  [Finding Your Way With .map() \u2014 Brandon Wozniewicz](https://medium.freecodecamp.org/finding-your-way-with-map-aecb8ca038f6)\n-  [How to write your own map, filter and reduce functions in JavaScript \u2014 Hemand Nair](https://medium.freecodecamp.org/how-to-write-your-own-map-filter-and-reduce-functions-in-javascript-ab1e35679d26)\n-  [How to Manipulate Arrays in JavaScript \u2014 Bolaji Ayodeji](https://www.freecodecamp.org/news/manipulating-arrays-in-javascript/)\n-  [How to simplify your codebase with map(), reduce(), and filter() in JavaScript \u2014 Alex Permyakov](https://www.freecodecamp.org/news/15-useful-javascript-examples-of-map-reduce-and-filter-74cbbb5e0a1f)\n-  [.map(), .filter(), and .reduce() \u2014 Andy Pickle](https://dev.to/pickleat/map-filter-and-reduce-2efb)\n-  [Map/Filter/Reduce Crash Course \u2014 Chris Achard](https://dev.to/chrisachard/map-filter-reduce-crash-course-5gan)\n-  [Map, Filter and Reduce \u2013 Animated \u2014 JavaScript Teacher](https://medium.com/@js_tut/map-filter-and-reduce-animated-7fe391a35a47)\n-  [Map, Filter, Reduce and others Arrays Iterators You Must Know to Become an Algorithms Wizard \u2014 Mauro Bono](https://dev.to/uptheirons78/map-filter-reduce-and-others-arrays-iterators-you-must-know-to-become-an-algorithms-wizard-4209)\n-  [How to Use JavaScript\u2019s .map, .filter, and .reduce \u2014 Avery Duffin](https://betterprogramming.pub/how-to-javascripts-map-vs-filter-vs-reduce-80d87a5a0a24)\n-  [Javascript performance test - for vs for each vs (map, reduce, filter, find) \u2014 Deepak Gupta](https://towardsdatascience.com/javascript-performance-test-for-vs-for-each-vs-map-reduce-filter-find-32c1113f19d7)\n-  [Using .map(), .filter() and .reduce() properly \u2014 Sasanka Kudagoda](https://medium.com/javascript-in-plain-english/using-map-filter-and-reduce-properly-50e07f80c8b2)\n-  [Mastering the JavaScript Reduce method \u2702\ufe0f \u2014 sanderdebr](https://dev.to/sanderdebr/mastering-the-javascript-reduce-method-2foj)\n-  [JavaScript Map \u2013 How to Use the JS .map() Function (Array Method) \u2014 FreeCodeCamp](https://www.freecodecamp.org/news/javascript-map-how-to-use-the-js-map-function-array-method/)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [Map, Filter and Reduce \u2014 Lydia Hallie](https://www.youtube.com/watch?v=UXiYii0Y7Nw)\n- [Map, Filter and Reduce - Akshaay Saini](https://youtu.be/zdp0zrpKzIE?si=6QusFzD6tmwn-el4)\n- [Functional JavaScript: Map, forEach, Reduce, Filter \u2014 Theodore Anderson](https://www.youtube.com/watch?v=vytzLlY_wmU)\n- [JavaScript Array superpowers: Map, Filter, Reduce (part I) \u2014 Michael Rosata](https://www.youtube.com/watch?v=qTeeVd8hOFY)\n- [JavaScript Array superpowers: Map, Filter, Reduce (part 2) \u2014 Michael Rosata](https://www.youtube.com/watch?v=gIm9xLYudL0)\n- [JavaScript Higher Order Functions - Filter, Map, Sort & Reduce \u2014 Epicop](https://www.youtube.com/watch?v=zYBeEPxNSbw)\n- [[Array Methods 2/3] .filter + .map + .reduce \u2014 CodeWithNick](https://www.youtube.com/watch?v=4qWlqD0yYTU)\n- [Arrow functions in JavaScript - What, Why and How \u2014 Fun Fun Function](https://www.youtube.com/watch?v=6sQDTgOqh-I)\n- [Learning Functional Programming with JavaScript \u2014 Anjana Vakil - JSUnconf](https://www.youtube.com/watch?v=e-5obm1G_FY&t=1521s)\n- [Map - Parte 2 JavaScript - Fun Fun Function](https://www.youtube.com/watch?v=bCqtb-Z5YGQ&t=17s)\n- [Reduce basics - Part 3 of FP in JavaScript - Fun Fun Function](https://www.youtube.com/watch?v=Wl98eZpkp-c)\n- [Reduce Advanced - Part 4 of FP in JavaScript - Fun Fun Function](https://www.youtube.com/watch?v=1DMolJ2FrNY&t=621s)\n- [reduce Array Method | JavaScript Tutorial - Florin Pop](https://www.youtube.com/watch?v=IXp06KekEjM)\n- [map Array Method | JavaScript Tutorial - Florin Pop](https://www.youtube.com/watch?v=P4RAFdZDn3M)\n- [Different array methods in 1 minute | Midudev (Spanish)](https://youtu.be/Ah7-PPjQ5Ls)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 20. Pure Functions, Side Effects, State Mutation and Event Propagation\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [Javascript and Functional Programming \u2014 Pure Functions \u2014 Omer Goldberg](https://hackernoon.com/javascript-and-functional-programming-pt-3-pure-functions-d572bb52e21c)\n-  [Master the JavaScript Interview: What is a Pure Function? \u2014 Eric Elliott](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976)\n-  [JavaScript: What Are Pure Functions And Why Use Them? \u2014 James Jeffery](https://medium.com/@jamesjefferyuk/javascript-what-are-pure-functions-4d4d5392d49c)\n-  [Pure functions in JavaScript \u2014 @nicoespeon](http://www.nicoespeon.com/en/2015/01/pure-functions-javascript/)\n-  [Functional Programming: Pure Functions \u2014 Arne Brasseur](https://www.sitepoint.com/functional-programming-pure-functions/)\n-  [Making your JavaScript Pure \u2014 Jack Franklin](https://alistapart.com/article/making-your-javascript-pure)\n-  [Arrays, Objects and Mutations \u2014 Federico Kn\u00fcssel](https://medium.com/@fknussel/arrays-objects-and-mutations-6b23348b54aa)\n-  [The State of Immutability \u2014 Maciej Sikora](https://medium.com/dailyjs/the-state-of-immutability-169d2cd11310)\n-  [Hablemos de Inmutabilidad \u2014 Kike Sanchez](https://medium.com/zurvin/hablemos-de-inmutabilidad-3dc65d290783)\n-  [How to deal with dirty side effects in your pure functional JavaScript \u2014 James Sinclair](https://jrsinclair.com/articles/2018/how-to-deal-with-dirty-side-effects-in-your-pure-functional-javascript/)\n-  [Preventing Side Effects in JavaScript \u2014 David Walsh](https://davidwalsh.name/preventing-sideeffects-javascript)\n-  [JavaScript: Pure Functions \u2014 William S. Vincent](https://wsvincent.com/javascript-pure-functions/)\n-  [Functional programming paradigms in modern JavaScript: Pure functions \u2014 Alexander Kondov](https://hackernoon.com/functional-programming-paradigms-in-modern-javascript-pure-functions-797d9abbee1)\n-  [Understanding Javascript Mutation and Pure Functions \u2014 Chidume Nnamdi](https://blog.bitsrc.io/understanding-javascript-mutation-and-pure-functions-7231cc2180d3)\n-  [Functional-ish JavaScript \u2014 Daniel Brain](https://medium.com/@bluepnume/functional-ish-javascript-205c05d0ed08)\n-  [Event Propagation \u2014 MDN](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events)\n-  [Event Propagation \u2014 Bubbling and capturing](https://javascript.info/bubbling-and-capturing)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [Pure Functions \u2014 Hexlet](https://www.youtube.com/watch?v=dZ41D6LDSBg)\n- [Pure Functions - Functional Programming in JavaScript \u2014 Paul McBride](https://www.youtube.com/watch?v=Jh_Uzqzz_wM)\n- [JavaScript Pure Functions \u2014 Seth Alexander](https://www.youtube.com/watch?v=frT3H-eBmPc)\n- [JavaScript Pure vs Impure Functions Explained \u2014 Theodore Anderson](https://www.youtube.com/watch?v=AHbRVJzpB54)\n- [Pure Functions - Programa\u00e7\u00e3o Funcional: Parte 1 - Fun Fun Function](https://www.youtube.com/watch?v=BMUiFMZr7vk)\n- [Event Propagation - JavaScript Event Bubbling and Propagation - Steve Griffith](https://www.youtube.com/watch?v=JYc7gr9Ehl0)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 21. Closures\n\n### Reference\n\n-  [Closures \u2014 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures)\n-  [Closure \u2014 JavaScript.Info](https://javascript.info/closure)\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [I never understood JavaScript closures \u2014 Olivier De Meulder](https://medium.com/dailyjs/i-never-understood-javascript-closures-9663703368e8)\n-  [Understand JavaScript Closures With Ease \u2014 Richard Bovell](http://javascriptissexy.com/understand-javascript-closures-with-ease/)\n-  [Understanding JavaScript Closures \u2014 Codesmith](https://codeburst.io/understanding-javascript-closures-da6aab330302)\n-  [Understand Closures in JavaScript \u2014 Brandon Morelli](https://codeburst.io/understand-closures-in-javascript-d07852fa51e7)\n-  [A simple guide to help you understand closures in JavaScript \u2014 Prashant Ram](https://medium.freecodecamp.org/javascript-closures-simplified-d0d23fa06ba4)\n-  [Understanding JavaScript Closures: A Practical Approach \u2014 Paul Upendo](https://scotch.io/tutorials/understanding-javascript-closures-a-practical-approach)\n-  [Understanding JavaScript: Closures \u2014 Alexander Kondov](https://hackernoon.com/understanding-javascript-closures-4188edf5ea1b)\n-  [How to use JavaScript closures with confidence \u2014 L\u00e9na Faure](https://hackernoon.com/how-to-use-javascript-closures-with-confidence-85cd1f841a6b)\n-  [JavaScript closures by example \u2014 tyler](https://howchoo.com/g/mge2mji2mtq/javascript-closures-by-example)\n-  [JavaScript\u200a\u2014\u200aClosures and Scope \u2014 Alex Aitken](https://codeburst.io/javascript-closures-and-scope-3784c75b9290)\n-  [Discover the power of closures in JavaScript\u200a\u2014\u200aCristi Salcescu](https://medium.freecodecamp.org/discover-the-power-of-closures-in-javascript-5c472a7765d7)\n-  [Getting Closure\u200a\u2014\u200aRealLifeJS](http://reallifejs.com/the-meat/getting-closure/)\n-  [Closure, Currying and IIFE in JavaScript\u200a\u2014\u200aRitik](https://dev.to/ritik_dev_js/what-the-hack-is-closure-currying-and-iife-in-javascript-32m9)\n-  [Understanding Closures in JavaScript\u200a\u2014\u200aSukhjinder Arora](https://blog.bitsrc.io/a-beginners-guide-to-closures-in-javascript-97d372284dda)\n-  [A basic guide to Closures in JavaScript\u200a\u2014\u200aParathan Thiyagalingam](https://medium.freecodecamp.org/a-basic-guide-to-closures-in-javascript-9fc8b7e3463e)\n-  [Closures: Using Memoization\u200a\u2014\u200aBrian Barbour](https://dev.to/steelvoltage/closures-using-memoization-3597)\n-  [A Brief Introduction to Closures and Lexical Scoping in JavaScript\u200a\u2014\u200aAshutosh K Singh](https://betterprogramming.pub/a-brief-introduction-to-closures-and-lexical-scoping-in-javascript-8a5866496232)\n-  [Demystify Closures\u200a\u2014\u200astereobooster](https://dev.to/stereobooster/demystify-closures-5g42)\n-  [Scopes and Closures - JavaScript Concepts\u200a\u2014\u200aAgney Menon](https://dev.to/boywithsilverwings/scopes-and-closures-javascript-concepts-4dfj)\n-  [Understanding Closures in JavaScript\u200a\u2014\u200aMatt Popovich](https://dev.to/mattpopovich/understanding-closures-in-javascript-3k0d)\n-  [whatthefuck.is \u00b7 A Closure - Dan Abramov](https://whatthefuck.is/closure)\n-  [Closures in JavaScript can... - Brandon LeBoeuf](https://dev.to/brandonleboeuf/closure-in-javascript-49n7)\n-  [Do you know Closures - Mohamed Khaled](https://dev.to/this_mkhy/do-you-know-es6-part-3-advanced-3fcl#Closures-2)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [JavaScript The Hard Parts: Closure, Scope & Execution Context - Codesmith](https://www.youtube.com/watch?v=XTAzsODSCsM)\n- [Namaste Javascript by Akshay Saini](https://youtu.be/qikxEIxsXco?si=fGFgUHuaOW49Wg9p)\n- [Javascript Closure \u2014 techsith](https://www.youtube.com/watch?v=71AtaJpJHw0)\n- [Closures \u2014 Fun Fun Function](https://www.youtube.com/watch?v=CQqwU2Ixu-U)\n- [Closures in JavaScript \u2014 techsith](https://www.youtube.com/watch?v=-xqJo5VRP4A)\n- [JavaScript Closures 101: What is a closure? \u2014 JavaScript Tutorials](https://www.youtube.com/watch?v=yiEeiMN2Khs)\n- [Closures \u2014 freeCodeCamp](https://www.youtube.com/watch?v=1JsJx1x35c0)\n- [JavaScript Closures \u2014 CodeWorkr](https://www.youtube.com/watch?v=-rLrGAXK8WE)\n- [Closures in JS - Akshay Saini](https://www.youtube.com/watch?v=qikxEIxsXco)\n- [CLOSURES en JavaScript: Qu\u00e9 son y c\u00f3mo funcionan - Carlos Azaustre](https://youtu.be/xa8lhVwQBw4)\n- [Learn Closures In 7 Minutes - Web Dev Simplified](https://www.youtube.com/watch?v=3a0I8ICR1Vg)\n\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 22. High Order Functions\n\n### Books\n\n-  [Eloquent JavaScript, 3rd Edition: Ch. 5 - Higher-order Functions](https://eloquentjavascript.net/05_higher_order.html)\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [Higher-Order Functions in JavaScript \u2014 M. David Green](https://www.sitepoint.com/higher-order-functions-javascript/)\n-  [Higher Order Functions: Using Filter, Map and Reduce for More Maintainable Code \u2014 Guido Schmitz](https://medium.freecodecamp.org/higher-order-functions-in-javascript-d9101f9cf528)\n-  [First-class and Higher Order Functions: Effective Functional JavaScript \u2014 Hugo Di Francesco](https://hackernoon.com/effective-functional-javascript-first-class-and-higher-order-functions-713fde8df50a)\n-  [Higher Order Functions in JavaScript \u2014 John Hannah](https://www.lullabot.com/articles/higher-order-functions-in-javascript)\n-  [Just a reminder on how to use high order functions \u2014 Pedro Filho](https://github.com/pedroapfilho/high-order-functions)\n-  [Understanding Higher-Order Functions in JavaScript \u2014 Sukhjinder Arora](https://blog.bitsrc.io/understanding-higher-order-functions-in-javascript-75461803bad)\n-  [Higher Order Functions - A pragmatic approach \u2014 emmanuel ikwuoma](https://dev.to/nuel_ikwuoma/higher-order-functions-a-pragmatic-approach-51fb)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [JavaScript Higher Order Functions & Arrays \u2014 Traversy Media](https://www.youtube.com/watch?v=rRgD1yVwIvE)\n- [Higher Order Functions \u2014 Fun Fun Function](https://www.youtube.com/watch?v=BMUiFMZr7vk)\n- [Higher Order Functions in Javascript \u2014 Raja Yogan](https://www.youtube.com/watch?v=dTlpYnmBW9I)\n- [Higher Order Iterators in JavaScript \u2014 Fun Fun Function](https://www.youtube.com/watch?v=GYRMNp1SKXA)\n- [Higher Order Functions in JavaScript \u2014 The Coding Train](https://www.youtube.com/watch?v=H4awPsyugS0)\n- [Part 1: An Introduction to Callbacks and Higher Order Functions - Codesmith](https://www.youtube.com/watch?v=7E8ctomPQJw)\n- [Part 2: Understanding Why We Need Higher Order Functions - Codesmith](https://www.youtube.com/watch?v=28MXziDZkE4)\n- [Higher-Order Functions ft. Functional Programming - Akshay Saini](https://www.youtube.com/watch?v=HkWxvB1RJq0)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 23. Recursion\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [Recursion in JavaScript \u2014 Kevin Ennis](https://medium.freecodecamp.org/recursion-in-javascript-1608032c7a1f)\n-  [Understanding Recursion in JavaScript \u2014 Zak Frisch](https://medium.com/@zfrisch/understanding-recursion-in-javascript-992e96449e03)\n-  [Learn and Understand Recursion in JavaScript \u2014 Brandon Morelli](https://codeburst.io/learn-and-understand-recursion-in-javascript-b588218e87ea)\n-  [Recursion in Functional JavaScript \u2014 M. David Green](https://www.sitepoint.com/recursion-functional-javascript/)\n-  [Programming with JS: Recursion \u2014 Alexander Kondov](https://hackernoon.com/programming-with-js-recursion-31371e2bf808)\n-  [Anonymous Recursion in JavaScript \u2014 simo](https://dev.to/simov/anonymous-recursion-in-javascript)\n-  [Recursion, iteration and tail calls in JS \u2014 loverajoel](http://www.jstips.co/en/javascript/recursion-iteration-and-tail-calls-in-js/)\n-  [What is Recursion? A Recursive Function Explained with JavaScript Code Examples \u2014 Nathan Sebhastian](https://www.freecodecamp.org/news/what-is-recursion-in-javascript/)\n-  [Intro to Recursion \u2014 Brad Newman](https://medium.com/@newmanbradm/intro-to-recursion-984a8bd50f4b)\n-  [Accio Recursion!: Your New Favorite JavaScript Spell \u2014 Leanne Cabey](https://medium.datadriveninvestor.com/accio-recursion-your-new-favorite-javascript-spell-7e10d3125fb3)\n-  [Recursion Explained (with Examples) \u2014 Christina](https://dev.to/christinamcmahon/recursion-explained-with-examples-4k1m)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [Recursion In JavaScript \u2014 techsith](https://www.youtube.com/watch?v=VtG0WAUvq2w)\n- [Recursion \u2014 Fun Fun Function](https://www.youtube.com/watch?v=k7-N8R0-KY4)\n- [Recursion and Recursive Functions \u2014 Hexlet](https://www.youtube.com/watch?v=vLhHyGTkjCs)\n- [Recursion: Recursion() \u2014 JS Monthly \u2014 Lucas da Costa](https://www.youtube.com/watch?v=kGXVsd8pBLw)\n- [Recursive Function in JavaScript \u2014 kudvenkat](https://www.youtube.com/watch?v=uyjsR9eNTIw)\n- [What on Earth is Recursion? \u2014 Computerphile](https://www.youtube.com/watch?v=Mv9NEXX1VHc)\n- [Javascript Tutorial 34: Introduction To Recursion \u2014 codedamn](https://www.youtube.com/watch?v=9NO5dXSlbv8)\n- [Recursion, Iteration, and JavaScript: A Love Story | JSHeroes 2018 \u2014 Anjana Vakil](https://www.youtube.com/watch?v=FmiQr4nfoPQ)\n- [Recursion crash course - Colt Steele](https://www.youtube.com/watch?v=lMBVwYrmFZQ&ab_channel=ColtSteele)\n- [What Is Recursion - In Depth - Web Dev Simplified](https://www.youtube.com/watch?v=6oDQaB2one8)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 24. Collections and Generators\n\n### Reference\n\n-  [Generator \u2014 MDN web docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator)\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [ES6 In Depth: Collections \u2014 Jason Orendorff](https://hacks.mozilla.org/2015/06/es6-in-depth-collections/)\n-  [ES6 Collections: Using Map, Set, WeakMap, WeakSet \u2014 Kyle Pennell](https://www.sitepoint.com/es6-collections-map-set-weakmap-weakset/)\n-  [ES6 WeakMaps, Sets, and WeakSets in Depth \u2014 Nicol\u00e1s Bevacqua](https://ponyfoo.com/articles/es6-weakmaps-sets-and-weaksets-in-depth)\n-  [Map, Set, WeakMap and WeakSet \u2014 JavaScript.Info](https://javascript.info/map-set-weakmap-weakset)\n-  [Maps in ES6 - A Quick Guide \u2014 Ben Mildren](https://dev.to/mildrenben/maps-in-es6---a-quick-guide-35pk)\n-  [ES6 \u2014 Set vs Array \u2014 What and when? \u2014 Maya Shavin](https://medium.com/front-end-hacking/es6-set-vs-array-what-and-when-efc055655e1a)\n-  [ES6 \u2014 Map vs Object \u2014 What and when? \u2014 Maya Shavin](https://medium.com/front-end-hacking/es6-map-vs-object-what-and-when-b80621932373)\n-  [Array vs Set vs Map vs Object \u2014 Real-time use cases in Javascript (ES6/ES7) \u2014 Rajesh Babu](https://codeburst.io/array-vs-set-vs-map-vs-object-real-time-use-cases-in-javascript-es6-47ee3295329b)\n-  [How to create an array of unique values in JavaScript using Sets \u2014 Claire Parker-Jones](https://dev.to/claireparker/how-to-create-an-array-of-unique-values-in-javascript-using-sets-5dg6)\n-  [What You Should Know About ES6 Maps \u2014 Just Chris](https://hackernoon.com/what-you-should-know-about-es6-maps-dc66af6b9a1e)\n-  [ES6 Maps in Depth \u2014 Nicol\u00e1s Bevacqua](https://ponyfoo.com/articles/es6-maps-in-depth)\n-  [What are JavaScript Generators and how to use them \u2014 Vladislav Stepanov](https://codeburst.io/what-are-javascript-generators-and-how-to-use-them-c6f2713fd12e)\n-  [Understanding JavaScript Generators With Examples \u2014 Arfat Salman](https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5)\n-  [The Basics of ES6 Generators \u2014 Kyle Simpson](https://davidwalsh.name/es6-generators)\n-  [An Introduction to JavaScript Generators \u2014 Alice Kallaugher](https://dev.to/kallaugher/an-introduction-to-javascript-generators-1224)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [JavaScript ES6 / ES2015 Set, Map, WeakSet and WeakMap \u2014 Traversy Media](https://www.youtube.com/watch?v=ycohYSx5h9w)\n- [JavaScript ES6 / ES2015 - \\[11\\] Generators - Traversy Media](https://www.youtube.com/watch?v=dcP039DYzmE)\n- [The Differences between ES6 Maps and Sets \u2014 Steve Griffith](https://www.youtube.com/watch?v=m4abICrldQI)\n- [Javascript Generators - THEY CHANGE EVERYTHING - ES6 Generators Harmony Generators \u2014 LearnCode.academy](https://www.youtube.com/watch?v=QO07THdLWQo)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 25. Promises\n\n### Reference\n\n-  [Promise \u2014 MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [JavaScript Promises for Dummies \u2015 Jecelyn Yeen](https://scotch.io/tutorials/javascript-promises-for-dummies)\n-  [Understanding promises in JavaScript \u2014 Gokul N K](https://hackernoon.com/understanding-promises-in-javascript-13d99df067c1)\n-  [Master the JavaScript Interview: What is a Promise? \u2014 Eric Elliott](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261)\n-  [An Overview of JavaScript Promises \u2014 Sandeep Panda](https://www.sitepoint.com/overview-javascript-promises/)\n-  [How to use Promises in JavaScript \u2014 Prashant Ram](https://medium.freecodecamp.org/promises-in-javascript-explained-277b98850de)\n-  [Implementing Promises In JavaScript \u2014 Maciej Cieslar](https://medium.freecodecamp.org/how-to-implement-promises-in-javascript-1ce2680a7f51)\n-  [JavaScript: Promises explained with simple real life analogies \u2014 Shruti Kapoor](https://codeburst.io/javascript-promises-explained-with-simple-real-life-analogies-dd6908092138)\n-  [Promises for Asynchronous Programming \u2014 Exploring JS](http://exploringjs.com/es6/ch_promises.html)\n-  [JavaScript Promises Explained By Gambling At A Casino \u2014 Kevin Kononenko](https://blog.codeanalogies.com/2018/08/26/javascript-promises-explained-by-gambling-at-a-casino/)\n-  [ES6 Promises: Patterns and Anti-Patterns \u2014 Bobby Brennan](https://medium.com/datafire-io/es6-promises-patterns-and-anti-patterns-bbb21a5d0918)\n-  [A Simple Guide to ES6 Promises \u2014 Brandon Morelli](https://codeburst.io/a-simple-guide-to-es6-promises-d71bacd2e13a)\n-  [The ES6 Promises \u2014 Manoj Singh Negi](https://codeburst.io/the-es6-promises-87a979ab27e4)\n-  [ES6 Promises in Depth \u2014 Nicol\u00e1s Bevacqua](https://ponyfoo.com/articles/es6-promises-in-depth)\n-  [Playing with Javascript Promises: A Comprehensive Approach \u2014 Rajesh Babu](https://codeburst.io/playing-with-javascript-promises-a-comprehensive-approach-25ab752c78c3)\n-  [How to Write a JavaScript Promise \u2014 Brandon Wozniewicz](https://medium.freecodecamp.org/how-to-write-a-javascript-promise-4ed8d44292b8)\n-  [A Coding Writer\u2019s Guide: An Introduction To ES6 Promises \u2014 Andrew Ly](https://medium.com/@andrewly07/a-coding-writers-guide-an-introduction-to-es6-promises-9ff9f9e88f6c)\n-  [Understanding Promises in JavaScript \u2014 Chris Noring](https://dev.to/itnext/reverse-engineering-understand-promises-1jfc)\n-  [Converting callbacks to promises \u2014 Zell Liew](https://dev.to/zellwk/converting-callbacks-to-promises-nhn)\n-  [JavaScript Promises: Zero To Hero Plus Cheat Sheet \u2014 Joshua Saunders](https://medium.com/dailyjs/javascript-promises-zero-to-hero-plus-cheat-sheet-64d75051cffa)\n-  [Promises - JavaScript concepts \u2014 Agney Menon](https://dev.to/boywithsilverwings/promises-javascript-concepts-293c)\n-  [Javascript `Promise` 101 \u2014 Igor Irianto](https://dev.to/iggredible/javascript-promise-101-3idl)\n-  [Simplify JavaScript Promises \u2014 Sunny Singh](https://dev.to/sunnysingh/simplify-javascript-promises-4djb)\n-  [The Lowdown on Promises \u2014 Aphinya Dechalert](https://medium.matcha.fyi/the-low-down-on-promises-af4a96bbb95f)\n-  [JavaScript Visualized: Promises & Async/Await \u2014 Lydia Hallie](https://dev.to/lydiahallie/javascript-visualized-promises-async-await-5gke)\n-  [Promises in JavaScript \u2014 Peter Klingelhofer](https://dev.to/peterklingelhofer/promises-in-javascript-3h5k)\n-  [Best Practices for ES6 Promises \u2014 Basti Ortiz](https://dev.to/somedood/best-practices-for-es6-promises-36da)\n-  [Lo que debemos saber de EScript 2020 \u2014 Kike Sanchez](https://medium.com/zurvin/lo-que-debemos-saber-de-escript-2020-5fc61da5e4cd)\n-  [Promise Basics - javascript.info](https://javascript.info/promise-basics)\n-  [The Complete JavaScript Promise Guide](https://blog.webdevsimplified.com/2021-09/javascript-promises)\n-  [Promise Chaining - javascript.info](https://javascript.info/promise-chaining)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [Let's Learn ES6 - Promises \u2014 Ryan Christiani](https://www.youtube.com/watch?v=vQ3MoXnKfuQ)\n- [JavaScript ES6 / ES2015 Promises \u2014 Traversy Media](https://www.youtube.com/watch?v=XJEHuBZQ5dU)\n- [Promises \u2014 Fun Fun Function](https://www.youtube.com/watch?v=2d7s3spWAzo)\n- [Error Handling Promises in JavaScript \u2014 Fun Fun Function](https://www.youtube.com/watch?v=f8IgdnYIwOU)\n- [Promises Part 1 - Topics of JavaScript/ES6 \u2014 The Coding Train](https://www.youtube.com/watch?v=QO4NXhWo_NM)\n- [JavaScript Promise in 100 Seconds](https://www.youtube.com/watch?v=RvYYCGs45L4)\n- [JavaScript Promise in 9 Minutes](https://youtu.be/3NjdOtHpcBM)\n- [JavaScript Promises In 10 Minutes \u2014 Web Dev Simplified ](https://www.youtube.com/watch?v=DHvZLI7Db8E)\n- [Promises | Ep 02 Season 02 - Namaste JavaScript - Akshay Saini ](https://youtu.be/ap-6PPAuK1Y?si=Ri1fopXeYjlrHzpf)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 26. async/await\n\n### Reference\n\n-  [async/await \u2014 JavaScript.Info](https://javascript.info/async-await)\n\n### Books\n\n-  [Eloquent JavaScript, 3rd Edition: Ch. 11 - Asynchronous Programming](https://eloquentjavascript.net/11_async.html)\n-  [Exploring JS: Asynchronous Programming](http://exploringjs.com/es6/ch_async.html)\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [Understanding async/await in Javascript \u2014 Gokul N K](https://hackernoon.com/understanding-async-await-in-javascript-1d81bb079b2c)\n-  [Asynchronous Javascript using async/await \u2014 Joy Warugu](https://scotch.io/tutorials/asynchronous-javascript-using-async-await)\n-  [Modern Asynchronous JavaScript with async/await \u2014 Flavio Copes](https://flaviocopes.com/javascript-async-await/)\n-  [Asynchronous JavaScript: From Callback Hell to Async and Await \u2014 Demir Selmanovic](https://www.toptal.com/javascript/asynchronous-javascript-async-await-tutorial)\n-  [Javascript \u2014 ES8 Introducing async/await Functions \u2014 Ben Garrison](https://medium.com/@_bengarrison/javascript-es8-introducing-async-await-functions-7a471ec7de8a)\n-  [How to escape async/await hell \u2014 Aditya Agarwal](https://medium.freecodecamp.org/avoiding-the-async-await-hell-c77a0fb71c4c)\n-  [Understanding JavaScript\u2019s async await \u2014 Nicol\u00e1s Bevacqua](https://ponyfoo.com/articles/understanding-javascript-async-await)\n-  [JavaScript Async/Await: Serial, Parallel and Complex Flow \u2014 TechBrij](https://techbrij.com/javascript-async-await-parallel-sequence)\n-  [From JavaScript Promises to Async/Await: why bother? \u2014 Chris Nwamba](https://blog.pusher.com/promises-async-await/)\n-  [Flow Control in Modern JS: Callbacks to Promises to Async/Await \u2014 Craig Buckler](https://www.sitepoint.com/flow-control-callbacks-promises-async-await/)\n-  [How to improve your asynchronous Javascript code with async and await \u2014 Indrek Lasn](https://medium.freecodecamp.org/improve-your-asynchronous-javascript-code-with-async-and-await-c02fc3813eda)\n-  [Making Fetches Easy With Async Await \u2014 Mickey Sheridan](https://medium.com/@micksheridan.24/making-fetches-easy-with-async-await-8a1246efa1f6)\n-  [7 Reasons Why JavaScript Async/Await Is Better Than Plain Promises \u2014 Mostafa Gaafar](https://dev.to/gafi/7-reasons-to-always-use-async-await-over-plain-promises-tutorial-4ej9)\n-  [Asynchronous Operations in JavaScript \u2014 Jscrambler](https://dev.to/jscrambler/asynchronous-operations-in-javascript-2p6b)\n-  [JavaScript: Promises or async-await \u2014 Gokul N K](https://medium.com/better-programming/should-i-use-promises-or-async-await-126ab5c98789)\n-  [Async / Await: From Zero to Hero \u2014 Zhi Yuan](https://dev.to/zhiyuanamos/async-await-from-zero-to-hero-a22)\n-  [JavaScript Visualized: Promises & Async/Await \u2014 Lydia Hallie](https://dev.to/lydiahallie/javascript-visualized-promises-async-await-5gke)\n-  [Making asynchronous programming easier with async and await \u2014 MDN](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await)\n-  [JavaScript Async/Await Tutorial \u2013 Learn Callbacks, Promises, and Async/Await in JS by Making Ice Cream](https://www.freecodecamp.org/news/javascript-async-await-tutorial-learn-callbacks-promises-async-await-by-making-icecream/)\n-  [Better Than Promises - JavaScript Async/Await](https://blog.webdevsimplified.com/2021-11/async-await/)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [Asynchronous JavaScript Crash Course](https://www.youtube.com/watch?v=exBgWAIeIeg)\n- [Async + Await \u2014 Wes Bos](https://www.youtube.com/watch?v=9YkUCxvaLEk)\n- [Asynchrony: Under the Hood \u2014 Shelley Vohr](https://www.youtube.com/watch?v=SrNQS8J67zc)\n- [async/await in JavaScript - What, Why and How \u2014 Fun Fun Function](https://www.youtube.com/watch?v=568g8hxJJp4&index=3&list=PL0zVEGEvSaeHJppaRLrqjeTPnCH6)\n- [async/await Part 1 - Topics of JavaScript/ES8 \u2014 The Coding Train](https://www.youtube.com/watch?v=XO77Fib9tSI&index=3&list=PLRqwX-V7Uu6bKLPQvPRNNE65kBL62mVfx)\n- [async/await Part 2 - Topics of JavaScript/ES8 \u2014 The Coding Train](https://www.youtube.com/watch?v=chavThlNz3s&index=4&list=PLRqwX-V7Uu6bKLPQvPRNNE65kBL62mVfx)\n- [Complete Guide to JS Async & Await ES2017/ES8 \u2014 Colt Steele](https://www.youtube.com/watch?v=krAYA4rvbdA)\n- [Tips for using async/await in JavaScript \u2014 James Q Quick](https://www.youtube.com/watch?v=_9vgd9XKlDQ)\n- [JavaScript Async Await \u2014 Web Dev Simplified](https://www.youtube.com/watch?v=V_Kr9OSfDeU)\n- [Promise async and await in javascript \u2014 Hitesh Choudhary](https://youtu.be/Gjbr21JLfgg?si=SDCVKr9ONw2GsNdT)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 27. Data Structures\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [Data Structures in JavaScript \u2014 Thon Ly](https://medium.com/siliconwat/data-structures-in-javascript-1b9aed0ea17c)\n-  [Algorithms and Data Structures in JavaScript \u2014 Oleksii Trekhleb](https://itnext.io/algorithms-and-data-structures-in-javascript-a71548f902cb)\n-  [Data Structures: Objects and Arrays \u2015 Chris Nwamba](https://scotch.io/courses/10-need-to-know-javascript-concepts/data-structures-objects-and-arrays)\n-  [Data structures in JavaScript \u2014 Benoit Vallon](http://blog.benoitvallon.com/data-structures-in-javascript/data-structures-in-javascript/)\n-  [Playing with Data Structures in Javascript \u2014 Anish K.](https://blog.cloudboost.io/playing-with-data-structures-in-javascript-stack-a55ebe50f29d)\n-  [The Little Guide of Queue in JavaScript \u2014 Germ\u00e1n Cutraro](https://hackernoon.com/the-little-guide-of-queue-in-javascript-4f67e79260d9)\n-  [All algorithms writing with JavaScript in the book 'Algorithms Fourth Edition'](https://github.com/barretlee/algorithms)\n-  [Collection of classic computer science paradigms in JavaScript](https://github.com/nzakas/computer-science-in-javascript)\n-  [All the things you didn't know you wanted to know about data structures](https://github.com/jamiebuilds/itsy-bitsy-data-structures)\n-  [JavaScript Data Structures: 40 Part Series \u2014 miku86](https://dev.to/miku86/series/3259)\n-  [Data Structures: Understanding Graphs \u2014 Rachel Hawa](https://medium.com/javascript-in-plain-english/data-structures-understanding-graphs-82509d35e6b5)\n-  [Data Structures Two Ways: Linked List (Pt 1) \u2014 Freddie Duffield](https://dev.to/freddieduffield/data-structures-two-ways-linked-list-2n61)\n-  [Data Structures Two Ways: Linked List (Pt 2) \u2014 Freddie Duffield](https://dev.to/freddieduffield/data-structures-two-ways-linked-list-pt2-2i60)\n-  [Graph Data Structures Explained in JavaScript \u2014 Adrian Mejia](https://dev.to/amejiarosario/graph-data-structures-for-beginners-5edn)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [Algorithms In Javascript | Ace Your Interview \u2014 Eduonix Learning Solutions](https://www.youtube.com/watch?v=H_EBPZgiAas&list=PLDmvslp_VR0zYUSth_8O69p4_cmvZEgLa)\n- [Data Structures and Algorithms in JavaScript \u2014 freeCodeCamp](https://www.youtube.com/watch?v=Gj5qBheGOEo&list=PLWKjhJtqVAbkso-IbgiiP48n-O-JQA9PJ)\n- [Learning JavaScript Data Structures and Algorithms: Sorting \u2014 Packt Video](https://www.youtube.com/watch?v=Ymh_AurrMbA)\n- [JavaScript Data Structures: Getting Started \u2014 Academind](https://www.youtube.com/watch?v=41GSinwoMYA&ab_channel=Academind)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 28. Expensive Operation and Big O Notation\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [Big O Notation in Javascript \u2014 C\u00e9sar Ant\u00f3n Dorantes](https://medium.com/cesars-tech-insights/big-o-notation-javascript-25c79f50b19b)\n-  [Time Complexity/Big O Notation \u2014 Tim Roberts](https://medium.com/javascript-scene/time-complexity-big-o-notation-1a4310c3ee4b)\n-  [Big O in JavaScript \u2014 Gabriela Medina](https://medium.com/@gmedina229/big-o-in-javascript-36ff67766051)\n-  [Big O Search Algorithms in JavaScript \u2014 Bradley Braithwaite](https://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html)\n-  [Algorithms in plain English: time complexity and Big-O Notation \u2014 Michael Olorunnisola](https://medium.freecodecamp.org/time-is-complex-but-priceless-f0abd015063c)\n-  [An Introduction to Big O Notation \u2014 Joseph Trettevik](https://dev.to/lofiandcode/an-introduction-to-big-o-notation-210o)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [JavaScript: Intro to Big O Notation and Function Runtime \u2014 Eric Traub](https://www.youtube.com/watch?v=HgA5VOFan5E)\n- [Essential Big O for JavaScript Developers \u2014 Dave Smith](https://www.youtube.com/watch?v=KatlvCFHPRo)\n- [Big O Notation - Time Complexity Analysis \u2014 WebTunings](https://www.youtube.com/watch?v=ALl86xJiTD8)\n- [Learn Big O Notation In 12 Minutes - Web Dev Simplified](https://www.youtube.com/watch?v=itn09C2ZB9Y)\n- [JavaScript Algorithms: Big-O Notation - Codevolution](https://www.youtube.com/watch?v=3yUuo7TqMW8)\n- [JavaScript Algorithms Crash Course: Learn Algorithms & \"Big O\" from the Ground Up! - Academind](https://www.youtube.com/watch?v=JgWm6sQwS_I)\n- [Big O Notation - Data Structures and Algorithms in Javascript - RoadSideCoder](https://www.youtube.com/watch?v=LaexPVi1VRE)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 29. Algorithms\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [Data Structures and Algorithms using ES6](https://github.com/Crizstian/data-structure-and-algorithms-with-ES6)\n-  [Algorithms and data structures implemented in JavaScript with explanations and links to further readings](https://github.com/trekhleb/javascript-algorithms)\n-  [JS: Interview Algorithm](http://www.thatjsdude.com/interview/js1.html)\n-  [Algorithms in JavaScript \u2014 Thon Ly](https://medium.com/siliconwat/algorithms-in-javascript-b0bed68f4038)\n-  [JavaScript Objects, Square Brackets and Algorithms \u2014 Dmitri Grabov](https://medium.freecodecamp.org/javascript-objects-square-brackets-and-algorithms-e9a2916dc158)\n-  [Atwood's Law applied to CS101 - Classic algorithms and data structures implemented in JavaScript](https://github.com/felipernb/algorithms.js)\n-  [Data Structures and Algorithms library in JavaScript](https://github.com/yangshun/lago)\n-  [Collection of computer science algorithms and data structures written in JavaScript](https://github.com/idosela/algorithms-in-javascript)\n-  [Algorithms and Data Structures in JavaScript \u2014 Oleksii Trekhleb](https://dev.to/trekhleb/algorithms-and-data-structures-in-javascript-49i3)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- \ud83c\udfa5 [JavaScript Algorithms - Codevolution](https://www.youtube.com/playlist?list=PLC3y8-rFHvwiRYB4-HHKHblh3_bQNJTMa)\n- \ud83c\udfa5 [Dynamic Programming - Learn to Solve Algorithmic Problems & Coding Challenges - FreeCodeCamp](https://www.youtube.com/watch?v=oBt53YbR9Kk&t=1021s)\n- \ud83c\udfa5 [Data Structures and Algorithms in Javascript | DSA with JS - RoadsideCoder](https://www.youtube.com/playlist?list=PLKhlp2qtUcSZtJefDThsXcsAbRBCSTgW4)\n- \ud83c\udfa5 [Javascript Algorithms + Data Structures - KodingKevin](https://www.youtube.com/playlist?list=PLn2ipk-jqgZiAHiA70hOxAj8RMUeqYNK3)\n- \ud83c\udfa5 [JavaScript Data Structures: Getting Started - Academind](https://www.youtube.com/watch?v=41GSinwoMYA)\n- \ud83c\udfa5 [Algorithms and Data Structures - The Coding Train (Daniel Shiffman)](https://www.youtube.com/playlist?list=PLRqwX-V7Uu6ZiZxtDDRCi6uhfTH4FilpH)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 30. Inheritance, Polymorphism and Code Reuse\n\n### Reference\n\n-  [Inheritance in JavaScript \u2014 MDN](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance)\n-  [Class inheritance, super \u2014 JavaScript.Info](https://javascript.info/class-inheritance)\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [Inheritance in JavaScript \u2014 Rupesh Mishra](https://hackernoon.com/inheritance-in-javascript-21d2b82ffa6f)\n-  [Simple Inheritance with JavaScript \u2014 David Catuhe](https://www.sitepoint.com/simple-inheritance-javascript/)\n-  [JavaScript \u2014 Inheritance, delegation patterns and Object linking \u2014 NC Patro](https://codeburst.io/javascript-inheritance-25fe61ab9f85)\n-  [Object Oriented JavaScript: Polymorphism with examples \u2014 Knoldus Blogs](https://blog.knoldus.com/object-oriented-javascript-polymorphism-with-examples/)\n-  [Program Like Proteus \u2014 A beginner\u2019s guide to polymorphism in Javascript \u2014 Sam Galson](https://medium.com/yld-blog/program-like-proteus-a-beginners-guide-to-polymorphism-in-javascript-867bea7c8be2)\n-  [Object-oriented JavaScript: A Deep Dive into ES6 Classes \u2014 Jeff Mott](https://www.sitepoint.com/object-oriented-javascript-deep-dive-es6-classes/)\n-  [Unlocking the Power of Polymorphism in JavaScript: A Deep Dive](https://prototypr.io/post/unlocking-the-power-of-polymorphism-in-javascript-a-deep-dive)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [Inheritance in JavaScript \u2014 kudvenkat](https://www.youtube.com/watch?v=yXlFR81tDBM)\n- [JavaScript ES6 Classes and Inheritance \u2014 Traversy Media](https://www.youtube.com/watch?v=RBLIm5LMrmc)\n- [Polymorphism in JavaScript \u2014 kudvenkat](https://www.youtube.com/watch?v=zdovG9cuEBA)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 31. Design Patterns\n\n### Books\n\n-  [Learning JavaScript Design Patterns \u2014 Addy Osmani](https://addyosmani.com/resources/essentialjsdesignpatterns/book/)\n-  [Pro JavaScript Design Patterns \u2014 Ross Harmes and Dustin Diaz](https://pepa.holla.cz/wp-content/uploads/2016/08/Pro-JavaScript-Design-Patterns.pdf)\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [JavaScript Design Patterns \u2013 Explained with Examples \u2014 Germ\u00e1n Cocca](https://www.freecodecamp.org/news/javascript-design-patterns-explained/)\n-  [4 JavaScript Design Patterns You Should Know \u2014 Devan Patel](https://scotch.io/bar-talk/4-javascript-design-patterns-you-should-know)\n-  [JavaScript Design Patterns \u2013 Beginner's Guide to Mobile Web Development \u2014 Soumyajit Pathak](https://medium.com/beginners-guide-to-mobile-web-development/javascript-design-patterns-25f0faaaa15)\n-  [JavaScript Design Patterns \u2014 Akash Pal](https://medium.com/front-end-hacking/javascript-design-patterns-ed9d4c144c81)\n-  [JavaScript Design Patterns: Understanding Design Patterns in JavaScript - Sukhjinder Arora](https://blog.bitsrc.io/understanding-design-patterns-in-javascript-13345223f2dd)\n-  [All the 23 (GoF) design patterns implemented in Javascript \u2014 Felipe Beline](https://github.com/fbeline/Design-Patterns-JS)\n-  [The Power of the Module Pattern in JavaScript \u2014 jsmanifest](https://medium.com/better-programming/the-power-of-the-module-pattern-in-javascript-3c73f7cd10e8)\n-  [Design Patterns for Developers using JavaScript pt. I \u2014 Oliver Mensah](https://dev.to/omensah/design-patterns-for-developers-using-javascript----part-one--b3e)\n-  [Design Patterns for Developers using JavaScript pt. II \u2014 Oliver Mensah](https://dev.to/omensah/design-patterns-for-developers-using-javascript---part-two--3p39)\n-  [Design patterns in modern JavaScript development](https://levelup.gitconnected.com/design-patterns-in-modern-javascript-development-ec84d8be06ca)\n-  [Understanding Design Patterns: Iterator using Dev.to and Medium social networks! \u2014 Carlos Caballero](https://dev.to/carlillo/understanding-design-patterns-iterator-using-dev-to-and-medium-social-networks-3bdd)\n-  [JavaScript Design Patterns - Factory Pattern \u2014 KristijanFi\u0161trek](https://dev.to/kristijanfistrek/javascript-design-patterns-factory-pattern-562p)\n-  [JavaScript Design Pattern \u2014 Module Pattern - Factory Pattern \u2014 Moon](https://medium.com/javascript-in-plain-english/javascript-design-pattern-module-pattern-555737eccecd)\n-  [Design Patterns: Null Object - Carlos Caballero](https://medium.com/better-programming/design-patterns-null-object-5ee839e37892)\n-  [Strategy Pattern - Francesco Ciulla](https://dev.to/francescoxx/strategy-pattern-5oh)\n-  [Adapter Pattern - Francesco Ciulla](https://dev.to/francescoxx/adapter-pattern-5bjk)\n-  [The Power of Composite Pattern in JavaScript - jsmanifest](https://dev.to/jsmanifest/the-power-of-composite-pattern-in-javascript-2732)\n-  [In Defense of Defensive Programming - Adam Nathaniel Davis](https://dev.to/bytebodger/in-defense-of-defensive-programming-k45)\n-  [JavaScript Patterns Workshop \u2014 Lydia Hallie](https://javascriptpatterns.vercel.app/patterns)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [JavaScript Design Patterns \u2014 Udacity](https://www.udacity.com/course/javascript-design-patterns--ud989)\n- [JavaScript Patterns for 2017 \u2014 Scott Allen](https://www.youtube.com/watch?v=hO7mzO83N1Q)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 32. Partial Applications, Currying, Compose and Pipe\n\n### Books\n\n-  [Functional-Light JavaScript: Ch. 3 - Managing Function Inputs \u2014 Kyle Simpson](https://github.com/getify/Functional-Light-JS/blob/master/manuscript/ch3.md)\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [Composition and Currying Elegance in JavaScript \u2014 Pragyan Das](https://medium.com/@pragyan88/writing-middleware-composition-and-currying-elegance-in-javascript-8b15c98a541b)\n-  [Functional JavaScript: Function Composition For Every Day Use \u2014 Joel Thoms](https://hackernoon.com/javascript-functional-composition-for-every-day-use-22421ef65a10)\n-  [Functional Composition: compose() and pipe() \u2014 Anton Paras](https://medium.com/@acparas/what-i-learned-today-july-2-2017-ab9a46dbf85f)\n-  [Why The Hipsters Compose Everything: Functional Composing In JavaScript \u2014 A. Sharif](http://busypeoples.github.io/post/functional-composing-javascript/)\n-  [A Gentle Introduction to Functional JavaScript pt III: Functions for making functions \u2014 James Sinclair](https://jrsinclair.com/articles/2016/gentle-introduction-to-functional-javascript-functions/)\n-  [Curry And Compose (why you should be using something like ramda in your code) \u2014 jsanchesleao](https://jsleao.wordpress.com/2015/02/22/curry-and-compose-why-you-should-be-using-something-like-ramda-in-your-code/)\n-  [Function Composition in JavaScript with Pipe \u2014 Andy Van Slaars](https://vanslaars.io/post/create-pipe-function/)\n-  [Practical Functional JavaScript with Ramda \u2014 Andrew D'Amelio, Yuri Takhteyev](https://developer.telerik.com/featured/practical-functional-javascript-ramda/)\n-  [The beauty in Partial Application, Currying, and Function Composition \u2014 Joel Thoms](https://hackernoon.com/the-beauty-in-partial-application-currying-and-function-composition-d885bdf0d574)\n-  [Curry or Partial Application? \u2014 Eric Elliott](https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8)\n-  [Partial Application in JavaScript \u2014 Ben Alman](http://benalman.com/news/2012/09/partial-application-in-javascript/)\n-  [Partial Application of Functions \u2014 Functional Reactive Ninja](https://hackernoon.com/partial-application-of-functions-dbe7d9b80760)\n-  [Currying vs Partial Application \u2014 Deepak Gupta](https://towardsdatascience.com/javascript-currying-vs-partial-application-4db5b2442be8)\n-  [Partial Application in ECMAScript 2015 \u2014 Ragan Wald](http://raganwald.com/2015/04/01/partial-application.html)\n-  [So You Want to be a Functional Programmer pt. I \u2014 Charles Scalfani](https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536)\n-  [So You Want to be a Functional Programmer pt. II \u2014 Charles Scalfani](https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-2-7005682cec4a)\n-  [So You Want to be a Functional Programmer pt. III \u2014 Charles Scalfani](https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-3-1b0fd14eb1a7)\n-  [So You Want to be a Functional Programmer pt. IV \u2014 Charles Scalfani](https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-4-18fbe3ea9e49)\n-  [So You Want to be a Functional Programmer pt. V \u2014 Charles Scalfani](https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-5-c70adc9cf56a)\n-  [An introduction to the basic principles of Functional Programming \u2014 TK](https://medium.freecodecamp.org/an-introduction-to-the-basic-principles-of-functional-programming-a2c2a15c84)\n-  [Concepts of Functional Programming in Javascript \u2014 TK](https://medium.com/the-renaissance-developer/concepts-of-functional-programming-in-javascript-6bc84220d2aa)\n-  [An Introduction to Functional Programming Style in JavaScript \u2014 JavaScript Teacher](https://medium.freecodecamp.org/an-introduction-to-functional-programming-style-in-javascript-71fcc050f064)\n-  [A practical guide to writing more functional JavaScript \u2014 Nadeesha Cabral](https://medium.freecodecamp.org/a-practical-guide-to-writing-more-functional-javascript-db49409f71)\n-  [A simple explanation of functional pipe in JavaScript \u2014 Ben Lesh](https://dev.to/benlesh/a-simple-explanation-of-functional-pipe-in-javascript-2hbj)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- [Compose vs Pipe: Functional Programming in JavaScript \u2014 Chyld Studios](https://www.youtube.com/watch?v=Wl2ejJOqHUU)\n- [JavaScript Functional Programing: Compose \u2014 Theodore Anderson](https://www.youtube.com/watch?v=jigHxo9YR30)\n- [Function Composition - Functional JavaScript \u2014 NWCalvank](https://www.youtube.com/watch?v=mth5WpEc4Qs)\n- [JavaScript Function Composition Explained \u2014 Theodore Anderson](https://www.youtube.com/watch?v=Uam37AlzPYw)\n- [Let's code with function composition \u2014 Fun Fun Function](https://www.youtube.com/watch?v=VGB9HbL1GHk)\n- [Partial Application vs. Currying \u2014 NWCalvank](https://www.youtube.com/watch?v=DzLkRsUN2vE)\n- [JavaScript Partial Application \u2014 Theodore Anderson](https://www.youtube.com/watch?v=jkebgHEcvac)\n- [call, apply and bind method in JavaScript](https://www.youtube.com/watch?v=75W8UPQ5l7k&t=261s)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n---\n\n## 33. Clean Code\n\n### <img  align= center width=40px height=40px src=\"https://cdn-icons-png.flaticon.com/512/1945/1945940.png\"> Articles\n\n-  [Clean Code Explained \u2013 A Practical Introduction to Clean Coding for Beginners \u2014 freeCodeCamp](https://www.freecodecamp.org/news/clean-coding-for-beginners/)\n-  [Clean Code concepts adapted for JavaScript \u2014 Ryan McDermott](https://github.com/ryanmcdermott/clean-code-javascript)\n-  [Clean Code Practice: How to write clean code \u2014 Tirth Bodawala](https://www.atyantik.com/clean-code-practices-javascript/)\n-  [Function parameters in JavaScript Clean Code \u2014 Kevin Peters](https://medium.com/@kevin_peters/function-parameters-in-javascript-clean-code-4caac109159b)\n-  [Keeping your code clean \u2014 Samuel James](https://codeburst.io/keeping-your-code-clean-d30bcffd1a10)\n-  [Best Practices for Using Modern JavaScript Syntax \u2014 M. David Green](https://www.sitepoint.com/modern-javascript-best-practices/)\n-  [best practices for cross node/web development - Jimmy W\u00e4rting](https://github.com/cross-js/cross-js)\n-  [Writing Clean Code - Dylan Paulus](https://dev.to/ganderzz/on-writing-clean-code-57cm)\n-  [Writing Clean Code and The Practice of Programming - Nityesh Agarwal](https://dev.to/nityeshaga/writing-clean-code-and-the-practice-of-programming-actionable-advice-for-beginners-5f0k)\n-  [Clean code, dirty code, human code - Daniel Irvine](https://dev.to/d_ir/clean-code-dirty-code-human-code-6nm)\n-  [Practical Ways to Write Better JavaScript - Ryland G](https://dev.to/taillogs/practical-ways-to-write-better-javascript-26d4)\n-  [The Must-Know Clean Code Principles - Kesk on Medium](https://medium.com/swlh/the-must-know-clean-code-principles-1371a14a2e75)\n-  [The Clean Code Book - Robert C Martin](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/)\n-  [How to use destructuring in JavaScript to write cleaner, more powerful code - freecodecamp](https://www.freecodecamp.org/news/how-to-use-destructuring-in-javascript-to-write-cleaner-more-powerful-code-9d1b38794050/)\n-  [Write Clean Code Using JavaScript Object Destructuring - Asel Siriwardena](https://betterprogramming.pub/write-clean-code-using-javascript-object-destructuring-3551302130e7)\n- [JavaScript Clean Coding Best Practices](https://blog.risingstack.com/javascript-clean-coding-best-practices-node-js-at-scale/)\n\n### <img align=center width=\"40\" height=\"40\" src=\"https://img.icons8.com/dusk/64/video.png\" alt=\"video\"/>  Videos\n\n- \ud83c\udfa5 [JavaScript Pro Tips - Code This, NOT That](https://www.youtube.com/watch?v=Mus_vwhTCq0)\n- \ud83c\udfa5 [Clean Code playlist - Beau teaches](https://www.youtube.com/watch?v=b9c5GmmS7ks&list=PLWKjhJtqVAbkK24EaPurzMq0-kw5U9pJh&index=1)\n- \ud83c\udfa5 [JavaScript Best Practices and Coding Conventions - Write Clean Code](https://youtu.be/RMN_bkZ1KM0?si=Ssg3cNZ_DB7CIwKQ)\n- \ud83c\udfa5 [JavaScript Clean Code](https://youtu.be/vPXzVNmCPg4?si=QR1k4E6Zx5H4mfcs)\n- \ud83c\udfa5 [Tips On Learning How To Code](https://www.youtube.com/watch?v=0wHyoBPc6zs)\n\n**[\u2b06 Back to Top](#table-of-contents)**\n\n## <img  align= center width=50px height=50px src=\"https://moein.video/wp-content/uploads/2022/05/license-GIF-Certificate-Royalty-Free-Animated-Icon-350px-after-effects-project.gif\"> License <a id = \"License\"></a>\nThis software is licensed under MIT License, See [License](https://github.com/leonardomso/33-js-concepts/blob/master/LICENSE) for more information \u00a9Leonardo Maldonado.\n",
        "releases": []
    }
}