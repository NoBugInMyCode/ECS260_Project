{
    "https://api.github.com/repos/barteksc/AndroidPdfViewer": {
        "forks": 1924,
        "watchers": 8217,
        "stars": 8217,
        "languages": {
            "Java": 166567
        },
        "commits": [
            "2024-05-29T16:07:58Z",
            "2019-08-18T01:29:22Z",
            "2019-08-17T22:58:24Z",
            "2019-08-17T22:58:11Z",
            "2019-08-17T22:53:48Z",
            "2019-08-17T22:53:34Z",
            "2019-08-17T21:59:10Z",
            "2019-08-17T21:58:57Z",
            "2019-08-17T21:57:31Z",
            "2019-08-17T21:57:20Z",
            "2019-08-17T21:53:03Z",
            "2019-08-17T21:52:50Z",
            "2019-08-17T21:42:04Z",
            "2019-08-17T21:41:41Z",
            "2019-08-17T21:40:50Z",
            "2019-08-17T21:40:37Z",
            "2019-08-17T21:39:28Z",
            "2019-08-17T21:39:16Z",
            "2019-08-17T21:38:39Z",
            "2019-08-17T21:38:27Z",
            "2019-08-17T21:36:18Z",
            "2019-08-17T21:35:47Z",
            "2019-08-17T21:34:10Z",
            "2019-04-27T15:23:15Z",
            "2019-04-16T08:21:27Z",
            "2018-12-13T08:22:19Z",
            "2018-11-30T08:08:17Z",
            "2018-11-22T08:44:39Z",
            "2018-10-22T11:25:34Z",
            "2018-10-17T20:17:39Z"
        ],
        "creation_date": "2016-06-02T20:21:21Z",
        "contributors": 14,
        "topics": [],
        "subscribers": 215,
        "readme": "\n# Change of ownership and looking for contributors!\n\nThe ownership of the project was recently changed and we are actively looking for contributors to bring the project back to track. Please [visit](https://github.com/DImuthuUpe/AndroidPdfViewer/issues/1186)\n\n# Android PdfViewer\n\n__AndroidPdfViewer 1.x is available on [AndroidPdfViewerV1](https://github.com/barteksc/AndroidPdfViewerV1)\nrepo, where can be developed independently. Version 1.x uses different engine for drawing document on canvas,\nso if you don't like 2.x version, try 1.x.__\n\nLibrary for displaying PDF documents on Android, with `animations`, `gestures`, `zoom` and `double tap` support.\nIt is based on [PdfiumAndroid](https://github.com/barteksc/PdfiumAndroid) for decoding PDF files. Works on API 11 (Android 3.0) and higher.\nLicensed under Apache License 2.0.\n\n## What's new in 3.2.0-beta.1?\n* Merge PR #714 with optimized page load\n* Merge PR #776 with fix for max & min zoom level\n* Merge PR #722 with fix for showing right position when view size changed\n* Merge PR #703 with fix for too many threads\n* Merge PR #702 with fix for memory leak\n* Merge PR #689 with possibility to disable long click\n* Merge PR #628 with fix for hiding scroll handle\n* Merge PR #627 with `fitEachPage` option\n* Merge PR #638 and #406 with fixed NPE\n* Merge PR #780 with README fix\n* Update compile SDK and support library to 28\n* Update Gradle and Gradle Plugin\n\n## Changes in 3.0 API\n* Replaced `Contants.PRELOAD_COUNT` with `PRELOAD_OFFSET`\n* Removed `PDFView#fitToWidth()` (variant without arguments)\n* Removed `Configurator#invalidPageColor(int)` method as invalid pages are not rendered\n* Removed page size parameters from `OnRenderListener#onInitiallyRendered(int)` method, as document may have different page sizes\n* Removed `PDFView#setSwipeVertical()` method\n\n## Installation\n\nAdd to _build.gradle_:\n\n`implementation 'com.github.barteksc:android-pdf-viewer:3.2.0-beta.1'`\n\nor if you want to use more stable version:\n \n`implementation 'com.github.barteksc:android-pdf-viewer:2.8.2'`\n\nLibrary is available in jcenter repository, probably it'll be in Maven Central soon.\n\n## ProGuard\nIf you are using ProGuard, add following rule to proguard config file:\n\n```proguard\n-keep class com.shockwave.**\n```\n\n## Include PDFView in your layout\n\n``` xml\n<com.github.barteksc.pdfviewer.PDFView\n        android:id=\"@+id/pdfView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/>\n```\n\n## Load a PDF file\n\nAll available options with default values:\n``` java\npdfView.fromUri(Uri)\nor\npdfView.fromFile(File)\nor\npdfView.fromBytes(byte[])\nor\npdfView.fromStream(InputStream) // stream is written to bytearray - native code cannot use Java Streams\nor\npdfView.fromSource(DocumentSource)\nor\npdfView.fromAsset(String)\n    .pages(0, 2, 1, 3, 3, 3) // all pages are displayed by default\n    .enableSwipe(true) // allows to block changing pages using swipe\n    .swipeHorizontal(false)\n    .enableDoubletap(true)\n    .defaultPage(0)\n    // allows to draw something on the current page, usually visible in the middle of the screen\n    .onDraw(onDrawListener)\n    // allows to draw something on all pages, separately for every page. Called only for visible pages\n    .onDrawAll(onDrawListener)\n    .onLoad(onLoadCompleteListener) // called after document is loaded and starts to be rendered\n    .onPageChange(onPageChangeListener)\n    .onPageScroll(onPageScrollListener)\n    .onError(onErrorListener)\n    .onPageError(onPageErrorListener)\n    .onRender(onRenderListener) // called after document is rendered for the first time\n    // called on single tap, return true if handled, false to toggle scroll handle visibility\n    .onTap(onTapListener)\n    .onLongPress(onLongPressListener)\n    .enableAnnotationRendering(false) // render annotations (such as comments, colors or forms)\n    .password(null)\n    .scrollHandle(null)\n    .enableAntialiasing(true) // improve rendering a little bit on low-res screens\n    // spacing between pages in dp. To define spacing color, set view background\n    .spacing(0)\n    .autoSpacing(false) // add dynamic spacing to fit each page on its own on the screen\n    .linkHandler(DefaultLinkHandler)\n    .pageFitPolicy(FitPolicy.WIDTH) // mode to fit pages in the view\n    .fitEachPage(false) // fit each page to the view, else smaller pages are scaled relative to largest page.\n    .pageSnap(false) // snap pages to screen boundaries\n    .pageFling(false) // make a fling change only a single page like ViewPager\n    .nightMode(false) // toggle night mode\n    .load();\n```\n\n* `pages` is optional, it allows you to filter and order the pages of the PDF as you need\n\n## Scroll handle\n\nScroll handle is replacement for **ScrollBar** from 1.x branch.\n\nFrom version 2.1.0 putting **PDFView** in **RelativeLayout** to use **ScrollHandle** is not required, you can use any layout.\n\nTo use scroll handle just register it using method `Configurator#scrollHandle()`.\nThis method accepts implementations of **ScrollHandle** interface.\n\nThere is default implementation shipped with AndroidPdfViewer, and you can use it with\n`.scrollHandle(new DefaultScrollHandle(this))`.\n**DefaultScrollHandle** is placed on the right (when scrolling vertically) or on the bottom (when scrolling horizontally).\nBy using constructor with second argument (`new DefaultScrollHandle(this, true)`), handle can be placed left or top.\n\nYou can also create custom scroll handles, just implement **ScrollHandle** interface.\nAll methods are documented as Javadoc comments on interface [source](https://github.com/barteksc/AndroidPdfViewer/tree/master/android-pdf-viewer/src/main/java/com/github/barteksc/pdfviewer/scroll/ScrollHandle.java).\n\n## Document sources\nVersion 2.3.0 introduced _document sources_, which are just providers for PDF documents.\nEvery provider implements **DocumentSource** interface.\nPredefined providers are available in **com.github.barteksc.pdfviewer.source** package and can be used as\nsamples for creating custom ones.\n\nPredefined providers can be used with shorthand methods:\n```\npdfView.fromUri(Uri)\npdfView.fromFile(File)\npdfView.fromBytes(byte[])\npdfView.fromStream(InputStream)\npdfView.fromAsset(String)\n```\nCustom providers may be used with `pdfView.fromSource(DocumentSource)` method.\n\n## Links\nVersion 3.0.0 introduced support for links in PDF documents. By default, **DefaultLinkHandler**\nis used and clicking on link that references page in same document causes jump to destination page\nand clicking on link that targets some URI causes opening it in default application.\n\nYou can also create custom link handlers, just implement **LinkHandler** interface and set it using\n`Configurator#linkHandler(LinkHandler)` method. Take a look at [DefaultLinkHandler](https://github.com/barteksc/AndroidPdfViewer/tree/master/android-pdf-viewer/src/main/java/com/github/barteksc/pdfviewer/link/DefaultLinkHandler.java)\nsource to implement custom behavior.\n\n## Pages fit policy\nSince version 3.0.0, library supports fitting pages into the screen in 3 modes:\n* WIDTH - width of widest page is equal to screen width\n* HEIGHT - height of highest page is equal to screen height\n* BOTH - based on widest and highest pages, every page is scaled to be fully visible on screen\n\nApart from selected policy, every page is scaled to have size relative to other pages.\n\nFit policy can be set using `Configurator#pageFitPolicy(FitPolicy)`. Default policy is **WIDTH**.\n\n## Additional options\n\n### Bitmap quality\nBy default, generated bitmaps are _compressed_ with `RGB_565` format to reduce memory consumption.\nRendering with `ARGB_8888` can be forced by using `pdfView.useBestQuality(true)` method.\n\n### Double tap zooming\nThere are three zoom levels: min (default 1), mid (default 1.75) and max (default 3). On first double tap,\nview is zoomed to mid level, on second to max level, and on third returns to min level.\nIf you are between mid and max levels, double tapping causes zooming to max and so on.\n\nZoom levels can be changed using following methods:\n\n``` java\nvoid setMinZoom(float zoom);\nvoid setMidZoom(float zoom);\nvoid setMaxZoom(float zoom);\n```\n\n## Possible questions\n### Why resulting apk is so big?\nAndroid PdfViewer depends on PdfiumAndroid, which is set of native libraries (almost 16 MB) for many architectures.\nApk must contain all this libraries to run on every device available on market.\nFortunately, Google Play allows us to upload multiple apks, e.g. one per every architecture.\nThere is good article on automatically splitting your application into multiple apks,\navailable [here](http://ph0b.com/android-studio-gradle-and-ndk-integration/).\nMost important section is _Improving multiple APKs creation and versionCode handling with APK Splits_, but whole article is worth reading.\nYou only need to do this in your application, no need for forking PdfiumAndroid or so.\n\n### Why I cannot open PDF from URL?\nDownloading files is long running process which must be aware of Activity lifecycle, must support some configuration, \ndata cleanup and caching, so creating such module will probably end up as new library.\n\n### How can I show last opened page after configuration change?\nYou have to store current page number and then set it with `pdfView.defaultPage(page)`, refer to sample app\n\n### How can I fit document to screen width (eg. on orientation change)?\nUse `FitPolicy.WIDTH` policy or add following snippet when you want to fit desired page in document with different page sizes:\n``` java\nConfigurator.onRender(new OnRenderListener() {\n    @Override\n    public void onInitiallyRendered(int pages, float pageWidth, float pageHeight) {\n        pdfView.fitToWidth(pageIndex);\n    }\n});\n```\n\n### How can I scroll through single pages like a ViewPager?\nYou can use a combination of the following settings to get scroll and fling behaviour similar to a ViewPager:\n``` java\n    .swipeHorizontal(true)\n    .pageSnap(true)\n    .autoSpacing(true)\n    .pageFling(true)\n```\n\n## One more thing\nIf you have any suggestions on making this lib better, write me, create issue or write some code and send pull request.\n\n## License\n\nCreated with the help of android-pdfview by [Joan Zapata](http://joanzapata.com/)\n```\nCopyright 2017 Bartosz Schiller\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n",
        "releases": []
    }
}