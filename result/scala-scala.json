{
    "https://api.github.com/repos/scala/scala": {
        "forks": 3114,
        "watchers": 14357,
        "stars": 14357,
        "languages": {
            "Scala": 20551963,
            "Java": 351873,
            "CSS": 61396,
            "JavaScript": 48777,
            "Shell": 28372,
            "HTML": 11445,
            "Batchfile": 3041,
            "XSLT": 2266,
            "Awk": 1380,
            "Ruby": 238,
            "C": 141
        },
        "commits": [
            "2025-01-21T13:12:47Z",
            "2025-01-19T14:41:12Z",
            "2025-01-19T08:41:17Z",
            "2025-01-16T21:23:46Z",
            "2025-01-09T20:51:26Z",
            "2025-01-16T12:37:58Z",
            "2025-01-15T09:23:52Z",
            "2025-01-09T23:16:27Z",
            "2025-01-14T15:02:08Z",
            "2025-01-14T13:31:56Z",
            "2025-01-11T04:54:09Z",
            "2025-01-10T14:00:31Z",
            "2024-12-20T14:39:01Z",
            "2025-01-07T23:34:23Z",
            "2025-01-07T22:17:44Z",
            "2025-01-07T21:17:11Z",
            "2025-01-07T02:36:39Z",
            "2025-01-06T22:13:27Z",
            "2025-01-06T21:43:52Z",
            "2024-12-22T23:18:29Z",
            "2025-01-06T20:29:02Z",
            "2025-01-06T20:26:46Z",
            "2025-01-06T20:21:43Z",
            "2025-01-06T19:17:30Z",
            "2025-01-06T17:28:17Z",
            "2025-01-03T04:42:07Z",
            "2024-12-28T02:33:50Z",
            "2024-12-28T02:32:41Z",
            "2024-12-25T22:28:05Z",
            "2024-12-25T22:14:04Z"
        ],
        "creation_date": "2011-12-01T05:02:34Z",
        "contributors": 30,
        "topics": [
            "functional-programming",
            "jvm-languages",
            "object-oriented-programming",
            "scala",
            "scala-compiler",
            "scala-library",
            "scala-programming-language"
        ],
        "subscribers": 717,
        "readme": "# This is Scala 2! Welcome!\n\nThis is the home of the [Scala 2](https://www.scala-lang.org)\nstandard library, compiler, and language spec.\n\nFor Scala 3, visit [scala/scala3](https://github.com/scala/scala3).\n\n# How to contribute\n\nIssues and bug reports for Scala 2 are located in [scala/bug](https://github.com/scala/bug). That tracker is also where new contributors may find issues to work on: [good first issues](https://github.com/scala/bug/labels/good%20first%20issue), [help wanted](https://github.com/scala/bug/labels/help%20wanted).\n\nFor coordinating broader efforts, we also use the [scala/scala-dev tracker](https://github.com/scala/scala-dev/issues).\n\nTo contribute here, please open a [pull request](https://help.github.com/articles/using-pull-requests/#fork--pull) from your fork of this repository.\n\nBe aware that we can't accept additions to the standard library, only modifications to existing code.  Binary compatibility forbids adding new public classes or public methods. Additions are made to [scala-library-next](https://github.com/scala/scala-library-next) instead.\n\nWe require that you sign the [Scala CLA](https://contribute.akka.io/contribute/cla/scala) before we can merge any of your work, to protect Scala's future as open source software.\n\nThe general workflow is as follows.\n1. Find/file an issue in scala/bug (or submit a well-documented PR right away!).\n2. Fork the scala/scala repo.\n3. Push your changes to a branch in your forked repo. For coding guidelines, go [here](https://github.com/scala/scala#coding-guidelines).\n4. Submit a pull request to scala/scala from your forked repo.\n\nFor more information on building and developing the core of Scala, read the rest of this README, especially for [setting up your machine](https://github.com/scala/scala#get-ready-to-contribute)!\n\n\n# Get in touch!\n\nIn order to get in touch with other Scala contributors, join the\n\\#scala-contributors channel on the [Scala Discord](https://discord.com/invite/scala) chat, or post on\n[contributors.scala-lang.org](https://contributors.scala-lang.org) (Discourse).\n\nIf you need some help with your PR at any time, please feel free to @-mention anyone from the list below, and we will do our best to help you out:\n\n|                                                                                                 | username                                                       | talk to me about...                               |\n--------------------------------------------------------------------------------------------------|----------------------------------------------------------------|---------------------------------------------------|\n <img src=\"https://avatars.githubusercontent.com/lrytz\"         height=\"50px\" title=\"Lukas Rytz\"/>           | [`@lrytz`](https://github.com/lrytz)                 | back end, optimizer, named & default arguments, reporters       |\n <img src=\"https://avatars.githubusercontent.com/retronym\"      height=\"50px\" title=\"Jason Zaugg\"/>          | [`@retronym`](https://github.com/retronym)           | 2.12.x branch, compiler performance, weird compiler bugs, lambdas |\n <img src=\"https://avatars.githubusercontent.com/SethTisue\"     height=\"50px\" title=\"Seth Tisue\"/>           | [`@SethTisue`](https://github.com/SethTisue)         | getting started, build, CI, community build, Jenkins, docs, library, REPL |\n <img src=\"https://avatars.githubusercontent.com/dwijnand\"      height=\"50px\" title=\"Dale Wijnand\"/>         | [`@dwijnand`](https://github.com/dwijnand)           | pattern matcher, MiMa, partest |\n <img src=\"https://avatars.githubusercontent.com/som-snytt\"     height=\"50px\" title=\"Som Snytt\"/>            | [`@som-snytt`](https://github.com/som-snytt)         | warnings/lints/errors, REPL, compiler options, compiler internals, partest |\n <img src=\"https://avatars.githubusercontent.com/Ichoran\"       height=\"50px\" title=\"Rex Kerr\"/>             | [`@Ichoran`](https://github.com/Ichoran)             | collections library, performance              |\n <img src=\"https://avatars.githubusercontent.com/viktorklang\"   height=\"50px\" title=\"Viktor Klang\"/>         | [`@viktorklang`](https://github.com/viktorklang)     | concurrency, futures |\n <img src=\"https://avatars.githubusercontent.com/sjrd\"          height=\"50px\" title=\"S\u00e9bastien Doeraene\"/>   | [`@sjrd`](https://github.com/sjrd)                   | interactions with Scala.js |\n <img src=\"https://avatars.githubusercontent.com/NthPortal\"     height=\"50px\" title=\"Princess \\| April\"/>    | [`@NthPortal`](https://github.com/NthPortal)         | library, concurrency, `scala.math`, `LazyList`, `Using`, warnings |\n <img src=\"https://avatars.githubusercontent.com/bishabosha\"    height=\"50px\" title=\"Jamie Thompson\"/>       | [`@bishabosha`](https://github.com/bishabosha)       | TASTy reader |\n <img src=\"https://avatars.githubusercontent.com/joroKr21\"      height=\"50px\" title=\"Georgi Krastev\"/>       | [`@joroKr21`](https://github.com/joroKr21)           | higher-kinded types, implicits, variance |\n\nP.S.: If you have some spare time to help out around here, we would be delighted to add your name to this list!\n\n\n# Branches\n\nTarget the oldest branch you would like your changes to end up in. We periodically merge forward from older release branches (e.g., 2.12.x) to new ones (e.g. 2.13.x).\n\nIf your change is difficult to merge forward, you may be asked to also submit a separate PR targeting the newer branch.\n\nIf your change is version-specific and shouldn't be merged forward, put `[nomerge]` in the PR name.\n\nIf your change is a backport from a newer branch and thus doesn't need to be merged forward, put `[backport]` in the PR name.\n\n## Choosing a branch\n\nMost changes should target 2.13.x. We are increasingly reluctant to target 2.12.x unless there is a special reason (e.g. if an especially bad bug is found, or if there is commercial sponsorship).\n\nThe 2.11.x branch is now [inactive](https://github.com/scala/scala-dev/issues/451) and no further 2.11.x releases are planned (unless unusual, unforeseeable circumstances arise). You should not target 2.11.x without asking maintainers first.\n\n\n# Repository structure\n\nMost importantly:\n\n```\nscala/\n+--build.sbt                 The main sbt build definition\n+--project/                  The rest of the sbt build\n+--src/                      All sources\n   +---/library              Scala Standard Library\n   +---/reflect              Scala Reflection\n   +---/compiler             Scala Compiler\n+--test/                     The Scala test suite\n   +---/files                Partest tests\n   +---/junit                JUnit tests\n   +---/scalacheck           ScalaCheck tests\n+--spec/                     The Scala language specification\n```\n\nbut also:\n\n```\nscala/\n   +---/library-aux          Scala Auxiliary Library, for bootstrapping and documentation purposes\n   +---/interactive          Scala Interactive Compiler, for clients such as an IDE (aka Presentation Compiler)\n   +---/intellij             IntelliJ project templates\n   +---/manual               Scala's runner scripts \"man\" (manual) pages\n   +---/partest              Scala's internal parallel testing framework\n   +---/partest-javaagent    Partest's helper java agent\n   +---/repl                 Scala REPL core\n   +---/repl-frontend        Scala REPL frontend\n   +---/scaladoc             Scala's documentation tool\n   +---/scalap               Scala's class file decompiler\n   +---/testkit              Scala's unit-testing kit\n+--admin/                    Scripts for the CI jobs and releasing\n+--doc/                      Additional licenses and copyrights\n+--scripts/                  Scripts for the CI jobs and releasing\n+--tools/                    Scripts useful for local development\n+--build/                    Build products\n+--dist/                     Build products\n+--target/                   Build products\n```\n\n# Get ready to contribute\n\n## Requirements\n\nYou need the following tools:\n  - Java SDK. The baseline version is 8 for both 2.12.x and 2.13.x. It is almost always fine\n    to use a later SDK such as 11 or 15 for local development. CI will verify against the\n    baseline version.\n  - sbt\n\nMacOS and Linux work. Windows may work if you use Cygwin. Community help with keeping\nthe build working on Windows and documenting any needed setup is appreciated.\n\n## Tools we use\n\nWe are grateful for the following OSS licenses:\n  - [JProfiler Java profiler](https://www.ej-technologies.com/products/jprofiler/overview.html)\n  - [YourKit Java Profiler](https://www.yourkit.com/java/profiler/)\n  - [IntelliJ IDEA](https://www.jetbrains.com/idea/download/)\n  - [![Revved up by Develocity](https://img.shields.io/badge/Revved%20up%20by-Develocity-06A0CE?logo=Gradle&labelColor=02303A)](https://develocity.scala-lang.org)\n\n## Build setup\n\n### Basics\n\nDuring ordinary development, a new Scala build is built by the\npreviously released version, known as the \"reference compiler\" or,\nslangily, as \"STARR\" (stable reference release).  Building with STARR\nis sufficient for most kinds of changes.\n\nHowever, a full build of Scala is _bootstrapped_.  Bootstrapping has\ntwo steps: first, build with STARR; then, build again using the\nfreshly built compiler, leaving STARR behind.  This guarantees that\nevery Scala version can build itself.\n\nIf you change the code generation part of the Scala compiler, your\nchanges will only show up in the bytecode of the library and compiler\nafter a bootstrap. Our CI does a bootstrapped build.\n\n**Bootstrapping locally**: To perform a bootstrap, run `restarrFull`\nwithin an sbt session.  This will build and publish the Scala\ndistribution to your local artifact repository and then switch sbt to\nuse that version as its new `scalaVersion`.  You may then revert back\nwith `reload`.  Note `restarrFull` will also write the STARR version\nto `buildcharacter.properties` so you can switch back to it with\n`restarr` without republishing.  This will switch the sbt session to\nuse the `build-restarr` and `target-restarr` directories instead of\n`build` and `target`, which avoids wiping out classfiles and\nincremental metadata.  IntelliJ will continue to be configured to\ncompile and run tests using the starr version in\n`versions.properties`.\n\nFor history on how the current scheme was arrived at, see\nhttps://groups.google.com/d/topic/scala-internals/gp5JsM1E0Fo/discussion.\n\n**Building with fatal warnings**: To make warnings in the project fatal (i.e. turn them into errors), run `set Global / fatalWarnings := true` in sbt (replace `Global` with the name of a module\u2014such as `reflect`\u2014to only make warnings fatal for that module). To disable fatal warnings again, either `reload` sbt, or run `set Global / fatalWarnings := false` (again, replace `Global` with the name of a module if you only enabled fatal warnings for that module). CI always has fatal warnings enabled.\n\n### Using the sbt build\n\nOnce you've started an `sbt` session you can run one of the core commands:\n\n  - `compile` compiles all sub-projects (library, reflect, compiler, scaladoc, etc)\n  - `scala` / `scalac` run the REPL / compiler directly from sbt (accept options /\n    arguments)\n  - `enableOptimizer` reloads the build with the Scala optimizer enabled. Our releases are built this way. Enable this when working on compiler performance improvements. When the optimizer is enabled the build will be slower and incremental builds can be incorrect.\n  - `setupPublishCore` runs `enableOptimizer` and configures a version number based on the current Git SHA. Often used as part of bootstrapping: `sbt setupPublishCore publishLocal && sbt -Dstarr.version=<VERSION> testAll`\n  - `dist/mkBin` generates runner scripts (`scala`, `scalac`, etc) in `build/quick/bin`\n  - `dist/mkPack` creates a build in the Scala distribution format in `build/pack`\n  - `junit/test` runs the JUnit tests; `junit/testOnly *Foo` runs a subset\n  - `scalacheck/test` runs scalacheck tests, use `testOnly` to run a subset\n  - `partest` runs partest tests (accepts options, try `partest --help`)\n  - `publishLocal` publishes a distribution locally (can be used as `scalaVersion` in\n    other sbt projects)\n    - Optionally `set baseVersionSuffix := \"bin-abcd123-SNAPSHOT\"`\n      where `abcd123` is the git hash of the revision being published. You can also\n      use something custom like `\"bin-mypatch\"`. This changes the version number from\n      `2.13.2-SNAPSHOT` to something more stable (`2.13.2-bin-abcd123-SNAPSHOT`).\n    - Note that the `-bin` string marks the version binary compatible. Using it in\n      sbt will cause the `scalaBinaryVersion` to be `2.13`. If the version is not\n      binary compatible, we recommend using `-pre`, e.g., `2.14.0-pre-abcd123-SNAPSHOT`.\n    - Optionally `set ThisBuild / Compile / packageDoc / publishArtifact := false`\n      to skip generating / publishing API docs (speeds up the process).\n\nIf a command results in an error message like `a module is not authorized to depend on\nitself`, it may be that a global sbt plugin is causing\na cyclical dependency. Try disabling global sbt plugins (perhaps by\ntemporarily commenting them out in `~/.sbt/1.0/plugins/plugins.sbt`).\n\n#### Sandbox\n\nWe recommend keeping local test files in the `sandbox` directory which is listed in\nthe `.gitignore` of the Scala repo.\n\n#### Incremental compilation\n\nNote that sbt's incremental compilation is often too coarse for the Scala compiler\ncodebase and re-compiles too many files, resulting in long build times (check\n[sbt#1104](https://github.com/sbt/sbt/issues/1104) for progress on that front). In the\nmeantime you can:\n  - Use IntelliJ IDEA for incremental compiles (see [IDE Setup](#ide-setup) below) - its\n    incremental compiler is a bit less conservative, but usually correct.\n\n### IDE setup\n\nWe suggest using IntelliJ IDEA (see\n[src/intellij/README.md](src/intellij/README.md)).\n\n[Metals](https://scalameta.org/metals/) may also work, but we don't\nyet have instructions or sample configuration for that. A pull request\nin this area would be exceedingly welcome. In the meantime, we are\ncollecting guidance at\n[scala/scala-dev#668](https://github.com/scala/scala-dev/issues/668).\n\nIn order to use IntelliJ's incremental compiler:\n  - run `dist/mkBin` in sbt to get a build and the runner scripts in `build/quick/bin`\n  - run \"Build\" - \"Make Project\" in IntelliJ\n\nNow you can edit and build in IntelliJ and use the scripts (compiler, REPL) to\ndirectly test your changes. You can also run the `scala`, `scalac` and `partest`\ncommands in sbt. Enable \"Ant mode\" (explained above) to prevent sbt's incremental\ncompiler from re-compiling (too many) files before each `partest` invocation.\n\n# Coding guidelines\n\nOur guidelines for contributing are explained in [CONTRIBUTING.md](CONTRIBUTING.md).\nIt contains useful information on our coding standards, testing, documentation, how\nwe use git and GitHub and how to get your code reviewed.\n\nYou may also want to check out the following resources:\n  - The [\"Scala Hacker Guide\"](https://scala-lang.org/contribute/hacker-guide.html)\n    covers some of the same ground as this README, but in greater detail and in a more\n    tutorial style, using a running example.\n  - [Scala documentation site](https://docs.scala-lang.org)\n\n# Scala CI\n\n[![Build Status](https://travis-ci.com/scala/scala.svg?branch=2.13.x)](https://travis-ci.com/scala/scala)\n\nOnce you submit a PR your commits will be automatically tested by the Scala CI.\n\nOur CI setup is always evolving.  See\n[scala/scala-dev#751](https://github.com/scala/scala-dev/issues/751)\nfor more details on how things currently work and how we expect they\nmight change.\n\nIf you see a spurious failure on Jenkins, you can post `/rebuild` as a PR comment.\nThe [scabot README](https://github.com/scala/scabot) lists all available commands.\n\nIf you'd like to test your patch before having everything polished for review,\nyou can have Travis CI build your branch (make sure you have a fork and have Travis CI\nenabled for branch builds on it first, and then push your branch).  Also\nfeel free to submit a draft PR. In case your draft branch contains\na large number of commits (that you didn't clean up / squash yet for review),\nconsider adding `[ci: last-only]` to the PR title. That way only the last commit\nwill be tested, saving some energy and CI-resources. Note that inactive draft PRs\nwill be closed eventually, which does not mean the change is being rejected.\n\nCI performs a compiler bootstrap. The first task, `validatePublishCore`, publishes\na build of your commit to the temporary repository\nhttps://scala-ci.typesafe.com/artifactory/scala-pr-validation-snapshots.\nNote that this build is not yet bootstrapped, its bytecode is built using the\ncurrent STARR. The version number is `2.13.2-bin-abcd123-SNAPSHOT` where `abcd123`\nis the commit hash. For binary incompatible builds, the version number is\n`2.14.0-pre-abcd123-SNAPSHOT`.\n\nYou can use Scala builds in the validation repository locally by adding a resolver\nand specifying the corresponding `scalaVersion`:\n\n```\n$ sbt\n> set resolvers += \"pr\" at \"https://scala-ci.typesafe.com/artifactory/scala-pr-validation-snapshots/\"\n> set scalaVersion := \"2.12.2-bin-abcd123-SNAPSHOT\"\n> console\n```\n\n## \"Nightly\" builds\n\nThe Scala CI publishes these to\nhttps://scala-ci.typesafe.com/artifactory/scala-integration/ .\n\nUsing a nightly build in sbt and other tools is explained on this\n[doc page](https://docs.scala-lang.org/overviews/core/nightlies.html).\n\nAlthough we casually refer to these as \"nightly\" builds, they aren't\nactually built nightly, but \"mergely\".  That is to say, a build is\npublished for every merged PR.\n\n## Scala CI internals\n\nThe Scala CI runs as a Jenkins instance on [scala-ci.typesafe.com](https://scala-ci.typesafe.com/),\nconfigured by a chef cookbook at [scala/scala-jenkins-infra](https://github.com/scala/scala-jenkins-infra).\n\nThe build bot that watches PRs, triggers testing builds and applies the \"reviewed\" label\nafter an LGTM comment is in the [scala/scabot](https://github.com/scala/scabot) repo.\n\n## Community build\n\nThe Scala community build is an important method for testing Scala\nreleases. A community build can be launched for any Scala commit, even\nbefore the commit's PR has been merged. That commit is then used to\nbuild a large number of open-source projects from source and run their\ntest suites.\n\nTo request a community build run on your PR, just ask in a comment on\nthe PR and a Scala team member (probably @SethTisue) will take care of\nit. ([details](https://github.com/scala/community-builds/wiki#can-i-run-it-against-a-pull-request-in-scalascala))\n\nCommunity builds run on the Scala Jenkins instance.  The jobs are\nnamed `..-integrate-community-build`. See the\n[scala/community-builds](https://github.com/scala/community-builds)\nrepo.\n",
        "releases": [
            {
                "name": "Scala 2.13.16",
                "date": "2025-01-15T23:51:00Z"
            },
            {
                "name": "Scala 2.13.15",
                "date": "2024-09-25T16:51:42Z"
            },
            {
                "name": "Scala 2.12.20",
                "date": "2024-09-04T15:14:18Z"
            },
            {
                "name": "Scala 2.13.14",
                "date": "2024-05-01T21:26:27Z"
            },
            {
                "name": "Scala 2.13.13",
                "date": "2024-02-26T19:57:22Z"
            },
            {
                "name": "Scala 2.12.19",
                "date": "2024-02-26T19:46:56Z"
            },
            {
                "name": "Scala 2.13.12",
                "date": "2023-09-11T09:48:17Z"
            },
            {
                "name": "Scala 2.13.11",
                "date": "2023-06-07T16:17:22Z"
            },
            {
                "name": "Scala 2.12.18",
                "date": "2023-06-07T15:15:42Z"
            },
            {
                "name": "Scala 2.13.10",
                "date": "2022-10-13T13:02:34Z"
            },
            {
                "name": "Scala 2.13.9",
                "date": "2022-09-21T21:03:15Z"
            },
            {
                "name": "Scala 2.12.17",
                "date": "2022-09-16T21:44:57Z"
            },
            {
                "name": "Scala 2.12.16",
                "date": "2022-06-10T15:02:48Z"
            },
            {
                "name": "Scala 2.13.8",
                "date": "2022-01-13T00:53:03Z"
            },
            {
                "name": "Scala 2.13.7",
                "date": "2021-11-01T15:09:30Z"
            },
            {
                "name": "Scala 2.12.15",
                "date": "2021-09-14T19:45:00Z"
            },
            {
                "name": "Scala 2.12.14",
                "date": "2021-05-28T02:22:57Z"
            },
            {
                "name": "Scala 2.13.6",
                "date": "2021-05-17T09:58:33Z"
            },
            {
                "name": "Scala 2.13.5",
                "date": "2021-02-22T21:01:41Z"
            },
            {
                "name": "Scala 2.12.13",
                "date": "2021-01-13T01:27:42Z"
            },
            {
                "name": "Scala 2.13.4",
                "date": "2020-11-19T10:45:00Z"
            },
            {
                "name": "Scala 2.12.12",
                "date": "2020-07-13T06:03:35Z"
            },
            {
                "name": "Scala 2.13.3",
                "date": "2020-06-25T21:05:59Z"
            },
            {
                "name": "Scala 2.13.2",
                "date": "2020-04-23T04:25:50Z"
            },
            {
                "name": "Scala 2.12.11",
                "date": "2020-03-16T12:50:15Z"
            },
            {
                "name": "Scala 2.13.1",
                "date": "2019-09-18T09:48:10Z"
            },
            {
                "name": "Scala 2.12.10",
                "date": "2019-09-10T22:34:41Z"
            },
            {
                "name": "Scala 2.12.9",
                "date": "2019-08-05T19:07:46Z"
            },
            {
                "name": "Scala 2.13.0",
                "date": "2019-06-07T12:15:18Z"
            },
            {
                "name": "Scala 2.13.0-RC3",
                "date": "2019-05-29T15:13:09Z"
            },
            {
                "name": "Scala 2.13.0-RC2",
                "date": "2019-05-17T09:04:32Z"
            },
            {
                "name": "Scala 2.13.0-RC1",
                "date": "2019-04-05T10:40:04Z"
            },
            {
                "name": "Scala 2.12.8",
                "date": "2018-12-04T10:59:04Z"
            },
            {
                "name": "Scala 2.12.7",
                "date": "2018-09-27T12:07:34Z"
            },
            {
                "name": "Scala 2.13.0-M5",
                "date": "2018-08-28T14:56:38Z"
            },
            {
                "name": "Scala 2.13.0-M4",
                "date": "2018-05-15T09:23:24Z"
            },
            {
                "name": "Scala 2.12.6",
                "date": "2018-04-27T15:21:56Z"
            },
            {
                "name": "Scala 2.12.5",
                "date": "2018-03-20T06:06:14Z"
            },
            {
                "name": "Scala 2.13.0-M3",
                "date": "2018-01-31T21:22:25Z"
            },
            {
                "name": "Scala 2.11.12",
                "date": "2017-11-09T20:06:44Z"
            },
            {
                "name": "Scala 2.10.7",
                "date": "2017-11-09T20:03:33Z"
            },
            {
                "name": "Scala 2.12.4",
                "date": "2017-10-19T22:54:12Z"
            },
            {
                "name": "Scala 2.12.3",
                "date": "2017-07-27T22:45:02Z"
            },
            {
                "name": "Scala 2.13.0-M2",
                "date": "2017-07-29T01:13:22Z"
            },
            {
                "name": "Scala 2.13.0-M1",
                "date": "2017-04-18T14:49:39Z"
            },
            {
                "name": "Scala 2.12.2",
                "date": "2017-04-18T14:32:27Z"
            },
            {
                "name": "Scala 2.11.11: all the way to eleven!",
                "date": "2017-04-18T14:32:08Z"
            },
            {
                "name": "[Do not use] Scala 2.11.10, please upgrade to 2.11.11",
                "date": "2017-04-13T00:17:11Z"
            },
            {
                "name": "[Do not use] Scala 2.11.9, please upgrade to 2.11.11",
                "date": "2017-04-13T00:16:21Z"
            },
            {
                "name": "Scala 2.12.1",
                "date": "2016-12-05T20:29:38Z"
            },
            {
                "name": "Scala 2.12.0",
                "date": "2016-11-03T00:33:37Z"
            },
            {
                "name": "Scala 2.12.0-RC2",
                "date": "2016-10-18T19:00:27Z"
            },
            {
                "name": "Scala 2.12.0-RC1",
                "date": "2016-09-13T23:36:18Z"
            },
            {
                "name": "Scala 2.12.0-M5",
                "date": "2016-06-29T23:29:38Z"
            },
            {
                "name": "Scala 2.12.0-M4",
                "date": "2016-04-04T23:33:58Z"
            },
            {
                "name": "Scala 2.12.0-M3-dc9effe",
                "date": "2016-03-18T07:21:17Z"
            },
            {
                "name": "Scala 2.11.8",
                "date": "2016-03-09T03:27:30Z"
            },
            {
                "name": "Scala 2.12.0-M3",
                "date": "2015-10-06T14:55:20Z"
            },
            {
                "name": "Scala 2.10.6",
                "date": "2015-09-18T17:45:51Z"
            },
            {
                "name": "Scala 2.12.0-M2",
                "date": "2015-07-15T20:52:42Z"
            },
            {
                "name": "Scala 2.11.7",
                "date": "2015-06-23T22:28:24Z"
            },
            {
                "name": "Scala 2.12.0-M1",
                "date": "2015-05-05T14:03:11Z"
            },
            {
                "name": "The Last 2.10.x Release: 2.10.5",
                "date": "2015-03-05T02:05:40Z"
            },
            {
                "name": "Scala 2.11.6 is now available!",
                "date": "2015-03-05T01:29:49Z"
            },
            {
                "name": "Scala 2.11.5 is now available!",
                "date": "2015-01-14T18:44:09Z"
            },
            {
                "name": "Scala 2.11.4",
                "date": "2014-10-31T11:44:26Z"
            },
            {
                "name": "Scala 2.11.2",
                "date": "2014-07-23T13:27:59Z"
            },
            {
                "name": "Scala 2.11.1 is now available!",
                "date": "2014-05-21T14:20:30Z"
            },
            {
                "name": "Scala 2.11.0 final release!",
                "date": "2014-04-17T17:27:27Z"
            },
            {
                "name": "Scala 2.11.0-RC4: fourth RC's a charm",
                "date": "2014-04-08T17:46:23Z"
            },
            {
                "name": "Scala 2.11.0-RC3: three is the new two!",
                "date": "2014-03-20T00:27:39Z"
            },
            {
                "name": "(Superseded by 2.11.0-RC3)",
                "date": "2014-03-19T02:56:12Z"
            },
            {
                "name": "Scala 2.10.4",
                "date": "2017-11-09T20:00:03Z"
            },
            {
                "name": "Scala 2.11.0-RC1",
                "date": "2014-03-05T23:42:20Z"
            },
            {
                "name": "Scala 2.11.0-M7",
                "date": "2013-11-19T00:46:04Z"
            },
            {
                "name": "Scala 2.11.0-M5",
                "date": "2013-09-28T00:50:20Z"
            },
            {
                "name": "Scala 2.11.0-M4",
                "date": "2013-07-16T01:32:11Z"
            }
        ]
    }
}