{
    "https://api.github.com/repos/remarkjs/react-markdown": {
        "forks": 891,
        "watchers": 13543,
        "stars": 13543,
        "languages": {
            "JavaScript": 42606
        },
        "commits": [
            "2025-01-06T11:15:23Z",
            "2025-01-06T10:33:23Z",
            "2025-01-06T10:30:19Z",
            "2025-01-06T10:29:38Z",
            "2025-01-02T15:01:50Z",
            "2025-01-02T14:59:37Z",
            "2025-01-02T11:42:11Z",
            "2024-11-21T08:49:49Z",
            "2024-10-25T08:26:17Z",
            "2024-10-15T11:34:47Z",
            "2024-10-15T11:34:16Z",
            "2024-10-15T11:33:43Z",
            "2024-10-15T11:33:36Z",
            "2024-09-19T13:11:12Z",
            "2024-09-19T13:10:54Z",
            "2024-09-19T13:10:26Z",
            "2024-09-19T13:09:11Z",
            "2024-08-19T12:06:41Z",
            "2024-08-19T11:32:37Z",
            "2024-07-15T07:48:33Z",
            "2024-06-28T11:22:10Z",
            "2024-06-28T10:08:02Z",
            "2024-06-16T15:16:00Z",
            "2024-03-25T10:34:00Z",
            "2023-11-13T13:58:58Z",
            "2023-11-13T13:55:00Z",
            "2023-11-06T13:51:25Z",
            "2023-10-15T16:37:12Z",
            "2023-09-28T07:25:33Z",
            "2023-09-28T07:23:50Z"
        ],
        "creation_date": "2015-05-18T23:59:17Z",
        "contributors": 30,
        "topics": [
            "commonmark",
            "gfm",
            "markdown",
            "react",
            "remark"
        ],
        "subscribers": 54,
        "readme": "<!--\nNotes for maintaining this document:\n\n*   Update the link for `cm-html` once in a while\n-->\n\n# react-markdown\n\n[![Build][build-badge]][build]\n[![Coverage][coverage-badge]][coverage]\n[![Downloads][downloads-badge]][downloads]\n[![Size][size-badge]][size]\n[![Sponsors][sponsors-badge]][collective]\n[![Backers][backers-badge]][collective]\n[![Chat][chat-badge]][chat]\n\nReact component to render markdown.\n\n## Feature highlights\n\n* [x] **[safe][section-security] by default**\n  (no `dangerouslySetInnerHTML` or XSS attacks)\n* [x] **[components][section-components]**\n  (pass your own component to use instead of `<h2>` for `## hi`)\n* [x] **[plugins][section-plugins]**\n  (many plugins you can pick and choose from)\n* [x] **[compliant][section-syntax]**\n  (100% to CommonMark, 100% to GFM with a plugin)\n\n## Contents\n\n* [What is this?](#what-is-this)\n* [When should I use this?](#when-should-i-use-this)\n* [Install](#install)\n* [Use](#use)\n* [API](#api)\n  * [`Markdown`](#markdown)\n  * [`defaultUrlTransform(url)`](#defaulturltransformurl)\n  * [`AllowElement`](#allowelement)\n  * [`Components`](#components)\n  * [`ExtraProps`](#extraprops)\n  * [`Options`](#options)\n  * [`UrlTransform`](#urltransform)\n* [Examples](#examples)\n  * [Use a plugin](#use-a-plugin)\n  * [Use a plugin with options](#use-a-plugin-with-options)\n  * [Use custom components (syntax highlight)](#use-custom-components-syntax-highlight)\n  * [Use remark and rehype plugins (math)](#use-remark-and-rehype-plugins-math)\n* [Plugins](#plugins)\n* [Syntax](#syntax)\n* [Types](#types)\n* [Compatibility](#compatibility)\n* [Architecture](#architecture)\n* [Appendix A: HTML in markdown](#appendix-a-html-in-markdown)\n* [Appendix B: Components](#appendix-b-components)\n* [Appendix C: line endings in markdown (and JSX)](#appendix-c-line-endings-in-markdown-and-jsx)\n* [Security](#security)\n* [Related](#related)\n* [Contribute](#contribute)\n* [License](#license)\n\n## What is this?\n\nThis package is a [React][] component that can be given a string of markdown\nthat it\u2019ll safely render to React elements.\nYou can pass plugins to change how markdown is transformed and pass components\nthat will be used instead of normal HTML elements.\n\n* to learn markdown, see this [cheatsheet and tutorial][commonmark-help]\n* to try out `react-markdown`, see [our demo][demo]\n\n## When should I use this?\n\nThere are other ways to use markdown in React out there so why use this one?\nThe three main reasons are that they often rely on `dangerouslySetInnerHTML`,\nhave bugs with how they handle markdown, or don\u2019t let you swap elements for\ncomponents.\n`react-markdown` builds a virtual DOM, so React only replaces what changed,\nfrom a syntax tree.\nThat\u2019s supported because we use [unified][], specifically [remark][] for\nmarkdown and [rehype][] for HTML, which are popular tools to transform content\nwith plugins.\n\nThis package focusses on making it easy for beginners to safely use markdown in\nReact.\nWhen you\u2019re familiar with unified, you can use a modern hooks based alternative\n[`react-remark`][react-remark] or [`rehype-react`][rehype-react] manually.\nIf you instead want to use JavaScript and JSX *inside* markdown files, use\n[MDX][].\n\n## Install\n\nThis package is [ESM only][esm].\nIn Node.js (version 16+), install with [npm][]:\n\n```sh\nnpm install react-markdown\n```\n\nIn Deno with [`esm.sh`][esmsh]:\n\n```js\nimport Markdown from 'https://esm.sh/react-markdown@9'\n```\n\nIn browsers with [`esm.sh`][esmsh]:\n\n```html\n<script type=\"module\">\n  import Markdown from 'https://esm.sh/react-markdown@9?bundle'\n</script>\n```\n\n## Use\n\nA basic hello world:\n\n```jsx\nimport React from 'react'\nimport {createRoot} from 'react-dom/client'\nimport Markdown from 'react-markdown'\n\nconst markdown = '# Hi, *Pluto*!'\n\ncreateRoot(document.body).render(<Markdown>{markdown}</Markdown>)\n```\n\n<details>\n<summary>Show equivalent JSX</summary>\n\n```jsx\n<h1>\n  Hi, <em>Pluto</em>!\n</h1>\n```\n\n</details>\n\nHere is an example that shows how to use a plugin ([`remark-gfm`][remark-gfm],\nwhich adds support for footnotes, strikethrough, tables, tasklists and URLs\ndirectly):\n\n```jsx\nimport React from 'react'\nimport {createRoot} from 'react-dom/client'\nimport Markdown from 'react-markdown'\nimport remarkGfm from 'remark-gfm'\n\nconst markdown = `Just a link: www.nasa.gov.`\n\ncreateRoot(document.body).render(\n  <Markdown remarkPlugins={[remarkGfm]}>{markdown}</Markdown>\n)\n```\n\n<details>\n<summary>Show equivalent JSX</summary>\n\n```jsx\n<p>\n  Just a link: <a href=\"http://www.nasa.gov\">www.nasa.gov</a>.\n</p>\n```\n\n</details>\n\n## API\n\nThis package exports the following identifier:\n[`defaultUrlTransform`][api-default-url-transform].\nThe default export is [`Markdown`][api-markdown].\n\n### `Markdown`\n\nComponent to render markdown.\n\n###### Parameters\n\n* `options` ([`Options`][api-options])\n  \u2014 props\n\n###### Returns\n\nReact element (`JSX.Element`).\n\n### `defaultUrlTransform(url)`\n\nMake a URL safe.\n\n###### Parameters\n\n* `url` (`string`)\n  \u2014 URL\n\n###### Returns\n\nSafe URL (`string`).\n\n### `AllowElement`\n\nFilter elements (TypeScript type).\n\n###### Parameters\n\n* `node` ([`Element` from `hast`][hast-element])\n  \u2014 element to check\n* `index` (`number | undefined`)\n  \u2014 index of `element` in `parent`\n* `parent` ([`Node` from `hast`][hast-node])\n  \u2014 parent of `element`\n\n###### Returns\n\nWhether to allow `element` (`boolean`, optional).\n\n### `Components`\n\nMap tag names to components (TypeScript type).\n\n###### Type\n\n```ts\nimport type {Element} from 'hast'\n\ntype Components = Partial<{\n  [TagName in keyof JSX.IntrinsicElements]:\n    // Class component:\n    | (new (props: JSX.IntrinsicElements[TagName] & ExtraProps) => JSX.ElementClass)\n    // Function component:\n    | ((props: JSX.IntrinsicElements[TagName] & ExtraProps) => JSX.Element | string | null | undefined)\n    // Tag name:\n    | keyof JSX.IntrinsicElements\n}>\n```\n\n### `ExtraProps`\n\nExtra fields we pass to components (TypeScript type).\n\n###### Fields\n\n* `node` ([`Element` from `hast`][hast-element], optional)\n  \u2014 original node\n\n### `Options`\n\nConfiguration (TypeScript type).\n\n###### Fields\n\n* `allowElement` ([`AllowElement`][api-allow-element], optional)\n  \u2014 filter elements;\n  `allowedElements` / `disallowedElements` is used first\n* `allowedElements` (`Array<string>`, default: all tag names)\n  \u2014 tag names to allow;\n  cannot combine w/ `disallowedElements`\n* `children` (`string`, optional)\n  \u2014 markdown\n* `className` (`string`, optional)\n  \u2014 wrap in a `div` with this class name\n* `components` ([`Components`][api-components], optional)\n  \u2014 map tag names to components\n* `disallowedElements` (`Array<string>`, default: `[]`)\n  \u2014 tag names to disallow;\n  cannot combine w/ `allowedElements`\n* `rehypePlugins` (`Array<Plugin>`, optional)\n  \u2014 list of [rehype plugins][rehype-plugins] to use\n* `remarkPlugins` (`Array<Plugin>`, optional)\n  \u2014 list of [remark plugins][remark-plugins] to use\n* `remarkRehypeOptions` ([`Options` from\n  `remark-rehype`][remark-rehype-options], optional)\n  \u2014 options to pass through to `remark-rehype`\n* `skipHtml` (`boolean`, default: `false`)\n  \u2014 ignore HTML in markdown completely\n* `unwrapDisallowed` (`boolean`, default: `false`)\n  \u2014 extract (unwrap) what\u2019s in disallowed elements;\n  normally when say `strong` is not allowed, it and it\u2019s children are dropped,\n  with `unwrapDisallowed` the element itself is replaced by its children\n* `urlTransform` ([`UrlTransform`][api-url-transform], default:\n  [`defaultUrlTransform`][api-default-url-transform])\n  \u2014 change URLs\n\n### `UrlTransform`\n\nTransform URLs (TypeScript type).\n\n###### Parameters\n\n* `url` (`string`)\n  \u2014 URL\n* `key` (`string`, example: `'href'`)\n  \u2014 property name\n* `node` ([`Element` from `hast`][hast-element])\n  \u2014 element to check\n\n###### Returns\n\nTransformed URL (`string`, optional).\n\n## Examples\n\n### Use a plugin\n\nThis example shows how to use a remark plugin.\nIn this case, [`remark-gfm`][remark-gfm], which adds support for strikethrough,\ntables, tasklists and URLs directly:\n\n```jsx\nimport React from 'react'\nimport {createRoot} from 'react-dom/client'\nimport Markdown from 'react-markdown'\nimport remarkGfm from 'remark-gfm'\n\nconst markdown = `A paragraph with *emphasis* and **strong importance**.\n\n> A block quote with ~strikethrough~ and a URL: https://reactjs.org.\n\n* Lists\n* [ ] todo\n* [x] done\n\nA table:\n\n| a | b |\n| - | - |\n`\n\ncreateRoot(document.body).render(\n  <Markdown remarkPlugins={[remarkGfm]}>{markdown}</Markdown>\n)\n```\n\n<details>\n<summary>Show equivalent JSX</summary>\n\n```jsx\n<>\n  <p>\n    A paragraph with <em>emphasis</em> and <strong>strong importance</strong>.\n  </p>\n  <blockquote>\n    <p>\n      A block quote with <del>strikethrough</del> and a URL:{' '}\n      <a href=\"https://reactjs.org\">https://reactjs.org</a>.\n    </p>\n  </blockquote>\n  <ul className=\"contains-task-list\">\n    <li>Lists</li>\n    <li className=\"task-list-item\">\n      <input type=\"checkbox\" disabled /> todo\n    </li>\n    <li className=\"task-list-item\">\n      <input type=\"checkbox\" disabled checked /> done\n    </li>\n  </ul>\n  <p>A table:</p>\n  <table>\n    <thead>\n      <tr>\n        <th>a</th>\n        <th>b</th>\n      </tr>\n    </thead>\n  </table>\n</>\n```\n\n</details>\n\n### Use a plugin with options\n\nThis example shows how to use a plugin and give it options.\nTo do that, use an array with the plugin at the first place, and the options\nsecond.\n[`remark-gfm`][remark-gfm] has an option to allow only double tildes for\nstrikethrough:\n\n```jsx\nimport React from 'react'\nimport {createRoot} from 'react-dom/client'\nimport Markdown from 'react-markdown'\nimport remarkGfm from 'remark-gfm'\n\nconst markdown = 'This ~is not~ strikethrough, but ~~this is~~!'\n\ncreateRoot(document.body).render(\n  <Markdown remarkPlugins={[[remarkGfm, {singleTilde: false}]]}>\n    {markdown}\n  </Markdown>\n)\n```\n\n<details>\n<summary>Show equivalent JSX</summary>\n\n```jsx\n<p>\n  This ~is not~ strikethrough, but <del>this is</del>!\n</p>\n```\n\n</details>\n\n### Use custom components (syntax highlight)\n\nThis example shows how you can overwrite the normal handling of an element by\npassing a component.\nIn this case, we apply syntax highlighting with the seriously super amazing\n[`react-syntax-highlighter`][react-syntax-highlighter] by\n[**@conorhastings**][conor]:\n\n<!-- To do: currently broken on actual ESM; let\u2019s find an alternative? -->\n\n```jsx\nimport React from 'react'\nimport {createRoot} from 'react-dom/client'\nimport Markdown from 'react-markdown'\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter'\nimport {dark} from 'react-syntax-highlighter/dist/esm/styles/prism'\n\n// Did you know you can use tildes instead of backticks for code in markdown? \u2728\nconst markdown = `Here is some JavaScript code:\n\n~~~js\nconsole.log('It works!')\n~~~\n`\n\ncreateRoot(document.body).render(\n  <Markdown\n    children={markdown}\n    components={{\n      code(props) {\n        const {children, className, node, ...rest} = props\n        const match = /language-(\\w+)/.exec(className || '')\n        return match ? (\n          <SyntaxHighlighter\n            {...rest}\n            PreTag=\"div\"\n            children={String(children).replace(/\\n$/, '')}\n            language={match[1]}\n            style={dark}\n          />\n        ) : (\n          <code {...rest} className={className}>\n            {children}\n          </code>\n        )\n      }\n    }}\n  />\n)\n```\n\n<details>\n<summary>Show equivalent JSX</summary>\n\n```jsx\n<>\n  <p>Here is some JavaScript code:</p>\n  <pre>\n    <SyntaxHighlighter language=\"js\" style={dark} PreTag=\"div\" children=\"console.log('It works!')\" />\n  </pre>\n</>\n```\n\n</details>\n\n### Use remark and rehype plugins (math)\n\nThis example shows how a syntax extension (through [`remark-math`][remark-math])\nis used to support math in markdown, and a transform plugin\n([`rehype-katex`][rehype-katex]) to render that math.\n\n```jsx\nimport React from 'react'\nimport {createRoot} from 'react-dom/client'\nimport Markdown from 'react-markdown'\nimport rehypeKatex from 'rehype-katex'\nimport remarkMath from 'remark-math'\nimport 'katex/dist/katex.min.css' // `rehype-katex` does not import the CSS for you\n\nconst markdown = `The lift coefficient ($C_L$) is a dimensionless coefficient.`\n\ncreateRoot(document.body).render(\n  <Markdown remarkPlugins={[remarkMath]} rehypePlugins={[rehypeKatex]}>\n    {markdown}\n  </Markdown>\n)\n```\n\n<details>\n<summary>Show equivalent JSX</summary>\n\n```jsx\n<p>\n  The lift coefficient (\n  <span className=\"katex\">\n    <span className=\"katex-mathml\">\n      <math xmlns=\"http://www.w3.org/1998/Math/MathML\">{/* \u2026 */}</math>\n    </span>\n    <span className=\"katex-html\" aria-hidden=\"true\">\n      {/* \u2026 */}\n    </span>\n  </span>\n  ) is a dimensionless coefficient.\n</p>\n```\n\n</details>\n\n## Plugins\n\nWe use [unified][], specifically [remark][] for markdown and [rehype][] for\nHTML, which are tools to transform content with plugins.\nHere are three good ways to find plugins:\n\n* [`awesome-remark`][awesome-remark] and [`awesome-rehype`][awesome-rehype]\n  \u2014 selection of the most awesome projects\n* [List of remark plugins][remark-plugins] and\n  [list of rehype plugins][rehype-plugins]\n  \u2014 list of all plugins\n* [`remark-plugin`][remark-plugin] and [`rehype-plugin`][rehype-plugin] topics\n  \u2014 any tagged repo on GitHub\n\n## Syntax\n\n`react-markdown` follows CommonMark, which standardizes the differences between\nmarkdown implementations, by default.\nSome syntax extensions are supported through plugins.\n\nWe use [`micromark`][micromark] under the hood for our parsing.\nSee its documentation for more information on markdown, CommonMark, and\nextensions.\n\n## Types\n\nThis package is fully typed with [TypeScript][].\nIt exports the additional types\n[`AllowElement`][api-allow-element],\n[`ExtraProps`][api-extra-props],\n[`Components`][api-components],\n[`Options`][api-options], and\n[`UrlTransform`][api-url-transform].\n\n## Compatibility\n\nProjects maintained by the unified collective are compatible with maintained\nversions of Node.js.\n\nWhen we cut a new major release, we drop support for unmaintained versions of\nNode.\nThis means we try to keep the current release line, `react-markdown@^9`,\ncompatible with Node.js 16.\n\nThey work in all modern browsers (essentially: everything not IE 11).\nYou can use a bundler (such as esbuild, webpack, or Rollup) to use this package\nin your project, and use its options (or plugins) to add support for legacy\nbrowsers.\n\n## Architecture\n\n<pre><code>                                                           react-markdown\n         +----------------------------------------------------------------------------------------------------------------+\n         |                                                                                                                |\n         |  +----------+        +----------------+        +---------------+       +----------------+       +------------+ |\n         |  |          |        |                |        |               |       |                |       |            | |\n<a href=\"https://commonmark.org\">markdown</a>-+->+  <a href=\"https://github.com/remarkjs/remark\">remark</a>  +-<a href=\"https://github.com/syntax-tree/mdast\">mdast</a>->+ <a href=\"https://github.com/remarkjs/remark/blob/main/doc/plugins.md\">remark plugins</a> +-<a href=\"https://github.com/syntax-tree/mdast\">mdast</a>->+ <a href=\"https://github.com/remarkjs/remark-rehype\">remark-rehype</a> +-<a href=\"https://github.com/syntax-tree/hast\">hast</a>->+ <a href=\"https://github.com/rehypejs/rehype/blob/main/doc/plugins.md\">rehype plugins</a> +-<a href=\"https://github.com/syntax-tree/hast\">hast</a>->+ <a href=\"#appendix-b-components\">components</a> +-+->react elements\n         |  |          |        |                |        |               |       |                |       |            | |\n         |  +----------+        +----------------+        +---------------+       +----------------+       +------------+ |\n         |                                                                                                                |\n         +----------------------------------------------------------------------------------------------------------------+\n</code></pre>\n\nTo understand what this project does, it\u2019s important to first understand what\nunified does: please read through the [`unifiedjs/unified`][unified] readme (the\npart until you hit the API section is required reading).\n\n`react-markdown` is a unified pipeline \u2014 wrapped so that most folks don\u2019t need\nto directly interact with unified.\nThe processor goes through these steps:\n\n* parse markdown to mdast (markdown syntax tree)\n* transform through remark (markdown ecosystem)\n* transform mdast to hast (HTML syntax tree)\n* transform through rehype (HTML ecosystem)\n* render hast to React with components\n\n## Appendix A: HTML in markdown\n\n`react-markdown` typically escapes HTML (or ignores it, with `skipHtml`)\nbecause it is dangerous and defeats the purpose of this library.\n\nHowever, if you are in a trusted environment (you trust the markdown), and\ncan spare the bundle size (\u00b160kb minzipped), then you can use\n[`rehype-raw`][rehype-raw]:\n\n```jsx\nimport React from 'react'\nimport {createRoot} from 'react-dom/client'\nimport Markdown from 'react-markdown'\nimport rehypeRaw from 'rehype-raw'\n\nconst markdown = `<div class=\"note\">\n\nSome *emphasis* and <strong>strong</strong>!\n\n</div>`\n\ncreateRoot(document.body).render(\n  <Markdown rehypePlugins={[rehypeRaw]}>{markdown}</Markdown>\n)\n```\n\n<details>\n<summary>Show equivalent JSX</summary>\n\n```jsx\n<div className=\"note\">\n  <p>\n    Some <em>emphasis</em> and <strong>strong</strong>!\n  </p>\n</div>\n```\n\n</details>\n\n**Note**: HTML in markdown is still bound by how [HTML works in\nCommonMark][commonmark-html].\nMake sure to use blank lines around block-level HTML that again contains\nmarkdown!\n\n## Appendix B: Components\n\nYou can also change the things that come from markdown:\n\n```jsx\n<Markdown\n  components={{\n    // Map `h1` (`# heading`) to use `h2`s.\n    h1: 'h2',\n    // Rewrite `em`s (`*like so*`) to `i` with a red foreground color.\n    em(props) {\n      const {node, ...rest} = props\n      return <i style={{color: 'red'}} {...rest} />\n    }\n  }}\n/>\n```\n\nThe keys in components are HTML equivalents for the things you write with\nmarkdown (such as `h1` for `# heading`).\nNormally, in markdown, those are: `a`, `blockquote`, `br`, `code`, `em`, `h1`,\n`h2`, `h3`, `h4`, `h5`, `h6`, `hr`, `img`, `li`, `ol`, `p`, `pre`, `strong`, and\n`ul`.\nWith [`remark-gfm`][remark-gfm], you can also use `del`, `input`, `table`,\n`tbody`, `td`, `th`, `thead`, and `tr`.\nOther remark or rehype plugins that add support for new constructs will also\nwork with `react-markdown`.\n\nThe props that are passed are what you probably would expect: an `a` (link) will\nget `href` (and `title`) props, and `img` (image) an `src`, `alt` and `title`,\netc.\n\nEvery component will receive a `node`.\nThis is the original [`Element` from `hast`][hast-element] element being turned\ninto a React element.\n\n## Appendix C: line endings in markdown (and JSX)\n\nYou might have trouble with how line endings work in markdown and JSX.\nWe recommend the following, which solves all line ending problems:\n\n```jsx\n// If you write actual markdown in your code, put your markdown in a variable;\n// **do not indent markdown**:\nconst markdown = `\n# This is perfect!\n`\n\n// Pass the value as an expression as an only child:\nconst result = <Markdown>{markdown}</Markdown>\n```\n\n\ud83d\udc46 That works.\nRead on for what doesn\u2019t and why that is.\n\nYou might try to write markdown directly in your JSX and find that it **does\nnot** work:\n\n```jsx\n<Markdown>\n  # Hi\n\n  This is **not** a paragraph.\n</Markdown>\n```\n\nThe is because in JSX the whitespace (including line endings) is collapsed to\na single space.\nSo the above example is equivalent to:\n\n```jsx\n<Markdown> # Hi This is **not** a paragraph. </Markdown>\n```\n\nInstead, to pass markdown to `Markdown`, you can use an expression:\nwith a template literal:\n\n```jsx\n<Markdown>{`\n# Hi\n\nThis is a paragraph.\n`}</Markdown>\n```\n\nTemplate literals have another potential problem, because they keep whitespace\n(including indentation) inside them.\nThat means that the following **does not** turn into a heading:\n\n```jsx\n<Markdown>{`\n    # This is **not** a heading, it\u2019s an indented code block\n`}</Markdown>\n```\n\n## Security\n\nUse of `react-markdown` is secure by default.\nOverwriting `urlTransform` to something insecure will open you up to XSS\nvectors.\nFurthermore, the `remarkPlugins`, `rehypePlugins`, and `components` you use may\nbe insecure.\n\nTo make sure the content is completely safe, even after what plugins do,\nuse [`rehype-sanitize`][rehype-sanitize].\nIt lets you define your own schema of what is and isn\u2019t allowed.\n\n## Related\n\n* [`MDX`][mdx]\n  \u2014 JSX *in* markdown\n* [`remark-gfm`][remark-gfm]\n  \u2014 add support for GitHub flavored markdown support\n* [`react-remark`][react-remark]\n  \u2014 hook based alternative\n* [`rehype-react`][rehype-react]\n  \u2014 turn HTML into React elements\n\n## Contribute\n\nSee [`contributing.md`][contributing] in [`remarkjs/.github`][health] for ways\nto get started.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] \u00a9 [Espen Hovlandsdal][author]\n\n[build-badge]: https://github.com/remarkjs/react-markdown/workflows/main/badge.svg\n\n[build]: https://github.com/remarkjs/react-markdown/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/remarkjs/react-markdown.svg\n\n[coverage]: https://codecov.io/github/remarkjs/react-markdown\n\n[downloads-badge]: https://img.shields.io/npm/dm/react-markdown.svg\n\n[downloads]: https://www.npmjs.com/package/react-markdown\n\n[size-badge]: https://img.shields.io/bundlejs/size/react-markdown\n\n[size]: https://bundlejs.com/?q=react-markdown\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/remarkjs/remark/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[esm]: https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c\n\n[esmsh]: https://esm.sh\n\n[health]: https://github.com/remarkjs/.github\n\n[coc]: https://github.com/remarkjs/.github/blob/main/code-of-conduct.md\n\n[contributing]: https://github.com/remarkjs/.github/blob/main/contributing.md\n\n[support]: https://github.com/remarkjs/.github/blob/main/support.md\n\n[license]: license\n\n[author]: https://espen.codes/\n\n[awesome-remark]: https://github.com/remarkjs/awesome-remark\n\n[awesome-rehype]: https://github.com/rehypejs/awesome-rehype\n\n[commonmark-help]: https://commonmark.org/help/\n\n[commonmark-html]: https://spec.commonmark.org/0.30/#html-blocks\n\n[hast-element]: https://github.com/syntax-tree/hast#element\n\n[hast-node]: https://github.com/syntax-tree/hast#nodes\n\n[mdx]: https://github.com/mdx-js/mdx/\n\n[micromark]: https://github.com/micromark/micromark\n\n[react]: http://reactjs.org\n\n[react-remark]: https://github.com/remarkjs/react-remark\n\n[react-syntax-highlighter]: https://github.com/react-syntax-highlighter/react-syntax-highlighter\n\n[rehype]: https://github.com/rehypejs/rehype\n\n[rehype-katex]: https://github.com/remarkjs/remark-math/tree/main/packages/rehype-katex\n\n[rehype-plugin]: https://github.com/topics/rehype-plugin\n\n[rehype-plugins]: https://github.com/rehypejs/rehype/blob/main/doc/plugins.md#list-of-plugins\n\n[rehype-react]: https://github.com/rehypejs/rehype-react\n\n[rehype-raw]: https://github.com/rehypejs/rehype-raw\n\n[rehype-sanitize]: https://github.com/rehypejs/rehype-sanitize\n\n[remark]: https://github.com/remarkjs/remark\n\n[remark-gfm]: https://github.com/remarkjs/remark-gfm\n\n[remark-math]: https://github.com/remarkjs/remark-math\n\n[remark-plugin]: https://github.com/topics/remark-plugin\n\n[remark-plugins]: https://github.com/remarkjs/remark/blob/main/doc/plugins.md#list-of-plugins\n\n[remark-rehype-options]: https://github.com/remarkjs/remark-rehype#options\n\n[unified]: https://github.com/unifiedjs/unified\n\n[typescript]: https://www.typescriptlang.org\n\n[conor]: https://github.com/conorhastings\n\n[demo]: https://remarkjs.github.io/react-markdown/\n\n[section-components]: #appendix-b-components\n\n[section-plugins]: #plugins\n\n[section-security]: #security\n\n[section-syntax]: #syntax\n\n[api-allow-element]: #allowelement\n\n[api-components]: #components\n\n[api-default-url-transform]: #defaulturltransformurl\n\n[api-extra-props]: #extraprops\n\n[api-markdown]: #markdown\n\n[api-options]: #options\n\n[api-url-transform]: #urltransform\n",
        "releases": [
            {
                "name": "9.0.3",
                "date": "2025-01-06T11:16:02Z"
            },
            {
                "name": "9.0.2",
                "date": "2025-01-06T10:35:48Z"
            },
            {
                "name": "9.0.1",
                "date": "2023-11-13T13:59:58Z"
            },
            {
                "name": "9.0.0",
                "date": "2023-09-27T16:12:22Z"
            },
            {
                "name": "8.0.7",
                "date": "2023-04-12T10:10:23Z"
            },
            {
                "name": "8.0.6",
                "date": "2023-03-20T12:48:17Z"
            },
            {
                "name": "8.0.5",
                "date": "2023-01-17T19:20:42Z"
            },
            {
                "name": "8.0.4",
                "date": "2022-12-01T07:57:37Z"
            },
            {
                "name": "8.0.3",
                "date": "2022-04-20T13:01:38Z"
            },
            {
                "name": "8.0.2",
                "date": "2022-03-31T14:27:17Z"
            },
            {
                "name": "8.0.1",
                "date": "2022-03-14T10:16:54Z"
            },
            {
                "name": "8.0.0",
                "date": "2022-01-17T18:22:04Z"
            },
            {
                "name": "7.1.2",
                "date": "2022-01-02T13:57:56Z"
            },
            {
                "name": "7.1.1",
                "date": "2021-11-29T18:27:25Z"
            },
            {
                "name": "7.1.0",
                "date": "2021-10-21T14:02:02Z"
            },
            {
                "name": "",
                "date": "2021-08-13T09:30:41Z"
            },
            {
                "name": "",
                "date": "2021-04-15T07:14:51Z"
            }
        ]
    }
}