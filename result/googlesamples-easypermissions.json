{
    "https://api.github.com/repos/googlesamples/easypermissions": {
        "forks": 1453,
        "watchers": 9879,
        "stars": 9879,
        "languages": {
            "Java": 125849
        },
        "commits": [
            "2021-04-26T11:16:54Z",
            "2021-04-26T10:45:27Z",
            "2021-04-21T14:24:56Z",
            "2020-12-28T11:49:53Z",
            "2020-07-16T11:35:53Z",
            "2020-07-07T16:29:24Z",
            "2020-07-07T13:49:48Z",
            "2019-09-23T19:25:04Z",
            "2019-07-31T02:07:18Z",
            "2019-01-23T21:55:28Z",
            "2019-01-15T22:31:06Z",
            "2019-01-15T22:30:06Z",
            "2019-01-15T22:20:38Z",
            "2019-01-15T22:10:16Z",
            "2019-01-09T17:12:10Z",
            "2019-01-03T18:55:38Z",
            "2018-12-21T17:07:13Z",
            "2018-12-21T16:55:03Z",
            "2018-12-21T16:41:10Z",
            "2018-12-21T16:34:35Z",
            "2018-10-30T13:33:14Z",
            "2018-09-24T16:45:44Z",
            "2018-09-24T16:39:11Z",
            "2018-09-24T16:36:36Z",
            "2018-08-14T19:04:03Z",
            "2018-08-14T18:45:08Z",
            "2018-08-14T18:36:27Z",
            "2018-08-14T18:18:01Z",
            "2018-08-14T18:17:35Z",
            "2018-08-10T19:44:01Z"
        ],
        "creation_date": "2015-12-22T18:05:53Z",
        "contributors": 22,
        "topics": [
            "android",
            "android-library",
            "permissions"
        ],
        "subscribers": 278,
        "readme": "# EasyPermissions [![Build Status][1]][2] [![Android Weekly][3]][4]\n\nEasyPermissions is a wrapper library to simplify basic system permissions logic when targeting\nAndroid M or higher.\n\n**Note:** If your app is written in Kotlin consider the [easypermissions-ktx](https://github.com/VMadalin/easypermissions-ktx)\nlibrary which adds Kotlin extensions to the core EasyPermissions library.\n\n## Installation\n\nEasyPermissions is installed by adding the following dependency to your `build.gradle` file:\n\n```groovy\ndependencies {\n    // For developers using AndroidX in their applications\n \u00a0 \u00a0implementation 'pub.devrel:easypermissions:3.0.0'\n \n    // For developers using the Android Support Library\n    implementation 'pub.devrel:easypermissions:2.0.1'\n}\n```\n\n## Usage\n\n### Basic\n\nTo begin using EasyPermissions, have your `Activity` (or `Fragment`) override the `onRequestPermissionsResult` method:\n\n```java\npublic class MainActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n\n        // Forward results to EasyPermissions\n        EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, this);\n    }\n}\n```\n\n### Request Permissions\n\nThe example below shows how to request permissions for a method that requires both\n`CAMERA` and `ACCESS_FINE_LOCATION` permissions. There are a few things to note:\n\n  * Using `EasyPermissions#hasPermissions(...)` to check if the app already has the\n    required permissions. This method can take any number of permissions as its final\n    argument.\n  * Requesting permissions with `EasyPermissions#requestPermissions`. This method\n    will request the system permissions and show the rationale string provided if\n    necessary. The request code provided should be unique to this request, and the method\n    can take any number of permissions as its final argument.\n  * Use of the `AfterPermissionGranted` annotation. This is optional, but provided for\n    convenience. If all of the permissions in a given request are granted, *all* methods\n    annotated with the proper request code will be executed(be sure to have an unique request code). The annotated method needs to be *void* and *without input parameters* (instead, you can use *onSaveInstanceState* in order to keep the state of your suppressed parameters). This is to simplify the common\n    flow of needing to run the requesting method after all of its permissions have been granted.\n    This can also be achieved by adding logic on the `onPermissionsGranted` callback.\n\n```java\n@AfterPermissionGranted(RC_CAMERA_AND_LOCATION)\nprivate void methodRequiresTwoPermission() {\n    String[] perms = {Manifest.permission.CAMERA, Manifest.permission.ACCESS_FINE_LOCATION};\n    if (EasyPermissions.hasPermissions(this, perms)) {\n        // Already have permission, do the thing\n        // ...\n    } else {\n        // Do not have permissions, request them now\n        EasyPermissions.requestPermissions(this, getString(R.string.camera_and_location_rationale),\n                RC_CAMERA_AND_LOCATION, perms);\n    }\n}\n```\n\nOr for finer control over the rationale dialog, use a `PermissionRequest`:\n\n```java\nEasyPermissions.requestPermissions(\n        new PermissionRequest.Builder(this, RC_CAMERA_AND_LOCATION, perms)\n                .setRationale(R.string.camera_and_location_rationale)\n                .setPositiveButtonText(R.string.rationale_ask_ok)\n                .setNegativeButtonText(R.string.rationale_ask_cancel)\n                .setTheme(R.style.my_fancy_style)\n                .build());\n```\n\nOptionally, for a finer control, you can have your `Activity` / `Fragment` implement\nthe `PermissionCallbacks` interface.\n\n```java\npublic class MainActivity extends AppCompatActivity implements EasyPermissions.PermissionCallbacks {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    @Override\n    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\n\n        // Forward results to EasyPermissions\n        EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, this);\n    }\n\n    @Override\n    public void onPermissionsGranted(int requestCode, List<String> list) {\n        // Some permissions have been granted\n        // ...\n    }\n\n    @Override\n    public void onPermissionsDenied(int requestCode, List<String> list) {\n        // Some permissions have been denied\n        // ...\n    }\n}\n```\n\n### Required Permissions\n\nIn some cases your app will not function properly without certain permissions. If the user\ndenies these permissions with the \"Never Ask Again\" option, you will be unable to request\nthese permissions from the user and they must be changed in app settings. You can use the\nmethod `EasyPermissions.somePermissionPermanentlyDenied(...)` to display a dialog to the\nuser in this situation and direct them to the system setting screen for your app:\n\n**Note**: Due to a limitation in the information provided by the Android\nframework permissions API, the `somePermissionPermanentlyDenied` method only\nworks after the permission has been denied and your app has received\nthe `onPermissionsDenied` callback. Otherwise the library cannot distinguish\npermanent denial from the \"not yet denied\" case.\n\n```java\n@Override\npublic void onPermissionsDenied(int requestCode, List<String> perms) {\n    Log.d(TAG, \"onPermissionsDenied:\" + requestCode + \":\" + perms.size());\n\n    // (Optional) Check whether the user denied any permissions and checked \"NEVER ASK AGAIN.\"\n    // This will display a dialog directing them to enable the permission in app settings.\n    if (EasyPermissions.somePermissionPermanentlyDenied(this, perms)) {\n        new AppSettingsDialog.Builder(this).build().show();\n    }\n}\n\n@Override\npublic void onActivityResult(int requestCode, int resultCode, Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n\n    if (requestCode == AppSettingsDialog.DEFAULT_SETTINGS_REQ_CODE) {\n        // Do something after user returned from app settings screen, like showing a Toast.\n        Toast.makeText(this, R.string.returned_from_app_settings_to_activity, Toast.LENGTH_SHORT)\n                .show();\n    }\n}\n```\n\n### Interacting with the rationale dialog\n\nImplement the `EasyPermissions.RationaleCallbacks` if you want to interact with the rationale dialog.\n\n```java\n@Override\npublic void onRationaleAccepted(int requestCode) {\n    // Rationale accepted to request some permissions\n    // ...\n}\n\n@Override\npublic void onRationaleDenied(int requestCode) {\n    // Rationale denied to request some permissions\n    // ...\n}\n```\n\nRationale callbacks don't necessarily imply permission changes. To check for those, see the `EasyPermissions.PermissionCallbacks`.\n\n## LICENSE\n\n```\n\tCopyright 2017 Google\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n```\n\n[1]: https://github.com/googlesamples/easypermissions/workflows/test/badge.svg\n[2]: https://github.com/googlesamples/easypermissions/actions\n[3]: https://img.shields.io/badge/Android%20Weekly-%23185-2CB3E5.svg?style=flat\n[4]: http://androidweekly.net/issues/issue-185\n",
        "releases": [
            {
                "name": "v3.0.0",
                "date": "2019-01-23T21:59:08Z"
            },
            {
                "name": "v2.0.1",
                "date": "2019-01-15T22:35:06Z"
            },
            {
                "name": "v2.0.0",
                "date": "2018-09-24T16:46:18Z"
            },
            {
                "name": "v1.3.0",
                "date": "2018-08-06T16:49:37Z"
            },
            {
                "name": "v1.2.0",
                "date": "2018-03-15T20:49:45Z"
            },
            {
                "name": "v1.1.3",
                "date": "2018-01-25T19:26:22Z"
            },
            {
                "name": "v1.1.2",
                "date": "2018-01-12T16:23:20Z"
            },
            {
                "name": "v1.1.1",
                "date": "2017-12-13T17:54:51Z"
            },
            {
                "name": "v1.1.0",
                "date": "2017-12-06T19:55:29Z"
            },
            {
                "name": "v1.0.1",
                "date": "2017-09-26T18:25:26Z"
            },
            {
                "name": "v1.0.0",
                "date": "2017-08-30T23:54:38Z"
            },
            {
                "name": "v0.4.3",
                "date": "2017-07-27T17:21:20Z"
            }
        ]
    }
}