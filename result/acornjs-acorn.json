{
    "https://api.github.com/repos/acornjs/acorn": {
        "forks": 901,
        "watchers": 10742,
        "stars": 10742,
        "languages": {
            "JavaScript": 3836763,
            "HTML": 4191,
            "Shell": 136
        },
        "commits": [
            "2025-01-13T09:30:41Z",
            "2025-01-13T09:28:10Z",
            "2024-12-29T21:07:39Z",
            "2024-12-29T12:52:56Z",
            "2024-12-14T07:10:20Z",
            "2024-10-27T11:22:42Z",
            "2024-10-27T11:19:25Z",
            "2024-10-27T11:16:22Z",
            "2024-10-27T11:12:24Z",
            "2024-10-16T06:09:49Z",
            "2024-09-16T01:11:45Z",
            "2024-09-14T19:58:45Z",
            "2024-09-14T19:54:36Z",
            "2024-09-14T19:52:59Z",
            "2024-09-09T08:40:27Z",
            "2024-09-08T10:22:15Z",
            "2024-07-03T06:12:26Z",
            "2024-07-03T06:08:59Z",
            "2024-06-27T02:19:01Z",
            "2024-06-27T02:16:24Z",
            "2024-06-27T02:13:58Z",
            "2024-06-14T07:10:18Z",
            "2024-06-14T07:07:11Z",
            "2024-06-09T09:44:42Z",
            "2024-04-18T07:41:07Z",
            "2024-04-18T06:53:54Z",
            "2024-04-18T00:33:15Z",
            "2024-04-17T08:55:24Z",
            "2024-04-16T11:57:24Z",
            "2024-04-03T14:14:51Z"
        ],
        "creation_date": "2012-09-24T10:05:00Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 177,
        "readme": "# Acorn\n\n[![Build Status](https://github.com/acornjs/acorn/workflows/ci/badge.svg)](https://github.com/acornjs/acorn/actions)\n[![NPM version](https://img.shields.io/npm/v/acorn.svg)](https://www.npmjs.com/package/acorn)\n[![CDNJS](https://img.shields.io/cdnjs/v/acorn.svg)](https://cdnjs.com/libraries/acorn)  \n\nA tiny, fast JavaScript parser, written completely in JavaScript.\n\n## Community\n\n<a href=\"https://stand-with-ukraine.pp.ua/\"><img src=\"https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner-direct.svg\" width=\"800\"></a>\n\nAcorn is open source software released under an\n[MIT license](https://github.com/acornjs/acorn/blob/master/acorn/LICENSE).\n\nYou are welcome to\n[report bugs](https://github.com/acornjs/acorn/issues) or create pull\nrequests on [github](https://github.com/acornjs/acorn).\n\n## Packages\n\nThis repository holds three packages:\n\n - [acorn](https://github.com/acornjs/acorn/tree/master/acorn/): The\n   main parser\n - [acorn-loose](https://github.com/acornjs/acorn/tree/master/acorn-loose/): The\n   error-tolerant parser\n - [acorn-walk](https://github.com/acornjs/acorn/tree/master/acorn-walk/): The\n   syntax tree walker\n\nTo build the content of the repository, run `npm install`.\n\n```sh\ngit clone https://github.com/acornjs/acorn.git\ncd acorn\nnpm install\n```\n\n## Plugin developments\n\nAcorn is designed to support plugins which can, within reasonable\nbounds, redefine the way the parser works. Plugins can add new token\ntypes and new tokenizer contexts (if necessary), and extend methods in\nthe parser object. This is not a clean, elegant API\u2014using it requires\nan understanding of Acorn's internals, and plugins are likely to break\nwhenever those internals are significantly changed. But still, it is\n_possible_, in this way, to create parsers for JavaScript dialects\nwithout forking all of Acorn. And in principle it is even possible to\ncombine such plugins, so that if you have, for example, a plugin for\nparsing types and a plugin for parsing JSX-style XML literals, you\ncould load them both and parse code with both JSX tags and types.\n\nA plugin is a function from a parser class to an extended parser\nclass. Plugins can be used by simply applying them to the `Parser`\nclass (or a version of that already extended by another plugin). But\nbecause that gets a little awkward, syntactically, when you are using\nmultiple plugins, the static method `Parser.extend` can be called with\nany number of plugin values as arguments to create a `Parser` class\nextended by all those plugins. You'll usually want to create such an\nextended class only once, and then repeatedly call `parse` on it, to\navoid needlessly confusing the JavaScript engine's optimizer.\n\n```javascript\nconst {Parser} = require(\"acorn\")\n\nconst MyParser = Parser.extend(\n  require(\"acorn-jsx\")(),\n  require(\"acorn-bigint\")\n)\nconsole.log(MyParser.parse(\"// Some bigint + JSX code\"))\n```\n\nPlugins override methods in their new parser class to implement\nadditional functionality. It is recommended for a plugin package to\nexport its plugin function as its default value or, if it takes\nconfiguration parameters, to export a constructor function that\ncreates the plugin function.\n\nThis is what a trivial plugin, which adds a bit of code to the\n`readToken` method, might look like:\n\n```javascript\nmodule.exports = function noisyReadToken(Parser) {\n  return class extends Parser {\n    readToken(code) {\n      console.log(\"Reading a token!\")\n      super.readToken(code)\n    }\n  }\n}\n```\n",
        "releases": []
    }
}