{
    "https://api.github.com/repos/akavel/up": {
        "forks": 129,
        "watchers": 8421,
        "stars": 8421,
        "languages": {
            "Go": 28951
        },
        "commits": [
            "2021-03-31T09:08:27Z",
            "2020-10-29T21:59:25Z",
            "2020-10-29T21:12:21Z",
            "2020-10-29T21:11:47Z",
            "2020-10-29T20:52:25Z",
            "2020-10-29T20:33:31Z",
            "2020-10-29T20:29:06Z",
            "2020-10-29T20:27:58Z",
            "2020-10-29T19:29:36Z",
            "2020-10-29T19:28:54Z",
            "2020-04-12T21:53:09Z",
            "2020-04-12T21:50:45Z",
            "2020-03-03T09:07:24Z",
            "2020-03-02T13:18:24Z",
            "2019-03-28T16:49:06Z",
            "2019-02-18T20:49:54Z",
            "2018-12-04T21:05:23Z",
            "2018-12-04T20:54:57Z",
            "2018-12-04T20:54:44Z",
            "2018-12-04T20:38:58Z",
            "2018-12-04T20:04:19Z",
            "2018-12-04T19:58:37Z",
            "2018-11-29T20:42:25Z",
            "2018-11-21T11:24:59Z",
            "2018-11-21T10:15:32Z",
            "2018-11-20T17:59:08Z",
            "2018-11-20T17:22:57Z",
            "2018-11-20T14:47:53Z",
            "2018-10-31T22:43:30Z",
            "2018-10-31T22:12:00Z"
        ],
        "creation_date": "2018-04-01T19:59:26Z",
        "contributors": 5,
        "topics": [
            "instant-preview",
            "linux",
            "live-programming",
            "pipes",
            "tui",
            "up"
        ],
        "subscribers": 98,
        "readme": "<img align=\"left\" width=\"183\" height=\"154\" src=\"logo.svg\" />\n\n# up - the Ultimate Plumber\n\n**up** is the **Ultimate Plumber**, a tool for writing Linux pipes in a\nterminal-based UI interactively, with instant live preview of command results.\n\nThe main **goal** of the Ultimate Plumber is to help **interactively and\nincrementally explore textual data** in Linux, by making it easier to quickly\nbuild complex pipelines, thanks to a **fast feedback loop**. This is achieved\nby boosting any typical **Linux text-processing utils** such as `grep`, `sort`,\n`cut`, `paste`, `awk`, `wc`, `perl`, etc., etc., by providing a quick,\n**interactive, scrollable preview** of their results.\n\n[![](up.gif)](https://asciinema.org/a/208538)\n\n## Usage\n\n**[Download *up* for Linux](https://github.com/akavel/up/releases/latest/download/up)**\n&nbsp; | &nbsp; [ArchLinux](https://wiki.archlinux.org/index.php/Arch_User_Repository): [`aur/up`](https://aur.archlinux.org/packages/up/)\n&nbsp; | &nbsp; FreeBSD: [`pkg install up`](https://www.freshports.org/textproc/up)\n&nbsp; | &nbsp; macOS: [`brew install up`](https://formulae.brew.sh/formula/up)\n&nbsp; | &nbsp; [Other OSes](https://github.com/akavel/up/releases)\n\nTo start using **up**, redirect any text-emitting command (or pipeline) into it\n\u2014 for example:\n\n    $ lshw |& ./up\n\nthen:\n\n- use ***PgUp/PgDn*** and ***Ctrl-[\u2190]/Ctrl-[\u2192]*** for basic browsing through\n  the command output;\n- in the input box at the top of the screen, start **writing any bash\n  pipeline**; then **press Enter to execute the command you typed**,\n  and the Ultimate Plumber will immediately show you the output of\n  the pipeline in the **scrollable window** below (replacing any\n  earlier contents)\n    - For example, you can try writing:\n      `grep network -A2 | grep : | cut -d: -f2- | paste - -`\n      \u2014 on my computer, after pressing *Enter*, the screen then shows\n      the pipeline and a scrollable preview of its output like below:\n\n             | grep network -A2 | grep : | cut -d: -f2- | paste - -\n             Wireless interface      Centrino Advanced-N 6235\n             Ethernet interface      RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller\n\n    - **WARNING: Please be careful when using it! It could be dangerous.**\n      In particular, writing \"rm\" or \"dd\" into it could be like running around\n      with a chainsaw. But you'd be careful writing \"rm\" anywhere in Linux\n      anyway, no?\n- when you are satisfied with the result, you can **press *Ctrl-X* to exit**\n  the Ultimate Plumber, and the command you built will be **written into\n  `up1.sh` file** in the current working directory (or, if it already existed,\n  `up2.sh`, etc., until 1000, based on [Shlemiel the Painter's\n  algorithm](https://www.joelonsoftware.com/2001/12/11/back-to-basics/)).\n  Alternatively, you can press ***Ctrl-C*** to quit without saving.\n- If the command you piped into *up* is long-running (in such case you will see\n  a tilde `~` indicator character in the top-left corner of the screen, meaning\n  that *up* is still waiting for more input), you may need to press\n  ***Ctrl-S*** to temporarily freeze *up*'s input buffer (a freeze will be\n  indicated by a `#` character in top-left corner), which will inject a fake\n  EOF into the pipeline; otherwise, some commands in the pipeline may not print\n  anything, waiting for full input (especially commands like `wc` or `sort`,\n  but `grep`, `perl`, etc. may also show incomplete results). To unfreeze back,\n  press ***Ctrl-Q***.\n\n## Additional Notes\n\n- The pipeline is passed verbatim to a `bash -c` command, so any bash-isms should work.\n- The input buffer of the Ultimate Plumber is currently fixed at **40 MB**. If\n  you reach this limit, a `+` character should get displayed in the top-left\n  corner of the screen. (This is intended to be changed to a\n  dynamically/manually growable buffer in a future version of *up*.)\n- **MacOSX support:** I don't have a Mac, thus I have no idea if it works on\n  one. You are welcome to try, and also to send PRs. If you're interested in\n  me providing some kind of official-like support for MacOSX, please consider\n  trying to find a way to send me some usable-enough Mac computer. Please note\n  I'm not trying to \"take advantage\" of you by this, as I'm actually not at all\n  interested in achieving a Mac otherwise. (Also, trying to commit to this kind\n  of support will be an extra burden and obligation on me. Knowing someone out\n  there cares enough to do a fancy physical gesture would really help alleviate\n  this.) If you're serious enough to consider this option, please contact me by\n  email (mailto:czapkofan@gmail.com) or keybase (https://keybase.io/akavel), so\n  that we could try to research possible ways to achieve this.\n  Thanks for understanding!\n- **Prior art:** I was surprised no one seemed to write a similar tool before,\n  that I could find. It should have been possible to write this since the dawn\n  of Unix already, or earlier! And indeed, after I announced *up*, I got enough\n  publicity that my attention was directed to one such earlier project already:\n  **[Pipecut](http://pipecut.org/index.html)**. Looks interesting! You may like\n  to check it too! (Thanks [@TronDD](https://lobste.rs/s/acpz00/up_tool_for_writing_linux_pipes_with#c_qxrgoa).)\n- **Other influences:** I don't remember the fact too well already, but I'm\n  rather sure that this must have been inspired in big part by The Bret Victor's Talk(s).\n\n## Future Ideas\n\n- I have quite a lot of ideas for further experimentation of development of\n  *up*, including but not limited to:\n    - [RIIR](https://rust-lang.org) (once I learn enough of Rust... at some\n      point in future... maybe...) \u2014 esp. to hopefully make *up* be a smaller\n      binary (and also to maybe finally learn some Rust); though I'm somewhat\n      afraid if it might ossify the codebase and make harder to develop\n      further..? ...but maybe actually converse?...\n    - Maybe it could be made into an UI-less, RPC/REST/socket/text-driven\n      service, like gocode or [Language Servers](https://langserver.org/), for\n      integration with editors/IDEs (emacs? vim? VSCode?...) I'd be especially\n      interested in eventually merging it into [Luna\n      Studio](https://luna-lang.org/); RIIR may help in this. (Before this, as\n      a simpler approach, multi-line editing may be needed, or at least\n      left&right scrolling of the command editor input box. Also, some kind of\n      jumping between words in the command line; readline's *Alt-b* & *Alt-f*?)\n    - Make it possible to [capture output of already running\n      processes](https://stackoverflow.com/a/19584979/98528)! (But maybe that\n      could be better made as a separate, composable tool! In Rust?)\n    - Adding tests... (ahem; see also\n      [#1](https://github.com/akavel/up/issues/1)) ...also write `--help`...\n    - Making it work on Windows,\n      somehow[?](https://github.com/mattn/go-shellwords) Also, obviously, would\n      be nice to have some CI infrastructure enabling porting it to MacOSX,\n      BSDs, etc., etc...\n    - Integration with [fzf](https://github.com/junegunn/fzf) and other TUI\n      tools? I only have some vague thoughts and ideas about it as of now, not\n      even sure how this could look like.\n    - Adding more previews, for each `|` in the pipeline; also forking of\n      pipelines, merging, feedback loops, and other mixing and matching (though\n      I'd strongly prefer if [Luna](https://luna-lang.org) was to do it\n      eventually).\n- If you are interested in financing my R&D work, contact me by email at:\n  czapkofan@gmail.com, or [on keybase.io as akavel](https://keybase.io/akavel).\n  I suppose I will probably be developing the Ultimate Plumber further anyway,\n  but at this time it's purely a hobby project, with all the fun and risks this\n  entails.\n\n\u2014 *Mateusz Czapli\u0144ski*  \n*October 2018*\n\n*PS. The UP logo was conceived and generously sponsored\nby [Thoai Nguyen](https://github.com/thoaionline)\nand [GPU Exchange](https://gpu.exchange/),\nwith a helping hand from [Many Pixels](https://www.manypixels.co/).*\n",
        "releases": [
            {
                "name": "v0.4 \u2014 New flags, help, new tcell",
                "date": "2020-10-29T21:44:33Z"
            },
            {
                "name": "v0.3.2 \u2014 Add some readline shortcuts",
                "date": "2018-12-04T21:03:10Z"
            },
            {
                "name": "v0.3.1",
                "date": "2018-10-31T22:47:28Z"
            },
            {
                "name": "v0.3 \u2014 Allow custom/non-bash shells (\"engines\")",
                "date": "2018-10-26T23:24:40Z"
            },
            {
                "name": "v0.2.1 \u2014 fix Ctrl-S/Ctrl-Q behavior",
                "date": "2018-10-25T23:35:18Z"
            },
            {
                "name": "v0.2 - Enter to run",
                "date": "2018-10-25T22:54:19Z"
            },
            {
                "name": "v0.1",
                "date": "2018-10-23T18:20:12Z"
            }
        ]
    }
}