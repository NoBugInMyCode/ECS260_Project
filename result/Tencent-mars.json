{
    "https://api.github.com/repos/Tencent/mars": {
        "forks": 3636,
        "watchers": 17387,
        "stars": 17387,
        "languages": {
            "C++": 24262809,
            "C": 7523103,
            "PHP": 1860336,
            "Pawn": 302104,
            "Assembly": 212868,
            "Python": 141809,
            "Java": 133209,
            "Shell": 123787,
            "CMake": 107232,
            "HTML": 103734,
            "Objective-C": 91840,
            "Objective-C++": 47816,
            "Meson": 26520,
            "Roff": 25543,
            "Starlark": 10371,
            "M4": 9738,
            "C#": 6481,
            "Batchfile": 6152,
            "Lua": 1647,
            "Perl": 1334,
            "Dockerfile": 865,
            "Makefile": 683
        },
        "commits": [
            "2024-12-03T03:34:32Z",
            "2024-12-03T02:36:15Z",
            "2024-11-22T08:09:13Z",
            "2024-11-20T12:26:21Z",
            "2024-11-20T12:19:42Z",
            "2024-11-20T11:55:08Z",
            "2024-11-11T02:30:13Z",
            "2024-11-06T11:56:13Z",
            "2024-11-06T03:02:39Z",
            "2024-11-01T11:39:08Z",
            "2024-11-01T09:41:12Z",
            "2024-11-01T09:16:45Z",
            "2024-11-01T08:40:48Z",
            "2024-10-30T11:02:16Z",
            "2024-10-28T02:22:00Z",
            "2024-10-25T09:47:09Z",
            "2024-10-25T02:11:42Z",
            "2024-10-22T10:42:12Z",
            "2024-10-18T07:30:51Z",
            "2024-10-18T07:29:17Z",
            "2024-10-18T03:01:30Z",
            "2024-10-17T06:59:52Z",
            "2024-10-22T11:56:28Z",
            "2024-10-22T11:27:46Z",
            "2024-10-21T11:37:39Z",
            "2024-10-21T03:03:44Z",
            "2024-10-19T13:14:48Z",
            "2024-10-10T04:06:02Z",
            "2024-10-07T09:01:02Z",
            "2024-09-25T12:17:06Z"
        ],
        "creation_date": "2016-12-12T04:39:54Z",
        "contributors": 30,
        "topics": [
            "cross-platform",
            "log",
            "network",
            "wechat"
        ],
        "subscribers": 777,
        "readme": "## Mars\n\n[![license](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat)](https://github.com/Tencent/mars/blob/master/LICENSE)\n[![Release Version](https://img.shields.io/badge/release-1.2.3-red.svg)](https://github.com/Tencent/mars/releases)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/Tencent/mars/pulls)\n[![WeChat Approved](https://img.shields.io/badge/Wechat_Approved-1.2.3-red.svg)](https://github.com/Tencent/mars/wiki)\n[![WeChat Approved](https://img.shields.io/badge/Platform(cmake)-%20iOS%20%7C%20OS%20X%20%7C%20Android(ndkr20)%20%7C%20Windows(vs2015)%20-brightgreen.svg)](https://github.com/Tencent/mars/wiki)\n\n(\u4e2d\u6587\u7248\u672c\u8bf7\u53c2\u770b[\u8fd9\u91cc](#mars_cn))\n\nMars is a cross-platform infrastructure component developed by WeChat Mobile Team.\nIt has been proved to be effective by billions of WeChat users.\n\n1. Cross platform, easy to deploy if you are developing multi-platform or multi-business application.\n2. Suitable for small amount data transmission\n3. Mobile platform friendly, low power and traffic consumption\n4. A network solution fit for mobile application\n\n![mars](https://github.com/WeMobileDev/article/blob/master/assets/mars/mars.png?raw=true)\n\n* comm: common library, including socket, thread, message queue, coroutine, etc.\n* Xlog: a reliable log component with high-performance.\n* SDT: a network detection component.\n* STN: a signaling network component, the major part of Mars.\n\n## Samples\n\nStart with sample usage [here](https://github.com/Tencent/mars/wiki/Mars-sample-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E).\n\n## Getting started\n\npython scripts only support python3.10 or higher\n\nChoose [Android](#android) or [iOS/OS X](#apple) or [Windows](#windows).\n\n### <a name=\"android\">[Android](https://github.com/Tencent/mars/wiki/Mars-Android-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97)</a>\n\nYou can use either [mars-wrapper](#wrapper) or [mars-core](#core). We recommend you to use mars-wrapper when you just want to build a sample or demo, while mars-core is preferred to be used in your APP.\n\n#### <a name=\"wrapper\">mars-wrapper</a>\n\nAdd dependencies by adding the following lines to your app/build.gradle.\n\n```xml\ndependencies {\n    compile 'com.tencent.mars:mars-wrapper:1.2.5'\n}\n```\n\n**OR**\n\n#### <a name=\"core\">mars-core</a>\n\nAdd dependencies by adding the following lines to your app/build.gradle.\n\n```xml\ndependencies {\n    compile 'com.tencent.mars:mars-core:1.2.5'\n}\n```\n**OR**\n#### <a name=\"\">mars-xlog</a>\nIf you just want to user xlog, add dependencies by adding the following lines to your app/build.gradle.\nnote: xlog is included in mars-core and mars-wrapper.\n\n```xml\ndependencies {\n    compile 'com.tencent.mars:mars-xlog:1.2.5'\n}\n```\n\nIf you read here, make sure you have added dependencies of mars-wrapper, mars-core or mars-xlog.\n\n#### <a name=\"Xlog\">Xlog Init</a>\n\nInitialize Xlog when your APP starts. Remember to use an exclusive folder to save the log files, no other files are acceptable in the folder since they would be removed by the cleansing function in Xlog automatically.\n\nWhen multiple processes is used in your app, make sure that each process owns its exclusive log file.\n\n```java\nSystem.loadLibrary(\"c++_shared\");\nSystem.loadLibrary(\"marsxlog\");\n\nfinal String SDCARD = Environment.getExternalStorageDirectory().getAbsolutePath();\nfinal String logPath = SDCARD + \"/marssample/log\";\n\n// this is necessary, or may crash for SIGBUS\nfinal String cachePath = this.getFilesDir() + \"/xlog\"\n\n//init xlog\nXlog xlog = new Xlog();\nLog.setLogImp(xlog);\n\nif (BuildConfig.DEBUG) {\n    Log.setConsoleLogOpen(true);\n  \tLog.appenderOpen(Xlog.LEVEL_DEBUG, Xlog.AppednerModeAsync, \"\", logPath, logFileName, 0);\n} else {\n    Log.setConsoleLogOpen(false);\n  \tLog.appenderOpen(Xlog.LEVEL_INFO, Xlog.AppednerModeAsync, \"\", logPath, logFileName, 0);\n}\n\n```\n\nUninitialized Xlog when your app exits\n\n\n```java\nLog.appenderClose();\n```\n\n#### <a name=\"STN\">STN Init</a>\n\nIf you add dependencies of mars-core to your project, you need to initialize and release STN.\nInitialize STN before you use it\n\n```java\n// set callback\nAppLogic.setCallBack(stub);\nStnLogic.setCallBack(stub);\nSdtLogic.setCallBack(stub);\n\n// Initialize the Mars PlatformComm\nMars.init(getApplicationContext(), new Handler(Looper.getMainLooper()));\n\n// Initialize the Mars\nStnLogic.setLonglinkSvrAddr(profile.longLinkHost(), profile.longLinkPorts());\nStnLogic.setShortlinkSvrAddr(profile.shortLinkPort());\nStnLogic.setClientVersion(profile.productID());\nMars.onCreate(true);\n\nBaseEvent.onForeground(true);\nStnLogic.makesureLongLinkConnected();\n```\nFirstly, you should call the setCallBack interface, and secondly, the Mars.init. Then, to initialize the Mars, there is to need to strictly follow the orders of the four commands. Finally, after Mars are initialized, onForeground and makesureLongLinkConnect can be called.\n\nDestroy STN or exit your app:\n\n```java\nMars.onDestroy();\n```\n\n#### <a name=\"even\">Event Change</a>\n\nNetwork change:\n\n```java\nBaseEvent.onNetworkChange()\n```\n**********\nIf you add dependencies of mars-wrapper to your project, you just need initialize STN and no need uninitialized.\n\n```java\nMarsServiceProxy.init(this, getMainLooper(),null);\n```\n************\nNo matter which way of dependencies you used, you must pay attention to these.\n\nThe state (background or foreground) of the APP is changed:\n\n```java\nBaseEvent.onForeground(boolean);\n```\n\nThe account of the APP is changed:\n\n```java\nStnLogic.reset();\n```\n\nIf you want to modify the encryption algorithm of Xlog, the packer/unpacker of longlink/shortlink, or you want to define the other components by yourself, refer [here](https://github.com/Tencent/mars/wiki/Mars-Android-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97)\n\n### <a name=\"apple\">[iOS/OS X](https://github.com/Tencent/mars/wiki/Mars-iOS%EF%BC%8FOS-X-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97)</a>\nCompile\n\n```python\npython build_ios.py\n```\n\nor \n```python\npython build_osx.py\n```\n\n1. Add mars.framework as a dependency of your project.\n2. Rename files in mars/libraries/mars_android_sdk/jni with .rewriteme extension to .cc extension.\n3. Add header files in mars/libraries/mars_android_sdk/jni and source files from step 2 into your project.\n\n#### <a name=\"Xlog\">Xlog Init</a>\n\nInitialize Xlog when your app starts. Remember to use an exclusive folder to save the log files, no other files are acceptable in the folder since they would be removed by the cleansing function in Xlog automatically.\n\n```cpp\nNSString* logPath = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0] stringByAppendingString:@\"/log\"];\n\n// set do not backup for logpath\nconst char* attrName = \"com.apple.MobileBackup\";\nu_int8_t attrValue = 1;\nsetxattr([logPath UTF8String], attrName, &attrValue, sizeof(attrValue), 0, 0);\n\n// init xlogger\n#if DEBUG\nxlogger_SetLevel(kLevelDebug);\nappender_set_console_log(true);\n#else\nxlogger_SetLevel(kLevelInfo);\nappender_set_console_log(false);\n#endif\nXLogConfig config;\nconfig.mode_ = kAppenderAsync;\nconfig.logdir_ = [logPath UTF8String];\nconfig.nameprefix_ = \"Test\";\nconfig.pub_key_ = \"\";\nconfig.compress_mode_ = kZlib;\nconfig.compress_level_ = 0;\nconfig.cachedir_ = \"\";\nconfig.cache_days_ = 0;\nappender_open(config);\n```\n\nClose xlog in function \"applicationWillTerminate\"\n\n\n```cpp\nappender_close();\n```\n\n#### <a name=\"STN\">STN Init</a>\n\nInitialize STN before you use it:\n\n```objc\n- (void)setCallBack {\n    mars::stn::SetCallback(mars::stn::StnCallBack::Instance());\n    mars::app::SetCallback(mars::app::AppCallBack::Instance());\n}\n\n- (void) createMars {\n    mars::baseevent::OnCreate();\n}\n\n- (void)setClientVersion:(UInt32)clientVersion {\n    mars::stn::SetClientVersion(clientVersion);\n}\n\n- (void)setShortLinkDebugIP:(NSString *)IP port:(const unsigned short)port {\n    std::string ipAddress([IP UTF8String]);\n    mars::stn::SetShortlinkSvrAddr(port, ipAddress);\n}\n\n- (void)setShortLinkPort:(const unsigned short)port {\n    mars::stn::SetShortlinkSvrAddr(port);\n}\n\n- (void)setLongLinkAddress:(NSString *)string port:(const unsigned short)port debugIP:(NSString *)IP {\n    std::string ipAddress([string UTF8String]);\n    std::string debugIP([IP UTF8String]);\n    std::vector<uint16_t> ports;\n    ports.push_back(port);\n    mars::stn::SetLonglinkSvrAddr(ipAddress,ports,debugIP);\n}\n\n- (void)setLongLinkAddress:(NSString *)string port:(const unsigned short)port {\n    std::string ipAddress([string UTF8String]);\n    std::vector<uint16_t> ports;\n    ports.push_back(port);\n    mars::stn::SetLonglinkSvrAddr(ipAddress,ports);\n}\n\n- (void)reportEvent_OnForeground:(BOOL)isForeground {\n    mars::baseevent::OnForeground(isForeground);\n}\n\n- (void)makesureLongLinkConnect {\n    mars::stn::MakesureLonglinkConnected();\n}\n```\n\nFirstly, you should call the setCallBack interface, and secondly, the Mars.init. Then, to initialize the Mars, there is to need to strictly follow the orders of the four commands. Finally, after Mars are initialized, onForeground and makesureLongLinkConnect can be called.\n\nIf you want to destroy STN or exit App:\n\n```objc\n- (void)destroyMars {\n    mars::baseevent::OnDestroy();\n}\n```\n\n#### <a name=\"even\">Event Change</a>\n\nWhen the App's state of background or foreground is changed:\n\n```objc\n- (void)reportEvent_OnForeground:(BOOL)isForeground {\n    mars::baseevent::OnForeground(isForeground);\n}\n```\n\nNetwork change:\n\n```objc\n- (void)reportEvent_OnNetworkChange {\n    mars::baseevent::OnNetworkChange();\n}\n```\n\n### <a name=\"windows\">[Windows](https://github.com/Tencent/mars/wiki/Mars-Windows-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97)</a>\nInstall Visual Studio 2015.\n\nCompile\n```python\npython build_windows.py\n```\n\n1. Add mars.lib as a dependency of your project.\n2. Rename files in mars/libraries/mars_android_sdk/jni with .rewriteme extension to .cc extension.\n3. Add header files in mars/libraries/mars_android_sdk/jni and source files from step 2 into your project.\n\n#### <a name=\"Xlog\">Xlog Init</a>\n\nInitialize Xlog when your app starts. Remember to use an exclusive folder to save the log files, no other files are acceptable in the folder since they would be removed by the cleansing function in Xlog automatically.\n\n```cpp\nstd::string logPath = \"\"; //use your log path\nstd::string pubKey = \"\"; //use you pubkey for log encrypt\n\n// init xlog\n#if DEBUG\nxlogger_SetLevel(kLevelDebug);\nappender_set_console_log(true);\n#else\nxlogger_SetLevel(kLevelInfo);\nappender_set_console_log(false);\n#endif\nappender_open(kAppenderAsync, logPath.c_str(), \"Test\", 0, pubKey.c_str());\n```\n\nUninitialized xlog before your app exits\n\n\n```cpp\nappender_close();\n```\n\n#### <a name=\"STN\">STN Init</a>\n\nInitialize STN before you use it:\n\n```cpp\nvoid setShortLinkDebugIP(const std::string& _ip, unsigned short _port)\n{\n\tmars::stn::SetShortlinkSvrAddr(_port, _ip);\n}\nvoid setShortLinkPort(unsigned short _port)\n{\n\tmars::stn::SetShortlinkSvrAddr(_port, \"\");\n}\nvoid setLongLinkAddress(const std::string& _ip, unsigned short _port, const std::string& _debug_ip)\n{\n\tvector<uint16_t> ports;\n\tports.push_back(_port);\n\tmars::stn::SetLonglinkSvrAddr(_ip, ports, _debug_ip);\n}\n\nvoid Init()\n{\n\tmars::stn::SetCallback(mars::stn::StnCallBack::Instance());\n\tmars::app::SetCallback(mars::app::AppCallBack::Instance());\n\tmars::baseevent::OnCreate();\n\n\t//todo\n\t//mars::stn::SetClientVersion(version);\n\t//setShortLinkDebugIP(...)\n\t//setLongLinkAddress(...)\n\n\tmars::baseevent::OnForeground(true);\n\tmars::stn::MakesureLonglinkConnected();\n}\n```\n\nFirstly, you should call the setCalBack interface, and secondly, the Mars.init. Then, to initialize the Mars, there is to need to strictly follow the orders of the four commands. Finally, after Mars are initialized, onForeground and makesureLongLinkConnect can be called.\n\nIf you want to destroy STN or exit App:\n\n```cpp\nmars::baseevent::OnDestroy();\n```\n\n## Support\n\nAny problem?\n\n1. Learn more from [mars/sample](https://github.com/Tencent/mars/tree/master/samples).\n2. Read the [source code](https://github.com/Tencent/mars/tree/master).\n3. Read the [wiki](https://github.com/Tencent/mars/wiki) or [FAQ](https://github.com/Tencent/mars/wiki/Mars-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98) for help.\n4. Contact us for help.\n\n## Contributing\n\nFor more information about contributing issues or pull requests, see our [Mars Contributing Guide](https://github.com/Tencent/mars/blob/master/CONTRIBUTING.md).\n\n## License\n\nMars is under the MIT license. See the [LICENSE](https://github.com/Tencent/mars/blob/master/LICENSE) file for details.\n\n------------------------------\n## <a name=\"mars_cn\">Mars</a>\n\n[![license](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat)](https://github.com/Tencent/mars/blob/master/LICENSE)\n[![Release Version](https://img.shields.io/badge/release-1.2.3-red.svg)](https://github.com/Tencent/mars/releases)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/Tencent/mars/pulls)\n[![WeChat Approved](https://img.shields.io/badge/Wechat_Approved-1.2.3-red.svg)](https://github.com/Tencent/mars/wiki)\n[![WeChat Approved](https://img.shields.io/badge/Platform-%20iOS%20%7C%20OS%20X%20%7C%20Android%20-brightgreen.svg)](https://github.com/Tencent/mars/wiki)\n\nMars \u662f\u5fae\u4fe1\u5b98\u65b9\u7684\u8de8\u5e73\u53f0\u8de8\u4e1a\u52a1\u7684\u7ec8\u7aef\u57fa\u7840\u7ec4\u4ef6\u3002\n\n\n![mars](https://github.com/WeMobileDev/article/blob/master/assets/mars/mars.png?raw=true)\n\n* comm\uff1a\u53ef\u4ee5\u72ec\u7acb\u4f7f\u7528\u7684\u516c\u5171\u5e93\uff0c\u5305\u62ec socket\u3001\u7ebf\u7a0b\u3001\u6d88\u606f\u961f\u5217\u3001\u534f\u7a0b\u7b49\uff1b\n* xlog\uff1a\u9ad8\u53ef\u9760\u6027\u9ad8\u6027\u80fd\u7684\u8fd0\u884c\u671f\u65e5\u5fd7\u7ec4\u4ef6\uff1b\n* SDT\uff1a \u7f51\u7edc\u8bca\u65ad\u7ec4\u4ef6\uff1b\n* STN\uff1a \u4fe1\u4ee4\u5206\u53d1\u7f51\u7edc\u6a21\u5757\uff0c\u4e5f\u662f Mars \u6700\u4e3b\u8981\u7684\u90e8\u5206\u3002\n\n## Samples\n\nsample \u7684\u4f7f\u7528\u8bf7\u53c2\u8003[\u8fd9\u91cc](https://github.com/Tencent/mars/wiki/Mars-sample-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E)\u3002\n\n## Getting started\n\npython >= 3,10\n\u63a5\u5165 [Android](#android_cn) \u6216\u8005 [iOS/OS X](#apple_cn) \u6216\u8005 [Windows](#windows_cn) \u3002\n\n### <a name=\"android_cn\">[Android](https://github.com/Tencent/mars/wiki/Mars-Android-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97)</a>\n\ngradle \u63a5\u5165\u6211\u4eec\u63d0\u4f9b\u4e86\u4e24\u79cd\u63a5\u5165\u65b9\u5f0f\uff1a[mars-wrapper](#wrapper) \u6216\u8005 [mars-core](#core)\u3002\u5982\u679c\u4f60\u53ea\u662f\u60f3\u505a\u4e2a sample \u63a8\u8350\u4f7f\u7528 mars-wrapper\uff0c\u53ef\u4ee5\u5feb\u901f\u5f00\u53d1\uff1b\u4f46\u662f\u5982\u679c\u4f60\u60f3\u628a mars \u7528\u5230\u4f60\u7684 app \u4e2d\u7684\u8bdd\uff0c\u63a8\u8350\u4f7f\u7528 mars-core\uff0c\u53ef\u5b9a\u5236\u6027\u66f4\u9ad8\u3002\n\n#### <a name=\"wrapper\">mars-wrapper</a>\n\n\u5728 app/build.gradle \u4e2d\u6dfb\u52a0 mars-wrapper \u7684\u4f9d\u8d56\uff1a\n\n\n```xml\ndependencies {\n    compile 'com.tencent.mars:mars-wrapper:1.2.5'\n}\n```\n\n**\u6216\u8005**\n\n#### <a name=\"core\">mars-core</a>\n\n\u5728 app/build.gradle \u4e2d\u6dfb\u52a0 mars-core \u7684\u4f9d\u8d56\uff1a\n\n\n```xml\ndependencies {\n    compile 'com.tencent.mars:mars-core:1.2.5'\n}\n```\n**\u6216\u8005**\n#### <a name=\"\">mars-xlog</a>\n\u5982\u679c\u53ea\u60f3\u4f7f\u7528 xlog,\u53ef\u4ee5\u53ea\u52a0 xlog \u7684\u4f9d\u8d56(mars-core,mars-wrapper \u4e2d\u90fd\u5df2\u7ecf\u5305\u62ec xlog)\uff1a\n```xml\ndependencies {\n    compile 'com.tencent.mars:mars-xlog:1.2.5'\n}\n```\n\u63a5\u7740\u5f80\u4e0b\u64cd\u4f5c\u4e4b\u524d\uff0c\u8bf7\u5148\u786e\u4fdd\u4f60\u5df2\u7ecf\u6dfb\u52a0\u4e86 mars-wrapper \u6216\u8005 mars-core \u6216\u8005 mars-xlog \u7684\u4f9d\u8d56\n\n#### <a name=\"Xlog\">Xlog Init</a>\n\n\u5728\u7a0b\u5e8f\u542f\u52a8\u52a0\u8f7d Xlog \u540e\u7d27\u63a5\u7740\u521d\u59cb\u5316 Xlog\u3002\u4f46\u8981\u6ce8\u610f\u5982\u679c\u4f60\u7684\u7a0b\u5e8f\u4f7f\u7528\u4e86\u591a\u8fdb\u7a0b\uff0c\u4e0d\u8981\u628a\u591a\u4e2a\u8fdb\u7a0b\u7684\u65e5\u5fd7\u8f93\u51fa\u5230\u540c\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u8fdb\u7a0b\u72ec\u4eab\u4e00\u4e2a\u65e5\u5fd7\u6587\u4ef6\u3002\u800c\u4e14\u4fdd\u5b58 log \u7684\u76ee\u5f55\u8bf7\u4f7f\u7528\u5355\u72ec\u7684\u76ee\u5f55\uff0c\u4e0d\u8981\u5b58\u653e\u4efb\u4f55\u5176\u4ed6\u6587\u4ef6\u9632\u6b62\u88ab xlog \u81ea\u52a8\u6e05\u7406\u529f\u80fd\u8bef\u5220\u3002\n\n\n```java\nSystem.loadLibrary(\"c++_shared\");\nSystem.loadLibrary(\"marsxlog\");\n\nfinal String SDCARD = Environment.getExternalStorageDirectory().getAbsolutePath();\nfinal String logPath = SDCARD + \"/marssample/log\";\n\n// this is necessary, or may crash for SIGBUS\nfinal String cachePath = this.getFilesDir() + \"/xlog\"\n\n//init xlog\nXlog.XLogConfig logConfig = new Xlog.XLogConfig();\nlogConfig.mode = Xlog.AppednerModeAsync;\nlogConfig.logdir = logPath;\nlogConfig.nameprefix = logFileName;\nlogConfig.pubkey = \"\";\nlogConfig.compressmode = Xlog.ZLIB_MODE;\nlogConfig.compresslevel = 0;\nlogConfig.cachedir = \"\";\nlogConfig.cachedays = 0;\nif (BuildConfig.DEBUG) {\n    logConfig.level = Xlog.LEVEL_VERBOSE;\n    Xlog.setConsoleLogOpen(true);\n} else {\n    logConfig.level = Xlog.LEVEL_INFO;\n    Xlog.setConsoleLogOpen(false);\n}\n\nLog.setLogImp(new Xlog());\n```\n\n\u7a0b\u5e8f\u9000\u51fa\u65f6\u5173\u95ed\u65e5\u5fd7\uff1a\n\n\n```java\nLog.appenderClose();\n```\n\n#### <a name=\"STN\">STN Init</a>\n\n\u5982\u679c\u4f60\u662f\u628a mars-core \u4f5c\u4e3a\u4f9d\u8d56\u52a0\u5165\u5230\u4f60\u7684\u9879\u76ee\u4e2d\u7684\u8bdd\uff0c\u4f60\u9700\u8981\u663e\u5f0f\u7684\u521d\u59cb\u5316\u548c\u53cd\u521d\u59cb\u5316 STN\n\n\u5728\u4f7f\u7528 STN \u4e4b\u524d\u8fdb\u884c\u521d\u59cb\u5316\n\n```java\n// set callback\nAppLogic.setCallBack(stub);\nStnLogic.setCallBack(stub);\nSdtLogic.setCallBack(stub);\n\n// Initialize the Mars PlatformComm\nMars.init(getApplicationContext(), new Handler(Looper.getMainLooper()));\n\n// Initialize the Mars\nStnLogic.setLonglinkSvrAddr(profile.longLinkHost(), profile.longLinkPorts());\nStnLogic.setShortlinkSvrAddr(profile.shortLinkPort());\nStnLogic.setClientVersion(profile.productID());\nMars.onCreate(true);\nBaseEvent.onForeground(true);\n\nStnLogic.makesureLongLinkConnected();\n```\n\n\u521d\u59cb\u5316\u987a\u5e8f\u4e0d\u4e00\u5b9a\u8981\u4e25\u683c\u9075\u5b88\u4e0a\u8ff0\u4ee3\u7801\u7684\u987a\u5e8f\uff0c\u4f46\u5728\u521d\u59cb\u5316\u65f6\u9996\u5148\u8981\u8c03\u7528 setCallBack \u63a5\u53e3 (callback \u6587\u4ef6\u7684\u7f16\u5199\u53ef\u4ee5\u53c2\u8003 demo)\uff0c\u518d\u8c03\u7528 Mars.init\uff0c\u6700\u540e\u518d\u8c03\u7528 onForeground \u548c makesureLongLinkConnect\uff0c\u4e2d\u95f4\u987a\u5e8f\u53ef\u4ee5\u968f\u610f\u66f4\u6539\u3002**\u6ce8\u610f\uff1aSTN \u9ed8\u8ba4\u662f\u540e\u53f0\uff0c\u6240\u4ee5\u521d\u59cb\u5316 STN \u540e\u9700\u8981\u4e3b\u52a8\u8c03\u7528\u4e00\u6b21**```BaseEvent.onForeground(true)```\n\n\u9700\u8981\u91ca\u653e STN \u6216\u8005\u9000\u51fa\u7a0b\u5e8f\u65f6:\n\n```java\nMars.onDestroy();\n```\n\n#### <a name=\"even\">Event Change</a>\n\n\u7f51\u7edc\u5207\u6362\u65f6:\n\n```java\nBaseEvent.onNetworkChange()\n```\n**********\n\u5982\u679c\u4f60\u662f\u628a mars-wrapper \u4f5c\u4e3a\u4f9d\u8d56\u52a0\u5165\u5230\u4f60\u7684\u9879\u76ee\u4e2d\uff0c\u4f60\u53ea\u9700\u8981\u663e\u5f0f\u7684\u521d\u59cb\u5316 STN\uff0c\u4e0d\u9700\u8981\u53cd\u521d\u59cb\u5316(\u56e0\u4e3a mars-wrapper \u4f1a\u8fdb\u884c\u53cd\u521d\u59cb\u5316)\n\n```java\nMarsServiceProxy.init(this, getMainLooper(),null);\n```\n************\n\u4e0d\u7ba1\u4f60\u662f\u4f7f\u7528 mars-wrapper \u8fd8\u662f mars-core\uff0c\u4f60\u90fd\u9700\u8981\u7279\u522b\u6ce8\u610f\u4ee5\u4e0b\u4e8b\u4ef6\uff1a\n\n\n\u524d\u540e\u53f0\u5207\u6362:\n\n```java\nBaseEvent.onForeground(boolean);\n```\n\n\u5e94\u7528\u7684\u8d26\u53f7\u4fe1\u606f\u66f4\u6539:\n\n```java\nStnLogic.reset();\n```\n\n\u5982\u679c\u4f60\u60f3\u4fee\u6539 Xlog \u7684\u52a0\u5bc6\u7b97\u6cd5\u6216\u8005\u957f\u77ed\u8fde\u7684\u52a0\u89e3\u5305\u90e8\u5206\u751a\u81f3\u66f4\u6539\u7ec4\u4ef6\u7684\u5176\u4ed6\u90e8\u5206\uff0c\u53ef\u4ee5\u53c2\u8003[\u8fd9\u91cc](https://github.com/Tencent/mars/wiki/Mars-Android-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97)\n\n### <a name=\"apple_cn\">[iOS/OS X](https://github.com/Tencent/mars/wiki/Mars-iOS%EF%BC%8FOS-X-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97)</a>\n\u7f16\u8bd1\n\n```\npython build_ios.py\n```\n\nor \n```python\npython build_osx.py\n```\n\n\u628a mars.framework \u4f5c\u4e3a\u4f9d\u8d56\u52a0\u5165\u5230\u4f60\u7684\u9879\u76ee\u4e2d\uff0c\u628amars/libraries/mars_android_sdk/jni \u76ee\u5f55\u7684\u540e\u7f00\u540d\u4e3a rewriteme \u7684\u6587\u4ef6\u540d\u5220\u6389\".rewriteme\"\u548c\u5934\u6587\u4ef6\u4e00\u8d77\u52a0\u5165\u5230\u4f60\u7684\u9879\u76ee\u4e2d\u3002\n\n#### <a name=\"Xlog\">Xlog Init</a>\n\n\u5728\u7a0b\u5e8f\u542f\u52a8\u52a0\u8f7d Xlog \u540e\u7d27\u63a5\u7740\u521d\u59cb\u5316 Xlog\u3002\u4f46\u8981\u6ce8\u610f\u4fdd\u5b58 log \u7684\u76ee\u5f55\u8bf7\u4f7f\u7528\u5355\u72ec\u7684\u76ee\u5f55\uff0c\u4e0d\u8981\u5b58\u653e\u4efb\u4f55\u5176\u4ed6\u6587\u4ef6\u9632\u6b62\u88ab xlog \u81ea\u52a8\u6e05\u7406\u529f\u80fd\u8bef\u5220\u3002\n\n\n```cpp\nNSString* logPath = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0] stringByAppendingString:@\"/log\"];\n\n// set do not backup for logpath\nconst char* attrName = \"com.apple.MobileBackup\";\nu_int8_t attrValue = 1;\nsetxattr([logPath UTF8String], attrName, &attrValue, sizeof(attrValue), 0, 0);\n\n// init xlogger\n#if DEBUG\nxlogger_SetLevel(kLevelDebug);\nappender_set_console_log(true);\n#else\nxlogger_SetLevel(kLevelInfo);\nappender_set_console_log(false);\n#endif\n\nXLogConfig config;\nconfig.mode_ = kAppenderAsync;\nconfig.logdir_ = [logPath UTF8String];\nconfig.nameprefix_ = \"Test\";\nconfig.pub_key_ = \"\";\nconfig.compress_mode_ = kZlib;\nconfig.compress_level_ = 0;\nconfig.cachedir_ = \"\";\nconfig.cache_days_ = 0;\nappender_open(config);\n```\n\n\u5728\u51fd\u6570 \"applicationWillTerminate\" \u4e2d\u53cd\u521d\u59cb\u5316 Xlog\n\n```cpp\nappender_close();\n```\n\n#### <a name=\"STN\">STN Init</a>\n\n\u5728\u4f60\u7528 STN \u4e4b\u524d\u521d\u59cb\u5316\uff1a\n\n```objc\n- (void)setCallBack {\n    mars::stn::SetCallback(mars::stn::StnCallBack::Instance());\n    mars::app::SetCallback(mars::app::AppCallBack::Instance());\n}\n\n- (void) createMars {\n    mars::baseevent::OnCreate();\n}\n\n- (void)setClientVersion:(UInt32)clientVersion {\n    mars::stn::SetClientVersion(clientVersion);\n}\n\n- (void)setShortLinkDebugIP:(NSString *)IP port:(const unsigned short)port {\n    std::string ipAddress([IP UTF8String]);\n    mars::stn::SetShortlinkSvrAddr(port, ipAddress);\n}\n\n- (void)setShortLinkPort:(const unsigned short)port {\n    mars::stn::SetShortlinkSvrAddr(port);\n}\n\n- (void)setLongLinkAddress:(NSString *)string port:(const unsigned short)port debugIP:(NSString *)IP {\n    std::string ipAddress([string UTF8String]);\n    std::string debugIP([IP UTF8String]);\n    std::vector<uint16_t> ports;\n    ports.push_back(port);\n    mars::stn::SetLonglinkSvrAddr(ipAddress,ports,debugIP);\n}\n\n- (void)setLongLinkAddress:(NSString *)string port:(const unsigned short)port {\n    std::string ipAddress([string UTF8String]);\n    std::vector<uint16_t> ports;\n    ports.push_back(port);\n    mars::stn::SetLonglinkSvrAddr(ipAddress,ports);\n}\n\n- (void)reportEvent_OnForeground:(BOOL)isForeground {\n    mars::baseevent::OnForeground(isForground);\n}\n\n- (void)makesureLongLinkConnect {\n    mars::stn::MakesureLonglinkConnected();\n}\n```\n\n\u521d\u59cb\u5316\u987a\u5e8f\u4e0d\u4e00\u5b9a\u8981\u4e25\u683c\u9075\u5b88\u4e0a\u8ff0\u4ee3\u7801\u7684\u987a\u5e8f\uff0c\u4f46\u5728\u521d\u59cb\u5316\u65f6\u9996\u5148\u8981\u8c03\u7528 setCallBack \u63a5\u53e3 (callback \u6587\u4ef6\u7684\u7f16\u5199\u53ef\u4ee5\u53c2\u8003 demo)\uff0c\u518d\u8c03\u7528 Mars.init\uff0c\u6700\u540e\u518d\u8c03\u7528 onForeground \u548c makesureLongLinkConnect\uff0c\u4e2d\u95f4\u987a\u5e8f\u53ef\u4ee5\u968f\u610f\u66f4\u6539\u3002**\u6ce8\u610f\uff1aSTN \u9ed8\u8ba4\u662f\u540e\u53f0\uff0c\u6240\u4ee5\u521d\u59cb\u5316 STN \u540e\u9700\u8981\u4e3b\u52a8\u8c03\u7528\u4e00\u6b21**```BaseEvent.onForeground(true)```\n\n\n\u9700\u8981\u91ca\u653e STN \u6216\u8005\u9000\u51fa\u7a0b\u5e8f\u65f6:\n\n```objc\n- (void)destroyMars {\n    mars::baseevent::OnDestroy();\n}\n```\n\n#### <a name=\"even\">Event Change</a>\n\n\u524d\u540e\u53f0\u5207\u6362\u65f6:\n\n```objc\n- (void)reportEvent_OnForeground:(BOOL)isForeground {\n    mars::baseevent::OnForeground(isForeground);\n}\n```\n\n\u7f51\u7edc\u5207\u6362\u65f6\uff1a\n\n```objc\n- (void)reportEvent_OnNetworkChange {\n    mars::baseevent::OnNetworkChange();\n}\n```\n### <a name=\"windows_cn\">[Windows](https://github.com/Tencent/mars/wiki/Mars-Windows-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97)</a>\n\u5b89\u88c5Visual Studio 2015\n\n\u7f16\u8bd1\n\n```python\npython build_windows.py\n```\n\n\u628a mars.lib\u4f5c\u4e3a\u4f9d\u8d56\u52a0\u5165\u5230\u4f60\u7684\u9879\u76ee\u4e2d\uff0c\u628amars/libraries/mars_android_sdk/jni \u76ee\u5f55\u7684\u540e\u7f00\u540d\u4e3a rewriteme \u7684\u6587\u4ef6\u540d\u5220\u6389\".rewriteme\"\u548c\u5934\u6587\u4ef6\u4e00\u8d77\u52a0\u5165\u5230\u4f60\u7684\u9879\u76ee\u4e2d\u3002\n\n#### <a name=\"Xlog\">Xlog Init</a>\n\n\u5728\u7a0b\u5e8f\u542f\u52a8\u52a0\u8f7d Xlog \u540e\u7d27\u63a5\u7740\u521d\u59cb\u5316 Xlog\u3002\u4f46\u8981\u6ce8\u610f\u4fdd\u5b58 log \u7684\u76ee\u5f55\u8bf7\u4f7f\u7528\u5355\u72ec\u7684\u76ee\u5f55\uff0c\u4e0d\u8981\u5b58\u653e\u4efb\u4f55\u5176\u4ed6\u6587\u4ef6\u9632\u6b62\u88ab xlog \u81ea\u52a8\u6e05\u7406\u529f\u80fd\u8bef\u5220\u3002\n\n```cpp\nstd::string logPath = \"\"; //use your log path\nstd::string pubKey = \"\"; //use you pubkey for log encrypt\n\n// init xlog\n#if DEBUG\nxlogger_SetLevel(kLevelDebug);\nappender_set_console_log(true);\n#else\nxlogger_SetLevel(kLevelInfo);\nappender_set_console_log(false);\n#endif\nappender_open(kAppenderAsync, logPath.c_str(), \"Test\", 0,  pubKey.c_str());\n```\n\n\u5728\u7a0b\u5e8f\u9000\u51fa\u524d\u53cd\u521d\u59cb\u5316 Xlog\n\n```cpp\nappender_close();\n```\n\n#### <a name=\"STN\">STN Init</a>\n\n\u5728\u4f60\u7528 STN \u4e4b\u524d\u521d\u59cb\u5316\uff1a\n\n```cpp\nvoid setShortLinkDebugIP(const std::string& _ip, unsigned short _port)\n{\n\tmars::stn::SetShortlinkSvrAddr(_port, _ip);\n}\nvoid setShortLinkPort(unsigned short _port)\n{\n\tmars::stn::SetShortlinkSvrAddr(_port, \"\");\n}\nvoid setLongLinkAddress(const std::string& _ip, unsigned short _port, const std::string& _debug_ip)\n{\n\tvector<uint16_t> ports;\n\tports.push_back(_port);\n\tmars::stn::SetLonglinkSvrAddr(_ip, ports, _debug_ip);\n}\n\nvoid Init()\n{\n\tmars::stn::SetCallback(mars::stn::StnCallBack::Instance());\n\tmars::app::SetCallback(mars::app::AppCallBack::Instance());\n\tmars::baseevent::OnCreate();\n\n\t//todo\n\t//mars::stn::SetClientVersion(version);\n\t//setShortLinkDebugIP(...)\n\t//setLongLinkAddress(...)\n\n\tmars::baseevent::OnForeground(true);\n\tmars::stn::MakesureLonglinkConnected();\n}\n```\n\n\u521d\u59cb\u5316\u987a\u5e8f\u4e0d\u4e00\u5b9a\u8981\u4e25\u683c\u9075\u5b88\u4e0a\u8ff0\u4ee3\u7801\u7684\u987a\u5e8f\uff0c\u4f46\u5728\u521d\u59cb\u5316\u65f6\u9996\u5148\u8981\u8c03\u7528 setCallBack \u63a5\u53e3 (callback \u6587\u4ef6\u7684\u7f16\u5199\u53ef\u4ee5\u53c2\u8003 demo)\uff0c\u518d\u8c03\u7528 Mars.init\uff0c\u6700\u540e\u518d\u8c03\u7528 onForeground \u548c makesureLongLinkConnect\uff0c\u4e2d\u95f4\u987a\u5e8f\u53ef\u4ee5\u968f\u610f\u66f4\u6539\u3002**\u6ce8\u610f\uff1aSTN \u9ed8\u8ba4\u662f\u540e\u53f0\uff0c\u6240\u4ee5\u521d\u59cb\u5316 STN \u540e\u9700\u8981\u4e3b\u52a8\u8c03\u7528\u4e00\u6b21**```BaseEvent.onForeground(true)```\n\n\n\u9700\u8981\u91ca\u653e STN \u6216\u8005\u9000\u51fa\u7a0b\u5e8f\u65f6:\n\n```cpp\nmars::baseevent::OnDestroy();\n```\n\n## Support\n\n\u8fd8\u6709\u5176\u4ed6\u95ee\u9898\uff1f\n\n1. \u53c2\u770b [mars/sample](https://github.com/Tencent/mars/tree/master/samples)\uff1b\n2. \u9605\u8bfb [\u6e90\u7801](https://github.com/Tencent/mars/tree/master)\uff1b\n3. \u9605\u8bfb [wiki](https://github.com/Tencent/mars/wiki) \u6216\u8005 [FAQ](https://github.com/Tencent/mars/wiki/Mars-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98)\uff1b\n4. \u8054\u7cfb\u6211\u4eec\u3002\n\n## Contributing\n\u5173\u4e8e Mars \u5206\u652f\u7ba1\u7406\u3001issue \u4ee5\u53ca pr \u89c4\u8303\uff0c\u8bf7\u9605\u8bfb [Mars Contributing Guide](https://github.com/Tencent/mars/blob/master/CONTRIBUTING.md)\u3002\n\n## License\nMars \u4f7f\u7528\u7684 MIT \u534f\u8bae\uff0c\u8be6\u7ec6\u8bf7\u53c2\u8003 [LICENSE](https://github.com/Tencent/mars/blob/master/LICENSE)\u3002\n\n## \u4fe1\u606f\u516c\u793a\n* SDK\u540d\u79f0\uff1aMars\n* \u7248\u672c\u53f7\uff1a0.2.0\n* \u5f00\u53d1\u8005\uff1a\u6df1\u5733\u5e02\u817e\u8baf\u8ba1\u7b97\u673a\u7cfb\u7edf\u6709\u9650\u516c\u53f8\n* \u4e3b\u8981\u529f\u80fd\uff1aMars \u662f\u5fae\u4fe1\u5b98\u65b9\u7684\u8de8\u5e73\u53f0\u8de8\u4e1a\u52a1\u7684\u7ec8\u7aef\u57fa\u7840\u7ec4\u4ef6\u3002\u652f\u6301iOS\u3001macOS \u548cAndroid\u3002Mars \u9488\u5bf9\u79fb\u52a8\u7f51\u7edc\u7684\u7279\u70b9\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u6700\u7ec8\u63d0\u4f9b\u4e86\u9ad8\u6027\u80fd\u7684\u7f51\u7edc\u529f\u80fd\u3002\n* [Mars \u4f7f\u7528\u8bf4\u660e](https://github.com/Tencent/mars)\n* [Mars \u4e2a\u4eba\u4fe1\u606f\u4fdd\u62a4\u89c4\u5219](https://support.weixin.qq.com/cgi-bin/mmsupportacctnodeweb-bin/pages/L60iIjTc9G2A383f)",
        "releases": [
            {
                "name": "v1.3.0",
                "date": "2019-04-01T04:31:19Z"
            },
            {
                "name": "",
                "date": "2018-12-30T10:14:49Z"
            },
            {
                "name": "v1.2.1",
                "date": "2017-10-12T11:10:05Z"
            },
            {
                "name": "v1.2.0",
                "date": "2017-08-03T08:50:15Z"
            },
            {
                "name": "v1.1.7",
                "date": "2017-07-06T09:09:15Z"
            },
            {
                "name": "",
                "date": "2017-05-31T06:43:32Z"
            }
        ]
    }
}