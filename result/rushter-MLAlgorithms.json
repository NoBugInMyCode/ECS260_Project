{
    "https://api.github.com/repos/rushter/MLAlgorithms": {
        "forks": 1778,
        "watchers": 10773,
        "stars": 10773,
        "languages": {
            "Python": 124757,
            "Dockerfile": 174
        },
        "commits": [
            "2022-01-31T06:13:40Z",
            "2022-01-30T23:51:43Z",
            "2020-09-13T22:16:40Z",
            "2020-09-13T22:13:43Z",
            "2020-08-20T19:45:02Z",
            "2020-08-20T19:43:06Z",
            "2020-08-20T19:26:04Z",
            "2020-08-20T19:20:13Z",
            "2020-08-20T19:18:01Z",
            "2020-05-29T14:12:48Z",
            "2020-05-29T13:25:18Z",
            "2020-05-29T12:32:01Z",
            "2020-05-28T14:17:03Z",
            "2020-02-26T09:10:16Z",
            "2020-02-26T09:07:45Z",
            "2020-02-24T19:19:10Z",
            "2020-02-24T07:44:38Z",
            "2020-01-01T17:40:00Z",
            "2019-11-29T07:42:46Z",
            "2019-11-29T05:33:39Z",
            "2019-10-13T07:06:02Z",
            "2019-10-10T07:11:17Z",
            "2019-10-10T07:10:05Z",
            "2019-10-02T12:35:46Z",
            "2019-10-02T12:13:34Z",
            "2019-10-01T23:34:27Z",
            "2019-08-25T16:59:26Z",
            "2019-07-22T11:13:53Z",
            "2019-05-11T15:14:43Z",
            "2019-03-15T07:00:16Z"
        ],
        "creation_date": "2016-10-05T06:46:45Z",
        "contributors": 26,
        "topics": [
            "deep-learning",
            "machine-learning",
            "machine-learning-algorithms",
            "neural-networks",
            "python"
        ],
        "subscribers": 423,
        "readme": "# Machine learning algorithms\nA collection of minimal and clean implementations of machine learning algorithms.\n\n### Why?\nThis project is targeting people who want to learn internals of ml algorithms or implement them from scratch.  \nThe code is much easier to follow than the optimized libraries and easier to play with.  \nAll algorithms are implemented in Python, using numpy, scipy and autograd.  \n\n### Implemented:\n* [Deep learning (MLP, CNN, RNN, LSTM)](mla/neuralnet)\n* [Linear regression, logistic regression](mla/linear_models.py)\n* [Random Forests](mla/ensemble/random_forest.py)\n* [Support vector machine (SVM) with kernels (Linear, Poly, RBF)](mla/svm)\n* [K-Means](mla/kmeans.py)\n* [Gaussian Mixture Model](mla/gaussian_mixture.py)\n* [K-nearest neighbors](mla/knn.py)\n* [Naive bayes](mla/naive_bayes.py)\n* [Principal component analysis (PCA)](mla/pca.py)\n* [Factorization machines](mla/fm.py)\n* [Restricted Boltzmann machine (RBM)](mla/rbm.py)\n* [t-Distributed Stochastic Neighbor Embedding (t-SNE)](mla/tsne.py)\n* [Gradient Boosting trees (also known as GBDT, GBRT, GBM, XGBoost)](mla/ensemble/gbm.py)\n* [Reinforcement learning (Deep Q learning)](mla/rl)\n\n\n### Installation\n```sh\n        git clone https://github.com/rushter/MLAlgorithms\n        cd MLAlgorithms\n        pip install scipy numpy\n        python setup.py develop\n```\n### How to run examples without installation\n```sh\n        cd MLAlgorithms\n        python -m examples.linear_models\n```\n### How to run examples within Docker\n```sh\n        cd MLAlgorithms\n        docker build -t mlalgorithms .\n        docker run --rm -it mlalgorithms bash\n        python -m examples.linear_models\n```\n### Contributing\n\nYour contributions are always welcome!  \nFeel free to improve existing code, documentation or implement new algorithm.  \nPlease open an issue to propose your changes if they are big enough.  \n",
        "releases": []
    }
}