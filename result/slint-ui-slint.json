{
    "https://api.github.com/repos/slint-ui/slint": {
        "forks": 631,
        "watchers": 18199,
        "stars": 18199,
        "languages": {
            "Rust": 5976936,
            "Slint": 1679973,
            "C++": 334386,
            "TypeScript": 219761,
            "CMake": 45453,
            "Python": 40507,
            "Objective-C": 38071,
            "JavaScript": 22917,
            "Java": 19674,
            "CSS": 5636,
            "Shell": 5378,
            "Handlebars": 2662,
            "HTML": 2026,
            "C": 502
        },
        "commits": [
            "2025-01-21T21:57:47Z",
            "2025-01-21T20:50:55Z",
            "2025-01-21T15:50:50Z",
            "2025-01-21T14:39:04Z",
            "2024-12-20T09:08:23Z",
            "2025-01-21T13:37:10Z",
            "2025-01-21T12:23:26Z",
            "2025-01-20T16:55:23Z",
            "2025-01-21T13:29:34Z",
            "2025-01-17T14:47:55Z",
            "2025-01-20T16:14:16Z",
            "2025-01-20T09:51:03Z",
            "2025-01-20T15:45:18Z",
            "2025-01-20T12:18:38Z",
            "2025-01-20T12:17:48Z",
            "2025-01-20T10:18:51Z",
            "2025-01-18T13:00:11Z",
            "2025-01-20T08:21:49Z",
            "2025-01-20T08:21:07Z",
            "2025-01-17T13:23:15Z",
            "2025-01-17T11:21:10Z",
            "2025-01-16T20:56:20Z",
            "2025-01-17T15:02:46Z",
            "2025-01-17T13:02:07Z",
            "2025-01-17T10:51:36Z",
            "2025-01-14T13:35:19Z",
            "2025-01-17T10:54:00Z",
            "2025-01-17T10:25:31Z",
            "2024-12-18T14:39:16Z",
            "2025-01-14T12:32:46Z"
        ],
        "creation_date": "2020-05-04T08:53:03Z",
        "contributors": 30,
        "topics": [
            "cpp",
            "declarative-ui",
            "desktop",
            "embedded-devices",
            "gui",
            "javascript",
            "language",
            "lsp-server",
            "native",
            "rust",
            "rust-lang",
            "toolkit",
            "ui",
            "user-interface",
            "wasm",
            "webassembly",
            "widgets"
        ],
        "subscribers": 108,
        "readme": "<!-- Copyright \u00a9 SixtyFPS GmbH <info@slint.dev> ; SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-Royalty-free-2.0 OR LicenseRef-Slint-Software-3.0 -->\n\n![Slint](./logo/slint-logo-full-light.svg#gh-light-mode-only) ![Slint](./logo/slint-logo-full-dark.svg#gh-dark-mode-only)\n\n[![Build Status](https://github.com/slint-ui/slint/workflows/CI/badge.svg)](https://github.com/slint-ui/slint/actions)\n[![REUSE status](https://api.reuse.software/badge/github.com/slint-ui/slint)](https://api.reuse.software/info/github.com/slint-ui/slint)\n[![Discussions](https://img.shields.io/github/discussions/slint-ui/slint)](https://github.com/slint-ui/slint/discussions)\n\nSlint is a declarative GUI toolkit to build native user interfaces for embedded,\ndesktop, and mobile applications written in Rust, C++, JavaScript, or Python.\n\nThe name *Slint* is derived from our design goals:\n\n- **Scalable**: Slint should support responsive UI design, allow cross-platform\n    usage across operating systems and processor architectures and support\n    multiple programming languages.\n- **Lightweight**: Slint should require minimal resources, in terms of memory\n    and processing power, and yet deliver a smooth, smartphone-like user\n    experience on any device.\n- **Intuitive**: Designers and developers should feel productive while enjoying\n    the GUI design and development process. The design creation tools should be\n    intuitive to use for the designers. Similarly for the developers, the APIs\n    should be consistent and easy to use, no matter which programming language\n    they choose.\n- **Native**: GUI built with Slint should match the end users' expectations of a\n    native application irrespective of the platform - desktop, mobile, web or\n    embedded system. The UI design should be compiled to machine code and provide\n    flexibility that only a native application can offer: Access full operating\n    system APIs, utilize all CPU and GPU cores, connect to any peripheral.\n\nVisit [#MadeWithSlint](https://madewithslint.com) to view some of the projects\nusing Slint. We invite you to use Slint and be part of its community.\n\n## Current Status\n\nSlint is in active development. The state of support for each platform is as\nfollows:\n\n- **Embedded**: *Ready*. Slint is being used by customers in production on embedded\n    devices running embedded Linux and Windows. The Slint run-time requires less than\n    300KiB of RAM and can run on different processor architectures such as ARM Cortex M,\n    ESP32, STM32 from the MCU category to ARM Cortex A, Intel x86 from the MPU category.\n- **Desktop**: *In Progress*. While Slint is a good fit on Windows, Linux and Mac,\n    we are working on improving the platform support in subsequent releases.\n- **Web**: *In Progress*. Slint apps can be compiled to WebAssembly and can run\n    in a web browser. As there are many other web frameworks, the web platform\n    is not one of our primary target platforms. The web support is currently\n    limited to demo purposes.\n- **Mobile**\n  - Android: *In Progress*. Track the progress of work here https://github.com/slint-ui/slint/issues/46.\n  - iOS: *Todo*. Support for iOS will commence after the initial support for Android is completed.\n\n### Accessibility\n\nSlint supports keyboard based navigation of many widgets, and user interfaces\nare scalable. The basic infrastructure for assistive technology like screen\nreaders is in place. We're aware that more work is needed to get best-of-class\nsupport for users with special needs.\n\n## Demos\n\n### Embedded\n\n| RaspberryPi                          | STM32                         | RP2040                         |\n| ------------------------------------ | ----------------------------- | ------------------------------ |\n| [Video of Slint on Raspberry Pi][#1] | [Video of Slint on STM32][#2] | [Video of Slint on RP2040][#3] |\n\n### Desktop\n\n| Windows                                     | macOS                                     | Linux                                     |\n| ------------------------------------------- | ----------------------------------------- | ----------------------------------------- |\n| ![Screenshot of the Gallery on Windows][#4] | ![Screenshot of the Gallery on macOS][#5] | ![Screenshot of the Gallery on Linux][#6] |\n\n### Web using WebAssembly\n\n| Printer Demo                                | Slide Puzzle                                 | Energy Monitor                                       | Widget Gallery                                | Weather demo                                  |\n| ------------------------------------------- | -------------------------------------------- | ---------------------------------------------------- | --------------------------------------------- | --------------------------------------------- |\n| [![Screenshot of the Printer Demo][#7]][#8] | [![Screenshot of the Slide Puzzle][#9]][#10] | [![Screenshot of the Energy Monitor Demo][#11]][#12] | [![Screenshot of the Gallery Demo][#13]][#14] | [![Screenshot of the weather Demo][#29]][#30] |\n\nMore examples and demos in the [examples folder](examples#examples)\n\n## Get Started\n\n### Hello World\n\nThe UI is defined in a Domain Specific Language that is declarative, easy to use,\nintuitive, and provides a powerful way to describe graphical elements, their\nplacement, their hierarchy, property bindings, and the flow of data through the\ndifferent states.\n\nHere's the obligatory \"Hello World\":\n\n```slint\nexport component HelloWorld inherits Window {\n    width: 400px;\n    height: 400px;\n\n    Text {\n       y: parent.width / 2;\n       x: parent.x + 200px;\n       text: \"Hello, world\";\n       color: blue;\n    }\n}\n```\n\n### Documentation\n\nFor more details, check out the [Slint Language Documentation](https://slint.dev/docs/slint).\n\nThe [examples](examples) folder contains examples and demos, showing how to\nuse the Slint markup language and how to interact with a Slint user interface\nfrom supported programming languages.\n\nThe `docs` folder contains a lot more information, including\n[build instructions](docs/building.md), and\n[internal developer docs](docs/development.md).\n\nRefer to the README of each language directory in the `api` folder:\n\n- [C++](api/cpp) ([Documentation][#15] | [Getting Started Template][#17])\n- [Rust](api/rs/slint) [![Crates.io][#18]][#19] ([Documentation][#20] | [Tutorial Video][#22] | [Getting Started Template][#23])\n- [JavaScript/NodeJS (Beta)](api/node) [![npm][#24]][#25] ([Documentation][#26] | [Getting Started Template][#28])\n\n## Architecture\n\nAn application is composed of the business logic written in Rust, C++, or\nJavaScript and the `.slint` user interface design markup, which is compiled to\nnative code.\n\n![Architecture Overview](https://slint.dev/resources/architecture.drawio.svg)\n\n### Compiler\n\nThe `.slint` files are compiled ahead of time. The expressions in the `.slint`\nare pure functions that the compiler can optimize. For example, the compiler\ncould choose to \"inline\" properties and remove those that are constant or\nunchanged. In the future we hope to improve rendering time on low end devices by\npre-processing images and text. The compiler could determine that a `Text` or an\n`Image` element is always on top of another `Image` in the same location.\nConsequently both elements could be rendered ahead of time into a single\nelement, thus cutting down on rendering time.\n\nThe compiler uses the typical compiler phases of lexing, parsing, optimization,\nand finally code generation. It provides different back-ends for code generation\nin the target language. The C++ code generator produces a C++ header file, the\nRust generator produces Rust code, and so on. An interpreter for dynamic\nlanguages is also included.\n\n### Runtime\n\nThe runtime library consists of an engine that supports properties declared in\nthe `.slint` language. Components with their elements, items, and properties are\nlaid out in a single memory region, to reduce memory allocations.\n\nRendering backends and styles are configurable at compile time:\n\n- The `femtovg` renderer uses OpenGL ES 2.0 for rendering.\n- The `skia` renderer uses [Skia](https://skia.org) for rendering.\n- The `software` renderer uses the CPU with no additional dependencies.\n\nNOTE: When Qt is installed on the system, the `qt` style becomes available,\nusing Qt's QStyle to achieve native looking widgets.\n\n### Tooling\n\nWe have a few tools to help with the development of .slint files:\n\n- A [**LSP Server**](./tools/lsp) that adds features like auto-complete and live\n  preview of the .slint files to many editors.\n- It is bundled in a [**Visual Studio Code Extension**](./editors/vscode)\n  available from the market place.\n- A [**slint-viewer**](./tools/viewer) tool which displays the .slint files. The\n  `--auto-reload` argument makes it easy to preview your UI while you are\n  working on it (when using the LSP preview is not possible).\n- [**SlintPad**](https://slintpad.com/), an online editor to try out .slint syntax\n  without installing anything ([sources](./tools/slintpad)).\n- An [**updater**](./tools/updater) to convert the .slint files from\n  previous versions to newer versions.\n- An experimental [**Figma importer**](./tools/figma_import).\n\nPlease check our [Editors README](./editors/README.md) for tips on how to\nconfigure your favorite editor to work well with Slint.\n\n## License\n\nYou can use Slint under ***any*** of the following licenses, at your choice:\n\n1. Build proprietary desktop, mobile, or web applications for free with the [Royalty-free License](LICENSES/LicenseRef-Slint-Royalty-free-2.0.md),\n2. Build open source embedded, desktop, mobile, or web applications for free with the [GNU GPLv3](LICENSES/GPL-3.0-only.txt),\n3. Build proprietary embedded, desktop, mobile, or web applications with the [Paid license](LICENSES/LicenseRef-Slint-Software-3.0.md).\n\nSee the [Slint licensing options on the website](https://slint.dev/pricing.html) and the [Licensing FAQ](FAQ.md#licensing).\n\n## Contributions\n\nWe welcome your contributions: in the form of code, bug reports or feedback.\n\n- If you see an [RFC tag](https://github.com/slint-ui/slint/labels/rfc) on an\n  issue, feel free to chime in.\n- For contribution guidelines see [CONTRIBUTING.md](CONTRIBUTING.md).\n\n## Frequently Asked Questions\n\nPlease see our separate [FAQ](FAQ.md).\n\n## About us (SixtyFPS GmbH)\n\nWe are passionate about software - API design, cross-platform software\ndevelopment and user interface components. Our aim is to make developing user\ninterfaces fun for everyone: from Python, JavaScript, C++, or Rust developers all the\nway to UI/UX designers. We believe that software grows organically and keeping\nit open source is the best way to sustain that growth. Our team members are\nlocated remotely in Germany.\n\n### Stay up to date\n\n- Follow [@slint_ui](https://twitter.com/slint_ui) on X/Twitter.\n- Follow [@slint@fosstodon.org](https://mastodon.social/@slint@fosstodon.org) on Mastodon.\n- Follow [@slint-ui](https://www.linkedin.com/company/slint-ui/) on LinkedIn.\n- Follow [@slint.dev](https://bsky.app/profile/slint.dev) on Bluesky\n- Subscribe to our [YouTube channel](https://www.youtube.com/@Slint-UI)\n\n### Contact us\n\nFeel free to join [Github discussions](https://github.com/slint-ui/slint/discussions)\nfor general chat or questions. Use [Github issues](https://github.com/slint-ui/slint/issues)\nto report public suggestions or bugs.\n\nWe chat in [our Mattermost instance](https://chat.slint.dev) where you are\nwelcome to listen in or ask your questions.\n\nYou can of course also contact us privately via email to [info@slint.dev](mailto://info@slint.dev).\n\n[#1]: https://www.youtube.com/watch?v=_BDbNHrjK7g\n[#2]: https://www.youtube.com/watch?v=NNNOJJsOAis\n[#3]: https://www.youtube.com/watch?v=dkBwNocItGs\n[#4]: https://slint.dev/resources/gallery_win_screenshot.png \"Gallery\"\n[#5]: https://slint.dev/resources/gallery_mac_screenshot.png \"Gallery\"\n[#6]: https://slint.dev/resources/gallery_linux_screenshot.png \"Gallery\"\n[#7]: https://slint.dev/resources/printerdemo_screenshot.png \"Printer Demo\"\n[#8]: https://slint.dev/demos/printerdemo/\n[#9]: https://slint.dev/resources/puzzle_screenshot.png \"Slide Puzzle\"\n[#10]: https://slint.dev/demos/slide_puzzle/\n[#11]: https://slint.dev/resources/energy-monitor-screenshot.png \"Energy Monitor Demo\"\n[#12]: https://slint.dev/demos/energy-monitor/\n[#13]: https://slint.dev/resources/gallery_screenshot.png \"Gallery Demo\"\n[#14]: https://slint.dev/demos/gallery/\n[#15]: https://slint.dev/latest/docs/cpp\n[#17]: https://github.com/slint-ui/slint-cpp-template\n[#18]: https://img.shields.io/crates/v/slint\n[#19]: https://crates.io/crates/slint\n[#20]: https://slint.dev/latest/docs/rust/slint/\n[#22]: https://youtu.be/WBcv4V-whHk\n[#23]: https://github.com/slint-ui/slint-rust-template\n[#24]: https://img.shields.io/npm/v/slint-ui\n[#25]: https://www.npmjs.com/package/slint-ui\n[#26]: https://slint.dev/latest/docs/node\n[#28]: https://github.com/slint-ui/slint-nodejs-template\n[#29]: ./demos/weather-demo/docs/img/desktop-preview.png \"Weather Demo\"\n[#30]: https://slint.dev/demos/weather-demo/\n\n",
        "releases": [
            {
                "name": "1.9.2",
                "date": "2025-01-13T10:58:26Z"
            },
            {
                "name": "1.9.1",
                "date": "2024-12-21T16:58:50Z"
            },
            {
                "name": "1.9.0",
                "date": "2024-12-18T18:38:36Z"
            },
            {
                "name": "1.8.0",
                "date": "2024-09-23T13:31:31Z"
            },
            {
                "name": "nightly",
                "date": "2024-08-21T15:49:14Z"
            },
            {
                "name": "1.7.2",
                "date": "2024-08-14T08:29:57Z"
            },
            {
                "name": "1.7.1",
                "date": "2024-07-25T14:59:19Z"
            },
            {
                "name": "1.7.0",
                "date": "2024-07-18T11:17:36Z"
            },
            {
                "name": "1.6.0",
                "date": "2024-05-13T09:48:21Z"
            },
            {
                "name": "1.5.1",
                "date": "2024-03-20T09:36:03Z"
            },
            {
                "name": "1.5.0",
                "date": "2024-03-14T11:02:47Z"
            },
            {
                "name": "1.4.1",
                "date": "2024-02-02T09:57:12Z"
            },
            {
                "name": "1.4.0",
                "date": "2024-01-31T10:23:32Z"
            },
            {
                "name": "1.3.2",
                "date": "2023-12-01T13:12:19Z"
            },
            {
                "name": "1.3.1",
                "date": "2023-11-28T09:20:15Z"
            },
            {
                "name": "1.3.0",
                "date": "2023-11-10T12:03:27Z"
            },
            {
                "name": "1.2.2",
                "date": "2023-10-02T11:53:07Z"
            },
            {
                "name": "1.2.1",
                "date": "2023-09-19T12:50:36Z"
            },
            {
                "name": "1.2.0",
                "date": "2023-09-04T11:36:38Z"
            },
            {
                "name": "1.1.1",
                "date": "2023-07-10T09:08:47Z"
            },
            {
                "name": "1.1.0",
                "date": "2023-06-26T12:43:47Z"
            },
            {
                "name": "1.0.2",
                "date": "2023-04-26T11:35:05Z"
            },
            {
                "name": "1.0.1",
                "date": "2023-04-20T13:04:45Z"
            },
            {
                "name": "1.0.0",
                "date": "2023-04-03T10:06:36Z"
            },
            {
                "name": "0.3.5",
                "date": "2023-02-21T09:34:54Z"
            },
            {
                "name": "0.3.4",
                "date": "2023-01-25T14:05:04Z"
            },
            {
                "name": "0.3.3",
                "date": "2022-12-16T09:18:59Z"
            },
            {
                "name": "0.3.2",
                "date": "2022-11-28T13:02:46Z"
            },
            {
                "name": "0.3.1",
                "date": "2022-10-28T09:26:30Z"
            },
            {
                "name": "0.3.0",
                "date": "2022-09-14T15:32:48Z"
            },
            {
                "name": "0.2.5",
                "date": "2022-07-06T09:50:04Z"
            },
            {
                "name": "0.2.4",
                "date": "2022-05-09T16:14:23Z"
            },
            {
                "name": "0.2.3",
                "date": "2022-05-09T13:46:58Z"
            },
            {
                "name": "0.2.2",
                "date": "2022-05-04T11:49:09Z"
            },
            {
                "name": "0.2.1",
                "date": "2022-03-10T08:47:11Z"
            },
            {
                "name": "0.2.0",
                "date": "2022-02-10T08:22:31Z"
            },
            {
                "name": "0.1.6",
                "date": "2022-01-21T09:51:54Z"
            },
            {
                "name": "0.1.5",
                "date": "2021-11-24T14:16:13Z"
            },
            {
                "name": "0.1.4",
                "date": "2021-10-22T14:48:09Z"
            },
            {
                "name": "0.1.3",
                "date": "2021-10-06T13:53:26Z"
            },
            {
                "name": "0.1.2",
                "date": "2021-09-09T08:41:34Z"
            },
            {
                "name": "0.1.1",
                "date": "2021-08-19T08:42:20Z"
            },
            {
                "name": "0.1.0",
                "date": "2021-06-30T16:47:37Z"
            }
        ]
    }
}