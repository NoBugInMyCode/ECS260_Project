{
    "https://api.github.com/repos/typesense/typesense": {
        "forks": 673,
        "watchers": 21779,
        "stars": 21779,
        "languages": {
            "C++": 7615750,
            "C": 706304,
            "CMake": 41764,
            "Starlark": 24134,
            "Dockerfile": 19276,
            "Shell": 15356
        },
        "commits": [
            "2025-01-21T07:27:53Z",
            "2025-01-18T00:25:01Z",
            "2025-01-17T12:43:26Z",
            "2025-01-15T07:08:34Z",
            "2025-01-13T14:27:54Z",
            "2025-01-13T10:58:58Z",
            "2025-01-09T09:57:24Z",
            "2025-01-08T11:40:34Z",
            "2025-01-07T14:55:05Z",
            "2025-01-07T13:49:24Z",
            "2025-01-06T10:20:09Z",
            "2025-01-03T06:11:54Z",
            "2024-12-31T08:22:51Z",
            "2024-12-27T12:49:12Z",
            "2024-12-25T15:45:17Z",
            "2024-12-23T08:12:18Z",
            "2024-12-20T06:33:21Z",
            "2024-12-19T15:47:06Z",
            "2024-12-18T06:29:40Z",
            "2024-12-16T16:01:49Z",
            "2024-12-16T06:26:55Z",
            "2024-12-11T15:37:23Z",
            "2024-12-11T15:19:07Z",
            "2024-12-11T15:01:34Z",
            "2024-12-10T13:33:20Z",
            "2024-12-09T14:08:07Z",
            "2024-12-06T12:23:46Z",
            "2024-12-06T06:12:51Z",
            "2024-12-06T05:55:58Z",
            "2024-12-05T08:36:25Z"
        ],
        "creation_date": "2017-01-18T08:01:47Z",
        "contributors": 30,
        "topics": [
            "algolia",
            "datastore",
            "elasticsearch",
            "enterprise-search",
            "faceting",
            "full-text-search",
            "fuzzy-search",
            "geosearch",
            "in-memory",
            "instantsearch",
            "merchandising",
            "pinecone",
            "search",
            "search-engine",
            "semantic-search",
            "similarity-search",
            "site-search",
            "synonyms",
            "typo-tolerance",
            "vector-search"
        ],
        "subscribers": 131,
        "readme": "<p align=\"center\">\n  <a href=\"https://typesense.org\"><img src=\"assets/typesense_logo.svg\" alt=\"Typesense\" width=\"298\" /></a> \n</p>\n<p align=\"center\">\n  Typesense is a fast, typo-tolerant search engine for building delightful search experiences.\n</p>\n\n<p align=\"center\">\n  An Open Source Algolia Alternative & <br>\n  An Easier-to-Use ElasticSearch Alternative\n</p>\n\n<p align=\"center\">\n <!-- <a href=\"https://circleci.com/gh/typesense/typesense\"><img src=\"https://circleci.com/gh/typesense/typesense.svg?style=shield&circle-token=1addd775339738a3d90869ddd8201110d561feaa\"></a> -->\n <a href=\"https://hub.docker.com/r/typesense/typesense/tags\"><img src=\"https://img.shields.io/docker/pulls/typesense/typesense\"></a>\n  <a href=\"https://github.com/typesense\"><img src=\"https://img.shields.io/github/stars/typesense/typesense?label=github%20stars&style=flat\"></a><br>\n  <a href=\"https://cloud.typesense.org\"><img src=\"https://img.shields.io/badge/searches_per_month_on_typesense_cloud-10 Billion-blue\"></a>\n<p>\n<p align=\"center\">\n  <a href=\"https://typesense.org\">Website</a> | \n  <a href=\"https://typesense.org/docs/\">Documentation</a> | \n  <a href=\"https://typesense.link/roadmap\">Roadmap</a> | \n  <a href=\"https://typesense.link/slack-community\">Slack Community</a> | \n  <a href=\"https://threads.typesense.org/kb\">Community Threads</a> | \n  <a href=\"https://twitter.com/typesense\">Twitter</a>\n</p>\n<br>\n<p align=\"center\">\n  <img src=\"assets/typesense_books_demo.gif?raw=true\" alt=\"Typesense Demo\" width=\"459\" />\n</p>\n\n\u2728 Here are a couple of **live demos** that show Typesense in action on large datasets:\n\n- Search a 32M songs dataset from MusicBrainz: [songs-search.typesense.org](https://songs-search.typesense.org/)\n- Search a 28M books dataset from OpenLibrary: [books-search.typesense.org](https://books-search.typesense.org/)\n- Search a 2M recipe dataset from RecipeNLG: [recipe-search.typesense.org](https://recipe-search.typesense.org/)\n- Search 1M Git commit messages from the Linux Kernel: [linux-commits-search.typesense.org](https://linux-commits-search.typesense.org/)\n- Spellchecker with type-ahead, with 333K English words: [spellcheck.typesense.org](https://spellcheck.typesense.org/)\n- An E-Commerce Store Browsing experience: [ecommerce-store.typesense.org](https://ecommerce-store.typesense.org/)\n- GeoSearch / Browsing experience: [airbnb-geosearch.typesense.org](https://airbnb-geosearch.typesense.org/)\n- Search / Browse xkcd comics by topic: [xkcd-search.typesense.org](https://xkcd-search.typesense.org/)\n- Semantic / Hybrid search on 300K HN comments: [hn-comments-search.typesense.org](https://hn-comments-search.typesense.org)\n\n\ud83d\udde3\ufe0f \ud83c\udfa5 If you prefer watching videos:\n\n- Here's one where we introduce Typesense and show a walk-through: https://youtu.be/F4mB0x_B1AE?t=144\n- Check out Typesense's recent mention during Google I/O Developer Keynote: https://youtu.be/qBkyU1TJKDg?t=2399\n- Here's one where one of our community members gives an overview of Typesense and shows you an end-to-end demo: https://www.youtube.com/watch?v=kwtHOkf7Jdg\n\n## Quick Links\n\n- [Features](#features)\n- [Benchmarks](#benchmarks)\n- [Roadmap](#roadmap)\n- [Who's using this](#whos-using-this)\n- [Install](#install)\n- [Quick Start](#quick-start)\n- [Step-by-step Walk-through](#step-by-step-walk-through)\n- [API Documentation](#api-documentation)\n- [API Clients](#api-clients)\n- [Search UI Components](#search-ui-components)\n- [FAQ](#faq)\n- [Support](#support)\n- [Contributing](#contributing)\n- [Getting Latest Updates](#getting-latest-updates)\n- [Build from Source](#build-from-source)\n\n## Features\n\n- **Typo Tolerance:** Handles typographical errors elegantly, out-of-the-box.\n- **Simple and Delightful:** Simple to set-up, integrate with, operate and scale.\n- **\u26a1 Blazing Fast:** Built in C++. Meticulously architected from the ground-up for low-latency (<50ms) instant searches.\n- **Tunable Ranking:** Easy to tailor your search results to perfection.\n- **Sorting:** Dynamically sort results based on a particular field at query time (helpful for features like \"Sort by Price (asc)\").\n- **Faceting & Filtering:** Drill down and refine results.\n- **Grouping & Distinct:** Group similar results together to show more variety.\n- **Federated Search:** Search across multiple collections (indices) in a single HTTP request.\n- **Geo Search:** Search and sort by results around a latitude/longitude or within a bounding box.\n- **Vector Search:** Index embeddings from your machine learning models in Typesense and do a nearest-neighbor search. Can be used to build similarity search, semantic search, visual search, recommendations, etc.\n- **Semantic / Hybrid Search:** Automatically generate embeddings from within Typesense using built-in models like S-BERT, E-5, etc or use OpenAI, PaLM API, etc, for both queries and indexed data. This allows you to send JSON data into Typesense and build an out-of-the-box semantic search + keyword search experience.\n- **Conversational Search (Built-in RAG):** Send questions to Typesense and have the response be a fully-formed sentence, based on the data you've indexed in Typesense. Think ChatGPT, but over your own data.\n- **Image Search:** Search through images using text descriptions of their contents, or perform similarity searches, using the CLIP model.\n- **Voice Search:** Capture and send query via voice recordings - Typesense will transcribe (via Whisper model) and provide search results.\n- **Scoped API Keys:** Generate API keys that only allow access to certain records, for multi-tenant applications.\n- **JOINs:** Connect one or more collections via common reference fields and join them during query time. This allows you to model SQL-like relationships elegantly.\n- **Synonyms:** Define words as equivalents of each other, so searching for a word will also return results for the synonyms defined.\n- **Curation & Merchandizing:** Boost particular records to a fixed position in the search results, to feature them.\n- **Raft-based Clustering:** Setup a distributed cluster that is highly available.\n- **Seamless Version Upgrades:** As new versions of Typesense come out, upgrading is as simple as swapping out the binary and restarting Typesense.\n- **No Runtime Dependencies:** Typesense is a single binary that you can run locally or in production with a single command.\n\n**Don't see a feature on this list?** Search our issue tracker if someone has already requested it and add a comment to it explaining your use-case, or open a new issue if not. We prioritize our roadmap based on user feedback, so we'd love to hear from you.\n\n## Roadmap\n\nHere's Typesense's public roadmap: [https://typesense.link/roadmap](https://typesense.link/roadmap).\n\nThe first column also explains how we prioritize features, how you can influence prioritization and our release cadence. \n\n## Benchmarks\n\n- A dataset containing **2.2 Million recipes** (recipe names and ingredients):\n  - Took up about 900MB of RAM when indexed in Typesense\n  - Took 3.6mins to index all 2.2M records\n  - On a server with 4vCPUs, Typesense was able to handle a concurrency of **104 concurrent search queries per second**, with an average search processing time of **11ms**.\n- A dataset containing **28 Million books** (book titles, authors and categories):\n  - Took up about 14GB of RAM when indexed in Typesense\n  - Took 78mins to index all 28M records\n  - On a server with 4vCPUs, Typesense was able to handle a concurrency of **46 concurrent search queries per second**, with an average search processing time of **28ms**.\n- With a dataset containing **3 Million products** (Amazon product data), Typesense was able to handle a throughput of **250 concurrent search queries per second** on an 8-vCPU 3-node Highly Available Typesense cluster.\n\nWe'd love to benchmark with larger datasets, if we can find large ones in the public domain. If you have any suggestions for structured datasets that are open, please let us know by opening an issue. We'd also be delighted if you're able to share benchmarks from your own large datasets. Please send us a PR! \n\n## Who's using this?\n\nTypesense is used by a range of users across different domains and verticals.\n\nOn Typesense Cloud we serve more than **10 BILLION** searches per month. Typesense's Docker images have been downloaded over 12M times.\n\nWe've recently started documenting who's using it in our [Showcase](SHOWCASE.md).\nIf you'd like to be included in the list, please feel free to edit [SHOWCASE.md](SHOWCASE.md) and send us a PR.\n\nYou'll also see a list of user logos on the [Typesense Cloud](https://cloud.typesense.org) home page.\n\n## Install\n\n**Option 1:** You can download the [binary packages](https://typesense.org/downloads) that we publish for \nLinux (x86_64 & arm64) and Mac (x86_64).\n\n**Option 2:** You can also run Typesense from our [official Docker image](https://hub.docker.com/r/typesense/typesense).\n\n**Option 3:** Spin up a managed cluster with [Typesense Cloud](https://cloud.typesense.org):\n\n<a href=\"https://cloud.typesense.org\"><img src=\"assets/deploy_with_typesense_cloud.svg?raw=true\" alt=\"Deploy with Typesense Cloud\" height=\"60\" /></a> \n\n## Quick Start\n\nHere's a quick example showcasing how you can create a collection, index a document and search it on Typesense.\n \nLet's begin by starting the Typesense server via Docker:\n\n```\ndocker run -p 8108:8108 -v/tmp/data:/data typesense/typesense:27.1 --data-dir /data --api-key=Hu52dwsas2AdxdE\n```\n\nWe have [API Clients](#api-clients) in a couple of languages, but let's use the Python client for this example.\n\nInstall the Python client for Typesense:\n \n```\npip install typesense\n```\n\nWe can now initialize the client and create a `companies` collection:\n\n```python\nimport typesense\n\nclient = typesense.Client({\n  'api_key': 'Hu52dwsas2AdxdE',\n  'nodes': [{\n    'host': 'localhost',\n    'port': '8108',\n    'protocol': 'http'\n  }],\n  'connection_timeout_seconds': 2\n})\n\ncreate_response = client.collections.create({\n  \"name\": \"companies\",\n  \"fields\": [\n    {\"name\": \"company_name\", \"type\": \"string\" },\n    {\"name\": \"num_employees\", \"type\": \"int32\" },\n    {\"name\": \"country\", \"type\": \"string\", \"facet\": True }\n  ],\n  \"default_sorting_field\": \"num_employees\"\n})\n```\n\nNow, let's add a document to the collection we just created:\n\n```python\ndocument = {\n \"id\": \"124\",\n \"company_name\": \"Stark Industries\",\n \"num_employees\": 5215,\n \"country\": \"USA\"\n}\n\nclient.collections['companies'].documents.create(document)\n```\n\nFinally, let's search for the document we just indexed:\n\n```python\nsearch_parameters = {\n  'q'         : 'stork',\n  'query_by'  : 'company_name',\n  'filter_by' : 'num_employees:>100',\n  'sort_by'   : 'num_employees:desc'\n}\n\nclient.collections['companies'].documents.search(search_parameters)\n```\n\n**Did you notice the typo in the query text?** No big deal. Typesense handles typographic errors out-of-the-box!\n\n## Step-by-step Walk-through\n\nA step-by-step walk-through is available on our website [here](https://typesense.org/guide). \n\nThis will guide you through the process of starting up a Typesense server, indexing data in it and querying the data set. \n\n## API Documentation\n\nHere's our official API documentation, available on our website: [https://typesense.org/api](https://typesense.org/api).\n\nIf you notice any issues with the documentation or walk-through, please let us know or send us a PR here: [https://github.com/typesense/typesense-website](https://github.com/typesense/typesense-website).\n\n## API Clients\n\nWhile you can definitely use CURL to interact with Typesense Server directly, we offer official API clients to simplify using Typesense from your language of choice. The API Clients come built-in with a smart retry strategy to ensure that API calls made via them are resilient, especially in an HA setup.\n\n- [JavaScript](https://github.com/typesense/typesense-js)\n- [PHP](https://github.com/typesense/typesense-php)\n- [Python](https://github.com/typesense/typesense-python)\n- [Ruby](https://github.com/typesense/typesense-ruby)\n\nIf we don't offer an API client in your language, you can still use any popular HTTP client library to access Typesense's APIs directly. \n\nHere are some community-contributed clients and integrations:\n\n- [Go](https://github.com/typesense/typesense-go)\n- [.Net](https://github.com/DAXGRID/typesense-dotnet)\n- [Java](https://github.com/typesense/typesense-java)\n- [Rust](https://github.com/typesense/typesense-rust)\n- [Dart](https://github.com/typesense/typesense-dart)\n- [Perl](https://github.com/Ovid/Search-Typesense)\n- [Swift](https://github.com/typesense/typesense-swift)\n- [Clojure](https://github.com/runeanielsen/typesense-clj)\n- [python orm client](https://github.com/RedSnail/typesense_orm)\n- [PHP SEAL Adapter](https://github.com/schranz-search/seal-typesense-adapter)\n- [Elixir](https://github.com/jaeyson/ex_typesense)\n\nWe welcome community contributions to add more official client libraries and integrations. Please reach out to us at contact@typsense.org or open an issue on GitHub to collaborate with us on the architecture. \ud83d\ude4f\n\n### Framework Integrations\n\nWe also have the following framework integrations:\n\n- [Laravel](https://github.com/typesense/laravel-scout-typesense-engine)\n- [Firebase](https://github.com/typesense/firestore-typesense-search)\n- [Gatsby](https://www.gatsbyjs.com/plugins/gatsby-plugin-typesense/)\n- [WordPress](https://wordpress.org/plugins/search-with-typesense/?ref=typesense)\n- [WooCommerce](https://www.codemanas.com/downloads/typesense-search-for-woocommerce/?ref=typesense)\n- [Symfony](https://github.com/acseo/TypesenseBundle)\n- [InstantSearch](https://github.com/typesense/typesense-instantsearch-adapter)\n- [DocSearch](https://typesense.org/docs/guide/docsearch.html)\n- [Docusaurus](https://github.com/typesense/docusaurus-theme-search-typesense)\n- [ToolJet](https://tooljet.com/?ref=typesense)\n- [Plone CMS](https://pypi.org/project/zopyx.typesense/)\n- [Craft CMS](https://plugins.craftcms.com/typesense)\n- [SEAL](https://github.com/schranz-search/schranz-search) provides integrations of Typesense in Laravel, Symfony, Spiral, Yii and Laminas Mezzio PHP Framework\n\n### Postman Collection\n\nWe have a community-maintained Postman Collection here: [https://github.com/typesense/postman](https://github.com/typesense/postman).\n\n[Postman](https://www.postman.com/downloads/) is an app that let's you perform HTTP requests by pointing and clicking, instead of having to type them out in the terminal.\nThe Postman Collection above gives you template requests that you can import into Postman, to quickly make API calls to Typesense.\n\n## Search UI Components\n\nYou can use our [InstantSearch.js adapter](https://github.com/typesense/typesense-instantsearch-adapter) \nto quickly build powerful search experiences, complete with filtering, sorting, pagination and more.\n\nHere's how: [https://typesense.org/docs/guide/search-ui-components.html](https://typesense.org/docs/guide/search-ui-components.html) \n\n## FAQ\n\n### How does this differ from Elasticsearch?\n\nElasticsearch is a large piece of software, that takes non-trivial amount of effort to setup, administer, scale and fine-tune. \nIt offers you a few thousand configuration parameters to get to your ideal configuration. So it's better suited for large teams \nwho have the bandwidth to get it production-ready, regularly monitor it and scale it, especially when they have a need to store \nbillions of documents and petabytes of data (eg: logs).\n\nTypesense is built specifically for decreasing the \"time to market\" for a delightful search experience. It's a light-weight\nyet powerful & scaleable alternative that focuses on Developer Happiness and Experience with a clean well-documented API, clear semantics \nand smart defaults so it just works well out-of-the-box, without you having to turn many knobs.\n\nElasticsearch also runs on the JVM, which by itself can be quite an effort to tune to run optimally. Typesense, on the other hand, \nis a single light-weight self-contained native binary, so it's simple to setup and operate.\n\nSee a side-by-side feature comparison [here](https://typesense.org/typesense-vs-algolia-vs-elasticsearch-vs-meilisearch/).\n\n### How does this differ from Algolia?\n\nAlgolia is a proprietary, hosted, search-as-a-service product that works well, when cost is not an issue. From our experience,\nfast growing sites and apps quickly run into search & indexing limits, accompanied by expensive plan upgrades as they scale.\n\nTypesense on the other hand is an open-source product that you can run on your own infrastructure or\nuse our managed SaaS offering - [Typesense Cloud](https://cloud.typesense.org). \nThe open source version is free to use (besides of course your own infra costs). \nWith Typesense Cloud we don't charge by records or search operations. Instead, you get a dedicated cluster\nand you can throw as much data and traffic at it as it can handle. You only pay a fixed hourly cost & bandwidth charges \nfor it, depending on the configuration your choose, similar to most modern cloud platforms. \n\nFrom a product perspective, Typesense is closer in spirit to Algolia than Elasticsearch. \nHowever, we've addressed some important limitations with Algolia: \n\nAlgolia requires separate indices for each sort order, which counts towards your plan limits. Most of the index settings like \nfields to search, fields to facet, fields to group by, ranking settings, etc \nare defined upfront when the index is created vs being able to set them on the fly at query time.\n\nWith Typesense, these settings can be configured at search time via query parameters which makes it very flexible\nand unlocks new use cases. Typesense is also able to give you sorted results with a single index, vs having to create multiple.\nThis helps reduce memory consumption.\n\nAlgolia offers the following features that Typesense does not have currently: personalization & server-based search analytics. For analytics, you can still instrument your search on the client-side and send search metrics to your web analytics tool of choice. \n\nWe intend to bridge this gap in Typesense, but in the meantime, please let us know\nif any of these are a show stopper for your use case by creating a feature request in our issue tracker. \n\nSee a side-by-side feature comparison [here](https://typesense.org/typesense-vs-algolia-vs-elasticsearch-vs-meilisearch/).\n\n### Speed is great, but what about the memory footprint?\n\nA fresh Typesense server will consume about 30 MB of memory. As you start indexing documents, the memory use will \nincrease correspondingly. How much it increases depends on the number and type of fields you index. \n\nWe've strived to keep the in-memory data structures lean. To give you a rough idea: when 1 million \nHacker News titles are indexed along with their points, Typesense consumes 165 MB of memory. The same size of that data \non disk in JSON format is 88 MB. If you have any numbers from your own datasets that we can add to this section, please send us a PR!\n\n### Why the GPL license?\n\nFrom our experience companies are generally concerned when **libraries** they use are GPL licensed, since library code is directly integrated into their code and will lead to derivative work and trigger GPL compliance. However, Typesense Server is **server software** and we expect users to typically run it as a separate daemon, and not integrate it with their own code. GPL covers and allows for this use case generously **(eg: Linux is GPL licensed)**. Now, AGPL is what makes server software accessed over a network result in derivative work and not GPL. And for that reason we\u2019ve opted to not use AGPL for Typesense. \n\nNow, if someone makes modifications to Typesense server, GPL actually allows you to still keep the modifications to yourself as long as you don't distribute the modified code. So a company can for example modify Typesense server and run the modified code internally and still not have to open source their modifications, as long as they make the modified code available to everyone who has access to the modified software.\n\nNow, if someone makes modifications to Typesense server and distributes the modifications, that's where GPL kicks in. Given that we\u2019ve published our work to the community, we'd like for others' modifications to also be made open to the community in the spirit of open source. **We use GPL for this purpose.** Other licenses would allow our open source work to be modified, made closed source and distributed, which we want to avoid with Typesense for the project\u2019s long term sustainability.\n\nHere's more background on why GPL, as described by Discourse: https://meta.discourse.org/t/why-gnu-license/2531. Many of the points mentioned there resonate with us.\n\nNow, all of the above only apply to Typesense Server. Our client libraries are indeed meant to be integrated into our users\u2019 code and so they use Apache license.\n\nSo in summary, AGPL is what is usually problematic for server software and we\u2019ve opted not to use it. We believe GPL for Typesense Server captures the essence of what we want for this open source project. GPL has a long history of successfully being used by popular open source projects. Our libraries are still Apache licensed.\n\nIf you have specifics that prevent you from using Typesense due to a licensing issue, we're happy to explore this topic further with you. Please reach out to us.\n\n## Support\n\n\ud83d\udc4b \ud83c\udf10 If you have general questions about Typesense, want to say hello or just follow along, we'd like to invite you to join our public [Slack Community](https://typesense.link/slack-community). \n\nIf you run into any problems or issues, please create a GitHub issue and we'll try our best to help.\n\nWe strive to provide good support through our issue trackers on GitHub. However, if you'd like to receive private & prioritized support with:\n\n- Guaranteed SLAs\n- Phone / video calls to discuss your specific use case and get recommendations on best practices\n- Private discussions over Slack\n- Guidance around scaling best practices\n- Prioritized feature requests\n\nWe offer Paid Support options described [here](https://typesense.org/support/).\n\n## Contributing\n\nWe are a lean team on a mission to democratize search and we'll take all the help we can get! If you'd like to get involved, here's information on where we could use your help: [Contributing.md](https://github.com/typesense/typesense/blob/master/CONTRIBUTING.md)\n\n## Getting Latest Updates\n\nIf you'd like to get updates when we release new versions, click on the \"Watch\" button on the top and select \"Releases only\". GitHub will then send you notifications along with a changelog with each new release.\n\nWe also post updates to our Twitter account about releases and additional topics related to Typesense. Follow us here: [@typesense](https://twitter.com/typesense).\n\n\ud83d\udc4b \ud83c\udf10 We'll also post updates on our [Slack Community](https://typesense.link/slack-community). \n\n## Build from source\n\nWe use [Bazel](https://bazel.build) to build Typesense.\n\nTypesense requires the following dependencies: \n\n* C++11 compatible compiler (GCC >= 4.9.0, Apple Clang >= 8.0, Clang >= 3.9.0)\n* Snappy\n* zlib\n* OpenSSL (>=1.0.2)\n* curl\n* ICU\n\nPlease refer to the [CI build steps](.github/workflows/tests.yml) for the latest set of dependencies.\n\nOnce you've installed them, run the following from the root of the repo:\n\n```shell\nbazel build //:typesense-server\n```\n\nThe first build will take some time since other third-party libraries are pulled and built as part of the build process.\n\n---\n&copy; 2016-present Typesense Inc.\n",
        "releases": [
            {
                "name": "Version 27.1",
                "date": "2024-09-27T23:10:39Z"
            },
            {
                "name": "Version 27.0",
                "date": "2024-08-27T21:47:26Z"
            },
            {
                "name": "Version 26.0",
                "date": "2024-04-01T22:11:32Z"
            },
            {
                "name": "Version 0.25.2",
                "date": "2024-01-03T01:39:04Z"
            },
            {
                "name": "Version 0.25.1",
                "date": "2023-09-11T15:44:31Z"
            },
            {
                "name": "Version 0.25.0",
                "date": "2023-08-15T21:30:39Z"
            },
            {
                "name": "Version 0.24.1",
                "date": "2023-04-05T05:15:05Z"
            },
            {
                "name": "Version 0.24.0",
                "date": "2023-01-30T15:57:51Z"
            },
            {
                "name": "Version 0.23.1",
                "date": "2022-07-07T14:15:22Z"
            },
            {
                "name": "Version 0.23.0",
                "date": "2022-06-04T14:33:42Z"
            },
            {
                "name": "Version 0.22.2",
                "date": "2022-02-04T02:56:29Z"
            },
            {
                "name": "Version 0.22.1",
                "date": "2021-12-11T06:15:03Z"
            },
            {
                "name": "Version 0.22.0",
                "date": "2021-12-08T04:13:19Z"
            },
            {
                "name": "Version 0.21.0",
                "date": "2021-07-14T06:24:59Z"
            },
            {
                "name": "Version 0.20.0",
                "date": "2021-04-29T03:00:12Z"
            },
            {
                "name": "Version 0.19.0",
                "date": "2021-02-16T19:13:06Z"
            },
            {
                "name": "Version 0.18.0",
                "date": "2020-12-29T04:19:02Z"
            },
            {
                "name": "Version 0.17.0",
                "date": "2020-11-17T14:58:50Z"
            },
            {
                "name": "Version 0.16.1",
                "date": "2020-11-07T07:38:51Z"
            },
            {
                "name": "Version 0.16.0",
                "date": "2020-10-25T16:14:20Z"
            },
            {
                "name": "Version 0.15.0",
                "date": "2020-09-19T05:05:39Z"
            },
            {
                "name": "Version 0.14.0",
                "date": "2020-07-04T08:21:40Z"
            },
            {
                "name": "Version 0.13.0",
                "date": "2020-06-01T09:44:06Z"
            },
            {
                "name": "Version 0.12.0",
                "date": "2020-05-24T02:36:17Z"
            },
            {
                "name": "Version 0.11.2",
                "date": "2020-02-03T15:48:54Z"
            },
            {
                "name": "Version 0.11.0",
                "date": "2019-11-03T11:44:11Z"
            },
            {
                "name": "Version 0.10.1",
                "date": "2019-07-09T16:32:57Z"
            },
            {
                "name": "Version 0.10.0",
                "date": "2019-06-02T16:24:20Z"
            },
            {
                "name": "Version 0.9.2",
                "date": "2018-09-08T16:00:50Z"
            },
            {
                "name": "Version 0.9.1",
                "date": "2018-06-09T02:44:29Z"
            },
            {
                "name": "Version 0.9.0",
                "date": "2018-06-04T14:54:56Z"
            },
            {
                "name": "Version 0.8.0",
                "date": "2018-04-04T17:10:55Z"
            }
        ]
    }
}