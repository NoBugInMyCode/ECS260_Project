{
    "https://api.github.com/repos/acmesh-official/acme.sh": {
        "forks": 5117,
        "watchers": 40852,
        "stars": 40852,
        "languages": {
            "Shell": 1350141,
            "Dockerfile": 1528
        },
        "commits": [
            "2024-12-10T20:00:22Z",
            "2024-12-10T19:58:02Z",
            "2024-12-09T08:22:54Z",
            "2024-12-07T22:01:16Z",
            "2024-12-07T21:50:12Z",
            "2024-12-07T21:24:04Z",
            "2024-12-06T03:12:04Z",
            "2024-11-30T16:25:19Z",
            "2024-11-28T11:22:52Z",
            "2024-11-27T09:11:50Z",
            "2024-11-27T08:20:57Z",
            "2024-11-26T11:29:07Z",
            "2024-11-26T11:17:11Z",
            "2024-11-26T10:42:05Z",
            "2024-11-26T10:21:17Z",
            "2024-11-26T08:20:18Z",
            "2024-11-25T19:26:23Z",
            "2024-11-25T17:46:59Z",
            "2024-11-23T10:00:10Z",
            "2024-11-23T09:51:21Z",
            "2024-11-20T09:43:58Z",
            "2024-11-20T09:38:06Z",
            "2024-11-15T08:32:43Z",
            "2024-11-14T23:39:41Z",
            "2024-11-14T19:44:30Z",
            "2024-11-14T19:35:15Z",
            "2024-11-14T19:17:03Z",
            "2024-11-14T19:03:22Z",
            "2024-11-13T20:04:16Z",
            "2024-11-13T19:21:39Z"
        ],
        "creation_date": "2015-12-26T12:56:33Z",
        "contributors": 30,
        "topics": [
            "acme",
            "acme-client",
            "acme-protocol",
            "ash",
            "bash",
            "buypass",
            "certbot",
            "letsencrypt",
            "posix",
            "posix-sh",
            "shell",
            "zerossl"
        ],
        "subscribers": 490,
        "readme": "# An ACME Shell script: acme.sh \n\n[![FreeBSD](https://github.com/acmesh-official/acme.sh/actions/workflows/FreeBSD.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/FreeBSD.yml)\n[![OpenBSD](https://github.com/acmesh-official/acme.sh/actions/workflows/OpenBSD.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/OpenBSD.yml)\n[![NetBSD](https://github.com/acmesh-official/acme.sh/actions/workflows/NetBSD.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/NetBSD.yml)\n[![MacOS](https://github.com/acmesh-official/acme.sh/actions/workflows/MacOS.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/MacOS.yml)\n[![Ubuntu](https://github.com/acmesh-official/acme.sh/actions/workflows/Ubuntu.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Ubuntu.yml)\n[![Windows](https://github.com/acmesh-official/acme.sh/actions/workflows/Windows.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Windows.yml)\n[![Solaris](https://github.com/acmesh-official/acme.sh/actions/workflows/Solaris.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Solaris.yml)\n[![DragonFlyBSD](https://github.com/acmesh-official/acme.sh/actions/workflows/DragonFlyBSD.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/DragonFlyBSD.yml)\n[![Omnios](https://github.com/acmesh-official/acme.sh/actions/workflows/Omnios.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Omnios.yml)\n\n![Shellcheck](https://github.com/acmesh-official/acme.sh/workflows/Shellcheck/badge.svg)\n![PebbleStrict](https://github.com/acmesh-official/acme.sh/workflows/PebbleStrict/badge.svg)\n![DockerHub](https://github.com/acmesh-official/acme.sh/workflows/Build%20DockerHub/badge.svg)\n\n\n<a href=\"https://opencollective.com/acmesh\" alt=\"Financial Contributors on Open Collective\"><img src=\"https://opencollective.com/acmesh/all/badge.svg?label=financial+contributors\" /></a> \n[![Join the chat at https://gitter.im/acme-sh/Lobby](https://badges.gitter.im/acme-sh/Lobby.svg)](https://gitter.im/acme-sh/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Docker stars](https://img.shields.io/docker/stars/neilpang/acme.sh.svg)](https://hub.docker.com/r/neilpang/acme.sh \"Click to view the image on Docker Hub\")\n[![Docker pulls](https://img.shields.io/docker/pulls/neilpang/acme.sh.svg)](https://hub.docker.com/r/neilpang/acme.sh \"Click to view the image on Docker Hub\")\n\n\n\n- An ACME protocol client written purely in Shell (Unix shell) language.\n- Full ACME protocol implementation.\n- Support ECDSA certs\n- Support SAN and wildcard certs\n- Simple, powerful and very easy to use. You only need 3 minutes to learn it.\n- Bash, dash and sh compatible.\n- Purely written in Shell with no dependencies on python.\n- Just one script to issue, renew and install your certificates automatically.\n- DOES NOT require `root/sudoer` access.\n- Docker ready\n- IPv6 ready\n- Cron job notifications for renewal or error etc.\n\nIt's probably the `easiest & smartest` shell script to automatically issue & renew the free certificates.\n\nWiki: https://github.com/acmesh-official/acme.sh/wiki\n\nFor Docker Fans: [acme.sh :two_hearts: Docker ](https://github.com/acmesh-official/acme.sh/wiki/Run-acme.sh-in-docker)\n\nTwitter: [@neilpangxa](https://twitter.com/neilpangxa)\n\n\n# [\u4e2d\u6587\u8bf4\u660e](https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E)\n\n# Who:\n- [FreeBSD.org](https://blog.crashed.org/letsencrypt-in-freebsd-org/)\n- [ruby-china.org](https://ruby-china.org/topics/31983)\n- [Proxmox](https://pve.proxmox.com/wiki/Certificate_Management)\n- [pfsense](https://github.com/pfsense/FreeBSD-ports/pull/89)\n- [Loadbalancer.org](https://www.loadbalancer.org/blog/loadbalancer-org-with-lets-encrypt-quick-and-dirty)\n- [discourse.org](https://meta.discourse.org/t/setting-up-lets-encrypt/40709)\n- [Centminmod](https://centminmod.com/letsencrypt-acmetool-https.html)\n- [splynx](https://forum.splynx.com/t/free-ssl-cert-for-splynx-lets-encrypt/297)\n- [opnsense.org](https://github.com/opnsense/plugins/tree/master/security/acme-client/src/opnsense/scripts/OPNsense/AcmeClient)\n- [CentOS Web Panel](https://control-webpanel.com)\n- [lnmp.org](https://lnmp.org/)\n- [more...](https://github.com/acmesh-official/acme.sh/wiki/Blogs-and-tutorials)\n\n# Tested OS\n\n| NO | Status| Platform|\n|----|-------|---------|\n|1|[![MacOS](https://github.com/acmesh-official/acme.sh/actions/workflows/MacOS.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/MacOS.yml)|Mac OSX\n|2|[![Windows](https://github.com/acmesh-official/acme.sh/actions/workflows/Windows.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Windows.yml)|Windows (cygwin with curl, openssl and crontab included)\n|3|[![FreeBSD](https://github.com/acmesh-official/acme.sh/actions/workflows/FreeBSD.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/FreeBSD.yml)|FreeBSD\n|4|[![Solaris](https://github.com/acmesh-official/acme.sh/actions/workflows/Solaris.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Solaris.yml)|Solaris\n|5|[![Ubuntu](https://github.com/acmesh-official/acme.sh/actions/workflows/Ubuntu.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Ubuntu.yml)| Ubuntu\n|6|NA|pfsense\n|7|[![OpenBSD](https://github.com/acmesh-official/acme.sh/actions/workflows/OpenBSD.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/OpenBSD.yml)|OpenBSD\n|8|[![NetBSD](https://github.com/acmesh-official/acme.sh/actions/workflows/NetBSD.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/NetBSD.yml)|NetBSD\n|9|[![DragonFlyBSD](https://github.com/acmesh-official/acme.sh/actions/workflows/DragonFlyBSD.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/DragonFlyBSD.yml)|DragonFlyBSD\n|10|[![Omnios](https://github.com/acmesh-official/acme.sh/actions/workflows/Omnios.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Omnios.yml)|Omnios\n|11|[![Linux](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml)| Debian\n|12|[![Linux](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml)|CentOS\n|13|[![Linux](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml)|openSUSE\n|14|[![Linux](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml)|Alpine Linux (with curl)\n|15|[![Linux](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml)|Archlinux\n|16|[![Linux](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml)|fedora\n|17|[![Linux](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml)|Kali Linux\n|18|[![Linux](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml)|Oracle Linux\n|19|[![Linux](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml)|Mageia\n|10|[![Linux](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml)|Gentoo Linux\n|11|[![Linux](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml/badge.svg)](https://github.com/acmesh-official/acme.sh/actions/workflows/Linux.yml)|ClearLinux\n|22|-----| Cloud Linux  https://github.com/acmesh-official/acme.sh/issues/111\n|23|-----| OpenWRT: Tested and working. See [wiki page](https://github.com/acmesh-official/acme.sh/wiki/How-to-run-on-OpenWRT)\n|24|[![](https://acmesh-official.github.io/acmetest/status/proxmox.svg)](https://github.com/acmesh-official/letest#here-are-the-latest-status)| Proxmox: See Proxmox VE Wiki. Version [4.x, 5.0, 5.1](https://pve.proxmox.com/wiki/HTTPS_Certificate_Configuration_(Version_4.x,_5.0_and_5.1)#Let.27s_Encrypt_using_acme.sh), version [5.2 and up](https://pve.proxmox.com/wiki/Certificate_Management)\n\n\nCheck our [testing project](https://github.com/acmesh-official/acmetest):\n\nhttps://github.com/acmesh-official/acmetest\n\n# Supported CA\n\n- [ZeroSSL.com CA](https://github.com/acmesh-official/acme.sh/wiki/ZeroSSL.com-CA)(default)\n- Letsencrypt.org CA\n- [BuyPass.com CA](https://github.com/acmesh-official/acme.sh/wiki/BuyPass.com-CA)\n- [SSL.com CA](https://github.com/acmesh-official/acme.sh/wiki/SSL.com-CA)\n- [Google.com Public CA](https://github.com/acmesh-official/acme.sh/wiki/Google-Public-CA)\n- [Pebble strict Mode](https://github.com/letsencrypt/pebble)\n- Any other [RFC8555](https://tools.ietf.org/html/rfc8555)-compliant CA\n\n# Supported modes\n\n- Webroot mode\n- Standalone mode\n- Standalone tls-alpn mode\n- Apache mode\n- Nginx mode\n- DNS mode\n- [DNS alias mode](https://github.com/acmesh-official/acme.sh/wiki/DNS-alias-mode)\n- [Stateless mode](https://github.com/acmesh-official/acme.sh/wiki/Stateless-Mode)\n\n\n# 1. How to install\n\n### 1. Install online\n\nCheck this project: https://github.com/acmesh-official/get.acme.sh\n\n```bash\ncurl https://get.acme.sh | sh -s email=my@example.com\n```\n\nOr:\n\n```bash\nwget -O -  https://get.acme.sh | sh -s email=my@example.com\n```\n\n\n### 2. Or, Install from git\n\nClone this project and launch installation:\n\n```bash\ngit clone https://github.com/acmesh-official/acme.sh.git\ncd ./acme.sh\n./acme.sh --install -m my@example.com\n```\n\nYou `don't have to be root` then, although `it is recommended`.\n\nAdvanced Installation: https://github.com/acmesh-official/acme.sh/wiki/How-to-install\n\nThe installer will perform 3 actions:\n\n1. Create and copy `acme.sh` to your home dir (`$HOME`): `~/.acme.sh/`.\nAll certs will be placed in this folder too.\n2. Create alias for: `acme.sh=~/.acme.sh/acme.sh`.\n3. Create daily cron job to check and renew the certs if needed.\n\nCron entry example:\n\n```bash\n0 0 * * * \"/home/user/.acme.sh\"/acme.sh --cron --home \"/home/user/.acme.sh\" > /dev/null\n```\n\nAfter the installation, you must close the current terminal and reopen it to make the alias take effect.\n\nOk, you are ready to issue certs now.\n\nShow help message:\n\n```sh\nroot@v1:~# acme.sh -h\n```\n\n# 2. Just issue a cert\n\n**Example 1:** Single domain.\n\n```bash\nacme.sh --issue -d example.com -w /home/wwwroot/example.com\n```\n\nor:\n\n```bash\nacme.sh --issue -d example.com -w /home/username/public_html\n```\n\nor:\n\n```bash\nacme.sh --issue -d example.com -w /var/www/html\n```\n\n**Example 2:** Multiple domains in the same cert.\n\n```bash\nacme.sh --issue -d example.com -d www.example.com -d cp.example.com -w /home/wwwroot/example.com\n```\n\nThe parameter `/home/wwwroot/example.com` or `/home/username/public_html` or `/var/www/html` is the web root folder where you host your website files. You **MUST** have `write access` to this folder.\n\nSecond argument **\"example.com\"** is the main domain you want to issue the cert for.\nYou must have at least one domain there.\n\nYou must point and bind all the domains to the same webroot dir: `/home/wwwroot/example.com`.\n\nThe certs will be placed in `~/.acme.sh/example.com/`\n\nThe certs will be renewed automatically every **60** days.\n\nMore examples: https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert\n\n\n# 3. Install the cert to Apache/Nginx etc.\n\nAfter the cert is generated, you probably want to install/copy the cert to your Apache/Nginx or other servers.\nYou **MUST** use this command to copy the certs to the target files, **DO NOT** use the certs files in **~/.acme.sh/** folder, they are for internal use only, the folder structure may change in the future.\n\n**Apache** example:\n```bash\nacme.sh --install-cert -d example.com \\\n--cert-file      /path/to/certfile/in/apache/cert.pem  \\\n--key-file       /path/to/keyfile/in/apache/key.pem  \\\n--fullchain-file /path/to/fullchain/certfile/apache/fullchain.pem \\\n--reloadcmd     \"service apache2 force-reload\"\n```\n\n**Nginx** example:\n```bash\nacme.sh --install-cert -d example.com \\\n--key-file       /path/to/keyfile/in/nginx/key.pem  \\\n--fullchain-file /path/to/fullchain/nginx/cert.pem \\\n--reloadcmd     \"service nginx force-reload\"\n```\n\nOnly the domain is required, all the other parameters are optional.\n\nThe ownership and permission info of existing files are preserved. You can pre-create the files to define the ownership and permission.\n\nInstall/copy the cert/key to the production Apache or Nginx path.\n\nThe cert will be renewed every **60** days by default (which is configurable). Once the cert is renewed, the Apache/Nginx service will be reloaded automatically by the command: `service apache2 force-reload` or `service nginx force-reload`.\n\n\n**Please take care:  The reloadcmd is very important. The cert can be automatically renewed, but, without a correct 'reloadcmd' the cert may not be flushed to your server(like nginx or apache), then your website will not be able to show renewed cert in 60 days.**\n\n# 4. Use Standalone server to issue cert\n\n**(requires you to be root/sudoer or have permission to listen on port 80 (TCP))**\n\nPort `80` (TCP) **MUST** be free to listen on, otherwise you will be prompted to free it and try again.\n\n```bash\nacme.sh --issue --standalone -d example.com -d www.example.com -d cp.example.com\n```\n\nMore examples: https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert\n\n# 5. Use Standalone ssl server to issue cert\n\n**(requires you to be root/sudoer or have permission to listen on port 443 (TCP))**\n\nPort `443` (TCP) **MUST** be free to listen on, otherwise you will be prompted to free it and try again.\n\n```bash\nacme.sh --issue --alpn -d example.com -d www.example.com -d cp.example.com\n```\n\nMore examples: https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert\n\n\n# 6. Use Apache mode\n\n**(requires you to be root/sudoer, since it is required to interact with Apache server)**\n\nIf you are running a web server, it is recommended to use the `Webroot mode`.\n\nParticularly, if you are running an Apache server, you can use Apache mode instead. This mode doesn't write any files to your web root folder.\n\nJust set string \"apache\" as the second argument and it will force use of apache plugin automatically.\n\n```sh\nacme.sh --issue --apache -d example.com -d www.example.com -d cp.example.com\n```\n\n**This apache mode is only to issue the cert, it will not change your apache config files.\nYou will need to configure your website config files to use the cert by yourself.\nWe don't want to mess with your apache server, don't worry.**\n\nMore examples: https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert\n\n# 7. Use Nginx mode\n\n**(requires you to be root/sudoer, since it is required to interact with Nginx server)**\n\nIf you are running a web server, it is recommended to use the `Webroot mode`.\n\nParticularly, if you are running an nginx server, you can use nginx mode instead. This mode doesn't write any files to your web root folder.\n\nJust set string \"nginx\" as the second argument.\n\nIt will configure nginx server automatically to verify the domain and then restore the nginx config to the original version.\n\nSo, the config is not changed.\n\n```sh\nacme.sh --issue --nginx -d example.com -d www.example.com -d cp.example.com\n```\n\n**This nginx mode is only to issue the cert, it will not change your nginx config files.\nYou will need to configure your website config files to use the cert by yourself.\nWe don't want to mess with your nginx server, don't worry.**\n\nMore examples: https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert\n\n# 8. Automatic DNS API integration\n\nIf your DNS provider supports API access, we can use that API to automatically issue the certs.\n\nYou don't have to do anything manually!\n\n### Currently acme.sh supports most of the dns providers:\n\nhttps://github.com/acmesh-official/acme.sh/wiki/dnsapi\n\n# 9. Use DNS manual mode:\n\nSee: https://github.com/acmesh-official/acme.sh/wiki/dns-manual-mode first.\n\nIf your dns provider doesn't support any api access, you can add the txt record by hand.\n\n```bash\nacme.sh --issue --dns -d example.com -d www.example.com -d cp.example.com\n```\n\nYou should get an output like below:\n\n```sh\nAdd the following txt record:\nDomain:_acme-challenge.example.com\nTxt value:9ihDbjYfTExAYeDs4DBUeuTo18KBzwvTEjUnSwd32-c\n\nAdd the following txt record:\nDomain:_acme-challenge.www.example.com\nTxt value:9ihDbjxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n\nPlease add those txt records to the domains. Waiting for the dns to take effect.\n```\n\nThen just rerun with `renew` argument:\n\n```bash\nacme.sh --renew -d example.com\n```\n\nOk, it's done.\n\n**Take care, this is dns manual mode, it can not be renewed automatically. you will have to add a new txt record to your domain by your hand when you renew your cert.**\n\n**Please use dns api mode instead.**\n\n# 10. Issue ECC certificates\n\nJust set the `keylength` parameter with a prefix `ec-`.\n\nFor example:\n\n### Single domain ECC certificate\n\n```bash\nacme.sh --issue -w /home/wwwroot/example.com -d example.com --keylength ec-256\n```\n\n### SAN multi domain ECC certificate\n\n```bash\nacme.sh --issue -w /home/wwwroot/example.com -d example.com -d www.example.com --keylength ec-256\n```\n\nPlease look at the `keylength` parameter above.\n\nValid values are:\n\n1. **ec-256 (prime256v1, \"ECDSA P-256\", which is the default key type)**\n2. **ec-384 (secp384r1,  \"ECDSA P-384\")**\n3. **ec-521 (secp521r1,  \"ECDSA P-521\", which is not supported by Let's Encrypt yet.)**\n4. **2048   (RSA2048)**\n5. **3072   (RSA3072)**\n6. **4096   (RSA4096)**\n\n\n# 11. Issue Wildcard certificates\n\nIt's simple, just give a wildcard domain as the `-d` parameter.\n\n```sh\nacme.sh  --issue -d example.com  -d '*.example.com'  --dns dns_cf\n```\n\n\n\n# 12. How to renew the certs\n\nNo, you don't need to renew the certs manually. All the certs will be renewed automatically every **60** days.\n\nHowever, you can also force to renew a cert:\n\n```sh\nacme.sh --renew -d example.com --force\n```\n\nor, for ECC cert:\n\n```sh\nacme.sh --renew -d example.com --force --ecc\n```\n\n\n# 13. How to stop cert renewal\n\nTo stop renewal of a cert, you can execute the following to remove the cert from the renewal list:\n\n```sh\nacme.sh --remove -d example.com [--ecc]\n```\n\nThe cert/key file is not removed from the disk.\n\nYou can remove the respective directory (e.g. `~/.acme.sh/example.com`) by yourself.\n\n\n# 14. How to upgrade `acme.sh`\n\nacme.sh is in constant development, so it's strongly recommended to use the latest code.\n\nYou can update acme.sh to the latest code:\n\n```sh\nacme.sh --upgrade\n```\n\nYou can also enable auto upgrade:\n\n```sh\nacme.sh --upgrade --auto-upgrade\n```\n\nThen **acme.sh** will be kept up to date automatically.\n\nDisable auto upgrade:\n\n```sh\nacme.sh --upgrade --auto-upgrade 0\n```\n\n\n# 15. Issue a cert from an existing CSR\n\nhttps://github.com/acmesh-official/acme.sh/wiki/Issue-a-cert-from-existing-CSR\n\n\n# 16. Send notifications in cronjob\n\nhttps://github.com/acmesh-official/acme.sh/wiki/notify\n\n\n# 17. Under the Hood\n\nSpeak ACME language using shell, directly to \"Let's Encrypt\".\n\nTODO:\n\n\n# 18. Acknowledgments\n\n1. Acme-tiny: https://github.com/diafygi/acme-tiny\n2. ACME protocol: https://github.com/ietf-wg-acme/acme\n\n\n## Contributors\n\n### Code Contributors\n\nThis project exists thanks to all the people who contribute.\n<a href=\"https://github.com/acmesh-official/acme.sh/graphs/contributors\"><img src=\"https://opencollective.com/acmesh/contributors.svg?width=890&button=false\" /></a>\n\n### Financial Contributors\n\nBecome a financial contributor and help us sustain our community. [[Contribute](https://opencollective.com/acmesh/contribute)]\n\n#### Individuals\n\n<a href=\"https://opencollective.com/acmesh\"><img src=\"https://opencollective.com/acmesh/individuals.svg?width=890\"></a>\n\n#### Organizations\n\nSupport this project with your organization. Your logo will show up here with a link to your website. [[Contribute](https://opencollective.com/acmesh/contribute)]\n\n<a href=\"https://opencollective.com/acmesh/organization/0/website\"><img src=\"https://opencollective.com/acmesh/organization/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/acmesh/organization/1/website\"><img src=\"https://opencollective.com/acmesh/organization/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/acmesh/organization/2/website\"><img src=\"https://opencollective.com/acmesh/organization/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/acmesh/organization/3/website\"><img src=\"https://opencollective.com/acmesh/organization/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/acmesh/organization/4/website\"><img src=\"https://opencollective.com/acmesh/organization/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/acmesh/organization/5/website\"><img src=\"https://opencollective.com/acmesh/organization/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/acmesh/organization/6/website\"><img src=\"https://opencollective.com/acmesh/organization/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/acmesh/organization/7/website\"><img src=\"https://opencollective.com/acmesh/organization/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/acmesh/organization/8/website\"><img src=\"https://opencollective.com/acmesh/organization/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/acmesh/organization/9/website\"><img src=\"https://opencollective.com/acmesh/organization/9/avatar.svg\"></a>\n\n\n\n# 19. License & Others\n\nLicense is GPLv3\n\nPlease Star and Fork me.\n\n[Issues](https://github.com/acmesh-official/acme.sh/issues) and [pull requests](https://github.com/acmesh-official/acme.sh/pulls) are welcome.\n\n\n# 20. Donate\nYour donation makes **acme.sh** better:\n\n1. PayPal/Alipay(\u652f\u4ed8\u5b9d)/Wechat(\u5fae\u4fe1): [https://donate.acme.sh/](https://donate.acme.sh/)\n\n[Donate List](https://github.com/acmesh-official/acme.sh/wiki/Donate-list)\n",
        "releases": [
            {
                "name": "Minor fixes",
                "date": "2024-11-23T10:03:18Z"
            },
            {
                "name": "Minor, just for nsupdate hook",
                "date": "2024-09-23T16:13:05Z"
            },
            {
                "name": "Normal release",
                "date": "2024-09-15T09:12:32Z"
            },
            {
                "name": "Normal release",
                "date": "2023-10-06T11:42:20Z"
            },
            {
                "name": "Fix important remote exec bug",
                "date": "2023-06-09T13:12:01Z"
            },
            {
                "name": "Normal release",
                "date": "2022-11-23T13:54:55Z"
            },
            {
                "name": "Just fix the release number",
                "date": "2022-11-28T14:18:53Z"
            },
            {
                "name": "3.0.4",
                "date": "2022-05-06T10:07:42Z"
            },
            {
                "name": "3.0.3",
                "date": "2022-05-04T10:43:49Z"
            },
            {
                "name": "bug fixes",
                "date": "2022-02-04T05:55:10Z"
            },
            {
                "name": "More updates for DST root expiring issues",
                "date": "2021-10-03T14:52:13Z"
            },
            {
                "name": "Support multiple CAs",
                "date": "2021-08-01T02:43:49Z"
            },
            {
                "name": "Normal release",
                "date": "2021-06-02T13:10:07Z"
            },
            {
                "name": "Normal release",
                "date": "2021-05-03T16:31:31Z"
            },
            {
                "name": "Normal release",
                "date": "2020-12-01T13:47:44Z"
            },
            {
                "name": "Normal release",
                "date": "2020-08-27T14:01:18Z"
            },
            {
                "name": "Normal release",
                "date": "2020-05-04T00:42:44Z"
            },
            {
                "name": "bug fix",
                "date": "2020-01-15T14:49:13Z"
            },
            {
                "name": "Normal release",
                "date": "2020-01-14T12:26:14Z"
            },
            {
                "name": "Important fix",
                "date": "2019-09-28T03:32:12Z"
            },
            {
                "name": "Normal release",
                "date": "2019-08-11T04:09:57Z"
            },
            {
                "name": "Normal release",
                "date": "2019-04-29T14:08:01Z"
            },
            {
                "name": "Normal release",
                "date": "2019-01-25T13:44:55Z"
            },
            {
                "name": "fix bugs",
                "date": "2018-07-17T16:32:10Z"
            },
            {
                "name": "fix bugs",
                "date": "2018-03-29T13:41:15Z"
            },
            {
                "name": "Update for ACME v2",
                "date": "2018-03-14T01:52:42Z"
            },
            {
                "name": "Support ACME v2",
                "date": "2018-02-10T01:01:41Z"
            },
            {
                "name": "v2.7.5",
                "date": "2017-12-03T13:37:14Z"
            },
            {
                "name": "v2.7.4",
                "date": "2017-09-02T10:26:08Z"
            },
            {
                "name": "v2.7.3",
                "date": "2017-08-30T14:23:28Z"
            },
            {
                "name": "2.7.2",
                "date": "2017-06-20T13:50:31Z"
            },
            {
                "name": "v2.7.1",
                "date": "2017-06-16T14:37:42Z"
            },
            {
                "name": "v2.6.9",
                "date": "2017-05-10T13:17:14Z"
            },
            {
                "name": "archive for v2.6.8",
                "date": "2017-04-11T13:30:29Z"
            },
            {
                "name": "archive for v2.6.6",
                "date": "2017-02-15T12:27:17Z"
            },
            {
                "name": "",
                "date": "2017-01-16T11:29:06Z"
            },
            {
                "name": "2.6.4",
                "date": "2016-11-12T10:27:18Z"
            },
            {
                "name": "",
                "date": "2016-10-21T08:03:29Z"
            },
            {
                "name": "",
                "date": "2016-09-18T06:41:18Z"
            },
            {
                "name": "",
                "date": "2016-07-02T05:05:21Z"
            },
            {
                "name": "",
                "date": "2016-06-30T05:11:29Z"
            },
            {
                "name": "2.0.2",
                "date": "2016-04-14T13:43:43Z"
            },
            {
                "name": "",
                "date": "2016-04-09T15:42:19Z"
            },
            {
                "name": "",
                "date": "2016-04-06T14:15:06Z"
            }
        ]
    }
}