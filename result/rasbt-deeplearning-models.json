{
    "https://api.github.com/repos/rasbt/deeplearning-models": {
        "forks": 4022,
        "watchers": 16853,
        "stars": 16853,
        "languages": {
            "Jupyter Notebook": 35303662,
            "Python": 68007,
            "Shell": 212
        },
        "commits": [
            "2024-02-08T16:35:25Z",
            "2024-02-08T16:08:21Z",
            "2024-02-08T16:07:10Z",
            "2024-02-08T16:07:09Z",
            "2024-02-08T16:07:07Z",
            "2024-02-08T16:07:05Z",
            "2024-02-08T16:07:04Z",
            "2024-02-08T16:07:02Z",
            "2024-02-08T16:06:59Z",
            "2024-02-08T16:06:57Z",
            "2024-02-08T16:06:56Z",
            "2024-02-08T16:06:54Z",
            "2024-02-08T16:05:36Z",
            "2024-02-08T16:05:35Z",
            "2024-02-08T16:05:33Z",
            "2024-02-08T16:05:32Z",
            "2024-01-15T15:36:39Z",
            "2024-01-15T15:32:38Z",
            "2024-01-15T15:32:03Z",
            "2024-01-15T15:30:58Z",
            "2023-02-16T21:22:58Z",
            "2023-01-28T19:12:10Z",
            "2023-01-28T19:12:04Z",
            "2023-01-28T19:10:18Z",
            "2023-01-28T15:18:14Z",
            "2023-01-28T15:16:48Z",
            "2023-01-28T14:16:28Z",
            "2022-11-16T20:18:43Z",
            "2022-11-11T22:14:32Z",
            "2022-11-11T13:09:43Z"
        ],
        "creation_date": "2019-06-05T16:08:20Z",
        "contributors": 10,
        "topics": [],
        "subscribers": 595,
        "readme": "\n# Deep Learning Models\n\nA collection of various deep learning architectures, models, and tips for TensorFlow and PyTorch in Jupyter Notebooks.\n\n\n\n## Traditional Machine Learning\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- | \n| Perceptron | 2D toy data | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/basic-ml/perceptron.ipynb) [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/basic-ml/perceptron.ipynb) |\n| Logistic Regression | 2D toy data | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/basic-ml/logistic-regression.ipynb) [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/basic-ml/logistic-regression.ipynb)|\n| Softmax Regression (Multinomial Logistic Regression) | MNIST | TBD |  [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/basic-ml/softmax-regression.ipynb) [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/basic-ml/softmax-regression.ipynb) |\n| Softmax Regression with MLxtend's plot_decision_regions on Iris | Iris | TBD |  [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/basic-ml/softmax-regression-mlxtend-1.ipynb) |\n\n\n## Multilayer Perceptrons\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- | \n| Multilayer Perceptron | MNIST | TBD | [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/mlp/mlp-basic.ipynb) [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/mlp/mlp-basic.ipynb) [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/mlp/mlp-basic.ipynb) |\n| Multilayer Perceptron with Dropout | MNIST | TBD | [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/mlp/mlp-dropout.ipynb) [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/mlp/mlp-dropout.ipynb) [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/mlp/mlp-dropout.ipynb) |\n|Multilayer Perceptron with Batch Normalization | MNIST | TBD | [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/mlp/mlp-batchnorm.ipynb) [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/mlp/mlp-batchnorm.ipynb) [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/mlp/mlp-batchtnorm.ipynb) |\n|Multilayer Perceptron with Backpropagation from Scratch | MNIST | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/mlp/mlp-fromscratch__sigmoid-mse.ipynb) [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/mlp/mlp-fromscratch__sigmoid-mse.ipynb)|\n\n\n\n## Convolutional Neural Networks\n\n\n#### Basic\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- | \n| Convolutional Neural Network | TBD | TBD | [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/cnn/cnn-basic.ipynb)  [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-basic.ipynb) [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/cnn/cnn-basic.ipynb) |\n| CNN with He Initialization | TBD | TBD | [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/cnn/cnn-he-init.ipynb) [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-he-init.ipynb)  |\n\n\n\n#### Concepts\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| Replacing Fully-Connected by Equivalent Convolutional Layers | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/fc-to-conv.ipynb)  |\n\n\n\n---\n\n\n#### AlexNet\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| AlexNet Trained on CIFAR-10 | TBD | TBD | [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/cnn/cnn-alexnet-cifar10.ipynb) [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-alexnet-cifar10.ipynb) |\n| AlexNet with Grouped Convolutions Trained on CIFAR-10 | TBD | TBD | [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/cnn/cnn-alexnet-grouped-cifar10.ipynb) [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-alexnet-grouped-cifar10.ipynb) |\n\n\n\n#### DenseNet\n\n|Title | Description | Daset | Notebooks |\n| --- | --- | --- | --- | \n| DenseNet-121 Digit Classifier Trained on MNIST | TBD | TBD | [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/cnn/cnn-densenet121-mnist.ipynb) [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-densenet121-mnist.ipynb)  |\n| DenseNet-121 Image Classifier Trained on CIFAR-10 | TBD | TBD | [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/cnn/cnn-densenet121-cifar10.ipynb) [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-densenet121-cifar10.ipynb)  |\n\n\n\n#### Fully Convolutional\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| \"All Convolutionl Net\" -- A Fully Convolutional Neural Network | TBD |  TBD | [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/cnn/cnn-allconv.ipynb) [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-allconv.ipynb) |\n\n#### LeNet\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- | \n| LeNet-5 on MNIST | TBD | TBD | [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/cnn/cnn-lenet5-mnist.ipynb) [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-lenet5-mnist.ipynb)  |\n| LeNet-5 on CIFAR-10  | TBD | TBD | [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/cnn/cnn-lenet5-cifar10.ipynb) [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-lenet5-cifar10.ipynb)  |\n| LeNet-5 on QuickDraw | TBD | TBD | [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/cnn/cnn-lenet5-quickdraw.ipynb) [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-lenet5-quickdraw.ipynb) |\n\n\n\n\n#### MobileNet\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- | \n| MobileNet-v2 on Cifar-10 | TBD | TBD | [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/cnn/cnn-mobilenet-v2-cifar10.ipynb) [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-mobilenet-v2-cifar10.ipynb)  |\n| MobileNet-v3 small on Cifar-10 | TBD | TBD | [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/cnn/cnn-mobilenet-v3-small-cifar10.ipynb) [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-mobilenet-v3-small-cifar10.ipynb)  |\n| MobileNet-v3 large on Cifar-10 | TBD | TBD | [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/cnn/cnn-mobilenet-v3-large-cifar10.ipynb) [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-mobilenet-v3-large-cifar10.ipynb)   |\n| MobileNet-v3 large on MNIST via Embetter | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-embetter-mobilenet.ipynb)   |\n\n\n\n\n#### Network in Network\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| Network in Network Trained on CIFAR-10 | TBD | TBD | [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/cnn/cnn-nin-cifar10.ipynb) [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/nin-cifar10.ipynb)  |\n\n\n#### VGG\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| Convolutional Neural Network VGG-16 Trained on CIFAR-10 | TBD | TBD | [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/cnn/cnn-vgg16.ipynb) [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-vgg16.ipynb) [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/cnn/cnn-vgg16.ipynb) |\n| VGG-16 Smile Classifier | [CelebA](https://mmlab.ie.cuhk.edu.hk/projects/CelebA.html) | TBD | [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/cnn/cnn-vgg16-celeba.ipynb) [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-vgg16-celeba.ipynb)  |\n| VGG-16 Dogs vs Cats Classifier | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-vgg16-cats-dogs.ipynb)  |\n| Convolutional Neural Network VGG-19 | TBD | TBD | [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/cnn/cnn-vgg19.ipynb)  [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-vgg19.ipynb)  |\n\n\n\n\n#### ResNet\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- | \n| ResNet and Residual Blocks | [MNIST](http://yann.lecun.com/exdb/mnist/) | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/resnet-ex-1.ipynb)  |\n| ResNet-18 Digit Classifier| [MNIST](http://yann.lecun.com/exdb/mnist/) | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-resnet18-mnist.ipynb)  |\n| ResNet-18 Gender Classifier | [CelebA](https://mmlab.ie.cuhk.edu.hk/projects/CelebA.html) | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-resnet18-celeba-dataparallel.ipynb)  |\n| ResNet-34 Digit Classifier | [MNIST](http://yann.lecun.com/exdb/mnist/) | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-resnet34-mnist.ipynb)  |\n| ResNet-34 Object Classifier | [QuickDraw](https://quickdraw.withgoogle.com) | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-resnet34-quickdraw.ipynb)  |\n| ResNet-34 Gender Classifier| [CelebA](https://mmlab.ie.cuhk.edu.hk/projects/CelebA.html) | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-resnet34-celeba-dataparallel.ipynb)  |\n| ResNet-50 Digit Classifier| [MNIST](http://yann.lecun.com/exdb/mnist/) | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-resnet50-mnist.ipynb)  |\n| ResNet-50 Gender Classifier | [CelebA](https://mmlab.ie.cuhk.edu.hk/projects/CelebA.html) | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-resnet50-celeba-dataparallel.ipynb)  |\n| ResNet-101 Gender Classifier| [CelebA](https://mmlab.ie.cuhk.edu.hk/projects/CelebA.html) | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-resnet101-celeba.ipynb)  |\n| ResNet-101| [CIFAR-10](https://www.cs.toronto.edu/~kriz/cifar.html) | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-resnet101-cifar10.ipynb)  |\n| ResNet-152 Gender Classifier| [CelebA](https://mmlab.ie.cuhk.edu.hk/projects/CelebA.html) | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-resnet152-celeba.ipynb)  |\n\n\n---\n\n## Transformers\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| Multilabel DistilBERT | [Jigsaw Toxic Comment Challenge](https://www.kaggle.com/competitions/jigsaw-toxic-comment-classification-challenge) | DistilBERT classifier fine-tuning | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/transformer/distilbert-multilabel.ipynb)  |\n| DistilBERT as feature extractor | [IMDB movie review](https://ai.stanford.edu/~amaas/data/sentiment/) | DistilBERT classifier with sklearn random forest and logistic regression | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/transformer/1_distilbert-as-feature-extractor.ipynb)  |\n| DistilBERT as feature extractor using `embetter` | [IMDB movie review](https://ai.stanford.edu/~amaas/data/sentiment/) | DistilBERT classifier with sklearn random forest and logistic regression using the scikit-learn `embetter` library | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/transformer/distilbert-embetter-feature-extractor.ipynb)  |\n| Fine-tune DistilBERT I | [IMDB movie review](https://ai.stanford.edu/~amaas/data/sentiment/) | Fine-tune only the last 2 layers of DistilBERT classifier |  [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/transformer/distilbert-finetune-last-layers.ipynb) |\n| Fine-tune DistilBERT II | [IMDB movie review](https://ai.stanford.edu/~amaas/data/sentiment/) | Fine-tune the whole DistilBERT classifier | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/transformer/distilbert-hf-finetuning.ipynb) [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/transformer/distilbert-finetuning-ii.ipynb)  |\n\n---\n\n## Ordinal Regression and Deep Learning\n\nPlease note that the following notebooks below provide reference implementations to use the respective methods. They are not performance benchmarks.\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| Baseline multilayer perceptron | Cement | A baseline multilayer perceptron for classification trained with the standard cross entropy loss | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/ordinal/baseline_cement.ipynb) [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/ordinal/baseline-light_cement.ipynb) |\n| CORAL multilayer perceptron | Cement | Implementation of [Rank Consistent Ordinal Regression for Neural Networks with Application to Age Estimation](https://www.sciencedirect.com/science/article/pii/S016786552030413X) 2020 | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/ordinal/CORAL_cement.ipynb) [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/ordinal/CORAL-light_cement.ipynb) |\n| CORN multilayer perceptron | Cement | Implementation of [Deep Neural Networks for Rank-Consistent Ordinal Regression Based On Conditional Probabilities](https://arxiv.org/abs/2111.08851) 2022 | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/ordinal/CORN_cement.ipynb) [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/ordinal/CORN-light_cement.ipynb) |\n| Binary extension multilayer perceptron | Cement | Implementation of [Ordinal Regression with Multiple Output CNN for Age Estimation](https://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Niu_Ordinal_Regression_With_CVPR_2016_paper.pdf) 2016 | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/ordinal/niu2016_cement.ipynb) [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/ordinal/niu2016-light_cement.ipynb) |\n| Reformulated squared-error multilayer perceptron | Cement | Implementation of [A simple squared-error reformulation for ordinal classification](https://arxiv.org/abs/1612.00775) 2016 | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/ordinal/beckham2016_cement.ipynb) [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/ordinal/beckham2016-light_cement.ipynb) |\n| Class distance weighted cross-entropy loss | Cement | Implementation of [Class Distance Weighted Cross-Entropy Loss for Ulcerative Colitis Severity Estimation](https://arxiv.org/abs/2202.05167) 2022 | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/ordinal/polat2022_cement.ipynb)  [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/ordinal/polat2022-light_cement.ipynb) |\n\n---\n\n\n\n## Normalization Layers\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| BatchNorm before and after Activation for Network-in-Network CIFAR-10 Classifier | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/nin-cifar10_batchnorm.ipynb)  |\n| Filter Response Normalization for Network-in-Network CIFAR-10 Classifier | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/nin-cifar10_filter-response-norm.ipynb)  |\n\n\n\n## Metric Learning\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| Siamese Network with Multilayer Perceptrons | TBD | TBD | [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/metric/siamese-1.ipynb) |\n\n## Autoencoders\n\n#### Fully-connected Autoencoders\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| Autoencoder (MNIST) | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/autoencoder/ae-basic.ipynb) [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/autoencoder/ae-basic.ipynb) |\n| Autoencoder (MNIST) + Scikit-Learn Random Forest Classifier | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/autoencoder/ae-basic-with-rf.ipynb) [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/autoencoder/ae-basic-with-rf.ipynb) |\n\n\n\n\n\n\n#### Convolutional Autoencoders\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- | \n| Convolutional Autoencoder with Deconvolutions / Transposed Convolutions | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/autoencoder/ae-deconv.ipynb) [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/autoencoder/ae-deconv.ipynb) |\n| Convolutional Autoencoder with Deconvolutions and Continuous Jaccard Distance | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/autoencoder/ae-deconv-jaccard.ipynb)  |\n| Convolutional Autoencoder with Deconvolutions (without pooling operations) | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/autoencoder/ae-deconv-nopool.ipynb) |\n| Convolutional Autoencoder with Nearest-neighbor Interpolation | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/autoencoder/ae-conv-nneighbor.ipynb) [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/autoencoder/ae-conv-nneighbor.ipynb) |\n| Convolutional Autoencoder with Nearest-neighbor Interpolation -- Trained on CelebA | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/autoencoder/ae-conv-nneighbor-celeba.ipynb)  |\n| Convolutional Autoencoder with Nearest-neighbor Interpolation -- Trained on Quickdraw | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/autoencoder/ae-conv-nneighbor-quickdraw-1.ipynb)  |\n\n\n\n#### Variational Autoencoders\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| Variational Autoencoder | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/autoencoder/ae-var.ipynb)  |\n| Convolutional Variational Autoencoder | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/autoencoder/ae-conv-var.ipynb)  |\n\n\n\n#### Conditional Variational Autoencoders\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| Conditional Variational Autoencoder (with labels in reconstruction loss) | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/autoencoder/ae-cvae.ipynb)  |\n| Conditional Variational Autoencoder (without labels in reconstruction loss) | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/autoencoder/ae-cvae_no-out-concat.ipynb)  |\n| Convolutional Conditional Variational Autoencoder (with labels in reconstruction loss) | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/autoencoder/ae-cnn-cvae.ipynb) |\n| Convolutional Conditional Variational Autoencoder (without labels in reconstruction loss) | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/autoencoder/ae-cnn-cvae_no-out-concat.ipynb)  |\n\n\n\n\n## Generative Adversarial Networks (GANs)\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| Fully Connected GAN on MNIST | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/gan/gan.ipynb) [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/gan/gan.ipynb) |\n| Fully Connected Wasserstein GAN on MNIST | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/gan/wgan-1.ipynb)  |\n| Convolutional GAN on MNIST | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/gan/gan-conv.ipynb) [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/gan/gan-conv.ipynb) |\n| Convolutional GAN on MNIST with Label Smoothing | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/gan/gan-conv-smoothing.ipynb) [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/gan/gan-conv-smoothing.ipynb) |\n| Convolutional Wasserstein GAN on MNIST | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/gan/dc-wgan-1.ipynb)  |\n| Deep Convolutional GAN (DCGAN) on Cats and Dogs Images | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/gan/dcgan-cats-and-dogs.ipynb) |\n| Deep Convolutional GAN (DCGAN) on CelebA Face Images | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/gan/dcgan-celeba.ipynb)  |\n\n\n## Graph Neural Networks (GNNs)\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| Most Basic Graph Neural Network with Gaussian Filter on MNIST | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/gnn/gnn-basic-1.ipynb)  |\n| Basic Graph Neural Network with Edge Prediction on MNIST | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/gnn/gnn-basic-edge-1.ipynb)  |\n| Basic Graph Neural Network with Spectral Graph Convolution on MNIST | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/gnn/gnn-basic-graph-spectral-1.ipynb)  |\n\n\n\n## Recurrent Neural Networks (RNNs)\n\n\n\n\n#### Many-to-one: Sentiment Analysis / Classification\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| A simple single-layer RNN (IMDB) | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/rnn/rnn_simple_imdb.ipynb)  |\n| A simple single-layer RNN with packed sequences to ignore padding characters (IMDB) | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/rnn/rnn_simple_packed_imdb.ipynb)  |\n| RNN with LSTM cells (IMDB) | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/rnn/rnn_lstm_packed_imdb.ipynb) |\n| RNN with LSTM cells (IMDB) and pre-trained GloVe word vectors | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/rnn/rnn_lstm_packed_imdb-glove.ipynb)  |\n| RNN with LSTM cells and Own Dataset in CSV Format (IMDB) | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/rnn/rnn_lstm_packed_own_csv_imdb.ipynb) |\n| RNN with GRU cells (IMDB) | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/rnn/rnn_gru_packed_imdb.ipynb) |\n| Multilayer bi-directional RNN (IMDB) | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/rnn/rnn_lstm_bi_imdb.ipynb) |\n| Bidirectional Multi-layer RNN with LSTM with Own Dataset in CSV Format (AG News) | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/rnn/rnn_bi_multilayer_lstm_own_csv_agnews.ipynb)  |\n\n\n\n#### Many-to-Many / Sequence-to-Sequence\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| A simple character RNN to generate new text (Charles Dickens) | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/rnn/char_rnn-charlesdickens.ipynb) |\n\n\n\n## Model Evaluation\n\n### K-Fold Cross-Validation\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| Baseline CNN  | MNIST | A simple baseline with traditional train/validation/test splits | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/kfold/baseline-cnn-mnist.ipynb) [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/kfold/baseline-light-cnn-mnist.ipynb) |\n| K-fold with `pl_cross` | MNIST | A 5-fold cross-validation run using the `pl_cross` library | [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](pytorch-lightning_ipynb/kfold/kfold-light-cnn-mnist.ipynb)  |\n\n\n\n## Data Augmentation\n\n| Title                      | Dataset | Description | Notebooks                                                    |\n| -------------------------- | ------- | ----------- | ------------------------------------------------------------ |\n| AutoAugment & TrivialAugment for Image Data | CIFAR-10     | Trains a ResNet-18 using AutoAugment and TrivialAugment         | [![PyTorch Lightning](https://img.shields.io/badge/PyTorch-Lightning-blueviolet)](./pytorch-lightning_ipynb/data-augmentation/autoaugment) |\n\n\n\n\n## Tips and Tricks\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| Cyclical Learning Rate  | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/tricks/cyclical-learning-rate.ipynb)  |\n| Annealing with Increasing the Batch Size (w. CIFAR-10 & AlexNet) | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/tricks/cnn-alexnet-cifar10-batchincrease.ipynb)  |\n| Gradient Clipping (w. MLP on MNIST)  | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/tricks/gradclipping_mlp.ipynb)  |\n\n\n\n\n## Transfer Learning\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| Transfer Learning Example (VGG16 pre-trained on ImageNet for Cifar-10)  | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/transfer/transferlearning-vgg16-cifar10-1.ipynb)  |\n\n\n## Visualization and Interpretation\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| Vanilla Loss Gradient (wrt Inputs) Visualization (Based on a VGG16 Convolutional Neural Network for Kaggle's Cats and Dogs Images) | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/viz/cnns/cats-and-dogs/cnn-viz-grad__vgg16-cats-dogs.ipynb)  |\n| Guided Backpropagation (Based on a VGG16 Convolutional Neural Network for Kaggle's Cats and Dogs Images) | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/viz/cnns/cats-and-dogs/cnn-viz-guided-backprop__vgg16-cats-dogs.ipynb)  |\n\n\n\n## PyTorch Workflows and Mechanics\n\n\n#### PyTorch Lightning Examples\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| MLP in Lightning with TensorBoard  -- continue training the last model | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/lightning/lightning-mlp.ipynb)  |\n| MLP in Lightning with TensorBoard  -- checkpointing best model | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/lightning/lightning-mlp-best-model)  |\n\n\n\n\n#### Custom Datasets\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| Custom Data Loader Example for PNG Files | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/mechanics/custom-dataloader-png/custom-dataloader-example.ipynb)  |\n| Using PyTorch Dataset Loading Utilities for Custom Datasets -- CSV files converted to HDF5 | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/mechanics/custom-data-loader-csv.ipynb)  |\n| Using PyTorch Dataset Loading Utilities for Custom Datasets -- Face Images from CelebA | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/mechanics/custom-data-loader-celeba.ipynb) |\n| Using PyTorch Dataset Loading Utilities for Custom Datasets -- Drawings from Quickdraw | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/mechanics/custom-data-loader-quickdraw.ipynb) |\n| Using PyTorch Dataset Loading Utilities for Custom Datasets -- Drawings from the Street View House Number (SVHN) Dataset | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/mechanics/custom-data-loader-svhn.ipynb) |\n| Using PyTorch Dataset Loading Utilities for Custom Datasets -- Asian Face Dataset (AFAD) | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/mechanics/custom-data-loader-afad.ipynb)  |\n| Using PyTorch Dataset Loading Utilities for Custom Datasets -- Dating Historical Color Images | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/mechanics/custom-data-loader_dating-historical-color-images.ipynb) |\n| Using PyTorch Dataset Loading Utilities for Custom Datasets -- Fashion MNIST | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/mechanics/custom-data-loader-quickdraw.ipynb)  |\n\n\n\n#### Training and Preprocessing\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| PyTorch DataLoader State and Nested Iterations | Toy | Explains DataLoader behavior when in nested functions | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/mechanics/dataloader-nesting.ipynb)|\n| Generating Validation Set Splits | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/mechanics/validation-splits.ipynb)  |\n| Dataloading with Pinned Memory | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-resnet34-cifar10-pinmem.ipynb) |\n| Standardizing Images | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-standardized.ipynb) |\n| Image Transformation Examples | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/mechanics/torchvision-transform-examples.ipynb) |\n| Char-RNN with Own Text File | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/rnn/char_rnn-charlesdickens.ipynb) |\n| Sentiment Classification RNN with Own CSV File | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/rnn/rnn_lstm_packed_own_csv_imdb.ipynb)  |\n\n\n\n#### Improving Memory Efficiency\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| Gradient Checkpointing Demo (Network-in-Network trained on CIFAR-10) | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/mechanics/gradient-checkpointing-nin.ipynb)  |\n\n#### Parallel Computing\n\n|Title | Description | Notebooks |\n| --- | --- | --- | \n| Using Multiple GPUs with DataParallel -- VGG-16 Gender Classifier on CelebA | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/cnn/cnn-vgg16-celeba-data-parallel.ipynb)  |\n| Distribute a Model Across Multiple GPUs with Pipeline Parallelism (VGG-16 Example) | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/mechanics/model-pipeline-vgg16.ipynb)  |\n\n\n#### Other \n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| PyTorch with and without Deterministic Behavior -- Runtime Benchmark | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/mechanics/deterministic_benchmark.ipynb)  |\n| Sequential API and hooks | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/mechanics/mlp-sequential.ipynb)  |\n| Weight Sharing Within a Layer | TBD | TBD |  [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/mechanics/cnn-weight-sharing.ipynb)  |\n| Plotting Live Training Performance in Jupyter Notebooks with just Matplotlib | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/mechanics/plot-jupyter-matplotlib.ipynb)  |\n\n\n\n#### Autograd\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| Getting Gradients of an Intermediate Variable in PyTorch | TBD | TBD | [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/mechanics/manual-gradients.ipynb)  |\n\n\n## TensorFlow Workflows and Mechanics\n\n#### Custom Datasets\n\n|Title | Description | Notebooks |\n| --- | --- | --- | \n| Chunking an Image Dataset for Minibatch Training using NumPy NPZ Archives | TBD | [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/mechanics/image-data-chunking-npz.ipynb) |\n| Storing an Image Dataset for Minibatch Training using HDF5 | TBD | [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/mechanics/image-data-chunking-hdf5.ipynb) |\n| Using Input Pipelines to Read Data from TFRecords Files | TBD | [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/mechanics/tfrecords.ipynb) |\n| Using Queue Runners to Feed Images Directly from Disk  | TBD | [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/mechanics/file-queues.ipynb) |\n| Using TensorFlow's Dataset API | TBD | [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/mechanics/dataset-api.ipynb) |\n\n\n\n\n#### Training and Preprocessing\n\n|Title | Dataset | Description | Notebooks |\n| --- | --- | --- | --- |\n| Saving and Loading Trained Models -- from TensorFlow Checkpoint Files and NumPy NPZ Archives | TBD | TBD | [![TensorFlow](https://img.shields.io/badge/Tensor-Flow1.0-orange)](tensorflow1_ipynb/mechanics/saving-and-reloading-models.ipynb) |\n\n## Related Libraries\n\n|Title | Description |  Notebooks |\n| --- | --- | --- | \n| TorchMetrics | How do we use it, and what's the difference between .update() and .forward()? |  [![PyTorch](https://img.shields.io/badge/Py-Torch-red)](pytorch_ipynb/related-libraries/torchmetrics-update-forward.ipynb)  |\n\n",
        "releases": []
    }
}