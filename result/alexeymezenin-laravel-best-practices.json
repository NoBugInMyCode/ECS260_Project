{
    "https://api.github.com/repos/alexeymezenin/laravel-best-practices": {
        "forks": 2392,
        "watchers": 11571,
        "stars": 11571,
        "languages": {},
        "commits": [
            "2024-09-16T09:38:55Z",
            "2024-09-11T13:26:28Z",
            "2024-08-29T02:46:02Z",
            "2024-08-24T03:35:42Z",
            "2024-07-15T14:24:38Z",
            "2024-07-12T22:12:13Z",
            "2024-05-30T14:42:32Z",
            "2024-05-30T21:05:53Z",
            "2024-05-30T20:58:49Z",
            "2024-05-26T12:21:31Z",
            "2024-05-26T12:19:03Z",
            "2024-05-25T10:37:39Z",
            "2024-05-25T10:35:20Z",
            "2024-05-25T10:33:51Z",
            "2024-05-25T10:30:59Z",
            "2024-05-25T10:30:59Z",
            "2024-05-25T07:12:49Z",
            "2024-05-25T07:08:24Z",
            "2024-05-25T07:08:24Z",
            "2024-05-25T06:53:47Z",
            "2024-05-25T06:48:57Z",
            "2024-05-25T06:48:57Z",
            "2024-05-25T06:41:15Z",
            "2024-05-25T06:06:53Z",
            "2024-05-25T05:26:32Z",
            "2023-11-10T07:15:19Z",
            "2023-11-09T07:04:31Z",
            "2023-11-08T22:56:36Z",
            "2023-10-26T06:01:26Z",
            "2023-10-26T05:59:48Z"
        ],
        "creation_date": "2017-10-25T07:02:44Z",
        "contributors": 30,
        "topics": [
            "best-practices",
            "laravel"
        ],
        "subscribers": 447,
        "readme": "![Laravel best practices](/images/logo-english.png?raw=true)\n\nYou might also want to check out the [real-world Laravel example application](https://github.com/alexeymezenin/laravel-realworld-example-app) and [Eloquent SQL reference](https://github.com/alexeymezenin/eloquent-sql-reference)\n\nTranslations:\n\n[Nederlands](https://github.com/Protoqol/Beste-Laravel-Praktijken) (by [Protoqol](https://github.com/Protoqol))\n\n[Indonesia](indonesia.md) (by [P0rguy](https://github.com/p0rguy), [Doni Ahmad](https://github.com/donyahmd))\n\n[\ud55c\uad6d\uc5b4](https://github.com/xotrs/laravel-best-practices) (by [cherrypick](https://github.com/xotrs))\n\n[\u65e5\u672c\u8a9e](japanese.md) (by [2bo](https://github.com/2bo))\n\n[\u7b80\u4f53\u4e2d\u6587](chinese.md) (by [xiaoyi](https://github.com/Shiloh520))\n\n[\u7e41\u9ad4\u4e2d\u6587](traditional-chinese.md) (by [woeichern](https://github.com/woeichern))\n\n[\u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22](thai.md) (by [kongvut sangkla](https://github.com/kongvut))\n\n[\u09ac\u09be\u0982\u09b2\u09be](bangla.md) (by [Anowar Hossain](https://github.com/AnowarCST))\n\n[\u0641\u0627\u0631\u0633\u06cc](persian.md) (by [amirhossein baghaie](https://github.com/ohmydevops))\n\n[Portugu\u00eas](https://github.com/jonaselan/laravel-best-practices) (by [jonaselan](https://github.com/jonaselan))\n\n[\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430](ukrainian.md) (by [Tenevyk](https://github.com/tenevyk))\n\n[\u0420\u0443\u0441\u0441\u043a\u0438\u0439](russian.md)\n\n[Ti\u1ebfng Vi\u1ec7t](https://chungnguyen.xyz/posts/code-laravel-lam-sao-cho-chuan) (by [Chung Nguy\u1ec5n](https://github.com/nguyentranchung))\n\n[Espa\u00f1ol](spanish.md) (by [C\u00e9sar Escudero](https://github.com/cedaesca))\n\n[Fran\u00e7ais](french.md) (by [Mikayil S.](https://github.com/mikayilsrt))\n\n[Polski](polish.md) (by [Karol Pietruszka](https://github.com/pietrushek))\n\n[Rom\u00e2n\u0103](romanian.md) (by [als698](https://github.com/als698))\n\n[T\u00fcrk\u00e7e](turkish.md) (by [Burak](https://github.com/ikidnapmyself))\n\n[Deutsch](german.md) (by [Sujal Patel](https://github.com/sujalpatel2209))\n\n[Italiana](italian.md) (by [Sujal Patel](https://github.com/sujalpatel2209))\n\n[Az\u0259rbaycanca](https://github.com/Maharramoff/laravel-best-practices-az) (by [Maharramoff](https://github.com/Maharramoff))\n\n[\u0627\u0644\u0639\u0631\u0628\u064a\u0629](arabic.md) (by [ahmedsaoud31](https://github.com/ahmedsaoud31))\n\n[\u0627\u0631\u062f\u0648](urdu.md) (by [RizwanAshraf1](https://github.com/RizwanAshraf1))\n\n[\u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c](burmese.md) (by [Kaung Zay Yan](https://github.com/KaungZayY))\n\n[![Laravel example app](/images/laravel-real-world-banner.png?raw=true)](https://github.com/alexeymezenin/laravel-realworld-example-app)\n\n## Contents\n\n[Single responsibility principle](#single-responsibility-principle)\n\n[Methods should do just one thing](#methods-should-do-just-one-thing)\n\n[Fat models, skinny controllers](#fat-models-skinny-controllers)\n\n[Validation](#validation)\n\n[Business logic should be in service class](#business-logic-should-be-in-service-class)\n\n[Don't repeat yourself (DRY)](#dont-repeat-yourself-dry)\n\n[Prefer to use Eloquent over using Query Builder and raw SQL queries. Prefer collections over arrays](#prefer-to-use-eloquent-over-using-query-builder-and-raw-sql-queries-prefer-collections-over-arrays)\n\n[Mass assignment](#mass-assignment)\n\n[Do not execute queries in Blade templates and use eager loading (N + 1 problem)](#do-not-execute-queries-in-blade-templates-and-use-eager-loading-n--1-problem)\n\n[Chunk data for data-heavy tasks](#chunk-data-for-data-heavy-tasks)\n\n[Comment your code, but prefer descriptive method and variable names over comments](#prefer-descriptive-method-and-variable-names-over-comments)\n\n[Do not put JS and CSS in Blade templates and do not put any HTML in PHP classes](#do-not-put-js-and-css-in-blade-templates-and-do-not-put-any-html-in-php-classes)\n\n[Use config and language files, constants instead of text in the code](#use-config-and-language-files-constants-instead-of-text-in-the-code)\n\n[Use standard Laravel tools accepted by community](#use-standard-laravel-tools-accepted-by-community)\n\n[Follow Laravel naming conventions](#follow-laravel-naming-conventions)\n\n[Convention over configuration](#convention-over-configuration)\n\n[Use shorter and more readable syntax where possible](#use-shorter-and-more-readable-syntax-where-possible)\n\n[Use IoC container or facades instead of new Class](#use-ioc-container-or-facades-instead-of-new-class)\n\n[Do not get data from the `.env` file directly](#do-not-get-data-from-the-env-file-directly)\n\n[Store dates in the standard format. Use accessors and mutators to modify date format](#store-dates-in-the-standard-format-use-accessors-and-mutators-to-modify-date-format)\n\n[Do not use DocBlocks](#do-not-use-docblocks)\n\n[Other good practices](#other-good-practices)\n\n### **Single responsibility principle**\n\nA class should have only one responsibility.\n\nBad:\n\n```php\npublic function update(Request $request): string\n{\n    $validated = $request->validate([\n        'title' => 'required|max:255',\n        'events' => 'required|array:date,type'\n    ]);\n\n    foreach ($request->events as $event) {\n        $date = $this->carbon->parse($event['date'])->toString();\n\n        $this->logger->log('Update event ' . $date . ' :: ' . $);\n    }\n\n    $this->event->updateGeneralEvent($request->validated());\n\n    return back();\n}\n```\n\nGood:\n\n```php\npublic function update(UpdateRequest $request): string\n{\n    $this->logService->logEvents($request->events);\n\n    $this->event->updateGeneralEvent($request->validated());\n\n    return back();\n}\n```\n\n[\ud83d\udd1d Back to contents](#contents)\n\n### **Methods should do just one thing**\n\nA function should do just one thing and do it well.\n\nBad:\n\n```php\npublic function getFullNameAttribute(): string\n{\n    if (auth()->user() && auth()->user()->hasRole('client') && auth()->user()->isVerified()) {\n        return 'Mr. ' . $this->first_name . ' ' . $this->middle_name . ' ' . $this->last_name;\n    } else {\n        return $this->first_name[0] . '. ' . $this->last_name;\n    }\n}\n```\n\nGood:\n\n```php\npublic function getFullNameAttribute(): string\n{\n    return $this->isVerifiedClient() ? $this->getFullNameLong() : $this->getFullNameShort();\n}\n\npublic function isVerifiedClient(): bool\n{\n    return auth()->user() && auth()->user()->hasRole('client') && auth()->user()->isVerified();\n}\n\npublic function getFullNameLong(): string\n{\n    return 'Mr. ' . $this->first_name . ' ' . $this->middle_name . ' ' . $this->last_name;\n}\n\npublic function getFullNameShort(): string\n{\n    return $this->first_name[0] . '. ' . $this->last_name;\n}\n```\n\n[\ud83d\udd1d Back to contents](#contents)\n\n### **Fat models, skinny controllers**\n\nPut all DB related logic into Eloquent models.\n\nBad:\n\n```php\npublic function index()\n{\n    $clients = Client::verified()\n        ->with(['orders' => function ($q) {\n            $q->where('created_at', '>', Carbon::today()->subWeek());\n        }])\n        ->get();\n\n    return view('index', ['clients' => $clients]);\n}\n```\n\nGood:\n\n```php\npublic function index()\n{\n    return view('index', ['clients' => $this->client->getWithNewOrders()]);\n}\n\nclass Client extends Model\n{\n    public function getWithNewOrders(): Collection\n    {\n        return $this->verified()\n            ->with(['orders' => function ($q) {\n                $q->where('created_at', '>', Carbon::today()->subWeek());\n            }])\n            ->get();\n    }\n}\n```\n\n[\ud83d\udd1d Back to contents](#contents)\n\n### **Validation**\n\nMove validation from controllers to Request classes.\n\nBad:\n\n```php\npublic function store(Request $request)\n{\n    $request->validate([\n        'title' => 'required|unique:posts|max:255',\n        'body' => 'required',\n        'publish_at' => 'nullable|date',\n    ]);\n\n    ...\n}\n```\n\nGood:\n\n```php\npublic function store(PostRequest $request)\n{\n    ...\n}\n\nclass PostRequest extends Request\n{\n    public function rules(): array\n    {\n        return [\n            'title' => 'required|unique:posts|max:255',\n            'body' => 'required',\n            'publish_at' => 'nullable|date',\n        ];\n    }\n}\n```\n\n[\ud83d\udd1d Back to contents](#contents)\n\n### **Business logic should be in service class**\n\nA controller must have only one responsibility, so move business logic from controllers to service classes.\n\nBad:\n\n```php\npublic function store(Request $request)\n{\n    if ($request->hasFile('image')) {\n        $request->file('image')->move(public_path('images') . 'temp');\n    }\n    \n    ...\n}\n```\n\nGood:\n\n```php\npublic function store(Request $request)\n{\n    $this->articleService->handleUploadedImage($request->file('image'));\n\n    ...\n}\n\nclass ArticleService\n{\n    public function handleUploadedImage($image): void\n    {\n        if (!is_null($image)) {\n            $image->move(public_path('images') . 'temp');\n        }\n    }\n}\n```\n\n[\ud83d\udd1d Back to contents](#contents)\n\n### **Don't repeat yourself (DRY)**\n\nReuse code when you can. SRP is helping you to avoid duplication. Also, reuse Blade templates, use Eloquent scopes etc.\n\nBad:\n\n```php\npublic function getActive()\n{\n    return $this->where('verified', 1)->whereNotNull('deleted_at')->get();\n}\n\npublic function getArticles()\n{\n    return $this->whereHas('user', function ($q) {\n            $q->where('verified', 1)->whereNotNull('deleted_at');\n        })->get();\n}\n```\n\nGood:\n\n```php\npublic function scopeActive($q)\n{\n    return $q->where('verified', true)->whereNotNull('deleted_at');\n}\n\npublic function getActive(): Collection\n{\n    return $this->active()->get();\n}\n\npublic function getArticles(): Collection\n{\n    return $this->whereHas('user', function ($q) {\n            $q->active();\n        })->get();\n}\n```\n\n[\ud83d\udd1d Back to contents](#contents)\n\n### **Prefer to use Eloquent over using Query Builder and raw SQL queries. Prefer collections over arrays**\n\nEloquent allows you to write readable and maintainable code. Also, Eloquent has great built-in tools like soft deletes, events, scopes etc. You may want to check out [Eloquent to SQL reference](https://github.com/alexeymezenin/eloquent-sql-reference)\n\nBad:\n\n```sql\nSELECT *\nFROM `articles`\nWHERE EXISTS (SELECT *\n              FROM `users`\n              WHERE `articles`.`user_id` = `users`.`id`\n              AND EXISTS (SELECT *\n                          FROM `profiles`\n                          WHERE `profiles`.`user_id` = `users`.`id`) \n              AND `users`.`deleted_at` IS NULL)\nAND `verified` = '1'\nAND `active` = '1'\nORDER BY `created_at` DESC\n```\n\nGood:\n\n```php\nArticle::has('user.profile')->verified()->latest()->get();\n```\n\n[\ud83d\udd1d Back to contents](#contents)\n\n### **Mass assignment**\n\nBad:\n\n```php\n$article = new Article;\n$article->title = $request->title;\n$article->content = $request->content;\n$article->verified = $request->verified;\n\n// Add category to article\n$article->category_id = $category->id;\n$article->save();\n```\n\nGood:\n\n```php\n$category->article()->create($request->validated());\n```\n\n[\ud83d\udd1d Back to contents](#contents)\n\n### **Do not execute queries in Blade templates and use eager loading (N + 1 problem)**\n\nBad (for 100 users, 101 DB queries will be executed):\n\n```blade\n@foreach (User::all() as $user)\n    {{ $user->profile->name }}\n@endforeach\n```\n\nGood (for 100 users, 2 DB queries will be executed):\n\n```php\n$users = User::with('profile')->get();\n\n@foreach ($users as $user)\n    {{ $user->profile->name }}\n@endforeach\n```\n\n[\ud83d\udd1d Back to contents](#contents)\n\n### **Chunk data for data-heavy tasks**\n\nBad:\n\n```php\n$users = $this->get();\n\nforeach ($users as $user) {\n    ...\n}\n```\n\nGood:\n\n```php\n$this->chunk(500, function ($users) {\n    foreach ($users as $user) {\n        ...\n    }\n});\n```\n\n[\ud83d\udd1d Back to contents](#contents)\n\n### **Prefer descriptive method and variable names over comments**\n\nBad:\n\n```php\n// Determine if there are any joins\nif (count((array) $builder->getQuery()->joins) > 0)\n```\n\nGood:\n\n```php\nif ($this->hasJoins())\n```\n\n[\ud83d\udd1d Back to contents](#contents)\n\n### **Do not put JS and CSS in Blade templates and do not put any HTML in PHP classes**\n\nBad:\n\n```javascript\nlet article = `{{ json_encode($article) }}`;\n```\n\nBetter:\n\n```php\n<input id=\"article\" type=\"hidden\" value='@json($article)'>\n\nOr\n\n<button class=\"js-fav-article\" data-article='@json($article)'>{{ $article->name }}<button>\n```\n\nIn a Javascript file:\n\n```javascript\nlet article = $('#article').val();\n```\n\nThe best way is to use specialized PHP to JS package to transfer the data.\n\n[\ud83d\udd1d Back to contents](#contents)\n\n### **Use config and language files, constants instead of text in the code**\n\nBad:\n\n```php\npublic function isNormal(): bool\n{\n    return $article->type === 'normal';\n}\n\nreturn back()->with('message', 'Your article has been added!');\n```\n\nGood:\n\n```php\npublic function isNormal()\n{\n    return $article->type === Article::TYPE_NORMAL;\n}\n\nreturn back()->with('message', __('app.article_added'));\n```\n\n[\ud83d\udd1d Back to contents](#contents)\n\n### **Use standard Laravel tools accepted by community**\n\nPrefer to use built-in Laravel functionality and community packages instead of using 3rd party packages and tools. Any developer who will work with your app in the future will need to learn new tools. Also, chances to get help from the Laravel community are significantly lower when you're using a 3rd party package or tool. Do not make your client pay for that.\n\nTask | Standard tools | 3rd party tools\n------------ | ------------- | -------------\nAuthorization | Policies | Entrust, Sentinel and other packages\nCompiling assets | Laravel Mix, Vite | Grunt, Gulp, 3rd party packages\nDevelopment Environment | Laravel Sail, Homestead | Docker\nDeployment | Laravel Forge | Deployer and other solutions\nUnit testing | PHPUnit, Mockery | Phpspec, Pest\nBrowser testing | Laravel Dusk | Codeception\nDB | Eloquent | SQL, Doctrine\nTemplates | Blade | Twig\nWorking with data | Laravel collections | Arrays\nForm validation | Request classes | 3rd party packages, validation in controller\nAuthentication | Built-in | 3rd party packages, your own solution\nAPI authentication | Laravel Passport, Laravel Sanctum | 3rd party JWT and OAuth packages\nCreating API | Built-in | Dingo API and similar packages\nWorking with DB structure | Migrations | Working with DB structure directly\nLocalization | Built-in | 3rd party packages\nRealtime user interfaces | Laravel Echo, Pusher | 3rd party packages and working with WebSockets directly\nGenerating testing data | Seeder classes, Model Factories, Faker | Creating testing data manually\nTask scheduling | Laravel Task Scheduler | Scripts and 3rd party packages\nDB | MySQL, PostgreSQL, SQLite, SQL Server | MongoDB\n\n[\ud83d\udd1d Back to contents](#contents)\n\n### **Follow Laravel naming conventions**\n\nFollow [PSR standards](https://www.php-fig.org/psr/psr-12/).\n\nAlso, follow naming conventions accepted by Laravel community:\n\nWhat | How | Good | Bad\n------------ | ------------- | ------------- | -------------\nController | singular | ArticleController | ~~ArticlesController~~\nRoute | plural | articles/1 | ~~article/1~~\nRoute name | snake_case with dot notation | users.show_active | ~~users.show-active, show-active-users~~\nModel | singular | User | ~~Users~~\nhasOne or belongsTo relationship | singular | articleComment | ~~articleComments, article_comment~~\nAll other relationships | plural | articleComments | ~~articleComment, article_comments~~\nTable | plural | article_comments | ~~article_comment, articleComments~~\nPivot table | singular model names in alphabetical order | article_user | ~~user_article, articles_users~~\nTable column | snake_case without model name | meta_title | ~~MetaTitle; article_meta_title~~\nModel property | snake_case | $model->created_at | ~~$model->createdAt~~\nForeign key | singular model name with _id suffix | article_id | ~~ArticleId, id_article, articles_id~~\nPrimary key | - | id | ~~custom_id~~\nMigration | - | 2017_01_01_000000_create_articles_table | ~~2017_01_01_000000_articles~~\nMethod | camelCase | getAll | ~~get_all~~\nMethod in resource controller | [table](https://laravel.com/docs/master/controllers#resource-controllers) | store | ~~saveArticle~~\nMethod in test class | camelCase | testGuestCannotSeeArticle | ~~test_guest_cannot_see_article~~\nVariable | camelCase | $articlesWithAuthor | ~~$articles_with_author~~\nCollection | descriptive, plural | $activeUsers = User::active()->get() | ~~$active, $data~~\nObject | descriptive, singular | $activeUser = User::active()->first() | ~~$users, $obj~~\nConfig and language files index | snake_case | articles_enabled | ~~ArticlesEnabled; articles-enabled~~\nView | kebab-case | show-filtered.blade.php | ~~showFiltered.blade.php, show_filtered.blade.php~~\nConfig | snake_case | google_calendar.php | ~~googleCalendar.php, google-calendar.php~~\nContract (interface) | adjective or noun | AuthenticationInterface | ~~Authenticatable, IAuthentication~~\nTrait | adjective | Notifiable | ~~NotificationTrait~~\nTrait [(PSR)](https://www.php-fig.org/bylaws/psr-naming-conventions/) | adjective | NotifiableTrait | ~~Notification~~\nEnum | singular | UserType | ~~UserTypes~~, ~~UserTypeEnum~~\nFormRequest | singular | UpdateUserRequest | ~~UpdateUserFormRequest~~, ~~UserFormRequest~~, ~~UserRequest~~\nSeeder | singular | UserSeeder | ~~UsersSeeder~~\n\n[\ud83d\udd1d Back to contents](#contents)\n\n### **Convention over configuration**\n\nAs long as you follow certain conventions, you do not need to add additional configuration.\n\nBad:\n\n```php\n// Table name 'Customer'\n// Primary key 'customer_id'\nclass Customer extends Model\n{\n    const CREATED_AT = 'created_at';\n    const UPDATED_AT = 'updated_at';\n\n    protected $table = 'Customer';\n    protected $primaryKey = 'customer_id';\n\n    public function roles(): BelongsToMany\n    {\n        return $this->belongsToMany(Role::class, 'role_customer', 'customer_id', 'role_id');\n    }\n}\n```\n\nGood:\n\n```php\n// Table name 'customers'\n// Primary key 'id'\nclass Customer extends Model\n{\n    public function roles(): BelongsToMany\n    {\n        return $this->belongsToMany(Role::class);\n    }\n}\n```\n\n[\ud83d\udd1d Back to contents](#contents)\n\n### **Use shorter and more readable syntax where possible**\n\nBad:\n\n```php\n$request->session()->get('cart');\n$request->input('name');\n```\n\nGood:\n\n```php\nsession('cart');\n$request->name;\n```\n\nMore examples:\n\nCommon syntax | Shorter and more readable syntax\n------------ | -------------\n`Session::get('cart')` | `session('cart')`\n`$request->session()->get('cart')` | `session('cart')`\n`Session::put('cart', $data)` | `session(['cart' => $data])`\n`$request->input('name'), Request::get('name')` | `$request->name, request('name')`\n`return Redirect::back()` | `return back()`\n`is_null($object->relation) ? null : $object->relation->id` | `optional($object->relation)->id` (in PHP 8: `$object->relation?->id`)\n`return view('index')->with('title', $title)->with('client', $client)` | `return view('index', compact('title', 'client'))`\n`$request->has('value') ? $request->value : 'default';` | `$request->get('value', 'default')`\n`Carbon::now(), Carbon::today()` | `now(), today()`\n`App::make('Class')` | `app('Class')`\n`->where('column', '=', 1)` | `->where('column', 1)`\n`->orderBy('created_at', 'desc')` | `->latest()`\n`->orderBy('age', 'desc')` | `->latest('age')`\n`->orderBy('created_at', 'asc')` | `->oldest()`\n`->select('id', 'name')->get()` | `->get(['id', 'name'])`\n`->first()->name` | `->value('name')`\n\n[\ud83d\udd1d Back to contents](#contents)\n\n### **Use IoC / Service container instead of new Class**\n\nnew Class syntax creates tight coupling between classes and complicates testing. Use IoC container or facades instead.\n\nBad:\n\n```php\n$user = new User;\n$user->create($request->validated());\n```\n\nGood:\n\n```php\npublic function __construct(protected User $user) {}\n\n...\n\n$this->user->create($request->validated());\n```\n\n[\ud83d\udd1d Back to contents](#contents)\n\n### **Do not get data from the `.env` file directly**\n\nPass the data to config files instead and then use the `config()` helper function to use the data in an application.\n\nBad:\n\n```php\n$apiKey = env('API_KEY');\n```\n\nGood:\n\n```php\n// config/api.php\n'key' => env('API_KEY'),\n\n// Use the data\n$apiKey = config('api.key');\n```\n\n[\ud83d\udd1d Back to contents](#contents)\n\n### **Store dates in the standard format. Use accessors and mutators to modify date format**\n\nA date as a string is less reliable than an object instance, e.g. a Carbon-instance. It's recommended to pass Carbon objects between classes instead of date strings. Rendering should be done in the display layer (templates):\n\nBad:\n\n```php\n{{ Carbon::createFromFormat('Y-d-m H-i', $object->ordered_at)->toDateString() }}\n{{ Carbon::createFromFormat('Y-d-m H-i', $object->ordered_at)->format('m-d') }}\n```\n\nGood:\n\n```php\n// Model\nprotected $casts = [\n    'ordered_at' => 'datetime',\n];\n\n// Blade view\n{{ $object->ordered_at->toDateString() }}\n{{ $object->ordered_at->format('m-d') }}\n```\n\n[\ud83d\udd1d Back to contents](#contents)\n\n### **Do not use DocBlocks**\n\nDocBlocks reduce readability. Use a descriptive method name and modern PHP features like return type hints instead.\n\nBad:\n\n```php\n/**\n * The function checks if given string is a valid ASCII string\n *\n * @param string $string String we get from frontend which might contain\n *                       illegal characters. Returns True is the string\n *                       is valid.\n *\n * @return bool\n * @author  John Smith\n *\n * @license GPL\n */\n\npublic function checkString($string)\n{\n}\n```\n\nGood:\n\n```php\npublic function isValidAsciiString(string $string): bool\n{\n}\n```\n\n[\ud83d\udd1d Back to contents](#contents)\n\n### **Other good practices**\n\nAvoid using patterns and tools that are alien to Laravel and similar frameworks (i.e. RoR, Django). If you like Symfony (or Spring) approach for building apps, it's a good idea to use these frameworks instead.\n\nNever put any logic in routes files.\n\nMinimize usage of vanilla PHP in Blade templates.\n\nUse in-memory DB for testing.\n\nDo not override standard framework features to avoid problems related to updating the framework version and many other issues.\n\nUse modern PHP syntax where possible, but don't forget about readability.\n\nAvoid using View Composers and similar tools unless you really know what you're doing. In most cases, there is a better way to solve the problem.\n\n[\ud83d\udd1d Back to contents](#contents)\n",
        "releases": []
    }
}