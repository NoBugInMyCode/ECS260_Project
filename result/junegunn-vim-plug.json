{
    "https://api.github.com/repos/junegunn/vim-plug": {
        "forks": 1932,
        "watchers": 34443,
        "stars": 34443,
        "languages": {
            "Vim Script": 84223,
            "Shell": 3461
        },
        "commits": [
            "2024-07-09T11:09:41Z",
            "2024-06-19T11:05:15Z",
            "2024-06-18T09:02:36Z",
            "2024-06-01T06:55:37Z",
            "2024-06-01T06:40:03Z",
            "2024-05-14T18:07:01Z",
            "2024-05-14T10:06:23Z",
            "2024-05-14T08:13:45Z",
            "2024-05-14T07:57:04Z",
            "2024-03-30T15:53:55Z",
            "2024-03-29T04:02:03Z",
            "2024-03-15T14:16:01Z",
            "2024-03-15T12:22:16Z",
            "2024-03-14T10:09:50Z",
            "2024-03-07T14:38:20Z",
            "2024-03-07T14:31:28Z",
            "2024-03-06T16:16:12Z",
            "2024-03-06T16:14:08Z",
            "2024-03-06T15:18:49Z",
            "2024-03-05T07:13:23Z",
            "2024-02-24T14:02:38Z",
            "2023-11-13T10:53:19Z",
            "2022-02-06T19:15:10Z",
            "2024-02-22T16:14:44Z",
            "2024-02-15T05:29:41Z",
            "2024-02-12T23:45:04Z",
            "2024-02-03T11:05:06Z",
            "2024-02-03T10:51:21Z",
            "2023-04-01T14:59:21Z",
            "2023-01-19T02:35:13Z"
        ],
        "creation_date": "2013-09-10T14:58:51Z",
        "contributors": 30,
        "topics": [
            "vim"
        ],
        "subscribers": 374,
        "readme": "<div align=\"center\">\n<sup>Special thanks to:</sup>\n<br>\n<br>\n<a href=\"https://warp.dev/?utm_source=github&utm_medium=referral&utm_campaign=vimplug_20240209\">\n  <div>\n    <img src=\"https://raw.githubusercontent.com/junegunn/i/master/warp.png\" width=\"300\" alt=\"Warp\">\n  </div>\n  <b>Warp is a modern, Rust-based terminal with AI built in so you and your team can build great software, faster.</b>\n  <div>\n    <sup>Visit warp.dev to learn more.</sup>\n  </div>\n</a>\n<br>\n<hr>\n</div>\n<br>\n\n<h1 title=\"vim-plug\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"./plug-dark.png\">\n    <img src=\"./plug.png\" height=\"75\" alt=\"vim-plug\">\n  </picture>\n  <a href=\"https://github.com/junegunn/vim-plug/actions/workflows/test.yml?query=branch%3Amaster\">\n    <img src=\"https://img.shields.io/github/actions/workflow/status/junegunn/vim-plug/test.yml?branch=master\">\n  </a>\n</h1>\n\nA minimalist Vim plugin manager.\n\n<img src=\"https://raw.githubusercontent.com/junegunn/i/master/vim-plug/installer.gif\" height=\"450\">\n\n## Pros.\n\n- Minimalist design\n    - Just one file with no dependencies. Super easy to set up.\n    - Concise, intuitive syntax that you can learn within minutes. No boilerplate code required.\n    - No feature bloat\n- Extremely stable with flawless backward compatibility\n    - Works perfectly with all versions of Vim since 2006 and all versions of Neovim ever released\n- [Super-fast][40/4] parallel installation/update\n- Creates shallow clones to minimize disk space usage and download time\n- On-demand loading for [faster startup time][startup-time]\n- Can review and rollback updates\n- Branch/tag/commit support\n- Post-update hooks\n- Support for externally managed plugins\n\n[40/4]: https://raw.githubusercontent.com/junegunn/i/master/vim-plug/40-in-4.gif\n[startup-time]: https://github.com/junegunn/vim-startuptime-benchmark#result\n\n## Installation\n\n[Download plug.vim](https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim)\nand put it in the \"autoload\" directory.\n\n<details>\n<summary>Click to see the instructions</summary>\n\n### Vim\n\n#### Unix\n\n```sh\ncurl -fLo ~/.vim/autoload/plug.vim --create-dirs \\\n    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n```\n\nYou can automate the process by putting the command in your Vim configuration\nfile as suggested [here][auto].\n\n[auto]: https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation\n\n#### Windows (PowerShell)\n\n```powershell\niwr -useb https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim |`\n    ni $HOME/vimfiles/autoload/plug.vim -Force\n```\n\n### Neovim\n\n#### Unix, Linux\n\n```sh\nsh -c 'curl -fLo \"${XDG_DATA_HOME:-$HOME/.local/share}\"/nvim/site/autoload/plug.vim --create-dirs \\\n       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'\n```\n\n#### Linux (Flatpak)\n\n```sh\ncurl -fLo ~/.var/app/io.neovim.nvim/data/nvim/site/autoload/plug.vim --create-dirs \\\n    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n```\n\n#### Windows (PowerShell)\n\n```powershell\niwr -useb https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim |`\n    ni \"$(@($env:XDG_DATA_HOME, $env:LOCALAPPDATA)[$null -eq $env:XDG_DATA_HOME])/nvim-data/site/autoload/plug.vim\" -Force\n```\n\n</details>\n\n## Usage\n\nAdd a vim-plug section to your `~/.vimrc` (or `~/.config/nvim/init.vim` for Neovim)\n\n1. Begin the section with `call plug#begin()`\n1. List the plugins with `Plug` commands\n1. End the section with `call plug#end()`\n\nFor example,\n\n```vim\ncall plug#begin()\n\n\" List your plugins here\nPlug 'tpope/vim-sensible'\n\ncall plug#end()\n```\n\nReload the file or restart Vim, then you can,\n\n* `:PlugInstall` to install the plugins\n* `:PlugUpdate` to install or update the plugins\n* `:PlugDiff` to review the changes from the last update\n* `:PlugClean` to remove plugins no longer in the list\n\n> [!NOTE]\n> That's basically all you need to know to get started. The rest of the\n> document is for advanced users who want to know more about the features and\n> options.\n\n> [!TIP]\n> `plug#end()` automatically executes `filetype plugin indent on` and `syntax\n> enable`. We believe this is a good default for most users, but if you don't\n> want this behavior, you can revert the settings after the call.\n>\n> ```vim\n> call plug#end()\n> filetype indent off   \" Disable file-type-specific indentation\n> syntax off            \" Disable syntax highlighting\n> ```\n\n### Getting Help\n\n- See [tutorial] page to learn more about the basics of vim-plug\n- See [tips] and [FAQ] pages for common problems and questions\n\n[tutorial]: https://github.com/junegunn/vim-plug/wiki/tutorial\n[tips]: https://github.com/junegunn/vim-plug/wiki/tips\n[FAQ]: https://github.com/junegunn/vim-plug/wiki/faq\n\n## Examples\n\nThe following examples demonstrate the additional features of vim-plug.\n\n### Vim script example\n\n```vim\ncall plug#begin()\n\" The default plugin directory will be as follows:\n\"   - Vim (Linux/macOS): '~/.vim/plugged'\n\"   - Vim (Windows): '~/vimfiles/plugged'\n\"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'\n\" You can specify a custom plugin directory by passing it as the argument\n\"   - e.g. `call plug#begin('~/.vim/plugged')`\n\"   - Avoid using standard Vim directory names like 'plugin'\n\n\" Make sure you use single quotes\n\n\" Shorthand notation for GitHub; translates to https://github.com/junegunn/seoul256.vim.git\nPlug 'junegunn/seoul256.vim'\n\n\" Any valid git URL is allowed\nPlug 'https://github.com/junegunn/vim-easy-align.git'\n\n\" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)\nPlug 'fatih/vim-go', { 'tag': '*' }\n\n\" Using a non-default branch\nPlug 'neoclide/coc.nvim', { 'branch': 'release' }\n\n\" Use 'dir' option to install plugin in a non-default directory\nPlug 'junegunn/fzf', { 'dir': '~/.fzf' }\n\n\" Post-update hook: run a shell command after installing or updating the plugin\nPlug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }\n\n\" Post-update hook can be a lambda expression\nPlug 'junegunn/fzf', { 'do': { -> fzf#install() } }\n\n\" If the vim plugin is in a subdirectory, use 'rtp' option to specify its path\nPlug 'nsf/gocode', { 'rtp': 'vim' }\n\n\" On-demand loading: loaded when the specified command is executed\nPlug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }\n\n\" On-demand loading: loaded when a file with a specific file type is opened\nPlug 'tpope/vim-fireplace', { 'for': 'clojure' }\n\n\" Unmanaged plugin (manually installed and updated)\nPlug '~/my-prototype-plugin'\n\n\" Call plug#end to update &runtimepath and initialize the plugin system.\n\" - It automatically executes `filetype plugin indent on` and `syntax enable`\ncall plug#end()\n\" You can revert the settings after the call like so:\n\"   filetype indent off   \" Disable file-type-specific indentation\n\"   syntax off            \" Disable syntax highlighting\n\n\" Color schemes should be loaded after plug#end().\n\" We prepend it with 'silent!' to ignore errors when it's not yet installed.\nsilent! colorscheme seoul256\n```\n\n### Lua example for Neovim\n\nIn Neovim, you can write your configuration in a Lua script file named\n`init.lua`. The following code is the Lua script equivalent to the Vim script\nexample above.\n\n```lua\nlocal vim = vim\nlocal Plug = vim.fn['plug#']\n\nvim.call('plug#begin')\n\n-- Shorthand notation for GitHub; translates to https://github.com/junegunn/seoul256.vim.git\nPlug('junegunn/seoul256.vim')\n\n-- Any valid git URL is allowed\nPlug('https://github.com/junegunn/vim-easy-align.git')\n\n-- Using a tagged release; wildcard allowed (requires git 1.9.2 or above)\nPlug('fatih/vim-go', { ['tag'] = '*' })\n\n-- Using a non-default branch\nPlug('neoclide/coc.nvim', { ['branch'] = 'release' })\n\n-- Use 'dir' option to install plugin in a non-default directory\nPlug('junegunn/fzf', { ['dir'] = '~/.fzf' })\n\n-- Post-update hook: run a shell command after installing or updating the plugin\nPlug('junegunn/fzf', { ['dir'] = '~/.fzf', ['do'] = './install --all' })\n\n-- Post-update hook can be a lambda expression\nPlug('junegunn/fzf', { ['do'] = function()\n  vim.fn['fzf#install']()\nend })\n\n-- If the vim plugin is in a subdirectory, use 'rtp' option to specify its path\nPlug('nsf/gocode', { ['rtp'] = 'vim' })\n\n-- On-demand loading: loaded when the specified command is executed\nPlug('preservim/nerdtree', { ['on'] = 'NERDTreeToggle' })\n\n-- On-demand loading: loaded when a file with a specific file type is opened\nPlug('tpope/vim-fireplace', { ['for'] = 'clojure' })\n\n-- Unmanaged plugin (manually installed and updated)\nPlug('~/my-prototype-plugin')\n\nvim.call('plug#end')\n\n-- Color schemes should be loaded after plug#end().\n-- We prepend it with 'silent!' to ignore errors when it's not yet installed.\nvim.cmd('silent! colorscheme seoul256')\n```\n\n## Commands\n\n| Command                             | Description                                                        |\n| ----------------------------------- | ------------------------------------------------------------------ |\n| `PlugInstall [name ...] [#threads]` | Install plugins                                                    |\n| `PlugUpdate [name ...] [#threads]`  | Install or update plugins                                          |\n| `PlugClean[!]`                      | Remove unlisted plugins (bang version will clean without prompt)   |\n| `PlugUpgrade`                       | Upgrade vim-plug itself                                            |\n| `PlugStatus`                        | Check the status of plugins                                        |\n| `PlugDiff`                          | Examine changes from the previous update and the pending changes   |\n| `PlugSnapshot[!] [output path]`     | Generate script for restoring the current snapshot of the plugins  |\n\n## `Plug` options\n\n| Option                  | Description                                                 |\n| ----------------------- | ----------------------------------------------------------- |\n| `branch`/`tag`/`commit` | Branch/tag/commit of the repository to use                  |\n| `rtp`                   | Subdirectory that contains Vim plugin                       |\n| `dir`                   | Custom directory for the plugin                             |\n| `as`                    | Use different name for the plugin                           |\n| `do`                    | Post-update hook (string or funcref)                        |\n| `on`                    | On-demand loading: Commands or `<Plug>`-mappings            |\n| `for`                   | On-demand loading: File types                               |\n| `frozen`                | Do not remove and do not update unless explicitly specified |\n\n## Global options\n\n| Flag                | Default                           | Description                                            |\n| ------------------- | --------------------------------- | ------------------------------------------------------ |\n| `g:plug_threads`    | 16                                | Default number of threads to use                       |\n| `g:plug_timeout`    | 60                                | Time limit of each task in seconds (*Ruby & Python*)   |\n| `g:plug_retries`    | 2                                 | Number of retries in case of timeout (*Ruby & Python*) |\n| `g:plug_shallow`    | 1                                 | Use shallow clone                                      |\n| `g:plug_window`     | `-tabnew`                         | Command to open plug window                            |\n| `g:plug_pwindow`    | `vertical rightbelow new`         | Command to open preview window in `PlugDiff`           |\n| `g:plug_url_format` | `https://git::@github.com/%s.git` | `printf` format to build repo URL (Only applies to the subsequent `Plug` commands) |\n\n\n## Keybindings\n\n- `D` - `PlugDiff`\n- `S` - `PlugStatus`\n- `R` - Retry failed update or installation tasks\n- `U` - Update plugins in the selected range\n- `q` - Abort the running tasks or close the window\n- `:PlugStatus`\n    - `L` - Load plugin\n- `:PlugDiff`\n    - `X` - Revert the update\n\n## Post-update hooks\n\nThere are some plugins that require extra steps after installation or update.\nIn that case, use the `do` option to describe the task to be performed.\n\n```vim\nPlug 'Shougo/vimproc.vim', { 'do': 'make' }\nPlug 'ycm-core/YouCompleteMe', { 'do': './install.py' }\n```\n\nIf the value starts with `:`, it will be recognized as a Vim command.\n\n```vim\nPlug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }\n```\n\nTo call a Vim function, you can pass a lambda expression like so:\n\n```vim\nPlug 'junegunn/fzf', { 'do': { -> fzf#install() } }\n```\n\nIf you need more control, you can pass a reference to a Vim function that\ntakes a dictionary argument.\n\n```vim\nfunction! BuildYCM(info)\n  \" info is a dictionary with 3 fields\n  \" - name:   name of the plugin\n  \" - status: 'installed', 'updated', or 'unchanged'\n  \" - force:  set on PlugInstall! or PlugUpdate!\n  if a:info.status == 'installed' || a:info.force\n    !./install.py\n  endif\nendfunction\n\nPlug 'ycm-core/YouCompleteMe', { 'do': function('BuildYCM') }\n```\n\nA post-update hook is executed inside the directory of the plugin and only run\nwhen the repository has changed, but you can force it to run unconditionally\nwith the bang-versions of the commands: `PlugInstall!` and `PlugUpdate!`.\n\n> [!TIP]\n> Make sure to escape BARs and double-quotes when you write the `do` option\n> inline as they are mistakenly recognized as command separator or the start of\n> the trailing comment.\n>\n> ```vim\n> Plug 'junegunn/fzf', { 'do': 'yes \\| ./install' }\n> ```\n>\n> But you can avoid the escaping if you extract the inline specification using a\n> variable (or any Vim script expression) as follows:\n>\n> ```vim\n> let g:fzf_install = 'yes | ./install'\n> Plug 'junegunn/fzf', { 'do': g:fzf_install }\n> ```\n\n### `PlugInstall!` and `PlugUpdate!`\n\nThe installer takes the following steps when installing/updating a plugin:\n\n1. `git clone` or `git fetch` from its origin\n2. Check out branch, tag, or commit and optionally `git merge` remote branch\n3. If the plugin was updated (or installed for the first time)\n    1. Update submodules\n    2. Execute post-update hooks\n\nThe commands with the `!` suffix ensure that all steps are run unconditionally.\n\n## On-demand loading of plugins\n\n```vim\n\" NERD tree will be loaded on the first invocation of NERDTreeToggle command\nPlug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }\n\n\" Multiple commands\nPlug 'junegunn/vim-github-dashboard', { 'on': ['GHDashboard', 'GHActivity'] }\n\n\" Loaded when clojure file is opened\nPlug 'tpope/vim-fireplace', { 'for': 'clojure' }\n\n\" Multiple file types\nPlug 'kovisoft/paredit', { 'for': ['clojure', 'scheme'] }\n\n\" On-demand loading on both conditions\nPlug 'junegunn/vader.vim',  { 'on': 'Vader', 'for': 'vader' }\n\n\" Code to execute when the plugin is lazily loaded on demand\nPlug 'junegunn/goyo.vim', { 'for': 'markdown' }\nautocmd! User goyo.vim echom 'Goyo is now loaded!'\n```\n\n> [!NOTE]\n> #### Should I set up on-demand loading?\n>\n> You probably don't need to.\n>\n> A properly implemented Vim plugin should already load lazily without any\n> help from a plugin manager (`:help autoload`). So there are few cases where\n> these options actually make much sense. Making a plugin load faster is\n> the responsibility of the plugin developer, not the user. If you find\n> a plugin that takes too long to load, consider opening an issue on the\n> plugin's issue tracker.\n>\n> Let me give you a perspective. The time it takes to load a plugin is usually\n> less than 2 or 3ms on modern computers. So unless you use a very large\n> number of plugins, you are unlikely to save more than 50ms. If you have\n> spent an hour carefully setting up the options to shave off 50ms, you\n> will have to start Vim 72,000 times just to break even. You should ask\n> yourself if that's a good investment of your time.\n>\n> Make sure that you're tackling the right problem by breaking down the\n> startup time of Vim using `--startuptime`.\n>\n> ```sh\n> vim --startuptime /tmp/log\n> ```\n>\n> On-demand loading should only be used as a last resort. It is basically\n> a hacky workaround and is not always guaranteed to work.\n\n> [!TIP]\n> You can pass an empty list to `on` or `for` option to disable the loading\n> of the plugin. You can manually load the plugin using `plug#load(NAMES...)`\n> function.\n>\n> See https://github.com/junegunn/vim-plug/wiki/tips#loading-plugins-manually\n\n\n## Collaborators\n\n- [Jan Edmund Lazo](https://github.com/janlazo) - Windows support\n- [Jeremy Pallats](https://github.com/starcraftman) - Python installer\n\n## License\n\nMIT\n",
        "releases": [
            {
                "name": "0.14.0",
                "date": "2024-07-09T11:19:22Z"
            },
            {
                "name": "0.13.0",
                "date": "2024-03-06T16:23:38Z"
            },
            {
                "name": "0.12.0",
                "date": "2024-03-01T10:19:39Z"
            },
            {
                "name": "0.11.0",
                "date": "2022-01-03T14:14:47Z"
            },
            {
                "name": "0.10.0",
                "date": "2018-10-07T10:48:35Z"
            },
            {
                "name": "0.9.1",
                "date": "2016-08-10T16:35:50Z"
            },
            {
                "name": "0.9.0",
                "date": "2016-04-17T09:55:50Z"
            },
            {
                "name": "0.8.0",
                "date": "2016-01-02T06:03:04Z"
            }
        ]
    }
}