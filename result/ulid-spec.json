{
    "https://api.github.com/repos/ulid/spec": {
        "forks": 172,
        "watchers": 9930,
        "stars": 9930,
        "languages": null,
        "commits": [
            "2019-05-23T14:28:42Z",
            "2019-05-23T14:28:24Z",
            "2019-05-23T14:26:44Z",
            "2019-05-23T14:26:06Z",
            "2019-05-23T14:25:44Z",
            "2019-05-23T14:25:15Z",
            "2019-05-15T18:44:04Z",
            "2019-05-13T06:00:21Z",
            "2019-04-06T08:07:19Z",
            "2019-04-06T08:06:41Z",
            "2019-04-06T08:06:15Z",
            "2019-04-06T08:05:35Z",
            "2019-01-21T13:29:38Z",
            "2019-01-13T06:23:28Z",
            "2019-01-06T10:44:20Z",
            "2019-01-03T16:27:48Z",
            "2018-12-30T13:14:24Z",
            "2018-12-29T06:09:56Z",
            "2018-12-28T20:25:38Z",
            "2018-12-28T20:24:45Z",
            "2018-12-28T18:24:40Z",
            "2018-12-27T21:04:13Z",
            "2018-11-20T21:57:06Z",
            "2018-06-10T20:21:08Z",
            "2018-06-06T18:37:09Z",
            "2018-04-28T19:36:40Z",
            "2018-04-28T19:35:32Z",
            "2018-04-28T19:23:38Z",
            "2018-04-28T19:23:19Z",
            "2018-04-28T19:22:20Z"
        ],
        "creation_date": "2017-12-04T22:04:08Z",
        "contributors": 16,
        "topics": [],
        "subscribers": 93,
        "readme": "<h1 align=\"center\">\n\t<br>\n\t<br>\n\t<img width=\"360\" src=\"logo.png\" alt=\"ulid\">\n\t<br>\n\t<br>\n\t<br>\n</h1>\n\n# Universally Unique Lexicographically Sortable Identifier\n\nUUID can be suboptimal for many use-cases because:\n\n- It isn't the most character efficient way of encoding 128 bits of randomness\n- UUID v1/v2 is impractical in many environments, as it requires access to a unique, stable MAC address\n- UUID v3/v5 requires a unique seed and produces randomly distributed IDs, which can cause fragmentation in many data structures\n- UUID v4 provides no other information than randomness which can cause fragmentation in many data structures\n\nInstead, herein is proposed ULID:\n\n```javascript\nulid() // 01ARZ3NDEKTSV4RRFFQ69G5FAV\n```\n\n- 128-bit compatibility with UUID\n- 1.21e+24 unique ULIDs per millisecond\n- Lexicographically sortable!\n- Canonically encoded as a 26 character string, as opposed to the 36 character UUID\n- Uses Crockford's base32 for better efficiency and readability (5 bits per character)\n- Case insensitive\n- No special characters (URL safe)\n- Monotonic sort order (correctly detects and handles the same millisecond)\n\n## Implementations in other languages\n\nFrom ourselves and the community!\n\n| Language | Author | Binary Implementation |\n| -------- | ------ | --------------------- |\n| [C++](https://github.com/suyash/ulid) | [suyash](https://github.com/suyash) | \u2713 |\n| [C#](https://github.com/mcb2001/CSharp.Ulid) | [mcb2001](https://github.com/mcb2001) |\n| [Clojure](https://github.com/theikkila/clj-ulid) | [theikkila](https://github.com/theikkila) |\n| [Objective-C](https://github.com/whitesmith/ulid) | [ricardopereira](https://github.com/ricardopereira) |\n| [Crystal](https://github.com/SuperPaintman/ulid) | [SuperPaintman](https://github.com/SuperPaintman) |\n| [Dart](https://github.com/agilord/ulid) | [isoos](https://github.com/isoos) | \u2713 |\n| [Dart](https://github.com/GuepardoApps/d-ulid) | [GuepardoApps](https://github.com/GuepardoApps) |\n| [Delphi](https://github.com/martinusso/ulid) | [matinusso](https://github.com/martinusso) |\n| [D](https://github.com/enckse/ulid) | [enckse](https://github.com/enckse) |\n| [D (dub)](https://code.dlang.org/packages/ulid-d) | [extrawurst](https://github.com/Extrawurst)\n| [Erlang](https://github.com/savonarola/ulid) | [savonarola](https://github.com/savonarola) |\n| [Elixir](https://github.com/Homepolish/ulid) | [Homepolish](https://github.com/Homepolish) | \u2713 |\n| [Elixir](https://github.com/merongivian/ulid) | [merongivian](https://github.com/merongivian) |\n| [Elixir](https://github.com/omisego/ex_ulid) | [omisego](https://github.com/omisego) | \u2713 |\n| [Elixir (Ecto)](https://github.com/TheRealReal/ecto-ulid) | [dcuddeback](https://github.com/dcuddeback) | \u2713 |\n| [F#](https://github.com/lucasschejtman/FSharp.Ulid) | [lucasschejtman](https://github.com/lucasschejtman) |\n| [Factor](https://github.com/AlexIljin/ulid) | [Alexander Ilin](https://github.com/AlexIljin) | \u2713 |\n| [Go](https://github.com/oklog/ulid) | [oklog](https://github.com/oklog) | \u2713 |\n| [Haskell](https://github.com/steven777400/ulid) | [steven777400](https://github.com/steven777400) | \u2713 |\n| [Java](https://github.com/huxi/sulky/tree/master/sulky-ulid) | [huxi](https://github.com/huxi) | \u2713 |\n| [Java](https://github.com/azam/ulidj) | [azam](https://github.com/azam) |\n| [Java](https://github.com/Lewiscowles1986/jULID) | [Lewiscowles1986](https://github.com/Lewiscowles1986) |\n| [JavaScript](https://github.com/ulid/javascript) | [ulid](https://github.com/ulid) |\n| [JavaScript](https://github.com/aarondcohen/id128) | [aarondcohen](https://github.com/aarondcohen) | \u2713 |\n| [Julia](https://github.com/ararslan/ULID.jl) | [ararslan](https://github.com/ararslan) |\n| [Kotlin](https://github.com/GuepardoApps/kULID) | [GuepardoApps](https://github.com/GuepardoApps) |\n| [Lua](https://github.com/Tieske/ulid.lua) | [Tieske](https://github.com/Tieske) |\n| [.NET](https://github.com/RobThree/NUlid) | [RobThree](https://github.com/RobThree) | \u2713 |\n| [.NET](https://github.com/fvilers/ulid.net) | [fvilers](https://github.com/fvilers)\n| [Nim](https://github.com/adelq/ulid) | [adelq](https://github.com/adelq)\n| [OCaml](https://github.com/stripedpajamas/ocaml-ulid) | [stripedpajamas](https://github.com/stripedpajamas) |   |\n| [Perl 5](https://github.com/bk/Data-ULID) | [bk](https://github.com/bk) | \u2713 |\n| [PHP](https://github.com/Lewiscowles1986/ulid) | [Lewiscowles1986](https://github.com/Lewiscowles1986) |\n| [PHP](https://github.com/robinvdvleuten/php-ulid) | [robinvdvleuten](https://github.com/robinvdvleuten) |\n| [PowerShell](https://github.com/PetterBomban/posh-ulid) | [PetterBomban](https://github.com/PetterBomban) |\n| [Python](https://github.com/mdipierro/ulid) | [mdipierro](https://github.com/mdipierro) |\n| [Python](https://github.com/ahawker/ulid) | [ahawker](https://github.com/ahawker) | \u2713 |\n| [Python](https://github.com/mdomke/python-ulid) | [mdomke](https://github.com/mdomke) | \u2713 |\n| [R](https://github.com/hrbrmstr/ulid) | [hrbrmstr](https://github.com/hrbrmstr) |   |\n| [Ruby](https://github.com/rafaelsales/ulid) | [rafaelsales](https://github.com/rafaelsales) |\n| [Rust](https://github.com/mmacedoeu/rulid.rs) | [mmacedoeu](https://github.com/mmacedoeu) | \u2713 |\n| [Rust](https://github.com/dylanhart/ulid-rs) | [dylanhart](https://github.com/dylanhart) | \u2713 |\n| [Scala](https://github.com/petitviolet/ulid4s) | [petitviolet](https://github.com/petitviolet) |\n| [SQL-Microsoft](https://github.com/rmalayter/ulid-mssql) | [rmalayter](https://github.com/rmalayter) | \u2713 |\n| [Swift](https://github.com/simonwhitehouse/ULIDSwift) | [simonwhitehouse](https://github.com/simonwhitehouse) |\n| [Swift](https://github.com/yaslab/ULID.swift) | [yaslab](https://github.com/yaslab) | \u2713 |\n| [Tcl](https://wiki.tcl-lang.org/48827) | [dbohdan](https://github.com/dbohdan) |\n\n## Specification\n\nBelow is the current specification of ULID as implemented in [ulid/javascript](https://github.com/ulid/javascript).\n\n*Note: the binary format has not been implemented in JavaScript as of yet.*\n\n```\n 01AN4Z07BY      79KA1307SR9X4MV3\n\n|----------|    |----------------|\n Timestamp          Randomness\n   48bits             80bits\n```\n\n### Components\n\n**Timestamp**\n- 48 bit integer\n- UNIX-time in milliseconds\n- Won't run out of space 'til the year 10889 AD.\n\n**Randomness**\n- 80 bits\n- Cryptographically secure source of randomness, if possible\n\n### Sorting\n\nThe left-most character must be sorted first, and the right-most character sorted last (lexical order). The default ASCII character set must be used. Within the same millisecond, sort order is not guaranteed\n\n### Canonical String Representation\n\n```\nttttttttttrrrrrrrrrrrrrrrr\n\nwhere\nt is Timestamp (10 characters)\nr is Randomness (16 characters)\n```\n\n#### Encoding\n\nCrockford's Base32 is used as shown. This alphabet excludes the letters I, L, O, and U to avoid confusion and abuse.\n\n```\n0123456789ABCDEFGHJKMNPQRSTVWXYZ\n```\n\n### Monotonicity\n\nWhen generating a ULID within the same millisecond, we can provide some\nguarantees regarding sort order. Namely, if the same millisecond is detected, the `random` component is incremented by 1 bit in the least significant bit position (with carrying). For example:\n\n```javascript\nimport { monotonicFactory } from 'ulid'\n\nconst ulid = monotonicFactory()\n\n// Assume that these calls occur within the same millisecond\nulid() // 01BX5ZZKBKACTAV9WEVGEMMVRZ\nulid() // 01BX5ZZKBKACTAV9WEVGEMMVS0\n```\n\nIf, in the extremely unlikely event that, you manage to generate more than 2<sup>80</sup> ULIDs within the same millisecond, or cause the random component to overflow with less, the generation will fail.\n\n```javascript\nimport { monotonicFactory } from 'ulid'\n\nconst ulid = monotonicFactory()\n\n// Assume that these calls occur within the same millisecond\nulid() // 01BX5ZZKBKACTAV9WEVGEMMVRY\nulid() // 01BX5ZZKBKACTAV9WEVGEMMVRZ\nulid() // 01BX5ZZKBKACTAV9WEVGEMMVS0\nulid() // 01BX5ZZKBKACTAV9WEVGEMMVS1\n...\nulid() // 01BX5ZZKBKZZZZZZZZZZZZZZZX\nulid() // 01BX5ZZKBKZZZZZZZZZZZZZZZY\nulid() // 01BX5ZZKBKZZZZZZZZZZZZZZZZ\nulid() // throw new Error()!\n```\n\n#### Overflow Errors when Parsing Base32 Strings\n\nTechnically, a 26-character Base32 encoded string can contain 130 bits of information, whereas a ULID must only contain 128 bits. Therefore, the largest valid ULID encoded in Base32 is `7ZZZZZZZZZZZZZZZZZZZZZZZZZ`, which corresponds to an epoch time of `281474976710655` or `2 ^ 48 - 1`.\n\nAny attempt to decode or encode a ULID larger than this should be rejected by all implementations, to prevent overflow bugs.\n\n### Binary Layout and Byte Order\n\nThe components are encoded as 16 octets. Each component is encoded with the Most Significant Byte first (network byte order).\n\n```\n0                   1                   2                   3\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                      32_bit_uint_time_high                    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|     16_bit_uint_time_low      |       16_bit_uint_random      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       32_bit_uint_random                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|                       32_bit_uint_random                      |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n```\n\n## Prior Art\n\nPartly inspired by:\n- http://instagram-engineering.tumblr.com/post/10853187575/sharding-ids-at-instagram\n- https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html\n",
        "releases": []
    }
}