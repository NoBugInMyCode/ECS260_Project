{
    "https://api.github.com/repos/wiseodd/generative-models": {
        "forks": 2040,
        "watchers": 7368,
        "stars": 7368,
        "languages": {
            "Python": 173810
        },
        "commits": [
            "2018-08-03T08:19:03Z",
            "2018-04-05T04:53:17Z",
            "2018-04-05T04:52:35Z",
            "2018-04-04T04:33:56Z",
            "2018-04-04T04:27:40Z",
            "2018-04-04T04:16:30Z",
            "2018-04-03T09:46:54Z",
            "2018-03-30T09:59:44Z",
            "2018-01-21T15:31:59Z",
            "2018-01-21T12:33:54Z",
            "2017-12-22T22:45:47Z",
            "2017-12-11T11:26:04Z",
            "2017-12-06T10:46:12Z",
            "2017-12-06T10:23:02Z",
            "2017-10-28T17:27:38Z",
            "2017-10-28T16:08:08Z",
            "2017-09-11T17:09:11Z",
            "2017-09-11T14:33:36Z",
            "2017-09-11T14:09:19Z",
            "2017-09-11T12:33:26Z",
            "2017-09-11T09:15:39Z",
            "2017-09-11T08:46:05Z",
            "2017-09-11T07:53:49Z",
            "2017-08-25T11:34:13Z",
            "2017-08-24T09:04:38Z",
            "2017-08-24T06:39:31Z",
            "2017-04-26T12:49:40Z",
            "2017-04-21T08:20:04Z",
            "2017-04-18T08:19:09Z",
            "2017-04-13T14:17:10Z"
        ],
        "creation_date": "2016-12-07T11:28:16Z",
        "contributors": 6,
        "topics": [
            "gan",
            "generative-model",
            "machine-learning",
            "pytorch",
            "rbm",
            "restricted-boltzmann-machine",
            "tensorflow",
            "vae"
        ],
        "subscribers": 298,
        "readme": "# Generative Models\nCollection of generative models, e.g. GAN, VAE in Pytorch and Tensorflow.\nAlso present here are RBM and Helmholtz Machine.\n\n## Note:\nGenerated samples will be stored in `GAN/{gan_model}/out` (or `VAE/{vae_model}/out`, etc) directory during training.\n\n## What's in it?\n\n#### Generative Adversarial Nets (GAN)\n  1. [Vanilla GAN](https://arxiv.org/abs/1406.2661)\n  2. [Conditional GAN](https://arxiv.org/abs/1411.1784)\n  3. [InfoGAN](https://arxiv.org/abs/1606.03657)\n  4. [Wasserstein GAN](https://arxiv.org/abs/1701.07875)\n  5. [Mode Regularized GAN](https://arxiv.org/abs/1612.02136)\n  6. [Coupled GAN](https://arxiv.org/abs/1606.07536)\n  7. [Auxiliary Classifier GAN](https://arxiv.org/abs/1610.09585)\n  8. [Least Squares GAN](https://arxiv.org/abs/1611.04076v2)\n  9. [Boundary Seeking GAN](https://arxiv.org/abs/1702.08431)\n  10. [Energy Based GAN](https://arxiv.org/abs/1609.03126)\n  11. [f-GAN](https://arxiv.org/abs/1606.00709)\n  12. [Generative Adversarial Parallelization](https://arxiv.org/abs/1612.04021)\n  13. [DiscoGAN](https://arxiv.org/abs/1703.05192)\n  14. [Adversarial Feature Learning](https://arxiv.org/abs/1605.09782) & [Adversarially Learned Inference](https://arxiv.org/abs/1606.00704)\n  15. [Boundary Equilibrium GAN](https://arxiv.org/abs/1703.10717)\n  16. [Improved Training for Wasserstein GAN](https://arxiv.org/abs/1704.00028)\n  17. [DualGAN](https://arxiv.org/abs/1704.02510)\n  18. [MAGAN: Margin Adaptation for GAN](https://arxiv.org/abs/1704.03817)\n  19. [Softmax GAN](https://arxiv.org/abs/1704.06191)\n  20. [GibbsNet](https://papers.nips.cc/paper/7094-gibbsnet-iterative-adversarial-inference-for-deep-graphical-models.pdf)\n\n#### Variational Autoencoder (VAE)\n  1. [Vanilla VAE](https://arxiv.org/abs/1312.6114)\n  2. [Conditional VAE](https://arxiv.org/abs/1406.5298)\n  3. [Denoising VAE](https://arxiv.org/abs/1511.06406)\n  4. [Adversarial Autoencoder](https://arxiv.org/abs/1511.05644)\n  5. [Adversarial Variational Bayes](https://arxiv.org/abs/1701.04722)\n\n#### Restricted Boltzmann Machine (RBM)\n  1. [Binary RBM with Contrastive Divergence](http://www.cs.toronto.edu/~fritz/absps/cdmiguel.pdf)\n  2. [Binary RBM with Persistent Contrastive Divergence](http://www.cs.toronto.edu/~tijmen/pcd/pcd.pdf)\n\n#### Helmholtz Machine\n  1. [Binary Helmholtz Machine with Wake-Sleep Algorithm](http://www.cs.toronto.edu/~fritz/absps/ws.pdf)\n\n## Dependencies\n\n1. Install miniconda <http://conda.pydata.org/miniconda.html>\n2. Do `conda env create`\n3. Enter the env `source activate generative-models`\n4. Install [Tensorflow](https://www.tensorflow.org/get_started/os_setup)\n5. Install [Pytorch](https://github.com/pytorch/pytorch#installation)\n",
        "releases": []
    }
}