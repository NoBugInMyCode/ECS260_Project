{
    "https://api.github.com/repos/bchavez/Bogus": {
        "forks": 512,
        "watchers": 9013,
        "stars": 9013,
        "languages": {
            "C#": 701851,
            "JavaScript": 7954,
            "PowerShell": 1753,
            "Shell": 1159,
            "Batchfile": 90
        },
        "commits": [
            "2024-11-21T02:25:36Z",
            "2024-09-02T21:58:58Z",
            "2024-09-02T21:56:23Z",
            "2024-07-19T22:04:25Z",
            "2024-07-19T21:54:13Z",
            "2024-07-19T21:33:44Z",
            "2024-07-06T17:20:10Z",
            "2024-05-12T15:39:44Z",
            "2024-04-28T02:15:26Z",
            "2024-04-28T02:08:43Z",
            "2024-04-17T22:32:06Z",
            "2024-04-16T22:22:34Z",
            "2024-04-16T22:21:09Z",
            "2024-03-09T19:40:17Z",
            "2024-03-09T19:38:17Z",
            "2024-03-02T18:26:20Z",
            "2024-03-02T18:23:11Z",
            "2024-02-10T03:02:29Z",
            "2024-02-10T02:57:10Z",
            "2024-02-03T02:56:58Z",
            "2024-01-15T03:19:13Z",
            "2024-01-14T20:12:06Z",
            "2024-01-14T19:05:03Z",
            "2024-01-14T19:02:07Z",
            "2024-01-14T17:53:50Z",
            "2024-01-14T17:44:59Z",
            "2024-01-14T17:35:40Z",
            "2024-01-14T17:20:18Z",
            "2024-01-14T17:09:40Z",
            "2024-01-14T16:19:49Z"
        ],
        "creation_date": "2015-06-06T18:28:14Z",
        "contributors": 30,
        "topics": [
            "bogus",
            "c-sharp",
            "csharp",
            "data",
            "data-access-layer",
            "data-generator",
            "database",
            "dotnet",
            "fake",
            "faker",
            "generator",
            "poco",
            "seed",
            "test-data"
        ],
        "subscribers": 122,
        "readme": "[![Downloads](https://img.shields.io/nuget/dt/Bogus.svg)](https://www.nuget.org/packages/Bogus/) [![Build status](https://ci.appveyor.com/api/projects/status/dxa14myphnlbplc6/branch/master?svg=true)](https://ci.appveyor.com/project/bchavez/bogus)  [![Twitter](https://img.shields.io/twitter/url/https/github.com/bchavez/Bogus.svg?style=social)](https://twitter.com/intent/tweet?text=Simple%20Fake%20Data%20Generator%20for%20.NET:&amp;amp;url=https%3A%2F%2Fgithub.com%2Fbchavez%2FBogus) [![Chat](https://img.shields.io/badge/chat-discussions-green)](https://github.com/bchavez/Bogus/discussions) <img src=\"https://raw.githubusercontent.com/bchavez/Bogus/master/Docs/logo.png\" align='right' />\n\nBogus for .NET: C#, F#, and VB.NET\n======================\n\nProject Description\n-------------------\nHello. I'm your host **[Brian Chavez](https://github.com/bchavez)** ([twitter](https://twitter.com/bchavez)). **Bogus** is a simple fake data generator for **.NET** languages like **C#**, **F#** and **VB.NET**. **Bogus** is fundamentally a **C#** port of [`faker.js`](https://github.com/faker-js/faker.js/)\nand inspired by [`FluentValidation`](https://github.com/JeremySkinner/FluentValidation)'s syntax sugar.\n\n**Bogus** will help you load databases, UI and apps with fake data for your testing needs. If you like **Bogus** star :star: the repository and show your friends! :smile: If you find **Bogus** useful consider supporting the project by purchasing a [**Bogus Premium**](#bogus-premium-extensions) license that gives you extra **Bogus** superpowers! :dizzy: :muscle: You can also [sponsor the project here](https://github.com/sponsors/bchavez)! :moneybag: :dollar:\n\n\n### Download & Install\n**Nuget Package [Bogus](https://www.nuget.org/packages/Bogus/)**\n\n```powershell\nInstall-Package Bogus\n```\nMinimum Requirements: **.NET Standard 1.3** or **.NET Standard 2.0** or **.NET Framework 4.0**.\n\n##### Projects That Use Bogus\n\n* [**Bitwarden Passwordless Server**](https://github.com/bitwarden/passwordless-server) [[code]](https://github.com/bitwarden/passwordless-server/blob/147e0ffa6e687634edcda7ac89518eab56936835/tests/Api.IntegrationTests/Helpers/User/UserHelpers.cs#L12-L22)\n* [**Elasticsearch .NET Client (NEST)**](https://github.com/elastic/elasticsearch-net) [[code]](https://github.com/elastic/elasticsearch-net/tree/82c938893b2ff4ddca03a8e977ad14a16da712ba/src/Tests/Framework/MockData)\n* [**FluentValidation**](https://github.com/FluentValidation/FluentValidation) [[code]](https://github.com/FluentValidation/FluentValidation/search?q=Bogus)\n* [**Microsoft Windows-XAML / Template10**](https://github.com/Windows-XAML/Template10) [[code]](https://github.com/Windows-XAML/Template10/blob/beed5e58a4f8ab381cff6f063d2a91db5b4fc3bc/Basics/PrismSample/Services/DataService.cs#L1)\n* [**Microsoft Learning / Cloud-Native Applications Using Microsoft Azure Cosmos DB**](https://github.com/MicrosoftLearning/dp-420-cosmos-db-dev) [[code]](https://github.com/MicrosoftLearning/dp-420-cosmos-db-dev/blob/fdbb3811c20a601fdfda8ea04c9c7de89b8afb19/instructions/08-sdk-bulk.md)\n* **Microsoft Office Developer**\n    * [**Office 365 Development Training Content**](https://github.com/OfficeDev/TrainingContent) [[code]](https://github.com/OfficeDev/TrainingContent/blob/0b2579517f0271f9a64f613b2046ab2821a73956/Teams/03%20Authentication/LabFiles/Starter/officedev-talent-management/DataModel/PositionCandidateData.cs)\n    * [**Microsoft Teams Sample Connector**](https://github.com/OfficeDev/microsoft-teams-sample-connector-csharp) [[code]](https://github.com/OfficeDev/microsoft-teams-sample-connector-csharp/blob/8805bb1acb136949905e4644c4e714dd7b70a61a/TeamsToDoAppConnector/Utils/TaskHelper.cs)\n\n##### Featured In\n* [**Amazon AWS .NET Open Source Fund Recipient - Oct. 1st, 2024**](#sponsors)\n* [**Microsoft 'On .NET Live': Next-level EF Core Data Seeding with Bogus - Apr. 15th, 2024**](https://www.youtube.com/watch?v=KoEOsfrRUqk&t=170s)\n* [**Adventures in .NET: Building Bogus with Brian Chavez - Jan 5th, 2024**](https://www.youtube.com/watch?v=C1WwGKUY9K4)\n* [**Microsoft Docs: Deploy Orleans to Azure App Service - May 5th, 2022**](https://docs.microsoft.com/en-us/dotnet/orleans/deployment/deploy-to-azure-app-service)\n* [**Microsoft Docs: Modernize a WPF app tutorial - Aug. 2nd, 2019**](https://docs.microsoft.com/en-us/windows/apps/desktop/modernize/modernize-wpf-tutorial-1#configure-nuget-packages-and-dependencies)\n* [**Microsoft Build 2018: Azure Tips and Tricks - May 8th, 2018**](https://www.youtube.com/watch?v=088e5IUqF6g&t=12m31s)\n* **[NuGet Must Haves: Top 10 Unit Testing Libraries in 2017](http://nugetmusthaves.com/article/top-unit-testing-libraries)**\n* **[.NET Rocks Podcast: #BetterKnowThatFramework - Mar. 16th 2017](https://twitter.com/bchavez/status/842479138850070528)**, **[Sep. 13th, 2018](https://twitter.com/bchavez/status/1040479669743628290)**, and **[May 7th, 2020](https://twitter.com/bchavez/status/1264047877245988864)**\n* **[.NET Engineering Blog: NuGet Package of the week #1. - \"This week in .NET - December 8th 2015\"](https://blogs.msdn.microsoft.com/dotnet/2015/12/08/the-week-in-net-12082015/)**\n\n##### Blog Posts\n* [Nick Chapsas](https://twitter.com/nickchapsas) - [Generating realistic fake data in .NET using Bogus [YouTube]](https://www.youtube.com/watch?v=T9pwE1GAr_U)\n* [Jack Histon](https://twitter.com/jackhiston) - [How to Create Bogus Data in C#](http://jackhiston.com/2017/10/1/how-to-create-bogus-data-in-c/)\n* [Christos Matskas](https://twitter.com/christosmatskas) - [Creating .NET fakes using Bogus](https://cmatskas.com/creating-net-fakes-using-bogus-2/)\n* [Jason Roberts](https://twitter.com/robertsjason) - [Lifelike Test Data Generation with Bogus](http://dontcodetired.com/blog/post/Lifelike-Test-Data-Generation-with-Bogus)\n* Mark Timmings - [Auto generating test data with Bogus](http://putridparrot.com/blog/auto-generating-test-data-with-bogus/)\n* [.NET Core Generating Test Data](https://coderulez.wordpress.com/2017/05/10/net-core-generating-test-data/)\n* Steve Leigh - [Seedy Fake Users](http://stevesspace.com/2017/01/seedy-fake-users/)\n* [Volkan Paksoy](https://twitter.com/volkan_paksoy) - [Generating Test Data with Bogus](https://volkanpaksoy.com/archive/2019/06/27/Generating-Test-Data-with-Bogus/)\n* Alican Demirtas - [Bogus on F#](https://www.compositional-it.com/news-blog/bogus-on-f/)\n* [Khalid Abuhakmeh](https://twitter.com/buhakmeh) - [Seed Entity Framework Core With Bogus](https://khalidabuhakmeh.com/seed-entity-framework-core-with-bogus)\n* [Sander ten Brinke](https://twitter.com/sandertenbrinke) - [Taking Entity Framework Core data seeding to the next level with Bogus](https://stenbrinke.nl/blog/taking-ef-core-data-seeding-to-the-next-level-with-bogus/)\n\n##### The Crypto Tip Jar!\n<a href=\"https://commerce.coinbase.com/checkout/2faa393a-6fc3-4365-993a-6cc110bc4d35\"><img src=\"https://raw.githubusercontent.com/bchavez/Bogus/master/Docs/tipjar.png\" /></a>\n\n\nUsage\n-----\n### The Great C# Example\n\n```csharp\npublic enum Gender\n{\n    Male,\n    Female\n}\n\n//Set the randomizer seed if you wish to generate repeatable data sets.\nRandomizer.Seed = new Random(8675309);\n\nvar fruit = new[] { \"apple\", \"banana\", \"orange\", \"strawberry\", \"kiwi\" };\n\nvar orderIds = 0;\nvar testOrders = new Faker<Order>()\n    //Ensure all properties have rules. By default, StrictMode is false\n    //Set a global policy by using Faker.DefaultStrictMode\n    .StrictMode(true)\n    //OrderId is deterministic\n    .RuleFor(o => o.OrderId, f => orderIds++)\n    //Pick some fruit from a basket\n    .RuleFor(o => o.Item, f => f.PickRandom(fruit))\n    //A random quantity from 1 to 10\n    .RuleFor(o => o.Quantity, f => f.Random.Number(1, 10))\n    //A nullable int? with 80% probability of being null.\n    //The .OrNull extension is in the Bogus.Extensions namespace.\n    .RuleFor(o => o.LotNumber, f => f.Random.Int(0, 100).OrNull(f, .8f));\n\n\nvar userIds = 0;\nvar testUsers = new Faker<User>()\n    //Optional: Call for objects that have complex initialization\n    .CustomInstantiator(f => new User(userIds++, f.Random.Replace(\"###-##-####\")))\n\n    //Use an enum outside scope.\n    .RuleFor(u => u.Gender, f => f.PickRandom<Gender>())\n\n    //Basic rules using built-in generators\n    .RuleFor(u => u.FirstName, (f, u) => f.Name.FirstName(u.Gender))\n    .RuleFor(u => u.LastName, (f, u) => f.Name.LastName(u.Gender))\n    .RuleFor(u => u.Avatar, f => f.Internet.Avatar())\n    .RuleFor(u => u.UserName, (f, u) => f.Internet.UserName(u.FirstName, u.LastName))\n    .RuleFor(u => u.Email, (f, u) => f.Internet.Email(u.FirstName, u.LastName))\n    .RuleFor(u => u.SomethingUnique, f => $\"Value {f.UniqueIndex}\")\n\n    //Use a method outside scope.\n    .RuleFor(u => u.CartId, f => Guid.NewGuid())\n    //Compound property with context, use the first/last name properties\n    .RuleFor(u => u.FullName, (f, u) => u.FirstName + \" \" + u.LastName)\n    //And composability of a complex collection.\n    .RuleFor(u => u.Orders, f => testOrders.Generate(3).ToList())\n    //Optional: After all rules are applied finish with the following action\n    .FinishWith((f, u) =>\n        {\n            Console.WriteLine(\"User Created! Id={0}\", u.Id);\n        });\n\nvar user = testUsers.Generate();\nConsole.WriteLine(user.DumpAsJson());\n\n/* OUTPUT:\nUser Created! Id=0\n *\n{\n  \"Id\": 0,\n  \"FirstName\": \"Audrey\",\n  \"LastName\": \"Spencer\",\n  \"FullName\": \"Audrey Spencer\",\n  \"UserName\": \"Audrey_Spencer72\",\n  \"Email\": \"Audrey82@gmail.com\",\n  \"Avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/itstotallyamy/128.jpg\",\n  \"CartId\": \"863f9462-5b88-471f-b833-991d68db8c93\",\n  \"SSN\": \"923-88-4231\",\n  \"Gender\": 0,\n  \"Orders\": [\n    {\n      \"OrderId\": 0,\n      \"Item\": \"orange\",\n      \"Quantity\": 8\n    },\n    {\n      \"OrderId\": 1,\n      \"Item\": \"banana\",\n      \"Quantity\": 2\n    },\n    {\n      \"OrderId\": 2,\n      \"Item\": \"kiwi\",\n      \"Quantity\": 9\n    }\n  ]\n} */\n```\n\n#### More Examples!\n| Language  | Description | \n|:---------:| ----------- |\n| **C#**    | [**Full working example of 'The Great C# Example'**](https://github.com/bchavez/Bogus/tree/master/Examples/GettingStarted) |\n| **C#**    | [**Using Bogus and EF Core to a seed database**](https://github.com/bchavez/Bogus/tree/master/Examples/EFCoreSeedDb) |\n| **C#**    | [**Extending Bogus with custom APIs and data**](https://github.com/bchavez/Bogus/tree/master/Examples/ExtendingBogus) |\n| **F#**    | [**Using Bogus with F#**](#the-fabulous-f-examples) |\n| **VB.NET** | [**Using Bogus with VB.NET**](#the-very-basic-vbnet-example) |\n\n\n### Locales\n\nSince we're a port of **faker.js**, we support a whole bunch of different\nlocales. Here's an example in Korean:\n\n```csharp\n[Test]\npublic void With_Korean_Locale()\n{\n    var lorem = new Bogus.DataSets.Lorem(locale: \"ko\");\n    Console.WriteLine(lorem.Sentence(5));\n}\n\n/* \uad6d\uac00\ub294 \ubb34\uc0c1\uc73c\ub85c \ud589\uc704\ub85c \uc758\ubb34\ub97c \uad6c\uc131\ud558\uc9c0 \uc2e0\uccb4\uc758 \ucc98\ubc8c\ubc1b\uc9c0 \uc608\uc220\uac00\uc758 \uacbd\uc6b0\uc640 */\n```\n\n**Bogus** supports the following locales:\n\n| Locale Code  | Language                | | Locale Code  | Language                 |\n|:------------:|:-----------------------:|-|:------------:|:------------------------:|\n|`af_ZA`       |Afrikaans                 ||`fr_CH`       |French (Switzerland)      |\n|`ar`          |Arabic                    ||`ge`          |Georgian                  |\n|`az`          |Azerbaijani               ||`hr`          |Hrvatski                  |\n|`cz`          |Czech                     ||`id_ID`       |Indonesia                 |\n|`de`          |German                    ||`it`          |Italian                   |\n|`de_AT`       |German (Austria)          ||`ja`          |Japanese                  |\n|`de_CH`       |German (Switzerland)      ||`ko`          |Korean                    |\n|`el`          |Greek                     ||`lv`          |Latvian                   |\n|`en`          |English                   ||`nb_NO`       |Norwegian                 |\n|`en_AU`       |English (Australia)       ||`ne`          |Nepalese                  |\n|`en_AU_ocker` |English (Australia Ocker) ||`nl`          |Dutch                     |\n|`en_BORK`     |English (Bork)            ||`nl_BE`       |Dutch (Belgium)           |\n|`en_CA`       |English (Canada)          ||`pl`          |Polish                    |\n|`en_GB`       |English (Great Britain)   ||`pt_BR`       |Portuguese (Brazil)       |\n|`en_IE`       |English (Ireland)         ||`pt_PT`       |Portuguese (Portugal)     |\n|`en_IND`      |English (India)           ||`ro`          |Romanian                  |\n|`en_NG`       |Nigeria (English)         ||`ru`          |Russian                   |\n|`en_US`       |English (United States)   ||`sk`          |Slovakian                 |\n|`en_ZA`       |English (South Africa)    ||`sv`          |Swedish                   |\n|`es`          |Spanish                   ||`tr`          |Turkish                   |\n|`es_MX`       |Spanish (Mexico)          ||`uk`          |Ukrainian                 |\n|`fa`          |Farsi                     ||`vi`          |Vietnamese                |\n|`fi`          |Finnish                   ||`zh_CN`       |Chinese                   |\n|`fr`          |French                    ||`zh_TW`       |Chinese (Taiwan)          |\n|`fr_CA`       |French (Canada)           ||`zu_ZA`       |Zulu (South Africa)       |\n\n\n***Note:*** Some locales may not have a complete data set. For example, [`zh_CN`](https://github.com/faker-js/faker.js/tree/master/lib/locales/zh_CN) does not have a `lorem` data set, but [`ko`](https://github.com/faker-js/faker.js/tree/master/lib/locales/ko) has a `lorem` data set. **Bogus** will default to `en` if a *locale-specific* data set is not found. To further illustrate the previous example, the missing `zh_CN:lorem` data set will default to the `en:lorem` data set.\n\nIf you'd like to help contribute new locales or update existing ones please see our\n[Creating Locales](https://github.com/bchavez/Bogus/wiki/Creating-Locales) wiki page\nfor more info.\n\n### Without Fluent Syntax\n\nYou can use **Bogus** without a fluent setup. The examples below highlight three alternative ways to use **Bogus** without a fluent syntax setup.\n\n* Using the `Faker` facade.\n* Using **DataSets** directly.\n* Using `Faker<T>` **inheritance**.\n\n#### Using the `Faker` facade:\n```csharp\npublic void Using_The_Faker_Facade()\n{\n   var faker = new Faker(\"en\");\n   var o = new Order()\n       {\n           OrderId = faker.Random.Number(1, 100),\n           Item = faker.Lorem.Sentence(),\n           Quantity = faker.Random.Number(1, 10)\n       };\n   o.Dump();\n}\n```\n\n#### Using **DataSets** directly:\n```csharp\npublic void Using_DataSets_Directly()\n{\n   var random = new Bogus.Randomizer();\n   var lorem = new Bogus.DataSets.Lorem(\"en\");\n   var o = new Order()\n       {\n           OrderId = random.Number(1, 100),\n           Item = lorem.Sentence(),\n           Quantity = random.Number(1, 10)\n       };\n   o.Dump();\n}\n```\n\n#### Using `Faker<T>` inheritance:\n```csharp\npublic class OrderFaker : Faker<Order> {\n   public OrderFaker() {\n      RuleFor(o => o.OrderId, f => f.Random.Number(1, 100));\n      RuleFor(o => o.Item, f => f.Lorem.Sentence());\n      RuleFor(o => o.Quantity, f => f.Random.Number(1, 10));\n   }\n}\n\npublic void Using_FakerT_Inheritance()\n{\n   var orderFaker = new OrderFaker();\n   var o = orderFaker.Generate();\n   o.Dump();\n}\n```\n\nIn the examples above, all three alternative styles of using **Bogus** produce the same `Order` result:\n```\n{\n  \"OrderId\": 61,\n  \"Item\": \"vel est ipsa\",\n  \"Quantity\": 7\n}\n```\n\n### Bogus API Support\n* **`Address`**\n\t* `ZipCode` - Get a zipcode.\n\t* `City` - Get a city name.\n\t* `StreetAddress` - Get a street address.\n\t* `CityPrefix` - Get a city prefix.\n\t* `CitySuffix` - Get a city suffix.\n\t* `StreetName` - Get a street name.\n\t* `BuildingNumber` - Get a building number.\n\t* `StreetSuffix` - Get a street suffix.\n\t* `SecondaryAddress` - Get a secondary address like 'Apt. 2' or 'Suite 321'.\n\t* `County` - Get a county.\n\t* `Country` - Get a country.\n\t* `FullAddress` - Get a full address like Street, City, Country.\n\t* `CountryCode` - Get a random ISO 3166-1 country code.\n\t* `State` - Get a random state state.\n\t* `StateAbbr` - Get a state abbreviation.\n\t* `Latitude` - Get a Latitude.\n\t* `Longitude` - Get a Longitude.\n\t* `Direction` - Generates a cardinal or ordinal direction. IE: Northwest, South, SW, E.\n\t* `CardinalDirection` - Generates a cardinal direction. IE: North, South, E, W.\n\t* `OrdinalDirection` - Generates an ordinal direction. IE: Northwest, Southeast, SW, NE.\n* **`Commerce`**\n\t* `Department` - Get a random commerce department.\n\t* `Price` - Get a random product price.\n\t* `Categories` - Get random product categories.\n\t* `ProductName` - Get a random product name.\n\t* `Color` - Get a random color.\n\t* `Product` - Get a random product.\n\t* `ProductAdjective` - Random product adjective.\n\t* `ProductMaterial` - Random product material.\n\t* `Ean8` - Get a random EAN-8 barcode number.\n\t* `Ean13` - Get a random EAN-13 barcode number.\n* **`Company`**\n\t* `CompanySuffix` - Get a company suffix. \"Inc\" and \"LLC\" etc.\n\t* `CompanyName` - Get a company name.\n\t* `CatchPhrase` - Get a company catch phrase.\n\t* `Bs` - Get a company BS phrase.\n* **`Database`**\n\t* `Column` - Generates a column name.\n\t* `Type` - Generates a column type.\n\t* `Collation` - Generates a collation.\n\t* `Engine` - Generates a storage engine.\n* **`Date`**\n\t* `Past` - Get a `DateTime` in the past between `refDate` and `yearsToGoBack`.\n\t* `PastOffset` - Get a `DateTimeOffset` in the past between `refDate` and `yearsToGoBack`.\n\t* `Soon` - Get a `DateTime` that will happen soon.\n\t* `SoonOffset` - Get a `DateTimeOffset` that will happen soon.\n\t* `Future` - Get a `DateTime` in the future between `refDate` and `yearsToGoForward`.\n\t* `FutureOffset` - Get a `DateTimeOffset` in the future between `refDate` and `yearsToGoForward`.\n\t* `Between` - Get a random `DateTime` between `start` and `end`.\n\t* `BetweenOffset` - Get a random `DateTimeOffset` between `start` and `end`.\n\t* `Recent` - Get a random `DateTime` within the last few days.\n\t* `RecentOffset` - Get a random `DateTimeOffset` within the last few days.\n\t* `Timespan` - Get a random `TimeSpan`.\n\t* `Month` - Get a random month.\n\t* `Weekday` - Get a random weekday.\n* **`Finance`**\n\t* `Account` - Get an account number. Default length is 8 digits.\n\t* `AccountName` - Get an account name. Like \"savings\", \"checking\", \"Home Loan\" etc..\n\t* `Amount` - Get a random amount. Default 0 - 1000.\n\t* `TransactionType` - Get a transaction type: \"deposit\", \"withdrawal\", \"payment\", or \"invoice\".\n\t* `Currency` - Get a random currency.\n\t* `CreditCardNumber` - Generate a random credit card number with valid Luhn checksum.\n\t* `CreditCardCvv` - Generate a credit card CVV.\n\t* `BitcoinAddress` - Generates a random Bitcoin address.\n\t* `EthereumAddress` - Generate a random Ethereum address.\n\t* `RoutingNumber` - Generates an ABA routing number with valid check digit.\n\t* `Bic` - Generates Bank Identifier Code (BIC) code.\n\t* `Iban` - Generates an International Bank Account Number (IBAN).\n* **`Hacker`**\n\t* `Abbreviation` - Returns an abbreviation.\n\t* `Adjective` - Returns a adjective.\n\t* `Noun` - Returns a noun.\n\t* `Verb` - Returns a verb.\n\t* `IngVerb` - Returns a verb ending with -ing.\n\t* `Phrase` - Returns a phrase.\n* **`Images`**\n\t* `DataUri` - Get a SVG data URI image with a specific width and height.\n\t* `PicsumUrl` - Get an image from the https://picsum.photos service.\n\t* `PlaceholderUrl` - Get an image from https://placeholder.com service.\n\t* `LoremFlickrUrl` - Get an image from https://loremflickr.com service.\n* **`Internet`**\n\t* `Avatar` - Generates a legit Internet URL avatar from twitter accounts.\n\t* `Email` - Generates an email address.\n\t* `ExampleEmail` - Generates an example email with @example.com.\n\t* `UserName` - Generates user names.\n\t* `UserNameUnicode` - Generates a user name preserving Unicode characters.\n\t* `DomainName` - Generates a random domain name.\n\t* `DomainWord` - Generates a domain word used for domain names.\n\t* `DomainSuffix` - Generates a domain name suffix like .com, .net, .org\n\t* `Ip` - Gets a random IPv4 address string.\n\t* `Port` - Generates a random port number.\n\t* `IpAddress` - Gets a random IPv4 IPAddress type.\n\t* `IpEndPoint` - Gets a random IPv4 IPEndPoint.\n\t* `Ipv6` - Generates a random IPv6 address string.\n\t* `Ipv6Address` - Generate a random IPv6 IPAddress type.\n\t* `Ipv6EndPoint` - Gets a random IPv6 IPEndPoint.\n\t* `UserAgent` - Generates a random user agent.\n\t* `Mac` - Gets a random mac address.\n\t* `Password` - Generates a random password.\n\t* `Color` - Gets a random aesthetically pleasing color near the base RGB. See [here](http://stackoverflow.com/questions/43044/algorithm-to-randomly-generate-an-aesthetically-pleasing-color-palette).\n\t* `Protocol` - Returns a random protocol. HTTP or HTTPS.\n\t* `Url` - Generates a random URL.\n\t* `UrlWithPath` - Get an absolute URL with random path.\n\t* `UrlRootedPath` - Get a rooted URL path like: /foo/bar. Optionally with file extension.\n* **`Lorem`**\n\t* `Word` - Get a random lorem word.\n\t* `Words` - Get an array of random lorem words.\n\t* `Letter` - Get a character letter.\n\t* `Sentence` - Get a random sentence of specific number of words.\n\t* `Sentences` - Get some sentences.\n\t* `Paragraph` - Get a paragraph.\n\t* `Paragraphs` - Get a specified number of paragraphs.\n\t* `Text` - Get random text on a random lorem methods.\n\t* `Lines` - Get lines of lorem.\n\t* `Slug` - Slugify lorem words.\n* **`Name`**\n\t* `FirstName` - Get a first name. Getting a gender specific name is only supported on locales that support it.\n\t* `LastName` - Get a last name. Getting a gender specific name is only supported on locales that support it.\n\t* `FullName` - Get a full name, concatenation of calling FirstName and LastName.\n\t* `Prefix` - Gets a random prefix for a name.\n\t* `Suffix` - Gets a random suffix for a name.\n\t* `FindName` - Gets a full name.\n\t* `JobTitle` - Gets a random job title.\n\t* `JobDescriptor` - Get a job description.\n\t* `JobArea` - Get a job area expertise.\n\t* `JobType` - Get a type of job.\n* **`Phone`**\n\t* `PhoneNumber` - Get a phone number.\n\t* `PhoneNumberFormat` - Gets a phone number based on the locale's phone_number.formats[] array index.\n* **`Rant`**\n\t* `Review` - Generates a random user review.\n\t* `Reviews` - Generate an array of random reviews.\n* **`System`**\n\t* `FileName` - Get a random file name.\n\t* `DirectoryPath` - Get a random directory path (Unix).\n\t* `FilePath` - Get a random file path (Unix).\n\t* `CommonFileName` - Generates a random file name with a common file extension.\n\t* `MimeType` - Get a random mime type.\n\t* `CommonFileType` - Returns a commonly used file type.\n\t* `CommonFileExt` - Returns a commonly used file extension.\n\t* `FileType` - Returns any file type available as mime-type.\n\t* `FileExt` - Gets a random extension for the given mime type.\n\t* `Semver` - Get a random semver version string.\n\t* `Version` - Get a random `Version`.\n\t* `Exception` - Get a random `Exception` with a fake stack trace.\n\t* `AndroidId` - Get a random GCM registration ID.\n\t* `ApplePushToken` - Get a random Apple Push Token.\n\t* `BlackBerryPin` - Get a random BlackBerry Device PIN.\n* **`Vehicle`**\n\t* `Vin` - Generate a vehicle identification number (VIN).\n\t* `Manufacturer` - Get a vehicle manufacture name. IE: Toyota, Ford, Porsche.\n\t* `Model` - Get a vehicle model. IE: Camry, Civic, Accord.\n\t* `Type` - Get a vehicle type. IE: Minivan, SUV, Sedan.\n\t* `Fuel` - Get a vehicle fuel type. IE: Electric, Gasoline, Diesel.\n* **`Random`/`Randomizer`**\n\t* `Number` - Get an int from 0 to max.\n\t* `Digits` - Get a random sequence of digits.\n\t* `Even` - Returns a random even number.\n\t* `Odd` - Returns a random odd number.\n\t* `Double` - Get a random double, between 0.0 and 1.0.\n\t* `Decimal` - Get a random decimal, between 0.0 and 1.0.\n\t* `Float` - Get a random float, between 0.0 and 1.0.\n\t* `Byte` - Generate a random byte between 0 and 255.\n\t* `Bytes` - Get a random sequence of bytes.\n\t* `SByte` - Generate a random sbyte between -128 and 127.\n\t* `Int` - Generate a random int between MinValue and MaxValue.\n\t* `UInt` - Generate a random uint between MinValue and MaxValue.\n\t* `ULong` - Generate a random ulong between MinValue and MaxValue.\n\t* `Long` - Generate a random long between MinValue and MaxValue.\n\t* `Short` - Generate a random short between MinValue and MaxValue.\n\t* `UShort` - Generate a random ushort between MinValue and MaxValue.\n\t* `Char` - Generate a random char between MinValue and MaxValue.\n\t* `Chars` - Generate a random chars between MinValue and MaxValue.\n\t* `String` - Get a string of characters of a specific length.\n\t* `String2` - Get a string of characters with a specific length drawing characters from `chars`.\n\t* `Hash` - Return a random hex hash. Default 40 characters, aka SHA-1.\n\t* `Bool` - Get a random boolean.\n\t* `ArrayElement<T>` - Get a random array element.\n\t* `ArrayElement` - Get a random array element.\n\t* `ArrayElements<T>` - Get a random subset of an array.\n\t* `ListItem<T>` - Get a random list item.\n\t* `ListItems<T>` - Get a random subset of a List.\n\t* `CollectionItem<T>` - Get a random collection item.\n\t* `ReplaceNumbers` - Replaces symbols with numbers.\n\t* `ReplaceSymbols` - Replaces each character instance in a string.\n\t* `Replace` - Replaces symbols with numbers and letters. # = number, ? = letter, * = number or letter.\n\t* `ClampString` - Clamps the length of a string between min and max characters.\n\t* `Enum<T>` - Picks a random Enum of T. Works only with Enums.\n\t* `Shuffle<T>` - Shuffles an IEnumerable source.\n\t* `Word` - Returns a single word or phrase in English.\n\t* `Words` - Gets some random words and phrases in English.\n\t* `WordsArray` - Get a range of words in an array (English).\n\t* `Guid` - Get a random GUID.\n\t* `Uuid` - Get a random GUID. Alias for Randomizer.Guid().\n\t* `RandomLocale` - Returns a random locale.\n\t* `AlphaNumeric` - Returns a random set of alpha numeric characters 0-9, a-z.\n\t* `Hexadecimal` - Generates a random hexadecimal string.\n\t* `WeightedRandom<T>` - Returns a selection of T[] based on a weighted distribution of probability.\n\n#### API Extension Methods\n* **`using Bogus.Extensions.Belgium;`**\n\t* `Bogus.Person.NationalNumber()` - Rijksregisternummer / Num\u00e9ro Nationale\n* **`using Bogus.Extensions.Brazil;`**\n\t* `Bogus.Person.Cpf()` - Cadastro de Pessoas F\u00edsicas\n\t* `Bogus.DataSets.Company.Cnpj()` - Cadastro Nacional da Pessoa Jur\u00eddica\n* **`using Bogus.Extensions.Canada;`**\n\t* `Bogus.Person.Sin()` - Social Insurance Number for Canada\n* **`using Bogus.Extensions.Denmark;`**\n\t* `Bogus.Person.Cpr()` - Danish Personal Identification number\n* **`using Bogus.Extensions.Finland;`**\n\t* `Bogus.Person.Henkilotunnus()` - Finnish Henkil\u00f6tunnus\n* **`using Bogus.Extensions.Italy;`**\n\t* `Bogus.Person.CodiceFiscale()` - Codice Fiscale\n\t* `Bogus.DataSets.Finance.CodiceFiscale()` - Codice Fiscale\n* **`using Bogus.Extensions.Norway;`**\n\t* `Bogus.Person.Fodselsnummer()` - Norwegian national identity number\n* **`using Bogus.Extensions.Poland;`**\n\t* `Bogus.Person.Pesel()` - Number of Powszechny Elektroniczny System Ewidencji Ludno\u015bci (PESEL)\n\t* `Bogus.DataSets.Company.Nip()` - Numer identyfikacji podatkowej (NIP)\n\t* `Bogus.DataSets.Company.Regon()` - Number of Rejestr Gospodarki Narodowej (REGON)\n* **`using Bogus.Extensions.Portugal;`**\n\t* `Bogus.Person.Nif()` - N\u00famero de Identifica\u00e7\u00e3o Fiscal (NIF)\n\t* `Bogus.DataSets.Company.Nipc()` - N\u00famero de Identifica\u00e7\u00e3o de Pessoa Colectiva (NIPC)\n* **`using Bogus.Extensions.Romania;`**\n\t* `Bogus.Person.Cnp()` - Romanian Personal Identification number (CNP)\n* **`using Bogus.Extensions.Sweden;`**\n\t* `Bogus.Person.Personnummer()` - Swedish national identity number\n\t* `Bogus.Person.Samordningsnummer()` - Swedish coordination number\n* **`using Bogus.Extensions.UnitedKingdom;`**\n\t* `Bogus.DataSets.Vehicle.GbRegistrationPlate()` - GB Vehicle Registration Plate\n\t* `Bogus.DataSets.Finance.SortCode()` - Banking Sort Code\n\t* `Bogus.DataSets.Finance.Nino()` - National Insurance Number\n\t* `Bogus.DataSets.Finance.VatNumber()` - Generates a UK compatible VAT registration number\n\t* `Bogus.DataSets.Address.CountryOfUnitedKingdom()` - Country of the United Kingdom\n* **`using Bogus.Extensions.UnitedStates;`**\n\t* `Bogus.Person.Ssn()` - Social Security Number\n\t* `Bogus.DataSets.Company.Ein()` - Employer Identification Number\n* **`using Bogus.Distributions.Gaussian;`**\n    * `Randomizer.GaussianInt()` - Generate an `int` based on a specific normal distribution.\n    * `Randomizer.GaussianFloat()` - Generate a `float` based on a specific normal distribution.\n    * `Randomizer.GaussianDouble()` - Generate a `double` based on a specific normal distribution.\n    * `Randomizer.GaussianDecimal()` - Generate a `decimal` based on a specific normal distribution.\n    \n#### Amazing Community Extensions\n* [**AutoBogus**](https://github.com/nickdodd79/AutoBogus) ([`NuGet Package`](https://www.nuget.org/packages?q=AutoBogus)) by [@nickdodd79](https://github.com/nickdodd79/) - Extends **Bogus** by adding automatic `.RuleFor()` creation and population capabilities.\n* [**NaughtyStrings.Bogus**](https://github.com/SimonCropp/NaughtyStrings) ([`NuGet Package`](https://www.nuget.org/packages/NaughtyStrings.Bogus/)) by [@SimonCropp](https://github.com/SimonCropp) - Extends **Bogus** with list of naughty strings which have a high probability of causing issues when used as user-input data. Examples:\n    * `.SQLInjection()` - Strings which can cause a SQL injection if inputs are not sanitized.\n    * `.ScriptInjection()` - Strings which attempt to invoke a benign script injection; shows vulnerability to XSS.\n    * `.iOSVulnerabilities()` - Strings which crashed iMessage in various versions of iOS. \n    * `.KnownCVEsandVulnerabilities()` - Strings that test for known vulnerabilities.\n    * `.ServerCodeInjection()` - Strings which can cause user to run code on server as a privileged user.\n    * and more!\n* [**WaffleGenerator.Bogus**](https://github.com/SimonCropp/WaffleGenerator) ([`NuGet Package`](https://www.nuget.org/packages/WaffleGenerator.Bogus/)) by [@SimonCropp](https://github.com/SimonCropp) - The Waffle Generator produces of text which, on first glance, looks like real, ponderous, prose; replete with clich\u00e9s.\n* [**NodaTime.Bogus**](https://github.com/SimonCropp/NodaTime.Bogus) ([`NuGet Package`](https://www.nuget.org/packages/NodaTime.Bogus/)) by [@SimonCropp](https://github.com/SimonCropp) - Adds support for [NodaTime](https://nodatime.org/) to **Bogus**. \n* [**CountryData.Bogus**](https://github.com/SimonCropp/CountryData) ([`NuGet Package`](https://www.nuget.org/packages/CountryData.Bogus/)) by [@SimonCropp](https://github.com/SimonCropp) - Wrapper around [GeoNames Data](https://www.geonames.org/). Examples:\n    * `.Country().Name()` - Random country name.\n    * `.Country().CurrencyCode()` - Random currency code.\n    * `.Australia().Capital()` - Country capital.\n    * `.Country().Iceland().PostCode()` - Random country post code.\n* [**AustralianElectorates.Bogus**](https://github.com/pmcau/AustralianElectorates) ([`NuGet Package`](https://www.nuget.org/packages/AustralianElectorates.Bogus/)) by [@SimonCropp](https://github.com/SimonCropp) - Wrapper around Australian Electoral Commission (AEC) data (https://www.aec.gov.au/). Examples:\n    * `.AustralianElectorates().Electorate()` - Random electorate.\n    * `.AustralianElectorates().Name()` - Random electorate name.\n    * `.AustralianElectorates().CurrentMember()` - Random current electorate member for parliament.\n    * `.AustralianElectorates().CurrentMemberName()` - Random name of current a electorate member for parliament.\n    * `.AustralianElectorates().Member()` - Random electorate member for parliament.\n    * `.AustralianElectorates().MemberName()` - Random name of a electorate member for parliament.\n\n## Bogus Premium Extensions!\n<img src=\"https://raw.githubusercontent.com/bchavez/Bogus/master/Docs/logo_green.png\" align='left' height=\"42px\" width=\"42px\" style=\"padding-right: 15px\" /> **Bogus Premium** [[**Purchase Now!**](https://github.com/bchavez/Bogus/wiki/Bogus-Premium)] by [@bchavez](https://github.com/bchavez)<br/>You can help support the **Bogus** open source project by purchasing a [**Bogus Premium**](https://github.com/bchavez/Bogus/wiki/Bogus-Premium) license! With an active premium license you'll be supporting this cool open-source project. You'll also gain new superpowers that extended **Bogus** with new features and exclusive data sets! Check 'em out below!\n\n* **Premium:** [**Bogus.Tools.Analyzer**](https://github.com/bchavez/Bogus/wiki/Bogus-Premium) ([NuGet Package](https://www.nuget.org/packages/Bogus.Tools.Analyzer/)) - Save time using this handy Roslyn analyzer to generate and detect missing `.RuleFor()` rules at development & compile time! This tool is included with the [**Bogus Premium**](https://github.com/bchavez/Bogus/wiki/Bogus-Premium) license!\n  <img src=\"https://raw.githubusercontent.com/bchavez/Bogus/master/Docs/bogus_premium_tools_analyzer_demo.gif\" />\n* **Premium:** [**Bogus.Locations**](https://github.com/bchavez/Bogus/wiki/Bogus-Premium) ([NuGet Package](https://www.nuget.org/packages/Bogus.Locations/)) - A dataset that contains real geographical information for places and things. Create fake GPS points and paths. Helpful for creating geodesic data for location-based aware apps.\n  * **`Location`**\n    * `Altitude` - Generate a random altitude, in meters. Default max height is 8848m (Mount Everest). Heights are always positive.\n    * `AreaCircle` - Get a latitude and longitude within a specific radius in meters.\n    * `Depth` - Generate a random depth, in meters. Default max depth is -10994m (Mariana Trench). Depths are always negative.\n    * `Geohash` - Generates a random Geohash. [See](https://en.wikipedia.org/wiki/Geohash).\n* **Premium:** [**Bogus.Healthcare**](https://github.com/bchavez/Bogus/wiki/Bogus-Premium) ([NuGet Package](https://www.nuget.org/packages/Bogus.Healthcare/)) - A data set for the Healthcare industry. Generate fake medical records, injuries, diagnosis, drugs, dosages, human anatomy, and ICD-9 medical codes. Especially helpful in HIPAA regulated environments!\n  * **`Drugs`**\n    * `Administration` - Get how a drug should be administered. IE: oral, nasal, injection.\n    * `Dosage` - Get a drug dosage with MG units\n    * `DosageAmount` - Get a drug dosage.\n    * `DosageForm` - Get the form of a drug. IE: tablet, capsule, gel.\n    * `Ingredient` - Get a drug ingredient. IE: folic acid, magnesium hydroxide, ibuprofen.\n    * `Vitamin` - Get a random vitamin.\n  * **`Human`**\n    * `BloodType` - Get a random blood type. Ex: A+, OB\n    * `BodyPartExternal` - Get an external body part name. IE: Head, Arm, Leg.\n    * `BodyPartInternal` - Get an internal body part name. IE: Bladder, Lung, Heart.\n    * `BodyRegion` - Get a human body region. IE: Head and Neck, Thorax.\n    * `BodySystem` - Get a human body system. IE: Digestive, Nervous, Circulatory.\n    * `Diagnosis` - Shortcut to Icd9.DiagnosisLongDescription\".\n    * `InfectiousDisease` - Get an infectious disease. IE: Chickenpox, Polio, Zika Fever.\n    * `Pain` - Get a human pain. Ex: Chest pain, Headache, Toothache.\n    * `Plasma` - Get a random plasma type. Ex: O, A, B, AB\n    * `Procedure` - Shortcut to Icd9.ProcedureLongDescription.\n  * **`Icd9`**\n    * `DiagnosisCode` - Get a ICD9 diagnosis code.\n    * `DiagnosisEntry` - Get a medical diagnosis.\n    * `DiagnosisLongDescription` - Get a medical diagnosis description. IE: Meningitis due to coxsackie virus.\n    * `DiagnosisShortDescription` - Get a short description of a medical diagnosis.\n    * `ProcedureCode` - Get a ICD9 procedure code.\n    * `ProcedureEntry` - Get a medical procedure.\n    * `ProcedureLongDescription` - Get a medical procedure description.\n    * `ProcedureShortDescription` - Get a short description of a medical procedure.\n  * **`Icd10`**\n    * `DiagnosisCode` - Get a ICD10 diagnosis code.\n    * `DiagnosisEntry` - Get a medical diagnosis.\n    * `DiagnosisLongDescription` - Get a medical diagnosis description. IE: Meningitis due to coxsackie virus.\n    * `DiagnosisShortDescription` - Get a short description of a medical diagnosis.\n    * `ProcedureCode` - Get a ICD10 procedure code.\n    * `ProcedureEntry` - Get a medical procedure.\n    * `ProcedureLongDescription` - Get a medical procedure description.\n    * `ProcedureShortDescription` - Get a short description of a medical procedure.\n  * **`Medical`**\n    * `Hospital` - Get a random hospital.\n    * `HospitalCity` - Get a hospital city.\n    * `HospitalName` - Get a random hospital name. IE: UCLA Medical Center\n    * `HospitalState` - Get a hospital state.\n    * `HospitalStreetAddress` - Get a hospital street address.\n    * `HospitalZipCode` - Get a hospital ZipCode.\n    * `Phrase` - Get a random medical phrase.\n    * `Word` - Get a medical word.\n* **Premium:** [**Bogus.Hollywood**](https://github.com/bchavez/Bogus/wiki/Bogus-Premium) ([NuGet Package](https://www.nuget.org/packages/Bogus.Hollywood/))- A dataset for the Entertainment industry.\n  * **`Movies`**\n    * `ActorName` - Get a famous actor. IE: Keanu Reeves, Liam Neeson, and Natalie Portman.\n    * `MovieCollection` - Get a random movie collection. IE: Star Wars Collection, Indiana Jones Collection.\n    * `MovieOverview` - Get a random movie overview\n    * `MovieReleaseDate` - Get a random movie release date.\n    * `MovieTagline` - Get a random movie tagline.\n    * `MovieTitle` - Get a random movie title\n    * `Production` - Get a production company.\n  * **`Tv`**\n    * `ActorName` - Get a famous actor. IE: Keanu Reeves, Liam Neeson, and Natalie Portman.\n    * `Network` - Get a random TV network. IE: BBC, ABC, NBC, FOX.\n    * `Production` - Get a production company\n    * `Series` - Get a name of a TV series. IE: Rick and Morty, Silicon Valley, The Walking Dead\n* **Premium:** [**Bogus.Text**](https://github.com/bchavez/Bogus/wiki/Bogus-Premium) ([NuGet Package](https://www.nuget.org/packages/Bogus.Text/)) - A dataset that contains historical texts in the public domain. Create fake sentences from famous speeches, classic books, and law\n  * **`Literature`**\n    * `CommonSense` - Text from \"Common Sense, by Thomas Paine (1776)\"\n    * `JfkSpeech` - Text from \"JFK's Inaugural Address\"\n    * `Knowledge` - Text from \"A Treatise Concerning the Principles of Human knowledge, by George Berkeley (1710)\"\n\n---\n\n### Helper Methods\nThe features shown below come standard with the [**Bogus**](https://www.nuget.org/packages/Bogus/) NuGet package.\n\n#### Person\nIf you want to generate a `Person` with context relevant properties like\nan email that looks like it belongs to someone with the same first/last name,\ncreate a person!\n\n```csharp\n[Test]\npublic void Create_Context_Related_Person()\n{\n    var person = new Bogus.Person();\n\n    person.Dump();\n}\n\n/* OUTPUT:\n{\n  \"FirstName\": \"Lee\",\n  \"LastName\": \"Brown\",\n  \"UserName\": \"Lee_Brown3\",\n  \"Avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/ccinojasso1/128.jpg\",\n  \"Email\": \"Lee_Brown369@yahoo.com\",\n  \"DateOfBirth\": \"1984-01-16T21:31:27.87666\",\n  \"Address\": {\n    \"Street\": \"2552 Bernard Rapid\",\n    \"Suite\": \"Suite 199\",\n    \"City\": \"New Haskell side\",\n    \"ZipCode\": \"78425-0411\",\n    \"Geo\": {\n      \"Lat\": -35.8154,\n      \"Lng\": -140.2044\n    }\n  },\n  \"Phone\": \"1-500-790-8836 x5069\",\n  \"Website\": \"javier.biz\",\n  \"Company\": {\n    \"Name\": \"Kuphal and Sons\",\n    \"CatchPhrase\": \"Organic even-keeled monitoring\",\n    \"Bs\": \"open-source brand e-business\"\n  }\n} */\n```\n\n#### Replace\n\nReplace a formatted string with random numbers `#`, letters `?`, or `*` random number or letter:\n```csharp\n[Test]\npublic void Create_an_SSN()\n{\n    var ssn = new Bogus.Randomizer().Replace(\"###-##-####\");\n    ssn.Dump();\n\n    var code = new Randomizer().Replace(\"##? ??? ####\");\n    code.Dump();\n\n    var serial = new Randomizer().Replace(\"**-****\");\n    serial.Dump();\n}\n/* OUTPUT:\n\"618-19-3064\"\n\"39E SPC 0790\"\n\"L3-J9N5\"\n*/\n```\n\n#### Parse Handlebars\nYou can also parse strings in the following format:\n```csharp\n[Test]\npublic void Handlebar()\n{\n    var faker = new Faker();\n    var randomName = faker.Parse(\"{{name.lastName}}, {{name.firstName}} {{name.suffix}}\");\n    randomName.Dump();\n}\n\n/* OUTPUT:\n\"Roob, Michale PhD\"\n*/\n```\nThe name of a dataset is determined using `DataCategory` attribute or class name otherwise. (i.e `PhoneNumber` dataset in handlebars expression should be named as `phone_number`)\n\nYou can pass parameters to methods using braces:\n\n```csharp\n[Test]\npublic void HandlebarWithParameters()\n{\n    var faker = new Faker();\n    var randomName = faker.Parse(\"{{name.firstname(Female)}}, {{name.firstname(Male)}}\");\n    randomName.Dump();\n}\n\n/* OUTPUT:\n\"Lindsay, Jonathan\"\n*/\n```\n\n#### Implicit and Explicit Type Conversion\nYou can also use implicit type conversion to make your code look cleaner without having to explicitly call `Faker<T>.Generate()`.\n\n```csharp\nvar orderFaker = new Faker<Order>()\n                     .RuleFor(o => o.OrderId, f => f.IndexVariable++)\n                     .RuleFor(o => o.Item, f => f.Commerce.Product())\n                     .RuleFor(o => o.Quantity, f => f.Random.Number(1,3));\n\nOrder testOrder1 = orderFaker;\nOrder testOrder2 = orderFaker;\ntestOrder1.Dump();\ntestOrder2.Dump();\n\n/* OUTPUT:\n{\n  \"OrderId\": 0,\n  \"Item\": \"Computer\",\n  \"Quantity\": 2\n}\n{\n  \"OrderId\": 1,\n  \"Item\": \"Tuna\",\n  \"Quantity\": 3\n}\n*/\n\n//Explicit works too!\nvar anotherOrder = (Order)orderFaker;\n```\n\n#### Bulk Rules\nSometimes writing `.RuleFor(x => x.Prop, ...)` can get repetitive, use the `.Rules((f, t) => {...})` shortcut to specify rules in bulk as shown below:\n\n```csharp\npublic void create_rules_for_an_object_the_easy_way()\n{\n    var faker = new Faker<Order>()\n        .StrictMode(false)\n        .Rules((f, o) =>\n            {\n                o.Quantity = f.Random.Number(1, 4);\n                o.Item = f.Commerce.Product();\n                o.OrderId = 25;\n            });\n    Order o = faker.Generate();\n}\n```\n\n***Note***: When using the bulk `.Rules(...)` action, `StrictMode` cannot be set to `true` since individual properties of type `T` cannot be independently checked to ensure each property has a rule.\n\n\n### Using `Enumerable.Range()` and LINQ \nThe `Enumerable.Range()` and LINQ are a great supplement when creating data with **Bogus**. Here's how to generate a simple list of email addresses:\n\n```csharp\nvar faker = new Faker(\"en\");\n\nvar emailList = Enumerable.Range(1, 5)\n      .Select(_ => faker.Internet.Email())\n      .ToList();\n\n//OUTPUT:\nGustave83@hotmail.com    \nEvie33@gmail.com \nAbby_Wilkinson@yahoo.com \nCecilia.Hahn@yahoo.com   \nJasen.Waelchi85@gmail.com     \n```\n\nAdvanced Topics, Guidance, and Best Practices\n---------------------------------------------\n### Determinism\nDeterminism is a first class concept in **Bogus**. **Bogus** goes to great lengths so developers can generate the same sequence of data over multiple program executions. **Bogus** has two strategies of setting up deterministic behavior:\n\n1. **Global Seed** determinism through the `Randomizer.Seed` **global static** property.  \n    ***Pros:*** Easy to get deterministic data setup quickly.  \n    ***Cons:*** Code changes can impact other data values. Not so good for unit tests.\n\n2. **Local Seed** determinism through instance **properties** and **methods**. Specifically,  \n    * The `Faker<T>.UseSeed(int)` **method**.  \n    * The `.Random` **property** on the `Faker` facade and **DataSets**.\n  \n    ***Pros:*** Code changes can be isolated with minimal impact on determinism. Good for unit tests.    \n    ***Cons:*** Requires some forethought in design.\n\nWhen **Local Seed** determinism is used to set a seed value, the **global static** source of randomness is ignored. This has some interesting implications as described below.\n\n#### Using Global Seed determinism\nThe easiest way to get deterministic data values over multiple executions of a program is to set the `Randomizer.Seed` property as demonstrated below:\n\n```csharp\nRandomizer.Seed = new Random(1338);\nvar orderIds = 0;\nvar orderFaker = new Faker<Order>()\n    .RuleFor(o => o.OrderId, f => orderIds++)\n    .RuleFor(o => o.Item, f => f.Commerce.Product())\n    .RuleFor(o => o.Quantity, f => f.Random.Number(1, 5));\n\norderFaker.Generate(5).Dump();\n```\n|  OrderId  |  Item    |  Quantity  |\n|:---------:|:--------:|:----------:|\n|  0        |  Fish    |  3         |\n|  1        |  Chair   |  1         |\n|  2        |  Gloves  |  5         |\n|  3        |  Shirt   |  4         |\n|  4        |  Hat     |  4         |\n\n\nRe-running the code above with `1338` as a global static seed value will produce the same table of data over and over again.\n\nNext, add a new `Description` property to the `Order` class along with a new `.RuleFor(o => o.Description, ..)` rule and see the data changes:\n```csharp\nRandomizer.Seed = new Random(1338);\nvar orderIds = 0;\nvar orderFaker = new Faker<Order>()\n    .RuleFor(o => o.OrderId, f => orderIds++)\n    .RuleFor(o => o.Item, f => f.Commerce.Product())\n    .RuleFor(o => o.Description, f => f.Commerce.ProductAdjective()) //New Rule\n    .RuleFor(o => o.Quantity, f => f.Random.Number(1, 5));\n\norderFaker.Generate(5).Dump();\n```\n| OrderId | Item     | Description | Quantity |\n|---------|----------|-------------|----------|\n| 0       | Fish     | Fantastic   | :triangular_flag_on_post: 1 |\n| 1       | :triangular_flag_on_post: Keyboard | :triangular_flag_on_post: Gorgeous    | :triangular_flag_on_post: 5 |\n| 2       | :triangular_flag_on_post: Shirt    | :triangular_flag_on_post: Handcrafted | :triangular_flag_on_post: 3 |\n| 3       | :triangular_flag_on_post: Tuna     | :triangular_flag_on_post: Small       | :triangular_flag_on_post: 1 |\n| 4       | :triangular_flag_on_post: Table    | :triangular_flag_on_post: Awesome     | :triangular_flag_on_post: 3 |\n\nA couple of observations:\n* `Order 0: Item` value `Fish` remained the same.\n* `Order 0: Quantity` changed from `3` to `1`.\n* `Order 1: Item` has changed from a `Chair` to a `Keyboard`.\n\nIn fact, every data value with a :triangular_flag_on_post: icon has changed. This is due to the newly added property which has the effect of shifting the entire global static pseudo-random sequence off by +1. This rippling effect can be a problem if unit tests are expecting data values to remain the same. The following section below shows how we can improve the situation.\n\n#### Using Local Seed determinism\nMaking use of the `Faker<T>.UseSeed(int)` method can help limit the impact of POCO schema changes on deterministic data values that span across an entire run. Consider the following code that uses a seed value for each instance of a POCO object:\n```csharp\nvar orderIds = 0;\nvar orderFaker = new Faker<Order>()\n    .RuleFor(o => o.OrderId, f => orderIds++)\n    .RuleFor(o => o.Item, f => f.Commerce.Product())\n    .RuleFor(o => o.Quantity, f => f.Random.Number(1, 5));\n    \nOrder SeededOrder(int seed){\n   return orderFaker.UseSeed(seed).Generate();\n}\n\nvar orders = Enumerable.Range(1, 5)\n   .Select(SeededOrder)\n   .ToList();\n\norders.Dump();\n```\n|  OrderId  |  Item    |  Quantity  |\n|:---------:|:--------:|:----------:|\n| 0         | Bike     | 1        |\n| 1         | Cheese   | 3        |\n| 2         | Gloves   | 4        |\n| 3         | Bacon    | 5        |\n| 4         | Pants    | 2        |\n\n\nNext, adding the `Description` property to the `Order` class and examining the output:\n\n```csharp\nvar orderIds = 0;\nvar orderFaker = new Faker<Order>()\n    .RuleFor(o => o.OrderId, f => orderIds++)\n    .RuleFor(o => o.Item, f => f.Commerce.Product())\n    .RuleFor(o => o.Description, f => f.Commerce.ProductAdjective()) //New Rule\n    .RuleFor(o => o.Quantity, f => f.Random.Number(1, 5));\n    \nOrder SeededOrder(int seed){\n   return orderFaker.UseSeed(seed).Generate();\n}\n\nvar orders = Enumerable.Range(1,5)\n   .Select(SeededOrder)\n   .ToList();\n\norders.Dump();\n```\n\n| OrderId | Item   | Description | Quantity |\n|---------|--------|-------------|----------|\n| 0       | Bike   | Ergonomic   | :triangular_flag_on_post: 3 |\n| 1       | Cheese | Fantastic   | :triangular_flag_on_post: 1 |\n| 2       | Gloves | Handcrafted | :triangular_flag_on_post: 5 |\n| 3       | Bacon  | Tasty       | :triangular_flag_on_post: 3 |\n| 4       | Pants  | Gorgeous    | :triangular_flag_on_post: 2 |\n\n\nProgress! This time only the `Quantity` data values with the :triangular_flag_on_post: icon have changed. The `Item` column remained the same before and after the new addition of the `Description` property.\n\nWe can further prevent the `Quantity` data values from changing by moving the `RuleFor(o => o.Description,...)` rule line to the end of the `Faker<Order>` declaration as shown below:\n\n```csharp\nvar orderIds = 0;\nvar orderFaker = new Faker<Order>()\n    .RuleFor(o => o.OrderId, f => orderIds++)\n    .RuleFor(o => o.Item, f => f.Commerce.Product())\n    .RuleFor(o => o.Quantity, f => f.Random.Number(1, 5))\n    .RuleFor(o => o.Description, f => f.Commerce.ProductAdjective()); //New Rule\n    \nOrder MakeOrder(int seed){\n   return orderFaker.UseSeed(seed).Generate();\n}\n\nvar orders = Enumerable.Range(1,5)\n   .Select(MakeOrder)\n   .ToList();\n\norders.Dump();\n````\n| OrderId | Item   | Quantity | Description |\n|:---------:|:--------:|:----------:|:-------------:|\n| 0       | Bike   | 1        | Practical   |\n| 1       | Cheese | 3        | Rustic      |\n| 2       | Gloves | 4        | Refined     |\n| 3       | Bacon  | 5        | Awesome     |\n| 4       | Pants  | 2        | Gorgeous    |\n\nMuch success! :100: :tada: The `Item` and `Quantity` values remain unchanged! The new `Description` property is added to the POCO object without any impact to other deterministic data values.\n\nAs a best practice, to achieve maximum deterministic behavior and unit test robustness with **Bogus**:\n\n* :heavy_check_mark: Add new `RuleFor` rules last in `Faker<T>` declarations.  \n* :heavy_check_mark: Avoid changing existing rules.  \n* :heavy_check_mark: Always use `Faker<T>.UseSeed(int)` to avoid using the global static seed as a source for randomness.  \n* :heavy_check_mark: When possible assert that a value exists, not the literal value itself. In other words,\n  ```csharp\n  // Don't do this:\n  firstOrder.Item.Should().Be(\"Bike\");\n\n  // Instead, do this:\n  firstOrder.Item.Should().NotBeNullOrWhiteSpace();\n  ```\n\n-------\n\nThe `Faker` facade and individual **DataSets** can also be prepared to use **local seeds** as well. The following shows how to set up the `Faker` facade and **DataSets** to use local seeds:\n\n```csharp\nvar faker = new Faker(\"en\")\n                {\n                   Random = new Randomizer(1338)\n                };\nvar lorem = new Bogus.DataSets.Lorem(\"en\"){\n                   Random = new Randomizer(1338)\n                };\nfaker.Lorem.Word().Dump();\nlorem.Word().Dump();\n\n//OUTPUT:\nminus\nminus\n```\n\nThe `.Random` property can be set multiple times without any ill effects. \n\n#### Versioning can effect determinism\nUpdating to new versions of **Bogus** on NuGet can effect determinism too. For example, when **Bogus** updates locales from **faker.js** or issues bug fixes, sometimes deterministic sequences can change. Changes to deterministic outputs are usually highlighted in the [release notes](https://github.com/bchavez/Bogus/blob/master/HISTORY.md). Changes to deterministic outputs is also considered a breaking change. **Bogus** generally follows semantic versioning rules. For example:\n\n| Version | Description |\n|---------|-------------|\n| **Bogus** v25.0.**1** | Initial version.                                                                           |\n| **Bogus** v25.0.**2** | No change to deterministic outputs or breaking changes. Possible bug fixes & improvements. |\n| **Bogus** v**26**.0.1 | Deterministic outputs may have changed or may include other breaking changes.              |\n\nAs a general rule of thumb,\n\n* :heavy_check_mark: For maximum stability for unit tests, stay within the same major versions of **Bogus**.  \n* :heavy_check_mark: For those wanting to stay up to date, assert that a value exists, not a literal value itself. In other words,\n  ```csharp\n  // Don't do this:\n  firstOrder.Item.Should().Be(\"Bike\");\n\n  // Instead, do this:\n  firstOrder.Item.Should().NotBeNullOrWhiteSpace();\n  ```\n\n#### Deterministic Dates and Times\n\n**Bogus** can generate deterministic dates and times. However, generating deterministic dates and times requires the following:\n\n1. Setting up a [seed value](#determinism).\n1. Setting up a time reference for your Faker object instance.\n\nThe following code shows how to setup deterministic dates and times:\n\n```csharp\n// Faker[T]: Set a local seed and a time reference\nvar fakerT = new Faker<Order>()\n                 .UseSeed(1338)\n                 .UseDateTimeReference(DateTime.Parse(\"1/1/1980\"))\n                 .RuleFor(o => o.SoonValue,   f => f.Date.Soon())\n                 .RuleFor(o => o.RecentValue, f => f.Date.Recent());\nfakerT.Generate().Dump();\n//  { \"SoonValue\":   \"1980-01-01T17:33:05\",\n//    \"RecentValue\": \"1979-12-31T14:07:31\" }\n\n// Faker: Set a local seed and a time reference\nvar faker = new Faker\n   {\n      Random = new Randomizer(1338),\n      DateTimeReference = DateTime.Parse(\"1/1/1980\")\n   };\nfaker.Date.Soon();   // \"1980-01-01T17:33:05\"\nfaker.Date.Recent(); // \"1979-12-31T14:07:31\"\n```\nWith a time reference set and a [seed](#determinism), dates and times should be deterministic across multiple runs of a program.\n\n\nF# and VB.NET Examples\n----------------------\n#### The Fabulous F# Examples\n* Using the `Faker` facade with immutable **F#** record types:\n\n```fsharp\ntype Customer = { FirstName : string\n                  LastName : string\n                  Age : int\n                  Title : string }\n\n//The faker facade\nlet f = Faker();\n\nlet generator() = \n   { FirstName = f.Name.FirstName()\n     LastName  = f.Name.LastName()\n     Age       = f.Random.Number(18,60)\n     Title     = f.Name.JobTitle() }\n     \ngenerator() |> Dump |> ignore\n\n(* OUTPUT:\n  FirstName = \"Russell\"\n  LastName = \"Nader\"\n  Age = 34\n  Title = \"Senior Web Officer\"\n*)\n```\n\n* Using the `Faker<T>` class with immutable **F#** record types:\n\n```fsharp\ntype Customer = { FirstName : string\n                  LastName : string\n                  Age : int\n                  Title : string }\n\nlet customerFaker =\n    Bogus\n        .Faker<Customer>()\n        .CustomInstantiator(fun f ->\n             { FirstName = f.Name.FirstName()\n               LastName  = f.Name.LastName()\n               Age       = f.Random.Number(18,60)\n               Title     = f.Name.JobTitle() })\n\ncustomerFaker.Generate() |> Dump |> ignore\n\n(* OUTPUT:\n  FirstName = \"Sasha\"\n  LastName = \"Roberts\"\n  Age = 20;\n  Title = \"Internal Security Specialist\"\n*)\n```\n\n* Using the `Faker<T>` class with mutable classes in **F#**:\n\n```fsharp\nopen Bogus\ntype Customer() =\n  member val FirstName = \"\" with get, set\n  member val LastName = \"\" with get, set\n  member val Age = 0 with get, set\n  member val Title = \"\" with get, set\n\nlet faker = \n        Faker<Customer>()\n          //Make a rule for each property\n          .RuleFor( (fun c -> c.FirstName), fun (f:Faker) -> f.Name.FirstName() )\n          .RuleFor( (fun c -> c.LastName), fun (f:Faker) -> f.Name.LastName() )\n\n          //Or, alternatively, in bulk with .Rules()\n          .Rules( fun f c -> \n                    c.Age <- f.Random.Int(18,35) \n                    c.Title <- f.Name.JobTitle() )\n  \nfaker.Generate() |> Dump |> ignore\n\n(* OUTPUT:\n  FirstName: Jarrell\n  LastName: Tremblay\n  Age: 32\n  Title: Senior Web Designer\n*)\n```\n\n#### The Very Basic VB.NET Example\n```vb\nImports Bogus\n\nPublic Class Customer\n    Public Property FirstName() As String\n    Public Property LastName() As String\n    Public Property Age() As Integer\n    Public Property Title() As String\nEnd Class\n\nSub Main\n    Dim faker As New Faker(Of Customer)\n    \n    '-- Make a rule for each property\n    faker.RuleFor( Function(c) c.FirstName, Function(f) f.Name.FirstName) _\n         .RuleFor( Function(c) c.LastName, Function(f) f.Name.LastName) _\n         _\n         .Rules( Sub(f, c)   '-- Or, alternatively, in bulk with .Rules() \n                   c.Age = f.Random.Int(18,35) \n                   c.Title = f.Name.JobTitle()\n                 End Sub )\n            \n    faker.Generate.Dump\nEnd Sub\n\n' OUTPUT:\n' FirstName: Jeremie \n' LastName: Mills \n' Age: 32 \n' Title: Quality Supervisor \n```\n\n\n\nBuilding From Source\n--------\n\nThe following section is only useful for people looking to contribute to **Bogus** or make custom modifications to **Bogus**. This section includes information about building **Bogus** from source code and is not required to operate or run **Bogus** in **.NET** applications.\n\nThe minimum requirements to build **Bogus** from source code are as follows:\n* **Windows 11** or later.\n* [**Git for Windows**](https://git-scm.com/downloads) `v2.39.2` or later.\n* [**.NET Framework**](https://dotnet.microsoft.com/download/dotnet-framework) `v4.7.2`.\n* **.NET SDK**\n    * LTS [`SDK v8.0.100`](https://dotnet.microsoft.com/download/dotnet/8.0)\n    * LTS [`SDK v6.0.417`](https://dotnet.microsoft.com/download/dotnet/6.0)\n* Optional:\n    * Visual Studio 2022 or later - IDE with C# 10 support.\n\n#### Build Instructions\n* Download the source code.\n* Open command prompt and run `build.cmd`:\n    * `build restore` - restores all project references.\n    * `build compile` - the main dotnet build task.\n    * `build clean` - cleans sources and files.\n    * `build zip` - creates a nice zip file with debug and release binaries.\n    * `build pack` - builds **NuGet** packages.\n    * `build test` - runs all unit tests. \n    \nThe following folders will be created depending on the build task executed:\n * `\\__compile` - binary output folder for the compiler.\n * `\\__package` - output folder for zip and **NuGet** packages.\n * `\\__test` - test results folder.\n\n#### Build Environment Variables\n* `set FORCE_VERSION=1.2.3`  \n   If `FORCE_VERSION` environment variable is set with a semantic version number (eg: `x.y.z`), the build tasks will use the `FORCE_VERSION` to produce builds with the exact version number. Useful for testing out-of-band custom builds. However, it is not possible to reproduce exact binary equivalents of released **NuGet** packages because packages release on **NuGet** contain assemblies that are digitally signed with assembly signing enabled. The public does not have access to the signing key. \n\n#### Rebundling Locales\nRe-bundling the latest locale data from **faker.js** requires the following software installed:  \n\n* [**Volta 1.1.1**](https://volta.sh) or later:\n   * Installs [**NodeJS**](https://nodejs.org/) `v12.18.1` or higher.\n* [**gulp**](https://gulpjs.com/) `v4` or higher.\n\nSteps to re-bundle locale data from **faker.js**:\n1. `git clone https://github.com/bchavez/Bogus.git`\n1. `cd Bogus` \n1. `git submodule init`\n1. `git submodule update`\n1. Ensure **NodeJS** and `gulp` are properly installed.\n1. `cd Source\\Builder`\n1. `npm install` to install required dev dependencies.\n1. `npx gulp importLocales` to regenerate locales in `Source\\Bogus\\data`.\n1. Finally, run `build.cmd`.\n\n### License\n* [MIT License](https://github.com/bchavez/Bogus/blob/master/LICENSE)\n\n\nSponsors\n---------\nA special thank you to the companies that have sponsored and helped with the development of **Bogus** in big ways.\n\n| Date |   | Company |\n|------|---|-------|\n| **2024 - October** | <img src=\"https://raw.githubusercontent.com/bchavez/Bogus/master/Docs/aws.svg\" width=\"100\" /> | [**Amazon AWS .NET FOSS Fund**](https://github.com/aws/dotnet-foss?tab=readme-ov-file#funding-recipients)\n| **2022 - June** | <img src=\"https://raw.githubusercontent.com/bchavez/Bogus/master/Docs/github.svg\" width=\"100\" /> | [**GitHub**](https://github.blog/open-source/maintainers/thank-you-to-our-maintainers) |\n\n\nContributors\n---------\nCreated by [Brian Chavez](https://bchavez.bitarmory.com).\n\nA big thanks to GitHub and all contributors:\n\n* [Anton Georgiev](https://github.com/antongeorgiev)\n* [Martijn Laarman](https://github.com/Mpdreamz)\n* [Anrijs Vitolins](https://github.com/salixzs)\n* [Pi Lanningham](https://github.com/quantumplation)\n* [JvanderStad](https://github.com/JvanderStad)\n* [Giuseppe Dimauro](https://github.com/gdimauro)\n\n\n",
        "releases": [
            {
                "name": "Release v35.6.1 build 1448",
                "date": "2024-09-02T22:26:04Z"
            },
            {
                "name": "Release v35.6.0 build 1443",
                "date": "2024-07-19T22:25:13Z"
            },
            {
                "name": "Release v35.5.1 build 1436",
                "date": "2024-04-28T02:40:18Z"
            },
            {
                "name": "Release v35.5.0 build 1431",
                "date": "2024-03-09T20:10:34Z"
            },
            {
                "name": "Release v35.4.1 build 1410",
                "date": "2024-03-02T18:47:58Z"
            },
            {
                "name": "Release v35.4.0 build 1393",
                "date": "2024-01-14T19:25:14Z"
            },
            {
                "name": "Release v35.3.2 build 1366",
                "date": "2024-01-14T00:01:11Z"
            },
            {
                "name": "Release v35.3.1 build 1359",
                "date": "2024-01-13T06:44:57Z"
            },
            {
                "name": "Release v35.3.0 build 1350",
                "date": "2024-01-01T23:00:35Z"
            },
            {
                "name": "Release v35.2.0 build 1343",
                "date": "2023-12-26T20:47:38Z"
            },
            {
                "name": "Release v35.0.1 build 1300",
                "date": "2023-12-12T02:40:59Z"
            },
            {
                "name": "Release v34.0.2 build 1173",
                "date": "2022-03-27T20:03:07Z"
            },
            {
                "name": "Release v34.0.1 build 1150",
                "date": "2021-11-23T04:22:24Z"
            },
            {
                "name": "Release v33.1.1 build 1109",
                "date": "2021-08-29T17:22:11Z"
            },
            {
                "name": "Release v33.0.2 build 1079",
                "date": "2021-02-21T18:00:51Z"
            },
            {
                "name": "Release v33.0.1 build 1070",
                "date": "2021-02-07T18:46:33Z"
            },
            {
                "name": "Release v32.1.1 build 1061",
                "date": "2021-01-31T22:32:27Z"
            },
            {
                "name": "Release v32.0.2 build 1044",
                "date": "2020-12-12T18:58:15Z"
            },
            {
                "name": "Release v32.0.1 build 1034",
                "date": "2020-11-28T23:30:25Z"
            },
            {
                "name": "Release v31.0.3 build 1017",
                "date": "2020-10-04T04:46:58Z"
            },
            {
                "name": "Release v31.0.2 build 1015",
                "date": "2020-09-14T03:54:54Z"
            },
            {
                "name": "Release v31.0.1 build 1012",
                "date": "2020-09-14T02:28:29Z"
            },
            {
                "name": "Release v30.0.4 build 1000",
                "date": "2020-08-15T18:18:21Z"
            },
            {
                "name": "Release v30.0.3 build 993",
                "date": "2020-08-14T01:49:24Z"
            },
            {
                "name": "Release v30.0.2 build 988",
                "date": "2020-08-06T03:52:30Z"
            },
            {
                "name": "Release v30.0.1-beta-4 build 980",
                "date": "2020-07-24T03:36:56Z"
            },
            {
                "name": "Release v30.0.1-beta-3 build 968",
                "date": "2020-06-30T02:35:33Z"
            },
            {
                "name": "Release v30.0.1-beta-2 build 965",
                "date": "2020-06-21T05:25:09Z"
            },
            {
                "name": "Release v30.0.1-beta-1 build 957",
                "date": "2020-06-15T04:10:52Z"
            },
            {
                "name": "Release v29.0.2 build 945",
                "date": "2020-04-11T23:19:43Z"
            },
            {
                "name": "Release v29.0.1 build 935",
                "date": "2020-02-10T19:35:15Z"
            },
            {
                "name": "Release v28.4.4 build 902",
                "date": "2019-12-10T14:52:54Z"
            },
            {
                "name": "Release v28.4.3 build 897",
                "date": "2019-12-04T04:11:29Z"
            },
            {
                "name": "Release v28.4.2 build 894",
                "date": "2019-11-30T19:58:51Z"
            },
            {
                "name": "Release v28.4.1 build 886",
                "date": "2019-10-15T02:29:15Z"
            },
            {
                "name": "Release v28.3.2 build 871",
                "date": "2019-10-04T16:55:30Z"
            },
            {
                "name": "Release v28.3.1 build 865",
                "date": "2019-09-21T03:55:24Z"
            },
            {
                "name": "Release v28.2.1 build 859",
                "date": "2019-09-10T15:21:41Z"
            },
            {
                "name": "Release v28.1.1 build 856",
                "date": "2019-09-10T07:49:44Z"
            },
            {
                "name": "Release v28.0.3 build 845",
                "date": "2019-08-28T18:32:19Z"
            },
            {
                "name": "Release v28.0.2 build 822",
                "date": "2019-07-07T20:06:52Z"
            },
            {
                "name": "Release v28.0.1 build 814",
                "date": "2019-07-02T19:57:46Z"
            },
            {
                "name": "Release v27.0.1 build 764",
                "date": "2019-05-02T21:00:39Z"
            },
            {
                "name": "Release v26.0.2 build 742",
                "date": "2019-03-22T22:10:37Z"
            },
            {
                "name": "Release v26.0.1 build 736",
                "date": "2019-02-26T21:15:38Z"
            },
            {
                "name": "Release v25.0.4 build 703",
                "date": "2019-01-18T05:14:41Z"
            },
            {
                "name": "Release v25.0.3 build 697",
                "date": "2019-01-06T21:15:49Z"
            },
            {
                "name": "Release v25.0.2 build 689",
                "date": "2018-12-11T21:52:46Z"
            },
            {
                "name": "Release v25.0.1 build 683",
                "date": "2018-11-27T18:18:33Z"
            },
            {
                "name": "Release v24.3.1 build 676",
                "date": "2018-11-03T16:45:19Z"
            },
            {
                "name": "Release v24.3.0 build 663",
                "date": "2018-10-02T17:02:35Z"
            },
            {
                "name": "Release v24.2.0 build 653",
                "date": "2018-09-27T17:56:59Z"
            },
            {
                "name": "Release v24.1.0 build 650",
                "date": "2018-09-26T17:25:58Z"
            },
            {
                "name": "Release v24.0.0 build 646",
                "date": "2018-09-24T09:26:40Z"
            },
            {
                "name": "Release v23.0.3 build 633",
                "date": "2018-08-29T18:41:00Z"
            },
            {
                "name": "Release v23.0.2 build 628",
                "date": "2018-08-13T19:31:37Z"
            },
            {
                "name": "Release v22.3.2 build 617",
                "date": "2018-07-18T18:06:08Z"
            },
            {
                "name": "Release v22.3.1 build 600",
                "date": "2018-07-05T22:28:50Z"
            },
            {
                "name": "Release v22.2.1 build 584",
                "date": "2018-06-29T18:06:53Z"
            },
            {
                "name": "Release v22.1.4 build 579",
                "date": "2018-06-26T16:57:27Z"
            },
            {
                "name": "Release v22.1.3 build 564",
                "date": "2018-06-14T21:18:27Z"
            },
            {
                "name": "Release v22.1.2 build 553",
                "date": "2018-05-29T22:53:30Z"
            },
            {
                "name": "Release v22.1.1 build 549",
                "date": "2018-05-21T04:38:50Z"
            },
            {
                "name": "Release v22.0.9 build 536",
                "date": "2018-05-17T20:55:02Z"
            },
            {
                "name": "Release v22.0.8 build 525",
                "date": "2018-04-10T00:59:08Z"
            },
            {
                "name": "Release v22.0.7 build 515",
                "date": "2018-04-01T19:30:31Z"
            },
            {
                "name": "Release v22.0.6 build 509",
                "date": "2018-03-29T20:15:21Z"
            },
            {
                "name": "Release v22.0.5 build 498",
                "date": "2018-03-03T00:50:03Z"
            },
            {
                "name": "Release v22.0.3 build 491",
                "date": "2018-02-27T22:13:48Z"
            },
            {
                "name": "Release v22.0.2 build 464",
                "date": "2018-01-06T05:42:04Z"
            },
            {
                "name": "Release v22.0.1 build 459",
                "date": "2017-12-23T19:26:01Z"
            },
            {
                "name": "Release v21.0.5 build 450",
                "date": "2017-12-16T16:51:41Z"
            },
            {
                "name": "Release v21.0.4 build 444",
                "date": "2017-12-13T19:26:23Z"
            },
            {
                "name": "Release v21.0.2 build 433",
                "date": "2017-12-08T06:54:22Z"
            },
            {
                "name": "Release v20.0.2 build 405",
                "date": "2017-11-06T18:46:42Z"
            },
            {
                "name": "Release v20.0.1 build 396",
                "date": "2017-11-05T06:03:08Z"
            },
            {
                "name": "Release v19.0.2 build 384",
                "date": "2017-11-01T13:10:23Z"
            },
            {
                "name": "Release v19.0.1 build 379",
                "date": "2017-10-27T06:14:01Z"
            },
            {
                "name": "Release v18.0.2 build 359",
                "date": "2017-09-14T20:56:44Z"
            },
            {
                "name": "Release v18.0.1 build 356",
                "date": "2017-09-13T23:12:13Z"
            },
            {
                "name": "Release v17.0.1 build 345",
                "date": "2017-08-25T04:51:50Z"
            },
            {
                "name": "Release v16.0.3 build 341",
                "date": "2017-08-24T21:55:46Z"
            },
            {
                "name": "Release v16.0.2 build 338",
                "date": "2017-08-23T15:33:50Z"
            },
            {
                "name": "Release v16.0.1 build 333",
                "date": "2017-08-23T03:07:11Z"
            },
            {
                "name": "Release v15.0.7 build 330",
                "date": "2017-08-21T04:45:19Z"
            },
            {
                "name": "Release v15.0.6 build 326",
                "date": "2017-08-03T04:03:46Z"
            },
            {
                "name": "Release v15.0.5 build 321",
                "date": "2017-07-28T20:32:28Z"
            },
            {
                "name": "Release v15.0.3 build 292",
                "date": "2017-05-07T05:56:50Z"
            },
            {
                "name": "Release v15.0.1 build 276",
                "date": "2017-04-11T17:41:44Z"
            },
            {
                "name": "Release v12.0.1 build 255",
                "date": "2017-03-27T17:41:09Z"
            },
            {
                "name": "Release v11.0.5 build 247",
                "date": "2017-03-20T21:20:16Z"
            },
            {
                "name": "Release v11.0.4 build 241",
                "date": "2017-03-15T05:47:08Z"
            },
            {
                "name": "Release v11.0.3 build 239",
                "date": "2017-03-13T23:02:31Z"
            },
            {
                "name": "Release v11.0.2 build 237",
                "date": "2017-02-23T20:56:36Z"
            },
            {
                "name": "Release v11.0.1 build 218",
                "date": "2017-02-21T22:17:48Z"
            },
            {
                "name": "Release v10.0.1 build 207",
                "date": "2017-02-18T20:09:45Z"
            },
            {
                "name": "Release v9.0.2 build 195",
                "date": "2017-01-19T23:25:01Z"
            },
            {
                "name": "Release v9.0.1 build 193",
                "date": "2017-01-18T23:29:19Z"
            },
            {
                "name": "Release v8.0.4 build 189",
                "date": "2017-01-17T04:05:53Z"
            },
            {
                "name": "Release v8.0.3 build 185",
                "date": "2016-12-20T19:21:11Z"
            },
            {
                "name": "Release v8.0.2 build 183",
                "date": "2016-12-07T19:38:07Z"
            },
            {
                "name": "Release v8.0.1 build 179",
                "date": "2016-11-25T18:44:08Z"
            },
            {
                "name": "Release v8.0.1-beta-1 build 174",
                "date": "2016-10-22T23:04:28Z"
            },
            {
                "name": "Release v7.1.7 build 169",
                "date": "2016-10-11T21:09:41Z"
            },
            {
                "name": "Release v7.1.6 build 150",
                "date": "2016-08-08T01:17:01Z"
            },
            {
                "name": "Release v7.1.5 build 148",
                "date": "2016-07-27T20:29:49Z"
            },
            {
                "name": "Release v7.1.4 build 142",
                "date": "2016-07-07T05:06:40Z"
            },
            {
                "name": "Release v7.1.3 build 138",
                "date": "2016-06-28T06:38:52Z"
            },
            {
                "name": "Release v7.1.3-beta-1 build 128",
                "date": "2016-05-20T21:08:01Z"
            },
            {
                "name": "Release v7.1.2-beta-1 build 123",
                "date": "2016-05-16T17:53:32Z"
            },
            {
                "name": "Release v7.1.1-beta-1 build 121",
                "date": "2016-05-15T20:09:02Z"
            },
            {
                "name": "Release v6.1.1-beta-1 build 108",
                "date": "2016-03-29T23:58:05Z"
            },
            {
                "name": "Release v5.1.1-beta-3 build 104",
                "date": "2016-03-23T21:14:29Z"
            },
            {
                "name": "Release v5.1.1-beta-2 build 102",
                "date": "2016-03-22T16:58:05Z"
            },
            {
                "name": "Release v5.1.1-beta-1 build 98",
                "date": "2016-03-21T22:50:44Z"
            },
            {
                "name": "Release v5.0.1-beta-2 build 89",
                "date": "2016-02-25T19:41:10Z"
            },
            {
                "name": "Release v4.0.1-beta-1 build 79",
                "date": "2016-02-16T01:34:32Z"
            },
            {
                "name": "Release v3.0.6-beta-1 build 74",
                "date": "2016-01-21T22:30:10Z"
            },
            {
                "name": "Release v3.0.5-beta-4 build 71",
                "date": "2016-01-20T02:06:29Z"
            },
            {
                "name": "Release v3.0.5-beta-3 build 69",
                "date": "2016-01-18T18:59:54Z"
            },
            {
                "name": "Release v3.0.5-beta-2 build 66",
                "date": "2016-01-12T07:53:42Z"
            },
            {
                "name": "Release v3.0.4 build 52",
                "date": "2015-12-10T20:04:25Z"
            },
            {
                "name": "Release v3.0.3 build 48",
                "date": "2015-12-09T22:36:36Z"
            },
            {
                "name": "Release v3.0.2 build 39",
                "date": "2015-11-24T22:52:03Z"
            },
            {
                "name": "Release v3.0.1 build 15",
                "date": "2015-10-22T19:32:10Z"
            }
        ]
    }
}