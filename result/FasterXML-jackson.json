{
    "https://api.github.com/repos/FasterXML/jackson": {
        "forks": 1194,
        "watchers": 9223,
        "stars": 9223,
        "languages": {},
        "commits": [
            "2024-12-11T22:49:07Z",
            "2024-12-11T07:28:38Z",
            "2024-11-02T18:31:05Z",
            "2024-07-06T09:49:40Z",
            "2024-05-17T10:14:51Z",
            "2024-05-17T10:05:55Z",
            "2024-03-26T03:28:46Z",
            "2024-02-20T04:15:04Z",
            "2024-01-28T02:19:18Z",
            "2024-01-28T02:14:49Z",
            "2023-12-20T18:32:27Z",
            "2023-12-18T02:45:55Z",
            "2023-12-18T02:40:24Z",
            "2023-12-12T04:06:00Z",
            "2023-12-12T03:47:33Z",
            "2023-12-10T04:52:38Z",
            "2023-12-09T15:06:59Z",
            "2023-12-09T14:53:24Z",
            "2023-12-09T14:51:21Z",
            "2023-12-09T14:50:13Z",
            "2023-12-09T14:37:22Z",
            "2023-10-12T14:38:52Z",
            "2023-10-12T14:37:32Z",
            "2023-09-21T09:02:40Z",
            "2023-07-31T14:48:33Z",
            "2023-07-18T02:11:45Z",
            "2023-07-18T02:07:07Z",
            "2023-01-12T03:14:24Z",
            "2022-11-07T23:31:37Z",
            "2023-01-05T21:23:22Z"
        ],
        "creation_date": "2011-10-19T05:28:40Z",
        "contributors": 30,
        "topics": [
            "hacktoberfest",
            "jackson",
            "java-json",
            "java-json-library"
        ],
        "subscribers": 343,
        "readme": "<a href=\"CONTRIBUTING.md\" alt=\"Hacktoberfest\"><img src=\"https://badgen.net/badge/hacktoberfest/friendly/pink\" /></a>\n [![Open Source](https://badges.frapsoft.com/os/v3/open-source.svg?v=103)](https://opensource.org/)\n\n# Jackson Project Home @github\n\nThis is the home page of the Jackson Project.\n\n## What is New?\n\n* Sep 26, 2024: Jackson 2.18(.0) (latest stable major) released\n* Mar 12, 2024: Jackson 2.17 released\n* Feb 19, 2024: Another OSTIF/AdaLogics Security Audit -- on jackson-dataformat-xxx's and jackson-datatype-xxx's -- released: https://ostif.org/dataformatsdatatypes-audit-complete/\n* Dec 17, 2023: contributing/[Jackson Coding Style Guide](contribution/jackson-coding-style-guide.md)\n* Nov 15, 2023: Jackson 2.16 released\n* Apr 23, 2023: Jackson 2.15 released\n* Nov 5, 2022: Jackson 2.14 released\n* Nov 2, 2022: AdaLogics Security Audit for Jackson released -- see Document/Reports\n* Sep 30, 2021: Jackson 2.13 released\n* Oct 1, 2020: Jackson participates in [Hacktoberfest2020](https://hacktoberfest.digitalocean.com/) and we have a [Jackson/Hacktoberfest](https://github.com/FasterXML/Hacktoberfest2020) repo too!\n* Oct 9, 2020: Added [Contributing](CONTRIBUTING.md)\n\n(note: for up-to-date release info, see [Jackson Releases](../../wiki/Jackson-Releases))\n\n## What is Jackson?\n\nJackson has been known as \"the Java JSON library\"\nor \"the best JSON parser for Java\". Or simply as \"JSON for Java\".\n\nMore than that, Jackson is a suite of data-processing tools for Java (and the JVM platform),\nincluding the flagship streaming [JSON](https://en.wikipedia.org/wiki/JSON) parser / generator library,\nmatching data-binding library (POJOs to and from JSON)\nand additional data format modules to process data encoded in\n[Avro](https://github.com/FasterXML/jackson-dataformats-binary/blob/master/avro),\n[BSON](https://github.com/michel-kraemer/bson4jackson),\n[CBOR](https://github.com/FasterXML/jackson-dataformats-binary/blob/master/cbor),\n[CSV](https://github.com/FasterXML/jackson-dataformats-text/blob/master/csv),\n[Smile](https://github.com/FasterXML/jackson-dataformats-binary/tree/master/smile),\n[(Java) Properties](https://github.com/FasterXML/jackson-dataformats-text/blob/master/properties),\n[Protobuf](https://github.com/FasterXML/jackson-dataformats-binary/tree/master/protobuf),\n[TOML](https://github.com/FasterXML/jackson-dataformats-text/blob/2.13/toml),\n[XML](https://github.com/FasterXML/jackson-dataformat-xml)\nor [YAML](https://github.com/FasterXML/jackson-dataformats-text/blob/master/yaml);\nand even the large set of data format modules to support data types of widely used\ndata types such as\n[Guava](../../../jackson-datatypes-collections),\n[Joda](../../../jackson-datatype-joda),\n[PCollections](../../../jackson-datatypes-collections)\nand many, many more (see below).\n\nWhile the actual core components live under their own projects -- including the three core packages\n([streaming](../../../jackson-core), [databind](../../../jackson-databind), [annotations](../../../jackson-annotations));\ndata format libraries; data type libraries; [JAX-RS provider](../../../jackson-jaxrs-providers);\nand a miscellaneous set of other extension modules -- this project act as the central hub\nfor linking all the pieces together.\n\nA good companion to this README is the [Jackson Project FAQ](../../wiki/FAQ).\n\n## Actively developed versions\n\nJackson suite has two major versions: 1.x is deprecated and no versions are released;\n2.x is the actively developed version.\nThese two major versions use different Java packages and Maven artifact ids, so they are not mutually compatible, but can peacefully co-exist: a project can depend on both Jackson 1.x and 2.x, without conflicts.\nThis is by design and was chosen as the strategy to allow smoother migration from 1.x to 2.x.\n\nThe latest stable versions from these branches are:\n\n* [2.18.1](../../wiki/Jackson-Release-2.18.1), released on 28-Oct-2024\n    * [2.17.3](../../wiki/Jackson-Release-2.17.3) is the latest patch from previous stable branch\n* [1.9.13](../../wiki/JacksonRelease1.9), released 14-Jul-2013\n\nRecommended way to use Jackson is through Maven repositories; releases are made to Central Maven Repository (CMR).\nIndividual projects' wiki pages sometimes also contain direct download links, pointing to CMR.\n\nRelease notes for 2.x releases are found from [Jackson Releases](../../wiki/Jackson-Releases) page.\n\n## Active Jackson projects\n\nMost projects listed below are lead by Jackson development team; but some by\nother at-large Jackson community members.\nWe try to keep versioning of modules compatible to reduce confusion regarding which versions work together.\n\n### Core modules\n\nCore modules are the foundation on which extensions (modules) build upon.\nThere are 3 such modules currently (as of Jackson 2.x):\n\n* [Streaming](../../../jackson-core) ([docs](../../../jackson-core/wiki)) (\"jackson-core\") defines low-level streaming API, and includes JSON-specific implementations\n* [Annotations](../../../jackson-annotations) ([docs](../../../jackson-annotations/wiki)) (\"jackson-annotations\") contains standard Jackson annotations\n* [Databind](../../../jackson-databind) ([docs](../../../jackson-databind/wiki)) (\"jackson-databind\") implements data-binding (and object serialization) support on `streaming` package; it depends both on `streaming` and `annotations` packages\n\n### Third-party datatype modules\n\nThese extensions are plug-in Jackson `Module`s (registered with `ObjectMapper.registerModule()`),\nand add support for datatypes of various commonly used Java libraries, by adding\nserializers and deserializers so that Jackson `databind` package (`ObjectMapper` / `ObjectReader` / `ObjectWriter`) can read and write these types.\n\nDatatype modules directly maintained by Jackson team are under the following Github repositories:\n\n* Standard [Collections](../../../jackson-datatypes-collections) datatype modules:\n    * [jackson-datatype-eclipse-collections](../../../jackson-datatypes-collections/tree/master/eclipse-collections): support for [Eclipse Collections](https://www.eclipse.org/collections/) (NEW in Jackson 2.10!)\n    * [jackson-datatype-guava](../../../jackson-datatypes-collections/tree/master/guava): support for many of [Guava](http://code.google.com/p/guava-libraries/) datatypes\n    * [jackson-datatype-hppc](../../../jackson-datatypes-collections/tree/master/hppc): support for [High-Performance Primitive Containers](http://labs.carrotsearch.com/hppc.html) containers\n    * [jackson-datatype-pcollections](../../../jackson-datatypes-collections/tree/master/pcollections): support for [PCollections](http://pcollections.org/) datatypes (since Jackson 2.7)\n* [Hibernate](../../../jackson-datatype-hibernate): support for Hibernate features (lazy-loading, proxies)\n* [Java 8 Modules](../../../jackson-modules-java8): support or JDK 8 features and datatypes through 3 separate modules\n    * `jackson-module-parameter-names`: Module that adds support for using a new JDK8 feature, ability to access names of constructor and method parameters, to allow omitting `@JsonProperty`.\n    * `jackson-datatype-jsr310`: support for \"Java 8 Dates\" (ones added in JDK 8)\n        * Also, for pre-Java8 users can use one of alternate pre-Java8 backports:\n            * [joschi/jackson-datatype-threetenbp](https://github.com/joschi/jackson-datatype-threetenbp)\n            * [lldata/jackson-datatype-threetenbp](https://github.com/lldata/jackson-datatype-threetenbp)\n    * `jackson-datatype-jdk8`: support for JDK 8 data types other than date/time types, including `Optional`\n* Joda datatypes:\n    * [jackson-datatype-joda](../../../jackson-datatype-joda): support for types of [Joda-Time](https://www.joda.org/joda-time/) date/time library datatypes\n    * [jackson-datatype-joda-money](../../../jackson-datatypes-misc/tree/master/joda-money): support types of [Joda-Money](https://www.joda.org/joda-money/) datatypes (`Money`, `CurrencyUnit`)\n* JSON-P (\"json processing\"): two datatype modules for \"old\" (`javax.json`) and \"new\" (`jakarta.json`):\n    * [jackson-datatype-jakarta-jsonp](../../../jackson-datatypes-misc/tree/master/jakarta-jsonp): support for \"new\" JSON-P types in `jakarta.json` (*added in Jackson 2.12.2*)\n    * [jackson-datatype-jsr353](../../../jackson-datatypes-misc/tree/master/jsr-353): support for \"old\" JSON-P types in `javax.json`\n* [jackson-datatype-json-org](../../../jackson-datatypes-misc/tree/master/json-org): support for [org.json](https://github.com/stleary/JSON-java) library types like `JSONObject`, `JSONArray`\n\nIn addition, we are aware of additional modules that are not directly maintained by core Jackson team:\n\n* [jackson-datatype-bolts](https://github.com/v1ctor/jackson-datatype-bolts) support for reading/writing types defined by [Yandex Bolts](https://bitbucket.org/stepancheg/bolts/wiki/Home) collection types (Functional Programming inspired immutable collections)\n* [jackson-datatype-commons-lang3](https://github.com/bramp/jackson-datatype-commons-lang3) for types of [Apache Commons Lang v3](https://commons.apache.org/proper/commons-lang/)\n* [jackson-datatype-money](https://github.com/zalando/jackson-datatype-money) for \"Java Money\", see [javax.money](http://javamoney.github.io/api.html)\n* [vavr-jackson](https://github.com/vavr-io/vavr-jackson) for [VAVR](https://github.com/vavr-io/vavr) support (Feature-rich & self-contained functional programming in Java\u2122 8 and above)\n* [jackson-datatype-json-lib](https://github.com/swquinn/jackson-datatype-json-lib) for supporting types defined by \"net.sf.json\" library (aka \"json-lib\")\n* [jackson-datatype-jts](https://github.com/bedatadriven/jackson-datatype-jts) (JTS Geometry) for [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) support\n* [jackson-lombok](https://github.com/xebia/jackson-lombok) for better support of [Lombok](http://projectlombok.org/) classes\n* [jackson-datatype-mongo](https://github.com/commercehub-oss/jackson-datatype-mongo) for MongoDB types\n    * NOTE: there are a few alternatives to handling MongoDB datatypes\n* [jackson-module-objectify](https://github.com/tburch/jackson-module-objectify) for datatypes of [Objectify](https://github.com/objectify/objectify)\n* [jackson-datatype-protobuf](https://github.com/HubSpot/jackson-datatype-protobuf) for handling datatypes defined by the standard Java protobuf library, developed by [HubSpot](http://www.hubspot.com/)\n    * NOTE! This is different from `jackson-dataformat-protobuf` which adds support for encoding/decoding protobuf content but which does NOT depend on standard Java protobuf library\n* [TinyTypes](https://github.com/caligin/tinytypes) includes Jackson module (group id `com.github.caligin.tinytypes`, artifact `tinytypes-jackson`)\n* [jackson-datatype-vertx](https://github.com/Crunc/jackson-datatype-vertx) for reading/writing [Vert.x](http://vertx.io/) `org.vertx.java.core.json.JsonObject` objects (repackaged `org.json` node types)\n\n### Providers for JAX-RS\n\n[Jackson JAX-RS Providers](../../../jackson-jaxrs-providers) has handlers to add dataformat\nsupport for JAX-RS implementations (like Jersey, RESTeasy, CXF).\nProviders implement `MessageBodyReader` and `MessageBodyWriter`.\nSupported formats currently include `JSON`, `Smile`, `XML`, `YAML` and `CBOR`.\n\n### Data format modules\n\nData format modules offer support for data formats other than JSON.\nMost of them simply implement `streaming` API abstractions, so that databinding component can be used as is; some offer (and few require) additional `databind` level functionality for handling things like schemas.\n\nCurrently following data format modules are fully usable and supported (version number in parenthesis, if included, is the\nfirst Jackson 2.x version to include module; if missing, included from 2.0)\n\n* [Avro](../../../jackson-dataformats-binary/tree/master/avro): supports [Avro](http://en.wikipedia.org/wiki/Apache_Avro) data format, with `streaming` implementation plus additional `databind`-level support for Avro Schemas\n* [CBOR](../../../jackson-dataformats-binary/tree/master/cbor): supports [CBOR](http://tools.ietf.org/search/rfc7049) data format (a binary JSON variant).\n* [CSV](../../../jackson-dataformats-text/blob/master/csv): supports [Comma-separated values](http://en.wikipedia.org/wiki/Comma-separated_values) format -- `streaming` api, with optional convenience `databind` additions\n* [Ion](../../../jackson-dataformats-binary/tree/master/ion) (2.9): support for [Amazon Ion](https://amznlabs.github.io/ion-docs/) binary data format (similar to CBOR, Smile, i.e. binary JSON - like)\n* [(Java) Properties](../../../jackson-dataformats-text/blob/master/properties) (2.8): creating nested structure out of implied notation (dotted by default, configurable), flattening similarly on serialization\n* [Protobuf](../../../jackson-dataformats-binary/tree/master/protobuf) (2.6): supported similar to `Avro`\n* [Smile](../../../jackson-dataformats-binary/tree/master/smile): supports [Smile (binary JSON)](https://github.com/FasterXML/smile-format-specification) -- 100% API/logical model compatible via `streaming` API, no changes for `databind`\n* [TOML](../../../jackson-dataformats-text/blob/2.13/toml): (NEW in upcoming 2.13) supports [TOML](http://en.wikipedia.org/wiki/TOML), supported with both `streaming` and `databind` implementations\n* [XML](../../../jackson-dataformat-xml): supports XML; provides both `streaming` and `databind` implementations. Similar to JAXB' \"code-first\" mode (no support for \"XML Schema first\", but can use JAXB beans)\n* [YAML](../../../jackson-dataformats-text/blob/master/yaml): supports [YAML](http://en.wikipedia.org/wiki/Yaml), which being similar to JSON is fully supported with simple `streaming` implementation\n\nThere are also other data format modules, provided by developers outside Jackson core team:\n\n* [BEncode](https://github.com/zsoltm/jackson-dataformat-bencode): support for reading/writing [BEncode](https://en.wikipedia.org/wiki/Bencode) (BitTorrent format) encoded data\n* [bson4jackson](https://github.com/michel-kraemer/bson4jackson): adds support for [BSON](http://en.wikipedia.org/wiki/BSON) data format (by Mongo project).\n    * Implemented as full streaming implementation, which allows full access (streaming, data-binding, tree-model)\n    * Also see [MongoJack] library below; while not a dataformat module, it allows access to BSON data as well.\n* [EXIficient](https://github.com/EXIficient/exificient-for-json) supports [Efficient XML Interchange](https://en.wikipedia.org/wiki/Efficient_XML_Interchange)\n* [jackson-dataformat-msgpack](https://github.com/msgpack/msgpack-java/tree/develop/msgpack-jackson) adds support [MessagePack](http://en.wikipedia.org/wiki/MessagePack) (aka `MsgPack`) format\n    * Implemented as full streaming implementation, which allows full access (streaming, data-binding, tree-model)\n* [HOCON](https://github.com/jclawson/jackson-dataformat-hocon): experimental, partial implementation to support [HOCON](https://github.com/typesafehub/config) format -- work in progress\n* [Rison](https://github.com/Hronom/jackson-dataformat-rison): Jackson backend to support [Rison](https://github.com/Nanonid/rison)\n\n### JVM Language modules\n\n* [Kotlin](https://github.com/FasterXML/jackson-module-kotlin) to handle native types of [Kotlin](http://kotlinlang.org/)\n* [Scala](https://github.com/FasterXML/jackson-module-scala) to handle native Scala types (including but not limited to Scala collection/map types, case classes)\n    * Currently (October 2022) Scala 2.11, 2.12, 2.13 and 3 are supported (2.9 was supported up to Jackson 2.3 and 2.10 up to Jackson 2.11)\n\n### Support for Schemas\n\nJackson annotations define intended properties and expected handling for POJOs, and in addition to Jackson itself\nusing this for reading/writing JSON and other formats, it also allows generation of external schemas.\nSome of this functionality is included in above-mentioned data-format extensions; but there are also\nmany stand-alone Schema tools, such as:\n\n#### JSON Schema\n\n* Build tool plug-ins\n    * [Ant Task for JSON Schema Generation](https://github.com/xdarklight/jackson-jsonschema-ant-task): Generate JSON Schemas from your Java classes with Apache Ant using the Jackson library and extension modules.\n* Stand-alone JSON Schema generators\n    * [Java JSON Schema Generator](https://github.com/victools/jsonschema-generator) (supports json schema draft v7!)\n    * [Jackson jsonSchema Generator (Scala)](https://github.com/mbknor/mbknor-jackson-jsonSchema)\n    * [JSON Schema generator module](../../../jackson-module-jsonSchema): programmatically generate JSON Schema, based on Jackson POJO introspection, including annotations (ONLY SUPPORTS json schema v3!!!)\n* Code generators based on JSON Schema\n    * [jsonschema2pojo](https://github.com/joelittlejohn/jsonschema2pojo) - Generate Java types from JSON or JSON Schema\n* JSON Schema validators\n    * [Java JSON Schema validator](https://github.com/java-json-tools/json-schema-validator)\n\n#### Other schema languages\n\n* [Ember Schema Generator](../../../../marcus-nl/ember-schema-generator): Generate schemas for [Ember.js](https://github.com/emberjs/ember.js)\n\n### Other modules, stable\n\nOther fully usable modules by FasterXML team include:\n\n* [Base](../../../jackson-modules-base) modules:\n    * [Afterburner](../../../jackson-modules-base/tree/master/afterburner): speed up databinding by 30-40% with bytecode generation to replace use of Reflection for field access, method/constructor calls\n    * [Guice](../../../jackson-modules-base/tree/master/guice): extension that allows injection values from Guice injectors (and basic Guice annotations), instead of standard `@JacksonInject` (or in addition to)\n    * [JAXB Annotations](../../../jackson-modules-base/tree/master/jaxb): allow use of `JAXB` annotations as an alternative (in addition to or instead of) standard Jackson annotations\n    * [Mr Bean](../../../jackson-modules-base/tree/master/mrbean): \"type materialization\" -- let Mr Bean generate implementation classes on-the-fly (NO source code generation), to avoid monkey code\n    * [OSGi](../../../jackson-modules-base/tree/master/osgi): allows injection of values from OSGi registry, via standard Jackson `@JacksonInject` annotation\n    * [Paranamer](../../../jackson-modules-base/tree/master/paranamer): tiny extension for automatically figuring out creator (constructor, factory method) parameter names, to avoid having to specify `@JsonProperty`.\n\n### Jackson jr\n\nWhile [Jackson databind](../../../jackson-databind) is a good choice for general-purpose data-binding, its\nfootprint and startup overhead may be problematic in some domains, such as mobile phones; and especially\nfor light usage (couple of reads or writes). In addition, some developers find full Jackson API overwhelming.\n\nFor all these reasons, we decided to create a much simpler, smaller library, which supports a subset of\nfunctionality, called [Jackson jr](../../../jackson-jr).\nIt builds on [Jackson Streaming API](../../../jackson-core), but does not depend on databind. As a result\nits size (both jar, and runtime memory usage) is considerably smaller; and its API is very compact.\n\n### Third-party non-module libraries based on Jackson\n\n#### Jackson helper libraries\n\n* [Jackson Ant path filter](https://github.com/Antibrumm/jackson-antpathfilter) adds powerful filtering of properties to serialize, using Ant Path notation for hierarchic filtering\n\n#### Support for datatypes\n\n* [MongoJack](http://mongojack.org/) supports efficient handling of [BSON](http://en.wikipedia.org/wiki/BSON) encoded data store in [MongoDB](http://en.wikipedia.org/wiki/MongoDB).\n\n#### Other things related to or inspired by Jackson \n\n* [Jackson-js](https://github.com/pichillilorenzo/jackson-js) is a Javascript/Node object serialization/deserialization library with API inspired by Jackson\n* [Pyckson](https://github.com/antidot/Pyckson) is a Python library that aims for same goals as Java Jackson, such as Convention over Configuration \n* [Rackson](https://github.com/griffindy/rackson) is a Ruby library that offers Jackson-like functionality on Ruby platform\n\n## Contributing\n\nIf you would like to help with Jackson project, please check out [Contributing](CONTRIBUTING.md).\n\nYou may also want to check out:\n\n* [Jackson Coding Style](contribution/jackson-coding-style-guide.md)\n\n## Support \n\n### Community support\n\nJackson components are supported by the Jackson community through mailing lists, Gitter forum, Github issues. See [Contributing](CONTRIBUTING.md) for full details.\n\n### Enterprise support\n\nIn addition to free (for all) community support, enterprise support\u2014starting with version 2.10\u2014is available as part of the [Tidelift Subscription](https://tidelift.com?utm_source=maven-com-fasterxml-jackson-core-jackson-core&utm_medium=referral&utm_campaign=enterprise&utm_term=repo) for (most) Jackson components.\n\nThe maintainers of `Jackson` and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/maven-com-fasterxml-jackson-core-jackson-core?utm_source=maven-com-fasterxml-jackson-core-jackson-core&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n### Reporting security vulnerabilities\n\nThe recommended mechanism for reporting possible security vulnerabilities follows\nso-called \"Coordinated Disclosure Plan\" (see [definition of DCP](https://vuls.cert.org/confluence/display/Wiki/Coordinated+Vulnerability+Disclosure+Guidance)\nfor general idea). The first step is to file a [Tidelift security contact](https://tidelift.com/security):\nTidelift will route all reports via their system to maintainers of relevant package(s), and start the\nprocess that will evaluate concern and issue possible fixes, send update notices and so on.\nNote that you do not need to be a Tidelift subscriber to file a security contact.\n\nAlternatively you may also report possible vulnerabilities to `info` at fasterxml dot com\nmailing address. Note that filing an issue to go with report is fine, but if you do that please\nDO NOT include details of security problem in the issue but only in email contact.\nThis is important to give us time to provide a patch, if necessary, for the problem.\n\n### Note on reporting Bugs\n\nJackson bugs need to be reported against component they affect: for this reason, issue tracker\nis not enabled for this project.\nIf you are unsure which specific project issue affects, the most likely component\nis `jackson-databind`, so you would use\n[Jackson Databind Issue Tracker](https://github.com/FasterXML/jackson-databind/issues).\n\nFor suggestions and new ideas, try [Jackson Future Ideas](../../../jackson-future-ideas)\n\n## Documentation\n\n### Web sites\n\n* [jackson-docs](../../../jackson-docs) is our Github Jackson documentation hub\n* [Wiki](https://github.com/FasterXML/jackson/wiki/) of this repo contains:\n    * [Jackson Releases](../../wiki/Jackson-Releases)\n    * [FAQ](../../wiki/FAQ)\n* Blogs\n    * [CowTalk](http://cowtowncoder.com/blog/blog.html) (deprecated) -- Blog with lots of Jackson-specific content. Not updated since 2013.\n    * [Cowtowncoder@medium](http://medium.com/@cowtowncoder/) -- More recent blogging about Jackson\n\n### Tutorials\n\nFor first-time users there are many good Jackson usage tutorials, \nincluding general usage / JSON tutorials:\n\n* [Baeldung Jackson JSON Tutorial](https://www.baeldung.com/jackson)\n* [Javarevisited Jackson JSON Tutorial](https://javarevisited.blogspot.com/search/label/Java%20JSON%20tutorial)\n* [Jenkov.com Jackson Tutorial](http://tutorials.jenkov.com/java-json/index.html)\n* [JournalDev Jackson Tutorial](https://www.journaldev.com/2324/jackson-json-java-parser-api-example-tutorial)\n* [LogicBig.com Jackson Tutorial](https://www.logicbig.com/tutorials/misc/jackson.html)\n* [StudyTrails Jackson Introduction](http://www.studytrails.com/java/json/java-jackson-introduction/)\n\nand more specific tutorials:\n\n* [Java67 Javakcson CSV Tutorial](https://www.java67.com/2019/05/how-to-read-csv-file-in-java-using-jackson-library.html) (CSV)\n\n### Reports\n\nFollowing reports have been published about Jackson components\n\n* [AdaLogics Jackson Security Audit (2022)](../../blob/master/docs/AdaLogics-Security-Audit-Jackson-2022.pdf) (jackson-core, jackson-databind)\n\n### Java JSON library comparisons\n\nSince you probably want opinions by Java developers NOT related to Jackson project, regarding which library to use,\nhere are links to some of existing independent comparisons:\n\n* [Top 7 Open-Source JSON-binding providers](http://www.developer.com/lang/jscript/top-7-open-source-json-binding-providers-available-today.html) (April 2014)\n* [Be a Lazy but a Productive Android Developer, Part 3: JSON Parsing Library](http://java.dzone.com/articles/be-lazy-productive-android) (April 2014)\n* [\"Can anyone recommend a good Java JSON library\"](https://www.linkedin.com/groups/Can-anyone-recommend-good-Java-50472.S.226644043) (Linked-In group) (March 2013)\n* [\"Which JSON library to use on Android?\"](http://thetarah.com/2012/09/21/which-json-library-should-i-use-in-my-android-and-java-projects/) (September 2012) \n",
        "releases": []
    }
}