{
    "https://api.github.com/repos/openai/openai-python": {
        "forks": 3435,
        "watchers": 24106,
        "stars": 24106,
        "languages": {
            "Python": 2347178,
            "Shell": 3942,
            "Dockerfile": 310,
            "Ruby": 12
        },
        "commits": [
            "2025-01-20T12:12:04Z",
            "2025-01-20T12:11:31Z",
            "2025-01-20T10:22:16Z",
            "2025-01-20T10:13:38Z",
            "2025-01-20T09:53:29Z",
            "2025-01-20T09:38:30Z",
            "2025-01-17T11:40:58Z",
            "2025-01-17T11:40:26Z",
            "2025-01-16T12:46:22Z",
            "2025-01-15T17:51:10Z",
            "2025-01-15T14:06:06Z",
            "2025-01-14T11:59:51Z",
            "2025-01-14T11:56:21Z",
            "2025-01-13T20:23:17Z",
            "2025-01-13T18:08:10Z",
            "2025-01-13T16:59:43Z",
            "2025-01-13T16:20:02Z",
            "2025-01-13T13:30:18Z",
            "2025-01-13T13:29:41Z",
            "2025-01-09T10:57:26Z",
            "2025-01-09T10:56:47Z",
            "2025-01-08T16:41:34Z",
            "2025-01-08T15:00:53Z",
            "2025-01-08T15:00:17Z",
            "2025-01-08T14:08:24Z",
            "2025-01-08T13:50:20Z",
            "2025-01-08T13:22:24Z",
            "2025-01-07T20:09:36Z",
            "2025-01-07T09:50:04Z",
            "2025-01-07T09:49:30Z"
        ],
        "creation_date": "2020-10-25T23:23:54Z",
        "contributors": 30,
        "topics": [
            "openai",
            "python"
        ],
        "subscribers": 311,
        "readme": "# OpenAI Python API library\n\n[![PyPI version](https://img.shields.io/pypi/v/openai.svg)](https://pypi.org/project/openai/)\n\nThe OpenAI Python library provides convenient access to the OpenAI REST API from any Python 3.8+\napplication. The library includes type definitions for all request params and response fields,\nand offers both synchronous and asynchronous clients powered by [httpx](https://github.com/encode/httpx).\n\nIt is generated from our [OpenAPI specification](https://github.com/openai/openai-openapi) with [Stainless](https://stainlessapi.com/).\n\n## Documentation\n\nThe REST API documentation can be found on [platform.openai.com](https://platform.openai.com/docs). The full API of this library can be found in [api.md](api.md).\n\n## Installation\n\n> [!IMPORTANT]\n> The SDK was rewritten in v1, which was released November 6th 2023. See the [v1 migration guide](https://github.com/openai/openai-python/discussions/742), which includes scripts to automatically update your code.\n\n```sh\n# install from PyPI\npip install openai\n```\n\n## Usage\n\nThe full API of this library can be found in [api.md](api.md).\n\n```python\nimport os\nfrom openai import OpenAI\n\nclient = OpenAI(\n    api_key=os.environ.get(\"OPENAI_API_KEY\"),  # This is the default and can be omitted\n)\n\nchat_completion = client.chat.completions.create(\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"Say this is a test\",\n        }\n    ],\n    model=\"gpt-4o\",\n)\n```\n\nWhile you can provide an `api_key` keyword argument,\nwe recommend using [python-dotenv](https://pypi.org/project/python-dotenv/)\nto add `OPENAI_API_KEY=\"My API Key\"` to your `.env` file\nso that your API Key is not stored in source control.\n\n### Vision\n\nWith a hosted image:\n\n```python\nresponse = client.chat.completions.create(\n    model=\"gpt-4o-mini\",\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\"type\": \"text\", \"text\": prompt},\n                {\n                    \"type\": \"image_url\",\n                    \"image_url\": {\"url\": f\"{img_url}\"},\n                },\n            ],\n        }\n    ],\n)\n```\n\nWith the image as a base64 encoded string:\n\n```python\nresponse = client.chat.completions.create(\n    model=\"gpt-4o-mini\",\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\"type\": \"text\", \"text\": prompt},\n                {\n                    \"type\": \"image_url\",\n                    \"image_url\": {\"url\": f\"data:{img_type};base64,{img_b64_str}\"},\n                },\n            ],\n        }\n    ],\n)\n```\n\n### Polling Helpers\n\nWhen interacting with the API some actions such as starting a Run and adding files to vector stores are asynchronous and take time to complete. The SDK includes\nhelper functions which will poll the status until it reaches a terminal state and then return the resulting object.\nIf an API method results in an action that could benefit from polling there will be a corresponding version of the\nmethod ending in '\\_and_poll'.\n\nFor instance to create a Run and poll until it reaches a terminal state you can run:\n\n```python\nrun = client.beta.threads.runs.create_and_poll(\n    thread_id=thread.id,\n    assistant_id=assistant.id,\n)\n```\n\nMore information on the lifecycle of a Run can be found in the [Run Lifecycle Documentation](https://platform.openai.com/docs/assistants/how-it-works/run-lifecycle)\n\n### Bulk Upload Helpers\n\nWhen creating and interacting with vector stores, you can use polling helpers to monitor the status of operations.\nFor convenience, we also provide a bulk upload helper to allow you to simultaneously upload several files at once.\n\n```python\nsample_files = [Path(\"sample-paper.pdf\"), ...]\n\nbatch = await client.vector_stores.file_batches.upload_and_poll(\n    store.id,\n    files=sample_files,\n)\n```\n\n### Streaming Helpers\n\nThe SDK also includes helpers to process streams and handle incoming events.\n\n```python\nwith client.beta.threads.runs.stream(\n    thread_id=thread.id,\n    assistant_id=assistant.id,\n    instructions=\"Please address the user as Jane Doe. The user has a premium account.\",\n) as stream:\n    for event in stream:\n        # Print the text from text delta events\n        if event.type == \"thread.message.delta\" and event.data.delta.content:\n            print(event.data.delta.content[0].text)\n```\n\nMore information on streaming helpers can be found in the dedicated documentation: [helpers.md](helpers.md)\n\n## Async usage\n\nSimply import `AsyncOpenAI` instead of `OpenAI` and use `await` with each API call:\n\n```python\nimport os\nimport asyncio\nfrom openai import AsyncOpenAI\n\nclient = AsyncOpenAI(\n    api_key=os.environ.get(\"OPENAI_API_KEY\"),  # This is the default and can be omitted\n)\n\n\nasync def main() -> None:\n    chat_completion = await client.chat.completions.create(\n        messages=[\n            {\n                \"role\": \"user\",\n                \"content\": \"Say this is a test\",\n            }\n        ],\n        model=\"gpt-4o\",\n    )\n\n\nasyncio.run(main())\n```\n\nFunctionality between the synchronous and asynchronous clients is otherwise identical.\n\n## Streaming responses\n\nWe provide support for streaming responses using Server Side Events (SSE).\n\n```python\nfrom openai import OpenAI\n\nclient = OpenAI()\n\nstream = client.chat.completions.create(\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"Say this is a test\",\n        }\n    ],\n    model=\"gpt-4o\",\n    stream=True,\n)\nfor chunk in stream:\n    print(chunk.choices[0].delta.content or \"\", end=\"\")\n```\n\nThe async client uses the exact same interface.\n\n```python\nimport asyncio\nfrom openai import AsyncOpenAI\n\nclient = AsyncOpenAI()\n\n\nasync def main():\n    stream = await client.chat.completions.create(\n        model=\"gpt-4\",\n        messages=[{\"role\": \"user\", \"content\": \"Say this is a test\"}],\n        stream=True,\n    )\n    async for chunk in stream:\n        print(chunk.choices[0].delta.content or \"\", end=\"\")\n\n\nasyncio.run(main())\n```\n\n## Module-level client\n\n> [!IMPORTANT]\n> We highly recommend instantiating client instances instead of relying on the global client.\n\nWe also expose a global client instance that is accessible in a similar fashion to versions prior to v1.\n\n```py\nimport openai\n\n# optional; defaults to `os.environ['OPENAI_API_KEY']`\nopenai.api_key = '...'\n\n# all client options can be configured just like the `OpenAI` instantiation counterpart\nopenai.base_url = \"https://...\"\nopenai.default_headers = {\"x-foo\": \"true\"}\n\ncompletion = openai.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"How do I output all files in a directory using Python?\",\n        },\n    ],\n)\nprint(completion.choices[0].message.content)\n```\n\nThe API is the exact same as the standard client instance-based API.\n\nThis is intended to be used within REPLs or notebooks for faster iteration, **not** in application code.\n\nWe recommend that you always instantiate a client (e.g., with `client = OpenAI()`) in application code because:\n\n- It can be difficult to reason about where client options are configured\n- It's not possible to change certain client options without potentially causing race conditions\n- It's harder to mock for testing purposes\n- It's not possible to control cleanup of network connections\n\n## Realtime API beta\n\nThe Realtime API enables you to build low-latency, multi-modal conversational experiences. It currently supports text and audio as both input and output, as well as [function calling](https://platform.openai.com/docs/guides/function-calling) through a WebSocket connection.\n\nUnder the hood the SDK uses the [`websockets`](https://websockets.readthedocs.io/en/stable/) library to manage connections.\n\nThe Realtime API works through a combination of client-sent events and server-sent events. Clients can send events to do things like update session configuration or send text and audio inputs. Server events confirm when audio responses have completed, or when a text response from the model has been received. A full event reference can be found [here](https://platform.openai.com/docs/api-reference/realtime-client-events) and a guide can be found [here](https://platform.openai.com/docs/guides/realtime).\n\nBasic text based example:\n\n```py\nimport asyncio\nfrom openai import AsyncOpenAI\n\nasync def main():\n    client = AsyncOpenAI()\n\n    async with client.beta.realtime.connect(model=\"gpt-4o-realtime-preview\") as connection:\n        await connection.session.update(session={'modalities': ['text']})\n\n        await connection.conversation.item.create(\n            item={\n                \"type\": \"message\",\n                \"role\": \"user\",\n                \"content\": [{\"type\": \"input_text\", \"text\": \"Say hello!\"}],\n            }\n        )\n        await connection.response.create()\n\n        async for event in connection:\n            if event.type == 'response.text.delta':\n                print(event.delta, flush=True, end=\"\")\n\n            elif event.type == 'response.text.done':\n                print()\n\n            elif event.type == \"response.done\":\n                break\n\nasyncio.run(main())\n```\n\nHowever the real magic of the Realtime API is handling audio inputs / outputs, see this example [TUI script](https://github.com/openai/openai-python/blob/main/examples/realtime/push_to_talk_app.py) for a fully fledged example.\n\n### Realtime error handling\n\nWhenever an error occurs, the Realtime API will send an [`error` event](https://platform.openai.com/docs/guides/realtime/realtime-api-beta#handling-errors) and the connection will stay open and remain usable. This means you need to handle it yourself, as *no errors are raised directly* by the SDK when an `error` event comes in.\n\n```py\nclient = AsyncOpenAI()\n\nasync with client.beta.realtime.connect(model=\"gpt-4o-realtime-preview\") as connection:\n    ...\n    async for event in connection:\n        if event.type == 'error':\n            print(event.error.type)\n            print(event.error.code)\n            print(event.error.event_id)\n            print(event.error.message)\n```\n\n## Using types\n\nNested request parameters are [TypedDicts](https://docs.python.org/3/library/typing.html#typing.TypedDict). Responses are [Pydantic models](https://docs.pydantic.dev) which also provide helper methods for things like:\n\n- Serializing back into JSON, `model.to_json()`\n- Converting to a dictionary, `model.to_dict()`\n\nTyped requests and responses provide autocomplete and documentation within your editor. If you would like to see type errors in VS Code to help catch bugs earlier, set `python.analysis.typeCheckingMode` to `basic`.\n\n## Pagination\n\nList methods in the OpenAI API are paginated.\n\nThis library provides auto-paginating iterators with each list response, so you do not have to request successive pages manually:\n\n```python\nfrom openai import OpenAI\n\nclient = OpenAI()\n\nall_jobs = []\n# Automatically fetches more pages as needed.\nfor job in client.fine_tuning.jobs.list(\n    limit=20,\n):\n    # Do something with job here\n    all_jobs.append(job)\nprint(all_jobs)\n```\n\nOr, asynchronously:\n\n```python\nimport asyncio\nfrom openai import AsyncOpenAI\n\nclient = AsyncOpenAI()\n\n\nasync def main() -> None:\n    all_jobs = []\n    # Iterate through items across all pages, issuing requests as needed.\n    async for job in client.fine_tuning.jobs.list(\n        limit=20,\n    ):\n        all_jobs.append(job)\n    print(all_jobs)\n\n\nasyncio.run(main())\n```\n\nAlternatively, you can use the `.has_next_page()`, `.next_page_info()`, or `.get_next_page()` methods for more granular control working with pages:\n\n```python\nfirst_page = await client.fine_tuning.jobs.list(\n    limit=20,\n)\nif first_page.has_next_page():\n    print(f\"will fetch next page using these details: {first_page.next_page_info()}\")\n    next_page = await first_page.get_next_page()\n    print(f\"number of items we just fetched: {len(next_page.data)}\")\n\n# Remove `await` for non-async usage.\n```\n\nOr just work directly with the returned data:\n\n```python\nfirst_page = await client.fine_tuning.jobs.list(\n    limit=20,\n)\n\nprint(f\"next page cursor: {first_page.after}\")  # => \"next page cursor: ...\"\nfor job in first_page.data:\n    print(job.id)\n\n# Remove `await` for non-async usage.\n```\n\n## Nested params\n\nNested parameters are dictionaries, typed using `TypedDict`, for example:\n\n```python\nfrom openai import OpenAI\n\nclient = OpenAI()\n\ncompletion = client.chat.completions.create(\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"Can you generate an example json object describing a fruit?\",\n        }\n    ],\n    model=\"gpt-4o\",\n    response_format={\"type\": \"json_object\"},\n)\n```\n\n## File uploads\n\nRequest parameters that correspond to file uploads can be passed as `bytes`, a [`PathLike`](https://docs.python.org/3/library/os.html#os.PathLike) instance or a tuple of `(filename, contents, media type)`.\n\n```python\nfrom pathlib import Path\nfrom openai import OpenAI\n\nclient = OpenAI()\n\nclient.files.create(\n    file=Path(\"input.jsonl\"),\n    purpose=\"fine-tune\",\n)\n```\n\nThe async client uses the exact same interface. If you pass a [`PathLike`](https://docs.python.org/3/library/os.html#os.PathLike) instance, the file contents will be read asynchronously automatically.\n\n## Handling errors\n\nWhen the library is unable to connect to the API (for example, due to network connection problems or a timeout), a subclass of `openai.APIConnectionError` is raised.\n\nWhen the API returns a non-success status code (that is, 4xx or 5xx\nresponse), a subclass of `openai.APIStatusError` is raised, containing `status_code` and `response` properties.\n\nAll errors inherit from `openai.APIError`.\n\n```python\nimport openai\nfrom openai import OpenAI\n\nclient = OpenAI()\n\ntry:\n    client.fine_tuning.jobs.create(\n        model=\"gpt-4o\",\n        training_file=\"file-abc123\",\n    )\nexcept openai.APIConnectionError as e:\n    print(\"The server could not be reached\")\n    print(e.__cause__)  # an underlying Exception, likely raised within httpx.\nexcept openai.RateLimitError as e:\n    print(\"A 429 status code was received; we should back off a bit.\")\nexcept openai.APIStatusError as e:\n    print(\"Another non-200-range status code was received\")\n    print(e.status_code)\n    print(e.response)\n```\n\nError codes are as follows:\n\n| Status Code | Error Type                 |\n| ----------- | -------------------------- |\n| 400         | `BadRequestError`          |\n| 401         | `AuthenticationError`      |\n| 403         | `PermissionDeniedError`    |\n| 404         | `NotFoundError`            |\n| 422         | `UnprocessableEntityError` |\n| 429         | `RateLimitError`           |\n| >=500       | `InternalServerError`      |\n| N/A         | `APIConnectionError`       |\n\n## Request IDs\n\n> For more information on debugging requests, see [these docs](https://platform.openai.com/docs/api-reference/debugging-requests)\n\nAll object responses in the SDK provide a `_request_id` property which is added from the `x-request-id` response header so that you can quickly log failing requests and report them back to OpenAI.\n\n```python\ncompletion = await client.chat.completions.create(\n    messages=[{\"role\": \"user\", \"content\": \"Say this is a test\"}], model=\"gpt-4\"\n)\nprint(completion._request_id)  # req_123\n```\n\nNote that unlike other properties that use an `_` prefix, the `_request_id` property\n*is* public. Unless documented otherwise, *all* other `_` prefix properties,\nmethods and modules are *private*.\n\n\n### Retries\n\nCertain errors are automatically retried 2 times by default, with a short exponential backoff.\nConnection errors (for example, due to a network connectivity problem), 408 Request Timeout, 409 Conflict,\n429 Rate Limit, and >=500 Internal errors are all retried by default.\n\nYou can use the `max_retries` option to configure or disable retry settings:\n\n```python\nfrom openai import OpenAI\n\n# Configure the default for all requests:\nclient = OpenAI(\n    # default is 2\n    max_retries=0,\n)\n\n# Or, configure per-request:\nclient.with_options(max_retries=5).chat.completions.create(\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"How can I get the name of the current day in JavaScript?\",\n        }\n    ],\n    model=\"gpt-4o\",\n)\n```\n\n### Timeouts\n\nBy default requests time out after 10 minutes. You can configure this with a `timeout` option,\nwhich accepts a float or an [`httpx.Timeout`](https://www.python-httpx.org/advanced/#fine-tuning-the-configuration) object:\n\n```python\nfrom openai import OpenAI\n\n# Configure the default for all requests:\nclient = OpenAI(\n    # 20 seconds (default is 10 minutes)\n    timeout=20.0,\n)\n\n# More granular control:\nclient = OpenAI(\n    timeout=httpx.Timeout(60.0, read=5.0, write=10.0, connect=2.0),\n)\n\n# Override per-request:\nclient.with_options(timeout=5.0).chat.completions.create(\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"How can I list all files in a directory using Python?\",\n        }\n    ],\n    model=\"gpt-4o\",\n)\n```\n\nOn timeout, an `APITimeoutError` is thrown.\n\nNote that requests that time out are [retried twice by default](#retries).\n\n## Advanced\n\n### Logging\n\nWe use the standard library [`logging`](https://docs.python.org/3/library/logging.html) module.\n\nYou can enable logging by setting the environment variable `OPENAI_LOG` to `info`.\n\n```shell\n$ export OPENAI_LOG=info\n```\n\nOr to `debug` for more verbose logging.\n\n### How to tell whether `None` means `null` or missing\n\nIn an API response, a field may be explicitly `null`, or missing entirely; in either case, its value is `None` in this library. You can differentiate the two cases with `.model_fields_set`:\n\n```py\nif response.my_field is None:\n  if 'my_field' not in response.model_fields_set:\n    print('Got json like {}, without a \"my_field\" key present at all.')\n  else:\n    print('Got json like {\"my_field\": null}.')\n```\n\n### Accessing raw response data (e.g. headers)\n\nThe \"raw\" Response object can be accessed by prefixing `.with_raw_response.` to any HTTP method call, e.g.,\n\n```py\nfrom openai import OpenAI\n\nclient = OpenAI()\nresponse = client.chat.completions.with_raw_response.create(\n    messages=[{\n        \"role\": \"user\",\n        \"content\": \"Say this is a test\",\n    }],\n    model=\"gpt-4o\",\n)\nprint(response.headers.get('X-My-Header'))\n\ncompletion = response.parse()  # get the object that `chat.completions.create()` would have returned\nprint(completion)\n```\n\nThese methods return a [`LegacyAPIResponse`](https://github.com/openai/openai-python/tree/main/src/openai/_legacy_response.py) object. This is a legacy class as we're changing it slightly in the next major version.\n\nFor the sync client this will mostly be the same with the exception\nof `content` & `text` will be methods instead of properties. In the\nasync client, all methods will be async.\n\nA migration script will be provided & the migration in general should\nbe smooth.\n\n#### `.with_streaming_response`\n\nThe above interface eagerly reads the full response body when you make the request, which may not always be what you want.\n\nTo stream the response body, use `.with_streaming_response` instead, which requires a context manager and only reads the response body once you call `.read()`, `.text()`, `.json()`, `.iter_bytes()`, `.iter_text()`, `.iter_lines()` or `.parse()`. In the async client, these are async methods.\n\nAs such, `.with_streaming_response` methods return a different [`APIResponse`](https://github.com/openai/openai-python/tree/main/src/openai/_response.py) object, and the async client returns an [`AsyncAPIResponse`](https://github.com/openai/openai-python/tree/main/src/openai/_response.py) object.\n\n```python\nwith client.chat.completions.with_streaming_response.create(\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"Say this is a test\",\n        }\n    ],\n    model=\"gpt-4o\",\n) as response:\n    print(response.headers.get(\"X-My-Header\"))\n\n    for line in response.iter_lines():\n        print(line)\n```\n\nThe context manager is required so that the response will reliably be closed.\n\n### Making custom/undocumented requests\n\nThis library is typed for convenient access to the documented API.\n\nIf you need to access undocumented endpoints, params, or response properties, the library can still be used.\n\n#### Undocumented endpoints\n\nTo make requests to undocumented endpoints, you can make requests using `client.get`, `client.post`, and other\nhttp verbs. Options on the client will be respected (such as retries) when making this request.\n\n```py\nimport httpx\n\nresponse = client.post(\n    \"/foo\",\n    cast_to=httpx.Response,\n    body={\"my_param\": True},\n)\n\nprint(response.headers.get(\"x-foo\"))\n```\n\n#### Undocumented request params\n\nIf you want to explicitly send an extra param, you can do so with the `extra_query`, `extra_body`, and `extra_headers` request\noptions.\n\n#### Undocumented response properties\n\nTo access undocumented response properties, you can access the extra fields like `response.unknown_prop`. You\ncan also get all the extra fields on the Pydantic model as a dict with\n[`response.model_extra`](https://docs.pydantic.dev/latest/api/base_model/#pydantic.BaseModel.model_extra).\n\n### Configuring the HTTP client\n\nYou can directly override the [httpx client](https://www.python-httpx.org/api/#client) to customize it for your use case, including:\n\n- Support for [proxies](https://www.python-httpx.org/advanced/proxies/)\n- Custom [transports](https://www.python-httpx.org/advanced/transports/)\n- Additional [advanced](https://www.python-httpx.org/advanced/clients/) functionality\n\n```python\nimport httpx\nfrom openai import OpenAI, DefaultHttpxClient\n\nclient = OpenAI(\n    # Or use the `OPENAI_BASE_URL` env var\n    base_url=\"http://my.test.server.example.com:8083/v1\",\n    http_client=DefaultHttpxClient(\n        proxy=\"http://my.test.proxy.example.com\",\n        transport=httpx.HTTPTransport(local_address=\"0.0.0.0\"),\n    ),\n)\n```\n\nYou can also customize the client on a per-request basis by using `with_options()`:\n\n```python\nclient.with_options(http_client=DefaultHttpxClient(...))\n```\n\n### Managing HTTP resources\n\nBy default the library closes underlying HTTP connections whenever the client is [garbage collected](https://docs.python.org/3/reference/datamodel.html#object.__del__). You can manually close the client using the `.close()` method if desired, or with a context manager that closes when exiting.\n\n```py\nfrom openai import OpenAI\n\nwith OpenAI() as client:\n  # make requests here\n  ...\n\n# HTTP client is now closed\n```\n\n## Microsoft Azure OpenAI\n\nTo use this library with [Azure OpenAI](https://learn.microsoft.com/azure/ai-services/openai/overview), use the `AzureOpenAI`\nclass instead of the `OpenAI` class.\n\n> [!IMPORTANT]\n> The Azure API shape differs from the core API shape which means that the static types for responses / params\n> won't always be correct.\n\n```py\nfrom openai import AzureOpenAI\n\n# gets the API Key from environment variable AZURE_OPENAI_API_KEY\nclient = AzureOpenAI(\n    # https://learn.microsoft.com/azure/ai-services/openai/reference#rest-api-versioning\n    api_version=\"2023-07-01-preview\",\n    # https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource?pivots=web-portal#create-a-resource\n    azure_endpoint=\"https://example-endpoint.openai.azure.com\",\n)\n\ncompletion = client.chat.completions.create(\n    model=\"deployment-name\",  # e.g. gpt-35-instant\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"How do I output all files in a directory using Python?\",\n        },\n    ],\n)\nprint(completion.to_json())\n```\n\nIn addition to the options provided in the base `OpenAI` client, the following options are provided:\n\n- `azure_endpoint` (or the `AZURE_OPENAI_ENDPOINT` environment variable)\n- `azure_deployment`\n- `api_version` (or the `OPENAI_API_VERSION` environment variable)\n- `azure_ad_token` (or the `AZURE_OPENAI_AD_TOKEN` environment variable)\n- `azure_ad_token_provider`\n\nAn example of using the client with Microsoft Entra ID (formerly known as Azure Active Directory) can be found [here](https://github.com/openai/openai-python/blob/main/examples/azure_ad.py).\n\n## Versioning\n\nThis package generally follows [SemVer](https://semver.org/spec/v2.0.0.html) conventions, though certain backwards-incompatible changes may be released as minor versions:\n\n1. Changes that only affect static types, without breaking runtime behavior.\n2. Changes to library internals which are technically public but not intended or documented for external use. _(Please open a GitHub issue to let us know if you are relying on such internals.)_\n3. Changes that we do not expect to impact the vast majority of users in practice.\n\nWe take backwards-compatibility seriously and work hard to ensure you can rely on a smooth upgrade experience.\n\nWe are keen for your feedback; please open an [issue](https://www.github.com/openai/openai-python/issues) with questions, bugs, or suggestions.\n\n### Determining the installed version\n\nIf you've upgraded to the latest version but aren't seeing any new features you were expecting then your python environment is likely still using an older version.\n\nYou can determine the version that is being used at runtime with:\n\n```py\nimport openai\nprint(openai.__version__)\n```\n\n## Requirements\n\nPython 3.8 or higher.\n\n## Contributing\n\nSee [the contributing documentation](./CONTRIBUTING.md).\n",
        "releases": [
            {
                "name": "v1.59.9",
                "date": "2025-01-20T14:57:22Z"
            },
            {
                "name": "v1.59.8",
                "date": "2025-01-17T17:37:12Z"
            },
            {
                "name": "v1.59.7",
                "date": "2025-01-13T15:25:02Z"
            },
            {
                "name": "v1.59.6",
                "date": "2025-01-09T21:25:52Z"
            },
            {
                "name": "v1.59.5",
                "date": "2025-01-08T16:29:52Z"
            },
            {
                "name": "v1.59.4",
                "date": "2025-01-07T15:28:54Z"
            },
            {
                "name": "v1.59.3",
                "date": "2025-01-03T23:00:13Z"
            },
            {
                "name": "v1.59.2",
                "date": "2025-01-03T16:31:05Z"
            },
            {
                "name": "v1.59.1",
                "date": "2025-01-02T15:40:51Z"
            },
            {
                "name": "v1.59.0",
                "date": "2024-12-21T21:08:35Z"
            },
            {
                "name": "v1.58.1",
                "date": "2024-12-17T20:01:51Z"
            },
            {
                "name": "v1.58.0",
                "date": "2024-12-17T18:21:15Z"
            },
            {
                "name": "v1.57.4",
                "date": "2024-12-13T15:51:58Z"
            },
            {
                "name": "v1.57.3",
                "date": "2024-12-12T16:59:25Z"
            },
            {
                "name": "v1.57.2",
                "date": "2024-12-10T15:27:28Z"
            },
            {
                "name": "v1.57.1",
                "date": "2024-12-09T15:51:50Z"
            },
            {
                "name": "v1.57.0",
                "date": "2024-12-05T16:19:31Z"
            },
            {
                "name": "v1.56.2",
                "date": "2024-12-04T13:29:00Z"
            },
            {
                "name": "v1.56.1",
                "date": "2024-12-03T16:26:31Z"
            },
            {
                "name": "v1.56.0",
                "date": "2024-12-02T19:16:22Z"
            },
            {
                "name": "v1.55.3",
                "date": "2024-11-28T16:56:12Z"
            },
            {
                "name": "v1.55.2",
                "date": "2024-11-27T15:57:56Z"
            },
            {
                "name": "v1.55.1",
                "date": "2024-11-25T18:02:45Z"
            },
            {
                "name": "v1.55.0",
                "date": "2024-11-20T18:27:32Z"
            },
            {
                "name": "v1.54.5",
                "date": "2024-11-19T12:06:12Z"
            },
            {
                "name": "v1.54.4",
                "date": "2024-11-12T16:13:01Z"
            },
            {
                "name": "v1.54.3",
                "date": "2024-11-06T21:27:53Z"
            },
            {
                "name": "v1.54.2",
                "date": "2024-11-06T16:11:05Z"
            },
            {
                "name": "v1.54.1",
                "date": "2024-11-05T15:41:00Z"
            },
            {
                "name": "v1.54.0",
                "date": "2024-11-04T22:50:43Z"
            },
            {
                "name": "v1.53.1",
                "date": "2024-11-04T16:25:54Z"
            },
            {
                "name": "v1.53.0",
                "date": "2024-10-30T16:30:02Z"
            },
            {
                "name": "v1.52.2",
                "date": "2024-10-23T23:04:54Z"
            },
            {
                "name": "v1.52.1",
                "date": "2024-10-22T19:55:49Z"
            },
            {
                "name": "v1.52.0",
                "date": "2024-10-17T17:30:23Z"
            },
            {
                "name": "v1.51.2",
                "date": "2024-10-08T14:56:50Z"
            },
            {
                "name": "v1.51.1",
                "date": "2024-10-07T15:17:23Z"
            },
            {
                "name": "v1.51.0",
                "date": "2024-10-01T17:55:10Z"
            },
            {
                "name": "v1.50.2",
                "date": "2024-09-27T23:47:34Z"
            },
            {
                "name": "v1.50.1",
                "date": "2024-09-27T14:52:12Z"
            },
            {
                "name": "v1.50.0",
                "date": "2024-09-26T22:43:48Z"
            },
            {
                "name": "v1.49.0",
                "date": "2024-09-26T17:29:16Z"
            },
            {
                "name": "v1.48.0",
                "date": "2024-09-25T15:33:37Z"
            },
            {
                "name": "v1.47.1",
                "date": "2024-09-23T15:21:26Z"
            },
            {
                "name": "v1.47.0",
                "date": "2024-09-20T14:58:47Z"
            },
            {
                "name": "v1.46.1",
                "date": "2024-09-19T15:00:48Z"
            },
            {
                "name": "v1.46.0",
                "date": "2024-09-17T18:23:22Z"
            },
            {
                "name": "v1.45.1",
                "date": "2024-09-16T13:46:02Z"
            },
            {
                "name": "v1.45.0",
                "date": "2024-09-12T17:07:42Z"
            },
            {
                "name": "v1.44.1",
                "date": "2024-09-09T19:38:35Z"
            },
            {
                "name": "v1.44.0",
                "date": "2024-09-06T17:23:27Z"
            },
            {
                "name": "v1.43.1",
                "date": "2024-09-05T19:46:07Z"
            },
            {
                "name": "v1.43.0",
                "date": "2024-08-29T18:00:39Z"
            },
            {
                "name": "v1.42.0",
                "date": "2024-08-20T22:52:27Z"
            },
            {
                "name": "v1.41.1",
                "date": "2024-08-20T00:43:52Z"
            },
            {
                "name": "v1.41.0",
                "date": "2024-08-16T20:47:00Z"
            },
            {
                "name": "v1.40.8",
                "date": "2024-08-15T23:55:37Z"
            },
            {
                "name": "v1.40.7",
                "date": "2024-08-15T20:21:06Z"
            },
            {
                "name": "v1.40.6",
                "date": "2024-08-12T21:30:40Z"
            },
            {
                "name": "v1.40.5",
                "date": "2024-08-12T19:01:46Z"
            },
            {
                "name": "v1.40.4",
                "date": "2024-08-12T17:46:45Z"
            },
            {
                "name": "v1.40.3",
                "date": "2024-08-10T06:41:08Z"
            },
            {
                "name": "v1.40.2",
                "date": "2024-08-08T22:01:24Z"
            },
            {
                "name": "v1.40.1",
                "date": "2024-08-07T14:53:18Z"
            },
            {
                "name": "v1.40.0",
                "date": "2024-08-06T17:14:50Z"
            },
            {
                "name": "v1.39.0",
                "date": "2024-08-05T15:01:07Z"
            },
            {
                "name": "v1.38.0",
                "date": "2024-08-02T15:29:11Z"
            },
            {
                "name": "v1.37.2",
                "date": "2024-08-02T04:24:55Z"
            },
            {
                "name": "v1.37.1",
                "date": "2024-07-25T23:13:30Z"
            },
            {
                "name": "v1.37.0",
                "date": "2024-07-22T15:38:18Z"
            },
            {
                "name": "v1.36.1",
                "date": "2024-07-20T23:02:43Z"
            },
            {
                "name": "v1.36.0",
                "date": "2024-07-19T15:01:20Z"
            },
            {
                "name": "v1.35.15",
                "date": "2024-07-18T17:40:32Z"
            },
            {
                "name": "v1.35.14",
                "date": "2024-07-16T02:10:32Z"
            },
            {
                "name": "v1.35.13",
                "date": "2024-07-10T13:24:23Z"
            },
            {
                "name": "v1.35.12",
                "date": "2024-07-09T18:15:55Z"
            },
            {
                "name": "v1.35.11",
                "date": "2024-07-09T16:47:20Z"
            },
            {
                "name": "v1.35.10",
                "date": "2024-07-04T00:23:23Z"
            },
            {
                "name": "v1.35.9",
                "date": "2024-07-02T23:15:55Z"
            },
            {
                "name": "v1.35.8",
                "date": "2024-07-02T14:41:37Z"
            },
            {
                "name": "v1.35.7",
                "date": "2024-06-27T22:20:32Z"
            },
            {
                "name": "v1.35.6",
                "date": "2024-06-27T14:00:55Z"
            },
            {
                "name": "v1.35.5",
                "date": "2024-06-26T18:05:01Z"
            },
            {
                "name": "v1.35.4",
                "date": "2024-06-26T01:26:00Z"
            },
            {
                "name": "v1.35.3",
                "date": "2024-06-20T23:36:35Z"
            },
            {
                "name": "v1.35.2",
                "date": "2024-06-20T17:50:31Z"
            },
            {
                "name": "v1.35.1",
                "date": "2024-06-19T20:18:44Z"
            },
            {
                "name": "v1.35.0",
                "date": "2024-06-19T16:48:24Z"
            },
            {
                "name": "v1.34.0",
                "date": "2024-06-12T18:59:40Z"
            },
            {
                "name": "v1.33.0",
                "date": "2024-06-07T21:52:34Z"
            },
            {
                "name": "v1.32.1",
                "date": "2024-06-07T19:56:26Z"
            },
            {
                "name": "v1.32.0",
                "date": "2024-06-06T21:30:53Z"
            },
            {
                "name": "v1.31.2",
                "date": "2024-06-06T14:22:21Z"
            },
            {
                "name": "v1.31.1",
                "date": "2024-06-05T16:13:38Z"
            },
            {
                "name": "v1.31.0",
                "date": "2024-06-03T23:08:58Z"
            },
            {
                "name": "v1.30.5",
                "date": "2024-05-30T04:15:03Z"
            },
            {
                "name": "v1.30.4",
                "date": "2024-05-28T16:00:10Z"
            },
            {
                "name": "v1.30.3",
                "date": "2024-05-24T16:05:29Z"
            },
            {
                "name": "v1.30.2",
                "date": "2024-05-23T11:05:17Z"
            },
            {
                "name": "v1.30.1",
                "date": "2024-05-14T16:02:58Z"
            },
            {
                "name": "v1.30.0",
                "date": "2024-05-14T14:20:44Z"
            },
            {
                "name": "v1.29.0",
                "date": "2024-05-13T18:16:53Z"
            },
            {
                "name": "v1.28.2",
                "date": "2024-05-13T16:46:04Z"
            },
            {
                "name": "v1.28.1",
                "date": "2024-05-11T06:02:46Z"
            },
            {
                "name": "v1.28.0",
                "date": "2024-05-09T22:04:51Z"
            },
            {
                "name": "v1.27.0",
                "date": "2024-05-08T20:14:23Z"
            },
            {
                "name": "v1.26.0",
                "date": "2024-05-06T19:09:15Z"
            },
            {
                "name": "v1.25.2",
                "date": "2024-05-05T20:00:22Z"
            },
            {
                "name": "v1.25.1",
                "date": "2024-05-02T15:51:57Z"
            },
            {
                "name": "v1.25.0",
                "date": "2024-05-01T04:13:59Z"
            },
            {
                "name": "v1.24.1",
                "date": "2024-04-30T18:07:00Z"
            },
            {
                "name": "v1.24.0",
                "date": "2024-04-29T22:35:45Z"
            },
            {
                "name": "v1.23.6",
                "date": "2024-04-25T04:19:59Z"
            },
            {
                "name": "v1.23.5",
                "date": "2024-04-25T00:26:15Z"
            },
            {
                "name": "v1.23.4",
                "date": "2024-04-24T18:34:38Z"
            },
            {
                "name": "v1.23.3",
                "date": "2024-04-23T23:17:15Z"
            },
            {
                "name": "v1.23.2",
                "date": "2024-04-19T18:52:05Z"
            },
            {
                "name": "v1.23.1",
                "date": "2024-04-18T22:35:28Z"
            },
            {
                "name": "v1.23.0",
                "date": "2024-04-18T22:31:06Z"
            },
            {
                "name": "v1.22.0",
                "date": "2024-04-18T16:11:10Z"
            },
            {
                "name": "v1.21.2",
                "date": "2024-04-17T22:02:40Z"
            },
            {
                "name": "v1.21.1",
                "date": "2024-04-17T19:34:02Z"
            },
            {
                "name": "v1.21.0",
                "date": "2024-04-17T16:39:22Z"
            },
            {
                "name": "v1.20.0",
                "date": "2024-04-16T17:02:58Z"
            },
            {
                "name": "v1.19.0",
                "date": "2024-04-16T00:06:06Z"
            },
            {
                "name": "v1.18.0",
                "date": "2024-04-15T20:24:00Z"
            },
            {
                "name": "v1.17.1",
                "date": "2024-04-13T05:04:03Z"
            },
            {
                "name": "v1.17.0",
                "date": "2024-04-10T17:23:50Z"
            },
            {
                "name": "v1.16.2",
                "date": "2024-04-04T15:26:48Z"
            },
            {
                "name": "v1.16.1",
                "date": "2024-04-02T15:12:18Z"
            },
            {
                "name": "v1.16.0",
                "date": "2024-04-01T23:30:17Z"
            },
            {
                "name": "v1.15.0",
                "date": "2024-04-01T05:03:50Z"
            },
            {
                "name": "v1.14.3",
                "date": "2024-03-25T16:43:50Z"
            },
            {
                "name": "v1.14.2",
                "date": "2024-03-19T15:49:40Z"
            },
            {
                "name": "v1.14.1",
                "date": "2024-03-15T20:38:07Z"
            },
            {
                "name": "v1.14.0",
                "date": "2024-03-13T20:36:02Z"
            },
            {
                "name": "v1.13.4",
                "date": "2024-03-13T20:22:38Z"
            },
            {
                "name": "v1.13.3",
                "date": "2024-02-28T23:22:00Z"
            },
            {
                "name": "v1.13.2",
                "date": "2024-02-20T19:26:46Z"
            },
            {
                "name": "v1.13.1",
                "date": "2024-02-20T17:23:23Z"
            },
            {
                "name": "v1.13.0",
                "date": "2024-02-20T02:51:29Z"
            },
            {
                "name": "v1.12.0",
                "date": "2024-02-09T00:14:26Z"
            },
            {
                "name": "v1.11.1",
                "date": "2024-02-04T19:12:08Z"
            },
            {
                "name": "v1.11.0",
                "date": "2024-02-03T05:06:51Z"
            },
            {
                "name": "v1.10.0",
                "date": "2024-01-25T20:00:35Z"
            },
            {
                "name": "v1.9.0",
                "date": "2024-01-21T08:49:38Z"
            },
            {
                "name": "v1.8.0",
                "date": "2024-01-16T21:16:23Z"
            },
            {
                "name": "v1.7.2",
                "date": "2024-01-12T16:07:32Z"
            },
            {
                "name": "v1.7.1",
                "date": "2024-01-10T19:06:45Z"
            },
            {
                "name": "v1.7.0",
                "date": "2024-01-09T01:43:00Z"
            },
            {
                "name": "v1.6.1",
                "date": "2023-12-22T11:06:33Z"
            },
            {
                "name": "v1.6.0",
                "date": "2023-12-19T23:37:38Z"
            },
            {
                "name": "v1.5.0",
                "date": "2023-12-17T01:57:28Z"
            },
            {
                "name": "v1.4.0",
                "date": "2023-12-15T05:16:40Z"
            },
            {
                "name": "v1.3.9",
                "date": "2023-12-13T01:31:07Z"
            },
            {
                "name": "v1.3.8",
                "date": "2023-12-09T02:21:00Z"
            },
            {
                "name": "v1.3.7",
                "date": "2023-12-01T18:47:58Z"
            },
            {
                "name": "v1.3.6",
                "date": "2023-11-29T01:31:09Z"
            },
            {
                "name": "v1.3.5",
                "date": "2023-11-22T17:45:51Z"
            },
            {
                "name": "v1.3.4",
                "date": "2023-11-21T08:29:40Z"
            },
            {
                "name": "v1.3.3",
                "date": "2023-11-17T23:36:00Z"
            },
            {
                "name": "v1.3.2",
                "date": "2023-11-16T20:00:42Z"
            },
            {
                "name": "v1.3.1",
                "date": "2023-11-16T17:31:05Z"
            },
            {
                "name": "v1.3.0",
                "date": "2023-11-15T18:12:25Z"
            },
            {
                "name": "v1.2.4",
                "date": "2023-11-13T18:25:43Z"
            },
            {
                "name": "v1.2.3",
                "date": "2023-11-10T18:52:30Z"
            },
            {
                "name": "v1.2.2",
                "date": "2023-11-09T21:48:21Z"
            },
            {
                "name": "v1.2.1",
                "date": "2023-11-09T18:47:16Z"
            },
            {
                "name": "v1.2.0",
                "date": "2023-11-09T01:26:11Z"
            },
            {
                "name": "v1.1.2",
                "date": "2023-11-08T18:04:32Z"
            },
            {
                "name": "v1.1.0",
                "date": "2023-11-06T20:40:53Z"
            },
            {
                "name": "v1.0.1",
                "date": "2023-11-06T19:28:22Z"
            },
            {
                "name": "v1.0.0",
                "date": "2023-11-06T19:27:19Z"
            },
            {
                "name": "v0.28.1",
                "date": "2023-09-26T03:28:40Z"
            },
            {
                "name": "v0.28.0",
                "date": "2023-08-31T23:07:49Z"
            },
            {
                "name": "v0.27.10",
                "date": "2023-08-30T00:21:49Z"
            },
            {
                "name": "v0.27.9",
                "date": "2023-08-22T16:36:33Z"
            },
            {
                "name": "v0.27.8",
                "date": "2023-06-07T00:09:34Z"
            },
            {
                "name": "v0.27.7",
                "date": "2023-05-19T17:29:55Z"
            },
            {
                "name": "v0.27.6",
                "date": "2023-05-01T22:57:26Z"
            },
            {
                "name": "v0.27.5",
                "date": "2023-04-27T16:52:46Z"
            },
            {
                "name": "v0.27.4",
                "date": "2023-04-04T17:41:51Z"
            },
            {
                "name": "v0.27.3",
                "date": "2023-04-03T21:14:51Z"
            },
            {
                "name": "v0.27.2",
                "date": "2023-03-11T03:49:34Z"
            },
            {
                "name": "v0.27.1",
                "date": "2023-03-08T20:45:29Z"
            },
            {
                "name": "v0.27.0",
                "date": "2023-03-01T17:44:08Z"
            },
            {
                "name": "v0.26.5",
                "date": "2023-02-07T22:26:40Z"
            },
            {
                "name": "v0.26.4",
                "date": "2023-01-26T21:39:53Z"
            },
            {
                "name": "v0.26.3",
                "date": "2023-01-25T15:26:47Z"
            },
            {
                "name": "v0.26.2",
                "date": "2023-01-24T00:04:25Z"
            },
            {
                "name": "v.0.26.1",
                "date": "2023-01-13T20:55:09Z"
            },
            {
                "name": "v0.26.0",
                "date": "2023-01-06T23:41:49Z"
            },
            {
                "name": "v0.25.0",
                "date": "2022-11-02T19:46:59Z"
            },
            {
                "name": "v0.24.0",
                "date": "2022-10-21T17:31:18Z"
            },
            {
                "name": "v0.23.1",
                "date": "2022-09-28T18:25:20Z"
            },
            {
                "name": "v0.23.0",
                "date": "2022-08-24T03:10:27Z"
            },
            {
                "name": "v0.22.1",
                "date": "2022-08-02T22:49:10Z"
            },
            {
                "name": "v0.22.0",
                "date": "2022-07-26T13:54:49Z"
            },
            {
                "name": "v0.20.0",
                "date": "2022-06-15T05:50:36Z"
            },
            {
                "name": "v0.19.0",
                "date": "2022-05-24T23:53:10Z"
            },
            {
                "name": "v0.18.1",
                "date": "2022-04-15T20:37:29Z"
            },
            {
                "name": "v0.18.0",
                "date": "2022-04-08T17:55:12Z"
            },
            {
                "name": "v0.16.0",
                "date": "2022-03-17T22:15:33Z"
            },
            {
                "name": "v0.15.0",
                "date": "2022-02-23T23:52:36Z"
            },
            {
                "name": "v0.14.0",
                "date": "2022-02-02T22:07:14Z"
            },
            {
                "name": "v0.13.0",
                "date": "2022-01-25T00:21:47Z"
            },
            {
                "name": "v0.12.0",
                "date": "2022-01-22T00:51:29Z"
            },
            {
                "name": "v0.11.6",
                "date": "2022-01-21T00:37:09Z"
            },
            {
                "name": "v0.11.5",
                "date": "2021-12-21T21:26:32Z"
            },
            {
                "name": "v0.11.4",
                "date": "2021-12-14T00:34:27Z"
            },
            {
                "name": "v0.11.3",
                "date": "2021-12-04T02:23:30Z"
            },
            {
                "name": "v0.11.2",
                "date": "2021-12-04T00:55:19Z"
            },
            {
                "name": "v0.11.1",
                "date": "2021-12-02T21:09:48Z"
            },
            {
                "name": "v0.10.5",
                "date": "2021-10-01T17:29:06Z"
            },
            {
                "name": "v0.10.4",
                "date": "2021-09-09T17:49:35Z"
            },
            {
                "name": "v0.10.3",
                "date": "2021-08-31T16:28:42Z"
            },
            {
                "name": "v0.10.2",
                "date": "2021-07-29T19:22:29Z"
            },
            {
                "name": "v0.10.1",
                "date": "2021-07-14T21:21:34Z"
            },
            {
                "name": "v0.10.0",
                "date": "2021-07-14T20:18:19Z"
            },
            {
                "name": "v0.9.4",
                "date": "2021-07-12T22:29:39Z"
            },
            {
                "name": "v0.9.3",
                "date": "2021-06-30T19:42:15Z"
            },
            {
                "name": "v0.9.2",
                "date": "2021-06-30T04:28:18Z"
            },
            {
                "name": "v0.9.1",
                "date": "2021-06-30T04:13:36Z"
            },
            {
                "name": "v0.9.0",
                "date": "2021-06-29T21:57:40Z"
            },
            {
                "name": "v0.8.0",
                "date": "2021-06-17T18:13:25Z"
            },
            {
                "name": "v0.7.0",
                "date": "2021-06-11T23:06:19Z"
            },
            {
                "name": "v0.6.4",
                "date": "2021-05-21T00:57:52Z"
            },
            {
                "name": "v0.6.3",
                "date": "2021-04-12T15:18:20Z"
            },
            {
                "name": "v0.6.2",
                "date": "2021-03-20T20:31:48Z"
            },
            {
                "name": "v0.6.1",
                "date": "2021-03-19T00:30:26Z"
            },
            {
                "name": "v0.6.0",
                "date": "2021-03-18T19:31:31Z"
            },
            {
                "name": "v0.4.0",
                "date": "2021-03-04T00:50:01Z"
            },
            {
                "name": "v0.3.0",
                "date": "2021-01-27T19:23:00Z"
            },
            {
                "name": "v0.2.6",
                "date": "2021-01-27T19:20:05Z"
            }
        ]
    }
}