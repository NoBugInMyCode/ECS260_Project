{
    "https://api.github.com/repos/hamcrest/hamcrest-php": {
        "forks": 44,
        "watchers": 6965,
        "stars": 6965,
        "languages": {
            "PHP": 251237
        },
        "commits": [
            "2025-01-01T06:33:44Z",
            "2025-01-01T05:09:52Z",
            "2024-11-24T15:17:53Z",
            "2024-11-24T15:05:24Z",
            "2024-10-19T14:00:42Z",
            "2024-07-08T08:13:58Z",
            "2024-05-03T13:50:55Z",
            "2024-05-03T13:45:43Z",
            "2023-12-14T11:00:58Z",
            "2022-11-06T05:05:05Z",
            "2022-08-20T13:29:30Z",
            "2022-08-20T12:02:39Z",
            "2022-05-24T12:49:30Z",
            "2022-02-04T09:26:57Z",
            "2022-02-04T09:26:42Z",
            "2022-02-03T13:10:00Z",
            "2022-02-03T13:08:32Z",
            "2021-08-12T08:29:30Z",
            "2020-07-09T08:09:16Z",
            "2020-07-09T08:07:52Z",
            "2020-07-08T17:09:13Z",
            "2020-07-06T18:30:46Z",
            "2020-07-05T21:46:46Z",
            "2020-07-05T11:59:49Z",
            "2020-07-05T11:57:09Z",
            "2020-07-05T11:51:50Z",
            "2020-07-05T11:41:56Z",
            "2020-07-05T11:39:20Z",
            "2020-07-05T11:37:16Z",
            "2020-07-05T11:36:56Z"
        ],
        "creation_date": "2013-12-31T04:35:35Z",
        "contributors": 24,
        "topics": [],
        "subscribers": 16,
        "readme": "This is the PHP port of Hamcrest Matchers\n=========================================\n\n[![tests](https://github.com/hamcrest/hamcrest-php/actions/workflows/tests.yml/badge.svg)](https://github.com/hamcrest/hamcrest-php/actions/workflows/tests.yml)\n\nHamcrest is a matching library originally written for Java, but\nsubsequently ported to many other languages.  hamcrest-php is the\nofficial PHP port of Hamcrest and essentially follows a literal\ntranslation of the original Java API for Hamcrest, with a few\nExceptions, mostly down to PHP language barriers:\n\n  1. `instanceOf($theClass)` is actually `anInstanceOf($theClass)`\n\n  2. `both(containsString('a'))->and(containsString('b'))`\n     is actually `both(containsString('a'))->andAlso(containsString('b'))`\n\n  3. `either(containsString('a'))->or(containsString('b'))`\n     is actually `either(containsString('a'))->orElse(containsString('b'))`\n\n  4. Unless it would be non-semantic for a matcher to do so, hamcrest-php\n     allows dynamic typing for it's input, in \"the PHP way\". Exception are\n     where semantics surrounding the type itself would suggest otherwise,\n     such as stringContains() and greaterThan().\n\n  5. Several official matchers have not been ported because they don't\n     make sense or don't apply in PHP:\n\n       - `typeCompatibleWith($theClass)`\n       - `eventFrom($source)`\n       - `hasProperty($name)` **\n       - `samePropertyValuesAs($obj)` **\n\n  6. When most of the collections matchers are finally ported, PHP-specific\n     aliases will probably be created due to a difference in naming\n     conventions between Java's Arrays, Collections, Sets and Maps compared\n     with PHP's Arrays.\n\n---\n** [Unless we consider POPO's (Plain Old PHP Objects) akin to JavaBeans]\n     - The POPO thing is a joke.  Java devs coin the term POJO's (Plain Old\n       Java Objects).\n\n\nUsage\n-----\n\nHamcrest matchers are easy to use as:\n\n```php\nHamcrest_MatcherAssert::assertThat('a', Hamcrest_Matchers::equalToIgnoringCase('A'));\n```\n\nAlternatively, you can use the global proxy-functions:\n\n```php\n$result = true;\n// with an identifier\nassertThat(\"result should be true\", $result, equalTo(true));\n\n// without an identifier\nassertThat($result, equalTo(true));\n\n// evaluate a boolean expression\nassertThat($result === true);\n\n// with syntactic sugar is()\nassertThat(true, is(true));\n```\n\n:warning: **NOTE:** the global proxy-functions aren't autoloaded by default, so you will need to load them first:\n\n```php\n\\Hamcrest\\Util::registerGlobalFunctions();\n```\n\nFor brevity, all of the examples below use the proxy-functions.\n\n\nDocumentation\n-------------\nA tutorial can be found on the [Hamcrest site](https://code.google.com/archive/p/hamcrest/wikis/TutorialPHP.wiki).\n\n\nAvailable Matchers\n------------------\n* [Array](../master/README.md#array)\n* [Collection](../master/README.md#collection)\n* [Object](../master/README.md#object)\n* [Numbers](../master/README.md#numbers)\n* [Type checking](../master/README.md#type-checking)\n* [XML](../master/README.md#xml)\n\n\n### Array\n\n* `anArray` - evaluates an array\n```php\nassertThat([], anArray());\n```\n\n* `hasItemInArray` - check if item exists in array\n```php\n$list = range(2, 7, 2);\n$item = 4;\nassertThat($list, hasItemInArray($item));\n```\n\n* `hasValue` - alias of hasItemInArray\n\n* `arrayContainingInAnyOrder` - check if array contains elements in any order\n```php\nassertThat([2, 4, 6], arrayContainingInAnyOrder([6, 4, 2]));\nassertThat([2, 4, 6], arrayContainingInAnyOrder([4, 2, 6]));\n```\n\n* `containsInAnyOrder` - alias of arrayContainingInAnyOrder\n\n* `arrayContaining` - An array with elements that match the given matchers in the same order.\n```php\nassertThat([2, 4, 6], arrayContaining([2, 4, 6]));\nassertthat([2, 4, 6], not(arrayContaining([6, 4, 2])));\n```\n\n* `contains` - check array in same order\n```php\nassertThat([2, 4, 6], contains([2, 4, 6]));\n```\n\n* `hasKeyInArray` - check if array has given key\n```php\nassertThat(['name'=> 'foobar'], hasKeyInArray('name'));\n```\n\n* `hasKey` - alias of hasKeyInArray\n\n* `hasKeyValuePair` - check if array has given key, value pair\n```php\nassertThat(['name'=> 'foobar'], hasKeyValuePair('name', 'foobar'));\n```\n* `hasEntry` - same as hasKeyValuePair\n\n* `arrayWithSize` - check array has given size\n```php\nassertthat([2, 4, 6], arrayWithSize(3));\n```\n* `emptyArray` - check if array is empty\n```php\nassertThat([], emptyArray());\n```\n\n* `nonEmptyArray`\n```php\nassertThat([1], nonEmptyArray());\n```\n\n### Collection\n\n* `emptyTraversable` - check if traversable is empty\n```php\n$empty_it = new EmptyIterator;\nassertThat($empty_it, emptyTraversable());\n```\n\n* `nonEmptyTraversable` - check if traversable isn't empty\n```php\n$non_empty_it = new ArrayIterator(range(1, 10));\nassertThat($non_empty_it, nonEmptyTraversable());\na\n```\n\n* `traversableWithSize`\n```php\n$non_empty_it = new ArrayIterator(range(1, 10));\nassertThat($non_empty_it, traversableWithSize(count(range(1, 10))));\n`\n```\n\n### Core\n\n* `allOf` - Evaluates to true only if ALL of the passed in matchers evaluate to true.\n```php\nassertThat([2,4,6], allOf(hasValue(2), arrayWithSize(3)));\n```\n\n* `anyOf` - Evaluates to true if ANY of the passed in matchers evaluate to true.\n```php\nassertThat([2, 4, 6], anyOf(hasValue(8), hasValue(2)));\n```\n\n* `noneOf` - Evaluates to false if ANY of the passed in matchers evaluate to true.\n```php\nassertThat([2, 4, 6], noneOf(hasValue(1), hasValue(3)));\n```\n\n* `both` + `andAlso` - This is useful for fluently combining matchers that must both pass.\n```php\nassertThat([2, 4, 6], both(hasValue(2))->andAlso(hasValue(4)));\n```\n\n* `either` + `orElse` - This is useful for fluently combining matchers where either may pass,\n```php\nassertThat([2, 4, 6], either(hasValue(2))->orElse(hasValue(4)));\n```\n\n* `describedAs` - Wraps an existing matcher and overrides the description when it fails.\n```php \n$expected = \"Dog\";\n$found = null;\n// this assertion would result error message as Expected: is not null but: was null\n//assertThat(\"Expected {$expected}, got {$found}\", $found, is(notNullValue()));\n// and this assertion would result error message as Expected: Dog but: was null\n//assertThat($found, describedAs($expected, notNullValue()));\n```\n\n* `everyItem` - A matcher to apply to every element in an array.\n```php\nassertThat([2, 4, 6], everyItem(notNullValue()));\n```\n\n* `hasItem` - check array has given item, it can take a matcher argument\n```php\nassertThat([2, 4, 6], hasItem(equalTo(2)));\n```\n\n* `hasItems` - check array has given items, it can take multiple matcher as arguments\n```php\nassertThat([1, 3, 5], hasItems(equalTo(1), equalTo(3)));\n```\n\n### Object\n\n* `hasToString` - check `__toString` or `toString` method\n```php\nclass Foo {\n    public $name = null;\n\n    public function __toString() {\n        return \"[Foo]Instance\";\n    }\n}\n$foo = new Foo;\nassertThat($foo, hasToString(equalTo(\"[Foo]Instance\")));\n```\n\n* `equalTo` - compares two instances using comparison operator '=='\n```php\n$foo = new Foo;\n$foo2 = new Foo;\nassertThat($foo, equalTo($foo2));\n```\n\n* `identicalTo` - compares two instances using identity operator '==='\n```php\nassertThat($foo, is(not(identicalTo($foo2))));\n```\n\n* `anInstanceOf` - check instance is an instance|sub-class of given class\n```php\nassertThat($foo, anInstanceOf(Foo::class));\n```\n\n* `any` - alias of `anInstanceOf`\n\n* `nullValue` check null\n```php\nassertThat(null, is(nullValue()));\n```\n\n* `notNullValue` check not null\n```php\nassertThat(\"\", notNullValue());\n```\n\n* `sameInstance` - check for same instance\n```php\nassertThat($foo, is(not(sameInstance($foo2))));\nassertThat($foo, is(sameInstance($foo)));\n```\n\n* `typeOf`- check type\n```php \nassertThat(1, typeOf(\"integer\"));\n```\n\n* `notSet` - check if instance property is not set\n```php\nassertThat($foo, notSet(\"name\"));\n```\n\n* `set` - check if instance property is set\n```php\n$foo->name = \"bar\";\nassertThat($foo, set(\"name\"));\n```\n\n### Numbers\n\n* `closeTo` - check value close to a range\n```php\nassertThat(3, closeTo(3, 0.5));\n```\n\n* `comparesEqualTo` - check with '=='\n```php\nassertThat(2, comparesEqualTo(2));\n```\n\n* `greaterThan` - check '>'\n```\nassertThat(2, greaterThan(1));\n```\n\n* `greaterThanOrEqualTo`\n```php\nassertThat(2, greaterThanOrEqualTo(2));\n```\n\n* `atLeast` - The value is >= given value\n```php\nassertThat(3, atLeast(2));\n```\n* `lessThan`\n```php\nassertThat(2, lessThan(3));\n```\n\n* `lessThanOrEqualTo`\n```php\nassertThat(2, lessThanOrEqualTo(3));\n```\n\n* `atMost` - The value is <= given value\n```php\nassertThat(2, atMost(3));\n```\n\n### String\n\n* `emptyString` - check for empty string\n```php\nassertThat(\"\", emptyString());\n```\n\n* `isEmptyOrNullString`\n```php\nassertThat(null, isEmptyOrNullString());\n```\n\n* `nullOrEmptyString`\n```php\nassertThat(\"\", nullOrEmptyString());\n```\n\n* `isNonEmptyString`\n```php\nassertThat(\"foo\", isNonEmptyString());\n```\n\n* `nonEmptyString`\n```php\nassertThat(\"foo\", nonEmptyString());\n```\n\n* `equalToIgnoringCase`\n```php\nassertThat(\"Foo\", equalToIgnoringCase(\"foo\"));\n```\n* `equalToIgnoringWhiteSpace`\n```php\nassertThat(\" Foo \", equalToIgnoringWhiteSpace(\"Foo\"));\n```\n\n* `matchesPattern` - matches with regex pattern\n```php\nassertThat(\"foobarbaz\", matchesPattern('/(foo)(bar)(baz)/'));\n```\n\n* `containsString` - check for substring\n```php\nassertThat(\"foobar\", containsString(\"foo\"));\n```\n\n* `containsStringIgnoringCase`\n```php\nassertThat(\"fooBar\", containsStringIgnoringCase(\"bar\"));\n```\n\n* `stringContainsInOrder`\n```php\nassertThat(\"foo\", stringContainsInOrder(\"foo\"));\n```\n\n* `endsWith` - check string that ends with given value\n```php\nassertThat(\"foo\", endsWith(\"oo\"));\n```\n\n* `startsWith` - check string that starts with given value\n```php\nassertThat(\"bar\", startsWith(\"ba\"));\n```\n\n### Type-checking\n\n* `arrayValue` - check array type\n```php\nassertThat([], arrayValue());\n```\n\n* `booleanValue`\n```php\nassertThat(true, booleanValue());\n```\n* `boolValue` - alias of booleanValue\n\n* `callableValue` - check if value is callable\n```php\n$func = function () {};\nassertThat($func, callableValue());\n```\n* `doubleValue`\n```php\nassertThat(3.14, doubleValue());\n```\n\n* `floatValue`\n```php\nassertThat(3.14, floatValue());\n```\n\n* `integerValue`\n```php\nassertThat(1, integerValue());\n```\n\n* `intValue` - alias of `integerValue`\n\n* `numericValue` - check if value is numeric\n```php\nassertThat(\"123\", numericValue());\n```\n\n* `objectValue` - check for object\n```php\n$obj = new stdClass;\nassertThat($obj, objectValue());\n```\n* `anObject`\n```php\nassertThat($obj, anObject());\n```\n\n* `resourceValue` - check resource type\n```php\n$fp = fopen(\"/tmp/foo\", \"w+\");\nassertThat($fp, resourceValue());\n```\n\n* `scalarValue` - check for scalar value\n```php\nassertThat(1, scalarValue());\n```\n\n* `stringValue`\n```php\nassertThat(\"\", stringValue());\n```\n\n### XML\n\n* `hasXPath` - check xml with a xpath\n```php\n$xml = <<<XML\n<books>\n  <book>\n    <isbn>1</isbn>   \n  </book>\n  <book>\n    <isbn>2</isbn>   \n  </book>\n</books>\nXML;\n\n$doc = new DOMDocument;\n$doc->loadXML($xml);\nassertThat($doc, hasXPath(\"book\", 2));\n```\n\n",
        "releases": [
            {
                "name": "2.0.1",
                "date": "2020-07-09T08:10:10Z"
            },
            {
                "name": "2.0.0",
                "date": "2016-02-25T15:05:12Z"
            },
            {
                "name": "v.1.2.2",
                "date": "2015-05-11T19:17:22Z"
            },
            {
                "name": "Global function autoloading fix",
                "date": "2015-01-20T19:35:07Z"
            }
        ]
    }
}