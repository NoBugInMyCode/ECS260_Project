{
    "https://api.github.com/repos/snail007/goproxy": {
        "forks": 3024,
        "watchers": 16034,
        "stars": 16034,
        "languages": {
            "Go": 77059,
            "Shell": 4825,
            "Dockerfile": 163
        },
        "commits": [
            "2024-08-31T03:53:26Z",
            "2024-05-24T15:22:19Z",
            "2024-05-22T07:20:20Z",
            "2024-05-22T07:18:42Z",
            "2024-05-18T03:12:08Z",
            "2024-05-18T03:09:21Z",
            "2024-04-24T02:52:47Z",
            "2024-04-24T02:52:21Z",
            "2024-04-22T10:04:34Z",
            "2024-04-19T02:32:46Z",
            "2024-04-13T03:12:11Z",
            "2024-04-11T01:50:05Z",
            "2024-04-11T01:48:37Z",
            "2024-03-19T14:04:51Z",
            "2024-03-19T14:03:23Z",
            "2024-03-19T09:20:48Z",
            "2024-03-19T09:20:00Z",
            "2024-03-19T09:19:13Z",
            "2024-03-19T09:17:56Z",
            "2024-03-19T04:55:31Z",
            "2024-03-19T04:54:44Z",
            "2023-10-24T04:45:51Z",
            "2023-08-05T10:41:22Z",
            "2023-08-05T10:18:42Z",
            "2023-08-01T02:53:22Z",
            "2023-07-12T04:16:16Z",
            "2023-07-11T06:06:23Z",
            "2023-06-08T04:50:33Z",
            "2023-06-08T04:49:19Z",
            "2023-06-08T04:45:17Z"
        ],
        "creation_date": "2017-09-11T11:10:28Z",
        "contributors": 2,
        "topics": [
            "dns-proxy",
            "encryption-proxy",
            "http",
            "http-proxy",
            "https-proxy",
            "kcptun",
            "reverse-proxy",
            "socket",
            "socks5",
            "socks5-proxy",
            "ss-proxy",
            "tcp",
            "tcp-proxy",
            "tls",
            "tls-proxy",
            "transparent-proxy",
            "udp",
            "udp-proxy",
            "upstream-proxies",
            "websocket-proxy"
        ],
        "subscribers": 443,
        "readme": "## GOPROXY Introduction\n\n<div align=\"center\">\n<img src=\"https://mirrors.goproxyauth.com/https://raw.githubusercontent.com/snail007/goproxy/master/doc/images/logo.jpg\" width=\"500\" height=\"auto\"/>\n\n[![stable](https://img.shields.io/badge/stable-stable-green.svg)](https://github.com/snail007/goproxy/) [![license](https://img.shields.io/github/license/snail007/goproxy.svg?style=plastic)]() [![download_count](https://img.shields.io/github/downloads/snail007/goproxy/total.svg?style=plastic)](https://github.com/snail007/goproxy/releases) [![download](https://img.shields.io/github/release/snail007/goproxy.svg?style=plastic)](https://github.com/snail007/goproxy/releases)\n\n---\n\nThe GoProxy is a high-performance http proxy, https proxy, socks5 proxy, ss proxy, websocket proxies, tcp proxies, udp proxies,  game shield, game proxies. Support forward proxies, reverse proxy, transparent proxy, internet nat proxies, https proxy load balancing, http proxy load balancing , socks5 proxies load balancing, socket proxy load balancing, ss proxy load balancing, TCP / UDP port mapping, SSH transit, TLS encrypted transmission, protocol conversion, anti-pollution DNS proxy, API authentication, speed limit, limit connection. Reverse proxies to help you expose a local server behind a NAT or firewall to the internet so that you or your visitors can access it directly and easily. \n\n</div>\n\n---\n\n## \u4e2d\u6587\u7528\u6237\u8bf7\u770b *\u4e2d\u6587\u8bf4\u660e*\uff0c\u4e2d\u6587\u4e0e\u82f1\u6587\u5185\u5bb9\u7684\u5b89\u88c5\u7b49\u8d44\u6e90\u94fe\u63a5\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u8c22\u8c22\u5408\u4f5c\uff01\n\n### [Official Website](https://www.goproxy.win/)\n### [\u5b98\u65b9\u7f51\u7ad9](https://www.goproxy.win/)\n### [\u70b9\u51fb\u6211\u89c2\u770b\u89c6\u9891\u6559\u7a0b](https://space.bilibili.com/472844633)\n\n- [\u4e2d\u6587 README ](https://github.com/snail007/goproxy/blob/master/README_ZH.md)\n- [\u4f7f\u7528\u624b\u518c](https://snail007.goproxyauth.com/goproxy/manual/zh/)\n- [\u4e0b\u8f7d\u5730\u5740](https://github.com/snail007/goproxy/releases)\n- [Download](https://github.com/snail007/goproxy/releases)\n- [Desktop Edition](https://github.com/snail007/proxy_admin_free)\n- [Android Global Edition](https://github.com/snail007/goproxy-ss-plugin-android) \n- [Android Server Edition](https://github.com/snail007/goproxy-android) \n- [SDK](https://github.com/snail007/goproxy-sdk)\n- [GORPOXY Manual](https://snail007.github.io/goproxy/manual/)\n- [GORPOXY Tutorial](https://snail007.github.io/goproxy)\n- [Free version VS commercial version](https://snail007.github.io/goproxy/page/free_vs_commercial/)\n\n### ProxyAdmin Demo\n\nAnd ProxyAdmin is a powerful web console of snail007/goproxy .\n\n![](https://mirrors.goproxyauth.com/https://github.com/snail007/proxy_admin_free/blob/master/res/images/socks5_en.gif)\n\n### What can it do?\n- Chained proxies, the program itself can be used as an proxies, and if it is set up, it can be used as a secondary proxies or even an N-level proxies.\n- Communication encryption, if the program is not a level one proxies, and the upper level proxies is also the program, then the communication between the upper level proxies and the upper level proxies can be encrypted, and the underlying tls high-intensity encryption is used, and the security is featureless.\n- Smart HTTP, SOCKS5 proxy, will automatically determine whether the visited website is blocked. If it is blocked, it will use the upstream proxies (provided that the upstream proxies is configured) to access the website; if the visited website is not blocked, in order to speed up the access, the proxies will Direct access to the website without using a upstream proxies.\n- Domain name black and white list, more free to control the way the website is accessed.\n- Cross-platform, whether you are windows, linux, mac, or even raspberry pie, you can run the proxy very well.\n- Multi-protocol support, support for HTTP(S), TCP, UDP, Websocket, SOCKS5 proxy.\n- TCP/UDP port forwarding.\n- Support intranet penetration, protocol supports TCP and UDP.\n- SSH relay, HTTP (S), SOCKS5 proxy supports SSH relay, the upper Linux server does not need any server, a local proxy can be happy online.\n- [KCP](https://github.com/xtaci/kcp-go) protocol support, HTTP(S), SOCKS5, SPS proxy supports KCP protocol to transmit data, reduce latency and improve browsing experience.\n- Dynamic selection of upstream proxies, through the external API, HTTP (S), SOCKS5, SPS proxies can achieve user-based or IP-based speed limit, connection limit, dynamic access to upstream.\n- Flexible upstream allocation, HTTP(S), SOCKS5 proxy can implement user- or IP-based speed limit, connection limit, and upper-level through configuration files.\n- Transparent HTTP (S) proxy, in conjunction with iptables, forwards the outgoing 80, 443 traffic directly to the proxy at the gateway, enabling non-aware intelligent router proxy.\n- Protocol conversion, which can convert existing HTTP(S) or SOCKS5 or SS proxy into one port and support HTTP(S) and SOCKS5 and SS proxy at the same time. Converted SOCKS5 and SS proxy. If the upstream is SOCKS5 proxy, then UDP is supported. Features while supporting powerful cascading authentication.\n- Custom underlying encrypted transmission, http(s)\\sps\\socks proxy can encrypt tcp data via tls standard encryption and kcp protocol on top of tcp, in addition to support custom encryption after tls and kcp, that is Said custom encryption and tls|kcp can be used in combination, the internal AES256 encryption, you only need to define a password when you use it.\n- Underlying compression efficient transmission, http(s)\\sps\\socks proxy can encrypt tcp data through custom encryption and tls standard encryption and kcp protocol on tcp, and can also compress data after encryption, that is, compression function And custom encryption and tls|kcp can be used in combination.\n- Secure DNS proxy, which can secure and prevent pollution DNS queries through encrypted proxy communication between the DNS proxy server provided by the local proxy and the upstream proxy.\n- Load balancing, high availability, HTTP(S)\\SOCKS5\\SPS proxies supports upstream load balancing and high availability, and multiple upstream repeat-P parameters can be used.\n- Specify the egress IP. The HTTP(S)\\SOCKS5\\SPS\\TCP proxy supports the client to connect with the ingress IP, and uses the ingress IP as the egress IP to access the target website. If the ingress IP is an intranet IP, the egress IP does not use the ingress IP.\n- Support speed limit, HTTP(S)\\SOCKS5\\SPS\\TCP proxy supports speed limit.\n- SOCKS5 proxies supports cascading certification.\n- The certificate parameter uses base64 data. By default, the -C, -K parameter is the path of the crt certificate and the key file. If it is the beginning of base64://, then the latter data is considered to be base64 encoded and will be used after decoding.\n- Support client IP black and white list, more secure control of client access to proxy service, if black and white list is set at the same time, then only whitelist is effective. Socks / HTTP(S) / SPS / TCP / UDP / DNS / intranet NAT The bridge/intranet NAT the tbridge and supports the client IP black and white list.\n- Range ports listen on, HTTP(S)\\SOCKS5\\SPS\\TCP proxy supports port range listening, avoiding starting too many processes and improving performance.\n\n### Why do you need it?\n\n- When for some reason we are unable to access our services elsewhere, we can establish a secure tunnel to access our services through multiple connected proxy nodes.\n- WeChat interface is developed locally for easy debugging.\n- Remote access to intranet machines.\n- Play LAN games with your friends.\n- I used to play only on the LAN, and now I can play anywhere.\n- Replace the sword inside Netnet, show IP internal Netcom, peanut shell and other tools.\n- ..\n\n\nThe manual on this page applies to the latest version of goproxy. Other versions may not be applicable. Please use the command according to your own instructions.\n\n\n### Joining the organization\n\n[Click to join the Telegram](https://t.me/snail007_goproxy)\n\n## Download and install \n\n### Quick installation\n\n0. If your VPS is a Linux 64-bit system, you only need to execute the following sentence to complete the automatic installation and configuration.\n\nTip: All operations require root privileges.\n\nThe free version performs this:\n\n```shell\nbash -c \"$(curl -s -L https://raw.githubusercontent.com/snail007/goproxy/master/install_auto.sh)\"\n```\n\nThe commercial version performs this:\n\n```shell\nbash -c \"$(curl -s -L https://raw.githubusercontent.com/snail007/goproxy/master/install_auto_commercial.sh)\"\n```\n\nThe installation is complete, the configuration directory is /etc/proxy. For more detailed usage, please refer to the manual directory above to learn more about the features you want to use.\nIf the installation fails or your vps is not a linux64-bit system, follow the semi-automatic steps below to install:\n\n### Manual installation\n\n1. Download the proxy\n\nDownload address: https://github.com/snail007/goproxy/releases/latest\n\nLet's take v7.9 as an example. If you have the latest version, please use the latest version of the link. Note that the version number in the download link below is the latest version number.\n\nThe free version performs this:\n\n```shell\ncd /root/proxy/\nwget https://github.com/snail007/goproxy/releases/download/v7.9/proxy-linux-amd64.tar.gz\n```\n\nThe commercial version performs this:\n\n```shell\ncd /root/proxy/\nwget https://github.com/snail007/goproxy/releases/download/v7.9/proxy-linux-amd64_commercial.tar.gz\n```\n\n2. Download the automatic installation script\n\nThe free version performs this:\n\n```shell\ncd /root/proxy/\nwget https://raw.githubusercontent.com/snail007/goproxy/master/install.sh\nchmod +x install.sh\n./install.sh\n```\n\nThe commercial version performs this:\n\n```shell\ncd /root/proxy/\nwget https://raw.githubusercontent.com/snail007/goproxy/master/install_commercial.sh\nchmod +x install_commercial.sh\n./install_commercial.sh\n```\n\n## UPDATE\nproxy update use mirror to download, if your update has error with mirror, you can set an environment variable `UPDATE_MIRROR=false`  \nWindows: `set UPDATE_MIRROR=false` then `proxy update`  \nLinux: `export UPDATE_MIRROR=false`  then `proxy update`  \n\n### Linux\n\n```shell\nproxy update\n```\n\nForce update.\n\n```shell\nproxy update -f\n```\n\n### Windows\n\nFor example `proxy` placed in `c:\\gp\\proxy`.\n\n```bat\nc:\\\ncd gp\nproxy update\n```\n\nForce update.\n\n```shell\nc:\\\ncd gp\nproxy update -f\n```\n\n## License\nProxy is licensed under GPLv3 license.\n\n## Contact\nOfficial Telegram Group: [goproxy](https://t.me/snail007_goproxy)\n\n### Source code declaration\n\nThe author of this project found that a large number of developers based on the project for secondary development or using a large number of core code of the project without complying with the GPLv3 agreement, which seriously violates the original intention of using the GPLv3 open source agreement in this project. In view of this situation, the project adopts the source. The code delays the release strategy, to a certain extent, to curb these behaviors that do not respect open source and do not respect the labor results of others.\nThis project will continue to update the iterations and continue to release the full platform binary program, providing you with powerful and convenient proxies tools.\nIf you have customized, business needs, please send an email to `arraykeys@gmail.com`\n\n## Goproxy Manual\n\n\n## How to Install\n\n### 1. Linux Install\n\n[click me get Linux installation](https://github.com/snail007/goproxy/blob/master/README_ZH.md#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85-goproxy)\n\n### 2. MacOS Install\n\n[click me get MacOS installation](https://github.com/snail007/proxy_admin_free/blob/master/README_ZH.md#%E8%A7%86%E9%A2%91%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B)\n\n### 3. Windows Install\n\n[click me get Windows installation](https://github.com/snail007/proxy_admin_free/blob/master/README_ZH.md#%E8%A7%86%E9%A2%91%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B)\n\n### 4. Others Install\n\n[click me get Windows installation](https://github.com/snail007/goproxy/blob/master/README_ZH.md#%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85-goproxy)\n\n## Purchase Commercial Edition\n\nThis manual describes the functions, all of which are included in the commercial version; the free version of advanced\nfunctional parameters such as authentication is not included;  \nIf you encounter some commands when you use the free version to execute some commands, a prompt similar to the following\nxxx parameter does not exist, indicating that this parameter is a function of the commercial version.   \n`err: unknown long flag '-a'`   \nComparison between the features of the free version and the commercial version, detailed operations on how to purchase\nand use the commercial\nversion [please click here to view](https://snail007.goproxyauth.com/goproxy/page/free_vs_commercial_en/)\n\n## First Start\n\n### 1. Environment\n\nThe manual tutorial, the default system is linux, the program is proxy; all operations require root privileges;\n\nIf you are windows, please use the windows version of proxy.exe.\n\n### 2. Using configuration files\n\nThe next tutorial will introduce the usage method through the command line parameters, or you can get the parameters by reading the configuration file.\n\nThe specific format is to specify the configuration file by the @ symbol, for example: proxy @configfile.txt\n\nThe format in configfile.txt is that the first line is the name of the subcommand, and the second line starts with one parameter per line.\n\nFormat: `parameter Parameter value`, direct write parameter without parameter value, for example: --nolog\n\nFor example, the contents of configfile.txt are as follows:\n\n```shell  \nHttp  \n-t tcp  \n-p :33080  \n--forever  \n```  \n\n### 3. Debug output\n\nBy default, the information output by the log does not include the number of file lines. In some cases, in order to troubleshoot the program, the problem is quickly located.\n\nYou can use the --debug parameter to output the number of lines of code and milliseconds.\n\n### 4. Using log files\n\nBy default, the log is displayed directly in the console. If you want to save to a file, you can use the --log parameter.\n\nFor example: --log proxy.log, the log will be output to the proxy.log to facilitate troubleshooting.\n\nLogging INFO and WARN by default, you can set `--warn` to output warn logging only.\n\n### 5. Generate the certificate file required for encrypted communication\n\nThe http, tcp, udp proxy process communicates with the upstream. For security, we use encrypted communication. Of course, we can choose not to encrypt the communication. All the communication and the upstream communication in this tutorial are encrypted, and the certificate file is required.\n\n1. Generate a self-signed certificate and key file with the following command.  \n   `proxy keygen -C proxy`  \n   The certificate file proxy.crt and the key file proxy.key will be generated under the current program directory.\n\n2. Use the following command to generate a new certificate using the self-signed certificate proxy.crt and the key file proxy.key: goproxy.crt and goproxy.key.  \n   `proxy keygen -s -C proxy -c goproxy`  \n   The certificate file goproxy.crt and the key file goproxy.key will be generated under the current program directory.\n\n3. By default, the domain name inside the certificate is random and can be specified using the `-n test.com` parameter.\n\n4. More usage: `proxy keygen --help`.\n\n### 6. Running in the background\n\nAfter the proxy is executed by default, you cannot close the command line if you want to keep the proxy running.\n\nIf you want to run the proxy in the background, the command line can be closed, just add the --daemon parameter at the end of the command.\n\nFor example:\n\n`proxy http -t tcp -p \"0.0.0.0:38080\" --daemon`\n\n### 7. Guardian running\nThe daemon runs the parameter --forever, for example: `proxy http --forever` ,\n\nThe proxy will fork the child process, and then monitor the child process. If the child process exits abnormally, restart the child process after 5 seconds.\n\nThis parameter is matched with the background running parameter --daemon and log parameter --log, which can guarantee that the proxy will always execute in the background without accidentally exiting.\n\nAnd you can see the output log content of the proxy through the log file.\n\nFor example: `proxy http -p \":9090\" --forever --log proxy.log --daemon`\n\n### 8. Security advice\n\nWhen the VPS is behind the nat device, the vps network interface IP is the intranet IP. At this time, you can use the -g parameter to add the vps external network ip to prevent the infinite loop.\n\nSuppose your vps external network ip is 23.23.23.23. The following command sets 23.23.23.23 with the -g parameter.\n\n`proxy http -g \"23.23.23.23\"`\n\n### 9. Load balancing and high availability\n\nThe HTTP(S)\\SOCKS5\\SPS proxy supports upper-level load balancing and high availability, and multiple upstream repeat-P parameters can be used.\n\nThe load balancing policy supports five types, which can be specified by the `--lb-method` parameter:\n\nRoundrobin used in turn\n\nLeastconn uses the minimum number of connections\n\nLeasttime uses the least connection time\n\nHash uses a fixed upstream based on the client address\n\nWeight Select a upstream according to the weight and number of connections of each upstream\n\nprompt:\n\n1. The load balancing check interval can be set by `--lb-retrytime` in milliseconds.\n\n2. The load balancing connection timeout can be set by `--lb-timeout` in milliseconds.\n\n3. If the load balancing policy is weight, the -P format is: 2.2.2.2: 3880?w=1, where 1 is the weight and an integer greater than 0.\n\n4. If the load balancing policy is hash, the default is to select the upstream based on the client address. You can select the upstream by using the destination address of the access `--lb-hashtarget`.\n\n5. The TCP proxies has no parameter `--lb-hashtarget`.\n\n6. Default is load balancing + high availability mode. If the parameter `--lb-onlyha` is used, only the high availability mode is used, then a node is selected according to the load balancing strategy, and this node will be used until it is not alive, then another node will be selected for using, thus cycling.\n\n7. If the all nodes are not alive, a random node will be selected for using.\n\n### 10. Agent springboard jump\n\nHttp (s) agent, SPS agent, intranet penetration, tcp agent support the connection of upstreams through intermediate third-party agents,\n\nThe parameters are: --jumper, all the formats are as follows:\n\n```text  \nhttp://username:password@host:port  \nhttp://host:port  \nhttps://username:password@host:port  \nhttps://host:port  \nsocks5://username:password@host:port  \nsocks5://host:port  \nsocks5s://username:password@host:port  \nsocks5s://host:port  \nss://method:password@host:port  \n```  \n\nHttp,socks5 represents the normal http and socks5 proxy.\n\nHttps,socks5s represents the http and socks5 agents protected by tls.\n\nThat is http proxy over TLS, socks over TLS.\n\n### 11. Domain Name Black and White List\n\nThe socks/http(s)/sps proxy supports domain name black and white lists.\n\nUse the --stop parameter to specify a domain name blacklist file, then the connection will be disconnected when the user connects these domains in the file.\n\nSpecify a domain name whitelist file with the --only parameter, then the connection will be disconnected when the user connects to a domain other than those domains in the file.\n\nIf both --stop and --only are set, then only --only will work.\n\nThe format of the black and white domain name list file is as follows:\n\n```text  \n**.baidu.com  \n*.taobao.com  \nA.com  \n192.168.1.1  \n192.168.*.*  \n?.qq.com  \n```  \n\nDescription:\n\n1. One domain name per line, domain name writing supports wildcards `*` and `?`, `*` represents any number of characters, `?` represents an arbitrary character,\n\n2.`**.baidu.com` Matches no matter how many levels all suffixes are ..baidu.com`.\n\n3.`*.taobao.com` The matching suffix is the third-level domain name of `.taobao.com`.\n\n4. It can also be an IP address directly.\n\n5.`#` at the beginning of the comment.\n\n### 12. Port Black List \n\nsocks/http(s)/sps proxy all support port blacklist. \n\nUse the `--stop-port` parameter to specify a port blacklist file, then when the user connects to the ports in the file, the connection can be made. \n\nThe port blacklist file content format is as follows: \n\n```text \n3306  \n22 \n``` \n\nNote: \n1. One port per line. \n2. The ones starting with `#` are comments.\n\n### 13. Client IP Blacklist and Whitelist\n\nsocks/http(s)/sps/tcp/udp/dns/ intranet penetration bridge/intranet penetration tbridge, support client IP black and white list.\n\nUse the --ip-deny parameter to specify a client IP blacklist list file, then the connection will be disconnected when the user's IP is in this file.\n\nUse the --ip-allow parameter to specify a client IP whitelist file, then the connection will be disconnected when the user's IP is not in the file.\n\nIf both --ip-deny and --ip-allow are set, then only --ip-allow will work.\n\nThe format of the client IP blacklist and whitelist file is as follows:\n\n```text  \n192.168.1.1  \n192.168.*.*  \n192.168.1?.*  \n```  \n\nDescription:\n\n1. One domain name per domain, domain name writing supports wildcards `*` and `?`, `*` represents any number of characters, `?` represents an arbitrary character.\n\n2.`#` at the beginning of the comment.\n\n### 14. Protocol loading file\n\nThere are many places in the proxy's various proxy functions to set a file. For example: --blocked Specifies a domain name list file that goes directly to the upper level. The parameter value is the path of the file.\n\nIf the parameter supports the protocol loading file, the file path can be not only the file path, but also:\n\na. The base64 encoding at the beginning of \"base64://\" indicates the contents of the above file, for example: base64://ajfpoajsdfa=\n\nb. \"str://\" at the beginning of the English comma separated multiple, such as: str://xxx, yyy\n\nThe proxy's blocked, direct, stop, only, hosts, resolve.rules, rewriter.rules, ip.allow, ip.deny files support protocol loading.\n\n\n### 15. Concurrent client connections\n\nsocks5\\sps\\http proxies, the parameter that controls the number of concurrent client connections is: `--max-conns-rate`, which controls the maximum number of client connections per second, default: 20, 0 is unlimited\n\n### 16. Listen on multiple ports\n\n\"tcp / http / socks / sps\" supports listen on multiple ports and range ports.\nUnder normal circumstances, it is sufficient to listen on one port, but if you need to listen on multiple ports, the -p parameter is supported.\nThe format is: `-p 0.0.0.0:80,0.0.0.0:443,.0.0.0.0:8000-9000,:5000-6000`, more The bindings can be separated by commas.\n\n## 1.HTTP Proxies\n\n### 1.1. Ordinary level HTTP proxy\n\n![1.1](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/http-1.png)\n\n`proxy http -t tcp -p \"0.0.0.0:38080\"`\n\nListen port argument `-p` can be:\n\n```text\n  -p \":8081\"  listen on 8081\n  -p \":8081,:8082\"  listen on 8081 and 8082\n  -p \":8081,:8082,:9000-9999\" listen on 8081 and 8082 and 9000 and 9001 to 9999, 1002 total ports  \n```\n\n### 1.2. Ordinary secondary HTTP proxy\n\n![1.2](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/http-2.png)\n\nUse local port 8090, assuming the upstream HTTP proxy is `22.22.22.22:8080`\n\n`proxy http -t tcp -p \"0.0.0.0:8090\" -T tcp -P \"22.22.22.22:8080\" `\n\nWe can also specify the black and white list file of the website domain name, one domain name per line, the matching rule is the rightmost match, for example: baidu.com, the match is *.*.baidu.com, the blacklist domain name goes directly to the upstream agent, whitelist The domain name does not go to the upstream agent.\n\n`proxy http -p \"0.0.0.0:8090\" -T tcp -P \"22.22.22.22:8080\" -b blocked.txt -d direct.txt`\n\n### 1.3.HTTP secondary agent (encryption)\n\n> Note: The `proxy.crt` and `proxy.key` used by the secondary proxy should be consistent with the primary proxy.\n\n![1.3](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/http-tls-2.png)  \nLevel 1 HTTP proxy (VPS, IP: 22.22.22.22)  \n`proxy http -t tls -p \":38080\" -C proxy.crt -K proxy.key`\n\nSecondary HTTP proxy (local Linux)  \n`proxy http -t tcp -p \":8080\" -T tls -P \"22.22.22.22:38080\" -C proxy.crt -K proxy.key`  \nThen access the local port 8080 is to access the proxy port 38080 on the VPS.\n\nSecondary HTTP proxy (local windows)  \n`proxy.exe http -t tcp -p \":8080\" -T tls -P \"22.22.22.22:38080\" -C proxy.crt -K proxy.key`  \nThen set your windos system, the proxy that needs to go through the proxy Internet program is http mode, the address is: 127.0.0.1, the port is: 8080, the program can access the Internet through vps through the encrypted channel.\n\n### 1.4.HTTP Level 3 Agent (Encryption)\n![1.3](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/http-tls-3.png)  \nLevel 1 HTTP proxy VPS_01, IP: 22.22.22.22  \n`proxy http -t tls -p \":38080\" -C proxy.crt -K proxy.key`  \nSecondary HTTP proxy VPS_02, IP: 33.33.33.33  \n`proxy http -t tls -p \":28080\" -T tls -P \"22.22.22.22:38080\" -C proxy.crt -K proxy.key`  \nLevel 3 HTTP proxy (local)  \n`proxy http -t tcp -p \":8080\" -T tls -P \"33.33.33.33:28080\" -C proxy.crt -K proxy.key`  \nThen accessing the local port 8080 is to access the proxy port 38080 on the primary HTTP proxy.\n\n### 1.5.Basic certification\nFor the proxy HTTP protocol, we can perform Basic authentication. The authenticated username and password can be specified on the command line.  \n`proxy http -t tcp -p \":33080\" -a \"user1:pass1\" -a \"user2:pass2\"`  \nFor multiple users, repeat the -a parameter.  \nIt can also be placed in a file in the format of a \"username:password\" and then specified with -F.  \n`proxy http -t tcp -p \":33080\" -F auth-file.txt`\n\nIn addition, the http(s) proxy also integrates external HTTP API authentication. We can specify an http url interface address with the --auth-url parameter.  \nThen when there is a user connection, the proxy will request the url in GET mode, and bring the following four parameters. If the HTTP status code 204 is returned, the authentication is successful.  \nIn other cases, the authentication failed.  \nFor example:  \n`proxy http -t tcp -p \":33080\" --auth-url \"http://test.com/auth.php\"`  \nWhen the user connects, the proxy will request the url (\"http://test.com/auth.php\") in GET mode.  \nTake five parameters: user, pass, ip, local_ip, target:  \nHttp://test.com/auth.php?user={USER}&pass={PASS}&ip={IP}&local_ip={LOCAL_IP}&target={TARGET}  \nUser: username  \nPass: password  \nIp: User's IP, for example: 192.168.1.200  \nLocal_ip: IP of the server accessed by the user, for example: 3.3.3.3  \nTarget: URL accessed by the user, for example: http://demo.com:80/1.html or https://www.baidu.com:80\n\nIf there is no -a or -F or --auth-url parameter, the Basic authentication is turned off.\n\n### 1.6. HTTP proxy traffic is forced to go to the upper HTTP proxy\nBy default, the proxy will intelligently determine whether a website domain name is inaccessible. If it is not accessible, it will go to the upper level HTTP proxy. With --always, all HTTP proxy traffic can be forced to go to the upper HTTP proxy.  \n`proxy http --always -t tls -p \":28080\" -T tls -P \"22.22.22.22:38080\" -C proxy.crt -K proxy.key`\n\n### 1.7.HTTP(S) via SSH relay\n![1.7](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/http-ssh-1.png)  \nDescription: The principle of ssh transfer is to use the forwarding function of ssh, that is, after you connect to ssh, you can access the target address through ssh proxy.  \nSuppose there is: vps\n- IP is 2.2.2.2, ssh port is 22, ssh username is: user, ssh user password is: demo\n- The user's ssh private key name is user.key\n\n#### *1.7.1 How to ssh username and password*\nLocal HTTP(S) proxy port 28080, executing:  \n`proxy http -T ssh -P \"2.2.2.2:22\" -u user -D demo -t tcp -p \":28080\"`\n#### *1.7.2 How to ssh username and key*\nLocal HTTP(S) proxy port 28080, executing:  \n`proxy http -T ssh -P \"2.2.2.2:22\" -u user -S user.key -t tcp -p \":28080\"`\n\n### 1.8.KCP protocol transmission\n![1.8](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/http-kcp.png)  \nThe KCP protocol requires the --kcp-key parameter to set a password for encrypting and decrypting data.\n\nLevel 1 HTTP proxy (VPS, IP: 22.22.22.22)  \n`proxy http -t kcp -p \":38080\" --kcp-key mypassword`\n\nSecondary HTTP proxy (local Linux)  \n`proxy http -t tcp -p \":8080\" -T kcp -P \"22.22.22.22:38080\" --kcp-key mypassword`  \nThen access the local port 8080 is to access the proxy port 38080 on the VPS, the data is transmitted through the kcp protocol, note that the kcp is the udp protocol, so the firewall needs to release the 380p udp protocol.\n\n### 1.9 HTTP(S) Reverse Proxy\n![1.9](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/fxdl.png)  \nThe proxy not only supports the proxy setting in other software, but also provides proxy services for other software. It also supports directly parsing the requested website domain name to the proxy listening ip, and then the proxy listens to the 80 and 443 ports, then the proxy will automatically You proxy access to the HTTP(S) website you need to access.\n\nHow to use:  \nOn the \"last level proxy proxy\" machine, because the proxy is to be disguised as all websites, the default HTTP port of the website is 80, HTTPS is 443, and the proxy can listen to ports 80 and 443. Parameters -p multiple addresses with commas segmentation.  \n`proxy http -t tcp -p :80,:443`\n\nThis command starts a proxy agent on the machine, and listens to ports 80 and 443 at the same time. It can be used as a normal proxy, or directly resolve the domain name that needs to be proxyed to the IP of this machine.\n\nIf there is a upstream agent, then refer to the above tutorial to set the upstream, the use is exactly the same.  \n`proxy http -t tcp -p :80,:443 -T tls -P \"2.2.2.2:33080\" -C proxy.crt -K proxy.key`\n\nNote:  \nThe DNS resolution result of the server where the proxy is located cannot be affected by the custom resolution,\notherwise it will be infinite loop. The proxy proxy should specify the `--dns-address 8.8.8.8` parameter.\n\n### 1.10 HTTP(S) Transparent Proxy\nThis mode needs to have a certain network foundation. If the related concepts are not understood, please search for it yourself.  \nAssuming the proxy is now running on the router, the startup command is as follows:  \n`proxy http -t tcp -p :33080 -T tls -P \"2.2.2.2:33090\" -C proxy.crt -K proxy.key`\n\nThen add the iptables rule, here are the reference rules:\n```shell  \n#Upper proxy server IP address:  \nProxy_server_ip=2.2.2.2  \n\n#\u8def\u7531\u5668Running port for proxy listening:  \nProxy_local_port=33080  \n\n#The following does not need to be modified  \n#create a new chain named PROXY  \nIptables -t nat -N PROXY  \n\n# Ignore your PROXY server's addresses  \n# It's very IMPORTANT, just be careful.  \n\nIptables -t nat -A PROXY -d $proxy_server_ip -j RETURN  \n\n# Ignore LANs IP address  \nIptables -t nat -A PROXY -d 0.0.0.0/8 -j RETURN  \nIptables -t nat -A PROXY -d 10.0.0.0/8 -j RETURN  \nIptables -t nat -A PROXY -d 127.0.0.0/8 -j RETURN  \nIptables -t nat -A PROXY -d 169.254.0.0/16 -j RETURN  \nIptables -t nat -A PROXY -d 172.16.0.0/12 -j RETURN  \nIptables -t nat -A PROXY -d 192.168.0.0/16 -j RETURN  \nIptables -t nat -A PROXY -d 224.0.0.0/4 -j RETURN  \nIptables -t nat -A PROXY -d 240.0.0.0/4 -j RETURN  \n\n# Anything to port 80 443 should be redirected to PROXY's local port  \nIptables -t nat -A PROXY -p tcp --dport 80 -j REDIRECT --to-ports $proxy_local_port  \nIptables -t nat -A PROXY -p tcp --dport 443 -j REDIRECT --to-ports $proxy_local_port  \n\n# Apply the rules to nat client  \nIptables -t nat -A PREROUTING -p tcp -j PROXY  \n# Apply the rules to localhost  \nIptables -t nat -A OUTPUT -p tcp -j PROXY  \n```  \n- Clear the entire chain iptables -F Chain names such as iptables -t nat -F PROXY\n- Delete the specified user-defined chain iptables -X chain name such as iptables -t nat -X PROXY\n- Remove rules from the selected chain iptables -D chain name Rule details such as iptables -t nat -D PROXY -d 223.223.192.0/255.255.240.0 -j RETURN\n\n### 1.11 Custom DNS\n--dns-address and --dns-ttl parameters, used to specify the dns (--dns-address) used by the proxy to access the domain name.  \nAnd the analysis result cache time (--dns-ttl) seconds, to avoid system dns interference to the proxy, in addition to the cache function can also reduce the dns resolution time to improve access speed.  \nFor example:  \n`proxy http -p \":33080\" --dns-address \"8.8.8.8:53\" --dns-ttl 300`\n\n`--dns-address` supports multiple dns addresses, load balancing, separated by comma. For example: `--dns-address \"1.1.1.1:53,8.8.8.8:53\"`\n\nYou can also use the parameter `--dns-interface` to specify the bandwidth used for dns resolution,\nfor example: `--dns-interface eth0`, dns resolution will use the eth0 bandwidth, this parameter must be set to `--dns-address` to be effective.\n\n### 1.12 Custom encryption\nThe proxy's http(s) proxy can encrypt tcp data via tls standard encryption and kcp protocol on top of tcp, in addition to support customization after tls and kcp.  \nEncryption, that is to say, custom encryption and tls|kcp can be used in combination. The internal use of AES256 encryption, you only need to define a password when you use it.  \nEncryption is divided into two parts, one is whether the local (-z) encryption and decryption, and the other is whether the transmission with the upstream (-Z) is encrypted or decrypted.  \nCustom encryption requires both ends to be proxy. The following two levels and three levels are used as examples:\n\nSecondary instance\n\nExecute on level 1 vps (ip: 2.2.2.2):  \n`proxy http -t tcp -z demo_password -p :7777`  \nLocal secondary execution:  \n`proxy http -T tcp -P 2.2.2.2:777 -Z demo_password -t tcp -p :8080`  \nIn this way, when the website is accessed through the local agent 8080, the target website is accessed through encrypted transmission with the upstream.\n\n\nThree-level instance\n\nExecute on level 1 vps (ip: 2.2.2.2):  \n`proxy http -t tcp -z demo_password -p :7777`  \nExecute on the secondary vps (ip: 3.3.3.3):  \n`proxy http -T tcp -P 2.2.2.2:7777 -Z demo_password -t tcp -z other_password -p :8888`  \nLocal three-level execution:  \n`proxy http -T tcp -P 3.3.3.3:8888 -Z other_password -t tcp -p :8080`  \nIn this way, when the website is accessed through the local agent 8080, the target website is accessed through encrypted transmission with the upstream.\n\n### 1.13 Compressed transmission\nThe proxy http(s) proxy can encrypt tcp data through tls standard encryption and kcp protocol on top of tcp, and can also compress data before custom encryption.  \nThat is to say, compression and custom encryption and tls|kcp can be used in combination. Compression is divided into two parts, one part is local (-m) compression transmission.  \nPart of it is compressed with the upstream (-M) transmission.  \nCompression requires both sides to be proxy. Compression also protects (encrypted) data to a certain extent. The following uses Level 2 and Level 3 as examples:\n\nSecondary instance\n\nExecute on level 1 vps (ip: 2.2.2.2):  \n`proxy http -t tcp -m -p :7777`  \nLocal secondary execution:  \n`proxy http -T tcp -P 2.2.2.2:777 -M -t tcp -p :8080`  \nIn this way, when the website is accessed through the local agent 8080, the target website is accessed through compression with the upstream.\n\n\nThree-level instance\n\nExecute on level 1 vps (ip: 2.2.2.2):  \n`proxy http -t tcp -m -p :7777`  \nExecute on the secondary vps (ip: 3.3.3.3):  \n`proxy http -T tcp -P 2.2.2.2:7777 -M -t tcp -m -p :8888`  \nLocal three-level execution:  \n`proxy http -T tcp -P 3.3.3.3:8888 -M -t tcp -p :8080`  \nIn this way, when the website is accessed through the local agent 8080, the target website is accessed through compression with the upstream.\n\n### 1.14 Load Balancing\n\nThe HTTP(S) proxy supports upper-level load balancing, and multiple upstream repeat-P parameters can be used.\n\n`proxy http --lb-method=hash -T tcp -P 1.1.1.1:33080 -P 2.1.1.1:33080 -P 3.1.1.1:33080`\n\n### 1.14.1 Setting the retry interval and timeout time\n\n`proxy http --lb-method=leastconn --lb-retrytime 300 --lb-timeout 300 -T tcp -P 1.1.1.1:33080 -P 2.1.1.1:33080 -P 3.1.1.1:33080 -t tcp - p :33080`\n\n### 1.14.2 Setting weights\n\n`proxy http --lb-method=weight -T tcp -P 1.1.1.1:33080?w=1 -P 2.1.1.1:33080?w=2 -P 3.1.1.1:33080?w=1 -t tcp - p :33080`\n\n### 1.14.3 Use the target address to select the upstream\n\n`proxy http --lb-hashtarget --lb-method=hash -T tcp -P 1.1.1.1:33080 -P 2.1.1.1:33080 -P 3.1.1.1:33080 -t tcp -p :33080`\n\n### 1.15 Speed limit\n\nThe speed limit is 100K, which can be specified by the `-l` parameter, for example: 100K 2000K 1M . 0 means no limit.\n\n`proxy http -t tcp -p 2.2.2.2:33080 -l 100K`\n\n### 1.16 Specifying Outgoing IP\n\nThe `--bind-listen` parameter can be used to open the client connection with the portal IP, and use the portal IP as the outgoing IP to access the target website. If the incorrect IP is bound, the proxy will not work. At this point, the proxy will try to bind the target without binding the IP, and the log will prompt.\n\n`proxy http -t tcp -p 2.2.2.2:33080 --bind-listen`\n\n#### Flexible Outgoing IP\n\nAlthough the above `--bind-listen` parameter can specify the outgoing IP, the `entry IP` and the `outgoing IP` cannot be referenced artificially. If you want the ingress IP and the egress IP to be different, you can use the `--bind-ip` parameter, format: `IP:port`, for example: `1.1.1.1:8080`, `[2000:0:0:0:0 :0:0:1]:8080`. For multiple binding requirements, the `--bind-ip` parameter can be repeated.\n\nFor example, this machine has IP `5.5.5.5`, `6.6.6.6`, and monitors two ports `8888` and `7777`, the command is as follows:\n\n`Proxy tcp -t tcp -p :8888,:7777 --bind-ip 5.5.5.5:7777 --bind-ip 6.6.6.6:8888 -T tcp -P 2.2.2.2:3322`\n\nThen the client access port `7777`, the outgoing IP is `5.5.5.5`, access port `8888`, the outgoing IP is `6.6.6.6`, if both `--bind-ip` and `--bind- are set at the same time listen`,`--bind-ip` has higher priority.\ns\nIn addition, the `IP` part of the `--bind-ip` parameter supports specifying the `network interface name`, `wildcards`, and more than one can be specified. The detailed description is as follows:\n\n- Specify the network interface name, such as: `--bind-ip eth0:7777`, and then the client accesses the `7777` port, and the egress IP is the IP of the eth0 network interface.\n- The network interface name supports wildcards, such as: `--bind-ip eth0.*:7777`, then the client accesses the port `7777`, and the egress IP is randomly selected from the IP of the network interface starting with `eth0.`.\n- IP supports wildcards, such as: `--bind-ip 192.168.?.*:777`, then the client accesses the `7777` port, the  outgoing IP is all the IPs of the machine, and matches the IP of `192.168.?.*` A randomly selected one.\n- It can also be several combinations of network interface name and IP, and several selective divisions using half-width, such as: `-bind-ip pppoe??,192.168.?.*:7777`, and then the client accesses the `7777` port , The  outgoing IP is the machine's network interface name matching `pppoe??`\n  It is randomly selected from the IP matching `192.168.?.*` in the machine IP.\n- The wildcard character `*` represents 0 to any character, `? `Represents 1 character.\n- If the IP of the network interface changes, it will take effect in real time.\n- You can use the `--bind-refresh` parameter to specify the interval to refresh the local network interface information, the default is `5`, the unit is second.\n\n### 1.17 Certificate parameters use base64 data\n\nBy default, the -C, -K parameter is the path to the crt certificate and the key file.\n\nIf it is the beginning of base64://, then the latter data is considered to be base64 encoded and will be used after decoding.\n\n### 1.18 Intelligent mode\nIntelligent mode setting, can be one of intelligent|direct|parent.  \nThe default is: parent.  \nThe meaning of each value is as follows:  \n`--intelligent=direct`, the targets in the blocked are not directly connected.  \n`--intelligent=parent`, the target that is not in the direct is going to the higher level.  \n`--intelligent=intelligent`, blocked and direct have no targets, intelligently determine whether to use the upstream access target.\n\n### 1.19 Help\n`proxy help http`\n\n## 2.TCP Proxies\n\n### 2.1. Ordinary level TCP proxy\n![2.1](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/tcp-1.png)  \nLocal execution:  \n`proxy tcp -p \":33080\" -T tcp -P \"192.168.22.33:22\"`  \nThen access the local port 33080 is to access port 22 of 192.168.22.33.\n\nThe `-p` parameter supports :\n\n```text\n-p \":8081\" listen on 8081\n-p \":8081,:8082\" listen on 8081 and 8082\n-p \":8081,:8082,:9000-9999\" listen on 8081 and 8082 and 9000, 9001 to 9999 for a total of 1002 ports\n```\n\nIf the number of local listening ports is greater than 1, the corresponding upper port corresponding to the local port will be connected, and the port in `-P` will be ignored.\n\nIf you need a connection from all ports, connect to the upper specified port, you can add the parameter `--lock-port`.\n\nsuch as:\n\n`proxy tcp -p \":33080-33085\" -T tcp -P \"192.168.22.33:0\"`\n\nThen the connection of the `33080` port will connect to the `33080` port of 192.168.22.33, and the other ports are similar. The local and upper ports are the same. At this time, the port in the parameter `-P` uses `0`.\n\nIf you want to connect the ports of `33080`, `33081`, etc. to the `22` port of 192.168.22.33, you can add the parameter `--lock-port`.\n\n`proxy tcp -p \":33080-33085\" -T tcp -P \"192.168.22.33:22\" --lock-port`\n\n### 2.2. Ordinary secondary TCP proxy\n![2.2](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/tcp-2.png)  \nVPS (IP: 22.22.2.33) is executed:  \n`proxy tcp -p \":33080\" -T tcp -P \"127.0.0.1:8080\"`  \nLocal execution:  \n`proxy tcp -p \":23080\" -T tcp -P \"22.22.22.33:33080\"`  \nThen access the local port 23080 is to access port 8020 of 22.22.22.33.\n\n### 2.3. Ordinary three-level TCP proxy\n![2.3](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/tcp-3.png)  \nPrimary TCP proxy VPS_01, IP: 22.22.22.22  \n`proxy tcp -p \":38080\" -T tcp -P \"66.66.66.66:8080\"`  \nSecondary TCP proxy VPS_02, IP: 33.33.33.33  \n`proxy tcp -p \":28080\" -T tcp -P \"22.22.22.22:38080\"`  \nLevel 3 TCP proxy (local)  \n`proxy tcp -p \":8080\" -T tcp -P \"33.33.33.33:28080\"`  \nThen access the local port 8080 is to access the port 8080 of 66.66.66.66 through the encrypted TCP tunnel.\n\n### 2.4. Encrypting secondary TCP proxy\n![2.4](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/tcp-tls-2.png)  \nVPS (IP: 22.22.2.33) is executed:  \n`proxy tcp -t tls -p \":33080\" -T tcp -P \"127.0.0.1:8080\" -C proxy.crt -K proxy.key`  \nLocal execution:  \n`proxy tcp -p \":23080\" -T tls -P \"22.22.22.33:33080\" -C proxy.crt -K proxy.key`  \nThen access the local port 23080 is to access the port 8080 of 22.22.22.33 through the encrypted TCP tunnel.\n\n### 2.5.Encrypting Level 3 TCP Agent\n![2.5](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/tcp-tls-3.png)  \nPrimary TCP proxy VPS_01, IP: 22.22.22.22  \n`proxy tcp -t tls -p \":38080\" -T tcp -P \"66.66.66.66:8080\" -C proxy.crt -K proxy.key`  \nSecondary TCP proxy VPS_02, IP: 33.33.33.33  \n`proxy tcp -t tls -p \":28080\" -T tls -P \"22.22.22.22:38080\" -C proxy.crt -K proxy.key`  \nLevel 3 TCP proxy (local)  \n`proxy tcp -p \":8080\" -T tls -P \"33.33.33.33:28080\" -C proxy.crt -K proxy.key`  \nThen access the local port 8080 is to access the port 8080 of 66.66.66.66 through the encrypted TCP tunnel.\n\n### 2.6 Connecting to a upstream through a proxy\nSometimes the network where the proxy is located cannot directly access the external network. You need to use an https or socks5 proxy to access the Internet. Then this time  \nThe -J parameter can help you to connect the proxy to the peer-P through the https or socks5 proxy when mapping the proxy tcp port, mapping the external port to the local.  \nThe -J parameter format is as follows:\n\nHttps proxy writing:  \nThe proxy needs authentication, username: username password: password  \nHttps://username:password@host:port  \nAgent does not require authentication  \nHttps://host:port\n\nSocks5 proxy writing:  \nThe proxy needs authentication, username: username password: password  \nSocks5://username:password@host:port  \nAgent does not require authentication  \nSocks5://host:port\n\nHost: the IP or domain name of the proxy  \nPort: the port of the proxy\n\n### 2.7 Specify Outgoing IP\nWhen the TCP proxy is a superior type (parameter: -T) is tcp, it supports the specified outgoing IP. Using\nthe `--bind-listen` parameter, you can open the client to connect with the portal IP, and use the portal IP as the\noutgoing IP to access the target website. If an incorrect IP is bound, the proxy will not work, the proxy will try to\nbind the target without binding the IP, and the log will prompt.\n\n`proxy tcp -p \":33080\" -T tcp -P\" 192.168.22.33:22\" -B`\n\n#### Flexible Outgoing IP\n\nAlthough the above `--bind-listen` parameter can specify the  outgoing IP, the `entry IP` and the ` outgoing IP` cannot be referenced artificially. If you want the ingress IP to be different from the egress IP, you can use the `--bind-ip` parameter, format: `IP:port`, for example: `1.1.1.1:8080`\n, `[2000:0:0:0:0:0:0:1]:8080`. For multiple binding requirements, you can repeat the `--bind-ip` parameter identification.\n\nFor example, this machine has IP `5.5.5.5`, `6.6.6.6`, and monitors two ports `8888` and `7777`, the command is as follows:\n\n`Proxy tcp -t tcp -p :8888,:7777 --bind-ip 5.5.5.5:7777 --bind-ip 6.6.6.6:8888 -T tcp -P 2.2.2.2:3322`\n\nThen the client access port `7777`, the  outgoing IP is `5.5.5.5`, access port `8888`, the  outgoing IP is `6.6.6.6`, if both `--bind-ip` and `--bind- are set at the same time listen`,`--bind-ip` has higher priority.\n\nIn addition, the `IP` part of the `--bind-ip` parameter supports specifying the `network interface name`, `wildcards`, and more than one can be specified. The detailed description is as follows:\n\n- Specify the network interface name, such as: `--bind-ip eth0:7777`, then the client accesses the `7777` port, and the egress IP is the IP of the eth0 network interface.\n- The network interface name supports wildcards, for example: `--bind-ip eth0.*:7777`, then the client accesses\n  the `7777` port, and the egress IP is a randomly selected one of the network interface IPs starting with `eth0.`.\n- IP supports wildcards, such as: `--bind-ip 192.168.?.*:7777`, then the client accesses the `7777` port, and the\n  outgoing IP is all the IPs of the machine, matching the IP of `192.168.?.*` A randomly selected one.\n- It can also be multiple combinations of network interface name and IP, separated by half-width commas, such\n  as: `--bind-ip pppoe??,192.168.?.*:7777`, then the client accesses the port `7777`, The outgoing IP is the machine's\n  network interface name matching `pppoe??`\n  It is a randomly selected one among all IPs of the machine that matches `192.168.?.*`.\n- The wildcard character `*` represents 0 to any number of characters, and `?` represents 1 character.\n- If the IP of the network interface changes, it will take effect in real time.\n- You can use the `--bind-refresh` parameter to specify the interval to refresh the local network interface information, the default is `5`, the unit is second.\n\n### 2.8 Speed limit, connections limit\n\n- **Limit count of connections**\n  The parameter `--max-conns` can limit the maximum number of connections per port.\n  For example, limit the maximum number of connections per port to 1000:\n  `proxy tcp -p \":33080\" -T tcp -P \"192.168.22.33:22\" --max-conns 1000`\n- **Limit tcp connection rate**\n  The parameter `--rate-limit` can limit the rate of each tcp connection.\n  For example, limit the rate of each tcp connection to 100k/s:\n  `proxy tcp -p \":33080\" -T tcp -P \"192.168.22.33:22\" --rate-limit 100k`\n- **Limit client IP total rate**\n  The parameter `--ip-rate` limit the total rate of each client IP.\n  For example, limit the total IP rate of each client to 1M/s:\n  `proxy tcp -p \":33080\" -T tcp -P \"192.168.22.33:22\" --ip-rate 1M`\n- **Limit port total rate**\n  The parameter `--port-rate` limit the total rate of each service port.\n  For example, limit the total rate of each port to 10M/s:\n  `proxy tcp -p \":33080\" -T tcp -P \"192.168.22.33:22\" --port-rate 10M`\n- **Joint Speed Limit**\n  `--rate-limit` and (`--ip-rate` or `--port-rate`) can be used together.\n  Both limit the total rate and limit the rate of a single tcp.\n\n### 2.9 Compressed transmission\n\n`--c` controls whether to compress transmission between local and client, default false;` --C` controls whether to compress transmission between local and upstream, default false.\n\nExamples:\n\nVPS (IP: 22.22.22.33) implementation:\n`proxy tcp -t tcp --c -p \":33080\" -T tcp -P \"127.0.0.1:8080\"`\nLocal execution:\n`proxy tcp -t tcp -p \":23080\" -T tcp -P \"22.22.22.33:33080\" --C`\n\n### 2.10 View Help\n`proxy help tcp`\n\n## 3.UDP Proxies\n\n### 3.1. Ordinary UDP proxy\n![3.1](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/udp-1.png)  \nLocal execution:  \n`proxy udp -p \":5353\" -T udp -P \"8.8.8.8:53\"`  \nThen access the local UDP: 5353 port is to access 8.8.8.8 UDP: 53 port.\n\nThe `-p` parameter supports :\n\n```text\n-p \":8081\" listen on 8081\n-p \":8081,:8082\" listen on 8081 and 8082\n-p \":8081,:8082,:9000-9999\" listen on 8081 and 8082 and 9000, 9001 to 9999 for a total of 1002 ports\n```\n\nIf the number of local listening ports is greater than 1, the corresponding upper port corresponding to the local port will be connected, and the port in `-P` will be ignored.\n\nIf you need a connection from all ports, connect to the upper specified port, you can add the parameter `--lock-port`.\n\nsuch as:\n\n`proxy udp -p \":33080-33085\" -T udp -P \"192.168.22.33:0\"`\n\nThen the connection of the `33080` port will connect to the `33080` port of 192.168.22.33, and the other ports are similar. The local and upper ports are the same. At this time, the port in the parameter `-P` uses `0`.\n\nIf you want to connect the ports of `33080`, `33081`, etc. to the `2222` port of 192.168.22.33, you can add the parameter `--lock-port`.\n\n`proxy udp -p \":33080-33085\" -T udp -P \"192.168.22.33:2222\" --lock-port`\n\n### 3.2. Ordinary secondary UDP proxy\n![3.2](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/udp-2.png)  \nVPS (IP: 22.22.2.33) is executed:  \n`proxy tcp -p \":33080\" -T udp -P \"8.8.8.8:53\"`  \nLocal execution:  \n`proxy udp -p \":5353\" -T tcp -P \"22.22.22.33:33080\"`  \nThen access the local UDP: 5353 port is through the TCP tunnel, through the VPS access 8.8.8.8 UDP: 53 port.\n\n### 3.3. Ordinary three-level UDP proxy\n![3.3](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/udp-3.png)  \nPrimary TCP proxy VPS_01, IP: 22.22.22.22  \n`proxy tcp -p \":38080\" -T udp -P \"8.8.8.8:53\"`  \nSecondary TCP proxy VPS_02, IP: 33.33.33.33  \n`proxy tcp -p \":28080\" -T tcp -P \"22.22.22.22:38080\"`  \nLevel 3 TCP proxy (local)  \n`proxy udp -p \":5353\" -T tcp -P \"33.33.33.33:28080\"`  \nThen access to the local 5353 port is through the TCP tunnel, through the VPS to access port 8.8.8.8.\n\n### 3.4. Encrypting secondary UDP proxy\n![3.4](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/udp-tls-2.png)  \nVPS (IP: 22.22.2.33) is executed:  \n`proxy tcp -t tls -p \":33080\" -T udp -P \"8.8.8.8:53\" -C proxy.crt -K proxy.key`  \nLocal execution:  \n`proxy udp -p \":5353\" -T tls -P \"22.22.22.33:33080\" -C proxy.crt -K proxy.key`  \nThen access the local UDP: 5353 port is through the encrypted TCP tunnel, through the VPS access 8.8.8.8 UDP: 53 port.\n\n### 3.5. Encryption Level 3 UDP Agent\n![3.5](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/udp-tls-3.png)  \nPrimary TCP proxy VPS_01, IP: 22.22.22.22  \n`proxy tcp -t tls -p \":38080\" -T udp -P \"8.8.8.8:53\" -C proxy.crt -K proxy.key`  \nSecondary TCP proxy VPS_02, IP: 33.33.33.33  \n`proxy tcp -t tls -p \":28080\" -T tls -P \"22.22.22.22:38080\" -C proxy.crt -K proxy.key`  \nLevel 3 TCP proxy (local)  \n`proxy udp -p \":5353\" -T tls -P \"33.33.33.33:28080\" -C proxy.crt -K proxy.key`  \nThen access the local 5353 port is to access the 8.8.8.8 port 53 through VPS_01 through the encrypted TCP tunnel.\n\n### 3.6 Specify Outgoing IP\nWhen the UDP upstream proxies (parameter: -T) is udp, it supports the specified outgoing IP. Using the `--bind-listen` parameter, you can open the client to connect with the server IP, and use the server IP as the outgoing IP to access the target. If an incorrect IP is bound, the proxy will not work.\n\n`proxy udp -p \":33080\" -T udp -P \"192.168.22.33:2222\" -B`\n\n### 3.7 Help\n`proxy help udp`\n\n## 4. Expose Intranet\n\n### 4.1 principle description\nIntranet penetration, divided into two versions, \"multi-link version\" and \"multiplexed version\", generally like a web service, this service is not a long-term connection, it is recommended to use \"multi-link version\", if it is to keep long The time connection suggests using a \"multiplexed version.\"\n1. Multi-link version, the corresponding sub-command is tserver, tclient, tbridge.\n1. Multiplexed version, the corresponding subcommand is server, client, bridge.\n1. The parameters of the multi-link version and the multiplex version are exactly the same.\n1. The multiplexed version of the server, client can open the compressed transmission, the parameter is --c.\n1. server, client either open compression, or not open, can not open only one.\n\nThe following tutorial uses the \"multiplexed version\" as an example to illustrate how to use it.  \nThe intranet penetration consists of three parts: client, server, and bridge; client and server actively connect to the bridge for bridging.\n\n### 4.2 TCP common usage\nBackground:\n- Company Machine A provides web service port 80\n- There is a VPS, public network IP: 22.22.22.22\n\nDemand:  \nAt home, you can access the port 80 of company machine A by accessing port 28080 of the VPS.\n\nSteps:  \nExecute on vps  \n`proxy bridge -p \":33080\" -C proxy.crt -K proxy.key`  \n`proxy server -r \":28080@:80\" -P \"127.0.0.1:33080\" -C proxy.crt -K proxy.key`\n\n1. Execute on company machine A  \n   `proxy client -P \"22.22.22.22:33080\" -C proxy.crt -K proxy.key`\n\nComplete\n\n### 4.3 WeChat interface local development\nBackground:\n- Your own notebook provides nginx service port 80\n- There is a VPS, public network IP: 22.22.22.22\n\nDemand:  \nFill in the address in the webpage callback interface configuration of WeChat's development account: http://22.22.22.22/calback.php  \nThen you can access the calback.php under the 80 port of the notebook. If you need to bind the domain name, you can use your own domain name.  \nFor example: wx-dev.xxx.com resolves to 22.22.22.22, and then in your own notebook nginx  \nConfigure the domain name wx-dev.xxx.com to the specific directory.\n\n\nSteps:\n1. Execute on vps to ensure that port 80 of vps is not occupied by other programs.  \n   `proxy bridge -p \":33080\" -C proxy.crt -K proxy.key`  \n   `proxy server -r \":80@:80\" -P \"22.22.22.22:33080\" -C proxy.crt -K proxy.key`\n\n1. Execute on your laptop  \n   `proxy client -P \"22.22.22.22:33080\" -C proxy.crt -K proxy.key`\n\nComplete\n\n### 4.4 UDP common usage\nBackground:\n- Company Machine A provides DNS resolution service, UDP: port 53\n- There is a VPS, public network IP: 22.22.22.22\n\nDemand:  \nAt home, you can use the company machine A to perform domain name resolution services by setting the local dns to 22.22.22.22.\n\nSteps:  \nExecute on vps  \n`proxy bridge -p \":33080\" -C proxy.crt -K proxy.key`  \n`proxy server --udp -r \":53@:53\" -P \"127.0.0.1:33080\" -C proxy.crt -K proxy.key`\n\n1. Execute on company machine A  \n   `proxy client -P \"22.22.22.22:33080\" -C proxy.crt -K proxy.key`\n\nComplete\n\n### 4.5 advanced usage one\nBackground:\n- Company Machine A provides web service port 80\n- There is a VPS, public network IP: 22.22.22.22\n\nDemand:  \nIn order to be safe, I don't want to have access to the company machine A on the VPS, and I can access the port 28080 of the machine at home.  \nAccess to port 80 of company machine A via an encrypted tunnel.\n\nSteps:  \nExecute on vps  \n`proxy bridge -p \":33080\" -C proxy.crt -K proxy.key`\n\n1. Execute on company machine A  \n   `proxy client -P \"22.22.22.22:33080\" -C proxy.crt -K proxy.key`\n\n1. Execute on your home computer  \n   `proxy server -r \":28080@:80\" -P \"22.22.22.22:33080\" -C proxy.crt -K proxy.key`\n\nComplete\n\n### 4.6 Advanced Usage II\nTip:  \nIf multiple clients are connected to the same bridge at the same time, you need to specify a different key, which can be set by the --k parameter, and --k can be any unique string.  \nJust be the only one on the same bridge.  \nWhen the server is connected to the bridge, if there are multiple clients connecting to the same bridge at the same time, you need to use the --k parameter to select the client.  \nExpose multiple ports by repeating the -r parameter. The format of -r is: \"local IP: local port @clientHOST:client port\".\n\nBackground:\n- Company Machine A provides web service port 80, ftp service port 21\n- There is a VPS, public network IP: 22.22.22.22\n\nDemand:  \nAt home, you can access the port 80 of company machine A by accessing port 28080 of the VPS.  \nAt home, I can access the 21 port of company machine A by accessing port 29090 of the VPS.\n\nSteps:  \nExecute on vps  \n`proxy bridge -p \":33080\" -C proxy.crt -K proxy.key`  \n`proxy server -r \":28080@:80\" -r \":29090@:21\" --k test -P \"127.0.0.1:33080\" -C proxy.crt -K proxy.key`\n\n1. Execute on company machine A  \n   `proxy client --k test -P \"22.22.22.22:33080\" -C proxy.crt -K proxy.key`\n\nComplete\n\n### 4.7.server -r parameter\nThe full format of -r is: `PROTOCOL://LOCAL_IP:LOCAL_PORT@[CLIENT_KEY]CLIENT_LOCAL_HOST:CLIENT_LOCAL_PORT`\n\n4.7.1. Protocol PROTOCOL: tcp or udp.  \nFor example: `-r \"udp://:10053@:53\" -r \"tcp://:10800@:1080\" -r \":8080@:80\"`  \nIf the --udp parameter is specified, PROTOCOL defaults to udp, then:`-r \":8080@:80\"` defaults to udp;  \nIf the --udp parameter is not specified, PROTOCOL defaults to tcp, then: `-r \":8080@:80\"` defaults to tcp;\n\n4.7.2. CLIENT_KEY: The default is default.  \nFor example: -r \"udp://:10053@[test1]:53\" -r \"tcp://:10800@[test2]:1080\" -r \":8080@:80\"  \nIf the --k parameter is specified, such as --k test, then: `-r \":8080@:80\"`CLIENT_KEY defaults to test;  \nIf the --k parameter is not specified, then: `-r \":8080@:80\"`CLIENT_KEY defaults to default;\n\n4.7.3. LOCAL_IP is empty. The default is: `0.0.0.0`, CLIENT_LOCAL_HOST is empty. The default is: `127.0.0.1`;\n\n### 4.8.server and client connect bridge through proxy\nSometimes the network where the server or client is located cannot directly access the external network. You need to use an https or socks5 proxy to access the Internet. Then this time  \nThe -J parameter can help you to connect the server or client to the bridge via https or socks5.  \nThe -J parameter format is as follows:\n\nHttps proxy writing:  \nThe proxy needs authentication, username: username password: password  \nHttps://username:password@host:port  \nAgent does not require authentication  \nHttps://host:port\n\nSocks5 proxy writing:  \nThe proxy needs authentication, username: username password: password  \nSocks5://username:password@host:port  \nAgent does not require authentication  \nSocks5://host:port\n\nHost: the IP or domain name of the proxy  \nPort: the port of the proxy\n\n### 4.9. Expose HTTP service\n\nUsually the HTTP request client will use the server's ip and port to set the HOST field, but it is not the same as the expected backend actual HOST, which causes tcp to be passed.However, the backend relies on the HOST field to locate the virtual host and it will not work. Now use the `--http-host` parameter to force the HOST field value of the http header to be the actual value of the backend.Domain names and ports can be easily solved. After using the `--http-host` parameter, two headers will be added to the header of each HTTP request. The `X-Forwarded-For` and `X-Real-IP` values are the client IP, so the backend http service can easily obtain the real IP address of the client.\n\nThe format of the `server`-http-host parameter is as follows:\n\n`--http-host www.test.com:80@2200`, if the server listens to multiple ports, just repeat the `--http-host` parameter to set the HOST for each port.\n\nExample:\n\nFor example, the client local nginx, 127.0.0.1:80 provides a web service, which is bound to a domain name `local.com`.\n\nThen the server startup parameters can be as follows:\n\n`proxy server -P :30000 -r :2500@127.0.0.1:80 --http-host local.com@2500`\n\nExplanation:\n\n`-r :2500@127.0.0.1:80` and `--http-host local.com:80@2500` The 2500 port is the port that the server listens locally.\n\nWhen the http protocol is used to request the ip:2500 port of the server, the header HOST field of http will be set to `local.com`.\n\n### 4.10 About traffic statistics\nIf you start a server docking peer separately, it is the proxy-admin control panel. You need to create a new mapping in the upper-level control panel to obtain the ID of the mapping rule.\n\nThen start the server and add the parameter --server-id=the ID of the mapping rule to count the traffic.\n\n### 4.11 About p2p\nIntranet penetration support When the server and client network conditions are met, the server and client are directly connected through p2p. The opening method is:\n\nWhen starting the bridge, server, client, add the `--p2p` parameter. The server's -r parameter can be used to enable p2p (ptcp and pudp) for the port.\n\nIf the p2p hole fails between the server and the client, the bridge transfer data is automatically switched.\n\n### 4.12 Client key whitelist\nThe intranet penetrating bridge can set the client key whitelist. The parameter is --client-keys. The format can be:\n\na. File name, file content One client key can only contain the alphanumeric underscore, which is the value of the client startup parameter --k. Only the client key can connect to the whitelist client. The line starting with # is a comment.\n\nb. The base64 encoding at the beginning of \"base64://\" is the content of the file described in a above, for example: base64://ajfpoajsdfa=\n\nc. \"str://\" multiple keywords separated by a comma at the beginning, such as: str://default,company,school\n\nThe default is empty, allowing all keys.\n\n### 4.13 Network NAT Type Judgment\n\nSenat type judgment, easy to check whether the network supports p2p, you can execute: `proxy tools -a nattype`\n\n### 4.14 Help\n`proxy help bridge`  \n`proxy help server`  \n`proxy help client`\n\n## 5.SOCKS5 Proxies\nprompt:\n\nSOCKS5 proxy, support CONNECT, UDP protocol, does not support BIND, supports username and password authentication.\n\n***The udp function of socks5 is turned off by default, and can be turned on by `--udp`. The default is a random port for handshake, and performance can be improved by fixing a port.\nSet by parameter `--udp-port 0`, `0` represents a free port is randomly selected, or you can manually specify a specific port. ***\n\n### 5.1. Ordinary SOCKS5 Agent\n`proxy socks -t tcp -p \"0.0.0.0:38080\"`\n\nListen port argument `-p` can be:\n\n```text\n  -p \":8081\"  listen on 8081\n  -p \":8081,:8082\"  listen on 8081 and 8082\n  -p \":8081,:8082,:9000-9999\" listen on 8081 and 8082 and 9000 and 9001 to 9999, 1002 total ports  \n```\n\n### 5.2. Ordinary secondary SOCKS5 agent\n![5.2](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/socks-2.png)  \nUse local port 8090, assuming the upstream SOCKS5 proxy is `22.22.22.22:8080`  \n`proxy socks -t tcp -p \"0.0.0.0:8090\" -T tcp -P \"22.22.22.22:8080\" `  \nWe can also specify the black and white list file of the website domain name, one domain name and one domain name, the matching rule is the rightmost match, for example: baidu.com, the match is *.*.baidu.com, the blacklist domain name domain name goes directly to the upstream agent, white The domain name of the list does not go to the upstream agent; if the domain name is in the blacklist and in the whitelist, the blacklist works.  \n`proxy socks -p \"0.0.0.0:8090\" -T tcp -P \"22.22.22.22:8080\" -b blocked.txt -d direct.txt`\n\n### 5.3. SOCKS Level 2 Agent (Encryption)\n![5.3](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/socks-tls-2.png)  \nLevel 1 SOCKS proxy (VPS, IP: 22.22.22.22)  \n`proxy socks -t tls -p \":38080\" -C proxy.crt -K proxy.key`\n\nSecondary SOCKS proxy (local Linux)  \n`proxy socks -t tcp -p \":8080\" -T tls -P \"22.22.22.22:38080\" -C proxy.crt -K proxy.key`  \nThen access the local port 8080 is to access the proxy port 38080 on the VPS.\n\nSecondary SOCKS proxy (local windows)  \n`proxy.exe socks -t tcp -p \":8080\" -T tls -P \"22.22.22.22:38080\" -C proxy.crt -K proxy.key`  \nThen set your windos system, the proxy that needs to go through the proxy Internet program is the socks5 mode, the address is: 127.0.0.1, the port is: 8080, the program can access the Internet through vps through the encrypted channel.\n\n### 5.4. SOCKS Level 3 Agent (Encryption)\n![5.4](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/socks-tls-3.png)  \nLevel 1 SOCKS proxy VPS_01, IP: 22.22.22.22  \n`proxy socks -t tls -p \":38080\" -C proxy.crt -K proxy.key`  \nSecondary SOCKS proxy VPS_02, IP: 33.33.33.33  \n`proxy socks -t tls -p \":28080\" -T tls -P \"22.22.22.22:38080\" -C proxy.crt -K proxy.key`  \nLevel 3 SOCKS proxy (local)  \n`proxy socks -t tcp -p \":8080\" -T tls -P \"33.33.33.33:28080\" -C proxy.crt -K proxy.key`  \nThen accessing the local port 8080 is to access the proxy port 38080 on the first-level SOCKS proxy.\n\n### 5.5. SOCKS proxy traffic is forced to go to the upper level SOCKS proxy\nBy default, the proxy will intelligently determine whether a website domain name is inaccessible. If it is not accessible, it will go to the upstream SOCKS proxy. With --always, all SOCKS proxy traffic can be forced to go to the upper SOCKS proxy.  \n`proxy socks --always -t tls -p \":28080\" -T tls -P \"22.22.22.22:38080\" -C proxy.crt -K proxy.key`\n\n### 5.6. SOCKS via SSH relay\n![5.6](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/socks-ssh.png)  \nDescription: The principle of ssh transfer is to use the forwarding function of ssh, that is, after you connect to ssh, you can access the target address through ssh proxy.  \nSuppose there is: vps\n- IP is 2.2.2.2, ssh port is 22, ssh username is: user, ssh user password is: demo\n- The user's ssh private key name is user.key\n\n#### *5.6.1 How to ssh username and password*\nLocal SOCKS5 proxy port 28080, execute:  \n`proxy socks -T ssh -P \"2.2.2.2:22\" -u user -D demo -t tcp -p \":28080\"`\n#### *5.6.2 How to ssh username and key*\nLocal SOCKS5 proxy port 28080, execute:  \n`proxy socks -T ssh -P \"2.2.2.2:22\" -u user -S user.key -t tcp -p \":28080\"`\n\nThen access the local port 28080 is to access the target address through the VPS.\n\n### 5.7. Certification\nFor the socks5 proxy protocol, we can perform username and password authentication. The authenticated username and password can be specified on the command line.  \n`proxy socks -t tcp -p \":33080\" -a \"user1:pass1\" -a \"user2:pass2\"`  \nFor multiple users, repeat the -a parameter.  \nIt can also be placed in a file in the format of a \"username:password\" and then specified with -F.  \n`proxy socks -t tcp -p \":33080\" -F auth-file.txt`\n\nIn addition, the socks5 agent also integrates external HTTP API authentication. We can specify an http url interface address with the --auth-url parameter.  \nThen when there is a user connection, the proxy will request the url in GET mode, with the following three parameters. If the HTTP status code 204 is returned, the authentication is successful.  \nIn other cases, the authentication failed.  \nFor example:  \n`proxy socks -t tcp -p \":33080\" --auth-url \"http://test.com/auth.php\"`  \nWhen the user connects, the proxy will request the url (\"http://test.com/auth.php\") in GET mode.  \nBring four parameters: user, pass, ip, local_ip:  \nHttp://test.com/auth.php?user={USER}&pass={PASS}&ip={IP}&local_ip={LOCAL_IP}  \nUser: username  \nPass: password  \nIp: User's IP, for example: 192.168.1.200  \nLocal_ip: IP of the server accessed by the user, for example: 3.3.3.3\n\nIf there is no -a or -F or --auth-url parameter, the authentication is turned off.\n\n### 5.8.KCP protocol transmission\nThe KCP protocol requires the --kcp-key parameter to set a password for encrypting and decrypting data.\n\nLevel 1 HTTP proxy (VPS, IP: 22.22.22.22)  \n`proxy socks -t kcp -p \":38080\" --kcp-key mypassword`\n\nSecondary HTTP proxy (local Linux)  \n`proxy socks -t tcp -p \":8080\" -T kcp -P \"22.22.22.22:38080\" --kcp-key mypassword`  \nThen access the local port 8080 is to access the proxy port 38080 on the VPS, the data is transmitted through the kcp protocol.\n\n### 5.9. Custom DNS\n--dns-address and --dns-ttl parameters, used to specify the dns (--dns-address) used by the proxy to access the domain name.  \nAnd the analysis result cache time (--dns-ttl) seconds, to avoid system dns interference to the proxy, in addition to the cache function can also reduce the dns resolution time to improve access speed.  \nFor example:  \n`proxy socks -p \":33080\" --dns-address \"8.8.8.8:53\" --dns-ttl 300`\n\nYou can also use the parameter `--dns-interface` to specify the bandwidth used for dns resolution,\nfor example: `--dns-interface eth0`, dns resolution will use the eth0 bandwidth, this parameter must be set to `--dns-address` to be effective.\n\n### 5.10 Custom Encryption\nThe proxy's socks proxy can encrypt tcp data through tls standard encryption and kcp protocol on top of tcp. In addition, it supports custom encryption after tls and kcp, which means that custom encryption and tls|kcp can be used together. The internal use of AES256 encryption, you only need to define a password when you use it.  \nEncryption is divided into two parts, one is whether the local (-z) encryption and decryption, and the other is whether the transmission with the upstream (-Z) is encrypted or decrypted.\n\nCustom encryption requires both sides to be proxy.\n\nThe following two levels, three levels for example:\n\nSecondary instance  \nExecute on level 1 vps (ip: 2.2.2.2):  \n`proxy socks -t tcp -z demo_password -p :7777`  \nLocal secondary execution:  \n`proxy socks -T tcp -P 2.2.2.2:777 -Z demo_password -t tcp -p :8080`  \nIn this way, when the website is accessed through the local agent 8080, the target website is accessed through encrypted transmission with the upstream.\n\n\nThree-level instance  \nExecute on level 1 vps (ip: 2.2.2.2):  \n`proxy socks -t tcp -z demo_password -p :7777`  \nExecute on the secondary vps (ip: 3.3.3.3):  \n`proxy socks -T tcp -P 2.2.2.2:7777 -Z demo_password -t tcp -z other_password -p :8888`  \nLocal three-level execution:  \n`proxy socks -T tcp -P 3.3.3.3:8888 -Z other_password -t tcp -p :8080`  \nIn this way, when the website is accessed through the local agent 8080, the target website is accessed through encrypted transmission with the upstream.\n\n### 5.11 Compressed transmission\nThe proxy's socks proxy can encrypt tcp data through custom encryption and tls standard encryption and kcp protocol on top of tcp. It can also be used before custom encryption.  \nCompress the data, that is, the compression function and the custom encryption and tls|kcp can be used in combination, and the compression is divided into two parts.  \nPart of it is local (-m) compression transmission, and part is whether the transmission with the upstream (-M) is compressed.\n\nCompression requires both sides to be proxy, and compression also protects (encrypts) data to some extent.\n\nThe following two levels, three levels for example:\n\nSecondary instance\n\nExecute on level 1 vps (ip: 2.2.2.2):  \n`proxy socks -t tcp -m -p :7777`  \nLocal secondary execution:  \n`proxy socks -T tcp -P 2.2.2.2:777 -M -t tcp -p :8080`  \nIn this way, when the website is accessed through the local agent 8080, the target website is accessed through compression with the upstream.\n\n\nThree-level instance\n\nExecute on level 1 vps (ip: 2.2.2.2):  \n`proxy socks -t tcp -m -p :7777`  \nExecute on the secondary vps (ip: 3.3.3.3):  \n`proxy socks -T tcp -P 2.2.2.2:7777 -M -t tcp -m -p :8888`  \nLocal three-level execution:  \n`proxy socks -T tcp -P 3.3.3.3:8888 -M -t tcp -p :8080`  \nIn this way, when the website is accessed through the local agent 8080, the target website is accessed through compression with the upstream.\n\n\n### 5.12 Load Balancing\n\nThe SOCKS proxy supports the upper-level load balancing, and multiple upstream repeat-P parameters can be used.\n\n`proxy socks --lb-method=hash -T tcp -P 1.1.1.1:33080 -P 2.1.1.1:33080 -P 3.1.1.1:33080 -p :33080 -t tcp`\n\n### 5.12.1 Setting the retry interval and timeout time\n\n`proxy socks --lb-method=leastconn --lb-retrytime 300 --lb-timeout 300 -T tcp -P 1.1.1.1:33080 -P 2.1.1.1:33080 -P 3.1.1.1:33080 -p :33080 -t tcp`\n\n### 5.12.2 Setting weights\n\n`proxy socks --lb-method=weight -T tcp -P 1.1.1.1:33080?w=1 -P 2.1.1.1:33080?w=2 -P 3.1.1.1:33080?w=1 -p :33080 -t tcp`\n\n### 5.12.3 Use the target address to select the upstream\n\n`proxy socks --lb-hashtarget --lb-method=hash -T tcp -P 1.1.1.1:33080 -P 2.1.1.1:33080 -P 3.1.1.1:33080 -p :33080 -t tcp`\n\n### 5.13 Speed limit\n\nThe speed limit is 100K, which can be specified by the `-l` parameter, for example: 100K 2000K 1M . 0 means no limit.\n\n`proxy socks -t tcp -p 2.2.2.2:33080 -l 100K`\n\n### 5.14 Specifying Outgoing IP\n\nThe `--bind-listen` parameter can be used to open the client connection with the portal IP, and use the portal IP as the outgoing IP to access the target website. If the ingress IP is an intranet IP, the egress IP does not use the ingress IP.\n\n`proxy socks -t tcp -p 2.2.2.2:33080 --bind-listen`\n\n#### Flexible Outgoing IP\n\nAlthough the above `--bind-listen` parameter can specify the  outgoing IP, the `entry IP` and ` outgoing IP` cannot be interfered by humans. If you want the ingress IP to be different from the egress IP, you can use the `--bind-ip` parameter, format: `IP:port`, for example: `1.1.1.1:8080`\n, `[2000:0:0:0:0:0:0:1]:8080`. For multiple binding requirements, you can repeat the `--bind-ip` parameter.\n\nFor example, the machine has IP `5.5.5.5`, `6.6.6.6`, and monitors two ports `8888` and `7777`, the command is as follows:\n\n`proxy socks -t tcp -p :8888,:7777 --bind-ip 5.5.5.5:7777 --bind-ip 6.6.6.6:8888`\n\nThen the client access port `7777`, the  outgoing IP is `5.5.5.5`, access port `8888`, the  outgoing IP is `6.6.6.6`, if both `--bind-ip` and `--bind- are set at the same time listen`,`--bind-ip` has higher priority.\n\nIn addition, the `IP` part of the `--bind-ip` parameter supports specifying the `network interface name`, `wildcards`, and more than one. The details are as follows:\n\n- Specify the network interface name, such as: `--bind-ip eth0:7777`, then the client accesses the `7777` port, and the egress IP is the IP of the eth0 network interface.\n- The network interface name supports wildcards, for example: `--bind-ip eth0.*:7777`, then the client accesses\n  the `7777` port, and the egress IP is a randomly selected one of the network interface IPs starting with `eth0.`.\n- IP supports wildcards, such as: `--bind-ip 192.168.?.*:7777`, then the client accesses the `7777` port, and the\n  outgoing IP is all the IPs of the machine, matching the IP of `192.168.?.*` A randomly selected one.\n- It can also be multiple combinations of network interface name and IP, separated by half-width commas, such\n  as: `--bind-ip pppoe??,192.168.?.*:7777`, then the client accesses the port `7777`, The outgoing IP is the machine's\n  network interface name matching `pppoe??`\n  It is a randomly selected one among all IPs of the machine that matches `192.168.?.*`.\n- The wildcard character `*` represents 0 to any number of characters, and `?` represents 1 character.\n- If the IP of the network interface changes, it will take effect in real time.\n- You can use the `--bind-refresh` parameter to specify the interval to refresh the local network interface information, the default is `5`, the unit is second.\n\n### 5.15 Cascade Certification\n\nSOCKS5 supports cascading authentication, and -A can set upstream authentication information.\n\nupstream:\n\n`proxy socks -t tcp -p 2.2.2.2:33080 -a user:pass`\n\nlocal:\n\n`proxy socks -T tcp -P 2.2.2.2:33080 -A user:pass -t tcp -p :33080`\n\n### 5.16 Certificate parameters use base64 data\n\nBy default, the -C, -K parameter is the path to the crt certificate and the key file.\n\nIf it is the beginning of base64://, then the latter data is considered to be base64 encoded and will be used after decoding.\n\n\n### 5.17 Intelligent mode\nIntelligent mode setting, can be one of intelligent|direct|parent.  \nThe default is: parent.  \nThe meaning of each value is as follows:  \n`--intelligent=direct`, the targets in the blocked are not directly connected.  \n`--intelligent=parent`, the target that is not in the direct is going to the higher level.  \n`--intelligent=intelligent`, blocked and direct have no targets, intelligently determine whether to use the upstream\naccess target.\n\n### 5.18 Fixed UDP PORT\n\nBy default, the port number of the UDP function of socks5, the proxy is installed in the `rfc1982 draft` request, which\nis randomly specified during the protocol handshake process and does not need to be specified in advance.\n\nHowever, in some cases, you need to fix the UDP function port. You can use the parameter `--udp-port port number` to fix\nthe port number of the UDP function. For example:\n\n`proxy socks -t tcp -p \"0.0.0.0:38080\" --udp-port 38080`\n\n### 5.19 UDP Compatibility Mode\n\nBy default, the UDP functionality of the SOCKS5 proxy in the proxy operates in accordance with the SOCKS5 RFC 1928\nspecification. However, there are certain SOCKS5 clients that do not adhere to the specified rules. To ensure\ncompatibility with such clients, the `--udp-compat` parameter can be added to activate the compatibility mode for SOCKS5\nUDP functionality.\n\nAdditionally, the `-udp-gc` parameter can be utilized to set the maximum idle time for UDP. When this time threshold is\nexceeded, UDP connections will be released.\n\n### 5.20 Help\n\n`proxy help socks`\n\n## 6.SPS Protocol Convert\n\n### 6.1 Function introduction\n\nThe proxy protocol conversion uses the sps subcommand. The sps itself does not provide the proxy function. It only\naccepts the proxy request to \"convert and forward\" to the existing http(s) proxy or the socks5 proxy or ss proxy; the\nsps can put the existing http(s) proxy or socks5 proxy or ss proxy is converted to a port that supports both http(s) and\nsocks5 and ss proxies, and the http(s) proxy supports forward proxy and reverse proxy (SNI), converted SOCKS5 proxy, UDP\nfunction is still supported when the upper level is SOCKS5 or SS; in addition, for the existing http(s) proxy or socks5\nproxy, three modes of tls, tcp, and kcp are supported, and chain connection is supported, that is, multiple sps node\nlevels can be supported. The connection builds an encrypted channel.\n\nThe encryption methods supported by the `ss` function are: aes-128-cfb, aes-128-ctr, aes-128-gcm, aes-192-cfb,\naes-192-ctr, aes-192-gcm, aes-256- Cfb , aes-256-ctr , aes-256-gcm , bf-cfb , cast5-cfb , chacha20 , chacha20-ietf ,\nchacha20-ietf-poly1305 , des-cfb , rc4-md5 , rc4-md5-6 , salsa20 , Xchacha20\n\nListen port argument `-p` can be:\n\n```text\n  -p \":8081\"  listen on 8081\n  -p \":8081,:8082\"  listen on 8081 and 8082\n  -p \":8081,:8082,:9000-9999\" listen on 8081 and 8082 and 9000 and 9001 to 9999, 1002 total ports  \n```\n\nThe udp function of ss is turned off by default and can be turned on by `--ssudp`. The udp function of socks5 is turned off by default and can be turned on by `--udp`, The default is a random port for handshake, and performance can be improved by fixing a port.\nSet by parameter `--udp-port 0`, `0` represents a free port is randomly selected, or you can manually specify a specific port.\n\n### 6.2 HTTP(S) to HTTP(S)+SOCKS5+SS\nSuppose there is already a normal http(s) proxy: 127.0.0.1:8080. Now we turn it into a common proxy that supports both http(s) and socks5 and ss. The converted local port is 18080, ss encryption: Aes-192-cfb, ss password: pass.  \nThe command is as follows:  \n`proxy sps -S http -T tcp -P 127.0.0.1:8080 -t tcp -p :18080 -h aes-192-cfb -j pass`\n\nSuppose there is already a tls http(s) proxy: 127.0.0.1:8080. Now we turn it into a normal proxy that supports both http(s) and socks5 and ss. The converted local port is 18080, and tls requires a certificate file. , ss encryption: aes-192-cfb, ss password: pass.  \nThe command is as follows:  \n`proxy sps -S http -T tls -P 127.0.0.1:8080 -t tcp -p :18080 -C proxy.crt -K proxy.key -h aes-192-cfb -j pass`\n\nSuppose there is already a kcp http(s) proxy (password is: demo123): 127.0.0.1:8080, now we turn it into a normal proxy that supports both http(s) and socks5 and ss. The converted local port is 18080, ss encryption: aes-192-cfb, ss password: pass.  \nThe command is as follows:  \n`proxy sps -S http -T kcp -P 127.0.0.1:8080 -t tcp -p :18080 --kcp-key demo123 -h aes-192-cfb -j pass`\n\n### 6.3 SOCKS5 to HTTP(S)+SOCKS5+SS\nSuppose there is already a normal socks5 proxy: 127.0.0.1:8080, now we turn it into a common proxy that supports both http(s) and socks5 and ss. The converted local port is 18080, ss encryption: aes-192 -cfb, ss password: pass.  \nThe command is as follows:  \n`proxy sps -S socks -T tcp -P 127.0.0.1:8080 -t tcp -p :18080 -h aes-192-cfb -j pass`\n\nSuppose there is already a tls socks5 proxy: 127.0.0.1:8080, now we turn it into a common proxy that supports both http(s) and socks5 and ss. The converted local port is 18080, tls requires certificate file, ss encryption Mode: aes-192-cfb, ss password: pass.  \nThe command is as follows:  \n`proxy sps -S socks -T tls -P 127.0.0.1:8080 -t tcp -p :18080 -C proxy.crt -K proxy.key -h aes-192-cfb -j pass`\n\nSuppose there is already a kcp socks5 proxy (password: demo123): 127.0.0.1:8080, now we turn it into a common proxy that supports both http(s) and socks5 and ss. The converted local port is 18080, ss Encryption method: aes-192-cfb, ss password: pass.  \nThe command is as follows:  \n`proxy sps -S socks -T kcp -P 127.0.0.1:8080 -t tcp -p :18080 --kcp-key demo123 -h aes-192-cfb -j pass`\n\n### 6.4 SS to HTTP(S)+SOCKS5+SS\nSPS upstream and local support ss protocol, the upstream can be SPS or standard ss service.  \nSPS locally provides HTTP(S)\\SOCKS5\\SPS three defaults. When the upstream is SOCKS5, the converted SOCKS5 and SS support UDP.  \nSuppose there is already a normal SS or SPS proxy (ss is enabled, encryption: aes-256-cfb, password: demo): 127.0.0.1:8080, now we turn it to support both http(s) and socks5 and The ordinary proxy of ss, the converted local port is 18080, the converted ss encryption mode: aes-192-cfb, ss password: pass.  \nThe command is as follows:  \n`proxy sps -S ss -H aes-256-cfb -J pass -T tcp -P 127.0.0.1:8080 -t tcp -p :18080 -h aes-192-cfb -j pass`.\n\n### 6.5 Chained connection\n![6.4](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/sps-tls.png)  \nThe above mentioned multiple sps nodes can be connected to build encrypted channels in a hierarchical connection, assuming the following vps and the home PC.  \nVps01:2.2.2.2  \nVps02:3.3.3.3  \nNow we want to use pc and vps01 and vps02 to build an encrypted channel. This example uses tls encryption or kcp. Accessing local 18080 port on the PC is to access the local 8080 port of vps01.  \nFirst on vps01 (2.2.2.2) we run a locally accessible http(s) proxy and execute:  \n`proxy http -t tcp -p 127.0.0.1:8080`\n\nThen run a sps node on vps01 (2.2.2.2) and execute:  \n`proxy sps -S http -T tcp -P 127.0.0.1:8080 -t tls -p :8081 -C proxy.crt -K proxy.key`\n\nThen run a sps node on vps02 (3.3.3.3) and execute:  \n`proxy sps -S http -T tls -P 2.2.2.2:8081 -t tls -p :8082 -C proxy.crt -K proxy.key`\n\nThen run a sps node on the pc and execute:  \n`proxy sps -S http -T tls -P 3.3.3.3:8082 -t tcp -p :18080 -C proxy.crt -K proxy.key`\n\ncarry out.\n\n### 6.6 Authentication\nSps supports http(s)\\socks5 proxy authentication, which can be cascaded and has four important pieces of information:  \n1: The user sends the authentication information `user-auth`.  \n2: Set the local authentication information `local-auth`.  \n3: Set the connection authentication information 'parent-auth` used by the upstream.  \n4: The authentication information `auth-info-to-parent` that is finally sent to the upstream.  \nTheir situation is as follows:\n\n| User-auth | local-auth | parent-auth | auth-info-to-paren |\n|-----------|------------|-------------|--------------------|\n| Yes / No  | Yes        | Yes         | From parent-auth   |\n| Yes / No  | No         | Yes         | From parent-auth   |\n| Yes / No  | Yes        | No          | No                 |\n| No        | No         | No          | No                 |\n| Yes       | No         | No          | From user-auth     |\n\nFor the sps proxy we can perform username and password authentication. The authenticated username and password can be specified on the command line.  \n`proxy sps -S http -T tcp -P 127.0.0.1:8080 -t tcp -p \":33080\" -a \"user1:pass1:0:0:\" -a \"user2:pass2:0:0: \"`  \nFor multiple users, repeat the -a parameter.  \nCan also be placed in a file, the format is one line a `username: password: number of connections: rate: upstream`, and then specified with -F.  \n`proxy sps -S http -T tcp -P 127.0.0.1:8080 -t tcp -p \":33080\" -F auth-file.txt`\n\nIf the upstream has authentication, the lower level can set the authentication information with the -A parameter, for example:  \nupstream: `proxy sps -S http -T tcp -P 127.0.0.1:8080 -t tcp -p \":33080\" -a \"user1:pass1:0:0:\" -a \"user2:pass2:0: 0:\"`  \nSubordinate: `proxy sps -S http -T tcp -P 127.0.0.1:8080 -A \"user1:pass1\" -t tcp -p \":33080\" `\n\nFor more details on certification, please refer to `9.API Certification` and `10.Local Certification`\n\n### 6.7 Multiple Upstream\n\nIf there are multiple upstreams, they can be specified by multiple -Ps.\n\nsuch as:\n\n`proxy sps -P http://127.0.0.1:3100 -P socks5://127.0.0.1:3200`\n\nThe complete format of `-P` is as follows:\n\n`protocol://a:b@2.2.2.2:33080#1`\n\nEach section is explained below:\n\n`protocol://` is the protocol type, possible types and contains the following:\n\n```text  \nHttp is equivalent to -S http -T tcp  \nHttps is equivalent to -S http -T tls --parent-tls-single , which is http(s) proxy over TLS  \nHttps2 is equivalent to -S http -T tls  \nSocks5 is equivalent to -S socks -T tcp  \nSocks5s is equivalent to -S socks -T tls --parent-tls-single , which is socks over TLS  \nSocks5s2 is equivalent to -S socks -T tls  \nSs is equivalent to -S ss -T tcp  \nHttpws is equivalent to -S http -T ws  \nHttpwss is equivalent to -S http -T wss  \nSocks5ws is equivalent to -S socks -T ws  \nSocks5wss is equivalent to -S socks -T wss  \n```  \n\n`a:b` is the username and password of the proxy authentication. If it is ss, `a` is the encryption method, `b` is the password, and no username password can be left blank, for example: `http://2.2.2.2:33080` If the username and password are protected, special symbols can be encoded using urlencode.\n\n`2.2.2.2:33080` is the upstream address, the format is: `IP (or domain name): port `, if the underlying is ws/wss protocol can also bring the path, such as: `2.2.2.2: 33080/ws`;  \nYou can also set the `encryption method` and `password` of `ws\\wss` by appending the query parameters `m` and `k`, for example: `2.2.2.2:33080/ws?m=aes-192-cfb&k=password`\n\n`#1` When multiple upper-level load balancing is a weighting strategy, the weights are rarely used.\n\n### 6.8 Custom Encryption\nThe proxy sps proxy can encrypt tcp data through tls standard encryption and kcp protocol on top of tcp, in addition to support after tls and kcp  \nCustom encryption, that is, custom encryption and tls|kcp can be used in combination, internally using AES256 encryption, only need to define it when using  \nA password can be used, the encryption is divided into two parts, one part is whether the local (-z) encryption and decryption, and the part is the encryption and decryption with the upstream (-Z) transmission.\n\nCustom encryption requires both sides to be proxy.\n\nThe following two levels, three levels for example:\n\nSuppose there is already an http(s) proxy: `6.6.6.6:6666`\n\nSecondary instance\n\nExecute on level 1 vps (ip: 2.2.2.2):  \n`proxy sps -S http -T tcp -P 6.6.6.6:6666 -t tcp -z demo_password -p :7777`  \nLocal secondary execution:  \n`proxy sps -T tcp -P 2.2.2.2:777 -Z demo_password -t tcp -p :8080`  \nIn this way, when the website is accessed through the local agent 8080, the target website is accessed through encrypted transmission with the upstream.\n\n\nThree-level instance\n\nExecute on level 1 vps (ip: 2.2.2.2):  \n`proxy sps -S http -T tcp -P 6.6.6.6:6666 -t tcp -z demo_password -p :7777`  \nExecute on the secondary vps (ip: 3.3.3.3):  \n`proxy sps -T tcp -P 2.2.2.2:7777 -Z demo_password -t tcp -z other_password -p :8888`  \nLocal three-level execution:  \n`proxy sps -T tcp -P 3.3.3.3:8888 -Z other_password -t tcp -p :8080`  \nIn this way, when the website is accessed through the local agent 8080, the target website is accessed through encrypted transmission with the upstream.\n\n### 6.9 Compressed transmission\nThe proxy sps proxy can encrypt tcp data through custom encryption and tls standard encryption and kcp protocol on top of tcp. It can also be used before custom encryption.  \nCompress the data, that is, the compression function and the custom encryption and tls|kcp can be used in combination, and the compression is divided into two parts.  \nPart of it is local (-m) compression transmission, and part is whether the transmission with the upstream (-M) is compressed.\n\nCompression requires both sides to be proxy, and compression also protects (encrypts) data to some extent.\n\nThe following two levels, three levels for example:\n\nSecondary instance\n\nExecute on level 1 vps (ip: 2.2.2.2):  \n`proxy sps -t tcp -m -p :7777`  \nLocal secondary execution:  \n`proxy sps -T tcp -P 2.2.2.2:777 -M -t tcp -p :8080`  \nIn this way, when the website is accessed through the local agent 8080, the target website is accessed through compression with the upstream.\n\n\nThree-level instance\n\nExecute on level 1 vps (ip: 2.2.2.2):  \n`proxy sps -t tcp -m -p :7777`  \nExecute on the secondary vps (ip: 3.3.3.3):  \n`proxy sps -T tcp -P 2.2.2.2:7777 -M -t tcp -m -p :8888`  \nLocal three-level execution:  \n`proxy sps -T tcp -P 3.3.3.3:8888 -M -t tcp -p :8080`  \nIn this way, when the website is accessed through the local agent 8080, the target website is accessed through compression with the upstream.\n\n### 6.10 Disabling the protocol\nBy default, SPS supports http(s) and socks5 two proxy protocols. We can disable a protocol by parameter.  \nFor example:\n1. Disable the HTTP(S) proxy function to retain only the SOCKS5 proxy function, parameter: `--disable-http`.  \n   `proxy sps -T tcp -P 3.3.3.3:8888 -M -t tcp -p :8080 --disable-http`\n\n1. Disable the SOCKS5 proxy function to retain only the HTTP(S) proxy function, parameter: `--disable-socks`.  \n   `proxy sps -T tcp -P 3.3.3.3:8888 -M -t tcp -p :8080 --disable-socks`\n\n### 6.11 Speed limit\n\nSuppose there is a SOCKS5 upstream:\n\n`proxy socks -p 2.2.2.2:33080 -z password -t tcp`\n\nSPS lower level, speed limit 100K\n\n`proxy sps -S socks -P 2.2.2.2:33080 -T tcp -Z password -l 100K -t tcp -p :33080`\n\nIt can be specified by the `-l` parameter, for example: 100K 2000K 1M . 0 means no limit.\n\n### 6.12 Specifying Outgoing IP\n\nThe `--bind-listen` parameter can be used to open the client connection with the portal IP, and use the portal IP as the outgoing IP to access the target website. If the ingress IP is an intranet IP, the egress IP does not use the ingress IP.\n\n`proxy sps -S socks -P 2.2.2.2:33080 -T tcp -Z password -l 100K -t tcp --bind-listen -p :33080`\n\n#### Flexible Outgoing IP\n\nAlthough the above `--bind-listen` parameter can specify the  outgoing IP, the `entry IP` and ` outgoing IP` cannot be interfered by humans. If you want the ingress IP to be different from the egress IP, you can use the `--bind-ip` parameter, format: `IP:port`, for example: `1.1.1.1:8080`\n, `[2000:0:0:0:0:0:0:1]:8080`. For multiple binding requirements, you can repeat the `--bind-ip` parameter.\n\nFor example, the machine has IP `5.5.5.5`, `6.6.6.6`, and monitors two ports `8888` and `7777`, the command is as follows:\n\n`proxy sps -t tcp -p :8888,:7777 --bind-ip 5.5.5.5:7777 --bind-ip 6.6.6.6:8888`\n\nThen the client access port `7777`, the  outgoing IP is `5.5.5.5`, access port `8888`, the  outgoing IP is `6.6.6.6`, if both `--bind-ip` and `--bind- are set at the same time listen`,`--bind-ip` has higher priority.\n\nIn addition, the `IP` part of the `--bind-ip` parameter supports specifying the `network interface name`, `wildcards`, and more than one. The details are as follows:\n\n- Specify the network interface name, such as: `--bind-ip eth0:7777`, then the client accesses the `7777` port, and the egress IP is the IP of the eth0 network interface.\n- The network interface name supports wildcards, for example: `--bind-ip eth0.*:7777`, then the client accesses\n  the `7777` port, and the egress IP is a randomly selected one of the network interface IPs starting with `eth0.`.\n- IP supports wildcards, such as: `--bind-ip 192.168.?.*:7777`, then the client accesses the `7777` port, and the\n  outgoing IP is all the IPs of the machine, matching the IP of `192.168.?.*` A randomly selected one.\n- It can also be multiple combinations of network interface name and IP, separated by half-width commas, such\n  as: `--bind-ip pppoe??,192.168.?.*:7777`, then the client accesses the port `7777`, The outgoing IP is the machine's\n  network interface name matching `pppoe??`\n  It is a randomly selected one among all IPs of the machine that matches `192.168.?.*`.\n- The wildcard character `*` represents 0 to any number of characters, and `?` represents 1 character.\n- If the IP of the network interface changes, it will take effect in real time.\n- You can use the `--bind-refresh` parameter to specify the interval to refresh the local network interface information, the default is `5`, the unit is second.\n\n### 6.13 Certificate parameters use base64 data\n\nBy default, the -C, -K parameter is the path to the crt certificate and the key file.\n\nIf it is the beginning of base64://, then the latter data is considered to be base64 encoded and will be used after decoding.\n\n### 6.14 Independent Service\nA sps port can complete the full-featured proxy `http\\socks\\ss` function.  \nThe following command is to open the http(s)\\ss\\socks service with one click, and enable the udp of socks5 and the udp of ss at the same time.  \n`proxy sps -p: 33080 --ssudp --udp --udp-port 0`\n\n### 6.15 Target Redirection\nThe https(s)\\socks5\\ss proxy function provided by the sps function, the client connects to the specified \"target\" through the sps proxy. This \"target\" is generally a website or an arbitrary tcp address.  \nThe website \"target\" is generally foo.com: 80, foo.com: 443, sps supports the use of the --rewrite parameter to specify a \"target\" redirection rule file, redirect the target, the client is non-perceived,  \nFor example, if you redirect to \"target\": demo.com:80 to 192.168.0.12:80, then the client visits the website demo.com, in fact, the website service provided by 192.168.0.12.  \nExample of a \"target\" redirection rule file:\n\n```text  \n# example  \nWww.a.com:80 10.0.0.2:8080  \n**.b.com:80 10.0.0.2:80  \n192.168.0.11:80 10.0.0.2:8080  \n```  \n\nWhen sps is an independent service, an additional local socks5 service will be opened to occupy a random port. Now the parameter `--self-port` can be manually specified when needed. The default is 0 to use random.\n\n### 6.16 Fixed UDP PORT\n\nBy default, the port number of the UDP function of ss's socks5 is specified by the `rfc1982 draft`. It is randomly specified during the protocol handshake process and does not need to be specified in advance.\n\nHowever, in some cases, you need to fix the UDP function port. You can fix the port number of the UDP function by the parameter `--udp-port port_number`, for example:\n\n`proxy sps -t tcp -p \"0.0.0.0:38080\" --udp-port 38081`\n\nIt should be noted that the ss function of sps also has UDP function, and the UDP port of ss is the same as the tcp port, so avoid the conflict between the UDP port of socks5 and the UDP port of ss.\n\nTo specify a port that is different from the tcp port.\n\n### 6.17 Iptables Transparent Proxy\nThe sps mode supports the iptables transparent forwarding support of the Linux system, which is commonly referred to as the iptables transparent proxy. If a iptables transparent proxy is performed on the gateway device, the device that is connected through the gateway can realize a non-aware proxy.\n\nExample start command:\n\n`proxy sps --redir -p :8888 -P httpws: //1.1.1.1:33080`\n\nHere it is assumed that there is an http superior proxy 1.1.1.1:33080, which uses ws to transmit data.\n\nThen add iptables rules, here are the reference rules:\n\n```shell\n#upstream proxy server IP address:\nproxy_server_ip = 1.1.1.1\n\n#Router running proxy listening port:\nproxy_local_port = 33080\n\n#There is no need to modify the following\n#create a new chain named PROXY\niptables -t nat -N PROXY\n\n#Ignore your PROXY server's addresses  \n#It's very IMPORTANT\uff0c just be careful\u3002  \n\niptables -t nat -A PROXY -d $proxy_server_ip -j RETURN  \n\n#Ignore LANs IP address  \niptables -t nat -A PROXY -d 0.0.0.0/8 -j RETURN  \niptables -t nat -A PROXY -d 10.0.0.0/8 -j RETURN  \niptables -t nat -A PROXY -d 127.0.0.0/8 -j RETURN  \niptables -t nat -A PROXY -d 169.254.0.0/16 -j RETURN  \niptables -t nat -A PROXY -d 172.16.0.0/12 -j RETURN  \niptables -t nat -A PROXY -d 192.168.0.0/16 -j RETURN  \niptables -t nat -A PROXY -d 224.0.0.0/4 -j RETURN  \niptables -t nat -A PROXY -d 240.0.0.0/4 -j RETURN  \n\n#Anything to port 80 443 should be redirected to PROXY's local port  \niptables -t nat -A PROXY -p tcp  -j REDIRECT --to-ports $proxy_local_port\n#Apply the rules to nat client  \niptables -t nat -A PREROUTING -p tcp -j PROXY  \n#Apply the rules to localhost  \niptables -t nat -A OUTPUT -p tcp -j PROXY  \n```  \n\n- Clear the entire chain iptables -F chain name such as iptables -t nat -F PROXY\n- Delete the specified user-defined chain iptables -X chain name e.g. iptables -t nat -X PROXY\n- Delete rule from selected chain iptables -D chain name rule details e.g. iptables -t nat -D PROXY -d\n  223.223.192.0/255.255.240.0 -j RETURN\n\n### 6.19 UDP Compatibility Mode\n\nBy default, the UDP functionality of the SOCKS5 proxy in the proxy operates in accordance with the SOCKS5 RFC 1928\nspecification. However, there are certain SOCKS5 clients that do not adhere to the specified rules. To ensure\ncompatibility with such clients, the `--udp-compat` parameter can be added to activate the compatibility mode for SOCKS5\nUDP functionality.\n\nAdditionally, the `-udp-gc` parameter can be utilized to set the maximum idle time for UDP. When this time threshold is\nexceeded, UDP connections will be released.\n\n### 6.20 Custom DNS\n\nThe `--dns-address` and `--dns-ttl` parameters are used to specify the dns used by the proxy to access the domain name (`--dns-address`)\nAs well as the number of seconds for caching the parsing results (--dns-ttl) to avoid the interference of the system dns on the proxy. \nThe additional caching function can also reduce the dns parsing time and improve the access speed.\nTranslation:\n`Agent sps -p \":33080\" --dns-address \"8.8.8.8:53\" --dns-ttl 300`\n\nYou can also use the parameter `--dns-interface` to specify the bandwidth used for dns resolution, \nfor example: `--dns-interface eth0`, dns resolution will use the eth0 bandwidth, this parameter must be set to `--dns-address` to be effective.\n\n### 6.21 Help\n\n`proxy help sps`\n\n## 7.KCP Configuration\n\n### 7.1 Configuration Introduction\n\nMany functions of the proxy support the kcp protocol. Any function that uses the kcp protocol supports the configuration\nparameters described here.  \nTherefore, the KCP configuration parameters are introduced here.\n\n### 7.2 Detailed configuration\nThere are a total of 17 KCP configuration parameters, you can not set them, they have default values, if for the best effect,  \nYou need to configure the parameters according to your own network conditions. Because the kcp configuration is complex, it requires a certain network basics.  \nIf you want to get more detailed configuration and explanation of kcp parameters, please search for yourself. The command line name for each parameter, along with the default values and simple function descriptions are as follows:\n```  \n--kcp-key=\"secrect\" pre-shared secret between client and server  \n--kcp-method=\"aes\" encrypt/decrypt method, can be: aes, aes-128, aes-192, salsa20, blowfish,  \n\u00a0Twofish, cast5, 3des, tea, xtea, xor, sm4, none  \n--kcp-mode=\"fast\" profiles: fast3, fast2, fast, normal, manual  \n--kcp-mtu=1350 set maximum transmission unit for UDP packets  \n--kcp-sndwnd=1024 set send window size(num of packets)  \n--kcp-rcvwnd=1024 set receive window size(num of packets)  \n--kcp-ds=10 set reed-solomon erasure coding - datashard  \n--kcp-ps=3 set reed-solomon erasure coding - parityshard  \n--kcp-dscp=0 set DSCP(6bit)  \n--kcp-nocomp disable compression  \n--kcp-acknodelay be carefull! flush ack immediately when a packet is received  \n--kcp-nodelay=0 be carefull!  \n--kcp-interval=50 be carefull!  \n--kcp-resend=0 be carefull!  \n--kcp-nc=0 be carefull! no congestion  \n--kcp-sockbuf=4194304 be carefull!  \n--kcp-keepalive=10 be carefull!  \n```  \nTip:  \nParameters: -- four fast3, fast2, fast, normal modes in kcp-mode,  \nEquivalent to setting the following four parameters:  \nNormal:`--nodelay=0 --interval=40 --resend=2 --nc=1`  \nFast :`--nodelay=0 --interval=30 --resend=2 --nc=1`  \nFast2:`--nodelay=1 --interval=20 --resend=2 --nc=1`  \nFast3:`--nodelay=1 --interval=10 --resend=2 --nc=1`\n\n## 8. Security DNS\n\n### 8.1 Introduction\nDNS is known as the service provided by UDP port 53, but with the development of the network, some well-known DNS servers also support TCP mode dns query, such as Google's 8.8.8.8, the DNS anti-pollution server principle of the proxy is to start a proxy DNS proxy locally. Server, which uses TCP to perform dns query through the upstream agent. If it communicates with the upstream agent, it can perform secure and pollution-free DNS resolution. It also supports independent services, concurrent parsing, and enhanced enhanced hosts file function to support flexible concurrent parsing and forwarding.\n\nDns resolution order:\n1. Use the parameter --hosts to parse.\n2. If the domain name to be resolved is not found in 1, it is parsed using the parameter --forward rule.\n3. The domain name to be resolved is not found in 1 and 2, and the default --default parsing is used. The default default behavior parameter values are three: proxy, direct, and system.  \n   The three parameter values are explained as follows:  \n   Proxy: The domain name is resolved by the dns server specified by the -q parameter.  \n   Direct: Connect to the dns server specified by the -q parameter to resolve the domain name through the local network.  \n   System: resolves the domain name through the system dns.\n\nTip:  \nThe host file format specified by the --hosts parameter is the same as the system hosts file, and the domain name supports wildcards. You can refer to the hosts file.  \nThe parsing forwarding rule file specified by the --forward parameter can be referenced to the resolve.rules file. The domain name supports wildcards. It supports multiple dns servers for each domain name to be parsed concurrently. Whoever resolves the fastest resolution will use the resolution result.  \nThe -q parameter can specify multiple remote dns servers to perform concurrent parsing. Whoever resolves the fastest parsing success, the default is: 1.1.1.1, 8.8.8.8, 9.9.9.9, multiple comma-separated,  \nFor example, you can also bring ports: 1.1.1.1, 8.8.8.8#53, 9.9.9.9\n\nIf you are a standalone service, you don't need a upstream:  \nCan perform:  \n`proxy dns --default system -p :5353`  \nOr  \n`proxy dns --default direct -p :5353`\n\n### 8.2 Example of use\n\n#### 8.2.1 Normal HTTP(S) upstream agent\n\nSuppose there is a upstream agent: 2.2.2.2:33080  \nLocal execution:  \n`proxy dns -S http -T tcp -P 2.2.2.2:33080 -p :53`  \nThen the local UDP port 53 provides DNS resolution.\n\n#### 8.2.2 Ordinary SOCKS5 upstream agent\n\nSuppose there is a upstream agent: 2.2.2.2:33080  \nLocal execution:  \n`proxy dns -S socks -T tcp -P 2.2.2.2:33080 -p :53`  \nThen the local UDP port 53 provides DNS resolution.\n\n#### 8.2.3 TLS encrypted HTTP(S) upstream agent\n\nSuppose there is a upstream agent: 2.2.2.2:33080  \nThe commands executed by the upstream agent are:  \n`proxy http -t tls -C proxy.crt -K proxy.key -p :33080`  \nLocal execution:  \n`proxy dns -S http -T tls -P 2.2.2.2:33080 -C proxy.crt -K proxy.key -p :53`  \nThen the local UDP port 53 provides a secure anti-pollution DNS resolution function.\n\n#### 8.2.4 TLS-encrypted SOCKS5 upstream agent\n\nSuppose there is a upstream agent: 2.2.2.2:33080  \nThe commands executed by the upstream agent are:  \n`proxy socks -t tls -C proxy.crt -K proxy.key -p :33080`  \nLocal execution:  \n`proxy dns -S socks -T tls -P 2.2.2.2:33080 -C proxy.crt -K proxy.key -p :53`  \nThen the local UDP port 53 provides a secure anti-pollution DNS resolution function.\n\n#### 8.2.5 KCP encrypted HTTP(S) upstream agent\n\nSuppose there is a upstream agent: 2.2.2.2:33080  \nThe commands executed by the upstream agent are:  \n`proxy http -t kcp -p :33080`  \nLocal execution:  \n`proxy dns -S http -T kcp -P 2.2.2.2:33080 -p :53`  \nThen the local UDP port 53 provides a secure anti-pollution DNS resolution function.\n\n#### 8.2.6 KCP encrypted SOCKS5 upstream agent\n\nSuppose there is a upstream agent: 2.2.2.2:33080  \nThe commands executed by the upstream agent are:  \n`proxy socks -t kcp -p :33080`  \nLocal execution:  \n`proxy dns -S socks -T kcp -P 2.2.2.2:33080 -p :53`  \nThen the local UDP port 53 provides a secure anti-pollution DNS resolution function.\n\n#### 8.2.7 Custom encrypted HTTP(S) upstream agent\n\nSuppose there is a upstream agent: 2.2.2.2:33080  \nThe commands executed by the upstream agent are:  \n`proxy http -t tcp -p :33080 -z password`  \nLocal execution:  \n`proxy dns -S http -T tcp -Z password -P 2.2.2.2:33080 -p :53`  \nThen the local UDP port 53 provides a secure anti-pollution DNS resolution function.\n\n#### 8.2.8 Custom encrypted SOCKS5 upstream agent\nSuppose there is a upstream agent: 2.2.2.2:33080  \nThe commands executed by the upstream agent are:  \n`proxy socks -t kcp -p :33080 -z password`  \nLocal execution:  \n`proxy dns -S socks -T tcp -Z password -P 2.2.2.2:33080 -p :53`  \nThen the local UDP port 53 provides a secure anti-pollution DNS resolution function.\n\n## 9.API Authentication\n\nThe proxy's http(s)/socks5/sps proxy function supports user-to-agent access via the API.\n\n### What can I do through the API?\n\n- User dimension, which controls the single connection rate and controls the maximum number of connections, max connections count per seconds (QPS).\n- IP dimension, which controls the single connection rate and controls the maximum number of connections, max connections count per seconds (QPS).\n- Dynamic upstream, can dynamically obtain its upstream from the API according to the user or client IP, and support http(s)/socks5/ss upstream.\n- Authenticate every connection, regardless of whether client authentication is required.\n- Cache authentication results, time can be set to reduce API pressure.\n- Limit the total bandwidth speed by `user` or `client ip` or `server port`.\n\n#### Specific use\nThe proxy's http(s)/socks5/sps proxy API function is controlled by three parameters: `--auth-url` and `--auth-nouser` and `--auth-cache`.  \nThe parameter `--auth-url` is the HTTP API interface address. When the client connects, the proxy will request the url in GET mode, with the following parameters. If the HTTP status code 204 is returned, the authentication is successful. In other cases, the authentication fails.\n\nAn example of a complete request API:  \n`http://test.com/auth.php?user=a&pass=b&client_addr=127.0.0.1:49892&local_addr=127.0.0.1:8100&target=http%3A%2F%2Fwww.baidu.com&service=http&sps=0`\n\n#### Parameter Description\n`user and pass` When the proxy turns on authentication, here is the username and password provided by the client.  \n`client_addr` The address used by the client to access the proxy, format IP: port.  \n`local_addr` The proxy address accessed by the client, format IP: port.  \n`service` Proxy type, divided into: http, socks.  \nWhether the `sps` proxy is provided by sps, 1: yes, 0: no.  \n`target` The target to be accessed by the client. If it is an http(s) proxy, the target is the specific url accessed; if it is a socks5 proxy, the target is empty.\n\n#### Example\nSuppose --auth-url http://127.0.0.1:333/auth.php points to a php interface address.  \nThe contents of auth.php are as follows:\n\n```php  \n<?php  \n#all users and password  \n$alluser=[\n    \"user1\"=>\"pass1\",\n    \"user2\"=>\"pass2\",\n    \"user3\"=>\"pass3\",\n    \"user4\"=>\"pass4\",\n];\n$proxy_ip=$_GET['local_addr'];  \n$user_ip=$_GET['client_addr'];  \n$service=$_GET['service'];  \n$is_sps=$_GET['sps']=='1';  \n$user=$_GET['user'];  \n$pass=$_GET['pass'];  \n$target=$_GET['target'];  \n\n//business checking\n//....  \n$ok=false;\nforeach ($alluser as $dbuser => $dbpass) {\n    if ($user==$dbuser&&$pass==$dbpass){\n        $ok=true;\n        break;\n    }\n}\n\n//set the authentication result  \nif($ok){\n    header(\"userconns:1000\");  \n    header(\"ipconns:2000\");  \n    header(\"userrate:3000\");  \n    header(\"iprate:8000\");  \n    header(\"userqps:5\");\n    header(\"ipqps:2\");\n    header(\"upstream:http://127.0.0.1:3500?parent-type=tcp\");  \n    header(\"outgoing:1.1.1.1\");  \n    header(\"userTotalRate:1024000\");  \n    //header(\"ipTotalRate:10240\");  \n    //header(\"portTotalRate:10240\");  \n    //header(\"RotationTime:60\");  \n    header(\"HTTP/1.1 204 No Content\");  \n}\n```  \n\n#### HTTP HEADER Explanation\n\n`userconns`: The maximum number of connections for the user, not limited to 0 or not set this header.  \n`ipconns`: The maximum number of connections for the user IP, not limited to 0 or not set this header.  \n`userrate`: User's single TCP connection rate limit, in bytes/second, is not limited to 0 or does not set this header.  \n`iprate`: The single TCP connection rate limit of the client IP, in bytes/second, not limited to 0 or not set this\nheader.  \n`userqps`: The maximum number of connections per second (QPS) for the user, not limited to 0 or not set this header.  \n`ipqps`: The maximum number of connections per second (QPS) for the client IP, not limited to 0 or not set this\nheader.  \n`upstream`: The upstream used, not empty, or not set this header.  \n`outgoing`: The outgoing IP used. This setting is only effective when the upstream is empty.\nThe IP set here must be owned by the machine where the proxy is located, otherwise, the proxy will not function\nproperly.\nStarting from version `v13.2`, `outgoing` supports multiple subnet formats separated by commas. The proxy will randomly\nselect an IP from the subnet as the outgoing IP. This randomness will also be keep when authentication cache is\nenabled.\nThe following formats are supported for subnets:\n\n1. Format: `192.168.1.1`, Description: Single IP, IPv4\n1. Format: `3001:cb2::`, Description: Single IP, IPv6\n1. Format: `192.168.1.1/24`, Description: CIDR format subnet, IPv4\n1. Format: `3001:cb2::/126`, Description: CIDR format subnet, IPv6\n1. Format: `192.168.1.1-192.168.1.200`, Description: IP range, IPv4\n1. Format: `2311:ca2::-2311:ca2::10`, Description: IP range, IPv6\n\nExample: `192.16.1.1,192.161.1.2,192.168.1.2-192.168.1.255`\n\n`userTotalRate`\uff1a Limit the `user` total bandwidth speed (bytes per second), unit is byte, not limited to 0 or not set\nthis header.  \n`ipTotalRate`\uff1aLimit the `client ip` total bandwidth speed (bytes per second), unit is byte, not limited to 0 or not set\nthis header.    \n`portTotalRate`\uff1aLimit the `server port` total bandwidth speed (bytes per second), unit is byte, not limited to 0 or not\nset this header.  \n`RotationTime`: `(requires version >= v13.2)` Controls the time interval, in seconds, for randomly selecting the\noutgoing IP.\nLeave it blank or unset this header if not needed.When the outgoing returned by the API is a subnet, and if you don't\nwant the proxy\nto randomly select a new IP for each client connection, you can use this parameter to control the time interval for\nrandom IP selection.\nIf within the interval period, the previously selected IP will be used. If the API does not return the `RotationTime`\nheader\nor if `RotationTime` is set to 0, the proxy will randomly select an IP from the outgoing subnet as the outgoing IP for\neach client connection.\n\n#### Details of total bandwidth speed limitation\n1. `userrate`\u3001`iprate` and `userTotalRate`\u3001`ipTotalRate`\u3001`portTotalRate` can be set at same time,\n   for example: set `userrate` with 1024000 to limit the user's total bandwidth speed to 1M/s of user's all tcp connections. And set `userrate` with 102400 to limit the user one tcp connection speed to 100K/s.\n2. if `userTotalRate`\u3001`ipTotalRate` \u3001`portTotalRate` set at same time, the valid order is : `userTotalRate` -> `ipTotalRate` -> `portTotalRate`\n3. if `userTotalRate`\u3001`portTotalRate` set at same time, and set `--auth-nouser`\uff0call clients that not send username will be as an \"empty username\" user\uff0cthey are using a same limiter.\n\n#### Tips\n1. By default, `--auth-url` is required to provide the user name and password. If you do not need the client to provide the username and password, and authenticate, you can add `--auth-nouser`. The visit will still access the authentication address `--auth-url` for authentication. Only the $user authentication username and the $pass authentication password received in the php interface are empty when client didn't send username and password.\n2. Connection limit priority: User authentication file limit - \"File ip.limit limit -\" API user limit - \"API IP limit -\" command line global connection limit.\n3. Rate Limit Priority: User Authentication File Rate Limit - \"File ip.limit Rate Limit -\" API User Rate Limit - \"API IP Rate Limit - \"Command Line Global Rate Limit.\n4. The upstream obtains the priority: the upstream of the user authentication file - the file ip.limit upstream-\"API\n   upstream-\" command line specifies the upstream.\n5. `--auth-cache` authentication cache, cache the authentication result for a certain period of time, improve\n   performance, reduce the pressure on the authentication interface, --auth-cache unit seconds, default 0, set 0 to\n   close the cache.\n6. By default, `--auth-cache` only caches the results of successful authentication and does not cache the results of\n   failed authentication. If you need to cache the failed authentication results for a certain period of time,\n   It can be set through the parameter `-auth-fail-cache` to improve performance and reduce the pressure on the\n   authentication interface. The unit of --auth-fail-cache is seconds. The default is 0. Setting 0 turns off the cache.\n\n#### upstream detailed description\n\n1. When the parameter `sps` is 0.  \n   When the service is http, upstream only supports http(s) proxy, and does not support authentication.\n   If authentication is required, it can be replaced by sps. Format:  \n   `http://127.0.0.1:3100?argk=argv`  \n   When the service is a socks, the upstream only supports the socks5 proxy. The format is:  \n   `socks5://127.0.0.1:3100?argk=argv`\n\nExplanation: `http://`,`socks5://` is fixed, `127.0.0.1:3100` is the address of the upstream\n\n2. When `sps` is 1.  \n   Upstream supports socks5, http(s) proxy, support authentication, format: `protocol://a:b@2.2.2.2:33080?argk=argv`, please refer to SPS chapter for details, **multiple upstreams** , the description of the `-P` parameter.\n3. Parameters, `?` followed by `argk=argv` are parameters: parameter name = parameter value, multiple parameters are connected with `&`.  \n   All the supported parameters are as follows, and the meaning of the command line with the same name is the same.\n\n   1. parent-type : upper-level transport type, support tcp, tls, ws, wss\n   2. parent-ws-method: The encryption method of the upper-level ws transmission type, the supported value is the same as the value range supported by the command line.\n   3. parent-ws-password: The upper-level ws transmission type encryption password, the alphanumeric password\n   4. parent-tls-single : Whether the upper-level tls transport type is a one-way tls, which can be: true | false\n   5. timeout : timeout for establishing tcp connection, number, in milliseconds\n   6. ca : The base64-encoded string of the upper-level tls transport type ca certificate file.\n   7. cert : The base64 encoded string of the higher level tls transport type certificate file.\n   8. key : The base64 encoded string of the higher-level tls transport type certificate key file.\n   9. luminati:if upstram is luminati proxies\uff0cvalue can be: true or false\u3002\n\n4.Upstream supports multiple instances, regardless of whether SPS is 1 or 0, and they are separated by semicolons ;.\nWhen connecting to an upstream, by default, one upstream is randomly chosen. However, it supports setting the weight\nparameter for each upstream.\nIf the weight is set for any upstream, all upstreams must have the weight parameter set. The weight must be greater than\n0;\notherwise, the weight is considered invalid, and random selection is applied.\nThis selection logic is also working after the authentication cache is enabled.\n\nExamples of multiple upstreams:\n\n1. Example without weight settings: `http://127.0.0.1:3100?argk=argv;http://127.0.0.2:3100?argk=argv`\n2. Example with weight settings: `http://127.0.0.1:3100?argk=argv&weight=10;http://127.0.0.2:3100?argk=argv&weight=20`\n\nWeight selection logic:  \nWhen a weight is set for an upstream, it divides the total weight among the upstreams based on their order.\nFor example, if there are two upstreams with weights 10 and 20 respectively, the total weight is 30.\nThe first upstream's weight range is 1-10, and the second upstream's weight range is 11-30.\nThis logic extends to more upstreams. Each time, a random number within the total weight range is chosen,\nand the corresponding upstream is selected based on this number's range.\n\n### Traffic report / Traffic limit / Traffic statistics\n\nThe proxy's http (s) / socks5 / sps / tcp / udp proxy function supports traffic reporting. You can set an http interface address through the parameter `--traffic-url`.\nThe proxy will report the traffic used for this connection to this address.Specifically, the proxy sends an HTTP to GET request to the HTTP URL address set by `--traffic-url`.\nThere are two reporting modes, which can be specified by the `--traffic-mode` parameter. It can be reported in the normal mode or in the fast mode.\n\n1. Report in `normal` normal mode  \n   When the connection is released, the proxy will report the traffic used for this connection to this `--traffic-url`\n   address.\n\n2. Report in `fast` mode    \n   For each connection that has been established, the proxy will `timely` report the traffic generated by this\n   connection to this` --traffic-url` address.  \n   `Timing` defaults to 5 seconds, and you can modify` Timing` to the appropriate number of seconds via the\n   parameter `--traffic-interval`.\n\n3. Report in `fast` global mode  \n   By default, if the API can't handle high concurrency report access, you can use the fast global mode,\n   Use the parameter `--fast-global` to open, this parameter is only valid when `--traffic-mode=fast`. In fast global\n   mode, for a `--traffic-url`,\n   no matter how many concurrent connections there are, only have one reporter, and the reporting interval is 5 seconds.\n   In this mode, the reporting request method is `POST`, `Content-Type` is `application/json`, the post body data\n   is `JSON Array`, example: `[{},{}]`, the keys of object in the array are same with the\n   following `Reqeust parameter description`.\n4. The traffic reporting function combined with the above API authentication function can control the user's traffic\n   usage in real time. The traffic is reported to the interface. The interface writes the traffic data to the database,\n   and then the authentication API queries the database to determine the traffic usage and determine whether the user\n   can be successfully authenticated.\n\nThe following is a complete URL request example:\n\n`http://127.0.0.1:33088/user/traffic?bytes=337&client_addr=127.0.0.1%3A51035&id=http&server_addr =127.0.0.1%3A33088&target_addr=myip.ipip.net%3A80&username=a`\n\n**Request parameter description:**  \n`id`: service id flag.  \n`server_addr`: proxies's address requested by the client, format: IP: port.  \n`client_addr`: client address, format: IP: port.  \n`target_addr`: target address, format: \"IP: port\", when tcp / udp proxy, this is empty.  \n`username`: proxy authentication user name, this is empty when tcp / udp proxy.  \n`bytes`: the number of traffic bytes used by the user.  \n`out_local_addr`: outgoing tcp connection's local address,format: IP: port.  \n`out_remote_addr`: outgoing tcp connection's remote address,format: IP: port.  \n`upstream`: upstream used by outgoing tcp connection, if none upstream be used, it's empty.\n\n#### Tips\n\nThe `--traffic-url` URL must response the HTTP status code` 204`. Only when the traffic is reported will the report be considered successful, and if it response other status codes, it will be considered that the reported traffic failed, and the log will be output.\n\n#### traffic flow\n\n![traffic](https://cdn.jsdelivr.net/gh/snail007/goproxy@master/doc/images/traffic.png)\n\n\n###  Disconnect the user's connection\n\nThe proxy's http (s) / socks5 / sps proxy function supports a control interface, which can be specified by the parameter --control-url http interface address,\nThen the proxy will interval send all the usernames or client IPs currently connected to the proxy to this URL. Specifically, the proxy sends an HTTP to POST request to the HTTP URL address set by --control-url.\n\n`interval` defaults to 30 seconds, this value can be modified via the --control-sleep parameter.\n\nWhen the user expires, or the user's traffic has been used up, the authentication API can only control the user cannot create a new connection, but the connection with the proxy has been established and the connection cannot be immediately disconnected.\nThen this problem can be solved through the control interface. The control interface will return the content through the control interface in the slowest `interval` time, and the end is invalid when the user establishes the connection.\n\n#### Request Description\n\nAn HTTP POST request will be sent to the control. The interface `form` has three fields: interface, ip, conns, and the `conns` field requires a user whose proxy version is greater than proxy `12.2`.\n\n`user` The username currently connected to the agent, multiple separated by commas, for example: user1, user2\n\n`ip`  The client IP is connected to the proxy, and multiple clients using English are split addresses, for example: 1.1.1.1, 2.2.2.2\n\n`conns` The tcp connection information currently connecting to the proxy port to transmit data. The conns value is a json string, the format is a sequence of connections, the element is an object, the object contains the details of the connection,\nconns format: `[{\"id\":\"ab7bf1f10501d6f7\",\"client\":\"127.0.0.1:62112\",\"server\":\"127.0.0.1:9092\",\"user\":\"\"}]`\nObject field description: id: connection id, client: client's unique IP address and port, server: client's IP and no port access, user's connection authentication (null if any)\n\n#### Response Data Description\n\nThe data returned by the control interface is invalid user and IP or connection. The format is a json object data. There are three fields user, ip, and conns. The `conns` field requires the proxy version greater than or equal to `12.2`.\nFormat: `{\"user\":\"a,b\",\"ip\":\"\",conns:[\"ab7bf1f10501d6f7\",\"cb7bf1f10501d6f7\"]}`\n\n`user`: The username currently connected to the proxy, multiple separated by commas, not left blank, for example: user1, user2\n\n`ip`: The ip address of the client currently connected to the proxy, multiple separated by commas, not left blank, for example: 1.1.1.1, 2.2.2.2\n\n`conns`: is an array, the element is a connection id, this id is the id field of the connection object in conns in the above `Request Description`.\n\nIntroduce:\n- The connection established by the returned user and ip will be disconnected by the proxy.\n- Connections matching the returned conns will be disconnected by the proxy.\n- If the returned data contains both: user or ip, and conns, then the user or ip will be ignored, and only the connection matching conns will be disconnected.\n- When the connection is closed, if the authentication cache is enabled, the `user` or `IP` authentication cache will be cleared.\n\n#### Example\nSuppose --control-url `http://127.0.0.1:33088/user/control.php` points to a PHP interface address.\nThe content of control.php is as follows:\n\n```php  \n<?php  \n#revcieve proxy post data\n$userArr=explode(\",\",$_POST['user']);   \n$ipArr=$_GET['ip'];  \n\n//invalid users array\n$badUsers=[]; \n\nforeach ($userArr as $user) {  \n    //logic business, push invalid user into $badUsers\n    $badUsers[]=$user;\n}  \n$data=[\"user\"=>implode(\",\"$badUsers),\"ip\"=>\"\",\"conns\"=>[]];\n\necho json_encode($data);\n```  \n\n\n## 10. Authentication\n\nThe proxy http(s)/socks5/sps proxy function supports the user to access the proxy pair through the configuration file, and supports the http(s) proxy ``Proxy Basic proxy authentication` and the socks5 proxy authentication.\n\n### start using\nThe proxy's http(s)/socks5/sps proxy function can pass  \n`--auth-file`, `--max-conns`, `--ip-limit`, `--rate-limit`, `-a` These five parameters control.\n\n#### Detailed explanation of parameters\n\n##### `--auth-file`\nThe authenticated user name and password file. This parameter specifies a file, one line per rule, in the format: \"username: password: number of connections: rate: upstream\".  \n`Connection number` is the maximum number of connections for the user. The 'rate' is the maximum speed of each tcp connection of the user. The unit is: byte/second. The upper level is the upper level used by the user.  \nNot only can the authenticated user be set by `--auth-file`, but also the `-a` parameter can be set directly. Multiple users can repeat multiple `-a` parameters.  \nFor example: `proxy http -a a:b:0:0: -a c:d:0:0:`\n\nExample explanation:  \nFor example: `user:pass:100:10240:http://192.168.1.1:3100`  \n`user` is the authentication username  \n`pass` is the authentication user password (cannot contain a colon:)  \n`100` is the maximum number of connections for this user, not limited to write 0  \n`10240` is the rate limit of this user's single tcp connection, the unit is: byte / sec, no limit write 0  \n`http://192.168.1.1:3100` is the upstream used by this user, no space is left blank\n\n##### `--max-conns`\nLimit the maximum number of global connections for the proxy service, a number, 0 is unrestricted, default is 0.\n\n##### `--ip-limit`\nControls the number of connections and connection rate of the client IP. This parameter specifies a file, one rule per line, and the beginning of # is gaze.  \nThe sample file ip.limit, the rule format is as follows:  \n`127.0.0.1:100:10240:http://192.168.1.1:3100`  \nRule interpretation:  \n`127.0.0.1` is the IP to be restricted  \n`100` is the maximum number of connections for this IP, not limited to write 0  \n`10240` is the rate limit of IP single tcp connection, the unit is: byte / s, no limit write 0  \n`http://192.168.1.1:3100` is the upstream used by this IP, and it is not left blank.\n\n##### `--rate-limit`\nLimit the speed of each tcp connection of the service, for example: 100K 2000K 1M . 0 means unlimited, default 0.\n\n## 11. Cluster\n\nThe proxy supports the cluster management. The proxy is installed on each machine node as an agent, with the control panel [`proxyadmin cluster edition`] (https://github.com/snail007/proxy-admin-cluster) Unified management of proxy services on massive machines.\n\nIf the proxy is to be run as an agent, assume that the cluster port address of the control panel is: `1.1.1.1: 55333`.\n\nThe command example is as follows:\n\n`proxy agent -k xxx -c 1.1.1.1:55333 -i test`\n\nCommand explanation:\n\nagent: is a function parameter, which means running agent mode.\n\n-k : The encryption and decryption key for communication with `proxyadmin cluster edition`. This key is set in the configuration file of` proxyadmin cluster edition`.\n\n-c : The cluster port address of `proxyadmin cluster edition`, format: IP:port.\n\n-i \uff1a The unique identifier of the agent ensures that each agent is different. The \"unique identifier\" specified here is used when adding a node to the control panel. The IP is filled with this \"unique identifier\".\nIf -i is not specified, the default is empty, and the control panel adds the IP field to fill in: the agent's internet IP.\n\n-u: proxy parameter, empty by default. You can specify an agent, and the agent will communicate with the cluster through this agent.  \nThe format is the same as that of `--jumper`. For details, please refer to the `--jumper` part of the manual.\n\nnotice:\n\nWhen the client service is configured in the control panel, all nodes use the same key, which leads to only one client working. To solve this problem,\nClient service parameters can use placeholders: `{AGENT_ID}` to refer to the agent\u2019s id as the client\u2019s key, so as to ensure that each client has a unique key.\n\nFor example, client service parameters:\n\n`client -T tcp -P 1.1.1.1:30000 --k {AGENT_ID}`\n\n## 12. http, https website reverse proxy\n\nThe proxy can reverse proxy http and https websites.\n\nThe supported features are as follows:\n- http and https are converted to each other.\n- multiple upstream.\n- upstream load balance.\n- upstream high available.\n- path mapping.\n- path protection.\n- alias names of bindings.\n\nExample, configure file:`rhttp.toml`\u3002\n\n```shell\nproxy rhttp -c rhttp.toml\n```\n\nFor detail usage, please refer to the configuration file [rhttp.toml](https://github.com/snail007/goproxy/blob/master/rhttp.toml), which has a complete configuration description.",
        "releases": [
            {
                "name": "v14.8",
                "date": "2024-12-20T09:54:24Z"
            },
            {
                "name": "v14.7",
                "date": "2024-10-27T09:23:14Z"
            },
            {
                "name": "v14.6",
                "date": "2024-09-19T04:47:12Z"
            }
        ]
    }
}