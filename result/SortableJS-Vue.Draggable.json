{
    "https://api.github.com/repos/SortableJS/Vue.Draggable": {
        "forks": 2897,
        "watchers": 20270,
        "stars": 20270,
        "languages": {
            "JavaScript": 55792,
            "Vue": 44433,
            "HTML": 561
        },
        "commits": [
            "2022-10-05T12:08:23Z",
            "2021-05-14T18:41:01Z",
            "2020-11-21T12:33:06Z",
            "2020-11-21T04:49:59Z",
            "2020-10-25T01:18:39Z",
            "2020-10-25T01:16:31Z",
            "2020-10-25T00:54:12Z",
            "2020-10-25T00:53:36Z",
            "2020-10-13T21:44:02Z",
            "2020-10-13T04:00:35Z",
            "2020-10-13T03:46:43Z",
            "2020-10-13T03:41:12Z",
            "2020-10-13T03:40:10Z",
            "2020-10-13T02:07:47Z",
            "2020-10-13T02:06:54Z",
            "2020-10-12T23:58:37Z",
            "2020-10-12T23:58:20Z",
            "2020-10-12T23:57:26Z",
            "2020-09-28T06:35:45Z",
            "2020-08-20T14:08:30Z",
            "2020-08-20T13:57:42Z",
            "2020-07-23T16:34:54Z",
            "2020-07-21T12:56:09Z",
            "2020-07-06T16:11:29Z",
            "2020-07-06T04:37:28Z",
            "2020-07-06T02:47:29Z",
            "2020-07-06T02:15:30Z",
            "2020-07-06T01:47:48Z",
            "2020-01-23T15:45:04Z",
            "2019-10-02T11:01:37Z"
        ],
        "creation_date": "2016-06-28T02:50:19Z",
        "contributors": 29,
        "topics": [
            "component",
            "drag-and-drop",
            "vue"
        ],
        "subscribers": 238,
        "readme": "<p align=\"center\"><img width=\"140\"src=\"https://raw.githubusercontent.com/SortableJS/Vue.Draggable/master/logo.svg?sanitize=true\"></p>\n<h1 align=\"center\">Vue.Draggable</h1>\n\n[![CircleCI](https://circleci.com/gh/SortableJS/Vue.Draggable.svg?style=shield)](https://circleci.com/gh/SortableJS/Vue.Draggable)\n[![Coverage](https://codecov.io/gh/SortableJS/Vue.Draggable/branch/master/graph/badge.svg)](https://codecov.io/gh/SortableJS/Vue.Draggable)\n[![codebeat badge](https://codebeat.co/badges/7a6c27c8-2d0b-47b9-af55-c2eea966e713)](https://codebeat.co/projects/github-com-sortablejs-vue-draggable-master)\n[![GitHub open issues](https://img.shields.io/github/issues/SortableJS/Vue.Draggable.svg)](https://github.com/SortableJS/Vue.Draggable/issues?q=is%3Aopen+is%3Aissue)\n[![npm download](https://img.shields.io/npm/dt/vuedraggable.svg)](https://www.npmjs.com/package/vuedraggable)\n[![npm download per month](https://img.shields.io/npm/dm/vuedraggable.svg)](https://www.npmjs.com/package/vuedraggable)\n[![npm version](https://img.shields.io/npm/v/vuedraggable.svg)](https://www.npmjs.com/package/vuedraggable)\n[![MIT License](https://img.shields.io/github/license/SortableJS/Vue.Draggable.svg)](https://github.com/SortableJS/Vue.Draggable/blob/master/LICENSE)\n\n\nVue component (Vue.js 2.0) or directive (Vue.js 1.0) allowing drag-and-drop and synchronization with view model array.\n\nBased on and offering all features of [Sortable.js](https://github.com/RubaXa/Sortable)\n\n\n## For Vue 3\n   See [vue.draggable.next](https://github.com/SortableJS/vue.draggable.next)\n\n## Demo\n\n![demo gif](https://raw.githubusercontent.com/SortableJS/Vue.Draggable/master/example.gif)\n\n## Live Demos\n\nhttps://sortablejs.github.io/Vue.Draggable/\n\nhttps://david-desmaisons.github.io/draggable-example/\n\n## Features\n\n* Full support of [Sortable.js](https://github.com/RubaXa/Sortable) features:\n    * Supports touch devices\n    * Supports drag handles and selectable text\n    * Smart auto-scrolling\n    * Support drag and drop between different lists\n    * No jQuery dependency\n* Keeps in sync HTML and view model list\n* Compatible with Vue.js 2.0 transition-group\n* Cancellation support\n* Events reporting any changes when full control is needed\n* Reuse existing UI library components (such as [vuetify](https://vuetifyjs.com), [element](http://element.eleme.io/), or [vue material](https://vuematerial.io) etc...) and make them draggable using `tag` and `componentData` props\n\n## Backers\n\nLooking for backers!\n\n## Donate\n\nFind this project useful? You can buy me a :coffee: or a :beer:\n\n[![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=GYAEKQZJ4FQT2&currency_code=USD&source=url)\n\n\n## Installation\n\n### With npm or yarn \n\n```bash\nyarn add vuedraggable\n\nnpm i -S vuedraggable\n```\n\n**Beware it is vuedraggable for Vue 2.0 and not vue-draggable which is for version 1.0**\n\n### with direct link \n```html\n\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/vue/2.5.2/vue.min.js\"></script>\n<!-- CDNJS :: Sortable (https://cdnjs.com/) -->\n<script src=\"//cdn.jsdelivr.net/npm/sortablejs@1.8.4/Sortable.min.js\"></script>\n<!-- CDNJS :: Vue.Draggable (https://cdnjs.com/) -->\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/Vue.Draggable/2.20.0/vuedraggable.umd.min.js\"></script>\n\n```\n\n[cf example section](https://github.com/SortableJS/Vue.Draggable/tree/master/example)\n\n## For Vue.js 2.0\n\nUse draggable component:\n\n### Typical use:\n``` html\n<draggable v-model=\"myArray\" group=\"people\" @start=\"drag=true\" @end=\"drag=false\">\n   <div v-for=\"element in myArray\" :key=\"element.id\">{{element.name}}</div>\n</draggable>\n```\n.vue file:\n``` js\n  import draggable from 'vuedraggable'\n  ...\n  export default {\n        components: {\n            draggable,\n        },\n  ...\n```\n\n### With `transition-group`:\n``` html\n<draggable v-model=\"myArray\">\n    <transition-group>\n        <div v-for=\"element in myArray\" :key=\"element.id\">\n            {{element.name}}\n        </div>\n    </transition-group>\n</draggable>\n```\n\nDraggable component should directly wrap the draggable elements, or a `transition-component` containing the draggable elements.\n\n\n### With footer slot:\n``` html\n<draggable v-model=\"myArray\" draggable=\".item\">\n    <div v-for=\"element in myArray\" :key=\"element.id\" class=\"item\">\n        {{element.name}}\n    </div>\n    <button slot=\"footer\" @click=\"addPeople\">Add</button>\n</draggable>\n```\n### With header slot:\n``` html\n<draggable v-model=\"myArray\" draggable=\".item\">\n    <div v-for=\"element in myArray\" :key=\"element.id\" class=\"item\">\n        {{element.name}}\n    </div>\n    <button slot=\"header\" @click=\"addPeople\">Add</button>\n</draggable>\n```\n\n### With Vuex:\n\n```html\n<draggable v-model='myList'>\n``` \n\n```javascript\ncomputed: {\n    myList: {\n        get() {\n            return this.$store.state.myList\n        },\n        set(value) {\n            this.$store.commit('updateList', value)\n        }\n    }\n}\n```\n\n\n### Props\n#### value\nType: `Array`<br>\nRequired: `false`<br>\nDefault: `null`\n\nInput array to draggable component. Typically same array as referenced by inner element v-for directive.<br>\nThis is the preferred way to use Vue.draggable as it is compatible with Vuex.<br>\nIt should not be used directly but only though the `v-model` directive:\n```html\n<draggable v-model=\"myArray\">\n```\n\n#### list\nType: `Array`<br>\nRequired: `false`<br>\nDefault: `null`\n\nAlternative to the `value` prop, list is an array to be synchronized with drag-and-drop.<br>\nThe main difference is that `list` prop is updated by draggable component using splice method, whereas `value` is immutable.<br>\n**Do not use in conjunction with value prop.**\n\n#### All sortable options\nNew in version 2.19\n\nSortable options can be set directly as vue.draggable props since version 2.19.\n\nThis means that all [sortable option](https://github.com/RubaXa/Sortable#options) are valid sortable props with the notable exception of all the method starting by \"on\" as draggable component expose the same API via events.\n\nkebab-case propery are supported: for example `ghost-class` props will be converted to `ghostClass` sortable option.\n\nExample setting handle, sortable and a group option:\n```HTML\n<draggable\n        v-model=\"list\"\n        handle=\".handle\"\n        :group=\"{ name: 'people', pull: 'clone', put: false }\"\n        ghost-class=\"ghost\"\n        :sort=\"false\"\n        @change=\"log\"\n      >\n      <!-- -->\n</draggable>\n```\n\n#### tag\nType: `String`<br>\nDefault: `'div'`\n\nHTML node type of the element that draggable component create as outer element for the included slot.<br>\nIt is also possible to pass the name of vue component as element. In this case, draggable attribute will be passed to the create component.<br>\nSee also [componentData](#componentdata) if you need to set props or event to the created component.\n\n#### clone\nType: `Function`<br>\nRequired: `false`<br>\nDefault: `(original) => { return original;}`<br>\n\nFunction called on the source component to clone element when clone option is true. The unique argument is the viewModel element to be cloned and the returned value is its cloned version.<br>\nBy default vue.draggable reuses the viewModel element, so you have to use this hook if you want to clone or deep clone it.\n\n#### move\nType: `Function`<br>\nRequired: `false`<br>\nDefault: `null`<br>\n\nIf not null this function will be called in a similar way as [Sortable onMove callback](https://github.com/RubaXa/Sortable#move-event-object).\nReturning false will cancel the drag operation.\n\n```javascript\nfunction onMoveCallback(evt, originalEvent){\n   ...\n    // return false; \u2014 for cancel\n}\n```\nevt object has same property as [Sortable onMove event](https://github.com/RubaXa/Sortable#move-event-object), and 3 additional properties:\n - `draggedContext`:  context linked to dragged element\n   - `index`: dragged element index\n   - `element`: dragged element underlying view model element\n   - `futureIndex`:  potential index of the dragged element if the drop operation is accepted\n - `relatedContext`: context linked to current drag operation\n   - `index`: target element index\n   - `element`: target element view model element\n   - `list`: target list\n   - `component`: target VueComponent\n\nHTML:\n```HTML\n<draggable :list=\"list\" :move=\"checkMove\">\n```\njavascript:\n```javascript\ncheckMove: function(evt){\n    return (evt.draggedContext.element.name!=='apple');\n}\n```\nSee complete example: [Cancel.html](https://github.com/SortableJS/Vue.Draggable/blob/master/examples/Cancel.html), [cancel.js](https://github.com/SortableJS/Vue.Draggable/blob/master/examples/script/cancel.js)\n\n#### componentData\nType: `Object`<br>\nRequired: `false`<br>\nDefault: `null`<br>\n\nThis props is used to pass additional information to child component declared by [tag props](#tag).<br>\nValue:\n* `props`: props to be passed to the child component\n* `attrs`: attrs to be passed to the child component\n* `on`: events to be subscribe in the child component\n\nExample (using [element UI library](http://element.eleme.io/#/en-US)):\n```HTML\n<draggable tag=\"el-collapse\" :list=\"list\" :component-data=\"getComponentData()\">\n    <el-collapse-item v-for=\"e in list\" :title=\"e.title\" :name=\"e.name\" :key=\"e.name\">\n        <div>{{e.description}}</div>\n     </el-collapse-item>\n</draggable>\n```\n```javascript\nmethods: {\n    handleChange() {\n      console.log('changed');\n    },\n    inputChanged(value) {\n      this.activeNames = value;\n    },\n    getComponentData() {\n      return {\n        on: {\n          change: this.handleChange,\n          input: this.inputChanged\n        },\n        attrs:{\n          wrap: true\n        },\n        props: {\n          value: this.activeNames\n        }\n      };\n    }\n  }\n```\n\n### Events\n\n* Support for Sortable events:\n\n  `start`, `add`, `remove`, `update`, `end`, `choose`, `unchoose`, `sort`, `filter`, `clone`<br>\n  Events are called whenever onStart, onAdd, onRemove, onUpdate, onEnd, onChoose, onUnchoose, onSort, onClone are fired by Sortable.js with the same argument.<br>\n  [See here for reference](https://github.com/RubaXa/Sortable#event-object-demo)\n\n  Note that SortableJS OnMove callback is mapped with the [move prop](https://github.com/SortableJS/Vue.Draggable/blob/master/README.md#move)\n\nHTML:\n```HTML\n<draggable :list=\"list\" @end=\"onEnd\">\n```\n\n* change event\n\n  `change` event is triggered when list prop is not null and the corresponding array is altered due to drag-and-drop operation.<br>\n  This event is called with one argument containing one of the following properties:\n  - `added`:  contains information of an element added to the array\n    - `newIndex`: the index of the added element\n    - `element`: the added element\n  - `removed`:  contains information of an element removed from to the array\n    - `oldIndex`: the index of the element before remove\n    - `element`: the removed element\n  - `moved`:  contains information of an element moved within the array\n    - `newIndex`: the current index of the moved element\n    - `oldIndex`: the old index of the moved element\n    - `element`: the moved element\n\n### Slots\n\nLimitation: neither header or footer slot works in conjunction with transition-group.\n\n#### Header\nUse the `header` slot to add none-draggable element inside the vuedraggable component.\nImportant: it should be used in conjunction with draggable option to tag draggable element.\nNote that header slot will always be added before the default slot regardless its position in the template.\nEx:\n\n``` html\n<draggable v-model=\"myArray\" draggable=\".item\">\n    <div v-for=\"element in myArray\" :key=\"element.id\" class=\"item\">\n        {{element.name}}\n    </div>\n    <button slot=\"header\" @click=\"addPeople\">Add</button>\n</draggable>\n```\n\n#### Footer\nUse the `footer` slot to add none-draggable element inside the vuedraggable component.\nImportant: it should be used in conjunction with draggable option to tag draggable elements.\nNote that footer slot will always be added after the default slot regardless its position in the template.\nEx:\n\n``` html\n<draggable v-model=\"myArray\" draggable=\".item\">\n    <div v-for=\"element in myArray\" :key=\"element.id\" class=\"item\">\n        {{element.name}}\n    </div>\n    <button slot=\"footer\" @click=\"addPeople\">Add</button>\n</draggable>\n```\n ### Gotchas\n \n - Vue.draggable children should always map the list or value prop using a v-for directive\n   * You may use [header](https://github.com/SortableJS/Vue.Draggable#header) and [footer](https://github.com/SortableJS/Vue.Draggable#footer) slot to by-pass this limitation.\n \n - Children elements inside v-for should be keyed as any element in Vue.js. Be carefull to provide revelant key values in particular:\n    * typically providing array index as keys won't work as key should be linked to the items content\n    * cloned elements should provide updated keys, it is doable using the [clone props](#clone) for example\n\n\n ### Example \n  * [Clone](https://sortablejs.github.io/Vue.Draggable/#/custom-clone)\n  * [Handle](https://sortablejs.github.io/Vue.Draggable/#/handle)\n  * [Transition](https://sortablejs.github.io/Vue.Draggable/#/transition-example-2)\n  * [Nested](https://sortablejs.github.io/Vue.Draggable/#/nested-example)\n  * [Table](https://sortablejs.github.io/Vue.Draggable/#/table-example)\n \n ### Full demo example\n\n[draggable-example](https://github.com/David-Desmaisons/draggable-example)\n\n## For Vue.js 1.0\n\n[See here](documentation/Vue.draggable.for.ReadME.md)\n\n```\n",
        "releases": [
            {
                "name": "",
                "date": "2020-10-25T01:26:40Z"
            },
            {
                "name": "",
                "date": "2020-10-13T21:48:30Z"
            },
            {
                "name": "",
                "date": "2020-07-06T16:12:50Z"
            },
            {
                "name": "",
                "date": "2019-10-02T03:21:17Z"
            },
            {
                "name": "",
                "date": "2019-09-21T15:26:13Z"
            },
            {
                "name": "",
                "date": "2019-06-24T01:55:59Z"
            },
            {
                "name": "",
                "date": "2019-06-22T15:17:27Z"
            },
            {
                "name": "",
                "date": "2019-05-20T09:29:00Z"
            },
            {
                "name": "",
                "date": "2019-03-24T01:02:40Z"
            },
            {
                "name": "",
                "date": "2019-03-21T03:31:00Z"
            },
            {
                "name": "",
                "date": "2019-03-12T02:37:04Z"
            },
            {
                "name": "",
                "date": "2019-03-05T03:41:06Z"
            },
            {
                "name": "",
                "date": "2019-03-02T16:05:39Z"
            },
            {
                "name": "",
                "date": "2019-02-25T16:17:22Z"
            },
            {
                "name": "",
                "date": "2019-02-24T23:07:12Z"
            },
            {
                "name": "",
                "date": "2018-11-28T00:29:02Z"
            },
            {
                "name": "",
                "date": "2017-12-30T21:46:28Z"
            },
            {
                "name": "",
                "date": "2017-11-06T22:46:18Z"
            },
            {
                "name": "",
                "date": "2017-06-25T14:35:26Z"
            },
            {
                "name": "",
                "date": "2017-06-24T13:55:23Z"
            },
            {
                "name": "",
                "date": "2017-06-14T14:35:09Z"
            },
            {
                "name": "",
                "date": "2017-06-11T21:25:33Z"
            },
            {
                "name": "",
                "date": "2017-06-10T22:01:17Z"
            },
            {
                "name": "",
                "date": "2017-05-11T21:38:49Z"
            },
            {
                "name": "",
                "date": "2017-04-12T01:40:55Z"
            },
            {
                "name": "",
                "date": "2017-03-09T12:52:53Z"
            },
            {
                "name": "",
                "date": "2017-03-05T03:23:19Z"
            },
            {
                "name": "",
                "date": "2017-02-25T17:02:07Z"
            },
            {
                "name": "",
                "date": "2017-02-21T16:02:40Z"
            },
            {
                "name": "",
                "date": "2017-01-30T23:17:25Z"
            },
            {
                "name": "",
                "date": "2017-01-26T15:11:20Z"
            },
            {
                "name": "",
                "date": "2017-01-21T23:58:23Z"
            },
            {
                "name": "",
                "date": "2016-12-24T02:18:57Z"
            },
            {
                "name": "",
                "date": "2016-12-12T15:26:54Z"
            },
            {
                "name": "",
                "date": "2016-11-30T15:53:28Z"
            },
            {
                "name": "",
                "date": "2016-11-01T13:20:06Z"
            },
            {
                "name": "",
                "date": "2016-10-30T02:39:00Z"
            },
            {
                "name": "",
                "date": "2016-10-27T23:32:10Z"
            },
            {
                "name": "",
                "date": "2016-10-20T14:12:42Z"
            },
            {
                "name": "",
                "date": "2016-10-16T18:12:44Z"
            },
            {
                "name": "",
                "date": "2016-10-13T16:05:34Z"
            },
            {
                "name": "",
                "date": "2016-10-13T13:43:34Z"
            },
            {
                "name": "",
                "date": "2016-10-13T02:15:52Z"
            },
            {
                "name": "",
                "date": "2016-08-25T12:46:05Z"
            },
            {
                "name": "",
                "date": "2016-08-08T15:57:44Z"
            },
            {
                "name": "",
                "date": "2016-07-25T21:34:32Z"
            },
            {
                "name": "",
                "date": "2016-07-15T15:52:51Z"
            },
            {
                "name": "",
                "date": "2016-07-14T15:00:55Z"
            },
            {
                "name": "",
                "date": "2016-07-05T16:00:10Z"
            },
            {
                "name": "",
                "date": "2016-07-04T23:40:30Z"
            },
            {
                "name": "",
                "date": "2016-07-01T23:55:47Z"
            },
            {
                "name": "",
                "date": "2016-06-30T16:45:29Z"
            }
        ]
    }
}