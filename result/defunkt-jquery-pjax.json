{
    "https://api.github.com/repos/defunkt/jquery-pjax": {
        "forks": 1959,
        "watchers": 16714,
        "stars": 16714,
        "languages": {
            "JavaScript": 77775,
            "HTML": 4098,
            "Ruby": 1928,
            "Shell": 741
        },
        "commits": [
            "2017-05-23T11:21:39Z",
            "2017-05-23T11:13:23Z",
            "2017-05-20T18:56:39Z",
            "2017-05-20T18:38:49Z",
            "2017-05-20T18:29:37Z",
            "2017-05-20T18:28:13Z",
            "2016-04-28T09:48:26Z",
            "2017-05-20T16:09:35Z",
            "2017-05-20T10:05:15Z",
            "2017-05-19T18:26:04Z",
            "2017-05-19T18:19:22Z",
            "2017-05-19T18:14:18Z",
            "2017-05-19T18:05:50Z",
            "2017-05-19T12:32:51Z",
            "2017-05-19T12:28:26Z",
            "2017-05-19T12:02:46Z",
            "2017-05-19T12:02:22Z",
            "2017-05-19T12:02:04Z",
            "2017-05-18T22:58:11Z",
            "2017-05-18T22:57:33Z",
            "2017-01-22T21:57:08Z",
            "2015-10-13T13:09:47Z",
            "2015-10-13T13:05:25Z",
            "2015-09-17T14:51:55Z",
            "2015-09-16T08:01:25Z",
            "2015-09-13T08:45:43Z",
            "2015-08-08T13:40:26Z",
            "2015-07-21T19:29:52Z",
            "2015-07-21T02:44:00Z",
            "2015-06-09T11:34:27Z"
        ],
        "creation_date": "2011-02-26T02:44:18Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 552,
        "readme": "# pjax = pushState + ajax\n\npjax is a jQuery plugin that uses ajax and pushState to deliver a fast browsing experience with real permalinks, page titles, and a working back button.\n\npjax works by fetching HTML from your server via ajax and replacing the content\nof a container element on your page with the loaded HTML. It then updates the\ncurrent URL in the browser using pushState. This results in faster page\nnavigation for two reasons:\n\n* No page resources (JS, CSS) get re-executed or re-applied;\n* If the server is configured for pjax, it can render only partial page\n  contents and thus avoid the potentially costly full layout render.\n\n### Status of this project\n\njquery-pjax is **largely unmaintained** at this point. It might continue to\nreceive important bug fixes, but _its feature set is frozen_ and it's unlikely\nthat it will get new features or enhancements.\n\n## Installation\n\npjax depends on jQuery 1.8 or higher.\n\n### npm\n\n```\n$ npm install jquery-pjax\n```\n\n### standalone script\n\nDownload and include `jquery.pjax.js` in your web page:\n\n```\ncurl -LO https://raw.github.com/defunkt/jquery-pjax/master/jquery.pjax.js\n```\n\n## Usage\n\n### `$.fn.pjax`\n\nThe simplest and most common use of pjax looks like this:\n\n``` javascript\n$(document).pjax('a', '#pjax-container')\n```\n\nThis will enable pjax on all links on the page and designate the container as `#pjax-container`.\n\nIf you are migrating an existing site, you probably don't want to enable pjax\neverywhere just yet. Instead of using a global selector like `a`, try annotating\npjaxable links with `data-pjax`, then use `'a[data-pjax]'` as your selector. Or,\ntry this selector that matches any `<a data-pjax href=>` links inside a `<div\ndata-pjax>` container:\n\n``` javascript\n$(document).pjax('[data-pjax] a, a[data-pjax]', '#pjax-container')\n```\n\n#### Server-side configuration\n\nIdeally, your server should detect pjax requests by looking at the special\n`X-PJAX` HTTP header, and render only the HTML meant to replace the contents of\nthe container element (`#pjax-container` in our example) without the rest of\nthe page layout. Here is an example of how this might be done in Ruby on Rails:\n\n``` ruby\ndef index\n  if request.headers['X-PJAX']\n    render :layout => false\n  end\nend\n```\n\nIf you'd like a more automatic solution than pjax for Rails check out [Turbolinks][].\n\n[Check if there is a pjax plugin][plugins] for your favorite server framework.\n\nAlso check out [RailsCasts #294: Playing with PJAX][railscasts].\n\n#### Arguments\n\nThe synopsis for the `$.fn.pjax` function is:\n\n``` javascript\n$(document).pjax(selector, [container], options)\n```\n\n1. `selector` is a string to be used for click [event delegation][$.fn.on].\n2. `container` is a string selector that uniquely identifies the pjax container.\n3. `options` is an object with keys described below.\n\n##### pjax options\n\nkey | default | description\n----|---------|------------\n`timeout` | 650 | ajax timeout in milliseconds after which a full refresh is forced\n`push` | true | use [pushState][] to add a browser history entry upon navigation\n`replace` | false | replace URL without adding browser history entry\n`maxCacheLength` | 20 | maximum cache size for previous container contents\n`version` | | a string or function returning the current pjax version\n`scrollTo` | 0 | vertical position to scroll to after navigation. To avoid changing scroll position, pass `false`.\n`type` | `\"GET\"` | see [$.ajax][]\n`dataType` | `\"html\"` | see [$.ajax][]\n`container` | | CSS selector for the element where content should be replaced\n`url` | link.href | a string or function that returns the URL for the ajax request\n`target` | link | eventually the `relatedTarget` value for [pjax events](#events)\n`fragment` | | CSS selector for the fragment to extract from ajax response\n\nYou can change the defaults globally by writing to the `$.pjax.defaults` object:\n\n``` javascript\n$.pjax.defaults.timeout = 1200\n```\n\n### `$.pjax.click`\n\nThis is a lower level function used by `$.fn.pjax` itself. It allows you to get a little more control over the pjax event handling.\n\nThis example uses the current click context to set an ancestor element as the container:\n\n``` javascript\nif ($.support.pjax) {\n  $(document).on('click', 'a[data-pjax]', function(event) {\n    var container = $(this).closest('[data-pjax-container]')\n    var containerSelector = '#' + container.id\n    $.pjax.click(event, {container: containerSelector})\n  })\n}\n```\n\n**NOTE** Use the explicit `$.support.pjax` guard. We aren't using `$.fn.pjax` so we should avoid binding this event handler unless the browser is actually going to use pjax.\n\n### `$.pjax.submit`\n\nSubmits a form via pjax.\n\n``` javascript\n$(document).on('submit', 'form[data-pjax]', function(event) {\n  $.pjax.submit(event, '#pjax-container')\n})\n```\n\n### `$.pjax.reload`\n\nInitiates a request for the current URL to the server using pjax mechanism and replaces the container with the response. Does not add a browser history entry.\n\n``` javascript\n$.pjax.reload('#pjax-container', options)\n```\n\n### `$.pjax`\n\nManual pjax invocation. Used mainly when you want to start a pjax request in a handler that didn't originate from a click. If you can get access to a click `event`, consider `$.pjax.click(event)` instead.\n\n``` javascript\nfunction applyFilters() {\n  var url = urlForFilters()\n  $.pjax({url: url, container: '#pjax-container'})\n}\n```\n\n## Events\n\nAll pjax events except `pjax:click` & `pjax:clicked` are fired from the pjax\ncontainer element.\n\n<table>\n<tr>\n  <th>event</th>\n  <th>cancel</th>\n  <th>arguments</th>\n  <th>notes</th>\n</tr>\n<tr>\n  <th colspan=4>event lifecycle upon following a pjaxed link</th>\n</tr>\n<tr>\n  <td><code>pjax:click</code></td>\n  <td>\u2714\ufe0e</td>\n  <td><code>options</code></td>\n  <td>fires from a link that got activated; cancel to prevent pjax</td>\n</tr>\n<tr>\n  <td><code>pjax:beforeSend</code></td>\n  <td>\u2714\ufe0e</td>\n  <td><code>xhr, options</code></td>\n  <td>can set XHR headers</td>\n</tr>\n<tr>\n  <td><code>pjax:start</code></td>\n  <td></td>\n  <td><code>xhr, options</code></td>\n  <td></td>\n</tr>\n<tr>\n  <td><code>pjax:send</code></td>\n  <td></td>\n  <td><code>xhr, options</code></td>\n  <td></td>\n</tr>\n<tr>\n  <td><code>pjax:clicked</code></td>\n  <td></td>\n  <td><code>options</code></td>\n  <td>fires after pjax has started from a link that got clicked</td>\n</tr>\n<tr>\n  <td><code>pjax:beforeReplace</code></td>\n  <td></td>\n  <td><code>contents, options</code></td>\n  <td>before replacing HTML with content loaded from the server</td>\n</tr>\n<tr>\n  <td><code>pjax:success</code></td>\n  <td></td>\n  <td><code>data, status, xhr, options</code></td>\n  <td>after replacing HTML content loaded from the server</td>\n</tr>\n<tr>\n  <td><code>pjax:timeout</code></td>\n  <td>\u2714\ufe0e</td>\n  <td><code>xhr, options</code></td>\n  <td>fires after <code>options.timeout</code>; will hard refresh unless canceled</td>\n</tr>\n<tr>\n  <td><code>pjax:error</code></td>\n  <td>\u2714\ufe0e</td>\n  <td><code>xhr, textStatus, error, options</code></td>\n  <td>on ajax error; will hard refresh unless canceled</td>\n</tr>\n<tr>\n  <td><code>pjax:complete</code></td>\n  <td></td>\n  <td><code>xhr, textStatus, options</code></td>\n  <td>always fires after ajax, regardless of result</td>\n</tr>\n<tr>\n  <td><code>pjax:end</code></td>\n  <td></td>\n  <td><code>xhr, options</code></td>\n  <td></td>\n</tr>\n<tr>\n  <th colspan=4>event lifecycle on browser Back/Forward navigation</th>\n</tr>\n<tr>\n  <td><code>pjax:popstate</code></td>\n  <td></td>\n  <td></td>\n  <td>event <code>direction</code> property: &quot;back&quot;/&quot;forward&quot;</td>\n</tr>\n<tr>\n  <td><code>pjax:start</code></td>\n  <td></td>\n  <td><code>null, options</code></td>\n  <td>before replacing content</td>\n</tr>\n<tr>\n  <td><code>pjax:beforeReplace</code></td>\n  <td></td>\n  <td><code>contents, options</code></td>\n  <td>right before replacing HTML with content from cache</td>\n</tr>\n<tr>\n  <td><code>pjax:end</code></td>\n  <td></td>\n  <td><code>null, options</code></td>\n  <td>after replacing content</td>\n</tr>\n</table>\n\n`pjax:send` & `pjax:complete` are a good pair of events to use if you are implementing a\nloading indicator. They'll only be triggered if an actual XHR request is made,\nnot if the content is loaded from cache:\n\n``` javascript\n$(document).on('pjax:send', function() {\n  $('#loading').show()\n})\n$(document).on('pjax:complete', function() {\n  $('#loading').hide()\n})\n```\n\nAn example of canceling a `pjax:timeout` event would be to disable the fallback\ntimeout behavior if a spinner is being shown:\n\n``` javascript\n$(document).on('pjax:timeout', function(event) {\n  // Prevent default timeout redirection behavior\n  event.preventDefault()\n})\n```\n\n## Advanced configuration\n\n### Reinitializing plugins/widget on new page content\n\nThe whole point of pjax is that it fetches and inserts new content _without_\nrefreshing the page. However, other jQuery plugins or libraries that are set to\nreact on page loaded event (such as `DOMContentLoaded`) will not pick up on\nthese changes. Therefore, it's usually a good idea to configure these plugins to\nreinitialize in the scope of the updated page content. This can be done like so:\n\n``` js\n$(document).on('ready pjax:end', function(event) {\n  $(event.target).initializeMyPlugin()\n})\n```\n\nThis will make `$.fn.initializeMyPlugin()` be called at the document level on\nnormal page load, and on the container level after any pjax navigation (either\nafter clicking on a link or going Back in the browser).\n\n### Response types that force a reload\n\nBy default, pjax will force a full reload of the page if it receives one of the\nfollowing responses from the server:\n\n* Page content that includes `<html>` when `fragment` selector wasn't explicitly\n  configured. Pjax presumes that the server's response hasn't been properly\n  configured for pjax. If `fragment` pjax option is given, pjax will extract the\n  content based on that selector.\n\n* Page content that is blank. Pjax assumes that the server is unable to deliver\n  proper pjax contents.\n\n* HTTP response code that is 4xx or 5xx, indicating some server error.\n\n### Affecting the browser URL\n\nIf the server needs to affect the URL which will appear in the browser URL after\npjax navigation (like HTTP redirects work for normal requests), it can set the\n`X-PJAX-URL` header:\n\n``` ruby\ndef index\n  request.headers['X-PJAX-URL'] = \"http://example.com/hello\"\nend\n```\n\n### Layout Reloading\n\nLayouts can be forced to do a hard reload when assets or html changes.\n\nFirst set the initial layout version in your header with a custom meta tag.\n\n``` html\n<meta http-equiv=\"x-pjax-version\" content=\"v123\">\n```\n\nThen from the server side, set the `X-PJAX-Version` header to the same.\n\n``` ruby\nif request.headers['X-PJAX']\n  response.headers['X-PJAX-Version'] = \"v123\"\nend\n```\n\nDeploying a deploy, bumping the version constant to force clients to do a full reload the next request getting the new layout and assets.\n\n\n[$.fn.on]: http://api.jquery.com/on/\n[$.ajax]: http://api.jquery.com/jQuery.ajax/\n[pushState]: https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history#Adding_and_modifying_history_entries\n[plugins]: https://gist.github.com/4283721\n[turbolinks]: https://github.com/rails/turbolinks\n[railscasts]: http://railscasts.com/episodes/294-playing-with-pjax\n",
        "releases": [
            {
                "name": "jquery-pjax 2.0.1",
                "date": "2017-05-20T19:04:05Z"
            },
            {
                "name": "jquery-pjax 2.0.0",
                "date": "2017-05-19T18:34:33Z"
            },
            {
                "name": "pjax 1.9.6",
                "date": "2015-04-02T14:31:13Z"
            },
            {
                "name": "pjax 1.9.5",
                "date": "2015-03-07T11:54:19Z"
            },
            {
                "name": "pjax 1.9.4",
                "date": "2014-12-03T05:36:36Z"
            },
            {
                "name": "pjax 1.9.3",
                "date": "2014-12-03T05:40:08Z"
            },
            {
                "name": "pjax 1.9.2",
                "date": "2014-12-03T05:41:43Z"
            },
            {
                "name": "pjax 1.9.1",
                "date": "2014-12-03T05:42:55Z"
            },
            {
                "name": "pjax 1.9.0",
                "date": "2014-12-03T05:43:56Z"
            },
            {
                "name": "pjax 1.8.2",
                "date": "2014-04-19T23:18:12Z"
            },
            {
                "name": "pjax 1.4.0",
                "date": "2013-02-26T03:00:34Z"
            }
        ]
    }
}