{
    "https://api.github.com/repos/neovim/nvim-lspconfig": {
        "forks": 2107,
        "watchers": 11113,
        "stars": 11113,
        "languages": {
            "Lua": 380020,
            "Nix": 636,
            "Makefile": 215
        },
        "commits": [
            "2025-01-21T20:54:22Z",
            "2025-01-21T13:35:04Z",
            "2025-01-21T13:49:08Z",
            "2025-01-21T13:38:49Z",
            "2025-01-21T11:21:36Z",
            "2025-01-21T11:21:22Z",
            "2025-01-20T22:06:18Z",
            "2025-01-21T00:12:50Z",
            "2025-01-21T00:12:36Z",
            "2025-01-18T15:09:05Z",
            "2025-01-18T01:18:51Z",
            "2025-01-18T01:18:37Z",
            "2025-01-14T13:23:19Z",
            "2025-01-14T13:22:43Z",
            "2025-01-14T12:48:01Z",
            "2025-01-14T12:47:48Z",
            "2025-01-14T05:23:20Z",
            "2025-01-14T05:22:57Z",
            "2025-01-13T18:10:21Z",
            "2025-01-13T14:22:42Z",
            "2025-01-13T14:22:28Z",
            "2025-01-13T08:40:59Z",
            "2025-01-13T08:40:45Z",
            "2025-01-13T07:41:33Z",
            "2025-01-13T07:41:20Z",
            "2025-01-08T11:12:29Z",
            "2025-01-08T11:12:13Z",
            "2025-01-05T14:47:47Z",
            "2025-01-05T14:47:34Z",
            "2025-01-05T13:42:44Z"
        ],
        "creation_date": "2019-11-13T17:12:28Z",
        "contributors": 30,
        "topics": [
            "language-server",
            "language-server-protocol",
            "lsp",
            "neovim",
            "nvim",
            "plugin",
            "vim"
        ],
        "subscribers": 78,
        "readme": "# nvim-lspconfig\n\nnvim-lspconfig is a \"data only\" repo, providing basic, default [Nvim LSP client](https://neovim.io/doc/user/lsp.html)\nconfigurations for various LSP servers.\n\nView the [documentation for all configs](doc/configs.md) or `:help lspconfig-all` from Nvim.\n\n## Important \u26a0\ufe0f\n\n* If you found a bug in the Nvim LSP functionality (`:help lsp`), [report it to Neovim core](https://github.com/neovim/neovim/issues/new?assignees=&labels=bug%2Clsp&template=lsp_bug_report.yml).\n    * **Do not** report it here. Only configuration data lives here.\n* These configs are **best-effort and supported by the community.** See [contributions](#contributions).\n* **Note:** This repo only provides *configurations*. Its programmatic API is deprecated and should not be used externally.\n    * [Work is planned](https://github.com/neovim/neovim/issues/28479) to selectively upstream the\n      \"framework\" parts (*not* the configs) of nvim-lspconfig, to Nvim core, and deprecate them in\n      nvim-lspconfig.\n\n## Install\n\n[![LuaRocks](https://img.shields.io/luarocks/v/neovim/nvim-lspconfig?logo=lua&color=purple)](https://luarocks.org/modules/neovim/nvim-lspconfig)\n\n* Requires Nvim 0.9 above. Update Nvim and nvim-lspconfig before reporting an issue.\n* Install nvim-lspconfig using Vim's \"packages\" feature:\n  ```\n  git clone https://github.com/neovim/nvim-lspconfig ~/.config/nvim/pack/nvim/start/nvim-lspconfig\n  ```\n* Or use a 3rd-party plugin manager (consult the documentation for your plugin manager).\n\n## Quickstart\n\n1. Install a language server, e.g. [pyright](doc/configs.md#pyright)\n   ```bash\n   npm i -g pyright\n   ```\n2. Add the language server setup to your init.lua.\n   ```lua\n   require'lspconfig'.pyright.setup{}\n   ```\n3. Ensure your project/workspace contains a root marker which matches the server requirements\n   specified in `:help lspconfig-all`.\n4. Open a code file in Nvim. LSP will attach and provide diagnostics.\n   ```\n   nvim main.py\n   ```\n5. Run `:checkhealth lsp` to see the status or to troubleshoot.\n\nRead `:help lspconfig` for details. Read `:help lspconfig-all` for the full list of server-specific details.\nFor servers not on your `$PATH` (e.g., `jdtls`, `elixirls`), you must manually set the `cmd` parameter when calling `setup()`.\n\n## Configuration\n\nNvim sets some default options and mappings when a buffer attaches to LSP (see [`:help lsp-config`][lsp-config]). In particular:\n\n* [`'tagfunc'`][tagfunc]\n    - Enables \"go to definition\" capabilities using [`<C-]>`][tagjump] and other [tag commands][tag-commands].\n* [`'omnifunc'`][omnifunc]\n    - Enables (manual) omni mode completion with `<C-X><C-O>` in Insert mode. For *auto*completion, an [autocompletion plugin](https://github.com/neovim/nvim-lspconfig/wiki/Autocompletion) is required.\n* [`'formatexpr'`][formatexpr]\n    - Enables LSP formatting with [`gq`][gq].\n* `K` maps to [`vim.lsp.buf.hover()`][vim.lsp.buf.hover] in Normal mode.\n* `[d` and `]d` map to `vim.diagnostic.goto_prev()` and `vim.diagnostic.goto_next()`, respectively.\n* `<C-W>d` maps to `vim.diagnostic.open_float()`.\n\n[lsp-config]: https://neovim.io/doc/user/lsp.html#lsp-config\n[tagfunc]: https://neovim.io/doc/user/tagsrch.html#tag-function\n[omnifunc]: https://neovim.io/doc/user/options.html#'omnifunc'\n[formatexpr]: https://neovim.io/doc/user/options.html#'formatexpr'\n[gq]: https://neovim.io/doc/user/change.html#gq\n[vim.lsp.buf.hover]: https://neovim.io/doc/user/lsp.html#vim.lsp.buf.hover()\n[tagjump]: https://neovim.io/doc/user/tagsrch.html#CTRL-%5D\n[tag-commands]: https://neovim.io/doc/user/tagsrch.html#tag-commands\n\nFurther customization can be achieved using the [`LspAttach`][LspAttach] autocommand event.\nThe [`LspDetach`][LspAttach] autocommand event can be used to \"cleanup\" mappings if a buffer becomes detached from an LSP server.\nSee [`:h LspAttach`][LspAttach] and [`:h LspDetach`][LspDetach] for details and examples.\nSee [`:h lsp-buf`][lsp-buf] for details on other LSP functions.\n\n[LspAttach]: https://neovim.io/doc/user/lsp.html#LspAttach\n[LspDetach]: https://neovim.io/doc/user/lsp.html#LspDetach\n[lsp-buf]: https://neovim.io/doc/user/lsp.html#lsp-buf\n\nAdditional configuration options can be provided for each LSP server by passing arguments to the `setup` function. See `:h lspconfig-setup` for details. Example:\n\n```lua\nlocal lspconfig = require('lspconfig')\nlspconfig.rust_analyzer.setup {\n  -- Server-specific settings. See `:help lspconfig-setup`\n  settings = {\n    ['rust-analyzer'] = {},\n  },\n}\n```\n\n## Troubleshooting\n\nThe most common reasons a language server does not start or attach are:\n\n1. Language server is not installed. nvim-lspconfig does not install language servers for you. You should be able to run the `cmd` defined in each server's Lua module from the command line and see that the language server starts. If the `cmd` is an executable name instead of an absolute path to the executable, ensure it is on your path.\n2. Missing filetype plugins. Certain languages are not detecting by Vim/Nvim because they have not yet been added to the filetype detection system. Ensure `:set ft?` shows the filetype and not an empty value.\n3. Not triggering root detection. **Some** language servers will only start if it is opened in a directory, or child directory, containing a file which signals the *root* of the project. Most of the time, this is a `.git` folder, but each server defines the root config in the lua file. See [doc/configs.md](doc/configs.md) or the source for the list of root directories.\n4. You must pass `capabilities` for **each** `setup {}` if you want these to take effect.\n5. **Do not call `setup {}` twice for the same server**. The second call to `setup {}` will overwrite the first.\n\n## Bug reports\n\nIf you found a bug with LSP functionality, [report it to Neovim core](https://github.com/neovim/neovim/issues/new?assignees=&labels=bug%2Clsp&template=lsp_bug_report.yml).\n\nBefore reporting a bug, check your logs and the output of `:LspInfo`. Add the following to your init.vim to enable logging:\n\n```lua\nvim.lsp.set_log_level(\"debug\")\n```\n\nAttempt to run the language server, and open the log with:\n\n```\n:LspLog\n```\nMost of the time, the reason for failure is present in the logs.\n\n## Commands\n\n* `:LspInfo` (deprecated alias to `:che lspconfig`) shows the status of active and configured language servers.\n* `:LspStart <config_name>` Start the requested server name. Will only successfully start if the command detects a root directory matching the current config. Pass `autostart = false` to your `.setup{}` call for a language server if you would like to launch clients solely with this command. Defaults to all servers matching current buffer filetype.\n* `:LspStop [<client_id_or_name> ...]` Stops the given server(s). Defaults to\nstopping all servers active on the current buffer. To force stop add `++force`\n* `:LspRestart [<client_id_or_name> ...]` Restarts the given client(s), and attempts to reattach to all\npreviously attached buffers. \n\n## Contributions\n\nIf a language server is missing from [configs.md](doc/configs.md), contributing\na new configuration for it helps others, especially if the server requires special setup. Follow these steps:\n\n1. Read [CONTRIBUTING.md](CONTRIBUTING.md).\n2. Create a new file at `lua/lspconfig/configs/SERVER_NAME.lua`.\n    - Copy an [existing config](https://github.com/neovim/nvim-lspconfig/blob/master/lua/lspconfig/configs/)\n      to get started. Most configs are simple. For an extensive example see\n      [texlab.lua](https://github.com/neovim/nvim-lspconfig/blob/master/lua/lspconfig/configs/texlab.lua).\n3. Ask questions on [GitHub Discussions](https://github.com/neovim/neovim/discussions) or in the [Neovim Matrix room](https://app.element.io/#/room/#neovim:matrix.org).\n\n### Release process\n\nTo publish a release:\n\n- Create and push a new [tag](https://github.com/neovim/nvim-lspconfig/tags).\n- After pushing the tag, a [GitHub action](./.github/workflows/release.yml)\n  will automatically package the plugin and publish the release to LuaRocks.\n\n## License\n\nCopyright Neovim contributors. All rights reserved.\n\nnvim-lspconfig is licensed under the terms of the Apache 2.0 license.\n\nSee [LICENSE.md](./LICENSE.md)\n",
        "releases": [
            {
                "name": "v1.3.0",
                "date": "2025-01-05T13:44:45Z"
            },
            {
                "name": "v1.2.0",
                "date": "2024-12-21T15:02:12Z"
            },
            {
                "name": "v1.1.0",
                "date": "2024-12-13T16:58:57Z"
            },
            {
                "name": "v1.0.0",
                "date": "2024-09-11T07:43:16Z"
            },
            {
                "name": "v0.1.9",
                "date": "2024-09-11T07:40:08Z"
            },
            {
                "name": "v0.1.8",
                "date": "2024-05-21T14:27:33Z"
            }
        ]
    }
}