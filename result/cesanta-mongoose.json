{
    "https://api.github.com/repos/cesanta/mongoose": {
        "forks": 2753,
        "watchers": 11325,
        "stars": 11325,
        "languages": {
            "C": 3018088,
            "C++": 223405,
            "Makefile": 72637,
            "JavaScript": 63544,
            "HTML": 24255,
            "CSS": 7324,
            "Shell": 6580,
            "Batchfile": 333
        },
        "commits": [
            "2025-01-21T19:50:14Z",
            "2025-01-17T23:07:35Z",
            "2025-01-17T22:51:12Z",
            "2025-01-14T14:44:38Z",
            "2025-01-17T18:14:04Z",
            "2025-01-17T16:39:54Z",
            "2025-01-17T00:04:12Z",
            "2025-01-16T23:42:43Z",
            "2025-01-15T19:13:15Z",
            "2025-01-15T19:10:10Z",
            "2025-01-13T08:34:25Z",
            "2025-01-06T17:47:46Z",
            "2025-01-03T14:54:36Z",
            "2025-01-03T14:53:11Z",
            "2024-12-30T22:56:05Z",
            "2024-12-30T16:41:02Z",
            "2024-12-30T14:02:07Z",
            "2024-12-29T14:03:39Z",
            "2024-12-29T11:28:56Z",
            "2024-12-27T14:21:50Z",
            "2024-12-27T13:24:44Z",
            "2024-12-27T12:17:43Z",
            "2024-12-23T18:19:30Z",
            "2024-12-23T18:11:29Z",
            "2024-12-23T14:40:36Z",
            "2024-12-20T06:47:31Z",
            "2024-12-19T12:38:20Z",
            "2024-12-18T11:07:27Z",
            "2024-12-18T09:57:18Z",
            "2024-12-17T14:24:13Z"
        ],
        "creation_date": "2012-08-14T15:09:51Z",
        "contributors": 30,
        "topics": [
            "embedded",
            "http",
            "iot",
            "mqtt",
            "tcp",
            "tcpip",
            "tls13",
            "udp",
            "web-server",
            "webserver",
            "websocket"
        ],
        "subscribers": 467,
        "readme": "# Mongoose - Embedded Web Server / Embedded Network Library\n\n[![License: GPLv2/Commercial](https://img.shields.io/badge/License-GPLv2%20or%20Commercial-green.svg)](https://opensource.org/licenses/gpl-2.0.php)\n[![Build Status]( https://github.com/cesanta/mongoose/workflows/build/badge.svg)](https://github.com/cesanta/mongoose/actions)\n[![Code Coverage](https://codecov.io/gh/cesanta/mongoose/branch/master/graph/badge.svg)](https://codecov.io/gh/cesanta/mongoose)\n[![Fuzzing Status](https://oss-fuzz-build-logs.storage.googleapis.com/badges/mongoose.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:mongoose)\n[![Gurubase](https://img.shields.io/badge/Gurubase-Ask%20Mongoose%20Guru-006BFF)](https://gurubase.io/g/mongoose)\n\nMongoose is a network library for C/C++.  It provides event-driven non-blocking\nAPIs for TCP, UDP, HTTP, WebSocket, MQTT, and other protocols.  It is designed\nfor connecting devices and bringing them online. On the market since 2004, used\nby vast number of open source and commercial products - it even runs on the\nInternational Space Station!  Mongoose makes embedded network programming fast,\nrobust, and easy. Features include:\n\n- Cross-platform:\n  - works on Linux/UNIX, MacOS, Windows, Android\n  - works on ST, NXP, ESP32, Nordic, TI, Microchip, Infineon, Renesas and other chips\n  - write code once - and it'll work everywhere\n  - ideal for the unification of the network infrastructure code across company\n- Built-in protocols: plain TCP/UDP, SNTP, HTTP, MQTT, Websocket, and other\n- Asynchronous DNS resolver\n- Tiny static and run-time footprint\n- Source code is both ISO C and ISO C++ compliant\n- Easy to integrate: just copy [mongoose.c](https://raw.githubusercontent.com/cesanta/mongoose/master/mongoose.c)\n  and [mongoose.h](https://raw.githubusercontent.com/cesanta/mongoose/master/mongoose.h) files to your source tree\n- Built-in TCP/IP stack with drivers for bare metal or RTOS systems\n   - Available drivers: STM32F, STM32H; NXP RT1xxx; TI TM4C; Microchip SAME54; Wiznet W5500\n   - A complete Web device dashboard on bare metal ST Nucleo boards is only 6 files\n   - For comparison, a CubeIDE generated HTTP example is 400+ files\n- Can run on top of an existing TCP/IP stack with BSD API, e.g. lwIP, Zephyr, Azure, etc\n- Built-in TLS 1.3 ECC stack. Also can use external TLS libraries - mbedTLS, OpenSSL, or other\n- Does not depend on any other software to implement networking\n- Built-in firmware updates for STM32 H5, STM32 H7\n\nSee https://mongoose.ws/ for complete documentation, videos, case studies, etc.\n\n## Usage Examples\n\nBelow are quick snippets that should give an idea how simple the API is and\nhow easy it is to create applications with it.\n\nCreate a simple web server that serves a directory. The behavior of the\nHTTP server is specified by its event handler function:\n\n```c\n#include \"mongoose.h\"   // To build, run: cc main.c mongoose.c\n\n// HTTP server event handler function\nvoid ev_handler(struct mg_connection *c, int ev, void *ev_data) {\n  if (ev == MG_EV_HTTP_MSG) {\n    struct mg_http_message *hm = (struct mg_http_message *) ev_data;\n    struct mg_http_serve_opts opts = { .root_dir = \"./web_root/\" };\n    mg_http_serve_dir(c, hm, &opts);\n  }\n}\n\nint main(void) {\n  struct mg_mgr mgr;  // Declare event manager\n  mg_mgr_init(&mgr);  // Initialise event manager\n  mg_http_listen(&mgr, \"http://0.0.0.0:8000\", ev_handler, NULL);  // Setup listener\n  for (;;) {          // Run an infinite event loop\n    mg_mgr_poll(&mgr, 1000);\n  }\n  return 0;\n}\n```\n\nHTTP server implements a REST API that returns current time. JSON formatting:\n```c\nstatic void ev_handler(struct mg_connection *c, int ev, void *ev_data) {\n  if (ev == MG_EV_HTTP_MSG) {\n    struct mg_http_message *hm = (struct mg_http_message *) ev_data;\n    if (mg_match(hm->uri, mg_str(\"/api/time/get\"), NULL)) {\n      mg_http_reply(c, 200, \"\", \"{%m:%lu}\\n\", MG_ESC(\"time\"), time(NULL));\n    } else {\n      mg_http_reply(c, 500, \"\", \"{%m:%m}\\n\", MG_ESC(\"error\"), MG_ESC(\"Unsupported URI\")); \n    }\n  }\n}\n```\n\nMQTT client that subscribes to a topic `device1/rx` and\nechoes incoming messages to `device1/tx`:\n\n```c\n#include \"mongoose.h\"\n\nstatic const char *s_mqtt_url = \"mqtt://broker.hivemq.com:1883\";\nstatic struct mg_connection *s_mqtt_conn = NULL;\n\n// MQTT connection event handler function\nstatic void ev_handler(struct mg_connection *c, int ev, void *ev_data) {\n  if (ev == MG_EV_OPEN) {\n    MG_INFO((\"%lu created, connecting to %s ...\", c->id, s_mqtt_url));\n  } else if (ev == MG_EV_MQTT_OPEN) {\n    struct mg_mqtt_opts opts = {.qos = 1, .topic = mg_str(\"device1/rx\")};\n    mg_mqtt_sub(c, &opts);\n    MG_INFO((\"%lu connected, subscribing to %s\", c->id, opts.topic.buf));\n  } else if (ev == MG_EV_MQTT_MSG) {\n    char response[100];\n    struct mg_mqtt_message *mm = (struct mg_mqtt_message *) ev_data;\n    struct mg_mqtt_opts opts = {.qos = 1, .topic = mg_str(\"device1/tx\")};\n    mg_snprintf(response, sizeof(response), \"Received [%.*s] / [%.*s]\",\n                mm->topic.len, mm->topic.buf, mm->data.len, mm->data.buf);\n    opts.message = mg_str(response);\n    mg_mqtt_pub(c, &opts);\n  } else if (ev == MG_EV_CLOSE) {\n    MG_INFO((\"%u closing\", c->id));\n    s_mqtt_conn = NULL;\n  }\n}\n\n// Reconnection timer function. If we get disconnected, reconnect again\nstatic void timer_fn(void *arg) {\n  struct mg_mgr *mgr = (struct mg_mgr *) arg;\n  if (s_mqtt_conn == NULL) {\n    struct mg_mqtt_opts opts = {.clean = true};\n    s_mqtt_conn = mg_mqtt_connect(mgr, s_mqtt_url, &opts, ev_handler, NULL);\n  }\n}\n\nint main() {\n  struct mg_mgr mgr;  // Mongoose event manager. Holds all connections\n  mg_mgr_init(&mgr);  // Initialise event manager\n  mg_timer_add(&mgr, 3000, MG_TIMER_REPEAT | MG_TIMER_RUN_NOW, timer_fn, &mgr);\n  for (;;) {\n    mg_mgr_poll(&mgr, 1000);  // Infinite event loop\n  }\n  return 0;\n}\n```\n\n## Commercial use\n- Mongoose is used by hundreds of businesses, from Fortune500 giants like\n  Siemens, Schneider Electric, Broadcom, Bosch, Google, Samsung, Qualcomm, Caterpillar to the small businesses\n- Used to solve a wide range of business needs, like implementing Web UI\n  interface on devices, RESTful API services, telemetry data exchange, remote\n  control for a product, remote software updates, remote monitoring, and others\n- Deployed to hundreds of millions devices in production environment worldwide\n- See [Case Studies](https://mongoose.ws/case-studies/) from our respected\n  customers like [Schneider Electric](https://mongoose.ws/case-studies/schneider-electric/) (industrial automation), [Broadcom](https://mongoose.ws/case-studies/broadcom/) (semiconductors), [Pilz](https://mongoose.ws/case-studies/pilz/) (industrial automation), and others\n- See [Testimonials](https://mongoose.ws/testimonials/) from engineers that integrated Mongoose in their commercial products\n- We provide [Evaluation and Commercial licensing](https://mongoose.ws/licensing/), [support](https://mongoose.ws/support/), consultancy and [integration\n  services](https://mongoose.ws/integration/) - don't hesitate to [contact us](https://mongoose.ws/contact/)\n\n\n## Security\n\nWe take security seriously:\n1. Mongoose repository runs a\n  [continuous integration test powered by GitHub](https://github.com/cesanta/mongoose/actions),\n  which runs through hundreds of unit tests on every commit to the repository.\n  Our [unit tests](https://github.com/cesanta/mongoose/tree/master/test)\n  are built with modern address sanitizer technologies, which help to find\n  security vulnerabilities early\n2. Mongoose repository is integrated into Google's\n  [oss-fuzz continuous fuzzer](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:mongoose)\n  which scans for potential vulnerabilities continuously\n3.  We receive periodic vulnerability reports from the independent security\n  groups like\n  [Cisco Talos](https://www.cisco.com/c/en/us/products/security/talos.html),\n  [Microsoft Security Response Center](https://www.microsoft.com/en-us/msrc),\n  [MITRE Corporation](https://www.mitre.org/),\n  [Compass Security](https://www.compass-security.com/en/) and others.\n  In case of the vulnerability found, we act according to the industry best\n  practice: hold on to the publication, fix the software and notify all our\n  customers that have an appropriate subscription\n4. Some of our customers (for example NASA)\n  have specific security requirements and run independent security audits,\n  of which we get notified and in case of any issue, act similar to (3).\n\n\n## Contributions\n\nContributions are welcome! Please follow the guidelines below:\n\n- Sign [Cesanta CLA](https://cesanta.com/cla.html) and send GitHub pull request\n- Make sure that PRs have only one commit, and deal with one issue only\n",
        "releases": [
            {
                "name": "7.16",
                "date": "2024-11-20T13:04:18Z"
            },
            {
                "name": "7.15",
                "date": "2024-08-21T12:35:41Z"
            },
            {
                "name": "Mongoose 7.14",
                "date": "2024-05-20T13:56:52Z"
            },
            {
                "name": "Mongoose 7.13",
                "date": "2024-02-21T11:52:23Z"
            },
            {
                "name": "Mongoose 7.12",
                "date": "2023-10-12T14:00:46Z"
            },
            {
                "name": "Mongoose 7.11",
                "date": "2023-07-03T15:22:43Z"
            },
            {
                "name": "Mongoose 7.10",
                "date": "2023-05-18T15:13:32Z"
            },
            {
                "name": "Mongoose 7.9",
                "date": "2023-01-20T22:37:06Z"
            },
            {
                "name": "Mongoose 7.8",
                "date": "2022-08-28T13:42:14Z"
            },
            {
                "name": "Mongoose 7.7",
                "date": "2022-05-19T10:55:13Z"
            },
            {
                "name": "Mongoose 7.6",
                "date": "2022-01-21T12:55:14Z"
            },
            {
                "name": "Mongoose 7.5",
                "date": "2021-12-17T13:49:42Z"
            },
            {
                "name": "Mongoose 7.4",
                "date": "2021-09-30T12:52:50Z"
            },
            {
                "name": "Mongoose 7.3",
                "date": "2021-07-23T10:46:49Z"
            },
            {
                "name": "Mongoose 7.2",
                "date": "2021-03-09T11:37:53Z"
            },
            {
                "name": "Mongoose 7.1",
                "date": "2021-01-26T12:29:19Z"
            },
            {
                "name": "Mongoose 7.0",
                "date": "2020-12-12T10:57:51Z"
            },
            {
                "name": "Mongoose 6.18",
                "date": "2020-05-21T15:48:13Z"
            },
            {
                "name": "Mongoose 6.17",
                "date": "2020-02-11T12:17:48Z"
            },
            {
                "name": "Mongoose 6.16",
                "date": "2019-09-30T07:08:19Z"
            },
            {
                "name": "Mongoose 6.15",
                "date": "2019-06-13T08:54:57Z"
            },
            {
                "name": "Mongoose 6.14",
                "date": "2019-03-04T15:25:51Z"
            },
            {
                "name": "Mongoose 6.13",
                "date": "2018-10-08T13:12:03Z"
            },
            {
                "name": "Mongoose 6.12",
                "date": "2018-08-13T16:39:16Z"
            },
            {
                "name": "Mongoose 6.11",
                "date": "2018-02-08T18:38:45Z"
            },
            {
                "name": "Mongoose 6.10",
                "date": "2017-10-31T10:49:07Z"
            },
            {
                "name": "Mongoose 6.9",
                "date": "2017-09-13T12:01:12Z"
            },
            {
                "name": "Mongoose 6.8",
                "date": "2017-05-19T09:41:56Z"
            },
            {
                "name": "Mongoose 6.7",
                "date": "2017-01-16T15:09:47Z"
            },
            {
                "name": "Mongoose 6.6",
                "date": "2016-10-12T08:18:53Z"
            },
            {
                "name": "Mongoose 6.5",
                "date": "2016-07-12T13:50:40Z"
            },
            {
                "name": "Mongoose 6.4",
                "date": "2016-04-12T14:14:30Z"
            },
            {
                "name": "Mongoose 6.3",
                "date": "2016-03-10T10:29:27Z"
            },
            {
                "name": "",
                "date": "2016-01-12T08:58:09Z"
            },
            {
                "name": "Mongoose 6.1",
                "date": "2015-11-30T12:30:43Z"
            },
            {
                "name": "Mongoose 6.0",
                "date": "2015-09-21T10:01:40Z"
            },
            {
                "name": "Mongoose 5.6 ",
                "date": "2015-11-29T10:20:26Z"
            },
            {
                "name": "Mongoose 5.5",
                "date": "2015-11-29T10:21:25Z"
            },
            {
                "name": "Mongoose 5.4",
                "date": "2015-11-29T10:22:06Z"
            },
            {
                "name": "Mongoose 5.3",
                "date": "2015-11-29T10:22:48Z"
            },
            {
                "name": "Mongoose 5.2",
                "date": "2015-11-29T10:23:58Z"
            },
            {
                "name": "Mongoose 5.1",
                "date": "2015-11-29T10:24:30Z"
            },
            {
                "name": "Mongoose 5.0",
                "date": "2015-11-29T10:25:29Z"
            },
            {
                "name": "Mongoose 3.7",
                "date": "2015-11-29T10:26:07Z"
            },
            {
                "name": "Mongoose 3.6",
                "date": "2015-11-29T10:26:58Z"
            }
        ]
    }
}