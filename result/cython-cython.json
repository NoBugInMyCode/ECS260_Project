{
    "https://api.github.com/repos/cython/cython": {
        "forks": 1500,
        "watchers": 9711,
        "stars": 9711,
        "languages": {
            "Python": 4479783,
            "Cython": 3565731,
            "C": 894559,
            "C++": 33034,
            "Shell": 8527,
            "Starlark": 4583,
            "PowerShell": 4022,
            "Makefile": 2932,
            "Batchfile": 1429,
            "sed": 807,
            "Smalltalk": 618
        },
        "commits": [
            "2025-01-20T17:41:16Z",
            "2025-01-20T17:38:54Z",
            "2025-01-19T20:09:55Z",
            "2025-01-19T20:06:18Z",
            "2025-01-19T15:20:21Z",
            "2025-01-19T12:37:53Z",
            "2025-01-19T12:23:29Z",
            "2025-01-14T19:43:06Z",
            "2025-01-11T22:12:42Z",
            "2025-01-11T22:12:08Z",
            "2025-01-09T22:07:33Z",
            "2025-01-09T18:51:40Z",
            "2025-01-09T17:49:19Z",
            "2025-01-08T19:42:24Z",
            "2025-01-08T19:36:59Z",
            "2025-01-07T18:27:20Z",
            "2025-01-07T18:26:46Z",
            "2025-01-06T18:17:46Z",
            "2025-01-06T10:02:57Z",
            "2025-01-05T09:04:05Z",
            "2025-01-04T16:56:17Z",
            "2025-01-04T13:19:31Z",
            "2025-01-04T13:09:58Z",
            "2025-01-04T12:51:44Z",
            "2024-12-29T19:15:05Z",
            "2024-12-28T15:16:07Z",
            "2024-12-28T11:44:57Z",
            "2024-12-26T11:19:14Z",
            "2024-12-25T12:12:11Z",
            "2024-12-24T08:29:44Z"
        ],
        "creation_date": "2010-11-21T07:44:20Z",
        "contributors": 30,
        "topics": [
            "big-data",
            "c",
            "cpp",
            "cpython",
            "cpython-extensions",
            "cython",
            "performance",
            "python"
        ],
        "subscribers": 239,
        "readme": "Welcome to Cython!\n==================\n\nCython is a Python compiler that makes writing C extensions for\nPython as easy as Python itself.  Cython is based on Pyrex,\nbut supports more cutting edge functionality and optimizations.\n\nCython translates Python code to C/C++ code, but additionally supports calling\nC functions and declaring C types on variables and class attributes.\nThis allows the compiler to generate very efficient C code from Cython code.\n\nThis makes Cython the ideal language for wrapping external C libraries, and\nfor fast C modules that speed up the execution of Python code.\n\n* Official website: https://cython.org/\n* Documentation: https://docs.cython.org/\n* Github repository: https://github.com/cython/cython\n* Wiki: https://github.com/cython/cython/wiki\n\nCython has `about 30 million downloads <https://pypistats.org/packages/cython>`_\nper month on PyPI.  You can **support the Cython project** via\n`Github Sponsors <https://github.com/users/scoder/sponsorship>`_ or\n`Tidelift <https://tidelift.com/subscription/pkg/pypi-cython>`_.\n\n\nInstallation:\n-------------\n\nIf you already have a C compiler, just run following command::\n\n   pip install Cython\n\notherwise, see `the installation page <https://docs.cython.org/en/latest/src/quickstart/install.html>`_.\n\n\nLicense:\n--------\n\nThe original Pyrex program was licensed \"free of restrictions\" (see below).\nCython itself is licensed under the permissive **Apache License**.\n\nSee `LICENSE.txt <https://github.com/cython/cython/blob/master/LICENSE.txt>`_.\n\n\nContributing:\n-------------\n\nWant to contribute to the Cython project?\nHere is some `help to get you started <https://github.com/cython/cython/blob/master/docs/CONTRIBUTING.rst>`_.\n\n\nDifferences to other Python compilers\n-------------------------------------\n\nStarted as a project in the early 2000s, Cython has outlived\n`most other attempts <https://wiki.python.org/moin/PythonImplementations#Compilers>`_\nat producing static compilers for the Python language.\n\nSimilar projects that have a relevance today include:\n\n* `PyPy <https://www.pypy.org/>`_, a Python implementation with a JIT compiler.\n\n  * Pros: JIT compilation with runtime optimisations, fully language compliant,\n    good integration with external C/C++ code\n  * Cons: non-CPython runtime, relatively large resource usage of the runtime,\n    limited compatibility with CPython extensions, non-obvious performance results\n\n* `Numba <http://numba.pydata.org/>`_, a Python extension that features a\n  JIT compiler for a subset of the language, based on the LLVM compiler\n  infrastructure (probably best known for its ``clang`` C compiler).\n  It mostly targets numerical code that uses NumPy.\n\n  * Pros: JIT compilation with runtime optimisations\n  * Cons: limited language support, relatively large runtime dependency (LLVM),\n    non-obvious performance results\n\n* `Pythran <https://pythran.readthedocs.io/>`_, a static Python-to-C++\n  extension compiler for a subset of the language, mostly targeted\n  at numerical computation.  Pythran can be (and is probably best) used\n  as an additional\n  `backend for NumPy code <https://cython.readthedocs.io/en/latest/src/userguide/numpy_pythran.html>`_\n  in Cython.\n\n* `mypyc <https://mypyc.readthedocs.io/>`_, a static Python-to-C extension\n  compiler, based on the `mypy <http://www.mypy-lang.org/>`_ static Python\n  analyser.  Like Cython's\n  `pure Python mode <https://cython.readthedocs.io/en/latest/src/tutorial/pure.html>`_,\n  mypyc can make use of PEP-484 type annotations to optimise code for static types.\n\n  * Pros: good support for language and PEP-484 typing, good type inference,\n    reasonable performance gains\n  * Cons: no support for low-level optimisations and typing,\n    opinionated Python type interpretation, reduced Python compatibility\n    and introspection after compilation\n\n* `Nuitka <https://nuitka.net/>`_, a static Python-to-C extension compiler.\n\n  * Pros: highly language compliant, reasonable performance gains,\n    support for static application linking (similar to\n    `cython_freeze <https://github.com/cython/cython/blob/master/bin/cython_freeze>`_\n    but with the ability to bundle library dependencies into a self-contained\n    executable)\n  * Cons: no support for low-level optimisations and typing\n\nIn comparison to the above, Cython provides\n\n* fast, efficient and highly compliant support for almost all\n  Python language features, including dynamic features and introspection\n* full runtime compatibility with all still-in-use and future versions\n  of CPython\n* \"generate once, compile everywhere\" C code generation that allows for\n  reproducible performance results and testing\n* C compile time adaptation to the target platform and Python version\n* support for other C-API implementations, including PyPy and Pyston\n* seamless integration with C/C++ code\n* broad support for manual optimisation and tuning down to the C level\n* a large user base with thousands of libraries, packages and tools\n* almost two decades of bug fixing and static code optimisations\n\n\nGet the full source history:\n----------------------------\n\nNote that Cython used to ship the full version control repository in its source\ndistribution, but no longer does so due to space constraints.  To get the\nfull source history from a downloaded source archive, make sure you have git\ninstalled, then step into the base directory of the Cython source distribution\nand type::\n\n    make repo\n\n\nThe following is from Pyrex:\n------------------------------------------------------\nThis is a development version of Pyrex, a language\nfor writing Python extension modules.\n\nFor more info, take a look at:\n\n* Doc/About.html for a description of the language\n* INSTALL.txt    for installation instructions\n* USAGE.txt      for usage instructions\n* Demos          for usage examples\n\nComments, suggestions, bug reports, etc. are most\nwelcome!\n\nCopyright stuff: Pyrex is free of restrictions. You\nmay use, redistribute, modify and distribute modified\nversions.\n\nThe latest version of Pyrex can be found `here <https://www.cosc.canterbury.ac.nz/~greg/python/Pyrex/>`_.\n\n| Greg Ewing, Computer Science Dept\n| University of Canterbury\n| Christchurch, New Zealand\n\n A citizen of NewZealandCorp, a wholly-owned subsidiary of USA Inc.\n",
        "releases": [
            {
                "name": "3.1.0a1",
                "date": "2024-11-08T19:25:25Z"
            },
            {
                "name": "3.0.11-1",
                "date": "2024-08-05T13:26:34Z"
            },
            {
                "name": "3.0.10",
                "date": "2024-03-30T17:50:29Z"
            },
            {
                "name": "3.0.9",
                "date": "2024-03-05T13:36:51Z"
            },
            {
                "name": "3.0.8",
                "date": "2024-01-10T08:16:45Z"
            },
            {
                "name": "3.0.7",
                "date": "2023-12-19T10:08:52Z"
            },
            {
                "name": "0.29.37.1",
                "date": "2023-12-19T09:26:33Z"
            },
            {
                "name": "0.29.37",
                "date": "2023-12-19T08:58:41Z"
            },
            {
                "name": "3.0.6",
                "date": "2023-11-26T13:32:09Z"
            },
            {
                "name": "3.0.5",
                "date": "2023-10-30T20:45:04Z"
            },
            {
                "name": "3.0.4",
                "date": "2023-10-17T19:42:47Z"
            },
            {
                "name": "3.0.3",
                "date": "2023-10-05T10:04:48Z"
            },
            {
                "name": "3.0.2",
                "date": "2023-08-27T08:58:11Z"
            },
            {
                "name": "3.0.1",
                "date": "2023-08-25T06:46:51Z"
            },
            {
                "name": "3.0.0",
                "date": "2023-07-17T12:24:20Z"
            },
            {
                "name": "3.0.0rc2",
                "date": "2023-07-13T02:25:40Z"
            },
            {
                "name": "3.0.0rc1",
                "date": "2023-07-11T19:49:55Z"
            },
            {
                "name": "0.29.36",
                "date": "2023-07-04T19:19:58Z"
            },
            {
                "name": "3.0.0b3",
                "date": "2023-05-24T09:46:51Z"
            },
            {
                "name": "0.29.35",
                "date": "2023-05-24T08:36:00Z"
            },
            {
                "name": "0.29.34",
                "date": "2023-04-02T12:30:00Z"
            },
            {
                "name": "3.0.0b2",
                "date": "2023-03-27T09:29:40Z"
            },
            {
                "name": "3.0.0b1",
                "date": "2023-02-25T19:43:40Z"
            },
            {
                "name": "0.29.33",
                "date": "2023-01-05T20:28:29Z"
            },
            {
                "name": "3.0.0a11",
                "date": "2022-07-31T05:31:10Z"
            },
            {
                "name": "0.29.32",
                "date": "2022-07-29T05:51:30Z"
            },
            {
                "name": "0.29.31",
                "date": "2022-07-27T15:17:25Z"
            },
            {
                "name": "0.29.30",
                "date": "2022-05-17T14:46:59Z"
            },
            {
                "name": "0.29.29",
                "date": "2022-05-16T11:36:46Z"
            },
            {
                "name": "0.29.28",
                "date": "2022-02-16T23:10:48Z"
            },
            {
                "name": "0.29.27",
                "date": "2022-01-28T16:01:18Z"
            },
            {
                "name": "3.0.0a10",
                "date": "2022-01-06T19:59:34Z"
            },
            {
                "name": "0.29.26",
                "date": "2021-12-16T09:04:19Z"
            },
            {
                "name": "0.29.25",
                "date": "2021-12-06T11:50:25Z"
            }
        ]
    }
}