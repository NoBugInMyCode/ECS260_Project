{
    "https://api.github.com/repos/google/flexbox-layout": {
        "forks": 1800,
        "watchers": 18296,
        "stars": 18296,
        "languages": {
            "Kotlin": 525275,
            "Java": 350079
        },
        "commits": [
            "2021-05-20T06:56:13Z",
            "2021-05-20T01:38:05Z",
            "2021-05-19T08:38:43Z",
            "2020-09-21T04:13:24Z",
            "2020-08-26T10:33:43Z",
            "2020-07-09T08:44:52Z",
            "2020-07-09T08:15:16Z",
            "2020-05-03T08:46:45Z",
            "2020-05-03T07:59:06Z",
            "2020-03-17T07:33:53Z",
            "2020-01-17T08:24:58Z",
            "2020-01-17T08:03:44Z",
            "2020-01-16T04:42:16Z",
            "2020-01-09T07:47:13Z",
            "2020-01-07T04:43:42Z",
            "2019-12-24T07:40:51Z",
            "2019-11-22T06:47:47Z",
            "2019-11-22T06:44:23Z",
            "2019-11-22T03:42:11Z",
            "2019-10-31T07:41:50Z",
            "2019-09-25T11:52:18Z",
            "2019-09-20T01:59:51Z",
            "2019-09-20T01:46:37Z",
            "2019-09-11T18:39:14Z",
            "2019-03-31T10:42:19Z",
            "2019-01-11T08:50:55Z",
            "2018-11-16T02:00:48Z",
            "2018-11-02T05:14:12Z",
            "2018-10-20T20:05:18Z",
            "2018-10-17T04:57:35Z"
        ],
        "creation_date": "2016-05-04T08:11:22Z",
        "contributors": 27,
        "topics": [
            "android",
            "android-library",
            "flexbox"
        ],
        "subscribers": 438,
        "readme": "# FlexboxLayout\n[ ![Circle CI](https://circleci.com/gh/google/flexbox-layout.svg?style=shield&circle-token=2a42716dfffab73d73c5ce7ed7b3ee620cfa137b) ](https://circleci.com/gh/google/flexbox-layout/tree/main)\n\nFlexboxLayout is a library project which brings the similar capabilities of\n[CSS Flexible Box Layout Module](https://www.w3.org/TR/css-flexbox-1) to Android.\n\n# Installation\nAdd the following dependency to your `build.gradle` file:\n\n```\ndependencies {\n    implementation 'com.google.android.flexbox:flexbox:3.0.0'\n}\n```\n\n**Starting from 3.0.0, the groupId is changed to `com.google.android.flexbox` in preparation to uploading the artifacts to google maven.\nYou can still download the artifacts from jcenter for the past versions with the prior groupId (`com.google.android`), but migrating the library 3.0.0 is recommended.**\n\nNote that the default values for `alignItems` and `alignContent` for `FlexboxLayout` have been changed from `stretch` to `flex_start` starting from 2.0.0, it may break the existing apps.\nPlease make sure to set `stretch` explicitly if you want to apply the behavior of `stretch`.\n\n\nNote that starting from 1.1.0, the library is expeced to use with AndroidX. Please migrate to [AndroidX](https://developer.android.com/jetpack/androidx/migrate) if you use 1.1.0 or above.\n\nPlease use 1.0.0 if you haven't migrated to AndroidX.\n\n\n# Usage\nThere are two ways of using Flexbox in your layout.\n\n## FlexboxLayout\nThe first one is `FlexboxLayout` that extends the `ViewGroup` like `LinearLayout` and `RelativeLayout`.\nYou can specify the attributes from a layout XML like:\n```xml\n<com.google.android.flexbox.FlexboxLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    app:flexWrap=\"wrap\"\n    app:alignItems=\"stretch\"\n    app:alignContent=\"stretch\" >\n\n    <TextView\n        android:id=\"@+id/textview1\"\n        android:layout_width=\"120dp\"\n        android:layout_height=\"80dp\"\n        app:layout_flexBasisPercent=\"50%\"\n        />\n\n    <TextView\n        android:id=\"@+id/textview2\"\n        android:layout_width=\"80dp\"\n        android:layout_height=\"80dp\"\n        app:layout_alignSelf=\"center\"\n        />\n\n    <TextView\n        android:id=\"@+id/textview3\"\n        android:layout_width=\"160dp\"\n        android:layout_height=\"80dp\"\n        app:layout_alignSelf=\"flex_end\"\n        />\n</com.google.android.flexbox.FlexboxLayout>\n```\n\nOr from code like:\n```java\nFlexboxLayout flexboxLayout = (FlexboxLayout) findViewById(R.id.flexbox_layout);\nflexboxLayout.setFlexDirection(FlexDirection.ROW);\n\nView view = flexboxLayout.getChildAt(0);\nFlexboxLayout.LayoutParams lp = (FlexboxLayout.LayoutParams) view.getLayoutParams();\nlp.setOrder(-1);\nlp.setFlexGrow(2);\nview.setLayoutParams(lp);\n```\n\n## FlexboxLayoutManager (within RecyclerView)\nThe second one is `FlexboxLayoutManager` that can be used within `RecyclerView`.\n\n```java\nRecyclerView recyclerView = (RecyclerView) context.findViewById(R.id.recyclerview);\nFlexboxLayoutManager layoutManager = new FlexboxLayoutManager(context);\nlayoutManager.setFlexDirection(FlexDirection.COLUMN);\nlayoutManager.setJustifyContent(JustifyContent.FLEX_END);\nrecyclerView.setLayoutManager(layoutManager);\n```\n\nor for the attributes for the children of the `FlexboxLayoutManager` you can do like:\n\n```java\nmImageView.setImageDrawable(drawable);\nViewGroup.LayoutParams lp = mImageView.getLayoutParams();\nif (lp instanceof FlexboxLayoutManager.LayoutParams) {\n    FlexboxLayoutManager.LayoutParams flexboxLp = (FlexboxLayoutManager.LayoutParams) lp;\n    flexboxLp.setFlexGrow(1.0f);\n    flexboxLp.setAlignSelf(AlignSelf.FLEX_END);\n}\n```\n\nThe advantage of using `FlexboxLayoutManager` is that it recycles the views that go off the screen\nfor reuse for the views that are appearing as the user scrolls instead of inflating every individual view,\nwhich consumes much less memory especially when the number of items contained in the Flexbox container is large.\n\n![FlexboxLayoutManager in action](/assets/flexbox-layoutmanager.gif)\n\n\n## Supported attributes/features comparison\nDue to some characteristics of `RecyclerView`, some Flexbox attributes are not available/not implemented\nto the `FlexboxLayoutManager`.\nHere is a quick overview of the attributes/features comparison between the two implementations.\n\n|Attribute / Feature|FlexboxLayout| FlexboxLayoutManager (RecyclerView)|\n| ------- |:-----------:|:----------------------------------:|\n|flexDirection|![Check](/assets/pngs/check_green_small.png)|![Check](/assets/pngs/check_green_small.png)|\n|flexWrap|![Check](/assets/pngs/check_green_small.png)|![Check](/assets/pngs/check_green_small.png) (except `wrap_reverse`)|\n|justifyContent|![Check](/assets/pngs/check_green_small.png)|![Check](/assets/pngs/check_green_small.png)|\n|alignItems|![Check](/assets/pngs/check_green_small.png)|![Check](/assets/pngs/check_green_small.png)|\n|alignContent|![Check](/assets/pngs/check_green_small.png)| - |\n|layout_order|![Check](/assets/pngs/check_green_small.png)| - |\n|layout_flexGrow|![Check](/assets/pngs/check_green_small.png)|![Check](/assets/pngs/check_green_small.png)|\n|layout_flexShrink|![Check](/assets/pngs/check_green_small.png)|![Check](/assets/pngs/check_green_small.png)|\n|layout_alignSelf|![Check](/assets/pngs/check_green_small.png)|![Check](/assets/pngs/check_green_small.png)|\n|layout_flexBasisPercent|![Check](/assets/pngs/check_green_small.png)|![Check](/assets/pngs/check_green_small.png)|\n|layout_(min/max)Width|![Check](/assets/pngs/check_green_small.png)|![Check](/assets/pngs/check_green_small.png)|\n|layout_(min/max)Height|![Check](/assets/pngs/check_green_small.png)|![Check](/assets/pngs/check_green_small.png)|\n|layout_wrapBefore|![Check](/assets/pngs/check_green_small.png)|![Check](/assets/pngs/check_green_small.png)|\n|Divider|![Check](/assets/pngs/check_green_small.png)|![Check](/assets/pngs/check_green_small.png)|\n|View recycling| - |![Check](/assets/pngs/check_green_small.png)|\n|Scrolling| *1 |![Check](/assets/pngs/check_green_small.png)|\n\n*1 Partially possible by wrapping it with `ScrollView`. But it isn't likely to work with a large set\n   of views inside the layout. Because it doesn't consider view recycling.\n\n# Supported attributes\n\n## Attributes for the FlexboxLayout:\n\n* __flexDirection__\n  * This attribute determines the direction of the main axis (and the cross axis, perpendicular to the main axis). The direction children items are placed inside the Flexbox layout.\n  Possible values are:\n    * row (default)\n    * row_reverse\n    * column\n    * column_reverse\n\n    ![Flex Direction explanation](/assets/flex-direction.gif)\n\n* __flexWrap__\n  * This attribute controls whether the flex container is single-line or multi-line, and the\n  direction of the cross axis. Possible values are:\n    * nowrap (default for FlexboxLayout)\n    * wrap (default for FlexboxLayoutManager)\n    * wrap_reverse (not supported by FlexboxLayoutManager)\n\n    ![Flex Wrap explanation](/assets/flex-wrap.gif)\n\n* __justifyContent__\n  * This attribute controls the alignment along the main axis. Possible values are:\n    * flex_start (default)\n    * flex_end\n    * center\n    * space_between\n    * space_around\n    * space_evenly\n\n    ![Justify Content explanation](/assets/justify-content.gif)\n\n* __alignItems__\n  * This attribute controls the alignment along the cross axis. Possible values are:\n    * flex_start (default for FlexboxLayout)\n    * flex_end\n    * center\n    * baseline\n    * stretch (default for FlexboxLayoutManager)\n\n    ![Align Items explanation](/assets/align-items.gif)\n\n* __alignContent__\n  * This attribute controls the alignment of the flex lines in the flex container. Possible values\n  are:\n    * flex_start (default)\n    * flex_end\n    * center\n    * space_between\n    * space_around\n    * stretch\n\n    ![Align Content explanation](/assets/align-content.gif)\n\n* __showDividerHorizontal__ (one or more of `none | beginning | middle | end`)\n* __dividerDrawableHorizontal__ (reference to a drawable)\n  * Puts horizontal dividers between flex lines (or flex items when flexDirection\n  is set to `column` or `column_rebase`).\n  \n* __showDividerVertical__ (one or more of `none | beginning | middle | end`)\n* __dividerDrawableVertical__ (reference to a drawable)\n  * Puts vertical dividers between flex items (or flex lines when flexDirection\n  is set to `column` or `column_rebase`).\n\n* __showDivider__ (one or more of `none | beginning | middle | end`)\n* __dividerDrawable__ (reference to a drawable)\n  * Shorthand for setting both horizontal and vertical dividers. Note that if used with other attributes\n  (such as `justifyContent=\"space_around\"` or `alignContent=\"space_between\"` ... etc) for putting \n  spaces between flex lines or flex items, you may see unexpected spaces. Please avoid using these\n  at the same time.\n  \n  Example of putting both vertical and horizontal dividers.\n  \n  `res/drawable/divider.xml`\n  ```xml\n  <shape xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <size\n        android:width=\"8dp\"\n        android:height=\"12dp\" />\n    <solid android:color=\"#44A444\" />\n  </shape> \n  ```\n  \n  `res/layout/content_main.xml`\n  ```xml\n  <com.google.android.flexbox.FlexboxLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    app:alignContent=\"flex_start\"\n    app:alignItems=\"flex_start\"\n    app:flexWrap=\"wrap\"\n    app:showDivider=\"beginning|middle\"\n    app:dividerDrawable=\"@drawable/divider\" >\n\n    <TextView\n        style=\"@style/FlexItem\"\n        android:layout_width=\"220dp\"\n        android:layout_height=\"80dp\"\n        android:text=\"1\" />\n    <TextView\n        style=\"@style/FlexItem\"\n        android:layout_width=\"120dp\"\n        android:layout_height=\"80dp\"\n        android:text=\"2\" />\n    <TextView\n        style=\"@style/FlexItem\"\n        android:layout_width=\"160dp\"\n        android:layout_height=\"80dp\"\n        android:text=\"3\" />\n    <TextView\n        style=\"@style/FlexItem\"\n        android:layout_width=\"80dp\"\n        android:layout_height=\"80dp\"\n        android:text=\"4\" />\n    <TextView\n        style=\"@style/FlexItem\"\n        android:layout_width=\"100dp\"\n        android:layout_height=\"80dp\"\n        android:text=\"5\" />\n  ```\n  \n  ![Dividers beginning and middle](/assets/divider-beginning-middle.png)\n\n\n## Attributes for the children of a FlexboxLayout\n\n* __layout_order__ (integer)\n  * This attribute can change how the ordering of the children views are laid out.\n  By default, children are displayed and laid out in the same order as they appear in the\n  layout XML. If not specified, `1` is set as a default value.\n\n    ![Order explanation](/assets/layout_order.gif)\n\n* __layout_flexGrow__ (float)\n  * This attribute determines how much this child will grow if positive free space is\n  distributed relative to the rest of other flex items included in the same flex line.\n  If a flex item has a positive `layout_flexGrow` value, the item will take up the remaining\n  space in the flex line. If multiple flex items in the same flex line have positive `layout_flexGrow`\n  values, the remaining free space is distributed depending on the proportion of their declared\n  `layout_flexGrow` value. (Similar to the `layout_weight` attribute in the `LinearLayout`)\n  If not specified, `0` is set as a default value.\n\n    ![Flex Grow explanation](/assets/layout_flexGrow.gif)\n\n* __layout_flexShrink__ (float)\n  * This attribute determines how much this child will shrink if negative free space is\n  distributed relative to the rest of other flex items included in the same flex line.\n  If not specified, `1` is set as a default value.\n\n    ![Flex Shrink explanation](/assets/layout_flexShrink.gif)\n\n* __layout_alignSelf__\n  * This attribute determines the alignment along the cross axis (perpendicular to the\n  main axis). The alignment in the same direction can be determined by the\n  `alignItems` in the parent, but if this is set to other than\n  `auto`, the cross axis alignment is overridden for this child. Possible values are:\n    * auto (default)\n    * flex_start\n    * flex_end\n    * center\n    * baseline\n    * stretch\n\n    ![Align Self explanation](/assets/layout_alignSelf.gif)\n\n* __layout_flexBasisPercent__ (fraction)\n  * The initial flex item length in a fraction format relative to its parent.\n  The initial main size of this child view is trying to be expanded as the specified\n  fraction against the parent main size.\n  If this value is set, the length specified from `layout_width`\n  (or `layout_height`) is overridden by the calculated value from this attribute.\n  This attribute is only effective when the parent's length is definite (MeasureSpec mode is\n  `MeasureSpec.EXACTLY`). The default value is `-1`, which means not set.\n\n    ![Flex basis percent explanation](/assets/layout_flexBasisPercent.gif)\n\n* __layout_minWidth__ / __layout_minHeight__ (dimension)\n  * These attributes impose minimum size constraints for the children of FlexboxLayout.\n  A child view won't shrink less than the value of these attributes (varies based on the\n  `flexDirection` attribute as to which attribute imposes the size constraint along the\n  main axis) regardless of the `layout_flexShrink` attribute.\n\n    ![Min width explanation](/assets/layout_minWidth.gif)\n\n* __layout_maxWidth__ / __layout_maxHeight__ (dimension)\n  * These attributes impose maximum size constraints for the children of FlexboxLayout.\n  A child view won't be expanded more than the value of these attributes (varies based on the\n  `flexDirection` attribute as to which attribute imposes the size constraint along the\n  main axis) regardless of the `layout_flexGrow` attribute.\n\n    ![Max width explanation](/assets/layout_maxWidth.gif)\n\n* __layout_wrapBefore__ (boolean)\n  * This attribute forces a flex line wrapping, the default value is `false`.\n  i.e. if this is set to `true` for a\n  flex item, the item will become the first item of a flex line. (A wrapping happens\n  regardless of the flex items being processed in the previous flex line)\n  This attribute is ignored if the `flex_wrap` attribute is set to `nowrap`.\n  The equivalent attribute isn't defined in the original CSS Flexible Box Module\n  specification, but having this attribute is useful for Android developers. For example, to flatten\n  the layouts when building a grid-like layout or for a situation where developers want\n  to put a new flex line to make a semantic difference from the previous one, etc.\n\n    ![Wrap before explanation](/assets/layout_wrapBefore.gif)\n\n# Others\n\n## Known differences from the original CSS specification\nThis library tries to achieve the same capabilities of the original\n[Flexible Box specification](https://www.w3.org/TR/css-flexbox-1) as much as possible,\nbut due to some reasons such as the way specifying attributes can't be the same between\nCSS and Android XML, there are some known differences from the original specification.\n\n(1) There is no [flex-flow](https://www.w3.org/TR/css-flexbox-1/#flex-flow-property)\nequivalent attribute\n  * Because `flex-flow` is a shorthand for setting the `flex-direction` and `flex-wrap` properties,\n  specifying two attributes from a single attribute is not practical in Android.\n\n(2) There is no [flex](https://www.w3.org/TR/css-flexbox-1/#flex-property) equivalent attribute\n  * Likewise `flex` is a shorthand for setting the `flex-grow`, `flex-shrink` and `flex-basis`,\n  specifying those attributes from a single attribute is not practical.\n\n(3) `layout_flexBasisPercent` is introduced instead of\n  [flexBasis](https://www.w3.org/TR/css-flexbox-1/#flex-basis-property)\n  * Both `layout_flexBasisPercent` in this library and `flex-basis` property in the CSS are used to\n  determine the initial length of an individual flex item. The `flex-basis` property accepts width\n  values such as `1em`, `10px`, and `content` as strings as well as percentage values such as\n  `10%` and `30%`. `layout_flexBasisPercent` only accepts percentage values.\n  However, specifying initial fixed width values can be done by specifying width (or height) values in\n  layout_width (or layout_height, varies depending on the `flexDirection`). Also, the same\n  effect can be done by specifying \"wrap_content\" in layout_width (or layout_height) if\n  developers want to achieve the same effect as 'content'. Thus, `layout_flexBasisPercent` only\n  accepts percentage values, which can't be done through layout_width (or layout_height) for\n  simplicity.\n\n(4) `layout_wrapBefore` is introduced.\n  * The equivalent attribute doesn't exist in the CSS Flexible Box Module specification,\n  but as explained above, Android developers will benefit by having this attribute for having\n  more control over when a wrapping happens.\n\n(5) Default values for `alignItems` and `alignContent` are set to `flex_start` instead of `stretch`.\n  * Setting `stretch` for the `alignItems` is expensive because the children of `FlexboxLayout` are measured more than twice. The difference is more obvious when the layout hierarchy is deeply nested.\n\n## Xamarin Binding\nXamarin binding is now available on [NuGet](https://www.nuget.org/packages/FlexboxLayoutXamarinBindingAndroid/) thanks to [@btripp](https://github.com/btripp)\n\n## Demo apps\n### Flexbox Playground demo app\nThe `demo-playground` module works as a playground demo app for trying various values for the supported attributes.\nYou can install it by\n```\n./gradlew demo-playground:installDebug\n```\n\n### Cat gallery demo app\nThe `demo-cat-gallery` module showcases the usage of the FlexboxLayoutManager inside the RecyclerView\nthat handles various sizes of views aligned nicely regardless of the device width like the\nGoogle Photo app without loading all the images on the memory.\nThus compared to using the {@link FlexboxLayout}, it's much less likely to abuse the memory,\nwhich sometimes leads to the OutOfMemoryError.\n```\n./gradlew demo-cat-gallery:installDebug\n```\n\n## How to make contributions\nPlease read and follow the steps in [CONTRIBUTING.md](/CONTRIBUTING.md)\n\n## License\nPlease see [LICENSE](/LICENSE)\n",
        "releases": [
            {
                "name": "3.0.0",
                "date": "2021-05-21T12:16:35Z"
            },
            {
                "name": "2.0.1",
                "date": "2020-01-17T08:29:37Z"
            },
            {
                "name": "2.0.0",
                "date": "2019-11-22T07:03:20Z"
            },
            {
                "name": "1.1.1",
                "date": "2019-09-20T02:03:15Z"
            },
            {
                "name": "1.1.0",
                "date": "2018-09-25T10:38:03Z"
            },
            {
                "name": "1.1.0-beta1",
                "date": "2018-07-19T15:04:02Z"
            },
            {
                "name": "1.0.0",
                "date": "2018-05-17T01:57:48Z"
            },
            {
                "name": "0.3.2",
                "date": "2018-01-05T08:28:44Z"
            },
            {
                "name": "0.3.1",
                "date": "2017-09-27T02:19:45Z"
            },
            {
                "name": "0.3.0",
                "date": "2017-06-28T07:03:10Z"
            },
            {
                "name": "0.3.0-alpha4",
                "date": "2017-06-16T06:06:40Z"
            },
            {
                "name": "0.2.7",
                "date": "2017-06-16T05:46:35Z"
            },
            {
                "name": "0.3.0-alpha3",
                "date": "2017-03-30T08:33:09Z"
            },
            {
                "name": "0.2.6",
                "date": "2017-03-22T06:11:13Z"
            },
            {
                "name": "0.3.0-alpha2",
                "date": "2017-02-01T02:20:28Z"
            },
            {
                "name": "0.3.0-alpha1",
                "date": "2017-01-27T09:07:24Z"
            },
            {
                "name": "0.2.5",
                "date": "2016-12-08T02:56:21Z"
            },
            {
                "name": "0.2.4",
                "date": "2016-11-21T11:10:28Z"
            },
            {
                "name": "0.2.3",
                "date": "2016-07-27T11:12:01Z"
            },
            {
                "name": "0.2.2",
                "date": "2016-06-08T13:27:16Z"
            },
            {
                "name": "0.2.1",
                "date": "2016-06-03T13:57:58Z"
            },
            {
                "name": "0.2.0",
                "date": "2016-06-01T08:03:37Z"
            },
            {
                "name": "0.1.3",
                "date": "2016-05-19T07:27:09Z"
            },
            {
                "name": "0.1.2",
                "date": "2016-05-10T09:27:44Z"
            },
            {
                "name": "0.1.1",
                "date": "2016-05-10T08:55:51Z"
            }
        ]
    }
}