{
    "https://api.github.com/repos/dbcli/pgcli": {
        "forks": 557,
        "watchers": 12237,
        "stars": 12237,
        "languages": {
            "Python": 467416,
            "Gherkin": 7117,
            "Shell": 1944,
            "Dockerfile": 72
        },
        "commits": [
            "2024-12-04T03:57:05Z",
            "2024-10-05T06:14:42Z",
            "2024-06-26T16:22:26Z",
            "2024-06-20T04:45:50Z",
            "2024-05-10T03:29:55Z",
            "2024-05-10T03:27:22Z",
            "2024-05-01T02:03:31Z",
            "2024-04-25T17:37:29Z",
            "2024-04-20T04:08:36Z",
            "2024-03-26T22:31:38Z",
            "2024-03-23T20:24:40Z",
            "2024-02-19T08:36:46Z",
            "2024-02-06T05:44:05Z",
            "2024-02-06T05:41:28Z",
            "2023-12-09T04:21:28Z",
            "2023-11-18T06:38:50Z",
            "2023-11-09T01:07:21Z",
            "2023-11-06T06:10:47Z",
            "2023-10-31T03:34:14Z",
            "2023-10-30T02:18:09Z",
            "2023-10-29T23:04:00Z",
            "2023-10-27T23:14:37Z",
            "2023-10-27T23:01:59Z",
            "2023-10-27T22:55:44Z",
            "2023-10-18T16:25:29Z",
            "2023-10-13T05:28:11Z",
            "2023-10-11T04:34:59Z",
            "2023-10-08T00:56:08Z",
            "2023-10-07T02:51:15Z",
            "2023-10-07T01:16:30Z"
        ],
        "creation_date": "2014-10-12T17:32:33Z",
        "contributors": 30,
        "topics": [
            "database",
            "postgres",
            "postgresql",
            "psql",
            "python"
        ],
        "subscribers": 140,
        "readme": "We stand with Ukraine\n---------------------\n\nUkrainian people are fighting for their country. A lot of civilians, women and children, are suffering. Hundreds were killed and injured, and thousands were displaced.\n\nThis is an image from my home town, Kharkiv. This place is right in the old city center.\n\n.. image:: screenshots/kharkiv-destroyed.jpg\n\nPicture by @fomenko_ph (Telegram).\n\nPlease consider donating or volunteering.\n\n* https://bank.gov.ua/en/\n* https://savelife.in.ua/en/donate/\n* https://www.comebackalive.in.ua/donate\n* https://www.globalgiving.org/projects/ukraine-crisis-relief-fund/\n* https://www.savethechildren.org/us/where-we-work/ukraine\n* https://www.facebook.com/donate/1137971146948461/\n* https://donate.wck.org/give/393234#!/donation/checkout\n* https://atlantaforukraine.com/\n\n\nA REPL for Postgres\n-------------------\n\n|Build Status| |CodeCov| |PyPI| |netlify|\n\nThis is a postgres client that does auto-completion and syntax highlighting.\n\nHome Page: http://pgcli.com\n\nMySQL Equivalent: http://mycli.net\n\n.. image:: screenshots/pgcli.gif\n.. image:: screenshots/image01.png\n\nQuick Start\n-----------\n\nIf you already know how to install python packages, then you can simply do:\n\n::\n\n    $ pip install -U pgcli\n\n    or\n\n    $ sudo apt-get install pgcli # Only on Debian based Linux (e.g. Ubuntu, Mint, etc)\n    $ brew install pgcli  # Only on macOS\n\nIf you don't know how to install python packages, please check the\n`detailed instructions`_.\n\n.. _`detailed instructions`: https://github.com/dbcli/pgcli#detailed-installation-instructions\n\nUsage\n-----\n\n::\n\n    $ pgcli [database_name]\n\n    or\n\n    $ pgcli postgresql://[user[:password]@][netloc][:port][/dbname][?extra=value[&other=other-value]]\n\nExamples:\n\n::\n\n    $ pgcli local_database\n\n    $ pgcli postgres://amjith:pa$$w0rd@example.com:5432/app_db?sslmode=verify-ca&sslrootcert=/myrootcert\n\nFor more details:\n\n::\n\n    $ pgcli --help\n\n    Usage: pgcli [OPTIONS] [DBNAME] [USERNAME]\n\n    Options:\n      -h, --host TEXT            Host address of the postgres database.\n      -p, --port INTEGER         Port number at which the postgres instance is\n                                 listening.\n      -U, --username TEXT        Username to connect to the postgres database.\n      -u, --user TEXT            Username to connect to the postgres database.\n      -W, --password             Force password prompt.\n      -w, --no-password          Never prompt for password.\n      --single-connection        Do not use a separate connection for completions.\n      -v, --version              Version of pgcli.\n      -d, --dbname TEXT          database name to connect to.\n      --pgclirc FILE             Location of pgclirc file.\n      -D, --dsn TEXT             Use DSN configured into the [alias_dsn] section\n                                 of pgclirc file.\n      --list-dsn                 list of DSN configured into the [alias_dsn]\n                                 section of pgclirc file.\n      --row-limit INTEGER        Set threshold for row limit prompt. Use 0 to\n                                 disable prompt.\n      --less-chatty              Skip intro on startup and goodbye on exit.\n      --prompt TEXT              Prompt format (Default: \"\\u@\\h:\\d> \").\n      --prompt-dsn TEXT          Prompt format for connections using DSN aliases\n                                 (Default: \"\\u@\\h:\\d> \").\n      -l, --list                 list available databases, then exit.\n      --auto-vertical-output     Automatically switch to vertical output mode if\n                                 the result is wider than the terminal width.\n      --warn [all|moderate|off]  Warn before running a destructive query.\n      --help                     Show this message and exit.\n\n``pgcli`` also supports many of the same `environment variables`_ as ``psql`` for login options (e.g. ``PGHOST``, ``PGPORT``, ``PGUSER``, ``PGPASSWORD``, ``PGDATABASE``).\n\nThe SSL-related environment variables are also supported, so if you need to connect a postgres database via ssl connection, you can set set environment like this:\n\n::\n\n    export PGSSLMODE=\"verify-full\"\n    export PGSSLCERT=\"/your-path-to-certs/client.crt\"\n    export PGSSLKEY=\"/your-path-to-keys/client.key\"\n    export PGSSLROOTCERT=\"/your-path-to-ca/ca.crt\"\n    pgcli -h localhost -p 5432 -U username postgres\n\n.. _environment variables: https://www.postgresql.org/docs/current/libpq-envars.html\n\nFeatures\n--------\n\nThe `pgcli` is written using prompt_toolkit_.\n\n* Auto-completes as you type for SQL keywords as well as tables and\n  columns in the database.\n* Syntax highlighting using Pygments.\n* Smart-completion (enabled by default) will suggest context-sensitive\n  completion.\n\n    - ``SELECT * FROM <tab>`` will only show table names.\n    - ``SELECT * FROM users WHERE <tab>`` will only show column names.\n\n* Primitive support for ``psql`` back-slash commands.\n* Pretty prints tabular data.\n\n.. _prompt_toolkit: https://github.com/jonathanslenders/python-prompt-toolkit\n.. _tabulate: https://pypi.python.org/pypi/tabulate\n\nConfig\n------\nA config file is automatically created at ``~/.config/pgcli/config`` at first launch.\nSee the file itself for a description of all available options.\n\nContributions:\n--------------\n\nIf you're interested in contributing to this project, first of all I would like\nto extend my heartfelt gratitude. I've written a small doc to describe how to\nget this running in a development setup.\n\nhttps://github.com/dbcli/pgcli/blob/master/DEVELOP.rst\n\nPlease feel free to reach out to us if you need help.\n* Amjith, pgcli author: amjith.r@gmail.com, Twitter: `@amjithr <http://twitter.com/amjithr>`_\n* Irina, pgcli maintainer: i.chernyavska@gmail.com, Twitter: `@irinatruong <http://twitter.com/irinatruong>`_\n\nDetailed Installation Instructions:\n-----------------------------------\n\nmacOS:\n======\n\nThe easiest way to install pgcli is using Homebrew.\n\n::\n\n    $ brew install pgcli\n\nDone!\n\nAlternatively, you can install ``pgcli`` as a python package using a package\nmanager called called ``pip``. You will need postgres installed on your system\nfor this to work.\n\nIn depth getting started guide for ``pip`` - https://pip.pypa.io/en/latest/installation/\n\n::\n\n    $ which pip\n\nIf it is installed then you can do:\n\n::\n\n    $ pip install pgcli\n\nIf that fails due to permission issues, you might need to run the command with\nsudo permissions.\n\n::\n\n    $ sudo pip install pgcli\n\nIf pip is not installed check if easy_install is available on the system.\n\n::\n\n    $ which easy_install\n\n    $ sudo easy_install pgcli\n\nLinux:\n======\n\nIn depth getting started guide for ``pip`` - https://pip.pypa.io/en/latest/installation/\n\nCheck if pip is already available in your system.\n\n::\n\n    $ which pip\n\nIf it doesn't exist, use your linux package manager to install `pip`. This\nmight look something like:\n\n::\n\n    $ sudo apt-get install python-pip   # Debian, Ubuntu, Mint etc\n\n    or\n\n    $ sudo yum install python-pip  # RHEL, Centos, Fedora etc\n\n``pgcli`` requires python-dev, libpq-dev and libevent-dev packages. You can\ninstall these via your operating system package manager.\n\n\n::\n\n    $ sudo apt-get install python-dev libpq-dev libevent-dev\n\n    or\n\n    $ sudo yum install python-devel postgresql-devel\n\nThen you can install pgcli:\n\n::\n\n    $ sudo pip install pgcli\n\n\nDocker\n======\n\nPgcli can be run from within Docker. This can be useful to try pgcli without\ninstalling it, or any dependencies, system-wide.\n\nTo build the image:\n\n::\n\n    $ docker build -t pgcli .\n\nTo create a container from the image:\n\n::\n\n    $ docker run --rm -ti pgcli pgcli <ARGS>\n\nTo access postgresql databases listening on localhost, make sure to run the\ndocker in \"host net mode\". E.g. to access a database called \"foo\" on the\npostgresql server running on localhost:5432 (the standard port):\n\n::\n\n    $ docker run --rm -ti --net host pgcli pgcli -h localhost foo\n\nTo connect to a locally running instance over a unix socket, bind the socket to\nthe docker container:\n\n::\n\n    $ docker run --rm -ti -v /var/run/postgres:/var/run/postgres pgcli pgcli foo\n\n\nIPython\n=======\n\nPgcli can be run from within `IPython <https://ipython.org>`_ console. When working on a query,\nit may be useful to drop into a pgcli session without leaving the IPython console, iterate on a\nquery, then quit pgcli to find the query results in your IPython workspace.\n\nAssuming you have IPython installed:\n\n::\n\n    $ pip install ipython-sql\n\nAfter that, run ipython and load the ``pgcli.magic`` extension:\n\n::\n\n    $ ipython\n\n    In [1]: %load_ext pgcli.magic\n\n\nConnect to a database and construct a query:\n\n::\n\n    In [2]: %pgcli postgres://someone@localhost:5432/world\n    Connected: someone@world\n    someone@localhost:world> select * from city c where countrycode = 'USA' and population > 1000000;\n    +------+--------------+---------------+--------------+--------------+\n    | id   | name         | countrycode   | district     | population   |\n    |------+--------------+---------------+--------------+--------------|\n    | 3793 | New York     | USA           | New York     | 8008278      |\n    | 3794 | Los Angeles  | USA           | California   | 3694820      |\n    | 3795 | Chicago      | USA           | Illinois     | 2896016      |\n    | 3796 | Houston      | USA           | Texas        | 1953631      |\n    | 3797 | Philadelphia | USA           | Pennsylvania | 1517550      |\n    | 3798 | Phoenix      | USA           | Arizona      | 1321045      |\n    | 3799 | San Diego    | USA           | California   | 1223400      |\n    | 3800 | Dallas       | USA           | Texas        | 1188580      |\n    | 3801 | San Antonio  | USA           | Texas        | 1144646      |\n    +------+--------------+---------------+--------------+--------------+\n    SELECT 9\n    Time: 0.003s\n\n\nExit out of pgcli session with ``Ctrl + D`` and find the query results:\n\n::\n\n    someone@localhost:world>\n    Goodbye!\n    9 rows affected.\n    Out[2]:\n    [(3793, u'New York', u'USA', u'New York', 8008278),\n     (3794, u'Los Angeles', u'USA', u'California', 3694820),\n     (3795, u'Chicago', u'USA', u'Illinois', 2896016),\n     (3796, u'Houston', u'USA', u'Texas', 1953631),\n     (3797, u'Philadelphia', u'USA', u'Pennsylvania', 1517550),\n     (3798, u'Phoenix', u'USA', u'Arizona', 1321045),\n     (3799, u'San Diego', u'USA', u'California', 1223400),\n     (3800, u'Dallas', u'USA', u'Texas', 1188580),\n     (3801, u'San Antonio', u'USA', u'Texas', 1144646)]\n\nThe results are available in special local variable ``_``, and can be assigned to a variable of your\nchoice:\n\n::\n\n    In [3]: my_result = _\n\nPgcli dropped support for Python<3.8 as of 4.0.0. If you need it, install ``pgcli <= 4.0.0``.\n\nThanks:\n-------\n\nA special thanks to `Jonathan Slenders <https://twitter.com/jonathan_s>`_ for\ncreating `Python Prompt Toolkit <http://github.com/jonathanslenders/python-prompt-toolkit>`_,\nwhich is quite literally the backbone library, that made this app possible.\nJonathan has also provided valuable feedback and support during the development\nof this app.\n\n`Click <http://click.pocoo.org/>`_ is used for command line option parsing\nand printing error messages.\n\nThanks to `psycopg <https://www.psycopg.org/>`_ for providing a rock solid\ninterface to Postgres database.\n\nThanks to all the beta testers and contributors for your time and patience. :)\n\n\n.. |Build Status| image:: https://github.com/dbcli/pgcli/actions/workflows/ci.yml/badge.svg?branch=main\n    :target: https://github.com/dbcli/pgcli/actions/workflows/ci.yml\n\n.. |CodeCov| image:: https://codecov.io/gh/dbcli/pgcli/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/dbcli/pgcli\n   :alt: Code coverage report\n\n.. |Landscape| image:: https://landscape.io/github/dbcli/pgcli/master/landscape.svg?style=flat\n   :target: https://landscape.io/github/dbcli/pgcli/master\n   :alt: Code Health\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/pgcli.svg\n    :target: https://pypi.python.org/pypi/pgcli/\n    :alt: Latest Version\n\n.. |netlify| image:: https://api.netlify.com/api/v1/badges/3a0a14dd-776d-445d-804c-3dd74fe31c4e/deploy-status\n     :target: https://app.netlify.com/sites/pgcli/deploys\n     :alt: Netlify\n",
        "releases": []
    }
}