{
    "https://api.github.com/repos/munificent/craftinginterpreters": {
        "forks": 1087,
        "watchers": 9346,
        "stars": 9346,
        "languages": {
            "HTML": 2432431,
            "C": 140568,
            "Dart": 134174,
            "Java": 128643,
            "SCSS": 28395,
            "CSS": 27343,
            "Makefile": 13713,
            "JavaScript": 1942,
            "Shell": 118
        },
        "commits": [
            "2024-08-01T23:16:43Z",
            "2024-08-01T01:51:14Z",
            "2022-02-17T23:40:04Z",
            "2022-02-10T22:27:30Z",
            "2022-02-10T22:24:32Z",
            "2021-07-31T19:19:49Z",
            "2021-07-31T19:19:43Z",
            "2021-07-31T19:19:14Z",
            "2021-07-30T22:56:50Z",
            "2021-07-29T14:25:25Z",
            "2021-07-29T13:53:46Z",
            "2021-07-28T06:15:36Z",
            "2021-07-27T01:22:50Z",
            "2021-07-27T00:16:06Z",
            "2021-07-26T19:57:26Z",
            "2021-07-26T19:39:55Z",
            "2021-07-26T12:33:47Z",
            "2021-07-25T16:36:36Z",
            "2021-07-21T14:12:33Z",
            "2021-07-20T15:08:32Z",
            "2021-07-17T19:07:48Z",
            "2021-07-17T04:10:32Z",
            "2021-07-16T04:10:50Z",
            "2021-07-16T03:03:44Z",
            "2021-07-15T04:13:39Z",
            "2021-07-15T04:13:29Z",
            "2021-07-15T03:39:33Z",
            "2021-07-15T03:38:55Z",
            "2021-07-15T03:33:23Z",
            "2021-07-15T03:32:19Z"
        ],
        "creation_date": "2017-01-15T19:46:57Z",
        "contributors": 30,
        "topics": [
            "book",
            "bytecode",
            "c",
            "compiler",
            "interpreter",
            "java",
            "language",
            "lox",
            "markdown",
            "parser",
            "scripting-language"
        ],
        "subscribers": 168,
        "readme": "This is the repo used for the in-progress book \"[Crafting Interpreters][]\". It\ncontains the Markdown text of the book, full implementations of both\ninterpreters, as well as the build system to weave the two together into the\nfinal site.\n\n[crafting interpreters]: http://craftinginterpreters.com\n\nIf you find an error or have a suggestion, please do file an issue here. Thank\nyou!\n\n## Contributing\n\nOne of the absolute best things about writing a book online and putting it out\nthere before it's done is that people like you have been kind enough to give me\nfeedback, point out typos, and find other errors or unclear text.\n\nIf you'd like to do that, great! You can just file bugs here on the repo, or\nsend a pull request if you're so inclined. If you want to send a pull request,\nbut don't want to get the build system set up to regenerate the HTML too, don't\nworry about it. I'll do that when I pull it in.\n\n## Ports and implementations\n\nAnother way to get involved is by sharing your own implementation of Lox. Ports\nto other languages are particularly useful since not every reader likes Java and\nC. Feel free to add your Lox port or implementation to the wiki:\n\n* [Lox implementations][]\n\n[lox implementations]: https://github.com/munificent/craftinginterpreters/wiki/Lox-implementations\n\n## Building Stuff\n\nI am a terribly forgetful, error-prone mammal, so I automated as much as I\ncould.\n\n### Prerequisites\n\nI develop on an OS X machine, but any POSIX system should work too. With a\nlittle extra effort, you should be able to get this working on Windows as well,\nthough I can't help you out much.\n\nMost of the work is orchestrated by make. The build scripts, test runner, and\nother utilities are all written in [Dart][]. Instructions to install Dart are\n[here][install]. Once you have Dart installed and on your path, run:\n\n```sh\n$ make get\n```\n\n[dart]: https://dart.dev/\n[install]: https://dart.dev/get-dart\n\nThis downloads all of the packages used by the build and test scripts.\n\nIn order to compile the two interpreters, you also need a C compiler on your\npath as well as `javac`.\n\n### Building\n\nOnce you've got that setup, try:\n\n```sh\n$ make\n```\n\nIf everything is working, that will generate the site for the book as well as\ncompiling the two interpreters clox and jlox. You can run either interpreter\nright from the root of the repo:\n\n```sh\n$ ./clox\n$ ./jlox\n```\n\n### Hacking on the book\n\nThe Markdown and snippets of source code are woven together into the final HTML\nusing a hand-written static site generator that started out as a [single tiny\nPython script][py] for [my first book][gpp] and somehow grew into something\napproximating a real program.\n\n[py]: https://github.com/munificent/game-programming-patterns/blob/master/script/format.py\n[gpp]: http://gameprogrammingpatterns.com/\n\nThe generated HTML is committed in the repo under `site/`. It is built from a\ncombination of Markdown for prose, which lives in `book/`, and snippets of code\nthat are weaved in from the Java and C implementations in `java/` and `c/`. (All\nof those funny looking comments in the source code are how it knows which\nsnippet goes where.)\n\nThe script that does all the magic is `tool/bin/build.dart`. You can run that\ndirectly, or run:\n\n```sh\n$ make book\n```\n\nThat generates the entire site in one batch. If you are incrementally working\non it, you'll want to run the development server:\n\n```sh\n$ make serve\n```\n\nThis runs a little HTTP server on localhost rooted at the `site/` directory.\nAny time you request a page, it regenerates any files whose sources have been\nchanged, including Markdown files, interpreter source files, templates, and\nassets. Just let that keep running, edit files locally, and refresh your\nbrowser to see the changes.\n\n### Building the interpreters\n\nYou can build each interpreter like so:\n\n```sh\n$ make clox\n$ make jlox\n```\n\nThis builds the final version of each interpreter as it appears at the end of\nits part in the book.\n\nYou can also see what the interpreters look like at the end of each chapter. (I\nuse this to make sure they are working even in the middle of the book.) This is\ndriven by a script, `tool/bin/split_chapters.dart` that uses the same comment\nmarkers for the code snippets to determine which chunks of code are present in\neach chapter. It takes only the snippets that have been seen by the end of each\nchapter and produces a new copy of the source in `gen/`, one directory for each\nchapter's code. (These are also an easier way to view the source code since they\nhave all of the distracting marker comments stripped out.)\n\nThen, each of those can be built separately. Run:\n\n```sh\n$ make c_chapters\n```\n\nAnd in the `build/` directory, you'll get an executable for each chapter, like\n`chap14_chunks`, etc. Likewise:\n\n```sh\n$ make java_chapters\n```\n\nThis compiles the Java code to classfiles in `build/gen/` in a subdirectory for\neach chapter.\n\n## Testing\n\nI have a full Lox test suite that I use to ensure the interpreters in the book\ndo what they're supposed to do. The test cases live in `test/`. The Dart\nprogram `tool/bin/test.dart` is a test runner that runs each of those test\nfiles on a Lox interpreter, parses the result, and validates that that the test\ndoes what it's expected to do.\n\nThere are various interpreters you can run the tests against:\n\n```sh\n$ make test       # The final versions of clox and jlox.\n$ make test_clox  # The final version of clox.\n$ make test_jlox  # The final version of jlox.\n$ make test_c     # Every chapter's version of clox.\n$ make test_java  # Every chapter's version of jlox.\n$ make test_all   # All of the above.\n```\n\n### Testing your implementation\n\nYou are welcome to use the test suite and the test runner to test your own Lox\nimplementation. The test runner is at `tool/bin/test.dart` and can be given a\ncustom interpreter executable to run using `--interpreter`. For example, if you\nhad an interpreter executable at `my_code/boblox`, you could test it like:\n\n```sh\n$ dart tool/bin/test.dart clox --interpreter my_code/boblox\n```\n\nYou still need to tell it which suite of tests to run because that determines\nthe test expectations. If your interpreter should behave like jlox, use \"jlox\"\nas the suite name. If it behaves like clox, use \"clox\". If your interpreter is\nonly complete up to the end of one of the chapters in the book, you can use\nthat chapter as the suite, like \"chap10_functions\". See the Makefile for the\nnames of all of the chapters.\n\nIf your interpreter needs other command line arguments passed to use, pass them\nto the test runner using `--arguments` and it will forward to your interpreter.\n\n## Repository Layout\n\n*   `asset/` \u2013 Sass files and jinja2 templates used to generate the site.\n*   `book/` - Markdown files for the text of each chapter.\n*   `build/` - Intermediate files and other build output (except for the site\n    itself) go here. Not committed to Git.\n*   `c/` \u2013 Source code of clox, the interpreter written in C. Also contains an\n    XCode project, if that's your thing.\n*   `gen/` \u2013 Java source files generated by GenerateAst.java go here. Not\n    committed.\n*   `java/` \u2013 Source code of jlox, the interpreter written in Java.\n*   `note/` \u2013 Various research, notes, TODOs, and other miscellanea.\n*   `note/answers` \u2013 Sample answers for the challenges. No cheating!\n*   `site/` \u2013 The final generated site. The contents of this directory directly\n    mirror craftinginterpreters.com. Most content here is generated by build.py,\n    but fonts, images, and JS only live here. Everything is committed, even the\n    generated content.\n*   `test/` \u2013 Test cases for the Lox implementations.\n*   `tool/` \u2013 Dart package containing the build, test, and other scripts.\n",
        "releases": []
    }
}