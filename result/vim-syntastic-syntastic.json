{
    "https://api.github.com/repos/vim-syntastic/syntastic": {
        "forks": 1138,
        "watchers": 11293,
        "stars": 11293,
        "languages": {
            "Vim Script": 621682,
            "Erlang": 10985,
            "Python": 1081,
            "JavaScript": 1064
        },
        "commits": [
            "2022-07-10T12:58:45Z",
            "2022-07-10T12:57:00Z",
            "2022-07-06T02:38:41Z",
            "2022-03-17T23:37:03Z",
            "2021-11-11T08:09:59Z",
            "2021-10-18T10:01:29Z",
            "2021-09-03T11:29:04Z",
            "2021-07-19T14:28:40Z",
            "2021-07-19T14:19:11Z",
            "2021-07-01T07:00:36Z",
            "2021-05-19T09:52:48Z",
            "2021-04-22T08:20:28Z",
            "2021-04-22T08:16:49Z",
            "2021-03-15T08:06:02Z",
            "2021-01-04T15:22:20Z",
            "2020-11-06T09:51:05Z",
            "2020-11-04T13:55:51Z",
            "2020-09-27T18:09:31Z",
            "2020-09-17T21:04:04Z",
            "2020-09-09T14:59:34Z",
            "2020-09-09T14:45:37Z",
            "2020-09-05T21:55:51Z",
            "2020-08-24T17:10:32Z",
            "2020-08-14T07:44:19Z",
            "2020-07-27T06:16:51Z",
            "2020-07-26T17:39:29Z",
            "2020-07-05T08:06:36Z",
            "2020-06-22T19:12:00Z",
            "2020-04-19T08:59:27Z",
            "2020-01-29T09:11:19Z"
        ],
        "creation_date": "2009-07-11T04:05:54Z",
        "contributors": 30,
        "topics": [
            "lint",
            "lint-checking",
            "linters",
            "syntax-checker",
            "syntax-checking",
            "vim-plugin"
        ],
        "subscribers": 211,
        "readme": "                   ,\n                  / \\,,_  .'|\n               ,{{| /}}}}/_.'            _____________________________________________\n              }}}}` '{{'  '.            /                                             \\\n            {{{{{    _   ;, \\          /            Ladies and Gentlemen,              \\\n         ,}}}}}}    /o`\\  ` ;)        |                                                |\n        {{{{{{   /           (        |                 this is ...                    |\n        }}}}}}   |            \\       |                                                |\n       {{{{{{{{   \\            \\      |                                                |\n       }}}}}}}}}   '.__      _  |     |    _____             __             __  _      |\n       {{{{{{{{       /`._  (_\\ /     |   / ___/__  ______  / /_____ ______/ /_(_)____ |\n        }}}}}}'      |    //___/   --=:   \\__ \\/ / / / __ \\/ __/ __ `/ ___/ __/ / ___/ |\n    jgs `{{{{`       |     '--'       |  ___/ / /_/ / / / / /_/ /_/ (__  ) /_/ / /__   |\n         }}}`                         | /____/\\__, /_/ /_/\\__/\\__,_/____/\\__/_/\\___/   |\n                                      |      /____/                                    |\n                                      |                                               /\n                                       \\_____________________________________________/\n\n\n- - -\n1. [Deprecation note](#deprecation)  \n2. [Introduction](#introduction)  \n3. [Installation](#installation)  \n3.1. [Requirements](#requirements)  \n3.2. [Installing syntastic with Pathogen](#installpathogen)  \n4. [Recommended settings](#settings)  \n5. [FAQ](#faq)  \n5.1. [I installed syntastic but it isn't reporting any errors...](#faqinfo)  \n5.2. [Syntastic supports several checkers for my filetype, how do I tell it which one(s) to use?](#faqcheckers)  \n5.3. [How can I run checkers for \"foreign\" filetypes against the current file?](#faqforeign)  \n5.4. [I have enabled multiple checkers for the current filetype. How can I display all errors from all checkers together?](#faqaggregate)  \n5.5. [How can I pass additional arguments to a checker?](#faqargs)  \n5.6. [I run a checker and the location list is not updated...](#faqloclist)  \n5.6. [I run`:lopen` or `:lwindow` and the error window is empty...](#faqloclist)  \n5.7. [How can I jump between the different errors without using the location list at the bottom of the window?](#faqlnext)  \n5.8. [The error window is closed automatically when I `:quit` the current buffer but not when I `:bdelete` it?](#faqbdelete)  \n5.9. [My favourite checker needs to load a configuration file from the project's root rather than the current directory...](#faqconfig)  \n5.10. [What is the difference between syntax checkers and style checkers?](#faqstyle)  \n5.11. [How can I check scripts written for different versions of Python?](#faqpython)  \n5.12. [How can I check scripts written for different versions of Ruby?](#faqruby)  \n5.13. [The `perl` checker has stopped working...](#faqperl)  \n5.14. [What happened to the `rustc` checker?](#faqrust)  \n5.15. [What happened to the `tsc` checker?](#faqtsc)  \n5.16. [What happened to the `xcrun` checker?](#faqxcrun)  \n5.17. [What happened to the `valac` checker?](#faqvalac)  \n5.18. [What happened to the Julia `lint` checker?](#faqjulialint)  \n6. [Resources](#otherresources)  \n\n- - -\n\n<a name=\"deprecation\"></a>\n\n## 1\\. Deprecation note\n\nThis project is no longer maintained.  If you need a syntax checking plugin\nfor [Vim][vim] you might be interested in Syntastic's spiritual succesor,\n[ALE][ale].  Although it shares no code with syntastic and it takes a very\ndifferent approach to design, [ALE][ale] can be considered a natural evolution\nof syntastic in terms of goals and functionality.  Check it out, you probably\nwon't be disappointed.\n\n<a name=\"introduction\"></a>\n\n## 2\\. Introduction\n\nSyntastic is a syntax checking plugin for [Vim][vim] created by\n[Martin Grenfell][scrooloose]. It runs files through external syntax checkers\nand displays any resulting errors to the user. This can be done on demand, or\nautomatically as files are saved. If syntax errors are detected, the user is\nnotified and is happy because they didn't have to compile their code or execute\ntheir script to find them.\n\nAt the time of this writing, syntastic has checking plugins for ACPI\nSource Language, ActionScript, Ada, Ansible configurations, API Blueprint,\nAppleScript, AsciiDoc, Assembly languages, BEMHTML, Bro, Bourne shell, C, C++,\nC#, Cabal, Chef, CMake, CoffeeScript, Coco, Coq, CSS, Cucumber, CUDA, D, Dart,\nDocBook, Dockerfile, Dust, Elixir, Erlang, eRuby, Fortran, Gentoo metadata,\nGLSL, Go, Haml, Haskell, Haxe, Handlebars, HSS, HTML, Java, JavaScript, JSON,\nJSX, LESS, Lex, Limbo, LISP, LLVM intermediate language, Lua, Markdown,\nMATLAB, Mercury, NASM, Nix, Objective-C, Objective-C++, OCaml, Perl, Perl\nPOD, PHP, gettext Portable Object, Raku, OS X and iOS property lists, Pug\n(formerly Jade), Puppet, Python, QML, R, Racket, RDF TriG, RDF Turtle, Relax\nNG, reStructuredText, RPM spec, Ruby, SASS/SCSS, Scala, Slim, SML, Solidity,\nSphinx, SQL, Stylus, Tcl, TeX, Texinfo, Twig, TypeScript, Verilog, VHDL, Vim\nhelp, VimL, Vue.js, xHtml, XML, XSLT, XQuery, YACC, YAML, YANG data models,\nYARA rules, z80, Zope page templates, and Zsh. See the [manual][checkers] for\ndetails about the corresponding supported checkers (`:help syntastic-checkers`\nin Vim).\n\nA number of third-party Vim plugins also provide checkers for syntastic, for\nexample: [merlin][merlin], [omnisharp-vim][omnisharp], [rust.vim][rust],\n[syntastic-extras][myint], [syntastic-more][roktas], [tsuquyomi][tsuquyomi],\n[vim-crystal][crystal], [vim-eastwood][eastwood], and [vim-swift][swift].\n\nBelow is a screenshot showing the methods that Syntastic uses to display syntax\nerrors. Note that, in practise, you will only have a subset of these methods\nenabled.\n\n![Screenshot 1][screenshot]\n\n1. Errors are loaded into the location list for the corresponding window.\n2. When the cursor is on a line containing an error, the error message is echoed in the command window.\n3. Signs are placed beside lines with errors - note that warnings are displayed in a different color.\n4. There is a configurable statusline flag you can include in your statusline config.\n5. Hover the mouse over a line containing an error and the error message is displayed as a balloon.\n6. (not shown) Highlighting errors with syntax highlighting. Erroneous parts of lines can be highlighted.\n\n<a name=\"installation\"></a>\n\n## 3\\. Installation\n\n<a name=\"requirements\"></a>\n\n### 3.1\\. Requirements\n\nSyntastic itself has rather relaxed requirements: it doesn't have any external\ndependencies, and it needs a version of [Vim][vim] compiled with a few common\nfeatures: `autocmd`, `eval`, `file_in_path`, `modify_fname`, `quickfix`,\n`reltime`, `statusline`, and `user_commands`. Not all possible combinations of\nfeatures that include the ones above make equal sense on all operating systems,\nbut Vim version 7 or later with the \"normal\", \"big\", or \"huge\" feature sets\nshould be fine.\n\nSyntastic should work with any modern plugin managers for Vim, such as\n[NeoBundle][neobundle], [Pathogen][pathogen], [Vim-Addon-Manager][vam],\n[Vim-Plug][plug], or [Vundle][vundle]. Instructions for installing syntastic\nwith [Pathogen][pathogen] are included below for completeness.\n\nStarting with Vim version 7.4.1486 you can also load syntastic using the\nstandard mechanism of packages, without the help of third-party plugin managers\n(see `:help packages` in Vim for details). Beware however that, while support\nfor packages has been added in Vim 7.4.1384, the functionality needed by\nsyntastic is present only in versions 7.4.1486 and later.\n\nLast but not least: syntastic doesn't know how to do any syntax checks by\nitself. In order to get meaningful results you need to install external\ncheckers corresponding to the types of files you use. Please consult the\n[manual][checkers] (`:help syntastic-checkers` in Vim) for a list of supported\ncheckers.\n\n<a name=\"installpathogen\"></a>\n\n### 3.2\\. Installing syntastic with Pathogen\n\nIf you already have [Pathogen][pathogen] working then skip [Step 1](#step1) and go to\n[Step 2](#step2).\n\n<a name=\"step1\"></a>\n\n#### 3.2.1\\. Step 1: Install pathogen.vim\n\nFirst I'll show you how to install Tim Pope's [Pathogen][pathogen] so that it's easy to\ninstall syntastic. Do this in your terminal so that you get the `pathogen.vim`\nfile and the directories it needs:\n```sh\nmkdir -p ~/.vim/autoload ~/.vim/bundle && \\\ncurl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim\n```\nNext you *need* to add this to your `~/.vimrc`:\n```vim\nexecute pathogen#infect()\n```\n\n<a name=\"step2\"></a>\n\n#### 3.2.2\\. Step 2: Install syntastic as a Pathogen bundle\n\nYou now have pathogen installed and can put syntastic into `~/.vim/bundle` like\nthis:\n```sh\ncd ~/.vim/bundle && \\\ngit clone --depth=1 https://github.com/vim-syntastic/syntastic.git\n```\nQuit vim and start it back up to reload it, then type:\n```vim\n:Helptags\n```\nIf you get an error when you do this, then you probably didn't install\n[Pathogen][pathogen] right. Go back to [Step 1](#step1) and make sure you did the\nfollowing:\n\n1. Created both the `~/.vim/autoload` and `~/.vim/bundle` directories.\n2. Added the `execute pathogen#infect()` line to your `~/.vimrc` file\n3. Did the `git clone` of syntastic inside `~/.vim/bundle`\n4. Have permissions to access all of these directories.\n\n<a name=\"settings\"></a>\n\n## 4\\. Recommended settings\n\nSyntastic has numerous options that can be configured, and the defaults\nare not particularly well suitable for new users. It is recommended\nthat you start by adding the following lines to your `vimrc` file, and\nreturn to them after reading the manual (see `:help syntastic` in Vim):\n```vim\nset statusline+=%#warningmsg#\nset statusline+=%{SyntasticStatuslineFlag()}\nset statusline+=%*\n\nlet g:syntastic_always_populate_loc_list = 1\nlet g:syntastic_auto_loc_list = 1\nlet g:syntastic_check_on_open = 1\nlet g:syntastic_check_on_wq = 0\n```\n\n<a name=\"faq\"></a>\n\n## 5\\. FAQ\n\n<a name=\"faqinfo\"></a>\n\n__5.1. Q. I installed syntastic but it isn't reporting any errors...__\n\nA. The most likely reason is that none of the syntax checkers that it requires\nare installed. For example: by default, python requires either `flake8` or\n`pylint` to be installed and in your `$PATH`. Read the [manual][checkers]\n(`:help syntastic-checkers` in Vim) to find out what executables are\nsupported. Note that aliases do not work; the actual executables must be\navailable in your `$PATH`. Symbolic links are okay though.  You can see\nsyntastic's idea of available checkers by running `:SyntasticInfo`.\n\nA second probable reason is that none of the available checkers are\nenabled. Syntastic comes preconfigured with a default list of enabled checkers\nper filetype, but this list is kept short in order to prevent slowing down Vim\nor trying to run conflicting checks. The command `:SyntasticInfo` will show you\nwhich checkers are enabled. You can tell syntastic which checkers (among the\navailable ones) you want to run by setting `g:syntastic_<filetype>_checkers` in\nyour `vimrc` (see [below](#faqcheckers)).\n\nA third possible reason is that the `$PATH` seen by syntastic might not be same\nas the `$PATH` in your login shell. Syntastic runs checkers using the shell\npointed to by Vim's `shell` (or by `g:syntastic_shell`, if set), and that's the\nshell you need to configure to set the proper `$PATH` and environment variables\nfor your checkers. You can see syntastic's idea of `$PATH` by running\n```vim\n:echo syntastic#util#system('echo \"$PATH\"')\n```\non UNIX and Mac OS-X systems, or\n```vim\n:echo syntastic#util#system('echo %PATH%')\n```\non Windows.\n\nFinally, another reason it could fail is that either the command line options\nor the error output for a syntax checker may have changed. In this case, make\nsure you have the latest version of the syntax checker installed. If it still\nfails then post an [issue][bug_tracker] - or better yet, create a pull request.\n\n<a name=\"faqcheckers\"></a>\n\n__5.2. Q. Syntastic supports several checkers for my filetype, how do I tell it\nwhich one(s) to use?__\n\nA. Add a line like this to your `vimrc`:\n```vim\nlet g:syntastic_<filetype>_checkers = ['<checker-name>']\n```\n\nTo see the list of supported checkers for your filetype read the\n[manual][checkers] (`:help syntastic-checkers` in Vim).\n\nFor example, Python has the following checkers, among others: `flake8`,\n`pyflakes`, `pylint` and a native `python` checker.  To tell syntastic to use\n`pylint`, you would use this setting:\n```vim\nlet g:syntastic_python_checkers = ['pylint']\n```\n\nCheckers can be chained together like this:\n```vim\nlet g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd']\n```\n\nThis is telling syntastic to run the `php` checker first, and if no errors are\nfound, run `phpcs`, and then `phpmd`.\n\nYou can also run checkers explicitly by calling `:SyntasticCheck <checker>`.\nFor example to run `phpcs` and `phpmd`:\n```vim\n:SyntasticCheck phpcs phpmd\n```\n\nThis works for any checkers available for the current filetype, even if they\naren't listed in `g:syntastic_<filetype>_checkers`.\n\n<a name=\"faqforeign\"></a>\n\n__5.3. Q. How can I run checkers for \"foreign\" filetypes against the current\nfile?__\n\nA. You need to qualify the name of the \"foreign\" checker with the name\nof its filetype. For example to check `tex` files with the checker\n`language_check` (which normally acts only on files of type `text`), you can\nadd `text/language_check` to the list fo checkers for `tex`:\n```vim\nlet g:syntastic_tex_checkers = ['lacheck', 'text/language_check']\n```\n\nThis also works with `:SyntasticCheck`, e.g. the following command runs\n`text/language_check` against the current file regardless of the current\nfiletype:\n```vim\n:SyntasticCheck text/language_check\n```\n\nOf course, the checkers specified this way need to be known to syntastic, and\nthey need to be shown as available when you run `:SyntasticInfo`. You can't\njust make up a combination of a filetype and a program name and expect it to\nwork as a checker.\n\n<a name=\"faqaggregate\"></a>\n\n__5.4. Q. I have enabled multiple checkers for the current filetype. How can I\ndisplay all errors from all checkers together?__\n\nA. Set `g:syntastic_aggregate_errors` to 1 in your `vimrc`:\n```vim\nlet g:syntastic_aggregate_errors = 1\n```\n\nSee `:help syntastic-aggregating-errors` for more details.\n\n<a name=\"faqargs\"></a>\n\n__5.5. Q. How can I pass additional arguments to a checker?__\n\nA. In most cases a command line is constructed using an internal function\nnamed `makeprgBuild()`, which provides a number of options that allow you to\ncustomise every part of the command that gets run. You can set these options\nusing global variables.\n\nThe general form of the global `args` variable is\n`syntastic_<filetype>_<checker>_args`. Thus if you wanted to pass\n`--my --args --here` to the Ruby `mri` checker you would add this line to your\n`vimrc`:\n```vim\nlet g:syntastic_ruby_mri_args = \"--my --args --here\"\n```\n\nSee `:help syntastic-checker-options` for more information.\n\nA number of checkers don't use the `makeprgBuild()` function mentioned above,\nor have additional options that can be configured. For these checkers the exact\nlist of options should be included in the [manual][checkers]\n(`:help syntastic-checkers` in Vim).\n\n<a name=\"faqloclist\"></a>\n\n__5.6. Q. I run a checker and the location list is not updated...__  \n__5.6. Q. I run`:lopen` or `:lwindow` and the error window is empty...__\n\nA. By default the location list is changed only when you run the `:Errors`\ncommand, in order to minimise conflicts with other plugins. If you want the\nlocation list to always be updated when you run the checkers, add this line to\nyour `vimrc`:\n```vim\nlet g:syntastic_always_populate_loc_list = 1\n```\n\n<a name=\"faqlnext\"></a>\n\n__5.7. Q. How can I jump between the different errors without using the location\nlist at the bottom of the window?__\n\nA. Vim provides several built-in commands for this. See `:help :lnext` and\n`:help :lprevious`.\n\nIf you use these commands a lot then you may want to add shortcut mappings to\nyour `vimrc`, or install something like [unimpaired][unimpaired], which provides such\nmappings (among other things).\n\n<a name=\"faqbdelete\"></a>\n\n__5.8. Q. The error window is closed automatically when I `:quit` the current buffer\nbut not when I `:bdelete` it?__\n\nA. There is no safe way to handle that situation automatically, but you can\nwork around it:\n```vim\nnnoremap <silent> <C-d> :lclose<CR>:bdelete<CR>\ncabbrev <silent> bd <C-r>=(getcmdtype()==#':' && getcmdpos()==1 ? 'lclose\\|bdelete' : 'bd')<CR>\n```\n\n<a name=\"faqconfig\"></a>\n\n__5.9. My favourite checker needs to load a configuration file from the\nproject's root rather than the current directory...__\n\nA. You can set up an `autocmd` to search for the configuration file in the\ncurrent directory and upwards, and add it to the checker's options when found.\nFor example for `jscs`:\n\n```vim\nfunction! FindConfig(prefix, what, where)\n    let cfg = findfile(a:what, escape(a:where, ' ') . ';')\n    return cfg !=# '' ? ' ' . a:prefix . ' ' . shellescape(cfg) : ''\nendfunction\n\nautocmd FileType javascript let b:syntastic_javascript_jscs_args =\n    \\ get(g:, 'syntastic_javascript_jscs_args', '') .\n    \\ FindConfig('-c', '.jscsrc', expand('<afile>:p:h', 1))\n```\n\n<a name=\"faqstyle\"></a>\n\n__5.10. Q. What is the difference between syntax checkers and style checkers?__\n\nA. The errors and warnings they produce are highlighted differently and can\nbe filtered by different rules, but otherwise the distinction is pretty much\narbitrary. There is an ongoing effort to keep things consistent, so you can\n_generally_ expect messages produced by syntax checkers to be _mostly_ related\nto syntax, and messages produced by style checkers to be _mostly_ about style.\nBut there can be no formal guarantee that, say, a style checker that runs into\na syntax error wouldn't die with a fatal message, nor that a syntax checker\nwouldn't give you warnings against using some constructs as being bad practice.\nThere is also no guarantee that messages marked as `style` are less severe than\nthe ones marked as `syntax` (whatever that might mean). And there are even a\nfew Frankenstein checkers (for example `flake8` and `pylama`) that, by their\nnature, produce both kinds of messages. Syntastic is not smart enough to be\nable to sort out these things by itself.\n\nGenerally it's more useful to look at this from the perspective of filtering\nunwanted messages, rather than as an indicator of severity levels. The\ndistinction between syntax and style is orthogonal to the distinction between\nerrors and warnings, and thus you can turn off messages based on level, on\ntype, or both.\n\ne.g. To disable all style messages:\n```vim\nlet g:syntastic_quiet_messages = { \"type\": \"style\" }\n```\nSee `:help syntastic_quiet_messages` for more information.\n\n<a name=\"faqpython\"></a>\n\n__5.11. Q. How can I check scripts written for different versions of Python?__\n\nA. Install a Python version manager such as [virtualenv][virtualenv]\nor [pyenv][pyenv], activate the environment for the relevant version\nof Python, and install in it the checkers you want to use.  Set\n`g:syntastic_python_checkers` accordingly in your `vimrc`, and run [Vim][vim]\nfrom the virtual environment.\n\nIf you're starting Vim from a desktop manager rather than from a terminal you\nmight need to write wrapper scripts around your checkers, to activate the\nvirtual environment before running the actual checks.  Then you'll need to\npoint the relevant `g:syntastic_python_<checker>_exec` variables to the wrapper\nscripts.\n\n<a name=\"faqruby\"></a>\n\n__5.12. Q. How can I check scripts written for different versions of Ruby?__\n\nA. Install a Ruby version manager such as [rvm][rvm] or [rbenv][rbenv],\nactivate the relevant version of Ruby, and install in it the checkers you want\nto use.  Set `g:syntastic_ruby_checkers` accordingly in your `vimrc`, and run\n[Vim][vim] under the relevant Ruby version.\n\nIf you're starting Vim from a desktop manager rather than from a terminal\nand depending on the version manager you use you might need to write wrapper\nscripts around your checkers, to activate the relevant version of Ruby\nbefore running the actual checks.  Then you'll need to point the relevant\n`g:syntastic_ruby_<checker>_exec` variables to the wrapper scripts.\n\n<a name=\"faqperl\"></a>\n\n__5.13. Q. The `perl` checker has stopped working...__\n\nA. The `perl` checker runs `perl -c` against your file, which in turn\n__executes__ any `BEGIN`, `UNITCHECK`, and `CHECK` blocks, and any `use`\nstatements in your file (cf. [perlrun][perlrun]). This is probably fine if you\nwrote the file yourself, but it's a security problem if you're checking\nthird-party files. Since there is currently no way to disable this behaviour\nwhile still producing useful results, the checker is now disabled by default.\nTo (re-)enable it, make sure the `g:syntastic_perl_checkers` list includes\n`perl`, and set `g:syntastic_enable_perl_checker` to 1 in your `vimrc`:\n```vim\nlet g:syntastic_enable_perl_checker = 1\n```\n\n<a name=\"faqrust\"></a>\n\n__5.14. Q. What happened to the `rustc` checker?__\n\nA. It is now part of the [rust.vim][rust] plugin. If you install this plugin the\nchecker should be picked up automatically by syntastic.\n\n<a name=\"faqtsc\"></a>\n\n__5.15. Q. What happened to the `tsc` checker?__\n\nA. It didn't meet people's expectations and it has been removed. The plugin\n[tsuquyomi][tsuquyomi] comes packaged with a checker for TypeScript. If you\ninstall this plugin the checker should be picked up automatically by syntastic.\n\n<a name=\"faqxcrun\"></a>\n\n__5.16. Q. What happened to the `xcrun` checker?__\n\nA. The `xcrun` checker used to have a security problem and it has been removed.\nA better checker for __Swift__ is part of the [vim-swift][swift] plugin. If you\ninstall this plugin the checker should be picked up automatically by syntastic.\n\n<a name=\"faqvalac\"></a>\n\n__5.17. Q. What happened to the `valac` checker?__\n\nA. It is now part of the [vala.vim][vala] plugin. If you install this plugin the\nchecker should be picked up automatically by syntastic.\n\n<a name=\"julialint\"></a>\n\n__5.18. Q. What happened to the Julia `lint` checker?__\n\nA. It was removed, since the `Lint.jl` package [has been deprecated][julialint]\nand no longer works with recent Julia versions.\n\n<a name=\"otherresources\"></a>\n\n## 6\\. Resources\n\nThe preferred place for posting suggestions, reporting bugs, and general\ndiscussions related to syntastic is the [issue tracker at GitHub][bug_tracker].\nA guide for writing syntax checkers can be found in the [wiki][guide].\nThere are also a dedicated [google group][google_group], and a\n[syntastic tag at StackOverflow][stack_overflow].\n\nSyntastic aims to provide a common interface to syntax checkers for as many\nlanguages as possible. For particular languages, there are, of course, other\nplugins that provide more functionality than syntastic. You might want to take\na look at [ghcmod-vim][ghcmod], [jedi-vim][jedi], [python-mode][python_mode], [vim-go][vimgo], or\n[YouCompleteMe][ycm].\n\n[scrooloose]:       https://github.com/scrooloose\n[screenshot]:       https://github.com/vim-syntastic/syntastic/raw/master/_assets/screenshot_1.png\n\n[ale]:              https://github.com/dense-analysis/ale\n\n[bug_tracker]:      https://github.com/vim-syntastic/syntastic/issues\n[checkers]:         https://github.com/vim-syntastic/syntastic/blob/master/doc/syntastic-checkers.txt\n[crystal]:          https://github.com/rhysd/vim-crystal\n[eastwood]:         https://github.com/venantius/vim-eastwood\n[ghcmod]:           https://github.com/eagletmt/ghcmod-vim\n[google_group]:     https://groups.google.com/group/vim-syntastic\n[guide]:            https://github.com/vim-syntastic/syntastic/wiki/Syntax-Checker-Guide\n[jedi]:             https://github.com/davidhalter/jedi-vim\n[julialint]:        https://github.com/tonyhffong/Lint.jl/issues/269\n[merlin]:           https://github.com/the-lambda-church/merlin\n[myint]:            https://github.com/myint/syntastic-extras\n[neobundle]:        https://github.com/Shougo/neobundle.vim\n[omnisharp]:        https://github.com/OmniSharp/omnisharp-vim\n[pathogen]:         https://github.com/tpope/vim-pathogen\n[perlrun]:          http://perldoc.perl.org/perlrun.html#*-c*\n[plug]:             https://github.com/junegunn/vim-plug/\n[pyenv]:            https://github.com/yyuu/pyenv\n[python_mode]:      https://github.com/klen/python-mode\n[rbenv]:            https://github.com/rbenv/rbenv\n[roktas]:           https://github.com/roktas/syntastic-more\n[rust]:             https://github.com/rust-lang/rust.vim\n[rvm]:              https://rvm.io/\n[stack_overflow]:   http://stackoverflow.com/questions/tagged/syntastic\n[swift]:            https://github.com/kballard/vim-swift\n[tsuquyomi]:        https://github.com/Quramy/tsuquyomi/\n[unimpaired]:       https://github.com/tpope/vim-unimpaired\n[vala]:             https://github.com/arrufat/vala.vim\n[vam]:              https://github.com/MarcWeber/vim-addon-manager\n[vim]:              http://www.vim.org/\n[vimgo]:            https://github.com/fatih/vim-go\n[virtualenv]:       https://virtualenv.pypa.io/en/stable/\n[vundle]:           https://github.com/gmarik/Vundle.vim\n[ycm]:              https://github.com/ycm-core/YouCompleteMe\n\n<!--\nvim:tw=79:sw=4:\n-->\n",
        "releases": [
            {
                "name": "",
                "date": "2019-10-02T10:43:32Z"
            },
            {
                "name": "",
                "date": "2018-04-17T06:04:53Z"
            },
            {
                "name": "syntastic 3.8.0",
                "date": "2016-10-22T03:44:11Z"
            },
            {
                "name": "syntastic 3.7.0",
                "date": "2015-10-06T11:37:57Z"
            },
            {
                "name": "syntastic 3.6.0",
                "date": "2015-01-19T07:54:20Z"
            },
            {
                "name": "syntastic 3.5.0",
                "date": "2015-01-19T08:49:21Z"
            },
            {
                "name": "syntastic 3.4.0",
                "date": "2015-01-19T08:50:03Z"
            },
            {
                "name": "syntastic 3.3.0",
                "date": "2015-01-19T08:50:33Z"
            },
            {
                "name": "syntastic 3.2.0",
                "date": "2015-01-19T08:51:00Z"
            },
            {
                "name": "syntastic 3.1.0",
                "date": "2015-01-19T08:51:26Z"
            }
        ]
    }
}