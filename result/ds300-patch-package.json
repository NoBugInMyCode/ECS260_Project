{
    "https://api.github.com/repos/ds300/patch-package": {
        "forks": 299,
        "watchers": 10590,
        "stars": 10590,
        "languages": {
            "TypeScript": 144282,
            "Shell": 31761,
            "JavaScript": 2156
        },
        "commits": [
            "2024-12-16T09:44:07Z",
            "2024-12-14T17:12:04Z",
            "2024-03-04T12:42:21Z",
            "2023-09-11T16:37:43Z",
            "2023-09-11T16:32:40Z",
            "2023-09-11T16:32:10Z",
            "2023-08-07T08:38:44Z",
            "2023-07-27T17:39:37Z",
            "2023-07-27T17:38:09Z",
            "2023-07-27T17:30:30Z",
            "2023-07-27T17:29:45Z",
            "2023-07-27T17:23:37Z",
            "2023-07-20T12:38:27Z",
            "2023-07-19T15:58:31Z",
            "2023-07-19T15:30:09Z",
            "2023-07-19T15:29:40Z",
            "2023-07-19T15:05:30Z",
            "2023-07-19T14:21:55Z",
            "2023-07-14T15:07:02Z",
            "2023-07-14T14:51:31Z",
            "2023-07-14T14:51:11Z",
            "2023-07-14T12:17:57Z",
            "2023-07-14T12:16:53Z",
            "2023-07-13T18:56:09Z",
            "2023-07-13T15:54:02Z",
            "2023-07-13T15:37:17Z",
            "2023-07-12T17:14:59Z",
            "2023-07-12T16:32:28Z",
            "2023-07-12T15:12:51Z",
            "2023-07-12T14:48:39Z"
        ],
        "creation_date": "2017-05-08T20:31:20Z",
        "contributors": 30,
        "topics": [
            "dependencies",
            "dependency-manager",
            "diff",
            "javascript",
            "javascript-tools",
            "node",
            "node-js",
            "node-modules",
            "nodejs",
            "package-management",
            "package-manager",
            "patch",
            "patcher",
            "postinstall"
        ],
        "subscribers": 39,
        "readme": "<p align=\"center\">\n  <img src=\"https://ds300.github.io/patch-package/patch-package.svg\" width=\"80%\" alt=\"patch-package\" />\n</p>\n\n`patch-package` lets app authors instantly make and keep fixes to npm\ndependencies. It's a vital band-aid for those of us living on the bleeding edge.\n\n```sh\n# fix a bug in one of your dependencies\nvim node_modules/some-package/brokenFile.js\n\n# run patch-package to create a .patch file\nnpx patch-package some-package\n\n# commit the patch file to share the fix with your team\ngit add patches/some-package+3.14.15.patch\ngit commit -m \"fix brokenFile.js in some-package\"\n```\n\nPatches created by `patch-package` are automatically and gracefully applied when\nyou use `npm`(>=5) or `yarn`.\n\nNo more waiting around for pull requests to be merged and published. No more\nforking repos just to fix that one tiny thing preventing your app from working.\n\n## Set-up\n\nIn package.json\n\n```diff\n \"scripts\": {\n+  \"postinstall\": \"patch-package\"\n }\n```\n\nThen\n\n### npm\n\n    npm i patch-package\n\nYou can use `--save-dev` if you don't need to run npm in production, e.g. if\nyou're making a web frontend.\n\n### yarn v1\n\n    yarn add patch-package postinstall-postinstall\n\nYou can use `--dev` if you don't need to run yarn in production, e.g. if you're\nmaking a web frontend.\n\nTo understand why yarn needs the `postinstall-postinstall` package see:\n[Why use postinstall-postinstall](#why-use-postinstall-postinstall-with-yarn)\n\n### yarn workspaces\n\nSame as for yarn \u261d\ufe0f Note that if you want to patch un-hoisted packages you'll\nneed to repeat the setup process for the child package. Also make sure you're in\nthe child package directory when you run `patch-package` to generate the patch\nfiles.\n\n### yarn v2+\n\nyarn 2+ have native support for patching dependencies via\n[`yarn patch`](https://yarnpkg.com/cli/patch). You do not need to use\npatch-package on these projects.\n\n### pnpm\n\npnpm has native support for patching dependencies via\n[`pnpm patch`](https://pnpm.io/cli/patch). You do not need to use patch-package\non these projects.\n\n### Heroku\n\nFor `patch-package` to work on Heroku applications, you must specify\n[`NPM_CONFIG_PRODUCTION=false` or `YARN_PRODUCTION=false`](https://devcenter.heroku.com/articles/nodejs-support#package-installation).\nSee [this issue](https://github.com/ds300/patch-package/issues/130) for more\ndetails.\n\n### Docker and CI\n\n- If having errors about working directory (\"cannot run in wd [...]\") when\n  building in Docker, you might need to adjust configuration in `.npmrc`. See\n  [#185](https://github.com/ds300/patch-package/issues/185).\n- In your `Dockerfile`, remember to copy over the patch files _before_ running\n  `[npm|yarn] install`\n- If you cache `node_modules` rather than running `yarn install` every time,\n  make sure that the `patches` dir is included in your cache key somehow.\n  Otherwise if you update a patch then the change may not be reflected on\n  subsequent CI runs.\n\n### CircleCI\n\nCreate a hash of your patches before loading/saving your cache. If using a Linux\nmachine, run `md5sum patches/* > patches.hash`. If running on a macOS machine,\nuse `md5 patches/* > patches.hash`\n\n```yaml\n- run:\n    name: patch-package hash\n    command: md5sum patches/* > patches.hash\n```\n\nThen, update your hash key to include a checksum of that file:\n\n```yaml\n- restore_cache:\n    key:\n      app-node_modules-v1-{{ checksum \"yarn.lock\" }}-{{ checksum \"patches.hash\"\n      }}\n```\n\nAs well as the save_cache\n\n```yaml\n- save_cache:\n    key:\n      app-node_modules-v1-{{ checksum \"yarn.lock\" }}-{{ checksum \"patches.hash\"\n      }}\n    paths:\n      - ./node_modules\n```\n\n## Usage\n\n### Making patches\n\nFirst make changes to the files of a particular package in your node_modules\nfolder, then run\n\n    yarn patch-package package-name\n\nor use npx (included with `npm > 5.2`)\n\n    npx patch-package package-name\n\nwhere `package-name` matches the name of the package you made changes to.\n\nIf this is the first time you've used `patch-package`, it will create a folder\ncalled `patches` in the root dir of your app. Inside will be a file called\n`package-name+0.44.0.patch` or something, which is a diff between normal old\n`package-name` and your fixed version. Commit this to share the fix with your\nteam.\n\n#### Options\n\n- `--create-issue`\n\n  For packages whose source is hosted on GitHub this option opens a web browser\n  with a draft issue based on your diff.\n\n- `--use-yarn`\n\n  By default, patch-package checks whether you use npm or yarn based on which\n  lockfile you have. If you have both, it uses npm by default. Set this option\n  to override that default and always use yarn.\n\n- `--exclude <regexp>`\n\n  Ignore paths matching the regexp when creating patch files. Paths are relative\n  to the root dir of the package to be patched.\n\n  Default value: `package\\\\.json$`\n\n- `--include <regexp>`\n\n  Only consider paths matching the regexp when creating patch files. Paths are\n  relative to the root dir of the package to be patched.\n\n  Default value: `.*`\n\n- `--case-sensitive-path-filtering`\n\n  Make regexps used in --include or --exclude filters case-sensitive.\n\n- `--patch-dir`\n\n  Specify the name for the directory in which to put the patch files.\n\n#### Nested packages\n\nIf you are trying to patch a package at, e.g.\n`node_modules/package/node_modules/another-package` you can just put a `/`\nbetween the package names:\n\n    npx patch-package package/another-package\n\nIt works with scoped packages too\n\n    npx patch-package @my/package/@my/other-package\n\n### Updating patches\n\nUse exactly the same process as for making patches in the first place, i.e. make\nmore changes, run patch-package, commit the changes to the patch file.\n\n### Applying patches\n\nRun `patch-package` without arguments to apply all patches in your project.\n\n#### Options\n\n- `--error-on-fail`\n\n  Forces patch-package to exit with code 1 after failing.\n\n  When running locally patch-package always exits with 0 by default. This\n  happens even after failing to apply patches because otherwise yarn.lock and\n  package.json might get out of sync with node_modules, which can be very\n  confusing.\n\n  `--error-on-fail` is **switched on** by default on CI.\n\n  See https://github.com/ds300/patch-package/issues/86 for background.\n\n- `--reverse`\n\n  Un-applies all patches.\n\n  Note that this will fail if the patched files have changed since being\n  patched. In that case, you'll probably need to re-install `node_modules`.\n\n  This option was added to help people using CircleCI avoid\n  [an issue around caching and patch file updates](https://github.com/ds300/patch-package/issues/37)\n  but might be useful in other contexts too.\n\n- `--patch-dir`\n\n  Specify the name for the directory in which the patch files are located\n\n#### Notes\n\nTo apply patches individually, you may use `git`:\n\n    git apply --ignore-whitespace patches/package-name+0.44.2.patch\n\nor `patch` in unixy environments:\n\n    patch -p1 -i patches/package-name+0.44.2.patch\n\n### Dev-only patches\n\nIf you deploy your package to production (e.g. your package is a server) then\nany patched `devDependencies` will not be present when patch-package runs in\nproduction. It will happily ignore those patch files if the package to be\npatched is listed directly in the `devDependencies` of your package.json. If\nit's a transitive dependency patch-package can't detect that it is safe to\nignore and will throw an error. To fix this, mark patches for transitive dev\ndependencies as dev-only by renaming from, e.g.\n\n    package-name+0.44.0.patch\n\nto\n\n    package-name+0.44.0.dev.patch\n\nThis will allow those patch files to be safely ignored when\n`NODE_ENV=production`.\n\n### Creating multiple patches for the same package\n\n_\ud83d\udca1 This is an advanced feature and is not recommended unless you really, really\nneed it._\n\nLet's say you have a patch for react-native called\n\n- `patches/react-native+0.72.0.patch`\n\nIf you want to add another patch file to `react-native`, you can use the\n`--append` flag while supplying a name for the patch.\n\nJust make you changes inside `node_modules/react-native` then run e.g.\n\n    npx patch-package react-native --append 'fix-touchable-opacity'\n\nThis will create a new patch file while renaming the old patch file so that you\nnow have:\n\n- `patches/react-native+0.72.0+001+initial.patch`\n- `patches/react-native+0.72.0+002+fix-touchable-opacity.patch`\n\nThe patches are ordered in a sequence, so that they can build on each other if\nnecessary. **Think of these as commits in a git history**.\n\n#### Updating a sequenced patch file\n\nIf the patch file is the last one in the sequence, you can just make your\nchanges inside e.g. `node_modules/react-native` and then run\n\n    npx patch-package react-native\n\nThis will update the last patch file in the sequence.\n\nIf the patch file is not the last one in the sequence **you need to use the\n`--rebase` feature** to un-apply the succeeding patch files first.\n\nUsing the example above, let's say you want to update the `001+initial` patch\nbut leave the other patch alone. You can run\n\n    npx patch-package react-native --rebase patches/react-native+0.72.0+001+initial.patch\n\nThis will undo the `002-fix-touchable-opacity` patch file. You can then make\nyour changes and run\n\n    npx patch-package react-native\n\nto finish the rebase by updating the `001+initial` patch file and re-apply the\n`002-fix-touchable-opacity` patch file, leaving you with all patches applied and\nup-to-date.\n\n#### Inserting a new patch file in the middle of an existing sequence\n\nUsing the above example, let's say you want to insert a new patch file between\nthe `001+initial` and `002+fix-touchable-opacity` patch files. You can run\n\n    npx patch-package react-native --rebase patches/react-native+0.72.0+001+initial.patch\n\nThis will undo the `002-fix-touchable-opacity` patch file. You can then make any\nchanges you want to insert in a new patch file and run\n\n    npx patch-package react-native --append 'fix-console-warnings'\n\nThis will create a new patch file while renaming any successive patches to\nmaintain the sequence order, leaving you with\n\n- `patches/react-native+0.72.0+001+initial.patch`\n- `patches/react-native+0.72.0+002+fix-console-warnings.patch`\n- `patches/react-native+0.72.0+003+fix-touchable-opacity.patch`\n\nTo insert a new patch file at the start of the sequence, you can run\n\n    npx patch-package react-native --rebase 0\n\nWhich will un-apply all patch files in the sequence. Then follow the process\nabove to create a new patch file numbered `001`.\n\n#### Deleting a sequenced patch file\n\nTo delete a sequenced patch file, just delete it, then remove and reinstall your\n`node_modules` folder.\n\nIf you deleted one of the patch files other than the last one, you don't need to\nupdate the sequence numbers in the successive patch file names, but you might\nwant to do so to keep things tidy.\n\n#### Partially applying a broken patch file\n\nNormally patch application is atomic per patch file. i.e. if a patch file\ncontains an error anywhere then none of the changes in the patch file will be\napplied and saved to disk.\n\nThis can be problematic if you have a patch with many changes and you want to\nkeep some of them and update others.\n\nIn this case you can use the `--partial` option. Patch-package will apply as\nmany of the changes as it can and then leave it to you to fix the rest.\n\nAny errors encountered will be written to a file `./patch-package-errors.log` to\nhelp you keep track of what needs fixing.\n\n## Benefits of patching over forking\n\n- Sometimes forks need extra build steps, e.g. with react-native for Android.\n  Forget that noise.\n- Get told in big red letters when the dependency changed and you need to check\n  that your fix is still valid.\n- Keep your patches colocated with the code that depends on them.\n- Patches can be reviewed as part of your normal review process, forks probably\n  can't\n\n## When to fork instead\n\n- The change is too consequential to be developed in situ.\n- The change would be useful to other people as-is.\n- You can afford to make a proper PR to upstream.\n\n## Isn't this dangerous?\n\nNope. The technique is quite robust. Here are some things to keep in mind\nthough:\n\n- It's easy to forget to run `yarn` or `npm` when switching between branches\n  that do and don't have patch files.\n- Long lived patches can be costly to maintain if they affect an area of code\n  that is updated regularly and you want to update the package regularly too.\n- Big semantic changes can be hard to review. Keep them small and obvious or add\n  plenty of comments.\n- Changes can also impact the behaviour of other untouched packages. It's\n  normally obvious when this will happen, and often desired, but be careful\n  nonetheless.\n\n## Why use postinstall-postinstall with Yarn?\n\nMost times when you do a `yarn`, `yarn add`, `yarn remove`, or `yarn install`\n(which is the same as just `yarn`) Yarn will completely replace the contents of\nyour node_modules with freshly unpackaged modules. patch-package uses the\n`postinstall` hook to modify these fresh modules, so that they behave well\naccording to your will.\n\nYarn only runs the `postinstall` hook after `yarn` and `yarn add`, but not after\n`yarn remove`. The `postinstall-postinstall` package is used to make sure your\n`postinstall` hook gets executed even after a `yarn remove`.\n\n## License\n\nMIT\n\n[![Empowered by Futurice's open source sponsorship program](https://img.shields.io/badge/sponsor-chilicorn-ff69b4.svg)](http://futurice.com/blog/sponsoring-free-time-open-source-activities?utm_source=github&utm_medium=spice&utm_campaign=patch-package)\n",
        "releases": [
            {
                "name": "v8.0.0",
                "date": "2023-08-03T07:36:33Z"
            },
            {
                "name": "v7.0.0",
                "date": "2023-04-25T18:04:24Z"
            },
            {
                "name": "",
                "date": "2023-01-03T17:57:31Z"
            },
            {
                "name": "",
                "date": "2022-10-25T18:33:42Z"
            },
            {
                "name": "",
                "date": "2021-03-12T16:51:20Z"
            },
            {
                "name": "",
                "date": "2021-03-11T17:42:50Z"
            },
            {
                "name": "",
                "date": "2021-03-08T09:15:02Z"
            },
            {
                "name": "",
                "date": "2021-03-04T09:04:11Z"
            },
            {
                "name": "",
                "date": "2021-03-02T14:18:29Z"
            },
            {
                "name": "",
                "date": "2021-03-02T08:42:47Z"
            },
            {
                "name": "",
                "date": "2021-03-01T13:00:03Z"
            },
            {
                "name": "",
                "date": "2021-03-01T10:31:50Z"
            },
            {
                "name": "",
                "date": "2021-02-28T19:02:45Z"
            },
            {
                "name": "",
                "date": "2021-02-27T15:20:15Z"
            },
            {
                "name": "",
                "date": "2021-02-27T15:02:19Z"
            },
            {
                "name": "v6.2.1",
                "date": "2020-02-28T10:52:13Z"
            },
            {
                "name": "Support dev-only patches",
                "date": "2019-09-11T19:45:39Z"
            },
            {
                "name": "",
                "date": "2019-09-06T15:38:14Z"
            },
            {
                "name": "",
                "date": "2019-09-06T12:26:56Z"
            },
            {
                "name": "Graceful failure handling",
                "date": "2019-04-12T09:58:33Z"
            },
            {
                "name": "",
                "date": "2019-04-09T04:59:16Z"
            },
            {
                "name": "Basic support for yarn workspaces",
                "date": "2019-03-28T11:22:52Z"
            },
            {
                "name": "Preliminary support for yarn workspaces",
                "date": "2019-03-26T09:52:38Z"
            },
            {
                "name": "Remove unnecessary package manager detection",
                "date": "2019-03-24T18:12:02Z"
            },
            {
                "name": "Better error messages for patch parse failures",
                "date": "2019-03-24T12:58:36Z"
            }
        ]
    }
}