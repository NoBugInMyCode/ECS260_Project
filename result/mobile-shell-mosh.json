{
    "https://api.github.com/repos/mobile-shell/mosh": {
        "forks": 748,
        "watchers": 12769,
        "stars": 12769,
        "languages": {
            "C++": 521501,
            "M4": 104261,
            "Shell": 49638,
            "Rich Text Format": 35387,
            "Perl": 18464,
            "C": 15209,
            "Makefile": 12331,
            "HTML": 2160
        },
        "commits": [
            "2023-08-08T02:07:52Z",
            "2023-08-08T01:40:33Z",
            "2023-08-08T01:53:48Z",
            "2023-08-08T01:24:18Z",
            "2023-08-08T01:51:22Z",
            "2023-02-03T02:13:04Z",
            "2023-07-30T22:10:08Z",
            "2023-07-30T21:46:02Z",
            "2023-07-30T21:27:10Z",
            "2023-07-30T21:20:33Z",
            "2022-10-29T03:57:23Z",
            "2023-03-05T22:57:22Z",
            "2023-03-06T01:52:52Z",
            "2022-10-27T03:14:51Z",
            "2023-07-30T20:40:50Z",
            "2023-07-30T20:19:46Z",
            "2023-01-20T01:11:30Z",
            "2022-11-20T22:23:30Z",
            "2022-11-12T03:37:46Z",
            "2022-10-27T01:11:19Z",
            "2022-10-27T00:38:51Z",
            "2022-10-27T00:15:20Z",
            "2022-10-27T00:10:56Z",
            "2022-10-27T00:08:06Z",
            "2022-10-27T00:07:46Z",
            "2022-10-27T00:07:12Z",
            "2022-10-26T23:52:56Z",
            "2022-10-26T23:54:00Z",
            "2022-10-26T23:29:44Z",
            "2022-10-26T22:18:39Z"
        ],
        "creation_date": "2011-01-09T09:41:02Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 216,
        "readme": "[![ci](https://github.com/mobile-shell/mosh/actions/workflows/ci.yml/badge.svg)](https://github.com/mobile-shell/mosh/actions/workflows/ci.yml)\n\nMosh: the mobile shell\n======================\n\nMosh is a remote terminal application that supports intermittent\nconnectivity, allows roaming, and provides speculative local echo\nand line editing of user keystrokes.\n\nIt aims to support the typical interactive uses of SSH, plus:\n\n   * Mosh keeps the session alive if the client goes to sleep and\n     wakes up later, or temporarily loses its Internet connection.\n\n   * Mosh allows the client and server to \"roam\" and change IP\n     addresses, while keeping the connection alive. Unlike SSH, Mosh\n     can be used while switching between Wi-Fi networks or from Wi-Fi\n     to cellular data to wired Ethernet.\n\n   * The Mosh client runs a predictive model of the server's behavior\n     in the background and tries to guess intelligently how each\n     keystroke will affect the screen state. When it is confident in\n     its predictions, it will show them to the user while waiting for\n     confirmation from the server. Most typing and uses of the left-\n     and right-arrow keys can be echoed immediately.\n\n     As a result, Mosh is usable on high-latency links, e.g. on a\n     cellular data connection or spotty Wi-Fi. In distinction from\n     previous attempts at local echo modes in other protocols, Mosh\n     works properly with full-screen applications such as emacs, vi,\n     alpine, and irssi, and automatically recovers from occasional\n     prediction errors within an RTT. On high-latency links, Mosh\n     underlines its predictions while they are outstanding and removes\n     the underline when they are confirmed by the server.\n\nMosh does not support X forwarding or the non-interactive uses of SSH,\nincluding port forwarding.\n\nOther features\n--------------\n\n   * Mosh adjusts its frame rate so as not to fill up network queues\n     on slow links, so \"Control-C\" always works within an RTT to halt\n     a runaway process.\n\n   * Mosh warns the user when it has not heard from the server\n     in a while.\n\n   * Mosh supports lossy links that lose a significant fraction\n     of their packets.\n\n   * Mosh handles some Unicode edge cases better than SSH and existing\n     terminal emulators by themselves, but requires a UTF-8\n     environment to run.\n\n   * Mosh leverages SSH to set up the connection and authenticate\n     users. Mosh does not contain any privileged (root) code.\n\nGetting Mosh\n------------\n\n  [The Mosh web site](https://mosh.org/#getting) has information about\n  packages for many operating systems, as well as instructions for building\n  from source.\n\n  Note that `mosh-client` receives an AES session key as an environment\n  variable.  If you are porting Mosh to a new operating system, please make\n  sure that a running process's environment variables are not readable by other\n  users.  We have confirmed that this is the case on GNU/Linux, OS X, and\n  FreeBSD.\n\nUsage\n-----\n\n  The `mosh-client` binary must exist on the user's machine, and the\n  `mosh-server` binary on the remote host.\n\n  The user runs:\n\n    $ mosh [user@]host\n\n  If the `mosh-client` or `mosh-server` binaries live outside the user's\n  `$PATH`, `mosh` accepts the arguments `--client=PATH` and `--server=PATH` to\n  select alternate locations. More options are documented in the mosh(1) manual\n  page.\n\n  There are [more examples](https://mosh.org/#usage) and a\n  [FAQ](https://mosh.org/#faq) on the Mosh web site.\n\nHow it works\n------------\n\n  The `mosh` program will SSH to `user@host` to establish the connection.\n  SSH may prompt the user for a password or use public-key\n  authentication to log in.\n\n  From this point, `mosh` runs the `mosh-server` process (as the user)\n  on the server machine. The server process listens on a high UDP port\n  and sends its port number and an AES-128 secret key back to the\n  client over SSH. The SSH connection is then shut down and the\n  terminal session begins over UDP.\n\n  If the client changes IP addresses, the server will begin sending\n  to the client on the new IP address within a few seconds.\n\n  To function, Mosh requires UDP datagrams to be passed between client\n  and server. By default, `mosh` uses a port number between 60000 and\n  61000, but the user can select a particular port with the -p option.\n  Please note that the -p option has no effect on the port used by SSH.\n\nAdvice to distributors\n----------------------\n\nA note on compiler flags: Mosh is security-sensitive code. When making\nautomated builds for a binary package, we recommend passing the option\n`--enable-compile-warnings=error` to `./configure`. On GNU/Linux with\n`g++` or `clang++`, the package should compile cleanly with\n`-Werror`. Please report a bug if it doesn't.\n\nWhere available, Mosh builds with a variety of binary hardening flags\nsuch as `-fstack-protector-all`, `-D_FORTIFY_SOURCE=2`, etc.  These\nprovide proactive security against the possibility of a memory\ncorruption bug in Mosh or one of the libraries it uses.  For a full\nlist of flags, search for `HARDEN` in `configure.ac`.  The `configure`\nscript detects which flags are supported by your compiler, and enables\nthem automatically.  To disable this detection, pass\n`--disable-hardening` to `./configure`.  Please report a bug if you\nhave trouble with the default settings; we would like as many users as\npossible to be running a configuration as secure as possible.\n\nMosh ships with a default optimization setting of `-O2`. Some\ndistributors have asked about changing this to `-Os` (which causes a\ncompiler to prefer space optimizations to time optimizations). We have\nbenchmarked with the included `src/examples/benchmark` program to test\nthis. The results are that `-O2` is 40% faster than `-Os` with g++ 4.6\non GNU/Linux, and 16% faster than `-Os` with clang++ 3.1 on Mac OS\nX. In both cases, `-Os` did produce a smaller binary (by up to 40%,\nsaving almost 200 kilobytes on disk). While Mosh is not especially CPU\nintensive and mostly sits idle when the user is not typing, we think\nthe results suggest that `-O2` (the default) is preferable.\n\nOur Debian and Fedora packaging presents Mosh as a single package.\nMosh has a Perl dependency that is only required for client use.  For\nsome platforms, it may make sense to have separate mosh-server and\nmosh-client packages to allow mosh-server usage without Perl.\n\nNotes for developers\n--------------------\n\nTo start contributing to Mosh, install the following dependencies:\n\nDebian, Windows Subsystem for Linux:\n\n```\n$ sudo apt install -y build-essential protobuf-compiler \\\n    libprotobuf-dev pkg-config libutempter-dev zlib1g-dev libncurses5-dev \\\n    libssl-dev bash-completion tmux less\n```\n\nMacOS:\n\n```\n$ brew install protobuf automake\n```\n\nOnce you have forked the repository, run the following to build and test Mosh:\n\n```\n$ ./autogen.sh\n$ ./configure\n$ make\n$ make check\n```\n\nMosh supports producing code coverage reports by tests, but this feature is\ndisabled by default. To enable it, make sure `lcov` is installed on your\nsystem. Then, configure and run tests:\n\n```\n$ ./configure --enable-code-coverage\n$ make check-code-coverage\n```\n\nThis will run all tests and produce a coverage report in HTML form that can be\nopened with your favorite browser. Ideally, newly added code should strive for\n90% (or better) incremental test coverage.\n\nMore info\n---------\n\n  * Mosh Web site:\n\n    <https://mosh.org>\n\n  * `mosh-devel@mit.edu` mailing list:\n\n    <https://mailman.mit.edu/mailman/listinfo/mosh-devel>\n\n  * `mosh-users@mit.edu` mailing list:\n\n    <https://mailman.mit.edu/mailman/listinfo/mosh-users>\n\n  * `#mosh` channel on [Libera Chat](https://libera.chat/)\n\n    https://web.libera.chat/#mosh\n",
        "releases": [
            {
                "name": "mosh-1.4.0",
                "date": "2022-10-27T02:00:42Z"
            },
            {
                "name": "mosh-1.3.2.95rc2",
                "date": "2022-10-27T00:41:42Z"
            },
            {
                "name": "mosh-1.3.2.95rc1",
                "date": "2022-08-04T21:51:34Z"
            },
            {
                "name": "Mosh 1.3.2",
                "date": "2017-07-22T07:58:12Z"
            },
            {
                "name": "",
                "date": "2017-07-20T03:25:17Z"
            },
            {
                "name": "mosh-1.3.1-rc2",
                "date": "2017-05-22T01:12:36Z"
            },
            {
                "name": "Mosh 1.3.0",
                "date": "2017-03-25T22:28:57Z"
            },
            {
                "name": "",
                "date": "2017-01-06T03:12:52Z"
            },
            {
                "name": "",
                "date": "2016-12-28T04:57:40Z"
            },
            {
                "name": "mosh 1.2.6",
                "date": "2016-08-12T07:39:49Z"
            },
            {
                "name": "mosh 1.2.5.95rc1",
                "date": "2016-05-26T03:59:04Z"
            },
            {
                "name": "mosh 1.2.5",
                "date": "2015-07-24T01:27:24Z"
            },
            {
                "name": "mosh 1.2.4",
                "date": "2013-06-10T19:45:46Z"
            }
        ]
    }
}