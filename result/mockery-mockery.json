{
    "https://api.github.com/repos/mockery/mockery": {
        "forks": 456,
        "watchers": 10660,
        "stars": 10660,
        "languages": {
            "PHP": 5878956,
            "Shell": 3032,
            "Makefile": 1817
        },
        "commits": [
            "2024-12-21T13:51:09Z",
            "2024-12-21T13:22:20Z",
            "2024-10-03T02:42:06Z",
            "2024-10-02T01:10:49Z",
            "2024-10-02T01:00:38Z",
            "2024-10-02T00:59:33Z",
            "2024-10-02T00:50:03Z",
            "2024-09-03T15:35:17Z",
            "2024-09-02T21:53:07Z",
            "2024-08-01T16:15:58Z",
            "2024-08-01T16:14:27Z",
            "2024-08-01T16:11:49Z",
            "2024-08-01T16:08:54Z",
            "2024-08-01T16:08:17Z",
            "2024-07-07T20:33:10Z",
            "2024-07-07T20:26:59Z",
            "2024-05-23T21:43:13Z",
            "2024-05-19T03:04:46Z",
            "2024-05-19T02:58:58Z",
            "2024-05-18T01:06:00Z",
            "2024-05-16T03:13:13Z",
            "2024-05-16T03:04:11Z",
            "2024-05-16T03:00:32Z",
            "2024-05-16T02:20:58Z",
            "2024-05-10T14:07:12Z",
            "2024-04-29T16:41:37Z",
            "2024-04-24T00:08:40Z",
            "2024-04-23T22:56:55Z",
            "2024-03-21T21:34:05Z",
            "2024-03-21T18:34:15Z"
        ],
        "creation_date": "2009-02-25T19:25:09Z",
        "contributors": 30,
        "topics": [
            "mock",
            "mockery",
            "mocking",
            "php",
            "phpunit",
            "stub",
            "test-doubles"
        ],
        "subscribers": 73,
        "readme": "Mockery\n=======\n\n[![Build Status](https://github.com/mockery/mockery/actions/workflows/tests.yml/badge.svg)](https://github.com/mockery/mockery/actions)\n[![Supported PHP Version](https://badgen.net/packagist/php/mockery/mockery?color=8892bf)](https://www.php.net/supported-versions)\n[![Code Coverage](https://codecov.io/gh/mockery/mockery/branch/1.6.x/graph/badge.svg?token=oxHwVM56bT)](https://codecov.io/gh/mockery/mockery)\n[![Type Coverage](https://shepherd.dev/github/mockery/mockery/coverage.svg)](https://shepherd.dev/github/mockery/mockery)\n[![Latest Stable Version](https://poser.pugx.org/mockery/mockery/v/stable.svg)](https://packagist.org/packages/mockery/mockery)\n[![Total Downloads](https://poser.pugx.org/mockery/mockery/downloads.svg)](https://packagist.org/packages/mockery/mockery)\n\nMockery is a simple yet flexible PHP mock object framework for use in unit testing\nwith PHPUnit, PHPSpec or any other testing framework. Its core goal is to offer a\ntest double framework with a succinct API capable of clearly defining all possible\nobject operations and interactions using a human readable Domain Specific Language\n(DSL). Designed as a drop in alternative to PHPUnit's phpunit-mock-objects library,\nMockery is easy to integrate with PHPUnit and can operate alongside\nphpunit-mock-objects without the World ending.\n\nMockery is released under a New BSD License.\n\n## Installation\n\nTo install Mockery, run the command below and you will get the latest\nversion\n\n```sh\ncomposer require --dev mockery/mockery\n```\n\n## Documentation\n\nIn older versions, this README file was the documentation for Mockery. Over time\nwe have improved this, and have created an extensive documentation for you. Please\nuse this README file as a starting point for Mockery, but do read the documentation\nto learn how to use Mockery.\n\nThe current version can be seen at [docs.mockery.io](http://docs.mockery.io).\n\n## PHPUnit Integration\n\nMockery ships with some helpers if you are using PHPUnit. You can extend the\n[`Mockery\\Adapter\\Phpunit\\MockeryTestCase`](library/Mockery/Adapter/Phpunit/MockeryTestCase.php)\nclass instead of `PHPUnit\\Framework\\TestCase`, or if you are already using a\ncustom base class for your tests, take a look at the traits available in the\n[`Mockery\\Adapter\\Phpunit`](library/Mockery/Adapter/Phpunit) namespace.\n\n## Test Doubles\n\nTest doubles (often called mocks) simulate the behaviour of real objects. They are\ncommonly utilised to offer test isolation, to stand in for objects which do not\nyet exist, or to allow for the exploratory design of class APIs without\nrequiring actual implementation up front.\n\nThe benefits of a test double framework are to allow for the flexible generation\nand configuration of test doubles. They allow the setting of expected method calls\nand/or return values using a flexible API which is capable of capturing every\npossible real object behaviour in way that is stated as close as possible to a\nnatural language description. Use the `Mockery::mock` method to create a test\ndouble.\n\n``` php\n$double = Mockery::mock();\n```\n\nIf you need Mockery to create a test double to satisfy a particular type hint,\nyou can pass the type to the `mock` method.\n\n``` php\nclass Book {}\n\ninterface BookRepository {\n    function find($id): Book;\n    function findAll(): array;\n    function add(Book $book): void;\n}\n\n$double = Mockery::mock(BookRepository::class);\n```\n\nA detailed explanation of creating and working with test doubles is given in the\ndocumentation, [Creating test doubles](http://docs.mockery.io/en/latest/reference/creating_test_doubles.html)\nsection.\n\n## Method Stubs \ud83c\udfab\n\nA method stub is a mechanism for having your test double return canned responses\nto certain method calls. With stubs, you don't care how many times, if at all,\nthe method is called. Stubs are used to provide indirect input to the system\nunder test.\n\n``` php\n$double->allows()->find(123)->andReturns(new Book());\n\n$book = $double->find(123);\n```\n\nIf you have used Mockery before, you might see something new in the example\nabove &mdash; we created a method stub using `allows`, instead of the \"old\"\n`shouldReceive` syntax. This is a new feature of Mockery v1, but fear not,\nthe trusty ol' `shouldReceive` is still here.\n\nFor new users of Mockery, the above example can also be written as:\n\n``` php\n$double->shouldReceive('find')->with(123)->andReturn(new Book());\n$book = $double->find(123);\n```\n\nIf your stub doesn't require specific arguments, you can also use this shortcut\nfor setting up multiple calls at once:\n\n``` php\n$double->allows([\n    \"findAll\" => [new Book(), new Book()],\n]);\n```\n\nor\n\n``` php\n$double->shouldReceive('findAll')\n    ->andReturn([new Book(), new Book()]);\n```\n\nYou can also use this shortcut, which creates a double and sets up some stubs in\none call:\n\n``` php\n$double = Mockery::mock(BookRepository::class, [\n    \"findAll\" => [new Book(), new Book()],\n]);\n```\n\n## Method Call Expectations \ud83d\udcf2\n\nA Method call expectation is a mechanism to allow you to verify that a\nparticular method has been called. You can specify the parameters and you can\nalso specify how many times you expect it to be called. Method call expectations\nare used to verify indirect output of the system under test.\n\n``` php\n$book = new Book();\n\n$double = Mockery::mock(BookRepository::class);\n$double->expects()->add($book);\n```\n\nDuring the test, Mockery accept calls to the `add` method as prescribed.\nAfter you have finished exercising the system under test, you need to\ntell Mockery to check that the method was called as expected, using the\n`Mockery::close` method. One way to do that is to add it to your `tearDown`\nmethod in PHPUnit.\n\n``` php\n\npublic function tearDown()\n{\n    Mockery::close();\n}\n```\n\nThe `expects()` method automatically sets up an expectation that the method call\n(and matching parameters) is called **once and once only**. You can choose to change\nthis if you are expecting more calls.\n\n``` php\n$double->expects()->add($book)->twice();\n```\n\nIf you have used Mockery before, you might see something new in the example\nabove &mdash; we created a method expectation using `expects`, instead of the \"old\"\n`shouldReceive` syntax. This is a new feature of Mockery v1, but same as with\n`allows` in the previous section, it can be written in the \"old\" style.\n\nFor new users of Mockery, the above example can also be written as:\n\n``` php\n$double->shouldReceive('find')\n    ->with(123)\n    ->once()\n    ->andReturn(new Book());\n$book = $double->find(123);\n```\n\nA detailed explanation of declaring expectations on method calls, please\nread the documentation, the [Expectation declarations](http://docs.mockery.io/en/latest/reference/expectations.html)\nsection. After that, you can also learn about the new `allows` and `expects` methods\nin the [Alternative shouldReceive syntax](http://docs.mockery.io/en/latest/reference/alternative_should_receive_syntax.html)\nsection.\n\nIt is worth mentioning that one way of setting up expectations is no better or worse\nthan the other. Under the hood, `allows` and `expects` are doing the same thing as\n`shouldReceive`, at times in \"less words\", and as such it comes to a personal preference\nof the programmer which way to use.\n\n## Test Spies \ud83d\udd75\ufe0f\n\nBy default, all test doubles created with the `Mockery::mock` method will only\naccept calls that they have been configured to `allow` or `expect` (or in other words,\ncalls that they `shouldReceive`). Sometimes we don't necessarily care about all of the\ncalls that are going to be made to an object. To facilitate this, we can tell Mockery\nto ignore any calls it has not been told to expect or allow. To do so, we can tell a\ntest double `shouldIgnoreMissing`, or we can create the double using the `Mocker::spy`\nshortcut.\n\n``` php\n// $double = Mockery::mock()->shouldIgnoreMissing();\n$double = Mockery::spy();\n\n$double->foo(); // null\n$double->bar(); // null\n```\n\nFurther to this, sometimes we want to have the object accept any call during the test execution\nand then verify the calls afterwards. For these purposes, we need our test\ndouble to act as a Spy. All mockery test doubles record the calls that are made\nto them for verification afterwards by default:\n\n``` php\n$double->baz(123);\n\n$double->shouldHaveReceived()->baz(123); // null\n$double->shouldHaveReceived()->baz(12345); // Uncaught Exception Mockery\\Exception\\InvalidCountException...\n```\n\nPlease refer to the [Spies](http://docs.mockery.io/en/latest/reference/spies.html) section\nof the documentation to learn more about the spies.\n\n## Utilities \ud83d\udd0c\n\n### Global Helpers\n\nMockery ships with a handful of global helper methods, you just need to ask\nMockery to declare them.\n\n``` php\nMockery::globalHelpers();\n\n$mock = mock(Some::class);\n$spy = spy(Some::class);\n\n$spy->shouldHaveReceived()\n    ->foo(anyArgs());\n```\n\nAll of the global helpers are wrapped in a `!function_exists` call to avoid\nconflicts. So if you already have a global function called `spy`, Mockery will\nsilently skip the declaring its own `spy` function.\n\n### Testing Traits\n\nAs Mockery ships with code generation capabilities, it was trivial to add\nfunctionality allowing users to create objects on the fly that use particular\ntraits. Any abstract methods defined by the trait will be created and can have\nexpectations or stubs configured like normal Test Doubles.\n\n``` php\ntrait Foo {\n    function foo() {\n        return $this->doFoo();\n    }\n\n    abstract function doFoo();\n}\n\n$double = Mockery::mock(Foo::class);\n$double->allows()->doFoo()->andReturns(123);\n$double->foo(); // int(123)\n```\n\n## Versioning\n\nThe Mockery team attempts to adhere to [Semantic Versioning](http://semver.org),\nhowever, some of Mockery's internals are considered private and will be open to\nchange at any time. Just because a class isn't final, or a method isn't marked\nprivate, does not mean it constitutes part of the API we guarantee under the\nversioning scheme.\n\n### Alternative Runtimes\n\nMockery 1.3 was the last version to support HHVM 3 and PHP 5. There is no support for HHVM 4+.\n\n## A new home for Mockery\n\n\u26a0\ufe0f\ufe0f Update your remotes! Mockery has transferred to a new location. While it was once\nat `padraic/mockery`, it is now at `mockery/mockery`. While your\nexisting repositories will redirect transparently for any operations, take some\ntime to transition to the new URL.\n```sh\n$ git remote set-url upstream https://github.com/mockery/mockery.git\n```\nReplace `upstream` with the name of the remote you use locally; `upstream` is commonly\nused but you may be using something else. Run `git remote -v` to see what you're actually\nusing.\n",
        "releases": [
            {
                "name": "1.6.12",
                "date": "2024-05-16T03:30:48Z"
            },
            {
                "name": "1.6.11",
                "date": "2024-03-21T18:39:25Z"
            },
            {
                "name": "1.6.10",
                "date": "2024-03-19T16:32:09Z"
            },
            {
                "name": "1.6.9",
                "date": "2024-03-12T14:15:48Z"
            },
            {
                "name": "1.6.8",
                "date": "2024-03-12T12:45:35Z"
            },
            {
                "name": "1.6.7",
                "date": "2023-12-10T02:30:28Z"
            },
            {
                "name": "1.6.6",
                "date": "2023-08-09T00:07:51Z"
            },
            {
                "name": "1.6.5",
                "date": "2023-08-06T01:25:34Z"
            },
            {
                "name": "1.6.4",
                "date": "2023-07-19T15:59:17Z"
            },
            {
                "name": "1.6.3",
                "date": "2023-07-18T18:00:45Z"
            },
            {
                "name": "1.6.2",
                "date": "2023-06-07T09:20:11Z"
            },
            {
                "name": "1.6.1",
                "date": "2023-06-05T14:02:24Z"
            },
            {
                "name": "1.5.1",
                "date": "2022-09-07T15:33:36Z"
            },
            {
                "name": "1.3.6",
                "date": "2022-09-07T15:33:16Z"
            },
            {
                "name": "1.5.0",
                "date": "2022-01-20T13:20:21Z"
            },
            {
                "name": "1.4.4",
                "date": "2021-09-13T15:30:35Z"
            },
            {
                "name": "1.3.5",
                "date": "2021-09-13T15:34:15Z"
            },
            {
                "name": "1.4.3",
                "date": "2021-02-24T09:53:09Z"
            },
            {
                "name": "1.3.4",
                "date": "2021-02-24T09:52:47Z"
            },
            {
                "name": "1.4.2",
                "date": "2020-08-11T18:11:28Z"
            },
            {
                "name": "1.3.3",
                "date": "2020-08-11T18:12:19Z"
            },
            {
                "name": "1.4.1",
                "date": "2020-07-09T08:32:45Z"
            },
            {
                "name": "1.3.2",
                "date": "2020-07-09T08:24:49Z"
            },
            {
                "name": "1.4.0",
                "date": "2020-05-19T14:31:05Z"
            },
            {
                "name": "",
                "date": "2019-12-26T09:50:45Z"
            },
            {
                "name": "",
                "date": "2019-11-24T07:56:48Z"
            },
            {
                "name": "1.2.4",
                "date": "2019-09-30T08:31:34Z"
            },
            {
                "name": "1.2.3",
                "date": "2019-08-07T15:01:43Z"
            },
            {
                "name": "1.2.2",
                "date": "2019-02-13T09:38:25Z"
            },
            {
                "name": "0.9.11",
                "date": "2019-02-12T16:08:02Z"
            },
            {
                "name": "1.2.1",
                "date": "2019-02-08T14:44:49Z"
            },
            {
                "name": "0.9.10",
                "date": "2018-11-16T16:14:21Z"
            },
            {
                "name": "1.2.0",
                "date": "2018-10-02T21:53:30Z"
            },
            {
                "name": "Release 1.1.0",
                "date": "2018-05-08T08:56:05Z"
            },
            {
                "name": "1.0",
                "date": "2017-10-06T16:21:48Z"
            },
            {
                "name": "0.9.9",
                "date": "2017-02-28T12:53:24Z"
            },
            {
                "name": "0.9.8",
                "date": "2017-02-10T10:16:00Z"
            },
            {
                "name": "1.0.0-alpha1",
                "date": "2017-02-06T11:24:41Z"
            },
            {
                "name": "0.9.7",
                "date": "2016-12-23T09:20:01Z"
            },
            {
                "name": "0.9.6",
                "date": "2016-11-17T11:14:28Z"
            },
            {
                "name": "0.9.5",
                "date": "2016-05-22T21:54:09Z"
            },
            {
                "name": "0.9.4 Release",
                "date": "2015-04-02T19:54:46Z"
            }
        ]
    }
}