{
    "https://api.github.com/repos/FiloSottile/age": {
        "forks": 529,
        "watchers": 17956,
        "stars": 17956,
        "languages": {
            "Go": 168635
        },
        "commits": [
            "2024-12-18T15:01:18Z",
            "2024-12-18T14:55:57Z",
            "2024-06-28T15:11:09Z",
            "2024-06-19T08:40:55Z",
            "2024-06-16T13:58:53Z",
            "2024-06-16T12:59:53Z",
            "2024-06-16T12:51:17Z",
            "2024-06-16T12:49:24Z",
            "2024-06-16T12:40:13Z",
            "2024-06-16T11:50:52Z",
            "2024-06-16T10:03:57Z",
            "2024-06-16T09:47:25Z",
            "2024-06-16T09:45:32Z",
            "2024-06-16T09:41:15Z",
            "2024-06-16T09:39:21Z",
            "2024-06-16T09:36:03Z",
            "2024-06-16T09:06:58Z",
            "2024-06-16T09:03:03Z",
            "2024-01-10T11:40:17Z",
            "2023-09-20T12:41:00Z",
            "2023-08-07T22:44:57Z",
            "2023-08-06T17:28:49Z",
            "2023-08-06T17:03:27Z",
            "2023-08-06T16:36:06Z",
            "2023-08-06T16:29:16Z",
            "2023-08-05T17:19:26Z",
            "2023-08-05T12:55:16Z",
            "2023-05-23T15:36:32Z",
            "2023-05-23T14:20:29Z",
            "2023-05-23T14:19:41Z"
        ],
        "creation_date": "2019-05-18T20:44:54Z",
        "contributors": 30,
        "topics": [
            "age-encryption",
            "built-at-rc"
        ],
        "subscribers": 148,
        "readme": "<p align=\"center\">\n    <picture>\n        <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://github.com/FiloSottile/age/blob/main/logo/logo_white.svg\">\n        <source media=\"(prefers-color-scheme: light)\" srcset=\"https://github.com/FiloSottile/age/blob/main/logo/logo.svg\">\n        <img alt=\"The age logo, a wireframe of St. Peters dome in Rome, with the text: age, file encryption\" width=\"600\" src=\"https://github.com/FiloSottile/age/blob/main/logo/logo.svg\">\n    </picture>\n</p>\n\n[![Go Reference](https://pkg.go.dev/badge/filippo.io/age.svg)](https://pkg.go.dev/filippo.io/age)\n[![man page](<https://img.shields.io/badge/age(1)-man%20page-lightgrey>)](https://filippo.io/age/age.1)\n[![C2SP specification](https://img.shields.io/badge/%C2%A7%23-specification-blueviolet)](https://age-encryption.org/v1)\n\nage is a simple, modern and secure file encryption tool, format, and Go library.\n\nIt features small explicit keys, no config options, and UNIX-style composability.\n\n```\n$ age-keygen -o key.txt\nPublic key: age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p\n$ tar cvz ~/data | age -r age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p > data.tar.gz.age\n$ age --decrypt -i key.txt data.tar.gz.age > data.tar.gz\n```\n\n\ud83d\udcdc The format specification is at [age-encryption.org/v1](https://age-encryption.org/v1). age was designed by [@Benjojo12](https://twitter.com/Benjojo12) and [@FiloSottile](https://twitter.com/FiloSottile).\n\n\ud83d\udcec Follow the maintenance of this project by subscribing to [Maintainer Dispatches](https://filippo.io/newsletter)!\n\n\ud83e\udd80 An alternative interoperable Rust implementation is available at [github.com/str4d/rage](https://github.com/str4d/rage).\n\n\ud83d\udd11 Hardware PIV tokens such as YubiKeys are supported through the [age-plugin-yubikey](https://github.com/str4d/age-plugin-yubikey) plugin.\n\n\u2728 For more plugins, implementations, tools, and integrations, check out the [awesome age](https://github.com/FiloSottile/awesome-age) list.\n\n\ud83d\udcac The author pronounces it `[a\u0261e\u031e]` [with a hard *g*](https://translate.google.com/?sl=it&text=aghe), like GIF, and is always spelled lowercase.\n\n## Installation\n\n<table>\n    <tr>\n        <td>Homebrew (macOS or Linux)</td>\n        <td>\n            <code>brew install age</code>\n        </td>\n    </tr>\n    <tr>\n        <td>MacPorts</td>\n        <td>\n            <code>port install age</code>\n        </td>\n    </tr>\n    <tr>\n        <td>Alpine Linux v3.15+</td>\n        <td>\n            <code>apk add age</code>\n        </td>\n    </tr>\n    <tr>\n        <td>Arch Linux</td>\n        <td>\n            <code>pacman -S age</code>\n        </td>\n    </tr>\n    <tr>\n        <td>Debian 12+ (Bookworm)</td>\n        <td>\n            <code>apt install age</code>\n        </td>\n    </tr>\n    <tr>\n        <td>Debian 11 (Bullseye)</td>\n        <td>\n            <code>apt install age/bullseye-backports</code>\n            (<a href=\"https://backports.debian.org/Instructions/#index2h2\">enable backports</a> for age v1.0.0+)\n        </td>\n    </tr>\n    <tr>\n        <td>Fedora 33+</td>\n        <td>\n            <code>dnf install age</code>\n        </td>\n    </tr>\n    <tr>\n        <td>Gentoo Linux</td>\n        <td>\n            <code>emerge app-crypt/age</code>\n        </td>\n    </tr>\n    <tr>\n        <td>NixOS / Nix</td>\n        <td>\n            <code>nix-env -i age</code>\n        </td>\n    </tr>\n    <tr>\n        <td>openSUSE Tumbleweed</td>\n        <td>\n            <code>zypper install age</code>\n        </td>\n    </tr>\n    <tr>\n        <td>Ubuntu 22.04+</td>\n        <td>\n            <code>apt install age</code>\n        </td>\n    </tr>\n    <tr>\n        <td>Void Linux</td>\n        <td>\n            <code>xbps-install age</code>\n        </td>\n    </tr>\n    <tr>\n        <td>FreeBSD</td>\n        <td>\n            <code>pkg install age</code> (security/age)\n        </td>\n    </tr>\n    <tr>\n        <td>OpenBSD 6.7+</td>\n        <td>\n            <code>pkg_add age</code> (security/age)\n        </td>\n    </tr>\n    <tr>\n        <td>Chocolatey (Windows)</td>\n        <td>\n            <code>choco install age.portable</code>\n        </td>\n    </tr>\n    <tr>\n        <td>Scoop (Windows)</td>\n        <td>\n            <code>scoop bucket add extras && scoop install age</code>\n        </td>\n    </tr>\n    <tr>\n        <td>pkgx</td>\n        <td>\n            <code>pkgx install age</code>\n        </td>\n    </tr>\n</table>\n\nOn Windows, Linux, macOS, and FreeBSD you can use the pre-built binaries.\n\n```\nhttps://dl.filippo.io/age/latest?for=linux/amd64\nhttps://dl.filippo.io/age/v1.1.1?for=darwin/arm64\n...\n```\n\nIf your system has [a supported version of Go](https://go.dev/dl/), you can build from source.\n\n```\ngo install filippo.io/age/cmd/...@latest\n```\n\nHelp from new packagers is very welcome.\n\n### Verifying the release signatures\n\nIf you download the pre-built binaries, you can check their\n[Sigsum](https://www.sigsum.org) proofs, which are like signatures with extra\ntransparency: you can cryptographically verify that every proof is logged in a\npublic append-only log, so you can hold the age project accountable for every\nbinary release we ever produced. This is similar to what the [Go Checksum\nDatabase](https://go.dev/blog/module-mirror-launch) provides.\n\n```\ncat << EOF > age-sigsum-key.pub\nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIM1WpnEswJLPzvXJDiswowy48U+G+G1kmgwUE2eaRHZG\nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAz2WM5CyPLqiNjk7CLl4roDXwKhQ0QExXLebukZEZFS\nEOF\ncat << EOF > sigsum-trust-policy.txt\nlog 154f49976b59ff09a123675f58cb3e346e0455753c3c3b15d465dcb4f6512b0b https://poc.sigsum.org/jellyfish\nwitness poc.sigsum.org/nisse 1c25f8a44c635457e2e391d1efbca7d4c2951a0aef06225a881e46b98962ac6c\nwitness rgdd.se/poc-witness  28c92a5a3a054d317c86fc2eeb6a7ab2054d6217100d0be67ded5b74323c5806\ngroup  demo-quorum-rule all poc.sigsum.org/nisse rgdd.se/poc-witness\nquorum demo-quorum-rule\nEOF\n\ncurl -JLO \"https://dl.filippo.io/age/v1.2.0?for=darwin/arm64\"\ncurl -JLO \"https://dl.filippo.io/age/v1.2.0?for=darwin/arm64&proof\"\n\ngo install sigsum.org/sigsum-go/cmd/sigsum-verify@v0.8.0\nsigsum-verify -k age-sigsum-key.pub -p sigsum-trust-policy.txt \\\n    age-v1.2.0-darwin-arm64.tar.gz.proof < age-v1.2.0-darwin-arm64.tar.gz\n```\n\nYou can learn more about what's happening above in the [Sigsum\ndocs](https://www.sigsum.org/getting-started/).\n\n## Usage\n\nFor the full documentation, read [the age(1) man page](https://filippo.io/age/age.1).\n\n```\nUsage:\n    age [--encrypt] (-r RECIPIENT | -R PATH)... [--armor] [-o OUTPUT] [INPUT]\n    age [--encrypt] --passphrase [--armor] [-o OUTPUT] [INPUT]\n    age --decrypt [-i PATH]... [-o OUTPUT] [INPUT]\n\nOptions:\n    -e, --encrypt               Encrypt the input to the output. Default if omitted.\n    -d, --decrypt               Decrypt the input to the output.\n    -o, --output OUTPUT         Write the result to the file at path OUTPUT.\n    -a, --armor                 Encrypt to a PEM encoded format.\n    -p, --passphrase            Encrypt with a passphrase.\n    -r, --recipient RECIPIENT   Encrypt to the specified RECIPIENT. Can be repeated.\n    -R, --recipients-file PATH  Encrypt to recipients listed at PATH. Can be repeated.\n    -i, --identity PATH         Use the identity file at PATH. Can be repeated.\n\nINPUT defaults to standard input, and OUTPUT defaults to standard output.\nIf OUTPUT exists, it will be overwritten.\n\nRECIPIENT can be an age public key generated by age-keygen (\"age1...\")\nor an SSH public key (\"ssh-ed25519 AAAA...\", \"ssh-rsa AAAA...\").\n\nRecipient files contain one or more recipients, one per line. Empty lines\nand lines starting with \"#\" are ignored as comments. \"-\" may be used to\nread recipients from standard input.\n\nIdentity files contain one or more secret keys (\"AGE-SECRET-KEY-1...\"),\none per line, or an SSH key. Empty lines and lines starting with \"#\" are\nignored as comments. Passphrase encrypted age files can be used as\nidentity files. Multiple key files can be provided, and any unused ones\nwill be ignored. \"-\" may be used to read identities from standard input.\n\nWhen --encrypt is specified explicitly, -i can also be used to encrypt to an\nidentity file symmetrically, instead or in addition to normal recipients.\n```\n\n### Multiple recipients\n\nFiles can be encrypted to multiple recipients by repeating `-r/--recipient`. Every recipient will be able to decrypt the file.\n\n```\n$ age -o example.jpg.age -r age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p \\\n    -r age1lggyhqrw2nlhcxprm67z43rta597azn8gknawjehu9d9dl0jq3yqqvfafg example.jpg\n```\n\n#### Recipient files\n\nMultiple recipients can also be listed one per line in one or more files passed with the `-R/--recipients-file` flag.\n\n```\n$ cat recipients.txt\n# Alice\nage1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p\n# Bob\nage1lggyhqrw2nlhcxprm67z43rta597azn8gknawjehu9d9dl0jq3yqqvfafg\n$ age -R recipients.txt example.jpg > example.jpg.age\n```\n\nIf the argument to `-R` (or `-i`) is `-`, the file is read from standard input.\n\n### Passphrases\n\nFiles can be encrypted with a passphrase by using `-p/--passphrase`. By default age will automatically generate a secure passphrase. Passphrase protected files are automatically detected at decrypt time.\n\n```\n$ age -p secrets.txt > secrets.txt.age\nEnter passphrase (leave empty to autogenerate a secure one):\nUsing the autogenerated passphrase \"release-response-step-brand-wrap-ankle-pair-unusual-sword-train\".\n$ age -d secrets.txt.age > secrets.txt\nEnter passphrase:\n```\n\n### Passphrase-protected key files\n\nIf an identity file passed to `-i` is a passphrase encrypted age file, it will be automatically decrypted.\n\n```\n$ age-keygen | age -p > key.age\nPublic key: age1yhm4gctwfmrpz87tdslm550wrx6m79y9f2hdzt0lndjnehwj0ukqrjpyx5\nEnter passphrase (leave empty to autogenerate a secure one):\nUsing the autogenerated passphrase \"hip-roast-boring-snake-mention-east-wasp-honey-input-actress\".\n$ age -r age1yhm4gctwfmrpz87tdslm550wrx6m79y9f2hdzt0lndjnehwj0ukqrjpyx5 secrets.txt > secrets.txt.age\n$ age -d -i key.age secrets.txt.age > secrets.txt\nEnter passphrase for identity file \"key.age\":\n```\n\nPassphrase-protected identity files are not necessary for most use cases, where access to the encrypted identity file implies access to the whole system. However, they can be useful if the identity file is stored remotely.\n\n### SSH keys\n\nAs a convenience feature, age also supports encrypting to `ssh-rsa` and `ssh-ed25519` SSH public keys, and decrypting with the respective private key file. (`ssh-agent` is not supported.)\n\n```\n$ age -R ~/.ssh/id_ed25519.pub example.jpg > example.jpg.age\n$ age -d -i ~/.ssh/id_ed25519 example.jpg.age > example.jpg\n```\n\nNote that SSH key support employs more complex cryptography, and embeds a public key tag in the encrypted file, making it possible to track files that are encrypted to a specific public key.\n\n#### Encrypting to a GitHub user\n\nCombining SSH key support and `-R`, you can easily encrypt a file to the SSH keys listed on a GitHub profile.\n\n```\n$ curl https://github.com/benjojo.keys | age -R - example.jpg > example.jpg.age\n```\n\nKeep in mind that people might not protect SSH keys long-term, since they are revokable when used only for authentication, and that SSH keys held on YubiKeys can't be used to decrypt files.\n",
        "releases": [
            {
                "name": "age v1.2.1: security fix",
                "date": "2024-12-18T15:26:42Z"
            },
            {
                "name": "age v1.2.0",
                "date": "2024-06-16T14:11:14Z"
            },
            {
                "name": "age v1.1.1",
                "date": "2022-12-26T20:39:07Z"
            },
            {
                "name": "age v1.1.0: plugin and YubiKeys support",
                "date": "2022-12-26T14:57:16Z"
            },
            {
                "name": "age v1.1.0-rc.1: plugin and YubiKeys support",
                "date": "2022-06-11T16:00:56Z"
            },
            {
                "name": "age v1.0.0 \ud83c\udfc1",
                "date": "2021-09-06T16:48:59Z"
            },
            {
                "name": "Never two without three",
                "date": "2021-06-15T12:19:13Z"
            },
            {
                "name": "The last (?) v1.0.0 release candidate!",
                "date": "2021-05-26T11:49:33Z"
            },
            {
                "name": "v1.0.0 release candidate!",
                "date": "2021-03-10T12:19:40Z"
            },
            {
                "name": "Breaking changes to the Identity and Recipient interfaces",
                "date": "2021-02-08T19:09:57Z"
            },
            {
                "name": "Recipient files, and a bag of goodies",
                "date": "2021-01-16T15:52:22Z"
            },
            {
                "name": "ParseIdentities and a security mitigation",
                "date": "2020-09-20T11:00:36Z"
            },
            {
                "name": "filippo.io/age/age? I meant filippo.io/age!",
                "date": "2020-06-28T02:08:19Z"
            },
            {
                "name": "Now with 100% more public APIs",
                "date": "2020-06-28T01:15:36Z"
            },
            {
                "name": "Straight from the floor of #36c3",
                "date": "2019-12-27T22:55:40Z"
            },
            {
                "name": "Beta 1: all the important bits are there!",
                "date": "2019-12-27T16:33:36Z"
            }
        ]
    }
}