{
    "https://api.github.com/repos/acdlite/recompose": {
        "forks": 1249,
        "watchers": 14747,
        "stars": 14747,
        "languages": {
            "JavaScript": 141348,
            "HTML": 1567
        },
        "commits": [
            "2018-12-03T21:39:57Z",
            "2018-11-27T17:11:25Z",
            "2018-10-25T18:13:19Z",
            "2018-10-18T00:16:05Z",
            "2018-10-06T01:30:31Z",
            "2018-10-06T01:14:40Z",
            "2018-10-04T11:03:47Z",
            "2018-10-01T12:07:17Z",
            "2018-08-30T09:54:33Z",
            "2018-08-30T09:52:47Z",
            "2018-08-28T09:06:06Z",
            "2018-08-28T08:31:21Z",
            "2018-08-06T16:18:53Z",
            "2018-08-06T15:53:54Z",
            "2018-08-06T13:11:41Z",
            "2018-08-02T08:00:41Z",
            "2018-07-31T06:56:31Z",
            "2018-07-30T12:15:37Z",
            "2018-07-30T10:48:06Z",
            "2018-07-30T10:11:21Z",
            "2018-07-30T10:01:32Z",
            "2018-07-27T06:52:29Z",
            "2018-07-23T12:30:34Z",
            "2018-07-04T07:56:15Z",
            "2018-06-25T12:12:27Z",
            "2018-06-22T03:03:23Z",
            "2018-06-21T15:25:00Z",
            "2018-05-24T13:40:36Z",
            "2018-05-24T13:37:29Z",
            "2018-05-24T12:57:24Z"
        ],
        "creation_date": "2015-10-07T05:54:51Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 172,
        "readme": "## A Note from the Author (acdlite, Oct 25 2018):\n\nHi! I created Recompose about three years ago. About a year after that, I joined the React team. Today, we announced a proposal for [*Hooks*](https://reactjs.org/hooks). Hooks solves all the problems I attempted to address with Recompose three years ago, and more on top of that. I will be discontinuing active maintenance of this package (excluding perhaps bugfixes or patches for compatibility with future React releases), and recommending that people use Hooks instead. **Your existing code with Recompose will still work**, just don't expect any new features. Thank you so, so much to [@wuct](https://github.com/wuct) and [@istarkov](https://github.com/istarkov) for their heroic work maintaining Recompose over the last few years.\n\nRead more discussion about this decision [here](https://github.com/acdlite/recompose/issues/756#issuecomment-438674573).\n\n***\n\nRecompose\n-----\n\n[![build status](https://img.shields.io/travis/acdlite/recompose/master.svg?style=flat-square)](https://travis-ci.org/acdlite/recompose)\n[![coverage](https://img.shields.io/codecov/c/github/acdlite/recompose.svg?style=flat-square)](https://codecov.io/github/acdlite/recompose)\n[![code climate](https://img.shields.io/codeclimate/github/acdlite/recompose.svg?style=flat-square)](https://codeclimate.com/github/acdlite/recompose)\n[![npm version](https://img.shields.io/npm/v/recompose.svg?style=flat-square)](https://www.npmjs.com/package/recompose)\n[![npm downloads](https://img.shields.io/npm/dm/recompose.svg?style=flat-square)](https://www.npmjs.com/package/recompose)\n\nRecompose is a React utility belt for function components and higher-order components. Think of it like lodash for React.\n\n[**Full API documentation**](docs/API.md) - Learn about each helper\n\n[**Recompose Base Fiddle**](https://jsfiddle.net/evenchange4/p3vsmrvo/1599/) - Easy way to dive in\n\n```\nnpm install recompose --save\n```\n\n**\ud83d\udcfa Watch Andrew's [talk on Recompose at React Europe](https://www.youtube.com/watch?v=zD_judE-bXk).**\n*(Note: Performance optimizations he speaks about have been removed, more info [here](https://github.com/acdlite/recompose/releases/tag/v0.26.0))*\n\n### Related modules\n\n[**recompose-relay**](src/packages/recompose-relay) \u2014 Recompose helpers for Relay\n\n## You can use Recompose to...\n\n### ...lift state into functional wrappers\n\nHelpers like `withState()` and `withReducer()` provide a nicer way to express state updates:\n\n```js\nconst enhance = withState('counter', 'setCounter', 0)\nconst Counter = enhance(({ counter, setCounter }) =>\n  <div>\n    Count: {counter}\n    <button onClick={() => setCounter(n => n + 1)}>Increment</button>\n    <button onClick={() => setCounter(n => n - 1)}>Decrement</button>\n  </div>\n)\n```\n\nOr with a Redux-style reducer:\n\n```js\nconst counterReducer = (count, action) => {\n  switch (action.type) {\n  case INCREMENT:\n    return count + 1\n  case DECREMENT:\n    return count - 1\n  default:\n    return count\n  }\n}\n\nconst enhance = withReducer('counter', 'dispatch', counterReducer, 0)\nconst Counter = enhance(({ counter, dispatch }) =>\n  <div>\n    Count: {counter}\n    <button onClick={() => dispatch({ type: INCREMENT })}>Increment</button>\n    <button onClick={() => dispatch({ type: DECREMENT })}>Decrement</button>\n  </div>\n)\n```\n\n### ...perform the most common React patterns\n\nHelpers like `componentFromProp()` and `withContext()` encapsulate common React patterns into a simple functional interface:\n\n```js\nconst enhance = defaultProps({ component: 'button' })\nconst Button = enhance(componentFromProp('component'))\n\n<Button /> // renders <button>\n<Button component={Link} /> // renders <Link />\n```\n\n```js\nconst provide = store => withContext(\n  { store: PropTypes.object },\n  () => ({ store })\n)\n\n// Apply to base component\n// Descendants of App have access to context.store\nconst AppWithContext = provide(store)(App)\n```\n\n### ...optimize rendering performance\n\nNo need to write a new class just to implement `shouldComponentUpdate()`. Recompose helpers like `pure()` and `onlyUpdateForKeys()` do this for you:\n\n```js\n// A component that is expensive to render\nconst ExpensiveComponent = ({ propA, propB }) => {...}\n\n// Optimized version of same component, using shallow comparison of props\n// Same effect as extending React.PureComponent\nconst OptimizedComponent = pure(ExpensiveComponent)\n\n// Even more optimized: only updates if specific prop keys have changed\nconst HyperOptimizedComponent = onlyUpdateForKeys(['propA', 'propB'])(ExpensiveComponent)\n```\n\n### ...interoperate with other libraries\n\nRecompose helpers integrate really nicely with external libraries like Relay, Redux, and RxJS\n\n```js\nconst enhance = compose(\n  // This is a Recompose-friendly version of Relay.createContainer(), provided by recompose-relay\n  createContainer({\n    fragments: {\n      post: () => Relay.QL`\n        fragment on Post {\n          title,\n          content\n        }\n      `\n    }\n  }),\n  flattenProp('post')\n)\n\nconst Post = enhance(({ title, content }) =>\n  <article>\n    <h1>{title}</h1>\n    <div>{content}</div>\n  </article>\n)\n```\n\n### ...build your own libraries\n\nMany React libraries end up implementing the same utilities over and over again, like `shallowEqual()` and `getDisplayName()`. Recompose provides these utilities for you.\n\n```js\n// Any Recompose module can be imported individually\nimport getDisplayName from 'recompose/getDisplayName'\nConnectedComponent.displayName = `connect(${getDisplayName(BaseComponent)})`\n\n// Or, even better:\nimport wrapDisplayName from 'recompose/wrapDisplayName'\nConnectedComponent.displayName = wrapDisplayName(BaseComponent, 'connect')\n\nimport toClass from 'recompose/toClass'\n// Converts a function component to a class component, e.g. so it can be given\n// a ref. Returns class components as is.\nconst ClassComponent = toClass(FunctionComponent)\n```\n\n### ...and more\n\n## API docs\n\n[Read them here](docs/API.md)\n\n## Flow support\n\n[Read the docs](docs/flow.md)\n\n## Translation\n\n[Traditional Chinese](https://github.com/neighborhood999/recompose)\n\n## Why\n\nForget ES6 classes vs. `createClass()`.\n\nAn idiomatic React application consists mostly of function components.\n\n```js\nconst Greeting = props =>\n  <p>\n    Hello, {props.name}!\n  </p>\n```\n\nFunction components have several key advantages:\n\n- They help prevent abuse of the `setState()` API, favoring props instead.\n- They encourage the [\"smart\" vs. \"dumb\" component pattern](https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0).\n- They encourage code that is more reusable and modular.\n- They discourage giant, complicated components that do too many things.\n- They allow React to make performance optimizations by avoiding unnecessary checks and memory allocations.\n\n(Note that although Recompose encourages the use of function components whenever possible, it works with normal React components as well.)\n\n### Higher-order components made easy\n\nMost of the time when we talk about composition in React, we're talking about composition of components. For example, a `<Blog>` component may be composed of many `<Post>` components, which are composed of many `<Comment>` components.\n\nRecompose focuses on another unit of composition: **higher-order components** (HoCs). HoCs are functions that accept a base component and return a new component with additional functionality. They can be used to abstract common tasks into reusable pieces.\n\nRecompose provides a toolkit of helper functions for creating higher-order components.\n\n## [Should I use this? Performance and other concerns](docs/performance.md)\n\n## Usage\n\nAll functions are available on the top-level export.\n\n```js\nimport { compose, mapProps, withState /* ... */ } from 'recompose'\n```\n\n**Note:** `react` is a _peer dependency_ of Recompose.  If you're using `preact`, add this to your `webpack.config.js`:\n\n```js\nresolve: {\n  alias: {\n    react: \"preact\"\n  }\n}\n```\n\n### Composition\n\nRecompose helpers are designed to be composable:\n\n```js\nconst BaseComponent = props => {...}\n\n// This will work, but it's tedious\nlet EnhancedComponent = pure(BaseComponent)\nEnhancedComponent = mapProps(/*...args*/)(EnhancedComponent)\nEnhancedComponent = withState(/*...args*/)(EnhancedComponent)\n\n// Do this instead\n// Note that the order has reversed \u2014 props flow from top to bottom\nconst enhance = compose(\n  withState(/*...args*/),\n  mapProps(/*...args*/),\n  pure\n)\nconst EnhancedComponent = enhance(BaseComponent)\n```\n\nTechnically, this also means you can use them as decorators (if that's your thing):\n\n```js\n@withState(/*...args*/)\n@mapProps(/*...args*/)\n@pure\nclass Component extends React.Component {...}\n```\n\n### Optimizing bundle size\n\nSince `0.23.1` version recompose got support of ES2015 modules.\nTo reduce size all you need is to use bundler with tree shaking support\nlike [webpack 2](https://github.com/webpack/webpack) or [Rollup](https://github.com/rollup/rollup).\n\n#### Using babel-plugin-lodash\n\n[babel-plugin-lodash](https://github.com/lodash/babel-plugin-lodash) is not only limited to [lodash](https://github.com/lodash/lodash). It can be used with `recompose` as well.\n\nThis can be done by updating `lodash` config in `.babelrc`.\n\n```diff\n {\n-  \"plugins\": [\"lodash\"]\n+  \"plugins\": [\n+    [\"lodash\", { \"id\": [\"lodash\", \"recompose\"] }]\n+  ]\n }\n```\n\nAfter that, you can do imports like below without actually including the entire library content.\n\n```js\nimport { compose, mapProps, withState } from 'recompose'\n```\n\n### Debugging\n\nIt might be hard to trace how does `props` change between HOCs. A useful tip is you can create a debug HOC to print out the props it gets without modifying the base component. For example:\n\nmake\n\n```js\nconst debug = withProps(console.log)\n```\n\nthen use it between HOCs\n\n```js\nconst enhance = compose(\n  withState(/*...args*/),\n  debug, // print out the props here\n  mapProps(/*...args*/),\n  pure\n)\n```\n\n\n## Who uses Recompose\nIf your company or project uses Recompose, feel free to add it to [the official list of users](https://github.com/acdlite/recompose/wiki/Sites-Using-Recompose) by [editing](https://github.com/acdlite/recompose/wiki/Sites-Using-Recompose/_edit) the wiki page.\n\n## Recipes for Inspiration\nWe have a community-driven Recipes page. It's a place to share and see recompose patterns for inspiration. Please add to it! [Recipes](https://github.com/acdlite/recompose/wiki/Recipes).\n\n## Feedback wanted\n\nProject is still in the early stages. Please file an issue or submit a PR if you have suggestions! Or ping me (Andrew Clark) on [Twitter](https://twitter.com/acdlite).\n\n\n## Getting Help\n\n**For support or usage questions like \u201chow do I do X with Recompose\u201d and \u201cmy code doesn't work\u201d, please search and ask on [StackOverflow with a Recompose tag](http://stackoverflow.com/questions/tagged/recompose?sort=votes&pageSize=50) first.**\n\nWe ask you to do this because StackOverflow has a much better job at keeping popular questions visible. Unfortunately good answers get lost and outdated on GitHub.\n\nSome questions take a long time to get an answer. **If your question gets closed or you don't get a reply on StackOverflow for longer than a few days,** we encourage you to post an issue linking to your question. We will close your issue but this will give people watching the repo an opportunity to see your question and reply to it on StackOverflow if they know the answer.\n\nPlease be considerate when doing this as this is not the primary purpose of the issue tracker.\n\n### Help Us Help You\n\nOn both websites, it is a good idea to structure your code and question in a way that is easy to read to entice people to answer it. For example, we encourage you to use syntax highlighting, indentation, and split text in paragraphs.\n\nPlease keep in mind that people spend their free time trying to help you. You can make it easier for them if you provide versions of the relevant libraries and a runnable small project reproducing your issue. You can put your code on [JSBin](http://jsbin.com) or, for bigger projects, on GitHub. Make sure all the necessary dependencies are declared in `package.json` so anyone can run `npm install && npm start` and reproduce your issue.\n",
        "releases": [
            {
                "name": "withStateHandler behaviour change",
                "date": "2018-08-30T10:01:31Z"
            },
            {
                "name": "babel 7",
                "date": "2018-08-28T09:07:14Z"
            },
            {
                "name": "Babel magic",
                "date": "2018-08-23T15:56:12Z"
            },
            {
                "name": "babel 1",
                "date": "2018-08-23T15:55:29Z"
            },
            {
                "name": "toRenderProps - fromRenderProps",
                "date": "2018-08-23T15:53:49Z"
            },
            {
                "name": "Render props ",
                "date": "2018-05-20T18:50:34Z"
            },
            {
                "name": "React 16.3 Lifecycles, flow types",
                "date": "2018-04-19T08:55:03Z"
            },
            {
                "name": "Remove Eager optimizations",
                "date": "2017-10-06T15:12:38Z"
            },
            {
                "name": "React 16.0.0",
                "date": "2017-09-26T17:02:45Z"
            },
            {
                "name": "Production only optimisations",
                "date": "2017-08-16T21:37:40Z"
            },
            {
                "name": "withStateHandlers + flow support",
                "date": "2017-07-12T14:19:44Z"
            },
            {
                "name": "Lifecycle fixes",
                "date": "2017-06-07T18:08:38Z"
            },
            {
                "name": "fix pure enhancer for production build",
                "date": "2017-05-12T19:26:47Z"
            },
            {
                "name": "Tree shaking and non global stream configs",
                "date": "2017-05-11T18:25:36Z"
            },
            {
                "name": "ES2015 modules support",
                "date": "2017-04-10T18:32:45Z"
            },
            {
                "name": "Rollup umd",
                "date": "2017-04-08T12:32:04Z"
            },
            {
                "name": "Observable enhancers",
                "date": "2017-01-28T19:00:14Z"
            },
            {
                "name": "withHandlers additions",
                "date": "2016-12-24T11:17:09Z"
            },
            {
                "name": "React 0.14 compatibility",
                "date": "2016-12-20T18:36:16Z"
            },
            {
                "name": "Fixes",
                "date": "2016-12-12T20:43:58Z"
            },
            {
                "name": "Observable utilities",
                "date": "2016-06-16T05:54:04Z"
            },
            {
                "name": "Return of lifecycle()",
                "date": "2016-05-16T23:38:47Z"
            },
            {
                "name": "rx-recompose: Bugfix for multiple observers",
                "date": "2016-05-15T07:12:53Z"
            },
            {
                "name": "",
                "date": "2016-05-10T21:54:07Z"
            },
            {
                "name": "rx-recompose: Improved API",
                "date": "2016-04-27T23:51:27Z"
            },
            {
                "name": "Remove currying and add withHandlers helper",
                "date": "2016-04-11T18:07:35Z"
            },
            {
                "name": "React 15 compatibility",
                "date": "2016-04-08T17:36:52Z"
            },
            {
                "name": "Upgrade to lodash 4",
                "date": "2016-02-04T19:53:48Z"
            },
            {
                "name": "",
                "date": "2015-12-18T02:50:01Z"
            },
            {
                "name": "",
                "date": "2015-11-18T20:06:15Z"
            },
            {
                "name": "",
                "date": "2015-11-17T20:16:49Z"
            },
            {
                "name": "Fix production build",
                "date": "2015-11-13T08:05:39Z"
            },
            {
                "name": "Helpful developer warnings",
                "date": "2015-11-08T20:33:40Z"
            },
            {
                "name": "",
                "date": "2015-11-05T04:40:11Z"
            },
            {
                "name": "onlyUpdateForPropTypes()",
                "date": "2015-11-03T00:29:27Z"
            },
            {
                "name": "toClass()",
                "date": "2015-11-02T19:18:28Z"
            },
            {
                "name": "",
                "date": "2015-10-26T22:04:57Z"
            },
            {
                "name": "",
                "date": "2015-10-26T21:59:52Z"
            },
            {
                "name": "",
                "date": "2015-10-26T21:58:26Z"
            },
            {
                "name": "Housekeeping",
                "date": "2015-10-21T20:31:41Z"
            },
            {
                "name": "withState() callback",
                "date": "2015-10-11T21:52:37Z"
            },
            {
                "name": "withReducer() and flattenProps()",
                "date": "2015-10-09T20:58:00Z"
            }
        ]
    }
}