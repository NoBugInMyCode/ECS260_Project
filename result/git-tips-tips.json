{
    "https://api.github.com/repos/git-tips/tips": {
        "forks": 1706,
        "watchers": 21443,
        "stars": 21443,
        "languages": {
            "JavaScript": 1102
        },
        "commits": [
            "2024-10-23T21:26:23Z",
            "2024-10-23T20:11:22Z",
            "2023-05-02T15:11:11Z",
            "2023-04-06T05:26:32Z",
            "2023-04-06T05:11:48Z",
            "2021-08-12T22:41:22Z",
            "2021-08-12T22:19:55Z",
            "2021-08-12T22:18:19Z",
            "2021-05-04T22:11:47Z",
            "2021-05-04T22:11:31Z",
            "2021-05-04T22:11:05Z",
            "2021-05-04T22:10:56Z",
            "2021-05-04T22:09:36Z",
            "2021-05-04T15:34:18Z",
            "2021-05-04T10:30:37Z",
            "2021-05-04T10:58:08Z",
            "2021-03-18T17:58:22Z",
            "2021-03-18T14:54:42Z",
            "2021-01-12T20:18:27Z",
            "2021-01-10T10:46:57Z",
            "2021-01-10T10:41:46Z",
            "2020-12-19T11:00:49Z",
            "2020-12-18T19:42:43Z",
            "2020-12-18T19:42:14Z",
            "2020-12-18T19:41:54Z",
            "2020-08-25T16:15:27Z",
            "2020-07-31T14:14:03Z",
            "2020-07-30T12:40:51Z",
            "2020-07-16T15:41:10Z",
            "2020-05-07T21:18:04Z"
        ],
        "creation_date": "2015-07-15T07:24:48Z",
        "contributors": 30,
        "topics": [
            "git",
            "tips",
            "tips-and-tricks"
        ],
        "subscribers": 558,
        "readme": "## git-tips\n> Collection of `git-tips`, want to add your tips? Checkout [contributing.md](./contributing.md)\n\n[English](http://git.io/git-tips) | [\u4e2d\u6587](https://github.com/521xueweihan/git-tips) | [\u0420\u0443\u0441\u0441\u043a\u0438\u0439](https://github.com/Imangazaliev/git-tips) | [\ud55c\uad6d\uc5b4](https://github.com/mingrammer/git-tips) | [Ti\u1ebfng Vi\u1ec7t](https://github.com/hprobotic/git-tips) | [\u65e5\u672c\u8a9e](https://github.com/isotai/git-tips) | [\u0928\u0947\u092a\u093e\u0932\u0940](https://github.com/amarduwal/git-tips) | [Polski](https://github.com/mbiesiad/tips) | [\u0641\u0627\u0631\u0633\u06cc](https://github.com/javadnikbakht/git-tips)\n\n### __Tools:__\n\n* [git-tip](https://www.npmjs.com/package/git-tip) - A handy CLI to make optimum use of these tips. ([Here in Docker container](https://github.com/djoudi5/docker-git-tip))\n\nP.S: All these commands are tested on `git version 2.7.4 (Apple Git-66)`.\n\n<!-- @doxie.inject start toc -->\n<!-- Don\u2019t remove or change the comment above \u2013 that can break automatic updates. -->\n* [Everyday Git in twenty commands or so](#everyday-git-in-twenty-commands-or-so)\n* [Show helpful guides that come with Git](#show-helpful-guides-that-come-with-git)\n* [Search change by content](#search-change-by-content)\n* [Show changes over time for specific file](#show-changes-over-time-for-specific-file)\n* [Remove sensitive data from history, after a push](#remove-sensitive-data-from-history-after-a-push)\n* [Sync with remote, overwrite local changes](#sync-with-remote-overwrite-local-changes)\n* [List of all files till a commit](#list-of-all-files-till-a-commit)\n* [Git reset first commit](#git-reset-first-commit)\n* [Reset: preserve uncommitted local changes](#reset-preserve-uncommitted-local-changes)\n* [List all the conflicted files](#list-all-the-conflicted-files)\n* [List of all files changed in a commit](#list-of-all-files-changed-in-a-commit)\n* [Unstaged changes since last commit](#unstaged-changes-since-last-commit)\n* [Changes staged for commit](#changes-staged-for-commit)\n* [Show both staged and unstaged changes](#show-both-staged-and-unstaged-changes)\n* [List all branches that are already merged into master](#list-all-branches-that-are-already-merged-into-master)\n* [Quickly switch to the previous branch](#quickly-switch-to-the-previous-branch)\n* [Remove branches that have already been merged with master](#remove-branches-that-have-already-been-merged-with-master)\n* [List all branches and their upstreams, as well as last commit on branch](#list-all-branches-and-their-upstreams-as-well-as-last-commit-on-branch)\n* [Track upstream branch](#track-upstream-branch)\n* [Delete local branch](#delete-local-branch)\n* [Delete remote branch](#delete-remote-branch)\n* [Create local tag](#create-local-tag)\n* [Delete local tag](#delete-local-tag)\n* [Delete remote tag](#delete-remote-tag)\n* [Undo local changes with the last content in head](#undo-local-changes-with-the-last-content-in-head)\n* [Revert: Undo a commit by creating a new commit](#revert-undo-a-commit-by-creating-a-new-commit)\n* [Reset: Discard commits, advised for private branch](#reset-discard-commits-advised-for-private-branch)\n* [Reword the previous commit message](#reword-the-previous-commit-message)\n* [See commit history for just the current branch](#see-commit-history-for-just-the-current-branch)\n* [Amend author.](#amend-author)\n* [Reset author, after author has been changed in the global config.](#reset-author-after-author-has-been-changed-in-the-global-config)\n* [Changing a remote's URL](#changing-a-remotes-url)\n* [Get list of all remote references](#get-list-of-all-remote-references)\n* [Get list of all local and remote branches](#get-list-of-all-local-and-remote-branches)\n* [Get only remote branches](#get-only-remote-branches)\n* [Stage parts of a changed file, instead of the entire file](#stage-parts-of-a-changed-file-instead-of-the-entire-file)\n* [Get git bash completion](#get-git-bash-completion)\n* [What changed since two weeks?](#what-changed-since-two-weeks)\n* [See all commits made since forking from master](#see-all-commits-made-since-forking-from-master)\n* [Pick commits across branches using cherry-pick](#pick-commits-across-branches-using-cherry-pick)\n* [Find out branches containing commit-hash](#find-out-branches-containing-commit-hash)\n* [Git Aliases](#git-aliases)\n* [Saving current state of tracked files without commiting](#saving-current-state-of-tracked-files-without-commiting)\n* [Saving current state of unstaged changes to tracked files](#saving-current-state-of-unstaged-changes-to-tracked-files)\n* [Saving current state including untracked files](#saving-current-state-including-untracked-files)\n* [Saving current state with message](#saving-current-state-with-message)\n* [Saving current state of all files (ignored, untracked, and tracked)](#saving-current-state-of-all-files-ignored-untracked-and-tracked)\n* [Show list of all saved stashes](#show-list-of-all-saved-stashes)\n* [Show the contents of any stash in patch form](#show-the-contents-of-any-stash-in-patch-form)\n* [Apply any stash without deleting from the stashed list](#apply-any-stash-without-deleting-from-the-stashed-list)\n* [Apply last stashed state and delete it from stashed list](#apply-last-stashed-state-and-delete-it-from-stashed-list)\n* [Delete all stored stashes](#delete-all-stored-stashes)\n* [Grab a single file from a stash](#grab-a-single-file-from-a-stash)\n* [Show all tracked files](#show-all-tracked-files)\n* [Show all untracked files](#show-all-untracked-files)\n* [Show all ignored files](#show-all-ignored-files)\n* [Create new working tree from a repository (git 2.5)](#create-new-working-tree-from-a-repository-git-25)\n* [Create new working tree from HEAD state](#create-new-working-tree-from-head-state)\n* [Untrack files without deleting](#untrack-files-without-deleting)\n* [Before deleting untracked files/directory, do a dry run to get the list of these files/directories](#before-deleting-untracked-filesdirectory-do-a-dry-run-to-get-the-list-of-these-filesdirectories)\n* [Forcefully remove untracked files](#forcefully-remove-untracked-files)\n* [Forcefully remove untracked directory](#forcefully-remove-untracked-directory)\n* [Update all the submodules](#update-all-the-submodules)\n* [Show all commits in the current branch yet to be merged to master](#show-all-commits-in-the-current-branch-yet-to-be-merged-to-master)\n* [Rename a branch](#rename-a-branch)\n* [Rebases 'feature' to 'master' and merges it in to master ](#rebases-feature-to-master-and-merges-it-in-to-master)\n* [Archive the `master` branch](#archive-the-master-branch)\n* [Modify previous commit without modifying the commit message](#modify-previous-commit-without-modifying-the-commit-message)\n* [Prunes references to remove branches that have been deleted in the remote.](#prunes-references-to-remove-branches-that-have-been-deleted-in-the-remote)\n* [Delete local branches that has been squash and merged in the remote.](#delete-local-branches-that-has-been-squash-and-merged-in-the-remote)\n* [Retrieve the commit hash of the initial revision.](#retrieve-the-commit-hash-of-the-initial-revision)\n* [Visualize the version tree.](#visualize-the-version-tree)\n* [Visualize the tree including commits that are only referenced from reflogs](#visualize-the-tree-including-commits-that-are-only-referenced-from-reflogs)\n* [Deploying git tracked subfolder to gh-pages](#deploying-git-tracked-subfolder-to-gh-pages)\n* [Adding a project to repo using subtree](#adding-a-project-to-repo-using-subtree)\n* [Get latest changes in your repo for a linked project using subtree](#get-latest-changes-in-your-repo-for-a-linked-project-using-subtree)\n* [Export a branch with history to a file.](#export-a-branch-with-history-to-a-file)\n* [Import from a bundle](#import-from-a-bundle)\n* [Get the name of current branch.](#get-the-name-of-current-branch)\n* [Ignore one file on commit (e.g. Changelog).](#ignore-one-file-on-commit-eg-changelog)\n* [Stash changes before rebasing](#stash-changes-before-rebasing)\n* [Fetch pull request by ID to a local branch](#fetch-pull-request-by-id-to-a-local-branch)\n* [Show the most recent tag on the current branch.](#show-the-most-recent-tag-on-the-current-branch)\n* [Show inline word diff.](#show-inline-word-diff)\n* [Show changes using common diff tools.](#show-changes-using-common-diff-tools)\n* [Don\u2019t consider changes for tracked file.](#dont-consider-changes-for-tracked-file)\n* [Undo assume-unchanged.](#undo-assume-unchanged)\n* [Clean the files from `.gitignore`.](#clean-the-files-from-gitignore)\n* [Restore deleted file.](#restore-deleted-file)\n* [Restore file to a specific commit-hash](#restore-file-to-a-specific-commit-hash)\n* [Always rebase instead of merge on pull.](#always-rebase-instead-of-merge-on-pull)\n* [List all the alias and configs.](#list-all-the-alias-and-configs)\n* [Make git case sensitive.](#make-git-case-sensitive)\n* [Add custom editors.](#add-custom-editors)\n* [Auto correct typos.](#auto-correct-typos)\n* [Check if the change was a part of a release.](#check-if-the-change-was-a-part-of-a-release)\n* [Dry run. (any command that supports dry-run flag should do.)](#dry-run-any-command-that-supports-dry-run-flag-should-do)\n* [Marks your commit as a fix of a previous commit.](#marks-your-commit-as-a-fix-of-a-previous-commit)\n* [Squash fixup commits normal commits.](#squash-fixup-commits-normal-commits)\n* [Skip staging area during commit.](#skip-staging-area-during-commit)\n* [Interactive staging.](#interactive-staging)\n* [List ignored files.](#list-ignored-files)\n* [Status of ignored files.](#status-of-ignored-files)\n* [Commits in Branch1 that are not in Branch2](#commits-in-branch1-that-are-not-in-branch2)\n* [List n last commits](#list-n-last-commits)\n* [Reuse recorded resolution, record and reuse previous conflicts resolutions.](#reuse-recorded-resolution-record-and-reuse-previous-conflicts-resolutions)\n* [Open all conflicted files in an editor.](#open-all-conflicted-files-in-an-editor)\n* [Count unpacked number of objects and their disk consumption.](#count-unpacked-number-of-objects-and-their-disk-consumption)\n* [Prune all unreachable objects from the object database.](#prune-all-unreachable-objects-from-the-object-database)\n* [Instantly browse your working repository in gitweb.](#instantly-browse-your-working-repository-in-gitweb)\n* [View the GPG signatures in the commit log](#view-the-gpg-signatures-in-the-commit-log)\n* [Remove entry in the global config.](#remove-entry-in-the-global-config)\n* [Checkout a new branch without any history](#checkout-a-new-branch-without-any-history)\n* [Extract file from another branch.](#extract-file-from-another-branch)\n* [List only the root and merge commits.](#list-only-the-root-and-merge-commits)\n* [Change previous two commits with an interactive rebase.](#change-previous-two-commits-with-an-interactive-rebase)\n* [List all branch is WIP](#list-all-branch-is-wip)\n* [Find guilty with binary search](#find-guilty-with-binary-search)\n* [Bypass pre-commit and commit-msg githooks](#bypass-pre-commit-and-commit-msg-githooks)\n* [List commits and changes to a specific file (even through renaming)](#list-commits-and-changes-to-a-specific-file-even-through-renaming)\n* [Clone a single branch](#clone-a-single-branch)\n* [Create and switch new branch](#create-and-switch-new-branch)\n* [Ignore file mode changes on commits](#ignore-file-mode-changes-on-commits)\n* [Turn off git colored terminal output](#turn-off-git-colored-terminal-output)\n* [Specific color settings](#specific-color-settings)\n* [Show all local branches ordered by recent commits](#show-all-local-branches-ordered-by-recent-commits)\n* [Find lines matching the pattern (regex or string) in tracked files](#find-lines-matching-the-pattern-regex-or-string-in-tracked-files)\n* [Clone a shallow copy of a repository](#clone-a-shallow-copy-of-a-repository)\n* [Search Commit log across all branches for given text](#search-commit-log-across-all-branches-for-given-text)\n* [Get first commit in a branch (from master)](#get-first-commit-in-a-branch-from-master)\n* [Unstaging Staged file](#unstaging-staged-file)\n* [Force push to Remote Repository](#force-push-to-remote-repository)\n* [Adding Remote name](#adding-remote-name)\n* [List all currently configured remotes](#list-all-currently-configured-remotes)\n* [Show the author, time and last revision made to each line of a given file](#show-the-author-time-and-last-revision-made-to-each-line-of-a-given-file)\n* [Group commits by authors and title](#group-commits-by-authors-and-title)\n* [Forced push but still ensure you don't overwrite other's work](#forced-push-but-still-ensure-you-dont-overwrite-others-work)\n* [Show how many lines does an author contribute](#show-how-many-lines-does-an-author-contribute)\n* [Revert: Reverting an entire merge](#revert-reverting-an-entire-merge)\n* [Number of commits in a branch](#number-of-commits-in-a-branch)\n* [Alias: git undo](#alias-git-undo)\n* [Add object notes](#add-object-notes)\n* [Show all the git-notes](#show-all-the-git-notes)\n* [Apply commit from another repository](#apply-commit-from-another-repository)\n* [Specific fetch reference](#specific-fetch-reference)\n* [Find common ancestor of two branches](#find-common-ancestor-of-two-branches)\n* [List unpushed git commits](#list-unpushed-git-commits)\n* [Add everything, but whitespace changes](#add-everything-but-whitespace-changes)\n* [Edit [local/global] git config](#edit-localglobal-git-config)\n* [blame on certain range](#blame-on-certain-range)\n* [Show a Git logical variable.](#show-a-git-logical-variable)\n* [Preformatted patch file.](#preformatted-patch-file)\n* [Get the repo name.](#get-the-repo-name)\n* [logs between date range](#logs-between-date-range)\n* [Exclude author from logs](#exclude-author-from-logs)\n* [Generates a summary of pending changes](#generates-a-summary-of-pending-changes)\n* [List references in a remote repository](#list-references-in-a-remote-repository)\n* [Backup untracked files.](#backup-untracked-files)\n* [List all git aliases](#list-all-git-aliases)\n* [Show git status short](#show-git-status-short)\n* [Checkout a commit prior to a day ago](#checkout-a-commit-prior-to-a-day-ago)\n* [Push the current branch to the same name on the remote repository](#push-the-current-branch-to-the-same-name-on-the-remote-repository)\n* [Push a new local branch to remote repository and track](#push-a-new-local-branch-to-remote-repository-and-track)\n* [Change a branch base](#change-a-branch-base)\n* [Use SSH instead of HTTPs for remotes](#use-ssh-instead-of-https-for-remotes)\n* [Update a submodule to the latest commit](#update-a-submodule-to-the-latest-commit)\n* [Prevent auto replacing LF with CRLF](#prevent-auto-replacing-lf-with-crlf)\n\n<!-- Don\u2019t remove or change the comment below \u2013 that can break automatic updates. More info at <http://npm.im/doxie.inject>. -->\n<!-- @doxie.inject end toc -->\n\n\n<!-- @doxie.inject start -->\n<!-- Don\u2019t remove or change the comment above \u2013 that can break automatic updates. -->\n## Everyday Git in twenty commands or so\n```sh\ngit help everyday\n```\n\n## Show helpful guides that come with Git\n```sh\ngit help -g\n```\n\n## Search change by content\n```sh\ngit log -S'<a term in the source>'\n```\n\n## Show changes over time for specific file\n```sh\ngit log -p <file_name>\n```\n\n## Remove sensitive data from history, after a push\n```sh\ngit filter-branch --force --index-filter 'git rm --cached --ignore-unmatch <path-to-your-file>' --prune-empty --tag-name-filter cat -- --all && git push origin --force --all\n```\n\n## Sync with remote, overwrite local changes\n```sh\ngit fetch origin && git reset --hard origin/master && git clean -f -d\n```\n\n## List of all files till a commit\n```sh\ngit ls-tree --name-only -r <commit-ish>\n```\n\n## Git reset first commit\n```sh\ngit update-ref -d HEAD\n```\n\n## Reset: preserve uncommitted local changes\n```sh\ngit reset --keep <commit>\n```\n\n## List all the conflicted files\n```sh\ngit diff --name-only --diff-filter=U\n```\n\n## List of all files changed in a commit\n```sh\ngit diff-tree --no-commit-id --name-only -r <commit-ish>\n```\n\n## Unstaged changes since last commit\n```sh\ngit diff\n```\n\n## Changes staged for commit\n```sh\ngit diff --cached\n```\n\n\n__Alternatives:__\n```sh\ngit diff --staged\n```\n\n## Show both staged and unstaged changes\n```sh\ngit diff HEAD\n```\n\n## List all branches that are already merged into master\n```sh\ngit branch --merged master\n```\n\n## Quickly switch to the previous branch\n```sh\ngit checkout -\n```\n\n\n__Alternatives:__\n```sh\ngit checkout @{-1}\n```\n\n## Remove branches that have already been merged with master\n```sh\ngit branch --merged master | grep -v '^\\*' | xargs -n 1 git branch -d\n```\n\n\n__Alternatives:__\n```sh\ngit branch --merged master | grep -v '^\\*\\|  master' | xargs -n 1 git branch -d # will not delete master if master is not checked out\n```\n\n## List all branches and their upstreams, as well as last commit on branch\n```sh\ngit branch -vv\n```\n\n## Track upstream branch\n```sh\ngit branch -u origin/mybranch\n```\n\n## Delete local branch\n```sh\ngit branch -d <local_branchname>\n```\n\n## Delete remote branch\n```sh\ngit push origin --delete <remote_branchname>\n```\n\n\n__Alternatives:__\n```sh\ngit push origin :<remote_branchname>\n```\n\n\n```sh\ngit branch -dr <remote/branch>\n```\n\n## Create local tag\n```sh\ngit tag <tag-name>\n```\n\n## Delete local tag\n```sh\ngit tag -d <tag-name>\n```\n\n## Delete remote tag\n```sh\ngit push origin :refs/tags/<tag-name>\n```\n\n## Undo local changes with the content in index(staging)\n```sh\ngit checkout -- <file_name>\n```\n\n## Revert: Undo a commit by creating a new commit\n```sh\ngit revert <commit-ish>\n```\n\n## Reset: Discard commits, advised for private branch\n```sh\ngit reset <commit-ish>\n```\n\n## Reword the previous commit message\n```sh\ngit commit -v --amend\n```\n\n## See commit history for just the current branch\n```sh\ngit cherry -v master\n```\n\n## Amend author.\n```sh\ngit commit --amend --author='Author Name <email@address.com>'\n```\n\n## Reset author, after author has been changed in the global config.\n```sh\ngit commit --amend --reset-author --no-edit\n```\n\n## Changing a remote's URL\n```sh\ngit remote set-url origin <URL>\n```\n\n## Get list of all remote references\n```sh\ngit remote\n```\n\n\n__Alternatives:__\n```sh\ngit remote show\n```\n\n## Get list of all local and remote branches\n```sh\ngit branch -a\n```\n\n## Get only remote branches\n```sh\ngit branch -r\n```\n\n## Stage parts of a changed file, instead of the entire file\n```sh\ngit add -p\n```\n\n## Get git bash completion\n```sh\ncurl -L http://git.io/vfhol > ~/.git-completion.bash && echo '[ -f ~/.git-completion.bash ] && . ~/.git-completion.bash' >> ~/.bashrc\n```\n\n## What changed since two weeks?\n```sh\ngit log --no-merges --raw --since='2 weeks ago'\n```\n\n\n__Alternatives:__\n```sh\ngit whatchanged --since='2 weeks ago'\n```\n\n## See all commits made since forking from master\n```sh\ngit log --no-merges --stat --reverse master..\n```\n\n## Pick commits across branches using cherry-pick\n```sh\ngit checkout <branch-name> && git cherry-pick <commit-ish>\n```\n\n## Find out branches containing commit-hash\n```sh\ngit branch -a --contains <commit-ish>\n```\n\n\n__Alternatives:__\n```sh\ngit branch --contains <commit-ish>\n```\n\n## Git Aliases\n```sh\ngit config --global alias.<handle> <command> \ngit config --global alias.st status\n```\n\n## Saving current state of tracked files without commiting\n```sh\ngit stash\n```\n\n\n__Alternatives:__\n```sh\ngit stash push\n```\n\n## Saving current state of unstaged changes to tracked files\n```sh\ngit stash -k\n```\n\n\n__Alternatives:__\n```sh\ngit stash --keep-index\n```\n\n\n```sh\ngit stash push --keep-index\n```\n\n## Saving current state including untracked files\n```sh\ngit stash -u\n```\n\n\n__Alternatives:__\n```sh\ngit stash push -u\n```\n\n\n```sh\ngit stash push --include-untracked\n```\n\n## Saving current state with message\n```sh\ngit stash push -m <message>\n```\n\n\n__Alternatives:__\n```sh\ngit stash push --message <message>\n```\n\n## Saving current state of all files (ignored, untracked, and tracked)\n```sh\ngit stash -a\n```\n\n\n__Alternatives:__\n```sh\ngit stash --all\n```\n\n\n```sh\ngit stash push --all\n```\n\n## Show list of all saved stashes\n```sh\ngit stash list\n```\n\n## Show the contents of any stash in patch form\n```sh\ngit stash show -p <stash@{n}>\n```\n\n## Apply any stash without deleting from the stashed list\n```sh\ngit stash apply <stash@{n}>\n```\n\n## Apply last stashed state and delete it from stashed list\n```sh\ngit stash pop\n```\n\n\n__Alternatives:__\n```sh\ngit stash apply stash@{0} && git stash drop stash@{0}\n```\n\n## Delete all stored stashes\n```sh\ngit stash clear\n```\n\n\n__Alternatives:__\n```sh\ngit stash drop <stash@{n}>\n```\n\n## Grab a single file from a stash\n```sh\ngit checkout <stash@{n}> -- <file_path>\n```\n\n\n__Alternatives:__\n```sh\ngit checkout stash@{0} -- <file_path>\n```\n\n## Show all tracked files\n```sh\ngit ls-files -t\n```\n\n## Show all untracked files\n```sh\ngit ls-files --others\n```\n\n## Show all ignored files\n```sh\ngit ls-files --others -i --exclude-standard\n```\n\n## Create new working tree from a repository (git 2.5)\n```sh\ngit worktree add -b <branch-name> <path> <start-point>\n```\n\n## Create new working tree from HEAD state\n```sh\ngit worktree add --detach <path> HEAD\n```\n\n## Untrack files without deleting\n```sh\ngit rm --cached <file_path>\n```\n\n\n__Alternatives:__\n```sh\ngit rm --cached -r <directory_path>\n```\n\n## Before deleting untracked files/directory, do a dry run to get the list of these files/directories\n```sh\ngit clean -n\n```\n\n## Forcefully remove untracked files\n```sh\ngit clean -f\n```\n\n## Forcefully remove untracked directory\n```sh\ngit clean -f -d\n```\n\n## Update all the submodules\n```sh\ngit submodule foreach git pull\n```\n\n\n__Alternatives:__\n```sh\ngit submodule update --init --recursive\n```\n\n\n```sh\ngit submodule update --remote\n```\n\n## Show all commits in the current branch yet to be merged to master\n```sh\ngit cherry -v master\n```\n\n\n__Alternatives:__\n```sh\ngit cherry -v master <branch-to-be-merged>\n```\n\n## Rename a branch\n```sh\ngit branch -m <new-branch-name>\n```\n\n\n__Alternatives:__\n```sh\ngit branch -m [<old-branch-name>] <new-branch-name>\n```\n\n## Rebases 'feature' to 'master' and merges it in to master \n```sh\ngit rebase master feature && git checkout master && git merge -\n```\n\n## Archive the `master` branch\n```sh\ngit archive master --format=zip --output=master.zip\n```\n\n## Modify previous commit without modifying the commit message\n```sh\ngit add --all && git commit --amend --no-edit\n```\n\n## Prunes references to remove branches that have been deleted in the remote.\n```sh\ngit fetch -p\n```\n\n\n__Alternatives:__\n```sh\ngit remote prune origin\n```\n\n## Delete local branches that has been squash and merged in the remote.\n```sh\ngit branch -vv | grep ': gone]' | awk '{print <!-- @doxie.inject start -->}' | xargs git branch -D\n```\n\n## Retrieve the commit hash of the initial revision.\n```sh\n git rev-list --reverse HEAD | head -1\n```\n\n\n__Alternatives:__\n```sh\ngit rev-list --max-parents=0 HEAD\n```\n\n\n```sh\ngit log --pretty=oneline | tail -1 | cut -c 1-40\n```\n\n\n```sh\ngit log --pretty=oneline --reverse | head -1 | cut -c 1-40\n```\n\n## Visualize the version tree.\n```sh\ngit log --pretty=oneline --graph --decorate --all\n```\n\n\n__Alternatives:__\n```sh\ngitk --all\n```\n\n\n```sh\ngit log --graph --pretty=format:'%C(auto) %h | %s | %an | %ar%d'\n```\n\n## Visualize the tree including commits that are only referenced from reflogs\n```sh\ngit log --graph --decorate --oneline $(git rev-list --walk-reflogs --all)\n```\n\n## Deploying git tracked subfolder to gh-pages\n```sh\ngit subtree push --prefix subfolder_name origin gh-pages\n```\n\n## Adding a project to repo using subtree\n```sh\ngit subtree add --prefix=<directory_name>/<project_name> --squash git@github.com:<username>/<project_name>.git master\n```\n\n## Get latest changes in your repo for a linked project using subtree\n```sh\ngit subtree pull --prefix=<directory_name>/<project_name> --squash git@github.com:<username>/<project_name>.git master\n```\n\n## Export a branch with history to a file.\n```sh\ngit bundle create <file> <branch-name>\n```\n\n## Import from a bundle\n```sh\ngit clone repo.bundle <repo-dir> -b <branch-name>\n```\n\n## Get the name of current branch.\n```sh\ngit rev-parse --abbrev-ref HEAD\n```\n\n## Ignore one file on commit (e.g. Changelog).\n```sh\ngit update-index --assume-unchanged Changelog; git commit -a; git update-index --no-assume-unchanged Changelog\n```\n\n## Stash changes before rebasing\n```sh\ngit rebase --autostash\n```\n\n## Fetch pull request by ID to a local branch\n```sh\ngit fetch origin pull/<id>/head:<branch-name>\n```\n\n\n__Alternatives:__\n```sh\ngit pull origin pull/<id>/head:<branch-name>\n```\n\n## Show the most recent tag on the current branch.\n```sh\ngit describe --tags --abbrev=0\n```\n\n## Show inline word diff.\n```sh\ngit diff --word-diff\n```\n\n## Show changes using common diff tools.\n```sh\ngit difftool [-t <tool>] <commit1> <commit2> <path>\n```\n\n## Don\u2019t consider changes for tracked file.\n```sh\ngit update-index --assume-unchanged <file_name>\n```\n\n## Undo assume-unchanged.\n```sh\ngit update-index --no-assume-unchanged <file_name>\n```\n\n## Clean the files from `.gitignore`.\n```sh\ngit clean -X -f\n```\n\n## Restore deleted file.\n```sh\ngit checkout <deleting_commit> -- <file_path>\n```\n\n## Restore file to a specific commit-hash\n```sh\ngit checkout <commit-ish> -- <file_path>\n```\n\n## Always rebase instead of merge on pull.\n```sh\ngit config --global pull.rebase true\n```\n\n\n__Alternatives:__\n```sh\n#git < 1.7.9\ngit config --global branch.autosetuprebase always\n```\n\n## List all the alias and configs.\n```sh\ngit config --list\n```\n\n## Make git case sensitive.\n```sh\ngit config --global core.ignorecase false\n```\n\n## Add custom editors.\n```sh\ngit config --global core.editor '$EDITOR'\n```\n\n## Auto correct typos.\n```sh\ngit config --global help.autocorrect 1\n```\n\n## Check if the change was a part of a release.\n```sh\ngit name-rev --name-only <SHA-1>\n```\n\n## Dry run. (any command that supports dry-run flag should do.)\n```sh\ngit clean -fd --dry-run\n```\n\n## Marks your commit as a fix of a previous commit.\n```sh\ngit commit --fixup <SHA-1>\n```\n\n## Squash fixup commits normal commits.\n```sh\ngit rebase -i --autosquash\n```\n\n## Skip staging area during commit.\n```sh\ngit commit --only <file_path>\n```\n\n## Interactive staging.\n```sh\ngit add -i\n```\n\n## List ignored files.\n```sh\ngit check-ignore *\n```\n\n## Status of ignored files.\n```sh\ngit status --ignored\n```\n\n## Commits in Branch1 that are not in Branch2\n```sh\ngit log Branch1 ^Branch2\n```\n\n## List n last commits\n```sh\ngit log -<n>\n```\n\n\n__Alternatives:__\n```sh\ngit log -n <n>\n```\n\n## Reuse recorded resolution, record and reuse previous conflicts resolutions.\n```sh\ngit config --global rerere.enabled 1\n```\n\n## Open all conflicted files in an editor.\n```sh\ngit diff --name-only | uniq | xargs $EDITOR\n```\n\n## Count unpacked number of objects and their disk consumption.\n```sh\ngit count-objects --human-readable\n```\n\n## Prune all unreachable objects from the object database.\n```sh\ngit gc --prune=now --aggressive\n```\n\n## Instantly browse your working repository in gitweb.\n```sh\ngit instaweb [--local] [--httpd=<httpd>] [--port=<port>] [--browser=<browser>]\n```\n\n## View the GPG signatures in the commit log\n```sh\ngit log --show-signature\n```\n\n## Remove entry in the global config.\n```sh\ngit config --global --unset <entry-name>\n```\n\n## Checkout a new branch without any history\n```sh\ngit checkout --orphan <branch_name>\n```\n\n## Extract file from another branch.\n```sh\ngit show <branch_name>:<file_name>\n```\n\n## List only the root and merge commits.\n```sh\ngit log --first-parent\n```\n\n## Change previous two commits with an interactive rebase.\n```sh\ngit rebase --interactive HEAD~2\n```\n\n## List all branch is WIP\n```sh\ngit checkout master && git branch --no-merged\n```\n\n## Find guilty with binary search\n```sh\ngit bisect start                    # Search start \ngit bisect bad                      # Set point to bad commit \ngit bisect good v2.6.13-rc2         # Set point to good commit|tag \ngit bisect bad                      # Say current state is bad \ngit bisect good                     # Say current state is good \ngit bisect reset                    # Finish search \n\n```\n\n## Bypass pre-commit and commit-msg githooks\n```sh\ngit commit --no-verify\n```\n\n## List commits and changes to a specific file (even through renaming)\n```sh\ngit log --follow -p -- <file_path>\n```\n\n## Clone a single branch\n```sh\ngit clone -b <branch-name> --single-branch https://github.com/user/repo.git\n```\n\n## Create and switch new branch\n```sh\ngit checkout -b <branch-name>\n```\n\n\n__Alternatives:__\n```sh\ngit branch <branch-name> && git checkout <branch-name>\n```\n\n```sh\ngit switch -c <branch-name>\n```\n\n## Ignore file mode changes on commits\n```sh\ngit config core.fileMode false\n```\n\n## Turn off git colored terminal output\n```sh\ngit config --global color.ui false\n```\n\n## Specific color settings\n```sh\ngit config --global <specific command e.g branch, diff> <true, false or always>\n```\n\n## Show all local branches ordered by recent commits\n```sh\ngit for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads/\n```\n\n## Find lines matching the pattern (regex or string) in tracked files\n```sh\ngit grep --heading --line-number 'foo bar'\n```\n\n## Clone a shallow copy of a repository\n```sh\ngit clone https://github.com/user/repo.git --depth 1\n```\n\n## Search Commit log across all branches for given text\n```sh\ngit log --all --grep='<given-text>'\n```\n\n## Get first commit in a branch (from master)\n```sh\ngit log --oneline master..<branch-name> | tail -1\n```\n\n\n__Alternatives:__\n```sh\ngit log --reverse master..<branch-name> | head -6\n```\n\n## Unstaging Staged file\n```sh\ngit reset HEAD <file-name>\n```\n\n## Force push to Remote Repository\n```sh\ngit push -f <remote-name> <branch-name>\n```\n\n## Adding Remote name\n```sh\ngit remote add <remote-nickname> <remote-url>\n```\n\n## List all currently configured remotes\n```sh\ngit remote -v\n```\n\n## Show the author, time and last revision made to each line of a given file\n```sh\ngit blame <file-name>\n```\n\n## Group commits by authors and title\n```sh\ngit shortlog\n```\n\n## Forced push but still ensure you don't overwrite other's work\n```sh\ngit push --force-with-lease <remote-name> <branch-name>\n```\n\n## Show how many lines does an author contribute\n```sh\ngit log --author='_Your_Name_Here_' --pretty=tformat: --numstat | gawk '{ add += <!-- @doxie.inject start -->; subs += <!-- @doxie.inject end -->; loc += <!-- @doxie.inject start --> - <!-- @doxie.inject end --> } END { printf \"added lines: %s removed lines: %s total lines: %s\n\", add, subs, loc }' -\n```\n\n\n__Alternatives:__\n```sh\ngit log --author='_Your_Name_Here_' --pretty=tformat: --numstat | awk '{ add += <!-- @doxie.inject start -->; subs += <!-- @doxie.inject end -->; loc += <!-- @doxie.inject start --> - <!-- @doxie.inject end --> } END { printf \"added lines: %s, removed lines: %s, total lines: %s\n\", add, subs, loc }' - # on Mac OSX\n```\n\n## Revert: Reverting an entire merge\n```sh\ngit revert -m 1 <commit-ish>\n```\n\n## Number of commits in a branch\n```sh\ngit rev-list --count <branch-name>\n```\n\n## Alias: git undo\n```sh\ngit config --global alias.undo '!f() { git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; }; f'\n```\n\n## Add object notes\n```sh\ngit notes add -m 'Note on the previous commit....'\n```\n\n## Show all the git-notes\n```sh\ngit log --show-notes='*'\n```\n\n## Apply commit from another repository\n```sh\ngit --git-dir=<source-dir>/.git format-patch -k -1 --stdout <SHA1> | git am -3 -k\n```\n\n## Specific fetch reference\n```sh\ngit fetch origin master:refs/remotes/origin/mymaster\n```\n\n## Find common ancestor of two branches\n```sh\ngit merge-base <branch-name> <other-branch-name>\n```\n\n## List unpushed git commits\n```sh\ngit log --branches --not --remotes\n```\n\n\n__Alternatives:__\n```sh\ngit log @{u}..\n```\n\n\n```sh\ngit cherry -v\n```\n\n## Add everything, but whitespace changes\n```sh\ngit diff --ignore-all-space | git apply --cached\n```\n\n## Edit [local/global] git config\n```sh\ngit config [--global] --edit\n```\n\n## blame on certain range\n```sh\ngit blame -L <start>,<end>\n```\n\n## Show a Git logical variable.\n```sh\ngit var -l | <variable>\n```\n\n## Preformatted patch file.\n```sh\ngit format-patch -M upstream..topic\n```\n\n## Get the repo name.\n```sh\ngit rev-parse --show-toplevel\n```\n\n## logs between date range\n```sh\ngit log --since='FEB 1 2017' --until='FEB 14 2017'\n```\n\n## Exclude author from logs\n```sh\ngit log --perl-regexp --author='^((?!excluded-author-regex).*)\n\n```\n\n## Generates a summary of pending changes\n```sh\ngit request-pull v1.0 https://git.ko.xz/project master:for-linus\n```\n\n## List references in a remote repository\n```sh\ngit ls-remote git://git.kernel.org/pub/scm/git/git.git\n```\n\n## Backup untracked files.\n```sh\ngit ls-files --others -i --exclude-standard | xargs zip untracked.zip\n```\n\n## List all git aliases\n```sh\ngit config -l | grep alias | sed 's/^alias\\.//g'\n```\n\n\n__Alternatives:__\n```sh\ngit config -l | grep alias | cut -d '.' -f 2\n```\n\n## Show git status short\n```sh\ngit status --short --branch\n```\n\n## Checkout a commit prior to a day ago\n```sh\ngit checkout master@{yesterday}\n```\n\n## Push the current branch to the same name on the remote repository\n```sh\ngit push origin HEAD\n```\n\n## Push a new local branch to remote repository and track\n```sh\ngit push -u origin <branch_name>\n```\n\n## Change a branch base\n```sh\ngit rebase --onto <new_base> <old_base>\n```\n\n## Use SSH instead of HTTPs for remotes\n```sh\ngit config --global url.'git@github.com:'.insteadOf 'https://github.com/'\n```\n\n## Update a submodule to the latest commit\n```sh\ncd <path-to-submodule>\ngit pull origin <branch>\ncd <root-of-your-main-project>\ngit add <path-to-submodule>\ngit commit -m \"submodule updated\"\n```\n\n## Prevent auto replacing LF with CRLF\n```sh\ngit config --global core.autocrlf false\n```\n\n<!-- Don\u2019t remove or change the comment below \u2013 that can break automatic updates. More info at <http://npm.im/doxie.inject>. -->\n<!-- @doxie.inject end -->\n",
        "releases": []
    }
}