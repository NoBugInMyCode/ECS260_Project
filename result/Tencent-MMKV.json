{
    "https://api.github.com/repos/Tencent/MMKV": {
        "forks": 1916,
        "watchers": 17625,
        "stars": 17625,
        "languages": {
            "C++": 723465,
            "Java": 214768,
            "Objective-C++": 161410,
            "Dart": 79734,
            "Objective-C": 62511,
            "Assembly": 40156,
            "Go": 38075,
            "C": 34786,
            "CMake": 19139,
            "Python": 17025,
            "Ruby": 16072,
            "TypeScript": 6093,
            "Swift": 5855,
            "Kotlin": 2447,
            "AIDL": 221,
            "Makefile": 41
        },
        "commits": [
            "2024-12-27T09:13:13Z",
            "2024-12-27T09:07:59Z",
            "2024-12-24T11:29:07Z",
            "2024-12-17T09:45:27Z",
            "2024-12-13T12:21:51Z",
            "2024-12-13T04:07:14Z",
            "2024-12-10T02:43:45Z",
            "2024-12-02T07:15:18Z",
            "2024-12-13T12:22:17Z",
            "2024-12-13T12:21:51Z",
            "2024-12-02T10:00:16Z",
            "2024-12-02T09:32:20Z",
            "2024-11-28T14:30:57Z",
            "2024-11-19T03:20:42Z",
            "2024-11-15T08:06:31Z",
            "2024-11-12T10:07:04Z",
            "2024-11-12T10:02:48Z",
            "2024-11-12T08:20:01Z",
            "2024-11-12T08:17:00Z",
            "2024-11-12T08:16:08Z",
            "2024-11-06T00:21:52Z",
            "2024-11-05T19:36:24Z",
            "2024-11-04T09:52:14Z",
            "2024-10-25T06:57:49Z",
            "2024-10-25T02:50:17Z",
            "2024-10-22T02:45:32Z",
            "2024-10-22T02:45:32Z",
            "2024-10-21T13:06:18Z",
            "2024-10-21T13:05:44Z",
            "2024-10-21T13:04:58Z"
        ],
        "creation_date": "2018-09-17T10:59:36Z",
        "contributors": 30,
        "topics": [
            "android",
            "flutter",
            "golang",
            "ios",
            "key-value",
            "kotlin",
            "macos",
            "python",
            "swift",
            "tvos",
            "visionos",
            "watchos",
            "wechat",
            "windows"
        ],
        "subscribers": 283,
        "readme": "[![license](https://img.shields.io/badge/license-BSD_3-brightgreen.svg?style=flat)](https://github.com/Tencent/MMKV/blob/master/LICENSE.TXT)\r\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/Tencent/MMKV/pulls)\r\n[![Release Version](https://img.shields.io/badge/release-2.0.2-brightgreen.svg)](https://github.com/Tencent/MMKV/releases)\r\n[![Platform](https://img.shields.io/badge/Platform-%20Android%20%7C%20iOS%2FmacOS%20%7C%20Windows%20%7C%20POSIX%20%7C%20HarmonyOS%20NEXT-brightgreen.svg)](https://github.com/Tencent/MMKV/wiki/home)\r\n\r\n\u4e2d\u6587\u7248\u672c\u8bf7\u53c2\u770b[\u8fd9\u91cc](./README_CN.md)\r\n\r\nMMKV is an **efficient**, **small**, **easy-to-use** mobile key-value storage framework used in the WeChat application. It's currently available on **Android**, **iOS/macOS**, **Windows**, **POSIX** and **HarmonyOS NEXT**.\r\n\r\n# MMKV for Android\r\n\r\n## Features\r\n\r\n* **Efficient**. MMKV uses mmap to keep memory synced with files, and protobuf to encode/decode values, making the most of Android to achieve the best performance.\r\n  * **Multi-Process concurrency**: MMKV supports concurrent read-read and read-write access between processes.\r\n\r\n* **Easy-to-use**. You can use MMKV as you go. All changes are saved immediately, no `sync`, no `apply` calls needed.\r\n\r\n* **Small**.\r\n  * **A handful of files**: MMKV contains process locks, encode/decode helpers and mmap logics, and nothing more. It's really tidy.\r\n  * **About 50K in binary size**: MMKV adds about 50K per architecture on App size, and much less when zipped (APK).\r\n\r\n\r\n## Getting Started\r\n\r\n### Installation Via Maven\r\nAdd the following lines to `build.gradle` on your app module:\r\n\r\n```gradle\r\ndependencies {\r\n    implementation 'com.tencent:mmkv:2.0.2'\r\n    // replace \"2.0.2\" with any available version\r\n}\r\n```\r\n\r\nStarting from v2.0.0, MMKV **no longer supports 32-bit** arch and API level 22 or 21, if you want 32-bit or API level 21~22, use v1.3.x LTS series.  \r\n\r\nFor other installation options, see [Android Setup](https://github.com/Tencent/MMKV/wiki/android_setup).\r\n\r\n### Quick Tutorial\r\nYou can use MMKV as you go. All changes are saved immediately, no `sync`, no `apply` calls needed.  \r\nSetup MMKV on App startup, say your `Application` class, add these lines:\r\n\r\n```Java\r\npublic void onCreate() {\r\n    super.onCreate();\r\n\r\n    String rootDir = MMKV.initialize(this);\r\n    System.out.println(\"mmkv root: \" + rootDir);\r\n    //\u2026\u2026\r\n}\r\n```\r\n\r\nMMKV has a global instance, that can be used directly:\r\n\r\n```Java\r\nimport com.tencent.mmkv.MMKV;\r\n    \r\nMMKV kv = MMKV.defaultMMKV();\r\n\r\nkv.encode(\"bool\", true);\r\nboolean bValue = kv.decodeBool(\"bool\");\r\n\r\nkv.encode(\"int\", Integer.MIN_VALUE);\r\nint iValue = kv.decodeInt(\"int\");\r\n\r\nkv.encode(\"string\", \"Hello from mmkv\");\r\nString str = kv.decodeString(\"string\");\r\n```\r\n\r\nMMKV also supports **Multi-Process Access**. Full tutorials can be found here [Android Tutorial](https://github.com/Tencent/MMKV/wiki/android_tutorial).\r\n\r\n## Performance\r\nWriting random `int` for 1000 times, we get this chart:  \r\n![](https://github.com/Tencent/MMKV/wiki/assets/profile_android_mini.png)  \r\nFor more benchmark data, please refer to [our benchmark](https://github.com/Tencent/MMKV/wiki/android_benchmark).\r\n\r\n# MMKV for iOS/macOS\r\n\r\n## Features\r\n\r\n* **Efficient**. MMKV uses mmap to keep memory synced with files, and protobuf to encode/decode values, making the most of iOS/macOS to achieve the best performance.\r\n \r\n* **Easy-to-use**. You can use MMKV as you go, no configurations are needed. All changes are saved immediately, no `synchronize` calls are needed.\r\n\r\n* **Small**.\r\n  * **A handful of files**: MMKV contains encode/decode helpers and mmap logics and nothing more. It's really tidy.\r\n  * **Less than 30K in binary size**: MMKV adds less than 30K per architecture on App size, and much less when zipped (IPA).\r\n\r\n## Getting Started\r\n\r\n### Installation Via CocoaPods:\r\n  1. Install [CocoaPods](https://guides.CocoaPods.org/using/getting-started.html);\r\n  2. Open the terminal, `cd` to your project directory, run `pod repo update` to make CocoaPods aware of the latest available MMKV versions;\r\n  3. Edit your Podfile, add `pod 'MMKV'` to your app target;\r\n  4. Run `pod install`;\r\n  5. Open the `.xcworkspace` file generated by CocoaPods;\r\n  6. Add `#import <MMKV/MMKV.h>` to your source file and we are done.\r\n\r\nFor other installation options, see [iOS/macOS Setup](https://github.com/Tencent/MMKV/wiki/iOS_setup).\r\n\r\n### Quick Tutorial\r\nYou can use MMKV as you go, no configurations are needed. All changes are saved immediately, no `synchronize` calls are needed.\r\nSetup MMKV on App startup, in your `-[MyApp application: didFinishLaunchingWithOptions:]`, add these lines:\r\n\r\n```objective-c\r\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\r\n    // init MMKV in the main thread\r\n    [MMKV initializeMMKV:nil];\r\n\r\n    //...\r\n    return YES;\r\n}\r\n```\r\n\r\nMMKV has a global instance, that can be used directly:\r\n\r\n```objective-c\r\nMMKV *mmkv = [MMKV defaultMMKV];\r\n    \r\n[mmkv setBool:YES forKey:@\"bool\"];\r\nBOOL bValue = [mmkv getBoolForKey:@\"bool\"];\r\n    \r\n[mmkv setInt32:-1024 forKey:@\"int32\"];\r\nint32_t iValue = [mmkv getInt32ForKey:@\"int32\"];\r\n    \r\n[mmkv setString:@\"hello, mmkv\" forKey:@\"string\"];\r\nNSString *str = [mmkv getStringForKey:@\"string\"];\r\n```\r\n\r\nMMKV also supports **Multi-Process Access**. Full tutorials can be found [here](https://github.com/Tencent/MMKV/wiki/iOS_tutorial).\r\n\r\n## Performance\r\nWriting random `int` for 10000 times, we get this chart:  \r\n![](https://github.com/Tencent/MMKV/wiki/assets/profile_mini.png)  \r\nFor more benchmark data, please refer to [our benchmark](https://github.com/Tencent/MMKV/wiki/iOS_benchmark).\r\n\r\n\r\n# MMKV for Windows\r\n\r\n## Features\r\n\r\n* **Efficient**. MMKV uses mmap to keep memory synced with files, and protobuf to encode/decode values, making the most of Windows to achieve the best performance.\r\n  * **Multi-Process concurrency**: MMKV supports concurrent read-read and read-write access between processes.\r\n\r\n* **Easy-to-use**. You can use MMKV as you go. All changes are saved immediately, no `save`, no `sync` calls are needed.\r\n\r\n* **Small**.\r\n  * **A handful of files**: MMKV contains process locks, encode/decode helpers and mmap logics, and nothing more. It's really tidy.\r\n  * **About 10K in binary size**: MMKV adds about 10K on application size, and much less when zipped.\r\n\r\n\r\n## Getting Started\r\n\r\n### Installation Via Source\r\n1. Getting source code from git repository:\r\n  \r\n   ```\r\n   git clone https://github.com/Tencent/MMKV.git\r\n   ```\r\n  \r\n2. Add `Core/core.vcxproj` to your solution;\r\n3. Add `MMKV` project to your project's dependencies;\r\n4. Add `$(OutDir)include` to your project's `C/C++` -> `General` -> `Additional Include Directories`;\r\n5. Add `$(OutDir)` to your project's `Linker` -> `General` -> `Additional Library Directories`;\r\n6. Add `mmkv.lib` to your project's `Linker` -> `Input` -> `Additional Dependencies`;\r\n7. Add `#include <MMKV/MMKV.h>` to your source file and we are done.\r\n\r\n\r\nnote:  \r\n\r\n1. MMKV is compiled with `MT/MTd` runtime by default. If your project uses `MD/MDd`, you should change MMKV's setting to match your project's (`C/C++` -> `Code Generation` -> `Runtime Library`), or vice versa.\r\n2. MMKV is developed with Visual Studio 2017, change the `Platform Toolset` if you use a different version of Visual Studio.\r\n\r\nFor other installation options, see [Windows Setup](https://github.com/Tencent/MMKV/wiki/windows_setup).\r\n\r\n### Quick Tutorial\r\nYou can use MMKV as you go. All changes are saved immediately, no `sync`, no `save` calls needed.  \r\nSetup MMKV on App startup, say in your `main()`, add these lines:\r\n\r\n```C++\r\n#include <MMKV/MMKV.h>\r\n\r\nint main() {\r\n    std::wstring rootDir = getYourAppDocumentDir();\r\n    MMKV::initializeMMKV(rootDir);\r\n    //...\r\n}\r\n```\r\n\r\nMMKV has a global instance, that can be used directly:\r\n\r\n```C++\r\nauto mmkv = MMKV::defaultMMKV();\r\n\r\nmmkv->set(true, \"bool\");\r\nstd::cout << \"bool = \" << mmkv->getBool(\"bool\") << std::endl;\r\n\r\nmmkv->set(1024, \"int32\");\r\nstd::cout << \"int32 = \" << mmkv->getInt32(\"int32\") << std::endl;\r\n\r\nmmkv->set(\"Hello, MMKV for Windows\", \"string\");\r\nstd::string result;\r\nmmkv->getString(\"string\", result);\r\nstd::cout << \"string = \" << result << std::endl;\r\n```\r\n\r\nMMKV also supports **Multi-Process Access**. Full tutorials can be found here [Windows Tutorial](https://github.com/Tencent/MMKV/wiki/windows_tutorial).\r\n\r\n# MMKV for POSIX\r\n\r\n## Features\r\n\r\n* **Efficient**. MMKV uses mmap to keep memory synced with files, and protobuf to encode/decode values, making the most of POSIX to achieve the best performance.\r\n  * **Multi-Process concurrency**: MMKV supports concurrent read-read and read-write access between processes.\r\n\r\n* **Easy-to-use**. You can use MMKV as you go. All changes are saved immediately, no `save`, no `sync` calls are needed.\r\n\r\n* **Small**.\r\n  * **A handful of files**: MMKV contains process locks, encode/decode helpers and mmap logics, and nothing more. It's really tidy.\r\n  * **About 7K in binary size**: MMKV adds about 7K on application size, and much less when zipped.\r\n\r\n\r\n## Getting Started\r\n\r\n### Installation Via CMake\r\n1. Getting source code from the git repository:\r\n  \r\n   ```\r\n   git clone https://github.com/Tencent/MMKV.git\r\n   ```\r\n2. Edit your `CMakeLists.txt`, add those lines:\r\n\r\n    ```cmake\r\n    add_subdirectory(mmkv/POSIX/src mmkv)\r\n    target_link_libraries(MyApp\r\n        mmkv)\r\n    ```\r\n3. Add `#include \"MMKV.h\"` to your source file and we are done.\r\n\r\nFor other installation options, see [POSIX Setup](https://github.com/Tencent/MMKV/wiki/posix_setup).\r\n\r\n### Quick Tutorial\r\nYou can use MMKV as you go. All changes are saved immediately, no `sync`, no `save` calls needed.  \r\nSetup MMKV on App startup, say in your `main()`, add these lines:\r\n\r\n```C++\r\n#include \"MMKV.h\"\r\n\r\nint main() {\r\n    std::string rootDir = getYourAppDocumentDir();\r\n    MMKV::initializeMMKV(rootDir);\r\n    //...\r\n}\r\n```\r\n\r\nMMKV has a global instance, that can be used directly:\r\n\r\n```C++\r\nauto mmkv = MMKV::defaultMMKV();\r\n\r\nmmkv->set(true, \"bool\");\r\nstd::cout << \"bool = \" << mmkv->getBool(\"bool\") << std::endl;\r\n\r\nmmkv->set(1024, \"int32\");\r\nstd::cout << \"int32 = \" << mmkv->getInt32(\"int32\") << std::endl;\r\n\r\nmmkv->set(\"Hello, MMKV for Windows\", \"string\");\r\nstd::string result;\r\nmmkv->getString(\"string\", result);\r\nstd::cout << \"string = \" << result << std::endl;\r\n```\r\n\r\nMMKV also supports **Multi-Process Access**. Full tutorials can be found here [POSIX Tutorial](https://github.com/Tencent/MMKV/wiki/posix_tutorial).\r\n\r\n# MMKV for HarmonyOS NEXT\r\n\r\n## Features\r\n\r\n* **Efficient**. MMKV uses mmap to keep memory synced with file, and protobuf to encode/decode values, making the most of native platform to achieve best performance.\r\n  * **Multi-Process concurrency**: MMKV supports concurrent read-read and read-write access between processes.\r\n\r\n* **Easy-to-use**. You can use MMKV as you go. All changes are saved immediately, no `sync`, no `flush` calls needed.\r\n\r\n* **Small**.\r\n  * **A handful of files**: MMKV contains process locks, encode/decode helpers and mmap logics and nothing more. It's really tidy.\r\n  * **About 600K in binary size**: MMKV adds about 600K per architecture on App size, and much less when zipped (HAR/HAP).\r\n\r\n\r\n## Getting Started\r\n### Installation via OHPM:\r\n\r\n```bash\r\nohpm install @tencent/mmkv\r\n```\r\n### Quick Tutorial\r\nYou can use MMKV as you go. All changes are saved immediately, no `sync`, no `apply` calls needed.  \r\nSetup MMKV on App startup, say your `EntryAbility.onCreate()` function, add these lines:\r\n\r\n```js\r\nimport { MMKV } from '@tencent/mmkv';\r\n\r\nexport default class EntryAbility extends UIAbility {\r\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\r\n    let appCtx = this.context.getApplicationContext();\r\n    let mmkvRootDir = MMKV.initialize(appCtx);\r\n    console.info('mmkv rootDir: ', mmkvRootDir);\r\n    \u2026\u2026\r\n  }\r\n```\r\n\r\nMMKV has a global instance, that can be used directly:\r\n\r\n```js\r\nimport { MMKV } from '@tencent/mmkv';\r\n    \r\nlet mmkv = MMKV.defaultMMKV();\r\nmmkv.encodeBool('bool', true);\r\nconsole.info('bool = ', mmkv.decodeBool('bool'));\r\n    \r\nmmkv.encodeInt32('int32', Math.pow(2, 31) - 1);\r\nconsole.info('max int32 = ', mmkv.decodeInt32('int32'));\r\n    \r\nmmkv.encodeInt64('int', BigInt(2**63) - BigInt(1));\r\nconsole.info('max int64 = ', mmkv.decodeInt64('int'));\r\n    \r\nlet str: string = 'Hello OpenHarmony from MMKV';\r\nmmkv.encodeString('string', str);\r\nconsole.info('string = ', mmkv.decodeString('string'));\r\n\r\nlet arrayBuffer: ArrayBuffer = StringToArrayBuffer('Hello OpenHarmony from MMKV with bytes');\r\nmmkv.encodeBytes('bytes', arrayBuffer);\r\nlet bytes = mmkv.decodeBytes('bytes');\r\nconsole.info('bytes = ', ArrayBufferToString(bytes));\r\n```\r\n\r\nAs you can see, MMKV is quite easy to use.\r\nFor the full documentation, see [HarmonyOS NEXT Tutorial](https://github.com/Tencent/MMKV/wiki/ohos_setup).\r\n\r\n## License\r\nMMKV is published under the BSD 3-Clause license. For details check out the [LICENSE.TXT](./LICENSE.TXT).\r\n\r\n## Change Log\r\nCheck out the [CHANGELOG.md](./CHANGELOG.md) for details of change history.\r\n\r\n## Contributing\r\n\r\nIf you are interested in contributing, check out the [CONTRIBUTING.md](./CONTRIBUTING.md), also join our [Tencent OpenSource Plan](https://opensource.tencent.com/contribution).\r\n\r\nTo give clarity of what is expected of our members, MMKV has adopted the code of conduct defined by the Contributor Covenant, which is widely used. And we think it articulates our values well. For more, check out the [Code of Conduct](./CODE_OF_CONDUCT.md).\r\n\r\n## FAQ & Feedback\r\nCheck out the [FAQ](https://github.com/Tencent/MMKV/wiki/FAQ) first. Should there be any questions, don't hesitate to create [issues](https://github.com/Tencent/MMKV/issues).\r\n\r\n## Personal Information Protection Rules\r\nUser privacy is taken very seriously: MMKV does not obtain, collect or upload any personal information. Please refer to the [MMKV SDK Personal Information Protection Rules](https://support.weixin.qq.com/cgi-bin/mmsupportacctnodeweb-bin/pages/aY5BAtRiO1BpoHxo) for details.\r\n",
        "releases": [
            {
                "name": "v1.3.13",
                "date": "2025-01-13T02:49:03Z"
            },
            {
                "name": "v1.3.12",
                "date": "2025-01-02T09:24:13Z"
            },
            {
                "name": "v2.0.2",
                "date": "2024-12-27T13:22:13Z"
            },
            {
                "name": "v2.0.1",
                "date": "2024-11-12T10:08:07Z"
            },
            {
                "name": "v1.3.11 LTS",
                "date": "2024-11-12T09:37:48Z"
            },
            {
                "name": "v2.0.0",
                "date": "2024-10-22T01:55:07Z"
            },
            {
                "name": "v1.3.9 LTS",
                "date": "2024-07-26T12:56:36Z"
            },
            {
                "name": "v1.3.7 LTS",
                "date": "2024-07-08T09:47:31Z"
            },
            {
                "name": "v1.3.6",
                "date": "2024-07-05T12:34:48Z"
            },
            {
                "name": "v1.3.5",
                "date": "2024-04-24T11:01:53Z"
            },
            {
                "name": "v1.3.4",
                "date": "2024-03-15T10:50:13Z"
            },
            {
                "name": "v1.3.3",
                "date": "2024-01-25T11:41:26Z"
            },
            {
                "name": "v1.3.2",
                "date": "2023-11-20T10:01:26Z"
            },
            {
                "name": "v1.3.1",
                "date": "2023-08-11T08:09:31Z"
            },
            {
                "name": "v1.3.0",
                "date": "2023-06-14T12:03:33Z"
            },
            {
                "name": "v1.2.16",
                "date": "2023-04-20T10:42:35Z"
            },
            {
                "name": "v1.2.15",
                "date": "2023-01-12T11:41:46Z"
            },
            {
                "name": "v1.2.14",
                "date": "2022-08-10T06:36:55Z"
            },
            {
                "name": "v1.2.13",
                "date": "2022-03-30T04:52:24Z"
            },
            {
                "name": "v1.2.12",
                "date": "2022-01-17T07:33:46Z"
            },
            {
                "name": "v1.2.11",
                "date": "2021-10-26T08:41:59Z"
            },
            {
                "name": "v1.2.10",
                "date": "2021-06-25T11:33:52Z"
            },
            {
                "name": "",
                "date": "2021-05-26T10:46:35Z"
            },
            {
                "name": "v1.2.8",
                "date": "2021-05-06T14:53:49Z"
            },
            {
                "name": "v1.2.7",
                "date": "2020-12-25T06:58:04Z"
            },
            {
                "name": "MMKV for Golang",
                "date": "2020-12-17T08:26:06Z"
            },
            {
                "name": "v1.2.6",
                "date": "2020-11-27T14:45:04Z"
            },
            {
                "name": "v1.2.5",
                "date": "2020-11-13T14:53:52Z"
            },
            {
                "name": "v1.2.4",
                "date": "2020-10-21T09:08:58Z"
            },
            {
                "name": "v1.2.3",
                "date": "2020-10-16T14:20:34Z"
            },
            {
                "name": "MMKV for Python",
                "date": "2020-09-02T09:40:18Z"
            },
            {
                "name": "v1.2.2",
                "date": "2020-08-02T16:14:19Z"
            },
            {
                "name": "v1.2.1",
                "date": "2020-07-03T14:12:52Z"
            },
            {
                "name": "v1.2.0",
                "date": "2020-07-02T07:12:32Z"
            },
            {
                "name": "v1.1.2",
                "date": "2020-05-29T12:58:19Z"
            },
            {
                "name": "v1.1.1",
                "date": "2020-04-13T14:22:10Z"
            },
            {
                "name": "v1.1.0",
                "date": "2020-03-26T08:26:49Z"
            },
            {
                "name": "v1.0.24",
                "date": "2020-01-17T02:31:51Z"
            },
            {
                "name": "v1.0.23",
                "date": "2019-09-03T08:17:00Z"
            },
            {
                "name": "v1.0.22",
                "date": "2019-06-10T08:53:28Z"
            },
            {
                "name": "v1.0.20",
                "date": "2019-06-05T09:41:53Z"
            },
            {
                "name": "v1.0.19",
                "date": "2019-04-22T13:14:55Z"
            },
            {
                "name": "v1.0.18",
                "date": "2019-03-14T07:32:36Z"
            },
            {
                "name": "v1.0.17",
                "date": "2019-01-25T04:23:54Z"
            },
            {
                "name": "v1.0.16",
                "date": "2019-01-04T13:55:09Z"
            },
            {
                "name": "v1.0.15",
                "date": "2018-12-14T03:36:02Z"
            },
            {
                "name": "v1.0.14",
                "date": "2018-11-30T09:46:11Z"
            },
            {
                "name": "v1.0.13",
                "date": "2018-11-14T07:24:57Z"
            },
            {
                "name": "v1.0.12",
                "date": "2018-10-24T09:51:21Z"
            },
            {
                "name": "v1.0.11",
                "date": "2018-10-12T09:30:18Z"
            }
        ]
    }
}