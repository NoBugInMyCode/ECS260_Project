{
    "https://api.github.com/repos/docker/docker-bench-security": {
        "forks": 1023,
        "watchers": 9236,
        "stars": 9236,
        "languages": {
            "Shell": 164463,
            "Dockerfile": 512
        },
        "commits": [
            "2024-10-21T07:26:06Z",
            "2024-10-18T02:17:01Z",
            "2024-05-16T14:35:13Z",
            "2024-05-15T17:21:02Z",
            "2024-04-16T16:12:13Z",
            "2024-04-16T08:24:28Z",
            "2024-04-16T08:23:14Z",
            "2024-04-16T07:29:45Z",
            "2024-04-16T07:29:45Z",
            "2024-04-12T08:17:17Z",
            "2024-04-11T21:45:15Z",
            "2024-02-11T10:25:09Z",
            "2023-12-20T14:41:02Z",
            "2023-12-17T15:45:13Z",
            "2023-12-17T14:57:54Z",
            "2023-11-19T22:04:37Z",
            "2023-11-19T20:08:05Z",
            "2023-10-23T09:45:55Z",
            "2023-10-21T00:55:29Z",
            "2023-10-21T00:43:46Z",
            "2023-10-06T07:13:44Z",
            "2023-10-06T05:51:33Z",
            "2023-09-25T15:29:45Z",
            "2023-09-25T09:05:44Z",
            "2023-08-25T12:38:42Z",
            "2023-08-25T12:37:35Z",
            "2023-08-25T12:18:55Z",
            "2023-08-25T12:17:48Z",
            "2023-07-26T17:51:28Z",
            "2023-07-26T16:47:50Z"
        ],
        "creation_date": "2015-05-11T00:57:26Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 234,
        "readme": "# Docker Bench for Security\n\n![Docker Bench for Security running](img/benchmark_log.png)\n\nThe Docker Bench for Security is a script that checks for dozens of common best-practices around deploying Docker containers in production. The tests are all automated, and are based on the [CIS Docker Benchmark v1.6.0](https://www.cisecurity.org/benchmark/docker/).\n\nWe are making this available as an open-source utility so the Docker community can have an easy way to self-assess their hosts and Docker containers against this benchmark.\n\nRelease | CIS |\n:---:|:---:|\n1.6.0|1.6.0|\n1.5.0|1.5.0|\n1.3.6|1.4.0|\n1.3.5|1.2.0|\n1.3.3|1.1.0|\n1.3.0|1.13.0|\n\n## Running Docker Bench for Security\n\n### Run from your base host\n\nYou can simply run this script from your base host by running:\n\n```sh\ngit clone https://github.com/docker/docker-bench-security.git\ncd docker-bench-security\nsudo sh docker-bench-security.sh\n```\n\n> Note: [`jq`](https://jqlang.github.io/jq/) is an optional but recommended dependency.\n\n### Run with Docker\n\n#### Building Docker image\n\nYou have two options if you wish to build and run this container yourself:\n\n1. Use Docker Build:\n\n```sh\ngit clone https://github.com/docker/docker-bench-security.git\ncd docker-bench-security\ndocker build --no-cache -t docker-bench-security .\n```\n\nFollowed by an appropriate `docker run` command as stated below.\n\n2. Use Docker Compose:\n\n```sh\ngit clone https://github.com/docker/docker-bench-security.git\ncd docker-bench-security\ndocker-compose run --rm docker-bench-security\n```\n\n_Please note that the `docker/docker-bench-security` image is out-of-date and and a manual build is required. See [#405](https://github.com/docker/docker-bench-security/issues/405) for more information._\n\nNote that this container is being run with a *lot* of privilege -- sharing the host's filesystem, pid and network namespaces, due to portions of the benchmark applying to the running host.\n\n### Using the container\n\n```sh\ndocker run --rm --net host --pid host --userns host --cap-add audit_control \\\n    -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \\\n    -v /etc:/etc:ro \\\n    -v /usr/bin/containerd:/usr/bin/containerd:ro \\\n    -v /usr/bin/runc:/usr/bin/runc:ro \\\n    -v /usr/lib/systemd:/usr/lib/systemd:ro \\\n    -v /var/lib:/var/lib:ro \\\n    -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n    --label docker_bench_security \\\n    docker-bench-security\n```\n\nDon't forget to adjust the shared volumes according to your operating system.\nSome examples are:\n\n1. On Ubuntu the `docker.service` and `docker.secret` files are located in\n   `/lib/systemd/system` folder by default.\n\n```sh\ndocker run --rm --net host --pid host --userns host --cap-add audit_control \\\n    -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \\\n    -v /etc:/etc:ro \\\n    -v /lib/systemd/system:/lib/systemd/system:ro \\\n    -v /usr/bin/containerd:/usr/bin/containerd:ro \\\n    -v /usr/bin/runc:/usr/bin/runc:ro \\\n    -v /usr/lib/systemd:/usr/lib/systemd:ro \\\n    -v /var/lib:/var/lib:ro \\\n    -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n    --label docker_bench_security \\\n    docker-bench-security\n```\n\n2. The /etc/hostname file is missing on macOS, so it will need to be created first. Also, `Docker Desktop` on macOS doesn't have `/usr/lib/systemd` or the above Docker\n    binaries.\n\n```sh\nsudo touch /etc/hostname\n\ndocker run --rm --net host --pid host --userns host --cap-add audit_control \\\n    -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \\\n    -v /etc:/etc \\\n    -v /var/lib:/var/lib:ro \\\n    -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n    --label docker_bench_security \\\n    docker-bench-security\n```\n\n### Note\n\nDocker bench requires Docker 1.13.0 or later in order to run.\n\nNote that when distributions don't contain `auditctl`, the audit tests will check `/etc/audit/audit.rules` to see if a rule is present instead.\n\n### Docker Bench for Security options\n\n```sh\n  -b           optional  Do not print colors\n  -h           optional  Print this help message\n  -l FILE      optional  Log output in FILE, inside container if run using docker\n  -u USERS     optional  Comma delimited list of trusted docker user(s)\n  -c CHECK     optional  Comma delimited list of specific check(s) id\n  -e CHECK     optional  Comma delimited list of specific check(s) id to exclude\n  -i INCLUDE   optional  Comma delimited list of patterns within a container or image name to check\n  -x EXCLUDE   optional  Comma delimited list of patterns within a container or image name to exclude from check\n  -t LABEL     optional  Comma delimited list of labels within a container or image to check\n  -n LIMIT     optional  In JSON output, when reporting lists of items (containers, images, etc.), limit the number of reported items to LIMIT. Default 0 (no limit).\n  -p PRINT     optional  Disable the printing of remediation measures. Default: print remediation measures.\n```\n\nBy default the Docker Bench for Security script will run all available CIS tests and produce\nlogs in the log folder from current directory, named `docker-bench-security.log.json` and\n`docker-bench-security.log`.\n\nIf the docker container is used then the log files will be created inside the container in location `/usr/local/bin/log/`. If you wish to access them from the host after the container has been run you will need to mount a volume for storing them in.\n\nThe CIS based checks are named `check_<section>_<number>`, e.g. `check_2_6` and community contributed checks are named `check_c_<number>`.\n\n`sh docker-bench-security.sh -c check_2_2` will only run check `2.2 Ensure the logging level is set to 'info'`.\n\n`sh docker-bench-security.sh -e check_2_2` will run all available checks except `2.2 Ensure the logging level is set to 'info'`.\n\n`sh docker-bench-security.sh -e docker_enterprise_configuration` will run all available checks except the docker_enterprise_configuration group\n\n`sh docker-bench-security.sh -e docker_enterprise_configuration,check_2_2` will run all available checks except the docker_enterprise_configuration group and `2.2 Ensure the logging level is set to 'info'`\n\n`sh docker-bench-security.sh -c container_images,container_runtime` will run just the container_images and container_runtime checks\n\n`sh docker-bench-security.sh -c container_images -e check_4_5` will run just the container_images checks except `4.5 Ensure Content trust for Docker is Enabled`\n\nNote that when submitting checks, provide information why it is a reasonable test to add and please include some kind of official documentation verifying that information.\n",
        "releases": [
            {
                "name": "v1.6.1",
                "date": "2023-12-20T14:44:16Z"
            },
            {
                "name": "v1.6.0",
                "date": "2023-08-25T12:49:01Z"
            },
            {
                "name": "v1.5.0",
                "date": "2023-03-15T15:54:36Z"
            },
            {
                "name": "v1.3.6",
                "date": "2022-03-07T12:53:59Z"
            },
            {
                "name": "v.1.3.5",
                "date": "2019-11-05T12:49:51Z"
            },
            {
                "name": "v1.3.3",
                "date": "2017-10-06T13:59:41Z"
            },
            {
                "name": "v1.3.2",
                "date": "2017-03-30T07:29:16Z"
            },
            {
                "name": "v1.3.1",
                "date": "2017-03-03T12:58:44Z"
            },
            {
                "name": "v1.3.0",
                "date": "2017-01-24T15:08:55Z"
            },
            {
                "name": "v1.2.0",
                "date": "2017-01-24T07:45:07Z"
            },
            {
                "name": "v1.1.0",
                "date": "2017-01-20T08:59:26Z"
            }
        ]
    }
}