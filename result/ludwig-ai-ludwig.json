{
    "https://api.github.com/repos/ludwig-ai/ludwig": {
        "forks": 1198,
        "watchers": 11279,
        "stars": 11279,
        "languages": {
            "Python": 5207427,
            "Dockerfile": 6352
        },
        "commits": [
            "2024-10-17T22:52:09Z",
            "2024-10-17T22:48:25Z",
            "2024-08-21T07:05:41Z",
            "2024-10-17T22:41:53Z",
            "2024-08-21T07:05:41Z",
            "2024-08-06T14:44:04Z",
            "2024-07-30T17:28:36Z",
            "2024-07-11T16:22:02Z",
            "2024-06-01T19:40:44Z",
            "2024-05-30T14:52:09Z",
            "2024-05-23T22:13:49Z",
            "2024-05-23T16:24:32Z",
            "2024-04-29T16:39:29Z",
            "2024-04-18T04:59:38Z",
            "2024-04-08T23:30:36Z",
            "2024-04-08T22:14:13Z",
            "2024-04-08T15:47:37Z",
            "2024-04-05T20:44:46Z",
            "2024-03-24T05:07:22Z",
            "2024-03-22T07:06:01Z",
            "2024-03-22T05:56:16Z",
            "2024-03-21T20:54:01Z",
            "2024-03-20T00:15:20Z",
            "2024-03-17T02:34:54Z",
            "2024-03-12T17:53:26Z",
            "2024-03-11T16:28:07Z",
            "2024-03-07T16:38:59Z",
            "2024-03-07T07:56:23Z",
            "2024-03-05T20:10:01Z",
            "2024-03-05T04:08:57Z"
        ],
        "creation_date": "2018-12-27T23:58:12Z",
        "contributors": 30,
        "topics": [
            "computer-vision",
            "data-centric",
            "data-science",
            "deep",
            "deep-learning",
            "deeplearning",
            "fine-tuning",
            "learning",
            "llama",
            "llama2",
            "llm",
            "llm-training",
            "machine-learning",
            "machinelearning",
            "mistral",
            "ml",
            "natural-language",
            "natural-language-processing",
            "neural-network",
            "pytorch"
        ],
        "subscribers": 194,
        "readme": "<p align=\"center\">\n  <a href=\"https://ludwig.ai\">\n    <img src=\"https://github.com/ludwig-ai/ludwig-docs/raw/master/docs/images/ludwig_hero_smaller.jpg\" height=\"150\">\n  </a>\n</p>\n\n<div align=\"center\">\n\n_Declarative deep learning framework built for scale and efficiency._\n\n[![PyPI version](https://badge.fury.io/py/ludwig.svg)](https://badge.fury.io/py/ludwig)\n[![Discord](https://dcbadge.vercel.app/api/server/CBgdrGnZjy?style=flat&theme=discord-inverted)](https://discord.gg/CBgdrGnZjy)\n[![DockerHub](https://img.shields.io/docker/pulls/ludwigai/ludwig.svg)](https://hub.docker.com/r/ludwigai)\n[![Downloads](https://pepy.tech/badge/ludwig)](https://pepy.tech/project/ludwig)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/ludwig-ai/ludwig/blob/master/LICENSE)\n[![X](https://img.shields.io/twitter/follow/ludwig_ai.svg?style=social&logo=twitter)](https://twitter.com/ludwig_ai)\n\n</div>\n\n> \\[!IMPORTANT\\]\n> Our community has moved to [Discord](https://discord.gg/CBgdrGnZjy) -- please join us there!\n\n# \ud83d\udcd6 What is Ludwig?\n\nLudwig is a **low-code** framework for building **custom** AI models like **LLMs** and other deep neural networks.\n\nKey features:\n\n- \ud83d\udee0 **Build custom models with ease:** a declarative YAML configuration file is all you need to train a state-of-the-art LLM on your data. Support for multi-task and multi-modality learning. Comprehensive config validation detects invalid parameter combinations and prevents runtime failures.\n- \u26a1 **Optimized for scale and efficiency:** automatic batch size selection, distributed training ([DDP](https://pytorch.org/tutorials/beginner/ddp_series_theory.html), [DeepSpeed](https://github.com/microsoft/DeepSpeed)), parameter efficient fine-tuning ([PEFT](https://github.com/huggingface/peft)), 4-bit quantization (QLoRA), paged and 8-bit optimizers, and larger-than-memory datasets.\n- \ud83d\udcd0 **Expert level control:** retain full control of your models down to the activation functions. Support for hyperparameter optimization, explainability, and rich metric visualizations.\n- \ud83e\uddf1 **Modular and extensible:** experiment with different model architectures, tasks, features, and modalities with just a few parameter changes in the config. Think building blocks for deep learning.\n- \ud83d\udea2 **Engineered for production:** prebuilt [Docker](https://hub.docker.com/u/ludwigai) containers, native support for running with [Ray](https://www.ray.io/) on [Kubernetes](https://github.com/ray-project/kuberay), export models to [Torchscript](https://pytorch.org/docs/stable/jit.html) and [Triton](https://developer.nvidia.com/triton-inference-server), upload to [HuggingFace](https://huggingface.co/models) with one command.\n\nLudwig is hosted by the\n[Linux Foundation AI & Data](https://lfaidata.foundation/).\n\n![img](https://raw.githubusercontent.com/ludwig-ai/ludwig-docs/master/docs/images/ludwig_legos_unanimated.gif)\n\n# \ud83d\udcbe Installation\n\nInstall from PyPi. Be aware that Ludwig requires Python 3.8+.\n\n```shell\npip install ludwig\n```\n\nOr install with all optional dependencies:\n\n```shell\npip install ludwig[full]\n```\n\nPlease see [contributing](https://github.com/ludwig-ai/ludwig/blob/master/CONTRIBUTING.md) for more detailed installation instructions.\n\n# \ud83d\ude82 Getting Started\n\nWant to take a quick peek at some of the Ludwig 0.8 features? Check out this Colab Notebook \ud83d\ude80 [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1lB4ALmEyvcMycE3Mlnsd7I3bc0zxvk39)\n\nLooking to fine-tune Llama-2 or Mistral? Check out these notebooks:\n\n1. Fine-Tune Llama-2-7b: [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1r4oSEwRJpYKBPM0M0RSh0pBEYK_gBKbe)\n1. Fine-Tune Llama-2-13b: [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1zmSEzqZ7v4twBrXagj1TE_C--RNyVAyu)\n1. Fine-Tune Mistral-7b: [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1i_8A1n__b7ljRWHzIsAdhO7u7r49vUm4)\n\nFor a full tutorial, check out the official [getting started guide](https://ludwig-ai.github.io/ludwig-docs/latest/getting_started/), or take a look at end-to-end [Examples](https://ludwig-ai.github.io/ludwig-docs/latest/examples).\n\n## Large Language Model Fine-Tuning\n\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1c3AO8l_H6V_x37RwQ8V7M6A-RmcBf2tG?usp=sharing)\n\nLet's fine-tune a pretrained LLaMA-2-7b large language model to follow instructions like a chatbot (\"instruction tuning\").\n\n### Prerequisites\n\n- [HuggingFace API Token](https://huggingface.co/docs/hub/security-tokens)\n- Access approval to [Llama2-7b-hf](https://huggingface.co/meta-llama/Llama-2-7b-hf)\n- GPU with at least 12 GiB of VRAM (in our tests, we used an Nvidia T4)\n\n### Running\n\nWe'll use the [Stanford Alpaca](https://crfm.stanford.edu/2023/03/13/alpaca.html) dataset, which will be formatted as a table-like file that looks like this:\n\n|                    instruction                    |      input       |                      output                       |\n| :-----------------------------------------------: | :--------------: | :-----------------------------------------------: |\n|       Give three tips for staying healthy.        |                  | 1.Eat a balanced diet and make sure to include... |\n| Arrange the items given below in the order to ... | cake, me, eating |                  I eating cake.                   |\n| Write an introductory paragraph about a famous... |  Michelle Obama  | Michelle Obama is an inspirational woman who r... |\n|                        ...                        |       ...        |                        ...                        |\n\nCreate a YAML config file named `model.yaml` with the following:\n\n```yaml\nmodel_type: llm\nbase_model: meta-llama/Llama-2-7b-hf\n\nquantization:\n  bits: 4\n\nadapter:\n  type: lora\n\nprompt:\n  template: |\n    Below is an instruction that describes a task, paired with an input that may provide further context.\n    Write a response that appropriately completes the request.\n\n    ### Instruction:\n    {instruction}\n\n    ### Input:\n    {input}\n\n    ### Response:\n\ninput_features:\n  - name: prompt\n    type: text\n\noutput_features:\n  - name: output\n    type: text\n\ntrainer:\n  type: finetune\n  learning_rate: 0.0001\n  batch_size: 1\n  gradient_accumulation_steps: 16\n  epochs: 3\n  learning_rate_scheduler:\n    decay: cosine\n    warmup_fraction: 0.01\n\npreprocessing:\n  sample_ratio: 0.1\n\nbackend:\n  type: local\n```\n\nAnd now let's train the model:\n\n```bash\nexport HUGGING_FACE_HUB_TOKEN = \"<api_token>\"\n\nludwig train --config model.yaml --dataset \"ludwig://alpaca\"\n```\n\n## Supervised ML\n\nLet's build a neural network that predicts whether a given movie critic's review on [Rotten Tomatoes](https://www.kaggle.com/stefanoleone992/rotten-tomatoes-movies-and-critic-reviews-dataset) was positive or negative.\n\nOur dataset will be a CSV file that looks like this:\n\n|     movie_title      | content_rating |              genres              | runtime | top_critic | review_content                                                                                                                                                                                                   | recommended |\n| :------------------: | :------------: | :------------------------------: | :-----: | ---------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------- |\n| Deliver Us from Evil |       R        |    Action & Adventure, Horror    |  117.0  | TRUE       | Director Scott Derrickson and his co-writer, Paul Harris Boardman, deliver a routine procedural with unremarkable frights.                                                                                       | 0           |\n|       Barbara        |     PG-13      | Art House & International, Drama |  105.0  | FALSE      | Somehow, in this stirring narrative, Barbara manages to keep hold of her principles, and her humanity and courage, and battles to save a dissident teenage girl whose life the Communists are trying to destroy. | 1           |\n|   Horrible Bosses    |       R        |              Comedy              |  98.0   | FALSE      | These bosses cannot justify either murder or lasting comic memories, fatally compromising a farce that could have been great but ends up merely mediocre.                                                        | 0           |\n|         ...          |      ...       |               ...                |   ...   | ...        | ...                                                                                                                                                                                                              | ...         |\n\nDownload a sample of the dataset from [here](https://ludwig.ai/latest/data/rotten_tomatoes.csv).\n\n```bash\nwget https://ludwig.ai/latest/data/rotten_tomatoes.csv\n```\n\nNext create a YAML config file named `model.yaml` with the following:\n\n```yaml\ninput_features:\n  - name: genres\n    type: set\n    preprocessing:\n      tokenizer: comma\n  - name: content_rating\n    type: category\n  - name: top_critic\n    type: binary\n  - name: runtime\n    type: number\n  - name: review_content\n    type: text\n    encoder:\n      type: embed\noutput_features:\n  - name: recommended\n    type: binary\n```\n\nThat's it! Now let's train the model:\n\n```bash\nludwig train --config model.yaml --dataset rotten_tomatoes.csv\n```\n\n**Happy modeling**\n\nTry applying Ludwig to your data. [Reach out on Discord](https://discord.gg/CBgdrGnZjy)\nif you have any questions.\n\n# \u2753 Why you should use Ludwig\n\n- **Minimal machine learning boilerplate**\n\n  Ludwig takes care of the engineering complexity of machine learning out of\n  the box, enabling research scientists to focus on building models at the\n  highest level of abstraction. Data preprocessing, hyperparameter\n  optimization, device management, and distributed training for\n  `torch.nn.Module` models come completely free.\n\n- **Easily build your benchmarks**\n\n  Creating a state-of-the-art baseline and comparing it with a new model is a\n  simple config change.\n\n- **Easily apply new architectures to multiple problems and datasets**\n\n  Apply new models across the extensive set of tasks and datasets that Ludwig\n  supports. Ludwig includes a\n  [full benchmarking toolkit](https://arxiv.org/abs/2111.04260) accessible to\n  any user, for running experiments with multiple models across multiple\n  datasets with just a simple configuration.\n\n- **Highly configurable data preprocessing, modeling, and metrics**\n\n  Any and all aspects of the model architecture, training loop, hyperparameter\n  search, and backend infrastructure can be modified as additional fields in\n  the declarative configuration to customize the pipeline to meet your\n  requirements. For details on what can be configured, check out\n  [Ludwig Configuration](https://ludwig-ai.github.io/ludwig-docs/latest/configuration/)\n  docs.\n\n- **Multi-modal, multi-task learning out-of-the-box**\n\n  Mix and match tabular data, text, images, and even audio into complex model\n  configurations without writing code.\n\n- **Rich model exporting and tracking**\n\n  Automatically track all trials and metrics with tools like Tensorboard,\n  Comet ML, Weights & Biases, MLFlow, and Aim Stack.\n\n- **Automatically scale training to multi-GPU, multi-node clusters**\n\n  Go from training on your local machine to the cloud without code changes.\n\n- **Low-code interface for state-of-the-art models, including pre-trained Huggingface Transformers**\n\n  Ludwig also natively integrates with pre-trained models, such as the ones\n  available in [Huggingface Transformers](https://huggingface.co/docs/transformers/index).\n  Users can choose from a vast collection of state-of-the-art pre-trained\n  PyTorch models to use without needing to write any code at all. For example,\n  training a BERT-based sentiment analysis model with Ludwig is as simple as:\n\n  ```shell\n  ludwig train --dataset sst5 --config_str \"{input_features: [{name: sentence, type: text, encoder: bert}], output_features: [{name: label, type: category}]}\"\n  ```\n\n- **Low-code interface for AutoML**\n\n  [Ludwig AutoML](https://ludwig-ai.github.io/ludwig-docs/latest/user_guide/automl/)\n  allows users to obtain trained models by providing just a dataset, the\n  target column, and a time budget.\n\n  ```python\n  auto_train_results = ludwig.automl.auto_train(dataset=my_dataset_df, target=target_column_name, time_limit_s=7200)\n  ```\n\n- **Easy productionisation**\n\n  Ludwig makes it easy to serve deep learning models, including on GPUs.\n  Launch a REST API for your trained Ludwig model.\n\n  ```shell\n  ludwig serve --model_path=/path/to/model\n  ```\n\n  Ludwig supports exporting models to efficient Torchscript bundles.\n\n  ```shell\n  ludwig export_torchscript -\u2013model_path=/path/to/model\n  ```\n\n# \ud83d\udcda Tutorials\n\n- [Text Classification](https://ludwig-ai.github.io/ludwig-docs/latest/examples/text_classification)\n- [Tabular Data Classification](https://ludwig-ai.github.io/ludwig-docs/latest/examples/adult_census_income)\n- [Image Classification](https://ludwig-ai.github.io/ludwig-docs/latest/examples/mnist)\n- [Multimodal Classification](https://ludwig-ai.github.io/ludwig-docs/latest/examples/multimodal_classification)\n\n# \ud83d\udd2c Example Use Cases\n\n- [Named Entity Recognition Tagging](https://ludwig-ai.github.io/ludwig-docs/latest/examples/ner_tagging)\n- [Natural Language Understanding](https://ludwig-ai.github.io/ludwig-docs/latest/examples/nlu)\n- [Machine Translation](https://ludwig-ai.github.io/ludwig-docs/latest/examples/machine_translation)\n- [Chit-Chat Dialogue Modeling through seq2seq](https://ludwig-ai.github.io/ludwig-docs/latest/examples/seq2seq)\n- [Sentiment Analysis](https://ludwig-ai.github.io/ludwig-docs/latest/examples/sentiment_analysis)\n- [One-shot Learning with Siamese Networks](https://ludwig-ai.github.io/ludwig-docs/latest/examples/oneshot)\n- [Visual Question Answering](https://ludwig-ai.github.io/ludwig-docs/latest/examples/visual_qa)\n- [Spoken Digit Speech Recognition](https://ludwig-ai.github.io/ludwig-docs/latest/examples/speech_recognition)\n- [Speaker Verification](https://ludwig-ai.github.io/ludwig-docs/latest/examples/speaker_verification)\n- [Binary Classification (Titanic)](https://ludwig-ai.github.io/ludwig-docs/latest/examples/titanic)\n- [Timeseries forecasting](https://ludwig-ai.github.io/ludwig-docs/latest/examples/forecasting)\n- [Timeseries forecasting (Weather)](https://ludwig-ai.github.io/ludwig-docs/latest/examples/weather)\n- [Movie rating prediction](https://ludwig-ai.github.io/ludwig-docs/latest/examples/movie_ratings)\n- [Multi-label classification](https://ludwig-ai.github.io/ludwig-docs/latest/examples/multi_label)\n- [Multi-Task Learning](https://ludwig-ai.github.io/ludwig-docs/latest/examples/multi_task)\n- [Simple Regression: Fuel Efficiency Prediction](https://ludwig-ai.github.io/ludwig-docs/latest/examples/fuel_efficiency)\n- [Fraud Detection](https://ludwig-ai.github.io/ludwig-docs/latest/examples/fraud)\n\n# \ud83d\udca1 More Information\n\nRead our publications on [Ludwig](https://arxiv.org/pdf/1909.07930.pdf), [declarative ML](https://arxiv.org/pdf/2107.08148.pdf), and [Ludwig\u2019s SoTA benchmarks](https://openreview.net/pdf?id=hwjnu6qW7E4).\n\nLearn more about [how Ludwig works](https://ludwig-ai.github.io/ludwig-docs/latest/user_guide/how_ludwig_works/), [how to get started](https://ludwig-ai.github.io/ludwig-docs/latest/getting_started/), and work through more [examples](https://ludwig-ai.github.io/ludwig-docs/latest/examples).\n\nIf you are interested in [contributing](https://github.com/ludwig-ai/ludwig/blob/master/CONTRIBUTING.md), have questions, comments, or thoughts to share, or if you just want to be in the\nknow, please consider [joining our Community Discord](https://discord.gg/CBgdrGnZjy) and follow us on [X](https://twitter.com/ludwig_ai)!\n\n# \ud83e\udd1d Join the community to build Ludwig with us\n\nLudwig is an actively managed open-source project that relies on contributions from folks just like\nyou. Consider joining the active group of Ludwig contributors to make Ludwig an even\nmore accessible and feature rich framework for everyone to use!\n\n<a href=\"https://github.com/ludwig-ai/ludwig/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=ludwig-ai/ludwig\" />\n</a><br/>\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=ludwig-ai/ludwig&type=Date)](https://star-history.com/#ludwig-ai/ludwig&Date)\n\n# \ud83d\udc4b Getting Involved\n\n- [Discord](https://discord.gg/CBgdrGnZjy)\n- [X](https://twitter.com/ludwig_ai)\n- [Medium](https://medium.com/ludwig-ai)\n- [GitHub Issues](https://github.com/ludwig-ai/ludwig/issues)\n",
        "releases": [
            {
                "name": "Ludwig v0.10.4",
                "date": "2024-07-30T00:11:51Z"
            },
            {
                "name": "Ludwig v0.10.3",
                "date": "2024-04-08T23:13:41Z"
            },
            {
                "name": "Release v0.10.2",
                "date": "2024-03-21T20:24:34Z"
            },
            {
                "name": "Ludwig v0.10.1",
                "date": "2024-02-28T07:30:10Z"
            },
            {
                "name": "v0.10.0",
                "date": "2024-02-22T19:20:16Z"
            },
            {
                "name": "",
                "date": "2024-01-23T04:10:36Z"
            },
            {
                "name": "v0.9.2: Fixes for OOM and other errors in Ludwig 0.9.1",
                "date": "2024-01-16T21:14:25Z"
            },
            {
                "name": "v0.9.1",
                "date": "2023-12-20T21:47:42Z"
            },
            {
                "name": "v0.9: Mixtral, Phi, Zephyr, and text classification for LLMs",
                "date": "2023-12-19T22:20:40Z"
            },
            {
                "name": "v0.8.6",
                "date": "2023-10-13T15:47:19Z"
            },
            {
                "name": "v0.8.5",
                "date": "2023-10-09T21:39:32Z"
            },
            {
                "name": "v0.8.4",
                "date": "2023-09-19T16:20:12Z"
            },
            {
                "name": "v0.8.3",
                "date": "2023-09-12T01:05:37Z"
            },
            {
                "name": "v0.8.2",
                "date": "2023-09-01T14:06:48Z"
            },
            {
                "name": "v0.8.1.post1",
                "date": "2023-08-15T16:26:33Z"
            },
            {
                "name": "v0.8.1",
                "date": "2023-08-11T23:46:16Z"
            },
            {
                "name": "v0.8: Low Code Framework to Efficiently Build Custom LLMs on Your Data",
                "date": "2023-08-09T04:55:50Z"
            },
            {
                "name": "v0.7.5",
                "date": "2023-08-07T19:59:59Z"
            },
            {
                "name": "v0.7.4",
                "date": "2023-03-23T15:29:23Z"
            },
            {
                "name": "v0.7.3",
                "date": "2023-03-17T20:43:43Z"
            },
            {
                "name": "v0.7.2",
                "date": "2023-03-04T17:03:24Z"
            },
            {
                "name": "v0.7.1",
                "date": "2023-03-02T05:21:22Z"
            },
            {
                "name": "v0.7",
                "date": "2023-02-27T16:59:12Z"
            },
            {
                "name": "v0.7.beta",
                "date": "2023-01-31T00:42:49Z"
            },
            {
                "name": "v0.6.4",
                "date": "2022-10-28T18:35:03Z"
            },
            {
                "name": "v0.6.3",
                "date": "2022-10-20T21:36:25Z"
            },
            {
                "name": "v0.6.2",
                "date": "2022-10-13T02:08:29Z"
            },
            {
                "name": "v0.6.1",
                "date": "2022-10-04T18:53:20Z"
            },
            {
                "name": "v0.6 \u200a- \u200aGradient Boosted Models, Schema Validation, and Pipelined TorchScript",
                "date": "2022-09-27T23:03:06Z"
            },
            {
                "name": "v0.6rc1",
                "date": "2022-09-20T23:59:43Z"
            },
            {
                "name": "v0.6.beta",
                "date": "2022-09-08T20:56:32Z"
            },
            {
                "name": "v0.5.5",
                "date": "2022-08-02T19:29:53Z"
            },
            {
                "name": "v0.5.4",
                "date": "2022-07-12T21:31:43Z"
            },
            {
                "name": "v0.5.3",
                "date": "2022-06-25T19:50:42Z"
            },
            {
                "name": "v0.5.2",
                "date": "2022-06-08T21:06:54Z"
            },
            {
                "name": "v0.5.1",
                "date": "2022-05-23T21:44:05Z"
            },
            {
                "name": "v0.5: Declarative Machine Learning, now on PyTorch",
                "date": "2022-05-10T18:20:58Z"
            },
            {
                "name": "v0.5rc2",
                "date": "2022-03-07T20:56:18Z"
            },
            {
                "name": "v0.5rc1",
                "date": "2022-02-10T20:13:38Z"
            },
            {
                "name": "\u200b\u200bv0.4.1: Ray training, Ray datasets, experimental AutoML with auto config generation integrated with hyperopt on RayTune, image improvements, Python3.9/TF2.7",
                "date": "2022-02-01T07:28:40Z"
            },
            {
                "name": "v0.4: Distributed processing and training with Ray and Dask, Distributed hyperopt with RayTune, TabNet, Remote FS, MLflow for monitoring and serving, new Datasets",
                "date": "2021-06-15T04:22:19Z"
            },
            {
                "name": "v0.3.3: New datasets, dependency fixes",
                "date": "2021-02-01T00:23:30Z"
            },
            {
                "name": "v0.3.2: New datasets, better processing of binary and numerical, minor fixes",
                "date": "2020-12-29T03:18:52Z"
            },
            {
                "name": " v0.3.1: Datasets, cache checksum, improvements for text and visualization",
                "date": "2020-11-16T23:55:59Z"
            },
            {
                "name": "v0.3: TensorFlow 2, Hyperparameter optimization, Hugging Face Transformers integration, new data formats and more",
                "date": "2020-10-06T00:03:54Z"
            },
            {
                "name": "v0.2.2: WandB, K-Fold cross validation, better tracking of measures, and many bugfixes.",
                "date": "2020-03-06T21:09:47Z"
            },
            {
                "name": "v0.2.1: Vector features, Norwegian and Lithuanian tokenizers, many bugfixes.",
                "date": "2019-10-13T00:36:57Z"
            },
            {
                "name": "v0.2: BERT, Audio / Speech, geospacial and temporal features, Visualization API, Server and improved Comet.ml integration",
                "date": "2019-07-24T07:18:26Z"
            },
            {
                "name": "v0.1.2: Import speed improvements, safety-related fixes and various minor fixes and improvements",
                "date": "2019-04-27T00:08:59Z"
            },
            {
                "name": "v0.1.1: Bug fixes, new parameters and Comet.ml integration",
                "date": "2019-04-09T05:41:22Z"
            },
            {
                "name": "v0.1.0: First release",
                "date": "2019-02-11T03:34:29Z"
            }
        ]
    }
}