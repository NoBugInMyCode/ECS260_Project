{
    "https://api.github.com/repos/Ramotion/folding-cell": {
        "forks": 1144,
        "watchers": 10231,
        "stars": 10231,
        "languages": {
            "Swift": 31564,
            "Objective-C": 6114,
            "Ruby": 483
        },
        "commits": [
            "2020-04-06T06:48:28Z",
            "2019-11-06T12:56:55Z",
            "2019-10-12T16:11:03Z",
            "2019-10-12T16:10:14Z",
            "2019-10-12T00:37:23Z",
            "2019-10-12T00:32:04Z",
            "2019-10-11T23:29:47Z",
            "2019-10-11T22:55:35Z",
            "2019-05-21T06:31:10Z",
            "2019-05-13T06:43:16Z",
            "2019-04-22T07:22:38Z",
            "2019-04-18T14:57:08Z",
            "2019-04-11T08:55:22Z",
            "2019-04-04T07:21:45Z",
            "2019-03-28T07:06:06Z",
            "2019-03-28T06:56:35Z",
            "2019-03-21T06:21:01Z",
            "2019-03-14T09:42:54Z",
            "2019-03-07T13:27:02Z",
            "2019-03-01T06:20:55Z",
            "2019-02-22T06:33:36Z",
            "2019-02-15T06:55:32Z",
            "2019-02-08T08:17:18Z",
            "2019-02-01T09:31:05Z",
            "2019-01-25T06:59:22Z",
            "2019-01-18T06:56:15Z",
            "2019-01-11T07:26:34Z",
            "2019-01-11T07:26:03Z",
            "2019-01-04T09:31:02Z",
            "2018-12-27T15:45:31Z"
        ],
        "creation_date": "2015-12-21T14:29:48Z",
        "contributors": 22,
        "topics": [
            "animation",
            "ios",
            "library",
            "material-design",
            "swift",
            "ui"
        ],
        "subscribers": 269,
        "readme": "<a href=\"https://www.ramotion.com/agency/app-development/?utm_source=gthb&utm_medium=repo&utm_campaign=folding-cell\"><img src=\"https://github.com/Ramotion/folding-cell/blob/master/header.png\"></a>\n\n<a href=\"https://github.com/Ramotion/folding-cell\">\n<img align=\"left\" src=\"https://github.com/Ramotion/folding-cell/blob/master/Screenshots/foldingCell.gif\" width=\"480\" height=\"360\" /></a>\n\n<p><h1 align=\"left\">FOLDING CELL</h1></p>\n\n<h4>Expanding content cell with animation inspired by folding paper card material design.</h4>\n\n\n___\n\n\n\n<p><h6>We specialize in the designing and coding of custom UI for Mobile Apps and Websites.</h6>\n<a href=\"https://www.ramotion.com/agency/app-development/?utm_source=gthb&utm_medium=repo&utm_campaign=folding-cell\">\n<img src=\"https://github.com/ramotion/gliding-collection/raw/master/contact_our_team@2x.png\" width=\"187\" height=\"34\"></a>\n</p>\n<p><h6>Stay tuned for the latest updates:</h6>\n<a href=\"https://goo.gl/rPFpid\" >\n<img src=\"https://i.imgur.com/ziSqeSo.png/\" width=\"156\" height=\"28\"></a></p>\n\n</br>\n\n[![CocoaPods](https://img.shields.io/cocoapods/p/FoldingCell.svg)](https://cocoapods.org/pods/FoldingCell)\n[![CocoaPods](https://img.shields.io/cocoapods/v/FoldingCell.svg)](http://cocoapods.org/pods/FoldingCell)\n[![Twitter](https://img.shields.io/badge/Twitter-@Ramotion-blue.svg?style=flat)](http://twitter.com/Ramotion)\n[![Travis](https://img.shields.io/travis/Ramotion/folding-cell.svg)](https://travis-ci.org/Ramotion/folding-cell)\n[![codebeat badge](https://codebeat.co/badges/6f67da5d-c416-4bac-9fb7-c2dc938feedc)](https://codebeat.co/projects/github-com-ramotion-folding-cell)\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\n[![Swift 4.0](https://img.shields.io/badge/Swift-5.0-green.svg?style=flat)](https://developer.apple.com/swift/)\n[![Analytics](https://ga-beacon.appspot.com/UA-84973210-1/ramotion/folding-cell)](https://github.com/igrigorik/ga-beacon)\n[![Donate](https://img.shields.io/badge/Donate-PayPal-blue.svg)](https://paypal.me/Ramotion)\n\n## Requirements\n\n- iOS 8.0+\n- Xcode 10.2\n\n## Installation\n\nJust add the FoldingCell.swift file to your project.\n\nor use [CocoaPods](https://cocoapods.org) with Podfile:\n```\npod 'FoldingCell'\n```\nor [Carthage](https://github.com/Carthage/Carthage) users can simply add Mantle to their `Cartfile`:\n```\ngithub \"Ramotion/folding-cell\"\n```\nor [Swift Package Manager](https://swift.org/package-manager/) by adding:\n```\ndependencies: [\n.package(url: \"https://github.com/Ramotion/folding-cell.git\", from: \"5.0.2\")\n]\n```\nto `Package.swift`\n\nor just drag and drop FoldingCell.swift file to your project\n\n## Solution\n![Solution](https://raw.githubusercontent.com/Ramotion/folding-cell/master/Tutorial-resources/Solution.png)\n## Usage\n\n1) Create a new cell inheriting from `FoldingCell`\n\n2) Add a UIView to your cell in your storyboard or nib file, inheriting from `RotatedView`.\nConnect the outlet from this view to the cell property `foregroundView`.\nAdd constraints from this view to the superview, as in this picture:\n\n![1.1](https://raw.githubusercontent.com/Ramotion/folding-cell/master/Tutorial-resources/1.1.png)\n\n(constants of constraints may be different). Connect the outlet from this top constraint to the cell property `foregroundViewTop`\n. (This view will be shown when the cell is in its normal state).\n\n3) Add other UIViews to your cell, connect the outlet from this view to the cell\nproperty `containerView`. Add constraints from this view to the superview like in the picture:\n\n![1.2](https://raw.githubusercontent.com/Ramotion/folding-cell/master/Tutorial-resources/1.2.png)\n\n(constants of constraints may be different). Connect the outlet from this top constraint to the cell property `containerViewTop`.\n(This view will be shown when the cell is opened)\n\nYour result should be something like this picture:\n\n![1.3](https://raw.githubusercontent.com/Ramotion/folding-cell/master/Tutorial-resources/1.3.png)\n\n\n4) Set ``` @IBInspectable var itemCount: NSInteger ``` property is a count of folding (it IBInspectable you can set in storyboard). range 2 or greater. Default value is 2\n\nOk, we've finished configuring the cell.\n\n5) Adding code to your UITableViewController\n\n5.1) Add constants:\n``` swift\nfileprivate struct C {\n  struct CellHeight {\n    static let close: CGFloat = *** // equal or greater foregroundView height\n    static let open: CGFloat = *** // equal or greater containerView height\n  }\n}\n```\n5.2) Add property for calculate cells height\n\n``` swift\n     var cellHeights = (0..<CELLCOUNT).map { _ in C.CellHeight.close }\n```\n\n5.3) Override method:\n``` swift\n    override func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {\n        return cellHeights[indexPath.row]\n    }\n```\n\n5.4) Added code to method:\n``` swift\n    override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {\n        guard case let cell as FoldingCell = tableView.cellForRowAtIndexPath(indexPath) else {\n          return\n        }\n\n        var duration = 0.0\n        if cellIsCollapsed {\n            cellHeights[indexPath.row] = Const.openCellHeight\n            cell.unfold(true, animated: true, completion: nil)\n            duration = 0.5\n        } else {\n            cellHeights[indexPath.row] = Const.closeCellHeight\n            cell.unfold(false, animated: true, completion: nil)\n            duration = 0.8\n        }\n\n        UIView.animateWithDuration(duration, delay: 0, options: .CurveEaseOut, animations: { _ in\n            tableView.beginUpdates()\n            tableView.endUpdates()\n        }, completion: nil)\n    }\n```\n5.5) Control if the cell is open or closed\n``` swift\n  override func tableView(tableView: UITableView, willDisplayCell cell: UITableViewCell, forRowAtIndexPath indexPath: NSIndexPath) {\n\n        if case let cell as FoldingCell = cell {\n            if cellHeights![indexPath.row] == C.cellHeights.close {\n                foldingCell.selectedAnimation(false, animated: false, completion:nil)\n            } else {\n                foldingCell.selectedAnimation(true, animated: false, completion: nil)\n            }\n        }\n    }\n```\n\n6) Add this code to your new cell class\n``` swift\n    override func animationDuration(itemIndex:NSInteger, type:AnimationType)-> NSTimeInterval {\n\n        // durations count equal it itemCount\n        let durations = [0.33, 0.26, 0.26] // timing animation for each view\n        return durations[itemIndex]\n    }\n```\n\n## if don't use storyboard and xib files\n\nCreate foregroundView and containerView from code (steps 2 - 3) look example:\n[Folding-cell-programmatically](https://github.com/ober01/Folding-cell-programmatically)\n\n## \ud83d\uddc2 Check this library on other language:\n<a href=\"https://github.com/Ramotion/folding-cell-android\">\n<img src=\"https://github.com/ramotion/navigation-stack/raw/master/Android_Java@2x.png\" width=\"178\" height=\"81\"></a>\n\n\n## \ud83d\udcc4 License\n\nFolding cell is released under the MIT license.\nSee [LICENSE](./LICENSE) for details.\n\nThis library is a part of a <a href=\"https://github.com/Ramotion/swift-ui-animation-components-and-libraries\"><b>selection of our best UI open-source projects.</b></a>\n\nIf you use the open-source library in your project, please make sure to credit and backlink to https://www.ramotion.com/\n\n## \ud83d\udcf1 Get the Showroom App for iOS to give it a try\nTry this UI component and more like this in our iOS app. Contact us if interested.\n\n<a href=\"https://itunes.apple.com/app/apple-store/id1182360240?pt=550053&ct=folding-cell&mt=8\" >\n<img src=\"https://github.com/ramotion/gliding-collection/raw/master/app_store@2x.png\" width=\"117\" height=\"34\"></a>\n\n<a href=\"https://www.ramotion.com/agency/app-development/?utm_source=gthb&utm_medium=repo&utm_campaign=folding-cell\">\n<img src=\"https://github.com/ramotion/gliding-collection/raw/master/contact_our_team@2x.png\" width=\"187\" height=\"34\"></a>\n",
        "releases": [
            {
                "name": "Swift Package Manager",
                "date": "2019-10-12T00:38:48Z"
            }
        ]
    }
}