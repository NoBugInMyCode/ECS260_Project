{
    "https://api.github.com/repos/jakesgordon/javascript-state-machine": {
        "forks": 966,
        "watchers": 8713,
        "stars": 8713,
        "languages": {
            "JavaScript": 209861,
            "HTML": 938
        },
        "commits": [
            "2018-07-12T14:33:43Z",
            "2018-07-12T14:28:44Z",
            "2018-04-02T16:33:15Z",
            "2017-10-24T17:33:20Z",
            "2017-10-24T17:02:17Z",
            "2017-06-10T22:58:16Z",
            "2017-06-10T21:42:55Z",
            "2017-06-10T21:34:42Z",
            "2017-06-10T21:24:53Z",
            "2017-06-10T21:18:58Z",
            "2017-06-10T18:28:12Z",
            "2017-01-10T20:12:00Z",
            "2017-01-10T18:35:12Z",
            "2017-01-10T17:56:37Z",
            "2017-01-10T17:52:39Z",
            "2017-01-10T17:49:35Z",
            "2017-01-07T20:20:20Z",
            "2017-01-07T20:17:35Z",
            "2017-01-07T20:14:04Z",
            "2017-01-07T20:11:09Z",
            "2016-11-21T01:29:57Z",
            "2016-11-21T00:27:52Z",
            "2016-11-21T00:23:39Z",
            "2016-11-21T00:08:48Z",
            "2016-11-21T00:02:04Z",
            "2016-11-20T23:57:55Z",
            "2016-11-20T23:48:07Z",
            "2016-11-20T23:07:31Z",
            "2016-11-20T23:03:34Z",
            "2016-11-20T22:18:43Z"
        ],
        "creation_date": "2011-06-01T22:02:01Z",
        "contributors": 8,
        "topics": [],
        "subscribers": 261,
        "readme": "# Javascript State Machine\n\n[![NPM version](https://badge.fury.io/js/javascript-state-machine.svg)](https://badge.fury.io/js/javascript-state-machine)\n[![Build Status](https://travis-ci.org/jakesgordon/javascript-state-machine.svg?branch=master)](https://travis-ci.org/jakesgordon/javascript-state-machine)\n\nA library for finite state machines.\n\n![matter state machine](examples/matter.png)\n\n<br>\n\n### NOTE for existing users\n\n> **VERSION 3.0** Is a significant rewrite from earlier versions.\n  Existing 2.x users should be sure to read the [Upgrade Guide](docs/upgrading-from-v2.md).\n\n<br>\n\n# Installation\n\nIn a browser:\n\n```html\n  <script src='state-machine.js'></script>\n```\n\n> after downloading the [source](dist/state-machine.js) or the [minified version](dist/state-machine.min.js)\n\nUsing npm:\n\n```shell\n  npm install --save-dev javascript-state-machine\n```\n\nIn Node.js:\n\n```javascript\n  var StateMachine = require('javascript-state-machine');\n```\n\n# Usage\n\nA state machine can be constructed using:\n\n```javascript\n  var fsm = new StateMachine({\n    init: 'solid',\n    transitions: [\n      { name: 'melt',     from: 'solid',  to: 'liquid' },\n      { name: 'freeze',   from: 'liquid', to: 'solid'  },\n      { name: 'vaporize', from: 'liquid', to: 'gas'    },\n      { name: 'condense', from: 'gas',    to: 'liquid' }\n    ],\n    methods: {\n      onMelt:     function() { console.log('I melted')    },\n      onFreeze:   function() { console.log('I froze')     },\n      onVaporize: function() { console.log('I vaporized') },\n      onCondense: function() { console.log('I condensed') }\n    }\n  });\n```\n\n... which creates an object with a current state property:\n\n  * `fsm.state`\n\n... methods to transition to a different state:\n\n  * `fsm.melt()`\n  * `fsm.freeze()`\n  * `fsm.vaporize()`\n  * `fsm.condense()`\n\n... observer methods called automatically during the lifecycle of a transition:\n\n  * `onMelt()`\n  * `onFreeze()`\n  * `onVaporize()`\n  * `onCondense()`\n\n... along with the following helper methods:\n\n  * `fsm.is(s)`            - return true if state `s` is the current state\n  * `fsm.can(t)`           - return true if transition `t` can occur from the current state\n  * `fsm.cannot(t)`        - return true if transition `t` cannot occur from the current state\n  * `fsm.transitions()`    - return list of transitions that are allowed from the current state\n  * `fsm.allTransitions()` - return list of all possible transitions\n  * `fsm.allStates()`      - return list of all possible states\n\n# Terminology\n\nA state machine consists of a set of [**States**](docs/states-and-transitions.md)\n\n  * solid\n  * liquid\n  * gas\n\nA state machine changes state by using [**Transitions**](docs/states-and-transitions.md)\n\n  * melt\n  * freeze\n  * vaporize\n  * condense\n\nA state machine can perform actions during a transition by observing [**Lifecycle Events**](docs/lifecycle-events.md)\n\n  * onBeforeMelt\n  * onAfterMelt\n  * onLeaveSolid\n  * onEnterLiquid\n  * ...\n\nA state machine can also have arbitrary [**Data and Methods**](docs/data-and-methods.md).\n\nMultiple instances of a state machine can be created using a [**State Machine Factory**](docs/state-machine-factory.md).\n\n# Documentation\n\nRead more about\n\n  * [States and Transitions](docs/states-and-transitions.md)\n  * [Data and Methods](docs/data-and-methods.md)\n  * [Lifecycle Events](docs/lifecycle-events.md)\n  * [Asynchronous Transitions](docs/async-transitions.md)\n  * [Initialization](docs/initialization.md)\n  * [Error Handling](docs/error-handling.md)\n  * [State History](docs/state-history.md)\n  * [Visualization](docs/visualization.md)\n  * [State Machine Factory](docs/state-machine-factory.md)\n  * [Upgrading from 2.x](docs/upgrading-from-v2.md)\n \n# Contributing\n\nYou can [Contribute](docs/contributing.md) to this project with issues or pull requests.\n\n# Release Notes\n\nSee [RELEASE NOTES](RELEASE_NOTES.md) file.\n\n# License\n\nSee [MIT LICENSE](https://github.com/jakesgordon/javascript-state-machine/blob/master/LICENSE) file.\n\n# Contact\n\nIf you have any ideas, feedback, requests or bug reports, you can reach me at\n[jake@codeincomplete.com](mailto:jake@codeincomplete.com), or via\nmy website: [Code inComplete](http://codeincomplete.com/)\n",
        "releases": []
    }
}