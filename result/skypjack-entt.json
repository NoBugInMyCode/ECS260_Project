{
    "https://api.github.com/repos/skypjack/entt": {
        "forks": 911,
        "watchers": 10484,
        "stars": 10484,
        "languages": {
            "C++": 5147066,
            "CMake": 24851,
            "Python": 14457,
            "Starlark": 2738,
            "C": 2354,
            "Shell": 2328
        },
        "commits": [
            "2025-01-16T14:28:04Z",
            "2025-01-15T14:43:23Z",
            "2025-01-15T14:43:13Z",
            "2025-01-14T12:59:10Z",
            "2025-01-14T11:24:40Z",
            "2025-01-13T11:24:49Z",
            "2025-01-13T11:13:06Z",
            "2025-01-10T13:45:43Z",
            "2025-01-10T13:44:13Z",
            "2025-01-10T13:41:39Z",
            "2025-01-10T13:40:43Z",
            "2025-01-10T13:04:25Z",
            "2025-01-09T16:37:29Z",
            "2025-01-09T15:05:11Z",
            "2025-01-08T07:49:59Z",
            "2025-01-07T17:16:13Z",
            "2025-01-07T08:14:04Z",
            "2024-12-29T10:14:10Z",
            "2024-12-23T09:07:35Z",
            "2024-12-23T08:19:23Z",
            "2024-12-23T07:55:30Z",
            "2024-12-20T09:00:13Z",
            "2024-12-20T08:59:55Z",
            "2024-12-19T13:06:11Z",
            "2024-12-19T11:02:53Z",
            "2024-12-19T11:01:30Z",
            "2024-12-19T10:54:58Z",
            "2024-12-19T10:41:10Z",
            "2024-12-19T10:38:34Z",
            "2024-12-18T16:13:55Z"
        ],
        "creation_date": "2017-03-27T13:15:36Z",
        "contributors": 30,
        "topics": [
            "architectural-patterns",
            "cpp",
            "cpp17",
            "cpp20",
            "data-oriented",
            "data-oriented-design",
            "ecs",
            "ecs-framework",
            "entity-component-system",
            "entt",
            "game-dev",
            "game-development",
            "game-engine",
            "game-programming",
            "gamedev",
            "header-only",
            "modern-cpp",
            "no-dependencies",
            "production-ready",
            "reflection"
        ],
        "subscribers": 182,
        "readme": "![EnTT: Gaming meets modern C++](https://user-images.githubusercontent.com/1812216/103550016-90752280-4ea8-11eb-8667-12ed2219e137.png)\n\n[![Build Status](https://github.com/skypjack/entt/workflows/build/badge.svg)](https://github.com/skypjack/entt/actions)\n[![Coverage](https://codecov.io/gh/skypjack/entt/branch/master/graph/badge.svg)](https://codecov.io/gh/skypjack/entt)\n[![Try online](https://img.shields.io/badge/try-online-brightgreen)](https://godbolt.org/z/zxW73f)\n[![Documentation](https://img.shields.io/badge/docs-doxygen-blue)](https://skypjack.github.io/entt/)\n[![Vcpkg port](https://img.shields.io/vcpkg/v/entt)](https://vcpkg.link/ports/entt)\n[![Conan Center](https://img.shields.io/conan/v/entt)](https://conan.io/center/recipes/entt)\n[![Gitter chat](https://badges.gitter.im/skypjack/entt.png)](https://gitter.im/skypjack/entt)\n[![Discord channel](https://img.shields.io/discord/707607951396962417?logo=discord)](https://discord.gg/5BjPWBd)\n\n> `EnTT` has been a dream so far, we haven't found a single bug to date and it's\n> super easy to work with\n>\n> -- Every EnTT User Ever\n\n`EnTT` is a header-only, tiny and easy to use library for game programming and\nmuch more written in **modern C++**.<br/>\n[Among others](https://github.com/skypjack/entt/wiki/EnTT-in-Action), it's used\nin [**Minecraft**](https://minecraft.net/en-us/attribution/) by Mojang, the\n[**ArcGIS Runtime SDKs**](https://developers.arcgis.com/arcgis-runtime/) by Esri\nand the amazing [**Ragdoll**](https://ragdolldynamics.com/).<br/>\nIf you don't see your project in the list, please open an issue, submit a PR or\nadd the [\\#entt](https://github.com/topics/entt) tag to your _topics_! :+1:\n\n---\n\nDo you want to **keep up with changes** or do you have a **question** that\ndoesn't require you to open an issue?<br/>\nJoin the [gitter channel](https://gitter.im/skypjack/entt) and the\n[discord server](https://discord.gg/5BjPWBd), meet other users like you. The\nmore we are, the better for everyone.<br/>\nDon't forget to check the\n[FAQs](https://github.com/skypjack/entt/wiki/Frequently-Asked-Questions) and the\n[wiki](https://github.com/skypjack/entt/wiki) too. Your answers may already be\nthere.\n\nDo you want to support `EnTT`? Consider becoming a\n[**sponsor**](https://github.com/users/skypjack/sponsorship) or making a\ndonation via [**PayPal**](https://www.paypal.me/skypjack).<br/>\nMany thanks to [these people](https://skypjack.github.io/sponsorship/) and\n**special** thanks to:\n\n[![mojang](https://user-images.githubusercontent.com/1812216/106253145-67ca1980-6217-11eb-9c0b-d93561b37098.png)](https://mojang.com)\n[![imgly](https://user-images.githubusercontent.com/1812216/106253726-271ed000-6218-11eb-98e0-c9c681925770.png)](https://img.ly/)\n\n# Table of Contents\n\n* [Introduction](#introduction)\n  * [Code Example](#code-example)\n  * [Motivation](#motivation)\n  * [Benchmark](#benchmark)\n* [Integration](#integration)\n  * [Requirements](#requirements)\n  * [CMake](#cmake)\n  * [Natvis support](#natvis-support)\n  * [Packaging Tools](#packaging-tools)\n  * [pkg-config](#pkg-config)\n* [Documentation](#documentation)\n* [Tests](#tests)\n* [EnTT in Action](#entt-in-action)\n* [Contributors](#contributors)\n* [License](#license)\n\n# Introduction\n\nThe entity-component-system (also known as _ECS_) is an architectural pattern\nused mostly in game development. For further details:\n\n* [Entity Systems Wiki](http://entity-systems.wikidot.com/)\n* [Evolve Your Hierarchy](http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/)\n* [ECS on Wikipedia](https://en.wikipedia.org/wiki/Entity%E2%80%93component%E2%80%93system)\n\nThis project started off as a pure entity-component system. Over time the\ncodebase has grown as more and more classes and functionalities were added.<br/>\nHere is a brief, yet incomplete list of what it offers today:\n\n* Built-in **RTTI system** mostly similar to the standard one.\n* A `constexpr` utility for human-readable **resource names**.\n* Minimal **configuration system** built using the monostate pattern.\n* Incredibly fast **entity-component system** with its own _pay for what you\n  use_ policy, unconstrained component types with optional pointer stability and\n  hooks for storage customization.\n* Views and groups to iterate entities and components and allow different access\n  patterns, from **perfect SoA** to fully random.\n* A lot of **facilities** built on top of the entity-component system to help\n  the users and avoid reinventing the wheel.\n* General purpose **execution graph builder** for optimal scheduling.\n* The smallest and most basic implementation of a **service locator** ever seen.\n* A built-in, non-intrusive and macro-free runtime **reflection system**.\n* **Static polymorphism** made simple and within everyone's reach.\n* A few homemade containers, like a sparse set based **hash map**.\n* A **cooperative scheduler** for processes of any type.\n* All that is needed for **resource management** (cache, loaders, handles).\n* Delegates, **signal handlers** and a tiny event dispatcher.\n* A general purpose **event emitter** as a CRTP idiom based class template.\n* And **much more**! Check out the\n  [**wiki**](https://github.com/skypjack/entt/wiki).\n\nConsider this list a work in progress as well as the project. The whole API is\nfully documented in-code for those who are brave enough to read it.<br/>\nPlease, do note that all tools are also DLL-friendly now and run smoothly across\nboundaries.\n\nOne thing known to most is that `EnTT` is also used in **Minecraft**.<br/>\nGiven that the game is available literally everywhere, I can confidently say \nthat the library has been sufficiently tested on every platform that can come to \nmind.\n\n## Code Example\n\n```cpp\n#include <entt/entt.hpp>\n\nstruct position {\n    float x;\n    float y;\n};\n\nstruct velocity {\n    float dx;\n    float dy;\n};\n\nvoid update(entt::registry &registry) {\n    auto view = registry.view<const position, velocity>();\n\n    // use a callback\n    view.each([](const auto &pos, auto &vel) { /* ... */ });\n\n    // use an extended callback\n    view.each([](const auto entity, const auto &pos, auto &vel) { /* ... */ });\n\n    // use a range-for\n    for(auto [entity, pos, vel]: view.each()) {\n        // ...\n    }\n\n    // use forward iterators and get only the components of interest\n    for(auto entity: view) {\n        auto &vel = view.get<velocity>(entity);\n        // ...\n    }\n}\n\nint main() {\n    entt::registry registry;\n\n    for(auto i = 0u; i < 10u; ++i) {\n        const auto entity = registry.create();\n        registry.emplace<position>(entity, i * 1.f, i * 1.f);\n        if(i % 2 == 0) { registry.emplace<velocity>(entity, i * .1f, i * .1f); }\n    }\n\n    update(registry);\n}\n```\n\n## Motivation\n\nI started developing `EnTT` for the _wrong_ reason: my goal was to design an\nentity-component system to beat another well known open source library both in\nterms of performance and possibly memory usage.<br/>\nIn the end, I did it, but it wasn't very satisfying. Actually it wasn't\nsatisfying at all. The fastest and nothing more, fairly little indeed. When I\nrealized it, I tried hard to keep intact the great performance of `EnTT` and to\nadd all the features I wanted to see in *my own library* at the same time.\n\nNowadays, `EnTT` is finally what I was looking for: still faster than its\n_competitors_, lower memory usage in the average case, a really good API and an\namazing set of features. And even more, of course.\n\n## Benchmark\n\nFor what it's worth, you'll **never** see me trying to make other projects look\nbad or offer dubious comparisons just to make this library seem cooler.<br/>\nI leave this activity to others, if they enjoy it (and it seems that some people\nactually like it). I prefer to make better use of my time.\n\nIf you are interested, you can compile the `benchmark` test in release mode (to\nenable compiler optimizations, otherwise it would make little sense) by setting\nthe `ENTT_BUILD_BENCHMARK` option of `CMake` to `ON`, then evaluate yourself\nwhether you're satisfied with the results or not.\n\nThere are also a lot of projects out there that use `EnTT` as a basis for\ncomparison (this should already tell you a lot). Many of these benchmarks are\ncompletely wrong, many others are simply incomplete, good at omitting some\ninformation and using the wrong function to compare a given feature. Certainly\nthere are also good ones but they age quickly if nobody updates them, especially\nwhen the library they are dealing with is actively developed.<br/>\nOut of all of them, [this](https://github.com/abeimler/ecs_benchmark) seems like\nthe most up-to-date project and also covers a certain number of libraries. I\ncan't say exactly whether `EnTT` is used correctly or not. However, even if used\npoorly, it should still give the reader an idea of where it's going to operate.\n\n# Integration\n\n`EnTT` is a header-only library. This means that including the `entt.hpp` header\nis enough to include the library as a whole and use it. For those who are\ninterested only in the entity-component system, consider to include the sole\n`entity/registry.hpp` header instead.<br/>\nIt's a matter of adding the following line to the top of a file:\n\n```cpp\n#include <entt/entt.hpp>\n```\n\nUse the line below to include only the entity-component system instead:\n\n```cpp\n#include <entt/entity/registry.hpp>\n```\n\nThen pass the proper `-I` argument to the compiler to add the `src` directory to\nthe include paths.\n\n## Requirements\n\nTo be able to use `EnTT`, users must provide a full-featured compiler that\nsupports at least C++17.<br/>\nThe requirements below are mandatory to compile the tests and to extract the\ndocumentation:\n\n* `CMake` version 3.7 or later.\n* `Doxygen` version 1.8 or later.\n\nAlternatively, [Bazel](https://bazel.build) is also supported as a build system\n(credits to [zaucy](https://github.com/zaucy) who offered to maintain it).<br/>\nIn the documentation below I'll still refer to `CMake`, this being the official\nbuild system of the library.\n\n## CMake\n\nTo use `EnTT` from a `CMake` project, just link an existing target to the\n`EnTT::EnTT` alias.<br/>\nThe library offers everything you need for locating (as in `find_package`),\nembedding (as in `add_subdirectory`), fetching (as in `FetchContent`) or using\nit in many of the ways that you can think of and that involve `CMake`.<br/>\nCovering all possible cases would require a treatise and not a simple README\nfile, but I'm confident that anyone reading this section also knows what it's\nabout and can use `EnTT` from a `CMake` project without problems.\n\n## Natvis support\n\nWhen using `CMake`, just enable the option `ENTT_INCLUDE_NATVIS` and enjoy\nit.<br/>\nOtherwise, most of the tools are covered via Natvis and all files can be found\nin the `natvis` directory, divided by module.<br/>\nIf you spot errors or have suggestions, any contribution is welcome!\n\n## Packaging Tools\n\n`EnTT` is available for some of the most known packaging tools. In particular:\n\n* [`Conan`](https://github.com/conan-io/conan-center-index), the C/C++ Package\n  Manager for Developers.\n\n* [`vcpkg`](https://github.com/Microsoft/vcpkg), Microsoft VC++ Packaging\n  Tool.<br/>\n  You can download and install `EnTT` in just a few simple steps:\n\n  ```\n  $ git clone https://github.com/Microsoft/vcpkg.git\n  $ cd vcpkg\n  $ ./bootstrap-vcpkg.sh\n  $ ./vcpkg integrate install\n  $ vcpkg install entt\n  ```\n\n  Or you can use the `experimental` feature to test the latest changes:\n\n  ```\n  vcpkg install entt[experimental] --head\n  ```\n\n  The `EnTT` port in `vcpkg` is kept up to date by Microsoft team members and\n  community contributors.<br/>\n  If the version is out of date, please\n  [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the\n  `vcpkg` repository.\n\n* [`Homebrew`](https://github.com/skypjack/homebrew-entt), the missing package\n  manager for macOS.<br/>\n  Available as a homebrew formula. Just type the following to install it:\n\n  ```\n  brew install skypjack/entt/entt\n  ```\n\n* [`build2`](https://build2.org), build toolchain for developing and packaging C\n  and C++ code.<br/>\n  In order to use the [`entt`](https://cppget.org/entt) package in a `build2`\n  project, add the following line or a similar one to the `manifest` file:\n\n  ```\n  depends: entt ^3.0.0\n  ```\n\n  Also check that the configuration refers to a valid repository, so that the\n  package can be found by `build2`:\n\n  * [`cppget.org`](https://cppget.org), the open-source community central\n    repository, accessible as `https://pkg.cppget.org/1/stable`.\n\n  * [Package source repository](https://github.com/build2-packaging/entt):\n    accessible as either `https://github.com/build2-packaging/entt.git` or\n    `ssh://git@github.com/build2-packaging/entt.git`.\n    Feel free to [report issues](https://github.com/build2-packaging/entt) with\n    this package.\n\n  Both can be used with `bpkg add-repo` or added in a project\n  `repositories.manifest`. See the official\n  [documentation](https://build2.org/build2-toolchain/doc/build2-toolchain-intro.xhtml#guide-repositories)\n  for more details.\n\n* [`bzlmod`](https://bazel.build/external/overview#bzlmod), Bazel's external\n  dependency management system.<br/>\n  To use the [`entt`](https://registry.bazel.build/modules/entt) module in a\n  `bazel` project, add the following to your `MODULE.bazel` file:\n\n  ```starlark\n  bazel_dep(name = \"entt\", version = \"3.12.2\")\n  ```\n\n  EnTT will now be available as `@entt` (short for `@entt//:entt`) to be used\n  in your `cc_*` rule `deps`. \n\nConsider this list a work in progress and help me to make it longer if you like.\n\n## pkg-config\n\n`EnTT` also supports `pkg-config` (for some definition of _supports_ at least).\nA suitable file called `entt.pc` is generated and installed in a proper\ndirectory when running `CMake`.<br/>\nThis should also make it easier to use with tools such as `Meson` or similar.\n\n# Documentation\n\nThe documentation is based on [doxygen](http://www.doxygen.nl/). To build it:\n\n    $ cd build\n    $ cmake .. -DENTT_BUILD_DOCS=ON\n    $ make\n\nThe API reference is created in HTML format in the `build/docs/html` directory.\nTo navigate it with your favorite browser:\n\n    $ cd build\n    $ your_favorite_browser docs/html/index.html\n\nThe same version is also available [online](https://skypjack.github.io/entt/)\nfor the latest release, that is the last stable tag.<br/>\nMoreover, there exists a [wiki](https://github.com/skypjack/entt/wiki) dedicated\nto the project where users can find all related documentation pages.\n\n# Tests\n\nTo compile and run the tests, `EnTT` requires *googletest*.<br/>\n`cmake` downloads and compiles the library before compiling anything else. In\norder to build the tests, set the `CMake` option `ENTT_BUILD_TESTING` to `ON`.\n\nTo build the most basic set of tests:\n\n* `$ cd build`\n* `$ cmake -DENTT_BUILD_TESTING=ON ..`\n* `$ make`\n* `$ make test`\n\nNote that benchmarks are not part of this set.\n\n# EnTT in Action\n\n`EnTT` is widely used in private and commercial applications. I cannot even\nmention most of them because of some signatures I put on some documents time\nago. Fortunately, there are also people who took the time to implement open\nsource projects based on `EnTT` and did not hold back when it came to\ndocumenting them.\n\n[Here](https://github.com/skypjack/entt/wiki/EnTT-in-Action) you can find an\nincomplete list of games, applications and articles that can be used as a\nreference.\n\nIf you know of other resources out there that are about `EnTT`, feel free to\nopen an issue or a PR and I'll be glad to add them to the list.\n\n# Contributors\n\nRequests for features, PRs, suggestions and feedback are highly appreciated.\n\nIf you find you can help and want to contribute to the project with your\nexperience or you do want to get part of the project for some other reason, feel\nfree to contact me directly (you can find the mail in the\n[profile](https://github.com/skypjack)).<br/>\nI can't promise that each and every contribution will be accepted, but I can\nassure that I'll do my best to take them all as soon as possible.\n\nIf you decide to participate, please see the guidelines for\n[contributing](https://github.com/skypjack/entt/blob/master/CONTRIBUTING.md)\nbefore to create issues or pull requests.<br/>\nTake also a look at the\n[contributors list](https://github.com/skypjack/entt/blob/master/AUTHORS) to\nknow who has participated so far.\n\n# License\n\nCode and documentation Copyright (c) 2017-2024 Michele Caini.<br/>\nColorful logo Copyright (c) 2018-2021 Richard Caseres.\n\nCode released under\n[the MIT license](https://github.com/skypjack/entt/blob/master/LICENSE).<br/>\nDocumentation released under\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/).<br/>\nAll logos released under\n[CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/).\n",
        "releases": [
            {
                "name": "EnTT v3.14.0",
                "date": "2024-10-23T12:57:01Z"
            },
            {
                "name": "EnTT v3.13.2",
                "date": "2024-04-10T06:57:55Z"
            },
            {
                "name": "EnTT v3.13.1",
                "date": "2024-02-02T09:15:52Z"
            },
            {
                "name": "EnTT v3.13.0",
                "date": "2024-01-16T15:04:54Z"
            },
            {
                "name": "EnTT v3.12.2",
                "date": "2023-06-23T08:44:49Z"
            },
            {
                "name": "EnTT v3.12.1",
                "date": "2023-06-20T09:33:08Z"
            },
            {
                "name": "EnTT v3.12.0",
                "date": "2023-06-15T09:49:33Z"
            },
            {
                "name": "EnTT v3.11.1",
                "date": "2022-12-02T08:35:48Z"
            },
            {
                "name": "EnTT v3.11.0",
                "date": "2022-11-09T11:24:28Z"
            },
            {
                "name": "EnTT v3.10.3",
                "date": "2022-08-02T07:25:20Z"
            },
            {
                "name": "EnTT v3.10.2",
                "date": "2022-08-01T08:42:16Z"
            },
            {
                "name": "EnTT v3.10.1",
                "date": "2022-04-28T07:28:57Z"
            },
            {
                "name": "EnTT v3.10.0",
                "date": "2022-04-15T12:50:11Z"
            },
            {
                "name": "EnTT v3.9.0",
                "date": "2021-12-21T12:24:02Z"
            },
            {
                "name": "EnTT v3.8.1",
                "date": "2021-07-28T08:00:32Z"
            },
            {
                "name": "EnTT v3.8.0",
                "date": "2021-07-21T12:06:23Z"
            },
            {
                "name": "EnTT v3.7.1",
                "date": "2021-04-14T13:34:24Z"
            },
            {
                "name": "EnTT v3.7.0",
                "date": "2021-04-02T09:06:18Z"
            },
            {
                "name": "EnTT v3.6.0",
                "date": "2021-01-09T16:13:25Z"
            },
            {
                "name": "EnTT v3.5.2",
                "date": "2020-09-22T06:31:07Z"
            },
            {
                "name": "EnTT v3.5.1",
                "date": "2020-09-04T08:40:43Z"
            },
            {
                "name": "EnTT v3.5.0",
                "date": "2020-08-31T20:50:45Z"
            },
            {
                "name": "EnTT v3.4.0",
                "date": "2020-05-09T21:50:52Z"
            },
            {
                "name": "EnTT v3.3.2",
                "date": "2020-03-07T17:46:04Z"
            },
            {
                "name": "EnTT v3.3.1",
                "date": "2020-02-28T22:56:00Z"
            },
            {
                "name": "EnTT v3.3.0",
                "date": "2020-02-22T14:49:13Z"
            },
            {
                "name": "EnTT v3.2.2",
                "date": "2019-12-19T14:17:10Z"
            },
            {
                "name": "EnTT v3.2.1",
                "date": "2019-11-26T14:18:25Z"
            },
            {
                "name": "EnTT v3.2.0",
                "date": "2019-10-29T21:10:34Z"
            },
            {
                "name": "EnTT v3.1.1",
                "date": "2019-09-05T13:51:23Z"
            },
            {
                "name": "EnTT v3.1.0",
                "date": "2019-08-29T14:45:02Z"
            },
            {
                "name": "EnTT v3.0.0",
                "date": "2019-05-16T14:19:24Z"
            },
            {
                "name": "EnTT v2.7.3",
                "date": "2018-09-02T21:06:03Z"
            },
            {
                "name": "EnTT v2.7.2",
                "date": "2018-08-02T21:09:01Z"
            },
            {
                "name": "EnTT v2.7.1",
                "date": "2018-07-03T11:08:41Z"
            }
        ]
    }
}