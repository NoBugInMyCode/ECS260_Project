{
    "https://api.github.com/repos/conventional-changelog/standard-version": {
        "forks": 799,
        "watchers": 7735,
        "stars": 7735,
        "languages": {
            "JavaScript": 74472,
            "Elixir": 588
        },
        "commits": [
            "2023-10-19T11:32:48Z",
            "2023-10-02T06:21:14Z",
            "2022-05-15T13:41:41Z",
            "2022-05-15T13:35:47Z",
            "2022-01-01T16:40:51Z",
            "2022-01-01T16:35:02Z",
            "2021-12-31T05:15:34Z",
            "2021-12-31T04:42:48Z",
            "2021-12-31T04:39:40Z",
            "2021-12-31T04:28:51Z",
            "2021-10-19T02:37:42Z",
            "2021-10-19T01:55:34Z",
            "2021-10-19T01:38:23Z",
            "2021-10-19T01:33:41Z",
            "2021-10-18T02:08:29Z",
            "2021-10-17T20:47:44Z",
            "2021-10-17T20:35:12Z",
            "2021-10-17T20:14:53Z",
            "2021-07-14T19:08:15Z",
            "2021-07-14T18:11:54Z",
            "2021-05-04T16:36:48Z",
            "2021-05-04T00:24:41Z",
            "2021-04-06T17:23:23Z",
            "2021-04-06T17:20:17Z",
            "2021-02-20T16:17:46Z",
            "2021-02-20T16:13:36Z",
            "2021-02-20T16:01:40Z",
            "2021-02-17T21:46:20Z",
            "2021-02-06T15:02:23Z",
            "2020-12-30T02:39:46Z"
        ],
        "creation_date": "2016-04-04T05:29:35Z",
        "contributors": 30,
        "topics": [
            "changelog",
            "cli",
            "git",
            "hacktoberfest",
            "history",
            "release",
            "semantic",
            "standard",
            "tag",
            "tags",
            "version",
            "versioning"
        ],
        "subscribers": 51,
        "readme": "# Standard Version\n\n> **`standard-version` is deprecated**. If you're a GitHub user, I recommend [release-please](https://github.com/googleapis/release-please) as an alternative. If you're unable to use GitHub Actions, or if you need to stick with `standard-version` for some other reason, you can use the [commit-and-tag-version]( https://github.com/absolute-version/commit-and-tag-version) fork of `standard-version`.\n\nA utility for versioning using [semver](https://semver.org/) and CHANGELOG generation powered by [Conventional Commits](https://conventionalcommits.org).\n\n![ci](https://github.com/conventional-changelog/standard-version/workflows/ci/badge.svg)\n[![NPM version](https://img.shields.io/npm/v/standard-version.svg)](https://www.npmjs.com/package/standard-version)\n[![codecov](https://codecov.io/gh/conventional-changelog/standard-version/branch/master/graph/badge.svg?token=J7zMN7vTTd)](https://codecov.io/gh/conventional-changelog/standard-version)\n[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)\n[![Community slack](http://devtoolscommunity.herokuapp.com/badge.svg)](http://devtoolscommunity.herokuapp.com)\n\n_Having problems? Want to contribute? Join us on the [node-tooling community Slack](http://devtoolscommunity.herokuapp.com)_.\n\n\n_How It Works:_\n\n1. Follow the [Conventional Commits Specification](https://conventionalcommits.org) in your repository.\n2. When you're ready to release, run `standard-version`.\n\n`standard-version` will then do the following:\n\n1. Retrieve the current version of your repository by looking at `packageFiles`[[1]](#bumpfiles-packagefiles-and-updaters), falling back to the last `git tag`.\n2. `bump` the version in `bumpFiles`[[1]](#bumpfiles-packagefiles-and-updaters) based on your commits.\n4. Generates a `changelog` based on your commits (uses [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) under the hood).\n5. Creates a new `commit` including your `bumpFiles`[[1]](#bumpfiles-packagefiles-and-updaters) and updated CHANGELOG.\n6. Creates a new `tag` with the new version number.\n\n\n### `bumpFiles`, `packageFiles` and `updaters`\n\n`standard-version` uses a few key concepts for handling version bumping in your project.\n\n- **`packageFiles`** \u2013 User-defined files where versions can be read from _and_ be \"bumped\".\n  - Examples: `package.json`, `manifest.json`\n  - In most cases (including the default), `packageFiles` are a subset of `bumpFiles`.\n- **`bumpFiles`** \u2013\u00a0User-defined files where versions should be \"bumped\", but not explicitly read from.\n  - Examples: `package-lock.json`, `npm-shrinkwrap.json`\n- **`updaters`** \u2013\u00a0Simple modules used for reading `packageFiles` and writing to `bumpFiles`.\n\nBy default, `standard-version` assumes you're working in a NodeJS based project... because of this, for the majority of projects you might never need to interact with these options.\n\nThat said, if you find your self asking [How can I use standard-version for additional metadata files, languages or version files?](#can-i-use-standard-version-for-additional-metadata-files-languages-or-version-files) \u2013 these configuration options will help!\n\n## Installing `standard-version`\n\n### As a local `npm run` script\n\nInstall and add to `devDependencies`:\n\n```\nnpm i --save-dev standard-version\n```\n\nAdd an [`npm run` script](https://docs.npmjs.com/cli/run-script) to your `package.json`:\n\n```json\n{\n  \"scripts\": {\n    \"release\": \"standard-version\"\n  }\n}\n```\n\nNow you can use `npm run release` in place of `npm version`.\n\nThis has the benefit of making your repo/package more portable, so that other developers can cut releases without having to globally install `standard-version` on their machine.\n\n### As global `bin`\n\nInstall globally (add to your `PATH`):\n\n```\nnpm i -g standard-version\n```\n\nNow you can use `standard-version` in place of `npm version`.\n\nThis has the benefit of allowing you to use `standard-version` on any repo/package without adding a dev dependency to each one.\n\n### Using `npx`\n\nAs of `npm@5.2.0`, `npx` is installed alongside `npm`. Using `npx` you can use `standard-version` without having to keep a `package.json` file by running: `npx standard-version`.\n\nThis method is especially useful when using `standard-version` in non-JavaScript projects.\n\n## Configuration\n\nYou can configure `standard-version` either by:\n\n1. Placing a `standard-version` stanza in your `package.json` (assuming\n   your project is JavaScript).\n2. Creating a `.versionrc`, `.versionrc.json` or `.versionrc.js`.\n  - If you are using a `.versionrc.js` your default export must be a configuration object, or a function returning a configuration object.\n\nAny of the command line parameters accepted by `standard-version` can instead\nbe provided via configuration. Please refer to the [conventional-changelog-config-spec](https://github.com/conventional-changelog/conventional-changelog-config-spec/) for details on available configuration options.\n\n\n### Customizing CHANGELOG Generation\n\nBy default (as of `6.0.0`), `standard-version` uses the [conventionalcommits preset](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-conventionalcommits).\n\nThis preset:\n\n* Adheres closely to the [conventionalcommits.org](https://www.conventionalcommits.org)\n  specification.\n* Is highly configurable, following the configuration specification\n  [maintained here](https://github.com/conventional-changelog/conventional-changelog-config-spec).\n  * _We've documented these config settings as a recommendation to other tooling makers._\n\nThere are a variety of dials and knobs you can turn related to CHANGELOG generation.\n\nAs an example, suppose you're using GitLab, rather than GitHub, you might modify the following variables:\n\n* `commitUrlFormat`: the URL format of commit SHAs detected in commit messages.\n* `compareUrlFormat`: the URL format used to compare two tags.\n* `issueUrlFormat`: the URL format used to link to issues.\n\nMaking these URLs match GitLab's format, rather than GitHub's.\n\n## CLI Usage\n\n> **NOTE:** To pass nested configurations to the CLI without defining them in the `package.json` use dot notation as the parameters `e.g. --skip.changelog`.\n\n### First Release\n\nTo generate your changelog for your first release, simply do:\n\n```sh\n# npm run script\nnpm run release -- --first-release\n# global bin\nstandard-version --first-release\n# npx\nnpx standard-version --first-release\n```\n\nThis will tag a release **without bumping the version `bumpFiles`[1]()**.\n\nWhen you are ready, push the git tag and `npm publish` your first release. \\o/\n\n### Cutting Releases\n\nIf you typically use `npm version` to cut a new release, do this instead:\n\n```sh\n# npm run script\nnpm run release\n# or global bin\nstandard-version\n```\n\nAs long as your git commit messages are conventional and accurate, you no longer need to specify the semver type - and you get CHANGELOG generation for free! \\o/\n\nAfter you cut a release, you can push the new git tag and `npm publish` (or `npm publish --tag next`) when you're ready.\n\n### Release as a Pre-Release\n\nUse the flag `--prerelease` to generate pre-releases:\n\nSuppose the last version of your code is `1.0.0`, and your code to be committed has patched changes. Run:\n\n```bash\n# npm run script\nnpm run release -- --prerelease\n```\nThis will tag your version as: `1.0.1-0`.\n\nIf you want to name the pre-release, you specify the name via `--prerelease <name>`.\n\nFor example, suppose your pre-release should contain the `alpha` prefix:\n\n```bash\n# npm run script\nnpm run release -- --prerelease alpha\n```\n\nThis will tag the version as: `1.0.1-alpha.0`\n\n### Release as a Target Type Imperatively (`npm version`-like)\n\nTo forgo the automated version bump use `--release-as` with the argument `major`, `minor` or `patch`.\n\nSuppose the last version of your code is `1.0.0`, you've only landed `fix:` commits, but\nyou would like your next release to be a `minor`. Simply run the following:\n\n```bash\n# npm run script\nnpm run release -- --release-as minor\n# Or\nnpm run release -- --release-as 1.1.0\n```\n\nYou will get version `1.1.0` rather than what would be the auto-generated version `1.0.1`.\n\n> **NOTE:** you can combine `--release-as` and `--prerelease` to generate a release. This is useful when publishing experimental feature(s).\n\n### Prevent Git Hooks\n\nIf you use git hooks, like pre-commit, to test your code before committing, you can prevent hooks from being verified during the commit step by passing the `--no-verify` option:\n\n```sh\n# npm run script\nnpm run release -- --no-verify\n# or global bin\nstandard-version --no-verify\n```\n\n### Signing Commits and Tags\n\nIf you have your GPG key set up, add the `--sign` or `-s` flag to your `standard-version` command.\n\n### Lifecycle Scripts\n\n`standard-version` supports lifecycle scripts. These allow you to execute your\nown supplementary commands during the release. The following\nhooks are available and execute in the order documented:\n\n* `prerelease`: executed before anything happens. If the `prerelease` script returns a\n  non-zero exit code, versioning will be aborted, but it has no other effect on the\n  process.\n* `prebump`/`postbump`: executed before and after the version is bumped. If the `prebump`\n  script returns a version #, it will be used rather than\n  the version calculated by `standard-version`.\n* `prechangelog`/`postchangelog`: executes before and after the CHANGELOG is generated.\n* `precommit`/`postcommit`: called before and after the commit step.\n* `pretag`/`posttag`: called before and after the tagging step.\n\nSimply add the following to your package.json to configure lifecycle scripts:\n\n```json\n{\n  \"standard-version\": {\n    \"scripts\": {\n      \"prebump\": \"echo 9.9.9\"\n    }\n  }\n}\n```\n\nAs an example to change from using GitHub to track your items to using your projects Jira use a\n`postchangelog` script to replace the url fragment containing 'https://github.com/`myproject`/issues/'\nwith a link to your Jira - assuming you have already installed [replace](https://www.npmjs.com/package/replace)\n```json\n{\n  \"standard-version\": {\n    \"scripts\": {\n      \"postchangelog\": \"replace 'https://github.com/myproject/issues/' 'https://myjira/browse/' CHANGELOG.md\"\n    }\n  }\n}\n```\n\n### Skipping Lifecycle Steps\n\nYou can skip any of the lifecycle steps (`bump`, `changelog`, `commit`, `tag`),\nby adding the following to your package.json:\n\n```json\n{\n  \"standard-version\": {\n    \"skip\": {\n      \"changelog\": true\n    }\n  }\n}\n```\n\n### Committing Generated Artifacts in the Release Commit\n\nIf you want to commit generated artifacts in the release commit, you can use the `--commit-all` or `-a` flag. You will need to stage the artifacts you want to commit, so your `release` command could look like this:\n\n```json\n{\n  \"standard-version\": {\n    \"scripts\": {\n      \"prerelease\": \"webpack -p --bail && git add <file(s) to commit>\"\n    }\n  }\n}\n```\n\n```json\n{\n  \"scripts\": {\n    \"release\": \"standard-version -a\"\n  }\n}\n```\n\n### Dry Run Mode\n\nrunning `standard-version` with the flag `--dry-run` allows you to see what\ncommands would be run, without committing to git or updating files.\n\n```sh\n# npm run script\nnpm run release -- --dry-run\n# or global bin\nstandard-version --dry-run\n```\n\n### Prefix Tags\n\nTags are prefixed with `v` by default. If you would like to prefix your tags with something else, you can do so with the `-t` flag.\n\n```sh\nstandard-version -t @scope/package\\@\n```\n\nThis will prefix your tags to look something like `@scope/package@2.0.0`\n\nIf you do not want to have any tag prefix you can use the `-t` flag and provide it with an **empty string** as value.\n\n> Note: simply -t or --tag-prefix without any value will fallback to the default 'v'\n\n### CLI Help\n\n```sh\n# npm run script\nnpm run release -- --help\n# or global bin\nstandard-version --help\n```\n\n## Code Usage\n\n```js\nconst standardVersion = require('standard-version')\n\n// Options are the same as command line, except camelCase\n// standardVersion returns a Promise\nstandardVersion({\n  noVerify: true,\n  infile: 'docs/CHANGELOG.md',\n  silent: true\n}).then(() => {\n  // standard-version is done\n}).catch(err => {\n    console.error(`standard-version failed with message: ${err.message}`)\n})\n```\n\n_TIP: Use the `silent` option to prevent `standard-version` from printing to the `console`._\n\n## FAQ\n\n### How is `standard-version` different from `semantic-release`?\n\n[`semantic-release`](https://github.com/semantic-release/semantic-release) is described as:\n\n> semantic-release automates the whole package release workflow including: determining the next version number, generating the release notes and publishing the package.\n\nWhile both are based on the same foundation of structured commit messages, `standard-version`  takes a different approach by handling versioning, changelog generation, and git tagging for you **without** automatic pushing (to GitHub) or publishing (to an npm registry). Use of `standard-version` only affects your local git repo - it doesn't affect remote resources at all. After you run `standard-version`, you can review your release state, correct mistakes and follow the release strategy that makes the most sense for your codebase.\n\nWe think they are both fantastic tools, and we encourage folks to use `semantic-release` instead of `standard-version` if it makes sense for their use-case.\n\n### Should I always squash commits when merging PRs?\n\nThe instructions to squash commits when merging pull requests assumes that **one PR equals, at most, one feature or fix**.\n\nIf you have multiple features or fixes landing in a single PR and each commit uses a structured message, then you can do a standard merge when accepting the PR. This will preserve the commit history from your branch after the merge.\n\nAlthough this will allow each commit to be included as separate entries in your CHANGELOG, the entries will **not** be able to reference the PR that pulled the changes in because the preserved commit messages do not include the PR number.\n\nFor this reason, we recommend keeping the scope of each PR to one general feature or fix. In practice, this allows you to use unstructured commit messages when committing each little change and then squash them into a single commit with a structured message (referencing the PR number) once they have been reviewed and accepted.\n\n### Can I use `standard-version` for additional metadata files, languages or version files?\n\nAs of version `7.1.0` you can configure multiple `bumpFiles` and `packageFiles`.\n\n1. Specify a custom `bumpFile` \"`filename`\", this is the path to the file you want to \"bump\"\n2. Specify the `bumpFile` \"`updater`\", this is _how_ the file will be bumped.\n    a. If you're using a common type, you can use one of  `standard-version`'s built-in `updaters` by specifying a `type`.\n    b. If your using an less-common version file, you can create your own `updater`.\n\n```js\n// .versionrc\n{\n  \"bumpFiles\": [\n    {\n      \"filename\": \"MY_VERSION_TRACKER.txt\",\n      // The `plain-text` updater assumes the file contents represents the version.\n      \"type\": \"plain-text\"\n    },\n    {\n      \"filename\": \"a/deep/package/dot/json/file/package.json\",\n      // The `json` updater assumes the version is available under a `version` key in the provided JSON document.\n      \"type\": \"json\"\n    },\n    {\n      \"filename\": \"VERSION_TRACKER.json\",\n      //  See \"Custom `updater`s\" for more details.\n      \"updater\": \"standard-version-updater.js\"\n    }\n  ]\n}\n```\n\nIf using `.versionrc.js` as your configuration file, the `updater` may also be set as an object, rather than a path:\n\n```js\n// .versionrc.js\nconst tracker = {\n  filename: 'VERSION_TRACKER.json',\n  updater: require('./path/to/custom-version-updater')\n}\n\nmodule.exports = {\n  bumpFiles: [tracker],\n  packageFiles: [tracker]\n}\n```\n\n#### Custom `updater`s\n\nAn `updater` is expected to be a Javascript module with _atleast_ two methods exposed: `readVersion` and `writeVersion`.\n\n##### `readVersion(contents = string): string`\n\nThis method is used to read the version from the provided file contents.\n\nThe return value is expected to be a semantic version string.\n\n##### `writeVersion(contents = string, version: string): string`\n\nThis method is used to write the version to the provided contents.\n\nThe return value will be written directly (overwrite) to the provided file.\n\n---\n\nLet's assume our `VERSION_TRACKER.json` has the following contents:\n\n```json\n{\n  \"tracker\": {\n    \"package\": {\n      \"version\": \"1.0.0\"\n    }\n  }\n}\n\n```\n\nAn acceptable `standard-version-updater.js` would be:\n\n```js\n// standard-version-updater.js\nconst stringifyPackage = require('stringify-package')\nconst detectIndent = require('detect-indent')\nconst detectNewline = require('detect-newline')\n\nmodule.exports.readVersion = function (contents) {\n  return JSON.parse(contents).tracker.package.version;\n}\n\nmodule.exports.writeVersion = function (contents, version) {\n  const json = JSON.parse(contents)\n  let indent = detectIndent(contents).indent\n  let newline = detectNewline(contents)\n  json.tracker.package.version = version\n  return stringifyPackage(json, indent, newline)\n}\n```\n\n## License\n\nISC\n",
        "releases": [
            {
                "name": "v9.5.0",
                "date": "2022-05-15T13:41:59Z"
            },
            {
                "name": null,
                "date": "2021-12-31T05:15:58Z"
            },
            {
                "name": "standard-version v9.3.2",
                "date": "2021-10-17T20:47:52Z"
            },
            {
                "name": "standard-version v9.3.1",
                "date": "2021-07-14T19:08:22Z"
            },
            {
                "name": "standard-version v9.3.0",
                "date": "2021-05-04T16:36:56Z"
            },
            {
                "name": "standard-version v9.2.0",
                "date": "2021-04-06T17:23:30Z"
            },
            {
                "name": "standard-version v9.1.1",
                "date": "2021-02-17T21:46:30Z"
            },
            {
                "name": "standard-version v9.1.0",
                "date": "2020-12-30T02:02:50Z"
            },
            {
                "name": "standard-version v9.0.0",
                "date": "2020-08-15T00:26:04Z"
            },
            {
                "name": "standard-version v8.0.2",
                "date": "2020-07-14T01:36:24Z"
            },
            {
                "name": "standard-version v8.0.1",
                "date": "2020-07-12T08:12:03Z"
            },
            {
                "name": "standard-version v8.0.0",
                "date": "2020-05-06T20:01:44Z"
            }
        ]
    }
}