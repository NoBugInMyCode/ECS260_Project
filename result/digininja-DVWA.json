{
    "https://api.github.com/repos/digininja/DVWA": {
        "forks": 3726,
        "watchers": 10572,
        "stars": 10572,
        "languages": {
            "PHP": 312214,
            "JavaScript": 23353,
            "Hack": 9715,
            "CSS": 5993,
            "Python": 3055,
            "Dockerfile": 807
        },
        "commits": [
            "2024-12-12T10:11:44Z",
            "2024-12-11T16:57:23Z",
            "2024-11-08T14:41:58Z",
            "2024-11-08T14:40:44Z",
            "2024-11-07T12:49:53Z",
            "2024-11-06T22:54:36Z",
            "2024-11-06T22:54:03Z",
            "2024-11-05T07:55:39Z",
            "2024-11-05T03:07:37Z",
            "2024-11-04T12:35:50Z",
            "2024-10-30T00:22:55Z",
            "2024-09-23T10:25:19Z",
            "2024-09-23T10:21:41Z",
            "2024-09-23T10:07:10Z",
            "2024-09-23T09:59:42Z",
            "2024-09-23T09:11:25Z",
            "2024-09-20T15:01:25Z",
            "2024-09-20T14:59:10Z",
            "2024-09-20T14:49:49Z",
            "2024-09-20T08:42:14Z",
            "2024-09-20T08:20:54Z",
            "2024-09-09T21:55:46Z",
            "2024-09-09T21:40:56Z",
            "2024-09-09T21:32:08Z",
            "2024-09-08T19:46:39Z",
            "2024-09-04T21:38:03Z",
            "2024-09-04T21:37:23Z",
            "2024-09-04T21:37:14Z",
            "2024-09-02T12:43:42Z",
            "2024-08-30T09:45:13Z"
        ],
        "creation_date": "2013-05-01T13:03:10Z",
        "contributors": 30,
        "topics": [
            "dvwa",
            "hacking",
            "infosec",
            "php",
            "security",
            "sql-injection",
            "training"
        ],
        "subscribers": 313,
        "readme": "# DAMN VULNERABLE WEB APPLICATION\n\nDamn Vulnerable Web Application (DVWA) is a PHP/MySQL web application that is damn vulnerable. Its main goal is to be an aid for security professionals to test their skills and tools in a legal environment, help web developers better understand the processes of securing web applications and to aid both students & teachers to learn about web application security in a controlled class room environment.\n\nThe aim of DVWA is to **practice some of the most common web vulnerabilities**, with **various levels of difficulty**, with a simple straightforward interface.\nPlease note, there are **both documented and undocumented vulnerabilities** with this software. This is intentional. You are encouraged to try and discover as many issues as possible.\n- - -\n\n## WARNING!\n\nDamn Vulnerable Web Application is damn vulnerable! **Do not upload it to your hosting provider's public html folder or any Internet facing servers**, as they will be compromised. It is recommended using a virtual machine (such as [VirtualBox](https://www.virtualbox.org/) or [VMware](https://www.vmware.com/)), which is set to NAT networking mode. Inside a guest machine, you can download and install [XAMPP](https://www.apachefriends.org/) for the web server and database.\n\n### Disclaimer\n\nWe do not take responsibility for the way in which any one uses this application (DVWA). We have made the purposes of the application clear and it should not be used maliciously. We have given warnings and taken measures to prevent users from installing DVWA on to live web servers. If your web server is compromised via an installation of DVWA, it is not our responsibility, it is the responsibility of the person/s who uploaded and installed it.\n\n- - -\n\n## License\n\nThis file is part of Damn Vulnerable Web Application (DVWA).\n\nDamn Vulnerable Web Application (DVWA) is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nDamn Vulnerable Web Application (DVWA) is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with Damn Vulnerable Web Application (DVWA).  If not, see <https://www.gnu.org/licenses/>.\n\n- - -\n\n## Internationalisation\n\nThis file is available in multiple languages:\n\n- Arabic: [\u0627\u0644\u0639\u0631\u0628\u064a\u0629](README.ar.md)\n- Chinese: [\u7b80\u4f53\u4e2d\u6587](README.zh.md)\n- French: [Fran\u00e7ais](README.fr.md)\n- Korean: [\ud55c\uad6d\uc5b4](README.ko.md)\n- Persian: [\u0641\u0627\u0631\u0633\u06cc](README.fa.md)\n- Polish: [Polski](README.pl.md)\n- Portuguese: [Portugu\u00eas](README.pt.md)\n- Spanish: [Espa\u00f1ol](README.es.md)\n- Turkish: [T\u00fcrk\u00e7e](README.tr.md)\n- Indonesia: [Indonesia](README.id.md)\n- Vietnamese: [Vietnamese](README.vi.md)\n\nIf you would like to contribute a translation, please submit a PR. Note though, this does not mean just run it through Google Translate and send that in, those will be rejected. Submit your translated version by adding a new 'README.xx.md' file where xx is the two-letter code of your desired language (based on [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)).\n\n- - -\n\n## Download\n\nWhile there are various versions of DVWA around, the only supported version is the latest source from the official GitHub repository. You can either clone it from the repo:\n\n```sh\ngit clone https://github.com/digininja/DVWA.git\n```\n\nOr [download a ZIP of the files](https://github.com/digininja/DVWA/archive/master.zip).\n\n- - -\n\n## Installation\n\n### Automated Installation \ud83d\udee0\ufe0f\n\n**Note, this is not an official DVWA script, it was written by [IamCarron](https://github.com/iamCarron/). A lot of work went into creating the script and, when it was created, it did not do anything malicious, however it is recommended you review the script before blindly running it on your system, just in case. Please report any bugs to [IamCarron](https://github.com/iamCarron/), not here.**\n\nAn automated configuration script for DVWA on Debian-based machines, including Kali, Ubuntu, Kubuntu, Linux Mint, Zorin OS...\n\n**Note: This script requires root privileges and is tailored for Debian-based systems. Ensure you are running it as the root user.**\n\n#### Installation Requirements\n\n- **Operating System:** Debian-based system (Kali, Ubuntu, Kubuntu, Linux Mint, Zorin OS)\n- **Privileges:** Execute as root user\n\n#### Installation Steps\n\n##### One-Liner\n\nThis will download an install script written by [@IamCarron](https://github.com/IamCarron) and run it automatically. This would not be included here if we did not trust the author and the script as it was when we reviewed it, but there is always the chance of someone going rogue, and so if you don't feel safe running someone else's code without reviewing it yourself, follow the manual process and you can review it once downloaded.\n\n```sh\nsudo bash -c \"$(curl --fail --show-error --silent --location https://raw.githubusercontent.com/IamCarron/DVWA-Script/main/Install-DVWA.sh)\"\n```\n\n##### Manually Running the Script\n\n1. **Download the script:**\n\n   ```sh\n   wget https://raw.githubusercontent.com/IamCarron/DVWA-Script/main/Install-DVWA.sh\n   ```\n\n2. **Make the script executable:**\n\n   ```sh\n   chmod +x Install-DVWA.sh\n   ```\n\n3. **Run the script as root:**\n\n   ```sh\n   sudo ./Install-DVWA.sh\n   ```\n\n### Installation Videos\n\n- [Installing DVWA on Kali running in VirtualBox](https://www.youtube.com/watch?v=WkyDxNJkgQ4)\n- [Installing DVWA on Windows using XAMPP](https://youtu.be/Yzksa_WjnY0)\n- [Installing Damn Vulnerable Web Application (DVWA) on Windows 10](https://www.youtube.com/watch?v=cak2lQvBRAo)\n\n### Windows + XAMPP\n\nThe easiest way to install DVWA is to download and install [XAMPP](https://www.apachefriends.org/) if you do not already have a web server setup.\n\nXAMPP is a very easy to install Apache Distribution for Linux, Solaris, Windows and Mac OS X. The package includes the Apache web server, MySQL, PHP, Perl, a FTP server and phpMyAdmin.\n\nThis [video](https://youtu.be/Yzksa_WjnY0) walks you through the installation process for Windows but it should be similar for other OSs.\n\n### Docker\n\nThanks to [hoang-himself](https://github.com/hoang-himself) and [JGillam](https://github.com/JGillam), every commit to the `master` branch causes a Docker image to be built and ready to be pulled down from GitHub Container Registry.\n\nFor more information on what you are getting, you can browse [the prebuilt Docker images](https://github.com/digininja/DVWA/pkgs/container/dvwa).\n\n#### Getting Started\n\nPrerequisites: Docker and Docker Compose.\n\n- If you are using Docker Desktop, both of these should be already installed.\n- If you prefer Docker Engine on Linux, make sure to follow their [installation guide](https://docs.docker.com/engine/install/#server).\n\n**We provide support for the latest Docker release as shown above.**\nIf you are using Linux and the Docker package that came with your package manager, it will probably work too, but support will only be best-effort.\n\nUpgrading Docker from the package manager version to upstream requires that you uninstall the old versions as seen in their manuals for [Ubuntu](https://docs.docker.com/engine/install/ubuntu/#uninstall-old-versions), [Fedora](https://docs.docker.com/engine/install/fedora/#uninstall-old-versions) and others.\nYour Docker data (containers, images, volumes, etc.) should not be affected, but in case you do run into a problem, make sure to [tell Docker](https://www.docker.com/support) and use search engines in the mean time.\n\nThen, to get started:\n\n1. Run `docker version` and `docker compose version` to see if you have Docker and Docker Compose properly installed. You should be able to see their versions in the output.\n\n    For example:\n\n    ```text\n    >>> docker version\n    Client:\n     [...]\n     Version:           23.0.5\n     [...]\n\n    Server: Docker Desktop 4.19.0 (106363)\n     Engine:\n      [...]\n      Version:          23.0.5\n      [...]\n\n    >>> docker compose version\n    Docker Compose version v2.17.3\n    ```\n\n    If you don't see anything or get a command not found error, follow the prerequisites to setup Docker and Docker Compose.\n\n2. Clone or download this repository and extract (see [Download](#download)).\n3. Open a terminal of your choice and change its working directory into this folder (`DVWA`).\n4. Run `docker compose up -d`.\n\nDVWA is now available at `http://localhost:4280`.\n\n**Notice that for running DVWA in containers, the web server is listening on port 4280 instead of the usual port of 80.**\nFor more information on this decision, see [I want to run DVWA on a different port](#i-want-to-run-dvwa-on-a-different-port).\n\n#### Local Build\n\nIf you made local changes and want to build the project from local, go to `compose.yml` and change `pull_policy: always` to `pull_policy: build`.\n\nRunning `docker compose up -d` should trigger Docker to build an image from local regardless of what is available in the registry.\n\nSee also: [`pull_policy`](https://github.com/compose-spec/compose-spec/blob/master/05-services.md#pull_policy\n).\n\n### PHP Versions\n\nIdeally you should be using the latest stable version of PHP as that is the version that this app will be developed and tested on.\n\nSupport will not be given for anyone trying to use PHP 5.x.\n\nVersions less than 7.3 have known issues that will cause problems, most of the app will work, but random things may not. Unless you have a very good reason for using such an old version, support will not be given.\n\n### Linux Packages\n\nIf you are using a Debian based Linux distribution, you will need to install the following packages _(or their equivalent)_:\n\n- apache2\n- libapache2-mod-php\n- mariadb-server\n- mariadb-client\n- php php-mysqli\n- php-gd\n\nI would recommend doing an update before this, just so you make sure you are going to get the latest version of everything.\n\n```sh\napt update\napt install -y apache2 mariadb-server mariadb-client php php-mysqli php-gd libapache2-mod-php\n```\n\nThe site will work with MySQL instead of MariaDB but we strongly recommend MariaDB as it works out of the box whereas you have to make changes to get MySQL to work correctly.\n\n## Configurations\n\n### Config File\n\nDVWA ships with a dummy copy of its config file which you will need to copy into place and then make the appropriate changes. On Linux, assuming you are in the DVWA directory, this can be done as follows:\n\n`cp config/config.inc.php.dist config/config.inc.php`\n\nOn Windows, this can be a bit harder if you are hiding file extensions, if you are unsure about this, this blog post explains more about it:\n\n[How to Make Windows Show File Extensions](https://www.howtogeek.com/205086/beginner-how-to-make-windows-show-file-extensions/)\n\n### Config with environment variables\n\nInstead of modifying the configuration file, you can also set most settings using environment variables. In a Docker or Kubernetes deployment, this allows you to modify the configuration without creating a new Docker image. You'll find the variables in the [config/config.inc.php.dist](config/config.inc.php.dist) file.\n\nIf you want to set the default security level to \"low\", simply add the following line to the [compose.yml](./compose.yml) file:\n\n```yml\nenvironment:\n  - DB_SERVER=db\n  - DEFAULT_SECURITY_LEVEL=low\n```\n\n### Database Setup\n\nTo set up the database, simply click on the `Setup DVWA` button in the main menu, then click on the `Create / Reset Database` button. This will create / reset the database for you with some data in.\n\nIf you receive an error while trying to create your database, make sure your database credentials are correct within `./config/config.inc.php`. _This differs from config.inc.php.dist, which is an example file._\n\nThe variables are set to the following by default:\n\n```php\n$_DVWA[ 'db_server'] = '127.0.0.1';\n$_DVWA[ 'db_port'] = '3306';\n$_DVWA[ 'db_user' ] = 'dvwa';\n$_DVWA[ 'db_password' ] = 'p@ssw0rd';\n$_DVWA[ 'db_database' ] = 'dvwa';\n```\n\nNote, if you are using MariaDB rather than MySQL (MariaDB is default in Kali), then you can't use the database root user, you must create a new database user. To do this, connect to the database as the root user then use the following commands:\n\n```mariadb\nMariaDB [(none)]> create database dvwa;\nQuery OK, 1 row affected (0.00 sec)\n\nMariaDB [(none)]> create user dvwa@localhost identified by 'p@ssw0rd';\nQuery OK, 0 rows affected (0.01 sec)\n\nMariaDB [(none)]> grant all on dvwa.* to dvwa@localhost;\nQuery OK, 0 rows affected (0.01 sec)\n\nMariaDB [(none)]> flush privileges;\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n### Disable Authentication\n\nSome tools don't work well with authentication so can't be used with DVWA. To get around this, there is a config option to disable authentication checking. To do this, simply set the following in the config file:\n\n```php\n$_DVWA[ 'disable_authentication' ] = true;\n```\n\nYou will also need to set the security level to one that is appropriate to the testing you want to do:\n\n```php\n$_DVWA[ 'default_security_level' ] = 'low';\n```\n\nIn this state, you can access all the features without needing to log in and set any cookies.\n\n### Folder Permissions\n\n- `./hackable/uploads/` - Needs to be writeable by the web service (for File Upload).\n\n### PHP Configuration\n\nOn Linux systems, likely found in `/etc/php/x.x/fpm/php.ini` or `/etc/php/x.x/apache2/php.ini`.\n\n- To allow  Remote File Inclusions (RFI):\n  - `allow_url_include = on` [[allow_url_include](https://secure.php.net/manual/en/filesystem.configuration.php#ini.allow-url-include)]\n  - `allow_url_fopen = on` [[allow_url_fopen](https://secure.php.net/manual/en/filesystem.configuration.php#ini.allow-url-fopen)]\n\n- To make sure PHP shows all error messages:\n  - `display_errors = on` [[display_errors](https://secure.php.net/manual/en/errorfunc.configuration.php#ini.display-errors)]\n  - `display_startup_errors = on` [[display_startup_errors](https://secure.php.net/manual/en/errorfunc.configuration.php#ini.display-startup-errors)]\n\nMake sure you restart the php service or Apache after making the changes.\n\n### reCAPTCHA\n\nThis is only required for the \"Insecure CAPTCHA\" lab, if you aren't playing with that lab, you can ignore this section.\n\nGenerated a pair of API keys from <https://www.google.com/recaptcha/admin/create>.\n\nThese then go in the following sections of `./config/config.inc.php`:\n\n- `$_DVWA[ 'recaptcha_public_key' ]`\n- `$_DVWA[ 'recaptcha_private_key' ]`\n\n### Default Credentials\n\n**Default username = `admin`**\n\n**Default password = `password`**\n\n_...can easily be brute forced ;)_\n\nLogin URL: <http://127.0.0.1/login.php>\n\n_Note: This will be different if you installed DVWA into a different directory._\n\n- - -\n\n## Troubleshooting\n\nThese assume you are on a Debian based distro, such as Debian, Ubuntu and Kali. For other distros, follow along, but update the command where appropriate.\n\n### Containers\n\n#### I want to access the logs\n\nIf you are using Docker Desktop, logs can be accessed from the graphical application.\nSome minor details may change with newer versions, but the access method should be the same.\n\n![Overview of DVWA compose](./docs/graphics/docker/overview.png)\n![Viewing DVWA logs](docs/graphics/docker/detail.png)\n\nLogs can also be accessed from the terminal.\n\n1. Open a terminal and change its working directory to DVWA\n2. Show the merged logs\n\n    ```sh\n    docker compose logs\n    ```\n\n   In case you want to export the logs to a file, e.g. `dvwa.log`\n\n   ```sh\n   docker compose logs > dvwa.log\n   ```\n\n#### I want to run DVWA on a different port\n\nWe don't use port 80 by default for a few reasons:\n\n- Some users might already be running something on port 80.\n- Some users might be using a rootless container engine (like Podman), and 80 is a privileged port (< 1024). Additional configuration (e.g. setting `net.ipv4.ip_unprivileged_port_start`) is required, but you will have to research on your own.\n\nYou can expose DVWA on a different port by changing the port binding in the `compose.yml` file.\nFor example, you can change\n\n```yml\nports:\n  - 127.0.0.1:4280:80\n```\n\nto\n\n```yml\nports:\n  - 127.0.0.1:8806:80\n```\n\nDVWA is now accessible at `http://localhost:8806`.\n\nIn cases in which you want DVWA to not only be accessible exclusively from your own device, but\non your local network too (e.g. because you are setting up a test machine for a workshop), you\ncan remove the `127.0.0.1:` from the port mapping (or replace it with you LAN IP). This way it\nwill listen on all available device. The safe default should always be to only listen on your\nlocal loopback device. After all, it is a damn vulnerable web application, running on your machine.\n\n#### DVWA auto starts when Docker runs\n\nThe included [`compose.yml`](./compose.yml) file automatically runs DVWA and its database when Docker starts.\n\nTo disable this, you can delete or comment out the `restart: unless-stopped` lines in the [`compose.yml`](./compose.yml) file.\n\nIf you want to disable this behavior temporarily, you can run `docker compose stop`, or use Docker Desktop, find `dvwa` and click Stop.\nAdditionally, you can delete the containers, or run `docker compose down`.\n\n### Log files\n\nOn Linux systems Apache generates two log files by default, `access.log` and `error.log` and on Debian based system these are usually found in `/var/log/apache2/`.\n\nWhen submitting error reports, problems, anything like that, please include at least the last five lines from each of these files. On Debian based systems you can get these like this:\n\n```sh\ntail -n 5 /var/log/apache2/access.log /var/log/apache2/error.log\n```\n\n### I browsed to the site and got a 404\n\nIf you are having this problem you need to understand file locations. By default, the Apache document root (the place it starts looking for web content) is `/var/www/html`. If you put the file `hello.txt` in this directory, to access it you would browse to `http://localhost/hello.txt`.\n\nIf you created a directory and put the file in there - `/var/www/html/mydir/hello.txt` - you would then need to browse to `http://localhost/mydir/hello.txt`.\n\nLinux is by default case sensitive and so in the example above, if you tried to browse to any of these, you would get a `404 Not Found`:\n\n- `http://localhost/MyDir/hello.txt`\n- `http://localhost/mydir/Hello.txt`\n- `http://localhost/MYDIR/hello.txt`\n\nHow does this affect DVWA? Most people use git to clone DVWA into `/var/www/html`, this gives them the directory `/var/www/html/DVWA/` with all the DVWA files inside it. They then browse to `http://localhost/` and get either a `404` or the default Apache welcome page. As the files are in DVWA, you must browse to `http://localhost/DVWA`.\n\nThe other common mistake is to browse to `http://localhost/dvwa` which will give a `404` because `dvwa` is not `DVWA` as far as Linux directory matching is concerned.\n\nSo after setup, if you try to visit the site and get a `404`, think about where you installed the files to, where they are relative to the document root, and what the case of the directory you used is.\n\n### I browsed to the site and got a blank screen\n\nThis is usually one configuration issue hiding another issue. By default, PHP does not display errors, and so if you forgot to turn error display on during the setup process, any other problems, such as failure to connect to the database, will stop the app from loading but the message to tell you what is wrong will be hidden.\n\nTo fix this, make sure you set `display_errors` and `display_startup_errors` as covered in [PHP Configuration](#php-configuration) and then restart Apache.\n\n### \"Access denied\" running setup\n\nIf you see the following when running the setup script it means the username or password in the config file do not match those configured on the database:\n\n```mariadb\nDatabase Error #1045: Access denied for user 'notdvwa'@'localhost' (using password: YES).\n```\n\nThe error is telling you that you are using the username `notdvwa`.\n\nThe following error says you have pointed the config file at the wrong database.\n\n```mariadb\nSQL: Access denied for user 'dvwa'@'localhost' to database 'notdvwa'\n```\n\nIt is saying that you are using the user `dvwa` and trying to connect to the database `notdvwa`.\n\nThe first thing to do is to double check what you think you put in the config file is what is actually there.\n\nIf it matches what you expect, the next thing to do is to check you can log in as the user on the command line. Assuming you have a database user of `dvwa` and a password of `p@ssw0rd`, run the following command:\n\n```sh\nmysql -u dvwa -pp@ssw0rd -D dvwa\n```\n\n_Note: There is no space after the -p_\n\nIf you see the following, the password is correct:\n\n```mariadb\nWelcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MariaDB connection id is 14\nServer version: 10.3.22-MariaDB-0ubuntu0.19.10.1 Ubuntu 19.10\n\nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nMariaDB [dvwa]>\n```\n\nAs you can connect on the command line, it is likely something wrong in the config file, double check that and then raise an issue if you still can't get things working.\n\nIf you see the following, the username or password you are using is wrong. Repeat the [Database Setup](#database-setup) steps and make sure you use the same username and password throughout the process.\n\n```mariadb\nERROR 1045 (28000): Access denied for user 'dvwa'@'localhost' (using password: YES)\n```\n\nIf you get the following, the user credentials are correct but the user does not have access to the database. Again, repeat the setup steps and check the database name you are using.\n\n```mariadb\nERROR 1044 (42000): Access denied for user 'dvwa'@'localhost' to database 'dvwa'\n```\n\nThe final error you could get is this:\n\n```mariadb\nERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)\n```\n\nThis is not an authentication issue but tells you that the database server is not running. Start it with the following\n\n```sh\nsudo service mysql start\n```\n\n### Connection Refused\n\nAn error similar to this one:\n\n```mariadb\nFatal error: Uncaught mysqli_sql_exception: Connection refused in /var/sites/dvwa/non-secure/htdocs/dvwa/includes/dvwaPage.inc.php:535\n```\n\nMeans your database server is not running or you've got the wrong IP address in the config file.\n\nCheck this line in the config file to see where the database server is expected to be:\n\n```php\n$_DVWA[ 'db_server' ]   = '127.0.0.1';\n```\n\nThen go to this server and check that it is running. In Linux this can be done with:\n\n```sh\nsystemctl status mariadb.service\n```\n\nAnd you are looking for something like this, the important bit is that it says `active (running)`.\n\n```sh\n\u25cf mariadb.service - MariaDB 10.5.19 database server\n     Loaded: loaded (/lib/systemd/system/mariadb.service; enabled; preset: enabled)\n     Active: active (running) since Thu 2024-03-14 16:04:25 GMT; 1 week 5 days ago\n```\n\nIf it is not running, you can start it with:\n\n```sh\nsudo systemctl stop mariadb.service \n```\n\nNote the `sudo` and make sure you put your Linux user password in if requested.\n\nIn Windows, check the status in the XAMPP console.\n\n### Unknown authentication method\n\nWith the most recent versions of MySQL, PHP can no longer talk to the database in its default configuration. If you try to run the setup script and get the following message it means you have configuration.\n\n```mariadb\nDatabase Error #2054: The server requested authentication method unknown to the client.\n```\n\nYou have two options, the easiest is to uninstall MySQL and install MariaDB. The following is the official guide from the MariaDB project:\n\n<https://mariadb.com/resources/blog/how-to-migrate-from-mysql-to-mariadb-on-linux-in-five-steps/>\n\nAlternatively, follow these steps:\n\n1. As root, edit the following file: `/etc/mysql/mysql.conf.d/mysqld.cnf`\n1. Under the line `[mysqld]`, add the following:\n  `default-authentication-plugin=mysql_native_password`\n1. Restart the database: `sudo service mysql restart`\n1. Check the authentication method for your database user:\n\n    ```sql\n    mysql> select Host,User, plugin from mysql.user where mysql.user.User = 'dvwa';\n    +-----------+------------------+-----------------------+\n    | Host      | User             | plugin                |\n    +-----------+------------------+-----------------------+\n    | localhost | dvwa             | caching_sha2_password |\n    +-----------+------------------+-----------------------+\n    1 rows in set (0.00 sec)\n    ```\n\n1. You'll likely see `caching_sha2_password`. If you do, run the following command:\n\n    ```sql\n    mysql> ALTER USER dvwa@localhost IDENTIFIED WITH mysql_native_password BY 'p@ssw0rd';\n    ```\n\n1. Re-running the check, you should now see `mysql_native_password`.\n\n    ```sql\n    mysql> select Host,User, plugin from mysql.user where mysql.user.User = 'dvwa';\n    +-----------+------+-----------------------+\n    | Host      | User | plugin                |\n    +-----------+------+-----------------------+\n    | localhost | dvwa | mysql_native_password |\n    +-----------+------+-----------------------+\n    1 row in set (0.00 sec)\n    ```\n\nAfter all that, the setup process should now work as normal.\n\nIf you want more information see the following page: <https://www.php.net/manual/en/mysqli.requirements.php>.\n\n### Database Error #2002: No such file or directory\n\nThe database server is not running. In a Debian based distro this can be done with:\n\n```sh\nsudo service mysql start\n```\n\n### Errors \"MySQL server has gone away\" and \"Packets out of order\"\n\nThere are a few reasons you could be getting these errors, but the most likely is the version of database server you are running is not compatible with the version of PHP.\n\nThis is most commonly found when you are running the latest version of MySQL as PHP and it do not get on well. Best advice, ditch MySQL and install MariaDB as this is not something we can support.\n\nFor more information, see:\n\n<https://www.ryadel.com/en/fix-mysql-server-gone-away-packets-order-similar-mysql-related-errors/>\n\n### Command Injection won't work\n\nApache may not have high enough privileges to run commands on the web server. If you are running DVWA under Linux make sure you are logged in as root. Under Windows log in as Administrator.\n\n### Why can't the database connect on CentOS?\n\nYou may be running into problems with SELinux.  Either disable SELinux or run this command to allow the web server to talk to the database:\n\n```sh\nsetsebool -P httpd_can_network_connect_db 1\n```\n\n### Anything Else\n\nFor the latest troubleshooting information please read both open and closed tickets in the git repo:\n\n<https://github.com/digininja/DVWA/issues>\n\nBefore submitting a ticket, please make sure you are running the latest version of the code from the repo. This is not the latest release, this is the latest code from the master branch.\n\nIf raising a ticket, please submit at least the following information:\n\n- Operating System\n- The last 5 lines from the web server error log directly after whatever error you are reporting occurs\n- If it is a database authentication problem, go through the steps above and screenshot each step. Submit these along with a screenshot of the section of the config file showing the database user and password.\n- A full description of what is going wrong, what you expect to happen, and what you have tried to do to fix it. \"login broken\" is no enough for us to understand your problem and to help fix it.\n\n- - -\n\n## Tutorials\n\nI am going to try to put together some tutorial videos that walk through some of the vulnerabilities and show how to detect them and then how to exploit them. Here are the ones I've made so far:\n\n[Finding and Exploiting Reflected XSS](https://youtu.be/V4MATqtdxss)\n\n- - -\n\n## SQLite3 SQL Injection\n\n_Support for this is limited, before raising issues, please ensure you are prepared to work on debugging, do not simply claim \"it does not work\"._\n\nBy default, SQLi and Blind SQLi are done against the MariaDB/MySQL server used by the site but it is possible to switch to do the SQLi testing against SQLite3 instead.\n\nI am not going to cover how to get SQLite3 working with PHP, but it should be a simple case of installing the `php-sqlite3` package and making sure it is enabled.\n\nTo make the switch, simply edit the config file and add or edit these lines:\n\n```php\n$_DVWA[\"SQLI_DB\"] = \"sqlite\";\n$_DVWA[\"SQLITE_DB\"] = \"sqli.db\";\n```\n\nBy default it uses the file `database/sqli.db`, if you mess it up, simply copy `database/sqli.db.dist` over the top.\n\nThe challenges are exactly the same as for MySQL, they just run against SQLite3 instead.\n\n- - -\n\n\ud83d\udc68\u200d\ud83d\udcbb Contributors\n-----\n\nThanks for all your contributions and keeping this project updated. :heart:\n\nIf you have an idea, some kind of improvement or just simply want to collaborate, you are welcome to contribute and participate in the Project, feel free to send your PR.\n\n<p align=\"center\">\n<a href=\"https://github.com/digininja/DVWA/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=digininja/DVWA&max=500\">\n</a>\n</p>\n\n- - -\n\n## Reporting Vulnerabilities\n\nTo put it simply, please don't!\n\nOnce a year or so, someone will submit a report for a vulnerability they've found in the app, some are well written, sometimes better than I've seen in paid pen test reports, some are just \"you are missing headers, pay me\".\n\nIn 2023, this elevated to a whole new level when someone decided to request a CVE for one of the vulnerabities, they were given [CVE-2023-39848](https://nvd.nist.gov/vuln/detail/CVE-2023-39848). Much hilarity ensued and time was wasted getting this corrected.\n\nThe app has vulnerabilities, it is deliberate. Most are the well documented ones that you work through as lessons, others are \"hidden\" ones, ones to find on your own. If you really want to show off your skills at finding the hidden extras, write a blog post or create a video as there are probably people out there who would be interested in learning about them and about how your found them. If you send us the link, we may even include it in the references.\n\n## Links\n\nProject Home: <https://github.com/digininja/DVWA>\n\n_Created by the DVWA team_\n",
        "releases": [
            {
                "name": "Cryptography Module",
                "date": "2024-09-23T10:27:49Z"
            },
            {
                "name": "Container Support",
                "date": "2023-06-11T11:39:10Z"
            },
            {
                "name": "cookies on non-standard port",
                "date": "2023-03-22T11:18:47Z"
            },
            {
                "name": "Open HTTP Redirect",
                "date": "2023-03-10T14:20:04Z"
            },
            {
                "name": "Removed PHP IDS",
                "date": "2023-03-10T15:05:12Z"
            },
            {
                "name": "Authorisation Bypass",
                "date": "2023-01-29T21:36:04Z"
            },
            {
                "name": "Moved from Pastebin to Hastebin for CSP low",
                "date": "2020-09-13T15:00:59Z"
            },
            {
                "name": "A fresh start",
                "date": "2020-08-05T15:43:20Z"
            },
            {
                "name": "",
                "date": "2015-10-05T07:53:29Z"
            }
        ]
    }
}