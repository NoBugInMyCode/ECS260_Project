{
    "https://api.github.com/repos/shieldfy/API-Security-Checklist": {
        "forks": 2612,
        "watchers": 22588,
        "stars": 22588,
        "languages": {},
        "commits": [
            "2024-11-22T02:52:38Z",
            "2024-11-15T12:18:13Z",
            "2024-11-15T10:23:34Z",
            "2024-11-15T10:22:54Z",
            "2024-04-16T04:26:11Z",
            "2024-04-16T02:13:00Z",
            "2024-02-10T03:21:13Z",
            "2024-02-10T02:57:55Z",
            "2024-02-10T02:42:48Z",
            "2024-02-09T20:06:08Z",
            "2024-02-09T20:03:47Z",
            "2023-12-14T06:35:47Z",
            "2023-12-14T06:27:12Z",
            "2023-12-13T05:09:29Z",
            "2023-12-13T04:51:50Z",
            "2023-12-12T21:51:26Z",
            "2023-12-12T21:44:26Z",
            "2023-12-12T21:42:29Z",
            "2023-12-12T21:37:36Z",
            "2023-12-12T21:35:24Z",
            "2023-07-12T07:23:46Z",
            "2023-07-12T07:16:59Z",
            "2023-07-12T06:10:33Z",
            "2023-05-09T13:17:01Z",
            "2023-04-19T03:58:22Z",
            "2023-04-19T03:42:17Z",
            "2023-04-19T03:39:03Z",
            "2023-04-19T02:38:22Z",
            "2023-04-19T02:30:26Z",
            "2023-03-31T05:24:59Z"
        ],
        "creation_date": "2017-07-08T20:01:38Z",
        "contributors": 30,
        "topics": [
            "api",
            "jwt",
            "oauth2",
            "security"
        ],
        "subscribers": 541,
        "readme": "[\u7e41\u4e2d\u7248](./README-tw.md) | [\u7b80\u4e2d\u7248](./README-zh.md) | [\u0627\u0644\u0639\u0631\u0628\u064a\u0629](./README-ar.md) | [Az\u0259rbaycan](./README-az.md) | [\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438](./README-bg.md) | [\u09ac\u09be\u0982\u09b2\u09be](./README-bn.md) | [Catal\u00e0](./README-ca.md) | [\u010ce\u0161tina](./README-cs.md) | [Deutsch](./README-de.md) | [\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac](./README-el.md) | [Espa\u00f1ol](./README-es.md) | [\u0641\u0627\u0631\u0633\u06cc](./README-fa.md) | [Fran\u00e7ais](./README-fr.md) | [\u0939\u093f\u0902\u0926\u0940](./README-hi.md) | [Indonesia](./README-id.md) | [Italiano](./README-it.md) | [\u65e5\u672c\u8a9e](./README-ja.md) | [\ud55c\uad6d\uc5b4](./README-ko.md) | [\u0e9e\u0eb2\u0eaa\u0eb2\u0ea5\u0eb2\u0ea7](./README-lo.md) | [\u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438](./README-mk.md) | [\u0d2e\u0d32\u0d2f\u0d3e\u0d33\u0d02](./README-ml.md) | [\u041c\u043e\u043d\u0433\u043e\u043b](./README-mn.md) | [Nederlands](./README-nl.md) | [Polski](./README-pl.md) | [Portugu\u00eas (Brasil)](./README-pt_BR.md) | [\u0420\u0443\u0441\u0441\u043a\u0438\u0439](./README-ru.md) | [\u0e44\u0e17\u0e22](./README-th.md) | [T\u00fcrk\u00e7e](./README-tr.md) | [\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430](./README-uk.md) | [Ti\u1ebfng Vi\u1ec7t](./README-vi.md)\n\n# API Security Checklist\n\nChecklist of the most important security countermeasures when designing, testing, and releasing your API.\n\n---\n\n## Authentication\n\n- [ ] Don't use `Basic Auth`. Use standard authentication instead (e.g., [JWT](https://jwt.io/)).\n- [ ] Don't reinvent the wheel in `Authentication`, `token generation`, `password storage`. Use the standards.\n- [ ] Use `Max Retry` and jail features in Login.\n- [ ] Use encryption on all sensitive data.\n\n### JWT (JSON Web Token)\n\n- [ ] Use a random complicated key (`JWT Secret`) to make brute forcing the token very hard.\n- [ ] Don't extract the algorithm from the header. Force the algorithm in the backend (`HS256` or `RS256`).\n- [ ] Make token expiration (`TTL`, `RTTL`) as short as possible.\n- [ ] Don't store sensitive data in the JWT payload, it can be decoded [easily](https://jwt.io/#debugger-io).\n- [ ] Avoid storing too much data. JWT is usually shared in headers and they have a size limit.\n\n## Access\n\n- [ ] Limit requests (Throttling) to avoid DDoS / brute-force attacks.\n- [ ] Use HTTPS on server side with TLS 1.2+ and secure ciphers to avoid MITM (Man in the Middle Attack).\n- [ ] Use `HSTS` header with SSL to avoid SSL Strip attacks.\n- [ ] Turn off directory listings.\n- [ ] For private APIs, allow access only from safelisted IPs/hosts.\n\n## Authorization\n\n### OAuth\n\n- [ ] Always validate `redirect_uri` server-side to allow only safelisted URLs.\n- [ ] Always try to exchange for code and not tokens (don't allow `response_type=token`).\n- [ ] Use `state` parameter with a random hash to prevent CSRF on the OAuth authorization process.\n- [ ] Define the default scope, and validate scope parameters for each application.\n\n## Input\n\n- [ ] Use the proper HTTP method according to the operation: `GET (read)`, `POST (create)`, `PUT/PATCH (replace/update)`, and `DELETE (to delete a record)`, and respond with `405 Method Not Allowed` if the requested method isn't appropriate for the requested resource.\n- [ ] Validate `content-type` on request Accept header (Content Negotiation) to allow only your supported format (e.g., `application/xml`, `application/json`, etc.) and respond with `406 Not Acceptable` response if not matched.\n- [ ] Validate `content-type` of posted data as you accept (e.g., `application/x-www-form-urlencoded`, `multipart/form-data`, `application/json`, etc.).\n- [ ] Validate user input to avoid common vulnerabilities (e.g., `XSS`, `SQL-Injection`, `Remote Code Execution`, etc.).\n- [ ] Don't use any sensitive data (`credentials`, `Passwords`, `security tokens`, or `API keys`) in the URL, but use standard Authorization header.\n- [ ] Use only server-side encryption.\n- [ ] Use an API Gateway service to enable caching, Rate Limit policies (e.g., `Quota`, `Spike Arrest`, or `Concurrent Rate Limit`) and deploy APIs resources dynamically.\n\n## Processing\n\n- [ ] Check if all the endpoints are protected behind authentication to avoid broken authentication process.\n- [ ] User own resource ID should be avoided. Use `/me/orders` instead of `/user/654321/orders`.\n- [ ] Don't auto-increment IDs. Use `UUID` instead.\n- [ ] If you are parsing XML data, make sure entity parsing is not enabled to avoid `XXE` (XML external entity attack).\n- [ ] If you are parsing XML, YAML or any other language with anchors and refs, make sure entity expansion is not enabled to avoid `Billion Laughs/XML bomb` via exponential entity expansion attack.\n- [ ] Use a CDN for file uploads.\n- [ ] If you are dealing with huge amount of data, use Workers and Queues to process as much as possible in background and return response fast to avoid HTTP Blocking.\n- [ ] Do not forget to turn the DEBUG mode OFF.\n- [ ] Use non-executable stacks when available.\n\n## Output\n\n- [ ] Send `X-Content-Type-Options: nosniff` header.\n- [ ] Send `X-Frame-Options: deny` header.\n- [ ] Send `Content-Security-Policy: default-src 'none'` header.\n- [ ] Remove fingerprinting headers - `X-Powered-By`, `Server`, `X-AspNet-Version`, etc.\n- [ ] Force `content-type` for your response. If you return `application/json`, then your `content-type` response is `application/json`.\n- [ ] Don't return sensitive data like `credentials`, `passwords`, or `security tokens`.\n- [ ] Return the proper status code according to the operation completed. (e.g., `200 OK`, `400 Bad Request`, `401 Unauthorized`, `405 Method Not Allowed`, etc.).\n\n## CI & CD\n\n- [ ] Audit your design and implementation with unit/integration tests coverage.\n- [ ] Use a code review process and disregard self-approval.\n- [ ] Ensure that all components of your services are statically scanned by AV software before pushing to production, including vendor libraries and other dependencies.\n- [ ] Continuously run security tests (static/dynamic analysis) on your code.\n- [ ] Check your dependencies (both software and OS) for known vulnerabilities.\n- [ ] Design a rollback solution for deployments.\n\n## Monitoring\n\n- [ ] Use centralized logins for all services and components.\n- [ ] Use agents to monitor all traffic, errors, requests, and responses.\n- [ ] Use alerts for SMS, Slack, Email, Telegram, Kibana, Cloudwatch, etc.\n- [ ] Ensure that you aren't logging any sensitive data like credit cards, passwords, PINs, etc.\n- [ ] Use an IDS and/or IPS system to monitor your API requests and instances.\n\n---\n\n## See also:\n\n- [yosriady/api-development-tools](https://github.com/yosriady/api-development-tools) - A collection of useful resources for building RESTful HTTP+JSON APIs.\n\n---\n\n# Contribution\n\nFeel free to contribute by forking this repository, making some changes, and submitting pull requests. For any questions drop us an email at `team@shieldfy.io`.\n",
        "releases": []
    }
}