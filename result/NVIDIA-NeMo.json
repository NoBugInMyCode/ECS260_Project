{
    "https://api.github.com/repos/NVIDIA/NeMo": {
        "forks": 2638,
        "watchers": 12930,
        "stars": 12930,
        "languages": {
            "Python": 23632671,
            "Jupyter Notebook": 7084075,
            "Shell": 50118,
            "C++": 27587,
            "HTML": 4324,
            "CSS": 2001,
            "Makefile": 890
        },
        "commits": [
            "2025-01-22T08:53:27Z",
            "2025-01-22T08:51:57Z",
            "2025-01-21T22:15:07Z",
            "2025-01-21T21:12:43Z",
            "2025-01-21T18:11:52Z",
            "2025-01-21T17:15:14Z",
            "2025-01-21T16:27:28Z",
            "2025-01-21T10:10:54Z",
            "2025-01-20T23:17:30Z",
            "2025-01-20T19:14:04Z",
            "2025-01-20T10:07:43Z",
            "2025-01-19T06:43:49Z",
            "2025-01-19T02:11:40Z",
            "2025-01-18T20:33:05Z",
            "2025-01-18T03:56:15Z",
            "2025-01-18T00:58:57Z",
            "2025-01-18T00:47:12Z",
            "2025-01-17T22:09:14Z",
            "2025-01-17T19:49:43Z",
            "2025-01-17T18:04:06Z",
            "2025-01-17T16:58:13Z",
            "2025-01-17T14:17:45Z",
            "2025-01-16T19:00:32Z",
            "2025-01-16T18:26:49Z",
            "2025-01-16T15:31:16Z",
            "2025-01-16T06:03:24Z",
            "2025-01-15T21:25:44Z",
            "2025-01-15T18:34:35Z",
            "2025-01-15T02:22:22Z",
            "2025-01-14T21:58:05Z"
        ],
        "creation_date": "2019-08-05T20:16:42Z",
        "contributors": 30,
        "topics": [
            "asr",
            "deeplearning",
            "generative-ai",
            "large-language-models",
            "machine-translation",
            "multimodal",
            "neural-networks",
            "speaker-diariazation",
            "speaker-recognition",
            "speech-synthesis",
            "speech-translation",
            "tts"
        ],
        "subscribers": 213,
        "readme": "[![Project Status: Active -- The project has reached a stable, usable state and is being actively developed.](http://www.repostatus.org/badges/latest/active.svg)](http://www.repostatus.org/#active)\n[![Documentation](https://readthedocs.com/projects/nvidia-nemo/badge/?version=main)](https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/)\n[![CodeQL](https://github.com/nvidia/nemo/actions/workflows/codeql.yml/badge.svg?branch=main&event=push)](https://github.com/nvidia/nemo/actions/workflows/codeql.yml)\n[![NeMo core license and license for collections in this repo](https://img.shields.io/badge/License-Apache%202.0-brightgreen.svg)](https://github.com/NVIDIA/NeMo/blob/master/LICENSE)\n[![Release version](https://badge.fury.io/py/nemo-toolkit.svg)](https://badge.fury.io/py/nemo-toolkit)\n[![Python version](https://img.shields.io/pypi/pyversions/nemo-toolkit.svg)](https://badge.fury.io/py/nemo-toolkit)\n[![PyPi total downloads](https://static.pepy.tech/personalized-badge/nemo-toolkit?period=total&units=international_system&left_color=grey&right_color=brightgreen&left_text=downloads)](https://pepy.tech/project/nemo-toolkit)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n# **NVIDIA NeMo Framework**\n\n## Latest News\n\n<!-- markdownlint-disable -->\n<details open>\n  <summary><b>NeMo 2.0</b></summary>\n      We've released NeMo 2.0, an update on the NeMo Framework which prioritizes modularity and ease-of-use. Please refer to the <a href=https://docs.nvidia.com/nemo-framework/user-guide/latest/nemo-2.0/index.html>NeMo Framework User Guide</a> to get started.\n</details>\n<details open>\n  <summary><b>New Cosmos World Foundation Models Support</b></summary>\n    <details> \n      <summary> <a href=\"https://developer.nvidia.com/blog/advancing-physical-ai-with-nvidia-cosmos-world-foundation-model-platform\">Advancing Physical AI with NVIDIA Cosmos World Foundation Model Platform </a> (2025-01-09) \n      </summary> \n        The end-to-end NVIDIA Cosmos platform accelerates world model development for physical AI systems. Built on CUDA, Cosmos combines state-of-the-art world foundation models, video tokenizers, and AI-accelerated data processing pipelines. Developers can accelerate world model development by fine-tuning Cosmos world foundation models or building new ones from the ground up. These models create realistic synthetic videos of environments and interactions, providing a scalable foundation for training complex systems, from simulating humanoid robots performing advanced actions to developing end-to-end autonomous driving models. \n        <br><br>\n    </details>\n    <details>\n      <summary>\n        <a href=\"https://developer.nvidia.com/blog/accelerate-custom-video-foundation-model-pipelines-with-new-nvidia-nemo-framework-capabilities/\">\n          Accelerate Custom Video Foundation Model Pipelines with New NVIDIA NeMo Framework Capabilities\n        </a> (2025-01-07)\n      </summary>\n        The NeMo Framework now supports training and customizing the <a href=\"https://github.com/NVIDIA/Cosmos\">NVIDIA Cosmos</a> collection of world foundation models. Cosmos leverages advanced text-to-world generation techniques to create fluid, coherent video content from natural language prompts.\n        <br><br>\n        You can also now accelerate your video processing step using the <a href=\"https://developer.nvidia.com/nemo-curator-video-processing-early-access\">NeMo Curator</a> library, which provides optimized video processing and captioning features that can deliver up to 89x faster video processing when compared to an unoptimized CPU pipeline.\n      <br><br>\n    </details>\n</details>\n<details open>\n  <summary><b>Large Language Models and Multimodal Models</b></summary>\n    <details>\n      <summary>\n        <a href=\"https://developer.nvidia.com/blog/state-of-the-art-multimodal-generative-ai-model-development-with-nvidia-nemo/\">\n          State-of-the-Art Multimodal Generative AI Model Development with NVIDIA NeMo\n        </a> (2024-11-06)\n      </summary>\n        NVIDIA recently announced significant enhancements to the NeMo platform, focusing on multimodal generative AI models. The update includes NeMo Curator and the Cosmos tokenizer, which streamline the data curation process and enhance the quality of visual data. These tools are designed to handle large-scale data efficiently, making it easier to develop high-quality AI models for various applications, including robotics and autonomous driving. The Cosmos tokenizers, in particular, efficiently map visual data into compact, semantic tokens, which is crucial for training large-scale generative models. The tokenizer is available now on the <a href=http://github.com/NVIDIA/cosmos-tokenizer/NVIDIA/cosmos-tokenizer>NVIDIA/cosmos-tokenizer</a> GitHub repo and on <a href=https://huggingface.co/nvidia/Cosmos-Tokenizer-CV8x8x8>Hugging Face</a>.\n      <br><br>\n    </details>\n    <details>\n      <summary>\n        <a href=\"https://docs.nvidia.com/nemo-framework/user-guide/latest/llms/llama/index.html#new-llama-3-1-support for more information/\">\n        New Llama 3.1 Support\n        </a> (2024-07-23)\n      </summary>\n        The NeMo Framework now supports training and customizing the Llama 3.1 collection of LLMs from Meta.\n      <br><br>\n    </details>\n    <details>\n      <summary>\n        <a href=\"https://aws.amazon.com/blogs/machine-learning/accelerate-your-generative-ai-distributed-training-workloads-with-the-nvidia-nemo-framework-on-amazon-eks/\">\n          Accelerate your Generative AI Distributed Training Workloads with the NVIDIA NeMo Framework on Amazon EKS\n        </a> (2024-07-16)\n      </summary>\n     NVIDIA NeMo Framework now runs distributed training workloads on an Amazon Elastic Kubernetes Service (Amazon EKS) cluster. For step-by-step instructions on creating an EKS cluster and running distributed training workloads with NeMo, see the GitHub repository <a href=\"https://github.com/aws-samples/awsome-distributed-training/tree/main/3.test_cases/2.nemo-launcher/EKS/\"> here.</a>\n      <br><br>\n    </details>\n    <details>\n      <summary>\n        <a href=\"https://developer.nvidia.com/blog/nvidia-nemo-accelerates-llm-innovation-with-hybrid-state-space-model-support/\">\n          NVIDIA NeMo Accelerates LLM Innovation with Hybrid State Space Model Support\n        </a> (2024/06/17)\n      </summary>\n     NVIDIA NeMo and Megatron Core now support pre-training and fine-tuning of state space models (SSMs). NeMo also supports training models based on the Griffin architecture as described by Google DeepMind. \n      <br><br>\n    </details>\n      <details>\n      <summary>\n        <a href=\"https://huggingface.co/models?sort=trending&search=nvidia%2Fnemotron-4-340B\">\n          NVIDIA releases 340B base, instruct, and reward models pretrained on a total of 9T tokens.\n        </a> (2024-06-18)\n      </summary>\n      See documentation and tutorials for SFT, PEFT, and PTQ with \n      <a href=\"https://docs.nvidia.com/nemo-framework/user-guide/latest/llms/nemotron/index.html\">\n        Nemotron 340B \n      </a>\n      in the NeMo Framework User Guide.\n      <br><br>\n    </details>\n    <details>\n      <summary>\n        <a href=\"https://developer.nvidia.com/blog/nvidia-sets-new-generative-ai-performance-and-scale-records-in-mlperf-training-v4-0/\">\n          NVIDIA sets new generative AI performance and scale records in MLPerf Training v4.0\n        </a> (2024/06/12)\n      </summary>\n      Using NVIDIA NeMo Framework and NVIDIA Hopper GPUs NVIDIA was able to scale to 11,616 H100 GPUs and achieve near-linear performance scaling on LLM pretraining. \n      NVIDIA also achieved the highest LLM fine-tuning performance and raised the bar for text-to-image training.\n      <br><br>\n    </details>\n    <details>\n        <summary>\n          <a href=\"https://cloud.google.com/blog/products/compute/gke-and-nvidia-nemo-framework-to-train-generative-ai-models\">\n            Accelerate your generative AI journey with NVIDIA NeMo Framework on GKE\n          </a> (2024/03/16)\n        </summary>\n        An end-to-end walkthrough to train generative AI models on the Google Kubernetes Engine (GKE) using the NVIDIA NeMo Framework is available at https://github.com/GoogleCloudPlatform/nvidia-nemo-on-gke. \n        The walkthrough includes detailed instructions on how to set up a Google Cloud Project and pre-train a GPT model using the NeMo Framework.\n        <br><br>\n      </details>\n</details>\n<details open>\n  <summary><b>Speech Recognition</b></summary>\n  <details>\n      <summary>\n        <a href=\"https://developer.nvidia.com/blog/accelerating-leaderboard-topping-asr-models-10x-with-nvidia-nemo/\">\n          Accelerating Leaderboard-Topping ASR Models 10x with NVIDIA NeMo\n        </a> (2024/09/24)\n      </summary>\n      NVIDIA NeMo team released a number of inference optimizations for CTC, RNN-T, and TDT models that resulted in up to 10x inference speed-up. \n      These models now exceed an inverse real-time factor (RTFx) of 2,000, with some reaching RTFx of even 6,000.\n      <br><br>\n    </details>\n    <details>\n      <summary>\n        <a href=\"https://developer.nvidia.com/blog/new-standard-for-speech-recognition-and-translation-from-the-nvidia-nemo-canary-model/\">\n          New Standard for Speech Recognition and Translation from the NVIDIA NeMo Canary Model\n        </a> (2024/04/18)\n      </summary>\n      The NeMo team just released Canary, a multilingual model that transcribes speech in English, Spanish, German, and French with punctuation and capitalization. \n      Canary also provides bi-directional translation, between English and the three other supported languages.\n      <br><br>\n    </details>\n    <details>\n      <summary>\n        <a href=\"https://developer.nvidia.com/blog/pushing-the-boundaries-of-speech-recognition-with-nemo-parakeet-asr-models/\">\n          Pushing the Boundaries of Speech Recognition with NVIDIA NeMo Parakeet ASR Models\n        </a> (2024/04/18)\n      </summary>\n      NVIDIA NeMo, an end-to-end platform for the development of multimodal generative AI models at scale anywhere\u2014on any cloud and on-premises\u2014released the Parakeet family of automatic speech recognition (ASR) models. \n      These state-of-the-art ASR models, developed in collaboration with Suno.ai, transcribe spoken English with exceptional accuracy.\n      <br><br>\n    </details>\n  <details>\n    <summary>\n      <a href=\"https://developer.nvidia.com/blog/turbocharge-asr-accuracy-and-speed-with-nvidia-nemo-parakeet-tdt/\">\n        Turbocharge ASR Accuracy and Speed with NVIDIA NeMo Parakeet-TDT\n      </a> (2024/04/18)\n    </summary>\n    NVIDIA NeMo, an end-to-end platform for developing multimodal generative AI models at scale anywhere\u2014on any cloud and on-premises\u2014recently released Parakeet-TDT. \n    This new addition to the \u202fNeMo ASR Parakeet model family boasts better accuracy and 64% greater speed over the previously best model, Parakeet-RNNT-1.1B.\n    <br><br>\n  </details>\n</details>\n<!-- markdownlint-enable -->\n\n## Introduction\n\nNVIDIA NeMo Framework is a scalable and cloud-native generative AI\nframework built for researchers and PyTorch developers working on Large\nLanguage Models (LLMs), Multimodal Models (MMs), Automatic Speech\nRecognition (ASR), Text to Speech (TTS), and Computer Vision (CV)\ndomains. It is designed to help you efficiently create, customize, and\ndeploy new generative AI models by leveraging existing code and\npre-trained model checkpoints.\n\nFor technical documentation, please see the [NeMo Framework User\nGuide](https://docs.nvidia.com/nemo-framework/user-guide/latest/playbooks/index.html).\n\n## What's New in NeMo 2.0\n\nNVIDIA NeMo 2.0 introduces several significant improvements over its predecessor, NeMo 1.0, enhancing flexibility, performance, and scalability.\n\n- **Python-Based Configuration** - NeMo 2.0 transitions from YAML files to a Python-based configuration, providing more flexibility and control. This shift makes it easier to extend and customize configurations programmatically.\n\n- **Modular Abstractions** - By adopting PyTorch Lightning\u2019s modular abstractions, NeMo 2.0 simplifies adaptation and experimentation. This modular approach allows developers to more easily modify and experiment with different components of their models.\n\n- **Scalability** - NeMo 2.0 seamlessly scaling large-scale experiments across thousands of GPUs using [NeMo-Run](https://github.com/NVIDIA/NeMo-Run), a powerful tool designed to streamline the configuration, execution, and management of machine learning experiments across computing environments.\n\nOverall, these enhancements make NeMo 2.0 a powerful, scalable, and user-friendly framework for AI model development.\n\n> [!IMPORTANT]  \n> NeMo 2.0 is currently supported by the LLM (large language model) and VLM (vision language model) collections.\n\n### Get Started with NeMo 2.0\n\n- Refer to the [Quickstart](https://docs.nvidia.com/nemo-framework/user-guide/latest/nemo-2.0/quickstart.html) for examples of using NeMo-Run to launch NeMo 2.0 experiments locally and on a slurm cluster.\n- For more information about NeMo 2.0, see the [NeMo Framework User Guide](https://docs.nvidia.com/nemo-framework/user-guide/latest/nemo-2.0/index.html).\n- [NeMo 2.0 Recipes](https://github.com/NVIDIA/NeMo/blob/main/nemo/collections/llm/recipes) contains additional examples of launching large-scale runs using NeMo 2.0 and NeMo-Run.\n- For an in-depth exploration of the main features of NeMo 2.0, see the [Feature Guide](https://docs.nvidia.com/nemo-framework/user-guide/latest/nemo-2.0/features/index.html#feature-guide).\n- To transition from NeMo 1.0 to 2.0, see the [Migration Guide](https://docs.nvidia.com/nemo-framework/user-guide/latest/nemo-2.0/migration/index.html#migration-guide) for step-by-step instructions.\n\n### Get Started with Cosmos\n\nNeMo Curator and NeMo Framework support video curation and post-training of the Cosmos World Foundation Models, which are open and available on [NGC](https://catalog.ngc.nvidia.com/orgs/nvidia/teams/cosmos/collections/cosmos) and [Hugging Face](https://huggingface.co/collections/nvidia/cosmos-6751e884dc10e013a0a0d8e6). For more information on video datasets, refer to [NeMo Curator](https://developer.nvidia.com/nemo-curator). To post-train World Foundation Models using the NeMo Framework for your custom physical AI tasks, see the [Cosmos Diffusion models](https://github.com/NVIDIA/Cosmos/blob/main/cosmos1/models/diffusion/nemo/post_training/README.md) and the [Cosmos Autoregressive models](https://github.com/NVIDIA/Cosmos/blob/main/cosmos1/models/autoregressive/nemo/post_training/README.md).\n\n## LLMs and MMs Training, Alignment, and Customization\n\nAll NeMo models are trained with\n[Lightning](https://github.com/Lightning-AI/lightning). Training is\nautomatically scalable to 1000s of GPUs. You can check the performance benchmarks using the\nlatest NeMo Framework container [here](https://docs.nvidia.com/nemo-framework/user-guide/latest/performance/performance_summary.html).\n\nWhen applicable, NeMo models leverage cutting-edge distributed training\ntechniques, incorporating [parallelism\nstrategies](https://docs.nvidia.com/nemo-framework/user-guide/latest/modeloverview.html)\nto enable efficient training of very large models. These techniques\ninclude Tensor Parallelism (TP), Pipeline Parallelism (PP), Fully\nSharded Data Parallelism (FSDP), Mixture-of-Experts (MoE), and Mixed\nPrecision Training with BFloat16 and FP8, as well as others.\n\nNeMo Transformer-based LLMs and MMs utilize [NVIDIA Transformer\nEngine](https://github.com/NVIDIA/TransformerEngine) for FP8 training on\nNVIDIA Hopper GPUs, while leveraging [NVIDIA Megatron\nCore](https://github.com/NVIDIA/Megatron-LM/tree/main/megatron/core) for\nscaling Transformer model training.\n\nNeMo LLMs can be aligned with state-of-the-art methods such as SteerLM,\nDirect Preference Optimization (DPO), and Reinforcement Learning from\nHuman Feedback (RLHF). See [NVIDIA NeMo\nAligner](https://github.com/NVIDIA/NeMo-Aligner) for more information.\n\nIn addition to supervised fine-tuning (SFT), NeMo also supports the\nlatest parameter efficient fine-tuning (PEFT) techniques such as LoRA,\nP-Tuning, Adapters, and IA3. Refer to the [NeMo Framework User\nGuide](https://docs.nvidia.com/nemo-framework/user-guide/latest/sft_peft/index.html)\nfor the full list of supported models and techniques.\n\n## LLMs and MMs Deployment and Optimization\n\nNeMo LLMs and MMs can be deployed and optimized with [NVIDIA NeMo\nMicroservices](https://developer.nvidia.com/nemo-microservices-early-access).\n\n## Speech AI\n\nNeMo ASR and TTS models can be optimized for inference and deployed for\nproduction use cases with [NVIDIA Riva](https://developer.nvidia.com/riva).\n\n## NeMo Framework Launcher\n\n> [!IMPORTANT]  \n> NeMo Framework Launcher is compatible with NeMo version 1.0 only. [NeMo-Run](https://github.com/NVIDIA/NeMo-Run) is recommended for launching experiments using NeMo 2.0.\n\n[NeMo Framework\nLauncher](https://github.com/NVIDIA/NeMo-Megatron-Launcher) is a\ncloud-native tool that streamlines the NeMo Framework experience. It is\nused for launching end-to-end NeMo Framework training jobs on CSPs and\nSlurm clusters.\n\nThe NeMo Framework Launcher includes extensive recipes, scripts,\nutilities, and documentation for training NeMo LLMs. It also includes\nthe NeMo Framework [Autoconfigurator](https://github.com/NVIDIA/NeMo-Megatron-Launcher#53-using-autoconfigurator-to-find-the-optimal-configuration),\nwhich is designed to find the optimal model parallel configuration for\ntraining on a specific cluster.\n\nTo get started quickly with the NeMo Framework Launcher, please see the\n[NeMo Framework\nPlaybooks](https://docs.nvidia.com/nemo-framework/user-guide/latest/playbooks/index.html).\nThe NeMo Framework Launcher does not currently support ASR and TTS\ntraining, but it will soon.\n\n## Get Started with NeMo Framework\n\nGetting started with NeMo Framework is easy. State-of-the-art pretrained\nNeMo models are freely available on [Hugging Face\nHub](https://huggingface.co/models?library=nemo&sort=downloads&search=nvidia)\nand [NVIDIA\nNGC](https://catalog.ngc.nvidia.com/models?query=nemo&orderBy=weightPopularDESC).\nThese models can be used to generate text or images, transcribe audio,\nand synthesize speech in just a few lines of code.\n\nWe have extensive\n[tutorials](https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/stable/starthere/tutorials.html)\nthat can be run on [Google Colab](https://colab.research.google.com) or\nwith our [NGC NeMo Framework\nContainer](https://catalog.ngc.nvidia.com/orgs/nvidia/containers/nemo).\nWe also have\n[playbooks](https://docs.nvidia.com/nemo-framework/user-guide/latest/playbooks/index.html)\nfor users who want to train NeMo models with the NeMo Framework\nLauncher.\n\nFor advanced users who want to train NeMo models from scratch or\nfine-tune existing NeMo models, we have a full suite of [example\nscripts](https://github.com/NVIDIA/NeMo/tree/main/examples) that support\nmulti-GPU/multi-node training.\n\n## Key Features\n\n- [Large Language Models](nemo/collections/nlp/README.md)\n- [Multimodal](nemo/collections/multimodal/README.md)\n- [Automatic Speech Recognition](nemo/collections/asr/README.md)\n- [Text to Speech](nemo/collections/tts/README.md)\n- [Computer Vision](nemo/collections/vision/README.md)\n\n## Requirements\n\n- Python 3.10 or above\n- Pytorch 1.13.1 or above\n- NVIDIA GPU (if you intend to do model training)\n\n## Developer Documentation\n\n| Version | Status                                                                                                                                                              | Description                                                                                                                    |\n| ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------ |\n| Latest  | [![Documentation Status](https://readthedocs.com/projects/nvidia-nemo/badge/?version=main)](https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/)     | [Documentation of the latest (i.e. main) branch.](https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/)          |\n| Stable  | [![Documentation Status](https://readthedocs.com/projects/nvidia-nemo/badge/?version=stable)](https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/stable/) | [Documentation of the stable (i.e. most recent release)](https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/stable/) |\n\n## Install NeMo Framework\n\nThe NeMo Framework can be installed in a variety of ways, depending on\nyour needs. Depending on the domain, you may find one of the following\ninstallation methods more suitable.\n\n- Conda / Pip - Refer to [Conda](#conda) and [Pip](#pip) for\n  installation instructions.\n  - This is the recommended method for ASR and TTS domains.\n  - When using a Nvidia PyTorch container as the base, this is the\n      recommended method for all domains.\n- Docker Containers - Refer to [Docker containers](#docker-containers)\n  for installation instructions.\n  - NeMo Framework container -\n      [nvcr.io/nvidia/nemo:24.05]{.title-ref}\n- LLMs and MMs Dependencies - Refer to [LLMs and MMs\n    Dependencies](#install-llms-and-mms-dependencies) for installation\n    instructions.\n\n**Important: We strongly recommended that you start with a base NVIDIA\nPyTorch container: nvcr.io/nvidia/pytorch:24.02-py3.**\n\n### Conda\n\nInstall NeMo in a fresh Conda environment:\n\n```bash\nconda create --name nemo python==3.10.12\nconda activate nemo\n```\n\nInstall PyTorch using their\n[configurator](https://pytorch.org/get-started/locally/):\n\n```bash\nconda install pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia\n```\n\nThe command to install PyTorch may depend on your system. Use the\nconfigurator linked above to find the right command for your system.\n\nThen, install NeMo via Pip or from Source. We do not provide NeMo on the\nconda-forge or any other Conda channel.\n\n### Pip\n\nTo install the nemo_toolkit, use the following installation method:\n\n```bash\napt-get update && apt-get install -y libsndfile1 ffmpeg\npip install Cython packaging\npip install nemo_toolkit['all']\n```\n\nDepending on the shell used, you may need to use the\n`\"nemo_toolkit[all]\"` specifier instead in the above command.\n\n### Pip from a Specific Domain\n\nTo install a specific domain of NeMo, you must first install the\nnemo_toolkit using the instructions listed above. Then, you run the\nfollowing domain-specific commands:\n\n```bash\npip install nemo_toolkit['asr']\npip install nemo_toolkit['nlp']\npip install nemo_toolkit['tts']\npip install nemo_toolkit['vision']\npip install nemo_toolkit['multimodal']\n```\n\n### Pip from a Source Branch\n\nIf you want to work with a specific version of NeMo from a particular\nGitHub branch (e.g main), use the following installation method:\n\n```bash\napt-get update && apt-get install -y libsndfile1 ffmpeg\npip install Cython packaging\npython -m pip install git+https://github.com/NVIDIA/NeMo.git@{BRANCH}#egg=nemo_toolkit[all]\n```\n\n### Build from Source\n\nIf you want to clone the NeMo GitHub repository and contribute to NeMo\nopen-source development work, use the following installation method:\n\n```bash\napt-get update && apt-get install -y libsndfile1 ffmpeg\ngit clone https://github.com/NVIDIA/NeMo\ncd NeMo\n./reinstall.sh\n```\n\nIf you only want the toolkit without the additional Conda-based\ndependencies, you can replace `reinstall.sh` with `pip install -e .`\nwhen your PWD is the root of the NeMo repository.\n\n### Mac Computers with Apple Silicon\n\nTo install NeMo on Mac computers with the Apple M-Series GPU, you need\nto create a new Conda environment, install PyTorch 2.0 or higher, and\nthen install the nemo_toolkit.\n\n**Important: This method is only applicable to the ASR domain.**\n\nRun the following code:\n\n```shell\n# [optional] install mecab using Homebrew, to use sacrebleu for NLP collection\n# you can install Homebrew here: https://brew.sh\nbrew install mecab\n\n# [optional] install pynini using Conda, to use text normalization\nconda install -c conda-forge pynini\n\n# install Cython manually\npip install cython packaging\n\n# clone the repo and install in development mode\ngit clone https://github.com/NVIDIA/NeMo\ncd NeMo\npip install 'nemo_toolkit[all]'\n\n# Note that only the ASR toolkit is guaranteed to work on MacBook - so for MacBook use pip install 'nemo_toolkit[asr]'\n```\n\n### Windows Computers\n\nTo install the Windows Subsystem for Linux (WSL), run the following code\nin PowerShell:\n\n```shell\nwsl --install\n# [note] If you run wsl --install and see the WSL help text, it means WSL is already installed.\n```\n\nTo learn more about installing WSL, refer to [Microsoft\\'s official\ndocumentation](https://learn.microsoft.com/en-us/windows/wsl/install).\n\nAfter installing your Linux distribution with WSL, two options are\navailable:\n\n**Option 1:** Open the distribution (Ubuntu by default) from the Start\nmenu and follow the instructions.\n\n**Option 2:** Launch the Terminal application. Download it from\n[Microsoft\\'s Windows Terminal\npage](https://learn.microsoft.com/en-us/windows/terminal) if not\ninstalled.\n\nNext, follow the instructions for Linux systems, as provided above. For\nexample:\n\n```bash\napt-get update && apt-get install -y libsndfile1 ffmpeg\ngit clone https://github.com/NVIDIA/NeMo\ncd NeMo\n./reinstall.sh\n```\n\n### RNNT\n\nFor optimal performance of a Recurrent Neural Network Transducer (RNNT),\ninstall the Numba package from Conda.\n\nRun the following code:\n\n```bash\nconda remove numba\npip uninstall numba\nconda install -c conda-forge numba\n```\n\n## Install LLMs and MMs Dependencies\n\nIf you work with the LLM and MM domains, three additional dependencies\nare required: NVIDIA Apex, NVIDIA Transformer Engine, and NVIDIA\nMegatron Core. When working with the [main]{.title-ref} branch, these\ndependencies may require a recent commit.\n\nThe most recent working versions of these dependencies are here:\n\n```bash\nexport apex_commit=810ffae374a2b9cb4b5c5e28eaeca7d7998fca0c\nexport te_commit=bfe21c3d68b0a9951e5716fb520045db53419c5e\nexport mcore_commit=02871b4df8c69fac687ab6676c4246e936ce92d0\nexport nv_pytorch_tag=24.02-py3\n```\n\nWhen using a released version of NeMo, please refer to the [Software\nComponent\nVersions](https://docs.nvidia.com/nemo-framework/user-guide/latest/softwarecomponentversions.html)\nfor the correct versions.\n\n### PyTorch Container\n\nWe recommended that you start with a base NVIDIA PyTorch container:\nnvcr.io/nvidia/pytorch:24.02-py3.\n\nIf starting with a base NVIDIA PyTorch container, you must first launch\nthe container:\n\n```bash\ndocker run \\\n  --gpus all \\\n  -it \\\n  --rm \\\n  --shm-size=16g \\\n  --ulimit memlock=-1 \\\n  --ulimit stack=67108864 \\\n  nvcr.io/nvidia/pytorch:$nv_pytorch_tag\n```\n\nNext, you need to install the dependencies.\n\n### Apex\n\nNVIDIA Apex is required for LLM and MM domains. Although Apex is\npre-installed in the NVIDIA PyTorch container, you may need to update it\nto a newer version.\n\nTo install Apex, run the following code:\n\n```bash\ngit clone https://github.com/NVIDIA/apex.git\ncd apex\ngit checkout $apex_commit\npip install . -v --no-build-isolation --disable-pip-version-check --no-cache-dir --config-settings \"--build-option=--cpp_ext --cuda_ext --fast_layer_norm --distributed_adam --deprecated_fused_adam --group_norm\"\n```\n\nWhen attempting to install Apex separately from the NVIDIA PyTorch\ncontainer, you might encounter an error if the CUDA version on your\nsystem is different from the one used to compile PyTorch. To bypass this\nerror, you can comment out the relevant line in the setup file located\nin the Apex repository on GitHub here:\n<https://github.com/NVIDIA/apex/blob/master/setup.py#L32>.\n\ncuda-nvprof is needed to install Apex. The version should match the CUDA\nversion that you are using.\n\nTo install cuda-nvprof, run the following code:\n\n```bash\nconda install -c nvidia cuda-nvprof=11.8\n```\n\nFinally, install the packaging:\n\n```bash\npip install packaging\n```\n\nTo install the most recent versions of Apex locally, it might be\nnecessary to remove the [pyproject.toml]{.title-ref} file from the Apex\ndirectory.\n\n### Transformer Engine\n\nNVIDIA Transformer Engine is required for LLM and MM domains. Although\nthe Transformer Engine is pre-installed in the NVIDIA PyTorch container,\nyou may need to update it to a newer version.\n\nThe Transformer Engine facilitates training with FP8 precision on NVIDIA\nHopper GPUs and introduces many enhancements for the training of\nTransformer-based models. Refer to [Transformer Engine](https://docs.nvidia.com/deeplearning/transformer-engine/user-guide/installation.html)\nfor information.\n\nTo install Transformer Engine, run the following code:\n\n```bash\ngit clone https://github.com/NVIDIA/TransformerEngine.git && \\\ncd TransformerEngine && \\\ngit checkout $te_commit && \\\ngit submodule init && git submodule update && \\\nNVTE_FRAMEWORK=pytorch NVTE_WITH_USERBUFFERS=1 MPI_HOME=/usr/local/mpi pip install .\n```\n\nTransformer Engine requires PyTorch to be built with at least CUDA 11.8.\n\n### Megatron Core\n\nMegatron Core is required for LLM and MM domains. Megatron Core is a\nlibrary for scaling large Transformer-based models. NeMo LLMs and MMs\nleverage Megatron Core for model parallelism, transformer architectures,\nand optimized PyTorch datasets.\n\nTo install Megatron Core, run the following code:\n\n```bash\ngit clone https://github.com/NVIDIA/Megatron-LM.git && \\\ncd Megatron-LM && \\\ngit checkout $mcore_commit && \\\npip install . && \\\ncd megatron/core/datasets && \\\nmake\n```\n\n## NeMo Text Processing\n\nNeMo Text Processing, specifically Inverse Text Normalization, is now a\nseparate repository. It is located here:\n<https://github.com/NVIDIA/NeMo-text-processing>.\n\n## Docker Containers\n\nNeMo containers are launched concurrently with NeMo version updates.\nNeMo Framework now supports LLMs, MMs, ASR, and TTS in a single\nconsolidated Docker container. You can find additional information about\nreleased containers on the [NeMo releases\npage](https://github.com/NVIDIA/NeMo/releases).\n\nTo use a pre-built container, run the following code:\n\n```bash\ndocker pull nvcr.io/nvidia/nemo:24.05\n```\n\nTo build a nemo container with Dockerfile from a branch, run the\nfollowing code:\n\n```bash\nDOCKER_BUILDKIT=1 docker build -f Dockerfile -t nemo:latest\n```\n\nIf you choose to work with the main branch, we recommend using NVIDIA\\'s\nPyTorch container version 23.10-py3 and then installing from GitHub.\n\n```bash\ndocker run --gpus all -it --rm -v <nemo_github_folder>:/NeMo --shm-size=8g \\\n-p 8888:8888 -p 6006:6006 --ulimit memlock=-1 --ulimit \\\nstack=67108864 --device=/dev/snd nvcr.io/nvidia/pytorch:23.10-py3\n```\n\n## Future Work\n\nThe NeMo Framework Launcher does not currently support ASR and TTS\ntraining, but it will soon.\n\n## Discussions Board\n\nFAQ can be found on the NeMo [Discussions\nboard](https://github.com/NVIDIA/NeMo/discussions). You are welcome to\nask questions or start discussions on the board.\n\n## Contribute to NeMo\n\nWe welcome community contributions! Please refer to\n[CONTRIBUTING.md](https://github.com/NVIDIA/NeMo/blob/stable/CONTRIBUTING.md)\nfor the process.\n\n## Publications\n\nWe provide an ever-growing list of\n[publications](https://nvidia.github.io/NeMo/publications/) that utilize\nthe NeMo Framework.\n\nTo contribute an article to the collection, please submit a pull request\nto the `gh-pages-src` branch of this repository. For detailed\ninformation, please consult the README located at the [gh-pages-src\nbranch](https://github.com/NVIDIA/NeMo/tree/gh-pages-src#readme).\n\n## Blogs\n\n<!-- markdownlint-disable -->\n<details open>\n  <summary><b>Large Language Models and Multimodal Models</b></summary>\n    <details>\n      <summary>\n        <a href=\"https://blogs.nvidia.com/blog/bria-builds-responsible-generative-ai-using-nemo-picasso/\">\n          Bria Builds Responsible Generative AI for Enterprises Using NVIDIA NeMo, Picasso\n        </a> (2024/03/06)\n      </summary>\n      Bria, a Tel Aviv startup at the forefront of visual generative AI for enterprises now leverages the NVIDIA NeMo Framework. \n      The Bria.ai platform uses reference implementations from the NeMo Multimodal collection, trained on NVIDIA Tensor Core GPUs, to enable high-throughput and low-latency image generation. \n      Bria has also adopted NVIDIA Picasso, a foundry for visual generative AI models, to run inference.\n      <br><br>\n    </details>\n    <details>\n      <summary>\n        <a href=\"https://developer.nvidia.com/blog/new-nvidia-nemo-framework-features-and-nvidia-h200-supercharge-llm-training-performance-and-versatility/\">\n          New NVIDIA NeMo Framework Features and NVIDIA H200\n        </a> (2023/12/06)\n      </summary>\n      NVIDIA NeMo Framework now includes several optimizations and enhancements, \n      including: \n      1) Fully Sharded Data Parallelism (FSDP) to improve the efficiency of training large-scale AI models, \n      2) Mix of Experts (MoE)-based LLM architectures with expert parallelism for efficient LLM training at scale, \n      3) Reinforcement Learning from Human Feedback (RLHF) with TensorRT-LLM for inference stage acceleration, and \n      4) up to 4.2x speedups for Llama 2 pre-training on NVIDIA H200 Tensor Core GPUs.\n      <br><br>\n      <a href=\"https://developer.nvidia.com/blog/new-nvidia-nemo-framework-features-and-nvidia-h200-supercharge-llm-training-performance-and-versatility\">\n      <img src=\"https://github.com/sbhavani/TransformerEngine/blob/main/docs/examples/H200-NeMo-performance.png\" alt=\"H200-NeMo-performance\" style=\"width: 600px;\"></a>\n      <br><br>\n    </details>\n    <details>\n      <summary>\n        <a href=\"https://blogs.nvidia.com/blog/nemo-amazon-titan/\">\n          NVIDIA now powers training for Amazon Titan Foundation models\n        </a> (2023/11/28)\n      </summary>\n      NVIDIA NeMo Framework now empowers the Amazon Titan foundation models (FM) with efficient training of large language models (LLMs). \n      The Titan FMs form the basis of Amazon\u2019s generative AI service, Amazon Bedrock. \n      The NeMo Framework provides a versatile framework for building, customizing, and running LLMs.\n      <br><br>\n    </details>\n</details>\n<!-- markdownlint-enable -->\n\n## Licenses\n\n- [NeMo GitHub Apache 2.0\n  license](https://github.com/NVIDIA/NeMo?tab=Apache-2.0-1-ov-file#readme)\n- NeMo is licensed under the [NVIDIA AI PRODUCT\n  AGREEMENT](https://www.nvidia.com/en-us/data-center/products/nvidia-ai-enterprise/eula/).\n  By pulling and using the container, you accept the terms and\n  conditions of this license.\n",
        "releases": [
            {
                "name": "NVIDIA Neural Modules 2.1.0",
                "date": "2025-01-03T10:31:39Z"
            },
            {
                "name": "NVIDIA Neural Modules 2.1.0rc2",
                "date": "2024-12-21T18:54:28Z"
            },
            {
                "name": "NVIDIA Neural Modules 2.1.0rc1",
                "date": "2024-12-20T08:48:14Z"
            },
            {
                "name": "NVIDIA Neural Modules 2.1.0rc0",
                "date": "2024-12-11T23:16:37Z"
            },
            {
                "name": "NVIDIA Neural Modules 2.0.0",
                "date": "2024-11-14T18:57:24Z"
            },
            {
                "name": "NVIDIA Neural Modules 2.0.0rc1",
                "date": "2024-08-15T21:55:14Z"
            },
            {
                "name": "NVIDIA Neural Modules 2.0.0rc0",
                "date": "2024-06-06T05:46:45Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.23.0",
                "date": "2024-02-28T06:18:16Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.22.0",
                "date": "2024-01-11T02:04:18Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.21.0",
                "date": "2023-10-25T23:27:38Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.20.0",
                "date": "2023-08-04T19:50:15Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.19.1",
                "date": "2023-07-13T20:42:56Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.19.0",
                "date": "2023-06-15T23:46:05Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.18.1",
                "date": "2023-05-17T19:09:51Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.18.0",
                "date": "2023-05-12T17:49:27Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.17.0",
                "date": "2023-04-05T00:10:51Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.16.0",
                "date": "2023-03-08T04:35:06Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.15.0",
                "date": "2023-02-02T00:49:05Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.14.0",
                "date": "2022-12-24T02:49:19Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.13.0",
                "date": "2022-12-07T21:14:42Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.12.0",
                "date": "2022-10-10T22:11:51Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.11.0",
                "date": "2022-09-08T17:06:04Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.10.0",
                "date": "2022-07-01T22:14:42Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.9.0",
                "date": "2022-06-03T20:40:57Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.8.2",
                "date": "2022-04-26T21:29:23Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.8.1",
                "date": "2022-04-22T05:06:26Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.8.0",
                "date": "2022-04-20T04:29:29Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.7.2",
                "date": "2022-03-17T22:35:26Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.7.1",
                "date": "2022-03-08T03:04:21Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.7.0",
                "date": "2022-03-02T00:57:00Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.6.2",
                "date": "2022-02-05T06:09:02Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.6.1",
                "date": "2022-02-02T06:25:52Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.6.0",
                "date": "2022-01-29T04:53:25Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.5.1",
                "date": "2021-12-04T00:00:07Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.5.0",
                "date": "2021-11-20T01:55:45Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.4.0",
                "date": "2021-10-02T00:49:13Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.3.0",
                "date": "2021-08-27T21:24:41Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.2.0",
                "date": "2021-07-30T20:05:41Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.1.0",
                "date": "2021-07-02T21:51:32Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.0.2",
                "date": "2021-06-11T01:45:45Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.0.1",
                "date": "2021-06-09T05:40:06Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.0.0",
                "date": "2021-06-03T22:43:38Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.0.0rc1",
                "date": "2021-04-07T05:55:49Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.0.0b4",
                "date": "2021-02-16T05:27:47Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.0.0b3",
                "date": "2020-12-11T21:44:52Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.0.0b2",
                "date": "2020-11-17T00:52:38Z"
            },
            {
                "name": "NVIDIA Neural Modules 1.0.0b1",
                "date": "2020-10-05T17:21:53Z"
            },
            {
                "name": "NVIDIA Neural Modules v0.11.0",
                "date": "2020-07-10T00:15:57Z"
            },
            {
                "name": "NVIDIA Neural Modules v0.10.1",
                "date": "2020-04-17T04:53:07Z"
            },
            {
                "name": "NVIDIA Neural Modules v0.10.0",
                "date": "2020-04-03T06:09:00Z"
            },
            {
                "name": "NVIDIA Neural Modules v0.9.0",
                "date": "2019-12-16T23:12:19Z"
            },
            {
                "name": "NVIDIA Neural Modules v0.8.2",
                "date": "2019-11-15T01:45:18Z"
            },
            {
                "name": "NVIDIA Neural Modules v0.8.1",
                "date": "2019-11-05T20:36:25Z"
            },
            {
                "name": "NVIDIA Neural Modules v0.8",
                "date": "2019-09-19T21:12:40Z"
            }
        ]
    }
}