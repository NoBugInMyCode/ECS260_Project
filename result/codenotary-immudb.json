{
    "https://api.github.com/repos/codenotary/immudb": {
        "forks": 345,
        "watchers": 8672,
        "stars": 8672,
        "languages": {
            "Go": 4792336,
            "Shell": 60170,
            "Yacc": 21681,
            "Makefile": 12426,
            "Dockerfile": 9643,
            "Python": 6398,
            "Roff": 3622,
            "Smarty": 2120,
            "HTML": 2095,
            "JavaScript": 1335
        },
        "commits": [
            "2025-01-02T11:06:12Z",
            "2024-12-13T08:23:41Z",
            "2024-12-11T09:06:10Z",
            "2024-11-29T18:58:01Z",
            "2024-12-09T16:54:34Z",
            "2024-11-29T15:06:07Z",
            "2024-11-28T17:57:14Z",
            "2024-11-27T14:28:59Z",
            "2024-11-27T08:42:23Z",
            "2024-09-19T08:42:01Z",
            "2024-09-16T11:14:12Z",
            "2024-09-16T09:52:58Z",
            "2024-09-16T08:26:45Z",
            "2024-09-10T08:34:46Z",
            "2024-08-31T09:31:44Z",
            "2024-08-29T09:46:10Z",
            "2024-08-19T13:46:45Z",
            "2024-08-20T14:13:19Z",
            "2024-08-12T12:26:46Z",
            "2024-08-07T14:30:37Z",
            "2024-08-07T10:11:54Z",
            "2024-07-25T20:09:48Z",
            "2024-07-24T13:09:26Z",
            "2024-07-25T11:36:56Z",
            "2024-07-23T09:45:15Z",
            "2024-07-24T11:31:35Z",
            "2024-07-22T13:03:53Z",
            "2024-07-15T09:00:58Z",
            "2024-07-04T09:12:19Z",
            "2024-07-03T12:54:20Z"
        ],
        "creation_date": "2019-11-07T08:22:16Z",
        "contributors": 30,
        "topics": [
            "auditable",
            "compliance",
            "cryptographic",
            "database",
            "gdpr",
            "go",
            "immutable",
            "immutable-database",
            "key-value",
            "merkle-tree",
            "pci-dss",
            "performance",
            "sql",
            "tamper-evident",
            "tamperproof",
            "timetravel",
            "verification",
            "verify",
            "zero-trust"
        ],
        "subscribers": 78,
        "readme": "<!--\n---\n\ntitle: \"immudb\"\n\ncustom_edit_url: https://github.com/codenotary/immudb/edit/master/README.md\n---\n\n-->\n\n# immudb <img align=\"right\" src=\"img/Black%20logo%20-%20no%20background.png\" height=\"47px\" />\n\n\n[![Documentation](https://img.shields.io/website?label=Docs&url=https%3A%2F%2Fdocs.immudb.io%2F)](https://docs.immudb.io/)\n[![Build Status](https://github.com/codenotary/immudb/actions/workflows/push.yml/badge.svg)](https://github.com/codenotary/immudb/actions/workflows/push.yml)\n[![Go Report Card](https://goreportcard.com/badge/github.com/codenotary/immudb)](https://goreportcard.com/report/github.com/codenotary/immudb)\n[![View SBOM](https://img.shields.io/badge/sbom.sh-viewSBOM-blue?link=https%3A%2F%2Fsbom.sh%2F37cbffcf-1bd3-4daf-86b7-77deb71575b7)](https://sbom.sh/37cbffcf-1bd3-4daf-86b7-77deb71575b7)\n[![Homebrew](https://img.shields.io/homebrew/v/immudb)](https://formulae.brew.sh/formula/immudb)\n\n[![Discord](https://img.shields.io/discord/831257098368319569)](https://discord.gg/EWeCbkjZVu)\n[![Immudb Careers](https://img.shields.io/badge/careers-We%20are%20hiring!-blue?style=flat)](https://www.codenotary.com/job)\n[![Artifact Hub](https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/codenotary)](https://artifacthub.io/packages/search?repo=codenotary)\n\nDon't forget to \u2b50 this repo if you like immudb!\n\n[:tada: 27M pulls from docker hub!](https://hub.docker.com/r/codenotary)\n\n---\n\nDetailed documentation can be found at https://docs.immudb.io/\n\n---\n\n<img align=\"right\" src=\"img/immudb-mascot-small.png\" width=\"256px\"/>\n\nimmudb is a database with built-in cryptographic proof and verification. It tracks changes in sensitive data and the integrity of the history will be protected by the clients, without the need to trust the database. It can operate as a key-value store, as a document model database, and/or as relational database (SQL).\n\nTraditional database transactions and logs are mutable, and therefore there is no way to know for sure if your data has been compromised. immudb is immutable. You can add new versions of existing records, but never change or delete records. This lets you store critical data without fear of it being tampered.\n\nData stored in immudb is cryptographically coherent and verifiable. Unlike blockchains, immudb can handle millions of transactions per second, and can be used both as a lightweight service or embedded in your application as a library. immudb runs everywhere, on an IoT device, your notebook, a server, on-premise or in the cloud.\n\n\nWhen used as a relational data database, it supports both transactions and blobs, so there are no limits to the use cases. Developers and organizations use immudb to secure and tamper-evident log data, sensor data, sensitive data, transactions, software build recipes, rule-base data, artifacts and even video streams. [Examples of organizations using immudb today.](https://www.immudb.io)\n\n## Contents\n\n- [immudb](#immudb)\n  - [Contents](#contents)\n  - [Quickstart](#quickstart)\n    - [Getting immudb running: executable](#getting-immudb-running-executable)\n    - [Getting immudb running: docker](#getting-immudb-running-docker)\n    - [Getting immudb running: kubernetes](#getting-immudb-running-kubernetes)\n    - [Using subfolders](#using-subfolders)\n    - [Enabling Amazon S3 storage](#enabling-amazon-s3-storage)\n    - [Connecting with immuclient](#connecting-with-immuclient)\n    - [Using immudb](#using-immudb)\n      - [Real world examples](#real-world-examples)\n      - [How to integrate immudb in your application](#how-to-integrate-immudb-in-your-application)\n      - [Online demo environment](#online-demo-environment)\n  - [Tech specs](#tech-specs)\n  - [Performance figures](#performance-figures)\n  - [Roadmap](#roadmap)\n  - [Projects using immudb](#projects-using-immudb)\n  - [Contributing](#contributing)\n\n## Quickstart\n\n\n### Getting immudb running: executable\n\nYou may download the immudb binary from [the latest releases on Github](https://github.com/codenotary/immudb/releases/latest). Once you have downloaded immudb, rename it to `immudb`, make sure to mark it as executable, then run it. The following example shows how to obtain v1.9.5 for linux amd64:\n\n```bash\nwget https://github.com/codenotary/immudb/releases/download/v1.9.5/immudb-v1.9.5-linux-amd64\nmv immudb-v1.9.5-linux-amd64 immudb\nchmod +x immudb\n\n# run immudb in the foreground to see all output\n./immudb\n\n# or run immudb in the background\n./immudb -d\n```\n\n### Getting immudb running: Docker\n\nUse Docker to run immudb in a ready-to-use container:\n\n```bash\ndocker run -d --net host -it --rm --name immudb codenotary/immudb:latest\n```\n\nIf you are running the Docker image without host networking, make sure to expose ports 3322 and 9497.\n\n### Getting immudb running: Kubernetes\n\nIn kubernetes, use helm for an easy deployment: just add our repository and install immudb with these simple commands:\n\n```bash\nhelm repo add immudb https://packages.codenotary.org/helm\nhelm repo update\nhelm install immudb/immudb --generate-name\n```\n\n### Using subfolders\n\nImmudb helm chart creates a persistent volume for storing immudb database.\nThose database are now by default placed in a subdirectory.\n\nThat's for compatibility with ext4 volumes that have a `/lost+found` directory that can confuse immudb. Some volume providers,\nlike EBS or DigitalOcean, are using this kind of volumes. If we placed database directory on the root of the volume,\nthat `/lost+found` would be treated as a database. So we now create a subpath (usually `immudb`) subpath for storing that.\n\nThis is different from what we did on older (<=1.3.1) helm charts, so if you have already some volumes with data you can set\nvalue volumeSubPath to false (i.e.: `--set volumeSubPath.enabled=false`) when upgrading so that the old way is used.\n\nYou can alternatively migrate the data in a `/immudb` directory. You can use this pod as a reference for the job:\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: migrator\nspec:\n  volumes:\n    - name: \"vol0\"\n      persistentVolumeClaim:\n        claimName: <your-claim-name-here>\n  containers:\n    - name: migrator\n      image: busybox\n      volumeMounts:\n        - mountPath: \"/data\"\n          name: \"vol0\"\n      command:\n        - sh\n        - -c\n        - |\n          mkdir -p /data/immudb\n          ls /data | grep -v -E 'immudb|lost\\+found'|while read i; do mv /data/$i /data/immudb/$i; done\n```\n\nAs said before, you can totally disable the use of subPath by setting `volumeSubPath.enabled=false`.\nYou can also tune the subfolder path using `volumeSubPath.path` value, if you prefer your data on a\ndifferent directory than the default `immudb`.\n\n### Enabling Amazon S3 storage\n\nimmudb can store its data in the Amazon S3 service (or a compatible alternative).\nThe following example shows how to run immudb with the S3 storage enabled:\n\n```bash\nexport IMMUDB_S3_STORAGE=true\nexport IMMUDB_S3_ACCESS_KEY_ID=<S3 ACCESS KEY ID>\nexport IMMUDB_S3_SECRET_KEY=<SECRET KEY>\nexport IMMUDB_S3_BUCKET_NAME=<BUCKET NAME>\nexport IMMUDB_S3_LOCATION=<AWS S3 REGION>\nexport IMMUDB_S3_PATH_PREFIX=testing-001\nexport IMMUDB_S3_ENDPOINT=\"https://${IMMUDB_S3_BUCKET_NAME}.s3.${IMMUDB_S3_LOCATION}.amazonaws.com\"\n\n./immudb\n```\n\nWhen working with the external storage, you can enable the option for the remote storage\nto be the primary source of identifier. This way, if immudb is run using ephemeral disks,\nsuch as with AWS ECS Fargate, the identifier can be taken from S3. To enable that, use:\n\n```bash\nexport IMMUDB_S3_EXTERNAL_IDENTIFIER=true\n```\n\nYou can also use the role-based credentials for more flexible and secure configuration.\nThis allows the service to be used with instance role configuration without a user entity.\nThe following example shows how to run immudb with the S3 storage enabled using AWS Roles:\n\n```bash\nexport IMMUDB_S3_STORAGE=true\nexport IMMUDB_S3_ROLE_ENABLED=true\nexport IMMUDB_S3_BUCKET_NAME=<BUCKET NAME>\nexport IMMUDB_S3_LOCATION=<AWS S3 REGION>\nexport IMMUDB_S3_PATH_PREFIX=testing-001\nexport IMMUDB_S3_ENDPOINT=\"https://${IMMUDB_S3_BUCKET_NAME}.s3.${IMMUDB_S3_LOCATION}.amazonaws.com\"\n\n./immudb\n```\n\nOptionally, you can specify the exact role immudb should be using with:\n\n```bash\nexport IMMUDB_S3_ROLE=<AWS S3 ACCESS ROLE NAME>\n```\n\nRemember, the `IMMUDB_S3_ROLE_ENABLED` parameter still should be on.\n\nYou can also easily use immudb with compatible s3 alternatives\nsuch as the [minio](https://github.com/minio/minio) server:\n\n```bash\nexport IMMUDB_S3_ACCESS_KEY_ID=minioadmin\nexport IMMUDB_S3_SECRET_KEY=minioadmin\nexport IMMUDB_S3_STORAGE=true\nexport IMMUDB_S3_BUCKET_NAME=immudb-bucket\nexport IMMUDB_S3_PATH_PREFIX=testing-001\nexport IMMUDB_S3_ENDPOINT=\"http://localhost:9000\"\n\n# Note: This spawns a temporary minio server without data persistence\ndocker run -d -p 9000:9000 minio/minio server /data\n\n# Create the bucket - this can also be done through web console at http://localhost:9000\ndocker run --net=host -it --entrypoint /bin/sh minio/mc -c \"\n  mc alias set local http://localhost:9000 minioadmin minioadmin &&\n  mc mb local/${IMMUDB_S3_BUCKET_NAME}\n\"\n\n# Run immudb instance\n./immudb\n```\n\n### Connecting with immuclient\n\nYou may download the immuclient binary from [the latest releases on Github](https://github.com/codenotary/immudb/releases/latest). Once you have downloaded immuclient, rename it to `immuclient`, make sure to mark it as executable, then run it. The following example shows how to obtain v1.5.0 for linux amd64:\n\n```bash\nwget https://github.com/codenotary/immudb/releases/download/v1.5.0/immuclient-v1.5.0-linux-amd64\nmv immuclient-v1.5.0-linux-amd64 immuclient\nchmod +x immuclient\n\n# start the interactive shell\n./immuclient\n\n# or use commands directly\n./immuclient help\n```\n\nOr just use Docker to run immuclient in a ready-to-use container. Nice and simple.\n\n```bash\ndocker run -it --rm --net host --name immuclient codenotary/immuclient:latest\n```\n\n## Using immudb\n\nLot of useful documentation and step by step guides can be found at https://docs.immudb.io/\n\n### Real world examples\n\nWe already learned about the following use cases from users:\n\n- use immudb to immutably store every update to sensitive database fields (credit card or bank account data) of an existing application database\n- store CI/CD recipes in immudb to protect build and deployment pipelines\n- store public certificates in immudb\n- use immudb as an additional hash storage for digital objects checksums\n- store log streams (i. e. audit logs) tamperproof\n- store the last known positions of submarines\n- record the location where fish was found aboard fishing trawlers\n\n### How to integrate immudb in your application\n\nWe have SDKs available for the following programming languages:\n\n1. Java [immudb4j](https://github.com/codenotary/immudb4j)\n2. Golang ([golang sdk](https://pkg.go.dev/github.com/codenotary/immudb/pkg/client), [Gorm adapter](https://github.com/codenotary/immugorm))\n3. .net [immudb4net](https://github.com/codenotary/immudb4net)\n4. Python [immudb-py](https://github.com/codenotary/immudb-py)\n5. Node.js [immudb-node](https://github.com/codenotary/immudb-node)\n\nTo get started with development, there is a [quickstart in our documentation](https://docs.immudb.io/master/immudb.html): or pick a basic running sample from [immudb-client-examples](https://github.com/codenotary/immudb-client-examples).\n\nOur [immudb Playground](https://play.codenotary.com) provides a guided environment to learn the Python SDK.\n\n<div align=\"center\">\n  <a href=\"https://play.codenotary.com\">\n    <img alt=\"immudb playground to start using immudb in an online demo environment\" src=\"img/playground2.png\"/>\n  </a>\n</div>\n\nWe've developed a \"language-agnostic SDK\" which exposes a REST API for easy consumption by any application.\n[immugw](https://github.com/codenotary/immugw) may be a convenient tool when SDKs are not available for the\nprogramming language you're using, for experimentation, or just because you prefer your app only uses REST endpoints.\n\n### Online demo environment\n\nClick here to try out the immudb web console access in an [online demo environment](https://demo.immudb.io) (username: immudb; password: immudb)\n\n<div align=\"center\">\n  <a href=\"https://demo.immudb.io\">\n    <img alt=\"Your own temporary immudb web console access to start using immudb in an online demo environment\" src=\"img/demoimmudb.png\"/>\n  </a>\n</div>\n\n## Tech specs\n\n| Topic                   | Description                                         |\n| ----------------------- | --------------------------------------------------- |\n| DB Model                | Key-Value with 3D access, Document Model, SQL       |\n| Data scheme             | schema-free                                         |\n| Implementation design   | Cryptographic commit log with parallel Merkle Tree, |\n|                         | (sync/async) indexing with extended B-tree          |\n| Implementation language | Go                                                  |\n| Server OS(s)            | BSD, Linux, OS X, Solaris, Windows, IBM z/OS        |\n| Embeddable              | Yes, optionally                                     |\n| Server APIs             | gRPC                                                |\n| Partition methods       | Sharding                                            |\n| Consistency concepts    | Immediate Consistency                               |\n| Transaction concepts    | ACID with Snapshot Isolation (SSI)                  |\n| Durability              | Yes                                                 |\n| Snapshots               | Yes                                                 |\n| High Read throughput    | Yes                                                 |\n| High Write throughput   | Yes                                                 |\n| Optimized for SSD       | Yes                                                 |\n\n## Performance figures\n\nimmudb can handle millions of writes per second. The following table shows performance of the embedded store inserting 1M entries on a machine with 4-core E3-1275v6 CPU and SSD disk:\n\n| Entries | Workers | Batch | Batches | time (s) | Entries/s |\n| ------- | ------- | ----- | ------- | -------- | --------- |\n| 1M      | 20      | 1000  | 50      | 1.061    | 1.2M /s   |\n| 1M      | 50      | 1000  | 20      | 0.543    | 1.8M /s   |\n| 1M      | 100     | 1000  | 10      | 0.615    | 1.6M /s   |\n\nYou can generate your own benchmarks using the `stress_tool` under `embedded/tools`.\n\n## Roadmap\n\nThe following topics are important to us and are planned or already being worked on:\n\n* Data pruning\n* Compression\n* compatibility with other database storage files\n* Easier API for developers\n* API compatibility with other, well-known embedded databases\n\n## Projects using immudb\n\nBelow is a list of known projects that use immudb:\n\n- [alma-sbom](https://github.com/AlmaLinux/alma-sbom) - AlmaLinux OS SBOM data management utility.\n\n- [immudb-log-audit](https://github.com/codenotary/immudb-log-audit) - A service and cli tool to store json formatted log input\n  and audit it later in immudb Vault.\n\n- [immudb-operator](https://github.com/unagex/immudb-operator) - Unagex Kubernetes Operator for immudb.\n\n- [immufluent](https://github.com/codenotary/immufluent) - Send fluentbit collected logs to immudb.\n\n- [immuvoting](https://github.com/padurean/immuvoting) - Publicly cryptographically verifiable electronic voting system powered by immudb.\n\nAre you using immudb in your project? Open a pull request to add it to the list.\n\n## Contributing\n\nWe welcome [contributors](CONTRIBUTING.md). Feel free to join the team!\n\n<a href=\"https://github.com/codenotary/immudb/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=codenotary/immudb\" />\n</a>\n\nLearn how to [build](BUILD.md) immudb components in both binary and Docker image form.\n\nTo report bugs or get help, use [GitHub's issues](https://github.com/codenotary/immudb/issues).\n\nimmudb is licensed under the [Business Source License 1.1](LICENSE).\n\nimmudb re-distributes other open-source tools and libraries - [Acknowledgements](ACKNOWLEDGEMENTS.md).\n",
        "releases": [
            {
                "name": "v1.9.5",
                "date": "2024-09-16T12:46:08Z"
            },
            {
                "name": "",
                "date": "2024-07-25T20:48:33Z"
            },
            {
                "name": "v1.9.3",
                "date": "2024-05-23T10:29:12Z"
            },
            {
                "name": "v1.9DOM.2",
                "date": "2023-12-29T16:48:20Z"
            },
            {
                "name": "v1.9DOM.2-RC1",
                "date": "2023-12-21T16:00:58Z"
            },
            {
                "name": "v1.9DOM.1",
                "date": "2023-11-16T13:45:46Z"
            },
            {
                "name": "v1.9DOM.1-RC1",
                "date": "2023-11-14T12:48:27Z"
            },
            {
                "name": "v1.9DOM",
                "date": "2023-10-19T10:10:41Z"
            },
            {
                "name": "v1.9.0-RC2",
                "date": "2023-10-16T10:51:04Z"
            },
            {
                "name": "v1.9.0-RC1",
                "date": "2023-10-11T14:17:00Z"
            },
            {
                "name": "v1.5.0",
                "date": "2023-06-21T16:19:32Z"
            },
            {
                "name": "v1.5.0-RC1",
                "date": "2023-06-16T16:30:11Z"
            },
            {
                "name": "v1.4.1",
                "date": "2022-11-21T15:51:04Z"
            },
            {
                "name": "v1.4.1-RC1",
                "date": "2022-11-16T12:38:59Z"
            },
            {
                "name": "v1.4.0",
                "date": "2022-10-12T15:01:29Z"
            },
            {
                "name": "v1.4.0-RC2",
                "date": "2022-10-10T13:34:30Z"
            },
            {
                "name": "v1.4.0-RC1",
                "date": "2022-10-04T14:14:10Z"
            },
            {
                "name": "v1.3.2",
                "date": "2022-08-25T18:09:42Z"
            },
            {
                "name": "v1.3.2-RC1",
                "date": "2022-08-24T23:39:51Z"
            },
            {
                "name": "v1.3.1",
                "date": "2022-06-30T15:24:11Z"
            },
            {
                "name": "v1.3.1-RC1",
                "date": "2022-06-30T09:11:05Z"
            },
            {
                "name": "v1.3.0",
                "date": "2022-05-23T13:53:46Z"
            },
            {
                "name": "v1.3.0-RC1",
                "date": "2022-05-20T12:00:28Z"
            },
            {
                "name": "v1.2.4",
                "date": "2022-04-28T10:10:09Z"
            },
            {
                "name": "v1.2.4-RC1",
                "date": "2022-04-27T13:33:32Z"
            },
            {
                "name": "v1.2.3",
                "date": "2022-04-14T17:59:06Z"
            },
            {
                "name": "",
                "date": "2022-04-13T14:37:24Z"
            },
            {
                "name": "1.2.2",
                "date": "2022-01-19T16:24:03Z"
            },
            {
                "name": "v1.2.1 (ACID support, GDPR, Golang stdlib support and improved SQL compatibility)",
                "date": "2021-12-14T12:20:14Z"
            },
            {
                "name": "v1.2.0-RC1",
                "date": "2021-12-07T15:55:11Z"
            },
            {
                "name": "",
                "date": "2021-09-22T11:22:30Z"
            },
            {
                "name": "",
                "date": "2021-08-02T13:38:37Z"
            },
            {
                "name": "",
                "date": "2021-06-07T10:08:36Z"
            },
            {
                "name": "1.0.0 (SQL)",
                "date": "2021-05-21T11:05:05Z"
            },
            {
                "name": "",
                "date": "2021-04-08T13:56:48Z"
            },
            {
                "name": "",
                "date": "2021-02-08T21:03:45Z"
            },
            {
                "name": "",
                "date": "2021-01-07T17:00:14Z"
            },
            {
                "name": "",
                "date": "2020-12-29T17:07:59Z"
            },
            {
                "name": "immustore",
                "date": "2020-12-22T17:19:46Z"
            },
            {
                "name": "Multi-key insertion, crypto signature",
                "date": "2020-09-15T13:28:11Z"
            },
            {
                "name": "Bug Fixes & Enhancements",
                "date": "2020-08-17T19:02:45Z"
            },
            {
                "name": "Multidatabase",
                "date": "2020-08-10T16:26:06Z"
            },
            {
                "name": "",
                "date": "2020-06-16T08:33:39Z"
            },
            {
                "name": "",
                "date": "2020-06-09T16:51:07Z"
            },
            {
                "name": "",
                "date": "2020-05-28T19:00:21Z"
            },
            {
                "name": "",
                "date": "2020-05-28T19:36:47Z"
            },
            {
                "name": "",
                "date": "2020-05-28T19:37:25Z"
            }
        ]
    }
}