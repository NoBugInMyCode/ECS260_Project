{
    "https://api.github.com/repos/nvim-treesitter/nvim-treesitter": {
        "forks": 930,
        "watchers": 11244,
        "stars": 11244,
        "languages": {
            "Scheme": 1101674,
            "Lua": 318736,
            "Cap'n Proto": 50532,
            "Gleam": 9973,
            "Haskell": 9732,
            "Smali": 9082,
            "Nix": 8549,
            "Sway": 7717,
            "ReScript": 7448,
            "Solidity": 6427,
            "Python": 6262,
            "PHP": 5184,
            "Hack": 4088,
            "C": 3979,
            "HTML": 3934,
            "Rust": 2789,
            "JavaScript": 2742,
            "Shell": 2487,
            "C++": 2326,
            "Clojure": 1964,
            "Julia": 1963,
            "Vue": 1889,
            "R": 1621,
            "Go": 1363,
            "Makefile": 1361,
            "Meson": 1186,
            "Swift": 1160,
            "Vim Script": 1158,
            "Dart": 920,
            "Java": 842,
            "TypeScript": 828,
            "TeX": 800,
            "WGSL": 768,
            "Svelte": 711,
            "Pascal": 662,
            "Ruby": 506,
            "CWeb": 495,
            "HCL": 349,
            "Zig": 254,
            "GDScript": 188,
            "Nushell": 170,
            "Nu": 162,
            "Dockerfile": 51,
            "Cuda": 49,
            "RenderScript": 39,
            "CodeQL": 38,
            "CSS": 36
        },
        "commits": [
            "2025-01-22T06:43:27Z",
            "2025-01-21T08:25:23Z",
            "2025-01-21T08:25:08Z",
            "2025-01-21T06:43:00Z",
            "2024-12-24T06:07:19Z",
            "2024-12-24T05:27:01Z",
            "2025-01-19T18:50:10Z",
            "2025-01-19T08:58:09Z",
            "2025-01-20T06:44:02Z",
            "2025-01-20T03:29:24Z",
            "2025-01-20T03:03:13Z",
            "2025-01-20T02:07:07Z",
            "2025-01-18T20:57:44Z",
            "2025-01-19T09:57:38Z",
            "2025-01-19T06:40:45Z",
            "2025-01-17T09:44:37Z",
            "2025-01-17T06:43:52Z",
            "2025-01-16T16:36:44Z",
            "2025-01-16T16:34:37Z",
            "2025-01-16T08:33:47Z",
            "2025-01-15T06:42:23Z",
            "2025-01-14T07:20:51Z",
            "2025-01-14T06:42:28Z",
            "2025-01-13T08:05:36Z",
            "2025-01-13T06:46:25Z",
            "2025-01-12T06:42:48Z",
            "2025-01-11T22:12:54Z",
            "2025-01-11T13:31:24Z",
            "2025-01-11T09:44:04Z",
            "2025-01-11T06:43:02Z"
        ],
        "creation_date": "2020-04-18T15:24:10Z",
        "contributors": 30,
        "topics": [
            "hacktoberfest",
            "neovim",
            "nvim-treesitter",
            "tree-sitter"
        ],
        "subscribers": 45,
        "readme": "<div align=\"center\">\n  <h1>nvim-treesitter</h1>\n  <p>\n    <a href=\"https://matrix.to/#/#nvim-treesitter:matrix.org\">\n      <img alt=\"Matrix Chat\" src=\"https://img.shields.io/matrix/nvim-treesitter:matrix.org\" />\n    </a>\n    <a href=\"https://github.com/nvim-treesitter/nvim-treesitter/actions?query=workflow%3A%22Linting+and+style+checking%22+branch%3Amaster\">\n      <img alt=\"Linting and Style\" src=\"https://github.com/nvim-treesitter/nvim-treesitter/workflows/Linting%20and%20style%20checking/badge.svg\" />\n    </a>\n    <a href=\"https://github.com/nvim-treesitter/nvim-treesitter/actions?query=workflow%3A%22Check+loading+of+syntax+files%22+branch%3Amaster\">\n      <img alt=\"Syntax files\" src=\"https://github.com/nvim-treesitter/nvim-treesitter/workflows/Check%20loading%20of%20syntax%20files/badge.svg\" />\n    </a>\n  </p>\n</div>\n\n<div align=\"center\">\n  <p>\n    <img src=\"assets/logo.png\" align=\"center\" alt=\"Logo\" />\n  </p>\n  <p>\n    <a href=\"https://github.com/tree-sitter/tree-sitter\">Treesitter</a>\n    configurations and abstraction layer for\n    <a href=\"https://github.com/neovim/neovim/\">Neovim</a>.\n  </p>\n  <p>\n    <i>\n      Logo by <a href=\"https://github.com/steelsojka\">@steelsojka</a>\n    </i>\n  </p>\n</div>\n\nThe goal of `nvim-treesitter` is both to provide a simple and easy way to use the interface for [tree-sitter](https://github.com/tree-sitter/tree-sitter) in Neovim and to provide some basic functionality such as highlighting based on it:\n\n![example-cpp](https://user-images.githubusercontent.com/2361214/202753610-e923bf4e-e88f-494b-bb1e-d22a7688446f.png)\n\nTraditional highlighting (left) vs Treesitter-based highlighting (right).\nMore examples can be found in [our gallery](https://github.com/nvim-treesitter/nvim-treesitter/wiki/Gallery).\n\n**Warning: Treesitter and nvim-treesitter highlighting are an experimental feature of Neovim.\nPlease consider the experience with this plug-in as experimental until Tree-Sitter support in Neovim is stable!\nWe recommend using the nightly builds of Neovim if possible.\nYou can find the current roadmap [here](https://github.com/nvim-treesitter/nvim-treesitter/issues/4767).\nThe roadmap and all features of this plugin are open to change, and any suggestion will be highly appreciated!**\n\nNvim-treesitter is based on three interlocking features: [**language parsers**](#language-parsers), [**queries**](#adding-queries), and [**modules**](#available-modules), where _modules_ provide features \u2013 e.g., highlighting \u2013 based on _queries_ for syntax objects extracted from a given buffer by _language parsers_.\nUsers will generally only need to interact with parsers and modules as explained in the next section.\nFor more detailed information on setting these up, see [\"Advanced setup\"](#advanced-setup).\n\n---\n\n### Table of contents\n\n- [Quickstart](#quickstart)\n- [Supported languages](#supported-languages)\n- [Available modules](#available-modules)\n- [Advanced setup](#advanced-setup)\n- [Extra features](#extra-features)\n- [Troubleshooting](#troubleshooting)\n\n---\n\n# Quickstart\n\n## Requirements\n\n- **Neovim 0.10** or later  ([nightly](https://github.com/neovim/neovim#install-from-source) recommended)\n- `tar` and `curl` in your path (or alternatively `git`)\n- A C compiler in your path and libstdc++ installed ([Windows users please read this!](https://github.com/nvim-treesitter/nvim-treesitter/wiki/Windows-support)).\n\n## Installation\n\nYou can install `nvim-treesitter` with your favorite package manager (or using the native `package` feature of vim, see `:h packages`).\n\n**NOTE: This plugin is only guaranteed to work with specific versions of language parsers** (as specified in the `lockfile.json`). **When upgrading the plugin, you must make sure that all installed parsers are updated to the latest version** via `:TSUpdate`.\nIt is strongly recommended to automate this; e.g., if you are using [vim-plug](https://github.com/junegunn/vim-plug), put this in your `init.vim` file:\n\n```vim\nPlug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}\n```\n\nFor other plugin managers such as `packer.nvim`, see this [Installation page from the wiki](https://github.com/nvim-treesitter/nvim-treesitter/wiki/Installation) (Note that this page is community maintained).\n\n## Language parsers\n\nTreesitter uses a different _parser_ for every language, which needs to be generated via `tree-sitter-cli` from a `grammar.js` file, then compiled to a `.so` library that needs to be placed in neovim's `runtimepath` (typically under `parser/{language}.so`).\nTo simplify this, `nvim-treesitter` provides commands to automate this process.\nIf the language is already [supported by `nvim-treesitter`](#supported-languages), you can install it with\n\n```vim\n:TSInstall <language_to_install>\n```\n\nThis command supports tab expansion.\nYou can also get a list of all available languages and their installation status with `:TSInstallInfo`.\nParsers not on this list can be added manually by following the steps described under [\"Adding parsers\"](#adding-parsers) below.\n\nTo make sure a parser is at the latest compatible version (as specified in `nvim-treesitter`'s `lockfile.json`), use `:TSUpdate {language}`. To update all parsers unconditionally, use `:TSUpdate all` or just `:TSUpdate`.\n\n## Modules\n\nEach module provides a distinct tree-sitter-based feature such as [highlighting](#highlight), [indentation](#indentation), or [folding](#folding); see [`:h nvim-treesitter-modules`](doc/nvim-treesitter.txt) or [\"Available modules\"](#available-modules) below for a list of modules and their options.\n\nFollowing examples assume that you are configuring neovim with lua. If you are using vimscript, see `:h lua-heredoc`.\nAll modules are disabled by default and need to be activated explicitly in your `init.lua`, e.g., via\n\n```lua\nrequire'nvim-treesitter.configs'.setup {\n  -- A list of parser names, or \"all\" (the listed parsers MUST always be installed)\n  ensure_installed = { \"c\", \"lua\", \"vim\", \"vimdoc\", \"query\", \"markdown\", \"markdown_inline\" },\n\n  -- Install parsers synchronously (only applied to `ensure_installed`)\n  sync_install = false,\n\n  -- Automatically install missing parsers when entering buffer\n  -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally\n  auto_install = true,\n\n  -- List of parsers to ignore installing (or \"all\")\n  ignore_install = { \"javascript\" },\n\n  ---- If you need to change the installation directory of the parsers (see -> Advanced Setup)\n  -- parser_install_dir = \"/some/path/to/store/parsers\", -- Remember to run vim.opt.runtimepath:append(\"/some/path/to/store/parsers\")!\n\n  highlight = {\n    enable = true,\n\n    -- NOTE: these are the names of the parsers and not the filetype. (for example if you want to\n    -- disable highlighting for the `tex` filetype, you need to include `latex` in this list as this is\n    -- the name of the parser)\n    -- list of language that will be disabled\n    disable = { \"c\", \"rust\" },\n    -- Or use a function for more flexibility, e.g. to disable slow treesitter highlight for large files\n    disable = function(lang, buf)\n        local max_filesize = 100 * 1024 -- 100 KB\n        local ok, stats = pcall(vim.loop.fs_stat, vim.api.nvim_buf_get_name(buf))\n        if ok and stats and stats.size > max_filesize then\n            return true\n        end\n    end,\n\n    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.\n    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).\n    -- Using this option may slow down your editor, and you may see some duplicate highlights.\n    -- Instead of true it can also be a list of languages\n    additional_vim_regex_highlighting = false,\n  },\n}\n```\n\nEach module can also be enabled or disabled interactively through the following commands:\n\n```vim\n:TSBufEnable {module} \" enable module on current buffer\n:TSBufDisable {module} \" disable module on current buffer\n:TSEnable {module} [{ft}] \" enable module on every buffer. If filetype is specified, enable only for this filetype.\n:TSDisable {module} [{ft}] \" disable module on every buffer. If filetype is specified, disable only for this filetype.\n:TSModuleInfo [{module}] \" list information about modules state for each filetype\n```\n\nCheck [`:h nvim-treesitter-commands`](doc/nvim-treesitter.txt) for a list of all available commands.\nIt may be necessary to reload the buffer (e.g., via `:e`) after enabling a module interactively.\n\n# Supported languages\n\nFor `nvim-treesitter` to support a specific feature for a specific language requires both a parser for that language and an appropriate language-specific query file for that feature.\n\nThe following is a list of languages for which a parser can be installed through `:TSInstall`; a checked box means that `nvim-treesitter` also contains queries at least for the `highlight` module.\n\nExperimental parsers are parsers that have a maintainer but are not stable enough for\ndaily use yet.\n\nWe are looking for maintainers to add more parsers and to write query files for their languages. Check our [tracking issue](https://github.com/nvim-treesitter/nvim-treesitter/issues/2282) for open language requests.\n\n<!--This section of the README is automatically updated by a CI job-->\n<!--parserinfo-->\n- [x] [ada](https://github.com/briot/tree-sitter-ada) (maintained by @briot)\n- [x] [agda](https://github.com/tree-sitter/tree-sitter-agda) (maintained by @Decodetalkers)\n- [x] [angular](https://github.com/dlvandenberg/tree-sitter-angular) (experimental, maintained by @dlvandenberg)\n- [x] [apex](https://github.com/aheber/tree-sitter-sfapex) (maintained by @aheber, @xixiaofinland)\n- [x] [arduino](https://github.com/ObserverOfTime/tree-sitter-arduino) (maintained by @ObserverOfTime)\n- [x] [asm](https://github.com/RubixDev/tree-sitter-asm) (maintained by @RubixDev)\n- [x] [astro](https://github.com/virchau13/tree-sitter-astro) (maintained by @virchau13)\n- [x] [authzed](https://github.com/mleonidas/tree-sitter-authzed) (maintained by @mattpolzin)\n- [ ] [awk](https://github.com/Beaglefoot/tree-sitter-awk)\n- [x] [bash](https://github.com/tree-sitter/tree-sitter-bash) (maintained by @TravonteD)\n- [x] [bass](https://github.com/vito/tree-sitter-bass) (maintained by @amaanq)\n- [x] [beancount](https://github.com/polarmutex/tree-sitter-beancount) (maintained by @polarmutex)\n- [x] [bibtex](https://github.com/latex-lsp/tree-sitter-bibtex) (maintained by @theHamsta, @clason)\n- [x] [bicep](https://github.com/amaanq/tree-sitter-bicep) (maintained by @amaanq)\n- [x] [bitbake](https://github.com/amaanq/tree-sitter-bitbake) (maintained by @amaanq)\n- [x] [blueprint](https://gitlab.com/gabmus/tree-sitter-blueprint.git) (experimental, maintained by @gabmus)\n- [x] [bp](https://github.com/ambroisie/tree-sitter-bp) (maintained by @ambroisie)\n- [x] [c](https://github.com/tree-sitter/tree-sitter-c) (maintained by @amaanq)\n- [x] [c_sharp](https://github.com/tree-sitter/tree-sitter-c-sharp) (maintained by @amaanq)\n- [x] [cairo](https://github.com/amaanq/tree-sitter-cairo) (maintained by @amaanq)\n- [x] [capnp](https://github.com/amaanq/tree-sitter-capnp) (maintained by @amaanq)\n- [x] [chatito](https://github.com/ObserverOfTime/tree-sitter-chatito) (maintained by @ObserverOfTime)\n- [x] [circom](https://github.com/Decurity/tree-sitter-circom) (maintained by @alexandr-martirosyan)\n- [x] [clojure](https://github.com/sogaiu/tree-sitter-clojure) (maintained by @NoahTheDuke)\n- [x] [cmake](https://github.com/uyha/tree-sitter-cmake) (maintained by @uyha)\n- [x] [comment](https://github.com/stsewd/tree-sitter-comment) (maintained by @stsewd)\n- [x] [commonlisp](https://github.com/theHamsta/tree-sitter-commonlisp) (maintained by @theHamsta)\n- [x] [cooklang](https://github.com/addcninblue/tree-sitter-cooklang) (maintained by @addcninblue)\n- [x] [corn](https://github.com/jakestanger/tree-sitter-corn) (maintained by @jakestanger)\n- [x] [cpon](https://github.com/amaanq/tree-sitter-cpon) (maintained by @amaanq)\n- [x] [cpp](https://github.com/tree-sitter/tree-sitter-cpp) (maintained by @theHamsta)\n- [x] [css](https://github.com/tree-sitter/tree-sitter-css) (maintained by @TravonteD)\n- [x] [csv](https://github.com/amaanq/tree-sitter-csv) (maintained by @amaanq)\n- [x] [cuda](https://github.com/theHamsta/tree-sitter-cuda) (maintained by @theHamsta)\n- [x] [cue](https://github.com/eonpatapon/tree-sitter-cue) (maintained by @amaanq)\n- [x] [cylc](https://github.com/elliotfontaine/tree-sitter-cylc) (maintained by @elliotfontaine)\n- [x] [d](https://github.com/gdamore/tree-sitter-d) (maintained by @amaanq)\n- [x] [dart](https://github.com/UserNobody14/tree-sitter-dart) (maintained by @akinsho)\n- [x] [desktop](https://github.com/ValdezFOmar/tree-sitter-desktop) (maintained by @ValdezFOmar)\n- [x] [devicetree](https://github.com/joelspadin/tree-sitter-devicetree) (maintained by @jedrzejboczar)\n- [x] [dhall](https://github.com/jbellerb/tree-sitter-dhall) (maintained by @amaanq)\n- [x] [diff](https://github.com/the-mikedavis/tree-sitter-diff) (maintained by @gbprod)\n- [x] [disassembly](https://github.com/ColinKennedy/tree-sitter-disassembly) (maintained by @ColinKennedy)\n- [x] [djot](https://github.com/treeman/tree-sitter-djot) (maintained by @NoahTheDuke)\n- [x] [dockerfile](https://github.com/camdencheek/tree-sitter-dockerfile) (maintained by @camdencheek)\n- [x] [dot](https://github.com/rydesun/tree-sitter-dot) (maintained by @rydesun)\n- [x] [doxygen](https://github.com/amaanq/tree-sitter-doxygen) (maintained by @amaanq)\n- [x] [dtd](https://github.com/tree-sitter-grammars/tree-sitter-xml) (maintained by @ObserverOfTime)\n- [x] [earthfile](https://github.com/glehmann/tree-sitter-earthfile) (maintained by @glehmann)\n- [x] [ebnf](https://github.com/RubixDev/ebnf) (experimental, maintained by @RubixDev)\n- [x] [editorconfig](https://github.com/ValdezFOmar/tree-sitter-editorconfig) (maintained by @ValdezFOmar)\n- [x] [eds](https://github.com/uyha/tree-sitter-eds) (maintained by @uyha)\n- [x] [eex](https://github.com/connorlay/tree-sitter-eex) (maintained by @connorlay)\n- [x] [elixir](https://github.com/elixir-lang/tree-sitter-elixir) (maintained by @connorlay)\n- [x] [elm](https://github.com/elm-tooling/tree-sitter-elm) (maintained by @zweimach)\n- [x] [elsa](https://github.com/glapa-grossklag/tree-sitter-elsa) (maintained by @glapa-grossklag, @amaanq)\n- [x] [elvish](https://github.com/elves/tree-sitter-elvish) (maintained by @elves)\n- [ ] [embedded_template](https://github.com/tree-sitter/tree-sitter-embedded-template)\n- [x] [erlang](https://github.com/WhatsApp/tree-sitter-erlang) (maintained by @filmor)\n- [x] [facility](https://github.com/FacilityApi/tree-sitter-facility) (maintained by @bryankenote)\n- [x] [faust](https://github.com/khiner/tree-sitter-faust) (maintained by @khiner)\n- [x] [fennel](https://github.com/alexmozaidze/tree-sitter-fennel) (maintained by @alexmozaidze)\n- [x] [fidl](https://github.com/google/tree-sitter-fidl) (maintained by @chaopeng)\n- [x] [firrtl](https://github.com/amaanq/tree-sitter-firrtl) (maintained by @amaanq)\n- [x] [fish](https://github.com/ram02z/tree-sitter-fish) (maintained by @ram02z)\n- [x] [foam](https://github.com/FoamScience/tree-sitter-foam) (experimental, maintained by @FoamScience)\n- [x] [forth](https://github.com/AlexanderBrevig/tree-sitter-forth) (maintained by @amaanq)\n- [x] [fortran](https://github.com/stadelmanma/tree-sitter-fortran) (maintained by @amaanq)\n- [x] [fsh](https://github.com/mgramigna/tree-sitter-fsh) (maintained by @mgramigna)\n- [x] [fsharp](https://github.com/ionide/tree-sitter-fsharp) (maintained by @nsidorenco)\n- [x] [func](https://github.com/amaanq/tree-sitter-func) (maintained by @amaanq)\n- [x] [fusion](https://gitlab.com/jirgn/tree-sitter-fusion.git) (maintained by @jirgn)\n- [x] [GAP system](https://github.com/gap-system/tree-sitter-gap) (maintained by @reiniscirpons)\n- [x] [GAP system test files](https://github.com/gap-system/tree-sitter-gaptst) (maintained by @reiniscirpons)\n- [x] [Godot (gdscript)](https://github.com/PrestonKnopp/tree-sitter-gdscript) (maintained by @PrestonKnopp)\n- [x] [gdshader](https://github.com/GodOfAvacyn/tree-sitter-gdshader) (maintained by @godofavacyn)\n- [x] [git_config](https://github.com/the-mikedavis/tree-sitter-git-config) (maintained by @amaanq)\n- [x] [git_rebase](https://github.com/the-mikedavis/tree-sitter-git-rebase) (maintained by @gbprod)\n- [x] [gitattributes](https://github.com/ObserverOfTime/tree-sitter-gitattributes) (maintained by @ObserverOfTime)\n- [x] [gitcommit](https://github.com/gbprod/tree-sitter-gitcommit) (maintained by @gbprod)\n- [x] [gitignore](https://github.com/shunsambongi/tree-sitter-gitignore) (maintained by @theHamsta)\n- [x] [gleam](https://github.com/gleam-lang/tree-sitter-gleam) (maintained by @amaanq)\n- [x] [Glimmer and Ember](https://github.com/ember-tooling/tree-sitter-glimmer) (maintained by @NullVoxPopuli)\n- [x] [glimmer_javascript](https://github.com/NullVoxPopuli/tree-sitter-glimmer-javascript) (maintained by @NullVoxPopuli)\n- [x] [glimmer_typescript](https://github.com/NullVoxPopuli/tree-sitter-glimmer-typescript) (maintained by @NullVoxPopuli)\n- [x] [glsl](https://github.com/theHamsta/tree-sitter-glsl) (maintained by @theHamsta)\n- [x] [GN (Generate Ninja)](https://github.com/amaanq/tree-sitter-gn) (maintained by @amaanq)\n- [x] [gnuplot](https://github.com/dpezto/tree-sitter-gnuplot) (maintained by @dpezto)\n- [x] [go](https://github.com/tree-sitter/tree-sitter-go) (maintained by @theHamsta, @WinWisely268)\n- [x] [goctl](https://github.com/chaozwn/tree-sitter-goctl) (maintained by @chaozwn)\n- [x] [Godot Resources (gdresource)](https://github.com/PrestonKnopp/tree-sitter-godot-resource) (maintained by @pierpo)\n- [x] [gomod](https://github.com/camdencheek/tree-sitter-go-mod) (maintained by @camdencheek)\n- [x] [gosum](https://github.com/amaanq/tree-sitter-go-sum) (maintained by @amaanq)\n- [x] [gotmpl](https://github.com/ngalaiko/tree-sitter-go-template) (maintained by @qvalentin)\n- [x] [gowork](https://github.com/omertuc/tree-sitter-go-work) (maintained by @omertuc)\n- [x] [gpg](https://github.com/ObserverOfTime/tree-sitter-gpg-config) (maintained by @ObserverOfTime)\n- [x] [graphql](https://github.com/bkegley/tree-sitter-graphql) (maintained by @bkegley)\n- [x] [gren](https://github.com/MaeBrooks/tree-sitter-gren) (maintained by @MaeBrooks)\n- [x] [groovy](https://github.com/murtaza64/tree-sitter-groovy) (maintained by @murtaza64)\n- [x] [gstlaunch](https://github.com/theHamsta/tree-sitter-gstlaunch) (maintained by @theHamsta)\n- [ ] [hack](https://github.com/slackhq/tree-sitter-hack)\n- [x] [hare](https://github.com/amaanq/tree-sitter-hare) (maintained by @amaanq)\n- [x] [haskell](https://github.com/tree-sitter/tree-sitter-haskell) (maintained by @mrcjkb)\n- [x] [haskell_persistent](https://github.com/MercuryTechnologies/tree-sitter-haskell-persistent) (maintained by @lykahb)\n- [x] [hcl](https://github.com/MichaHoffmann/tree-sitter-hcl) (maintained by @MichaHoffmann)\n- [x] [heex](https://github.com/connorlay/tree-sitter-heex) (maintained by @connorlay)\n- [x] [helm](https://github.com/ngalaiko/tree-sitter-go-template) (maintained by @qvalentin)\n- [x] [hjson](https://github.com/winston0410/tree-sitter-hjson) (maintained by @winston0410)\n- [x] [hlsl](https://github.com/theHamsta/tree-sitter-hlsl) (maintained by @theHamsta)\n- [x] [hlsplaylist](https://github.com/Freed-Wu/tree-sitter-hlsplaylist) (maintained by @Freed-Wu)\n- [x] [hocon](https://github.com/antosha417/tree-sitter-hocon) (maintained by @antosha417)\n- [x] [hoon](https://github.com/urbit-pilled/tree-sitter-hoon) (experimental, maintained by @urbit-pilled)\n- [x] [html](https://github.com/tree-sitter/tree-sitter-html) (maintained by @TravonteD)\n- [x] [htmldjango](https://github.com/interdependence/tree-sitter-htmldjango) (experimental, maintained by @ObserverOfTime)\n- [x] [http](https://github.com/rest-nvim/tree-sitter-http) (maintained by @amaanq, @NTBBloodbath)\n- [x] [hurl](https://github.com/pfeiferj/tree-sitter-hurl) (maintained by @pfeiferj)\n- [x] [hyprlang](https://github.com/luckasRanarison/tree-sitter-hyprlang) (maintained by @luckasRanarison)\n- [x] [idl](https://github.com/cathaysia/tree-sitter-idl) (maintained by @cathaysia)\n- [x] [idris](https://github.com/kayhide/tree-sitter-idris) (maintained by @srghma)\n- [x] [ini](https://github.com/justinmk/tree-sitter-ini) (experimental, maintained by @theHamsta)\n- [x] [inko](https://github.com/inko-lang/tree-sitter-inko) (maintained by @yorickpeterse)\n- [x] [ipkg](https://github.com/srghma/tree-sitter-ipkg) (maintained by @srghma)\n- [x] [ispc](https://github.com/fab4100/tree-sitter-ispc) (maintained by @fab4100)\n- [x] [janet_simple](https://github.com/sogaiu/tree-sitter-janet-simple) (maintained by @sogaiu)\n- [x] [java](https://github.com/tree-sitter/tree-sitter-java) (maintained by @p00f)\n- [x] [javascript](https://github.com/tree-sitter/tree-sitter-javascript) (maintained by @steelsojka)\n- [x] [jq](https://github.com/flurie/tree-sitter-jq) (maintained by @ObserverOfTime)\n- [x] [jsdoc](https://github.com/tree-sitter/tree-sitter-jsdoc) (maintained by @steelsojka)\n- [x] [json](https://github.com/tree-sitter/tree-sitter-json) (maintained by @steelsojka)\n- [x] [json5](https://github.com/Joakker/tree-sitter-json5) (maintained by @Joakker)\n- [x] [JSON with comments](https://gitlab.com/WhyNotHugo/tree-sitter-jsonc.git) (maintained by @WhyNotHugo)\n- [x] [jsonnet](https://github.com/sourcegraph/tree-sitter-jsonnet) (maintained by @nawordar)\n- [x] [julia](https://github.com/tree-sitter/tree-sitter-julia) (maintained by @fredrikekre)\n- [x] [just](https://github.com/IndianBoy42/tree-sitter-just) (maintained by @Hubro)\n- [x] [kconfig](https://github.com/amaanq/tree-sitter-kconfig) (maintained by @amaanq)\n- [x] [kdl](https://github.com/amaanq/tree-sitter-kdl) (maintained by @amaanq)\n- [x] [kotlin](https://github.com/fwcd/tree-sitter-kotlin) (maintained by @SalBakraa)\n- [x] [koto](https://github.com/koto-lang/tree-sitter-koto) (maintained by @irh)\n- [x] [kusto](https://github.com/Willem-J-an/tree-sitter-kusto) (maintained by @Willem-J-an)\n- [x] [lalrpop](https://github.com/traxys/tree-sitter-lalrpop) (maintained by @traxys)\n- [x] [latex](https://github.com/latex-lsp/tree-sitter-latex) (maintained by @theHamsta, @clason)\n- [x] [ledger](https://github.com/cbarrete/tree-sitter-ledger) (maintained by @cbarrete)\n- [x] [leo](https://github.com/r001/tree-sitter-leo) (maintained by @r001)\n- [x] [linkerscript](https://github.com/amaanq/tree-sitter-linkerscript) (maintained by @amaanq)\n- [x] [liquid](https://github.com/hankthetank27/tree-sitter-liquid) (maintained by @hankthetank27)\n- [x] [liquidsoap](https://github.com/savonet/tree-sitter-liquidsoap) (maintained by @toots)\n- [x] [llvm](https://github.com/benwilliamgraham/tree-sitter-llvm) (maintained by @benwilliamgraham)\n- [x] [lua](https://github.com/MunifTanjim/tree-sitter-lua) (maintained by @muniftanjim)\n- [x] [luadoc](https://github.com/amaanq/tree-sitter-luadoc) (maintained by @amaanq)\n- [x] [lua patterns](https://github.com/amaanq/tree-sitter-luap) (maintained by @amaanq)\n- [x] [luau](https://github.com/amaanq/tree-sitter-luau) (maintained by @amaanq)\n- [x] [m68k](https://github.com/grahambates/tree-sitter-m68k) (maintained by @grahambates)\n- [x] [make](https://github.com/alemuller/tree-sitter-make) (maintained by @lewis6991)\n- [x] [markdown (basic highlighting)](https://github.com/MDeiml/tree-sitter-markdown) (experimental, maintained by @MDeiml)\n- [x] [markdown_inline (needed for full highlighting)](https://github.com/MDeiml/tree-sitter-markdown) (experimental, maintained by @MDeiml)\n- [x] [matlab](https://github.com/acristoffers/tree-sitter-matlab) (maintained by @acristoffers)\n- [x] [menhir](https://github.com/Kerl13/tree-sitter-menhir) (maintained by @Kerl13)\n- [ ] [mermaid](https://github.com/monaqa/tree-sitter-mermaid) (experimental)\n- [x] [meson](https://github.com/Decodetalkers/tree-sitter-meson) (maintained by @Decodetalkers)\n- [x] [mlir](https://github.com/artagnon/tree-sitter-mlir) (experimental, maintained by @artagnon)\n- [x] [muttrc](https://github.com/neomutt/tree-sitter-muttrc) (maintained by @Freed-Wu)\n- [x] [nasm](https://github.com/naclsn/tree-sitter-nasm) (maintained by @ObserverOfTime)\n- [x] [nginx](https://github.com/opa-oz/tree-sitter-nginx) (maintained by @opa-oz)\n- [ ] [nickel](https://github.com/nickel-lang/tree-sitter-nickel)\n- [x] [nim](https://github.com/alaviss/tree-sitter-nim) (maintained by @aMOPel)\n- [x] [nim_format_string](https://github.com/aMOPel/tree-sitter-nim-format-string) (maintained by @aMOPel)\n- [x] [ninja](https://github.com/alemuller/tree-sitter-ninja) (maintained by @alemuller)\n- [x] [nix](https://github.com/cstrahan/tree-sitter-nix) (maintained by @leo60228)\n- [x] [norg](https://github.com/nvim-neorg/tree-sitter-norg) (maintained by @JoeyGrajciar, @vhyrro)\n- [x] [nqc](https://github.com/amaanq/tree-sitter-nqc) (maintained by @amaanq)\n- [x] [nu](https://github.com/nushell/tree-sitter-nu) (maintained by @abhisheksingh0x558)\n- [x] [objc](https://github.com/amaanq/tree-sitter-objc) (maintained by @amaanq)\n- [x] [objdump](https://github.com/ColinKennedy/tree-sitter-objdump) (maintained by @ColinKennedy)\n- [x] [ocaml](https://github.com/tree-sitter/tree-sitter-ocaml) (maintained by @undu)\n- [x] [ocaml_interface](https://github.com/tree-sitter/tree-sitter-ocaml) (maintained by @undu)\n- [x] [ocamllex](https://github.com/atom-ocaml/tree-sitter-ocamllex) (maintained by @undu)\n- [x] [odin](https://github.com/amaanq/tree-sitter-odin) (maintained by @amaanq)\n- [ ] [org](https://github.com/milisims/tree-sitter-org)\n- [x] [pascal](https://github.com/Isopod/tree-sitter-pascal) (maintained by @Isopod)\n- [x] [passwd](https://github.com/ath3/tree-sitter-passwd) (maintained by @amaanq)\n- [x] [pem](https://github.com/ObserverOfTime/tree-sitter-pem) (maintained by @ObserverOfTime)\n- [x] [perl](https://github.com/tree-sitter-perl/tree-sitter-perl) (maintained by @RabbiVeesh, @LeoNerd)\n- [x] [php](https://github.com/tree-sitter/tree-sitter-php) (maintained by @tk-shirasaka, @calebdw)\n- [x] [php_only](https://github.com/tree-sitter/tree-sitter-php) (maintained by @tk-shirasaka, @calebdw)\n- [x] [phpdoc](https://github.com/claytonrcarter/tree-sitter-phpdoc) (experimental, maintained by @mikehaertl)\n- [x] [pioasm](https://github.com/leo60228/tree-sitter-pioasm) (maintained by @leo60228)\n- [x] [po](https://github.com/erasin/tree-sitter-po) (maintained by @amaanq)\n- [x] [pod](https://github.com/tree-sitter-perl/tree-sitter-pod) (maintained by @RabbiVeesh, @LeoNerd)\n- [x] [Path of Exile item filter](https://github.com/ObserverOfTime/tree-sitter-poe-filter) (experimental, maintained by @ObserverOfTime)\n- [x] [pony](https://github.com/amaanq/tree-sitter-pony) (maintained by @amaanq, @mfelsche)\n- [x] [powershell](https://github.com/airbus-cert/tree-sitter-powershell) (maintained by @L2jLiga)\n- [x] [printf](https://github.com/ObserverOfTime/tree-sitter-printf) (maintained by @ObserverOfTime)\n- [x] [prisma](https://github.com/victorhqc/tree-sitter-prisma) (maintained by @elianiva)\n- [x] [problog](https://github.com/foxyseta/tree-sitter-prolog) (maintained by @foxyseta)\n- [x] [prolog](https://github.com/foxyseta/tree-sitter-prolog) (maintained by @foxyseta)\n- [x] [promql](https://github.com/MichaHoffmann/tree-sitter-promql) (maintained by @MichaHoffmann)\n- [x] [properties](https://github.com/tree-sitter-grammars/tree-sitter-properties) (maintained by @ObserverOfTime)\n- [x] [proto](https://github.com/treywood/tree-sitter-proto) (maintained by @treywood)\n- [x] [prql](https://github.com/PRQL/tree-sitter-prql) (maintained by @matthias-Q)\n- [x] [psv](https://github.com/amaanq/tree-sitter-csv) (maintained by @amaanq)\n- [x] [pug](https://github.com/zealot128/tree-sitter-pug) (experimental, maintained by @zealot128)\n- [x] [puppet](https://github.com/amaanq/tree-sitter-puppet) (maintained by @amaanq)\n- [x] [purescript](https://github.com/postsolar/tree-sitter-purescript) (maintained by @postsolar)\n- [x] [PyPA manifest](https://github.com/ObserverOfTime/tree-sitter-pymanifest) (maintained by @ObserverOfTime)\n- [x] [python](https://github.com/tree-sitter/tree-sitter-python) (maintained by @stsewd, @theHamsta)\n- [x] [ql](https://github.com/tree-sitter/tree-sitter-ql) (maintained by @pwntester)\n- [x] [qmldir](https://github.com/Decodetalkers/tree-sitter-qmldir) (maintained by @amaanq)\n- [x] [qmljs](https://github.com/yuja/tree-sitter-qmljs) (maintained by @Decodetalkers)\n- [x] [Tree-Sitter query language](https://github.com/nvim-treesitter/tree-sitter-query) (maintained by @steelsojka)\n- [x] [r](https://github.com/r-lib/tree-sitter-r) (maintained by @ribru17)\n- [ ] [racket](https://github.com/6cdh/tree-sitter-racket)\n- [x] [ralph](https://github.com/alephium/tree-sitter-ralph) (maintained by @tdroxler)\n- [x] [rasi](https://github.com/Fymyte/tree-sitter-rasi) (maintained by @Fymyte)\n- [x] [rbs](https://github.com/joker1007/tree-sitter-rbs) (maintained by @joker1007)\n- [x] [re2c](https://github.com/amaanq/tree-sitter-re2c) (maintained by @amaanq)\n- [x] [readline](https://github.com/ribru17/tree-sitter-readline) (maintained by @ribru17)\n- [x] [regex](https://github.com/tree-sitter/tree-sitter-regex) (maintained by @theHamsta)\n- [x] [rego](https://github.com/FallenAngel97/tree-sitter-rego) (maintained by @FallenAngel97)\n- [x] [pip requirements](https://github.com/ObserverOfTime/tree-sitter-requirements) (maintained by @ObserverOfTime)\n- [x] [rescript](https://github.com/rescript-lang/tree-sitter-rescript) (maintained by @ribru17)\n- [x] [rnoweb](https://github.com/bamonroe/tree-sitter-rnoweb) (maintained by @bamonroe)\n- [x] [robot](https://github.com/Hubro/tree-sitter-robot) (maintained by @Hubro)\n- [x] [robots](https://github.com/opa-oz/tree-sitter-robots-txt) (maintained by @opa-oz)\n- [x] [roc](https://github.com/faldor20/tree-sitter-roc) (maintained by @nat-418)\n- [x] [ron](https://github.com/amaanq/tree-sitter-ron) (maintained by @amaanq)\n- [x] [rst](https://github.com/stsewd/tree-sitter-rst) (maintained by @stsewd)\n- [x] [ruby](https://github.com/tree-sitter/tree-sitter-ruby) (maintained by @TravonteD)\n- [x] [runescript](https://github.com/2004Scape/tree-sitter-runescript) (maintained by @2004Scape)\n- [x] [rust](https://github.com/tree-sitter/tree-sitter-rust) (maintained by @amaanq)\n- [x] [scala](https://github.com/tree-sitter/tree-sitter-scala) (maintained by @stevanmilic)\n- [x] [scfg](https://github.com/rockorager/tree-sitter-scfg) (maintained by @WhyNotHugo)\n- [ ] [scheme](https://github.com/6cdh/tree-sitter-scheme)\n- [x] [scss](https://github.com/serenadeai/tree-sitter-scss) (maintained by @elianiva)\n- [x] [sflog](https://github.com/aheber/tree-sitter-sfapex) (maintained by @aheber, @xixiaofinland)\n- [x] [slang](https://github.com/theHamsta/tree-sitter-slang) (experimental, maintained by @theHamsta)\n- [x] [slim](https://github.com/theoo/tree-sitter-slim) (maintained by @theoo)\n- [x] [slint](https://github.com/slint-ui/tree-sitter-slint) (maintained by @hunger)\n- [x] [smali](https://github.com/tree-sitter-grammars/tree-sitter-smali) (maintained by @amaanq)\n- [x] [smithy](https://github.com/indoorvivants/tree-sitter-smithy) (maintained by @amaanq, @keynmol)\n- [ ] [snakemake](https://github.com/osthomas/tree-sitter-snakemake) (experimental)\n- [x] [solidity](https://github.com/JoranHonig/tree-sitter-solidity) (maintained by @amaanq)\n- [x] [soql](https://github.com/aheber/tree-sitter-sfapex) (maintained by @aheber, @xixiaofinland)\n- [x] [sosl](https://github.com/aheber/tree-sitter-sfapex) (maintained by @aheber, @xixiaofinland)\n- [x] [sourcepawn](https://github.com/nilshelmig/tree-sitter-sourcepawn) (maintained by @Sarrus1)\n- [x] [sparql](https://github.com/GordianDziwis/tree-sitter-sparql) (maintained by @GordianDziwis)\n- [x] [sql](https://github.com/derekstride/tree-sitter-sql) (maintained by @derekstride)\n- [x] [squirrel](https://github.com/amaanq/tree-sitter-squirrel) (maintained by @amaanq)\n- [x] [ssh_config](https://github.com/ObserverOfTime/tree-sitter-ssh-config) (maintained by @ObserverOfTime)\n- [x] [starlark](https://github.com/amaanq/tree-sitter-starlark) (maintained by @amaanq)\n- [x] [strace](https://github.com/sigmaSd/tree-sitter-strace) (maintained by @amaanq)\n- [x] [styled](https://github.com/mskelton/tree-sitter-styled) (maintained by @mskelton)\n- [x] [supercollider](https://github.com/madskjeldgaard/tree-sitter-supercollider) (maintained by @madskjeldgaard)\n- [x] [superhtml](https://github.com/kristoff-it/superhtml) (maintained by @rockorager)\n- [x] [surface](https://github.com/connorlay/tree-sitter-surface) (maintained by @connorlay)\n- [x] [svelte](https://github.com/tree-sitter-grammars/tree-sitter-svelte) (maintained by @amaanq)\n- [x] [sway](https://github.com/FuelLabs/tree-sitter-sway.git) (maintained by @ribru17)\n- [x] [swift](https://github.com/alex-pinkus/tree-sitter-swift) (maintained by @alex-pinkus)\n- [x] [sxhkdrc](https://github.com/RaafatTurki/tree-sitter-sxhkdrc) (maintained by @RaafatTurki)\n- [x] [systemtap](https://github.com/ok-ryoko/tree-sitter-systemtap) (maintained by @ok-ryoko)\n- [x] [t32](https://gitlab.com/xasc/tree-sitter-t32.git) (maintained by @xasc)\n- [x] [tablegen](https://github.com/amaanq/tree-sitter-tablegen) (maintained by @amaanq)\n- [x] [tact](https://github.com/tact-lang/tree-sitter-tact) (maintained by @novusnota)\n- [x] [tcl](https://github.com/tree-sitter-grammars/tree-sitter-tcl) (maintained by @lewis6991)\n- [x] [teal](https://github.com/euclidianAce/tree-sitter-teal) (maintained by @euclidianAce)\n- [x] [templ](https://github.com/vrischmann/tree-sitter-templ) (maintained by @vrischmann)\n- [x] [terraform](https://github.com/MichaHoffmann/tree-sitter-hcl) (maintained by @MichaHoffmann)\n- [x] [textproto](https://github.com/PorterAtGoogle/tree-sitter-textproto) (maintained by @Porter)\n- [x] [thrift](https://github.com/duskmoon314/tree-sitter-thrift) (maintained by @amaanq, @duskmoon314)\n- [x] [tiger](https://github.com/ambroisie/tree-sitter-tiger) (maintained by @ambroisie)\n- [x] [tlaplus](https://github.com/tlaplus-community/tree-sitter-tlaplus) (maintained by @ahelwer, @susliko)\n- [x] [tmux](https://github.com/Freed-Wu/tree-sitter-tmux) (maintained by @Freed-Wu)\n- [x] [todotxt](https://github.com/arnarg/tree-sitter-todotxt) (experimental, maintained by @arnarg)\n- [x] [toml](https://github.com/tree-sitter-grammars/tree-sitter-toml) (maintained by @tk-shirasaka)\n- [x] [tsv](https://github.com/amaanq/tree-sitter-csv) (maintained by @amaanq)\n- [x] [tsx](https://github.com/tree-sitter/tree-sitter-typescript) (maintained by @steelsojka)\n- [x] [turtle](https://github.com/GordianDziwis/tree-sitter-turtle) (maintained by @GordianDziwis)\n- [x] [twig](https://github.com/gbprod/tree-sitter-twig) (maintained by @gbprod)\n- [x] [typescript](https://github.com/tree-sitter/tree-sitter-typescript) (maintained by @steelsojka)\n- [x] [typespec](https://github.com/happenslol/tree-sitter-typespec) (maintained by @happenslol)\n- [x] [typoscript](https://github.com/Teddytrombone/tree-sitter-typoscript) (maintained by @Teddytrombone)\n- [x] [typst](https://github.com/uben0/tree-sitter-typst) (maintained by @uben0, @RaafatTurki)\n- [x] [udev](https://github.com/ObserverOfTime/tree-sitter-udev) (maintained by @ObserverOfTime)\n- [x] [ungrammar](https://github.com/Philipp-M/tree-sitter-ungrammar) (maintained by @Philipp-M, @amaanq)\n- [x] [unison](https://github.com/kylegoetz/tree-sitter-unison) (maintained by @tapegram)\n- [x] [usd](https://github.com/ColinKennedy/tree-sitter-usd) (maintained by @ColinKennedy)\n- [x] [uxn tal](https://github.com/amaanq/tree-sitter-uxntal) (maintained by @amaanq)\n- [x] [v](https://github.com/vlang/v-analyzer) (maintained by @kkharji, @amaanq)\n- [x] [vala](https://github.com/vala-lang/tree-sitter-vala) (maintained by @Prince781)\n- [x] [vento](https://github.com/ventojs/tree-sitter-vento) (maintained by @wrapperup, @oscarotero)\n- [x] [verilog](https://github.com/gmlarumbe/tree-sitter-systemverilog) (maintained by @zhangwwpeng)\n- [x] [vhdl](https://github.com/jpt13653903/tree-sitter-vhdl) (maintained by @jpt13653903)\n- [x] [vhs](https://github.com/charmbracelet/tree-sitter-vhs) (maintained by @caarlos0)\n- [x] [vim](https://github.com/neovim/tree-sitter-vim) (maintained by @clason)\n- [x] [vimdoc](https://github.com/neovim/tree-sitter-vimdoc) (maintained by @clason)\n- [x] [vrl](https://github.com/belltoy/tree-sitter-vrl) (maintained by @belltoy)\n- [x] [vue](https://github.com/tree-sitter-grammars/tree-sitter-vue) (maintained by @WhyNotHugo, @lucario387)\n- [x] [wgsl](https://github.com/szebniok/tree-sitter-wgsl) (maintained by @szebniok)\n- [x] [wgsl_bevy](https://github.com/theHamsta/tree-sitter-wgsl-bevy) (maintained by @theHamsta)\n- [x] [wing](https://github.com/winglang/tree-sitter-wing) (maintained by @gshpychka, @MarkMcCulloh)\n- [x] [wit](https://github.com/liamwh/tree-sitter-wit) (maintained by @liamwh)\n- [x] [xcompose](https://github.com/ObserverOfTime/tree-sitter-xcompose) (maintained by @ObserverOfTime)\n- [x] [xml](https://github.com/tree-sitter-grammars/tree-sitter-xml) (maintained by @ObserverOfTime)\n- [x] [xresources](https://github.com/ValdezFOmar/tree-sitter-xresources) (maintained by @ValdezFOmar)\n- [x] [yaml](https://github.com/tree-sitter-grammars/tree-sitter-yaml) (maintained by @amaanq)\n- [x] [yang](https://github.com/Hubro/tree-sitter-yang) (maintained by @Hubro)\n- [x] [yuck](https://github.com/Philipp-M/tree-sitter-yuck) (maintained by @Philipp-M, @amaanq)\n- [x] [zathurarc](https://github.com/Freed-Wu/tree-sitter-zathurarc) (maintained by @Freed-Wu)\n- [x] [zig](https://github.com/tree-sitter-grammars/tree-sitter-zig) (maintained by @amaanq)\n- [x] [ziggy](https://github.com/kristoff-it/ziggy) (maintained by @rockorager)\n- [x] [ziggy_schema](https://github.com/kristoff-it/ziggy) (maintained by @rockorager)\n<!--parserinfo-->\n\nFor related information on the supported languages, including related plugins, see [this wiki page](https://github.com/nvim-treesitter/nvim-treesitter/wiki/Supported-Languages-Information).\n\n# Available modules\n\nModules provide the top-level features of `nvim-treesitter`.\nThe following is a list of modules included in `nvim-treesitter` and their configuration via `init.lua` (where multiple modules can be combined in a single call to `setup`).\nNote that not all modules work for all languages (depending on the queries available for them).\nAdditional modules can be provided as [external plugins](https://github.com/nvim-treesitter/nvim-treesitter/wiki/Extra-modules-and-plugins).\n\n#### Highlight\n\nConsistent syntax highlighting.\n\n```lua\nrequire'nvim-treesitter.configs'.setup {\n  highlight = {\n    enable = true,\n    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.\n    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).\n    -- Using this option may slow down your editor, and you may see some duplicate highlights.\n    -- Instead of true it can also be a list of languages\n    additional_vim_regex_highlighting = false,\n  },\n}\n```\n\nTo customize the syntax highlighting of a capture, simply define or link a highlight group of the same name:\n\n```lua\n-- Highlight the @foo.bar capture group with the \"Identifier\" highlight group\nvim.api.nvim_set_hl(0, \"@foo.bar\", { link = \"Identifier\" })\n```\n\nFor a language-specific highlight, append the name of the language:\n\n```lua\n-- Highlight @foo.bar as \"Identifier\" only in Lua files\nvim.api.nvim_set_hl(0, \"@foo.bar.lua\", { link = \"Identifier\" })\n```\n\nSee `:h treesitter-highlight-groups` for details.\n\n#### Incremental selection\n\nIncremental selection based on the named nodes from the grammar.\n\n```lua\nrequire'nvim-treesitter.configs'.setup {\n  incremental_selection = {\n    enable = true,\n    keymaps = {\n      init_selection = \"gnn\", -- set to `false` to disable one of the mappings\n      node_incremental = \"grn\",\n      scope_incremental = \"grc\",\n      node_decremental = \"grm\",\n    },\n  },\n}\n```\n\n#### Indentation\n\nIndentation based on treesitter for the `=` operator.\n**NOTE: This is an experimental feature**.\n\n```lua\nrequire'nvim-treesitter.configs'.setup {\n  indent = {\n    enable = true\n  }\n}\n```\n\n#### Folding\n\nTree-sitter based folding (implemented in Neovim itself, see `:h vim.treesitter.foldexpr()`). To enable it for the current window, set\n\n```lua\nvim.wo.foldmethod = 'expr'\nvim.wo.foldexpr = 'v:lua.vim.treesitter.foldexpr()'\n```\n\nThis will respect your `foldminlines` and `foldnestmax` settings.\n\n# Advanced setup\n\n## Changing the parser install directory\n\nIf you want to install the parsers to a custom directory you can specify this\ndirectory with `parser_install_dir` option in that is passed to `setup`.\n`nvim-treesitter` will then install the parser files into this directory.\n\nThis directory must be writeable and must be explicitly prepended to the\n`runtimepath`. For example:\n\n```lua\n  -- It MUST be at the beginning of runtimepath. Otherwise the parsers from Neovim itself\n  -- is loaded that may not be compatible with the queries from the 'nvim-treesitter' plugin.\n  vim.opt.runtimepath:prepend(\"/some/path/to/store/parsers\")\n\n  require'nvim-treesitter.configs'.setup {\n    parser_install_dir = \"/some/path/to/store/parsers\",\n\n    ...\n\n  }\n```\n\nIf this option is not included in the setup options, or is explicitly set to\n`nil` then the default install directories will be used. If this value is set\nthe default directories will be ignored.\n\nBear in mind that any parser installed into a parser folder on the runtime path\nwill still be considered installed. (For example if\n\"~/.local/share/nvim/site/parser/c.so\" exists then the \"c\" parser will be\nconsidered installed, even though it is not in `parser_install_dir`)\n\nThe default paths are:\n\n1. first the package folder. Where `nvim-treesitter` is installed.\n2. second the site directory. This is the \"site\" subdirectory of `stdpath(\"data\")`.\n\n## Adding parsers\n\nIf you have a parser that is not on the list of supported languages (either as a repository on Github or in a local directory), you can add it manually for use by `nvim-treesitter` as follows:\n\n1. Clone the repository or [create a new project](https://tree-sitter.github.io/tree-sitter/creating-parsers#project-setup) in, say, `~/projects/tree-sitter-zimbu`. Make sure that the `tree-sitter-cli` executable is installed and in your path; see <https://tree-sitter.github.io/tree-sitter/creating-parsers#installation> for installation instructions.\n2. Run `tree-sitter generate` in this directory (followed by `tree-sitter test` for good measure).\n3. Add the following snippet to your `init.lua`:\n\n```lua\nlocal parser_config = require \"nvim-treesitter.parsers\".get_parser_configs()\nparser_config.zimbu = {\n  install_info = {\n    url = \"~/projects/tree-sitter-zimbu\", -- local path or git repo\n    files = {\"src/parser.c\"}, -- note that some parsers also require src/scanner.c or src/scanner.cc\n    -- optional entries:\n    branch = \"main\", -- default branch in case of git repo if different from master\n    generate_requires_npm = false, -- if stand-alone parser without npm dependencies\n    requires_generate_from_grammar = false, -- if folder contains pre-generated src/parser.c\n  },\n  filetype = \"zu\", -- if filetype does not match the parser name\n}\n```\n\nIf you wish to set a specific parser for a filetype, you should use `vim.treesitter.language.register()`:\n\n```lua\nvim.treesitter.language.register('python', 'someft')  -- the someft filetype will use the python parser and queries.\n```\n\nNote this requires Nvim v0.9.\n\n4. Start `nvim` and `:TSInstall zimbu`.\n\nYou can also skip step 2 and use `:TSInstallFromGrammar zimbu` to install directly from a `grammar.js` in the top-level directory specified by `url`.\nOnce the parser is installed, you can update it (from the latest revision of the `main` branch if `url` is a Github repository) with `:TSUpdate zimbu`.\n\nNote that neither `:TSInstall` nor `:TSInstallFromGrammar` copy query files from the grammar repository.\nIf you want your installed grammar to be useful, you must manually [add query files](#adding-queries) to your local nvim-treesitter installation.\nNote also that module functionality is only triggered if your language's filetype is correctly identified.\nIf Neovim does not detect your language's filetype by default, you can use [Neovim's `vim.filetype.add()`](<https://neovim.io/doc/user/lua.html#vim.filetype.add()>) to add a custom detection rule.\n\nIf you use a git repository for your parser and want to use a specific version, you can set the `revision` key\nin the `install_info` table for you parser config.\n\n## Adding queries\n\nQueries are what `nvim-treesitter` uses to extract information from the syntax tree;\nthey are located in the `queries/{language}/*` runtime directories (see `:h rtp`),\nlike the `queries` folder of this plugin, e.g. `queries/{language}/{locals,highlights,textobjects}.scm`.\nOther modules may require additional queries such as `folding.scm`. You can find a\nlist of all supported capture names in [CONTRIBUTING.md](https://github.com/nvim-treesitter/nvim-treesitter/blob/master/CONTRIBUTING.md#parser-configurations).\n\nThe first query file on `runtimepath` will be used (see `:h treesitter-query`).\nIf you want to make a query on the user config extend other queries instead of\nreplacing them, see `:h treesitter-query-modeline-extends`.\n\nIf you want to completely override a query, you can use `:h vim.treesitter.query.set()`.\nFor example, to override the `injections` queries from `c` with your own:\n\n```lua\nvim.treesitter.query.set(\"c\", \"injections\", \"(comment) @comment\")\n```\n\nNote: when using `query.set()`, all queries in the runtime directories will be ignored.\n\n## Adding modules\n\nIf you wish you write your own module, you need to support\n\n- tree-sitter language detection support;\n- attaching and detaching to buffers;\n- all nvim-treesitter commands.\n\nAt the top level, you can use the `define_modules` function to define one or more modules or module groups:\n\n```lua\nrequire'nvim-treesitter'.define_modules {\n  my_cool_plugin = {\n    attach = function(bufnr, lang)\n      -- Do cool stuff here\n    end,\n    detach = function(bufnr)\n      -- Undo cool stuff here\n    end,\n    is_supported = function(lang)\n      -- Check if the language is supported\n    end\n  }\n}\n```\n\nwith the following properties:\n\n- `module_path` specifies a require path (string) that exports a module with an `attach` and `detach` function. This is not required if the functions are on this definition.\n- `enable` determines if the module is enabled by default. This is usually overridden by the user.\n- `disable` takes a list of languages that this module is disabled for. This is usually overridden by the user.\n- `is_supported` takes a function that takes a language and determines if this module supports that language.\n- `attach` takes a function that attaches to a buffer. This is required if `module_path` is not provided.\n- `detach` takes a function that detaches from a buffer. This is required if `module_path` is not provided.\n\n# Extra features\n\n### Statusline indicator\n\n```vim\necho nvim_treesitter#statusline(90)  \" 90 can be any length\nmodule->expression_statement->call->identifier\n```\n\n### Utilities\n\nYou can get some utility functions with\n\n```lua\nlocal ts_utils = require 'nvim-treesitter.ts_utils'\n```\n\nCheck [`:h nvim-treesitter-utils`](doc/nvim-treesitter.txt) for more information.\n\n# Troubleshooting\n\nBefore doing anything, make sure you have the latest version of this plugin and run `:checkhealth nvim-treesitter`.\nIt can also help to update the parsers via `:TSUpdate`.\n\n#### Feature `X` does not work for `{language}`...\n\nFirst, check the `health#nvim_treesitter#check` and the `health#treesitter#check` sections of `:checkhealth` for any warning.\nIf there is one, it's highly likely that this is the cause of the problem.\n\nNext check the `## Parser/Features` subsection of the `health#nvim_treesitter#check` section of `:checkhealth` to ensure the desired module is enabled for your language.\nIf not, you might be missing query files; see [Adding queries](#adding-queries).\n\nFinally, ensure Neovim is correctly identifying your language's filetype using the `:echo &filetype` command while one of your language's files is open in Neovim.\nIf not, add a short Vimscript file to nvim-treesitter's `ftdetect` runtime directory following [Neovim's documentation](https://neovim.io/doc/user/filetype.html#new-filetype) on filetype detection.\nYou can also quickly & temporarily set the filetype for a single buffer with the `:set filetype=langname` command to test whether it fixes the problem.\n\nIf everything is okay, then it might be an actual error.\nIn that case, feel free to [open an issue here](https://github.com/nvim-treesitter/nvim-treesitter/issues/new/choose).\n\n#### I get `module 'vim.treesitter.query' not found`\n\nMake sure you have the latest version of Neovim.\n\n#### I get `Error detected while processing .../plugin/nvim-treesitter.vim` every time I open Neovim\n\nThis is probably due to a change in a parser's grammar or its queries.\nTry updating the parser that you suspect has changed (`:TSUpdate {language}`) or all of them (`:TSUpdate`).\nIf the error persists after updating all parsers,\nplease [open an issue](https://github.com/nvim-treesitter/nvim-treesitter/issues/new/choose).\n\n#### I get `query error: invalid node type at position`\n\nThis could be due a query file outside this plugin using outdated nodes,\nor due to an outdated parser.\n\n- Make sure you have the parsers up to date with `:TSUpdate`\n- Make sure you don't have more than one `parser` runtime directory.\n  You can execute this command `:echo nvim_get_runtime_file('parser', v:true)` to find all runtime directories.\n  If you get more than one path, remove the ones that are outside this plugin (`nvim-treesitter` directory),\n  so the correct version of the parser is used.\n\n#### I experience weird highlighting issues similar to [#78](https://github.com/nvim-treesitter/nvim-treesitter/issues/78)\n\nThis is a well known issue, which arises when the tree and the buffer have gotten out of sync.\nAs this is an upstream issue, we don't have any definite fix.\nTo get around this, you can force reparsing the buffer with\n\n```vim\n:write | edit | TSBufEnable highlight\n```\n\nThis will save, restore and enable highlighting for the current buffer.\n\n#### I experience bugs when using `nvim-treesitter`'s `foldexpr` similar to [#194](https://github.com/nvim-treesitter/nvim-treesitter/issues/194)\n\nThis might happen, and is known to happen, with `vim-clap`.\nTo avoid these kind of errors, please use `setlocal` instead of `set` for the respective filetypes.\n\n#### I run into errors like `module 'nvim-treesitter.configs' not found` at startup\n\nThis is because of `rtp` management in `nvim`, adding `packadd\nnvim-treesitter` should fix the issue.\n\n#### I want to use Git instead of curl for downloading the parsers\n\nIn your Lua config:\n\n```lua\nrequire(\"nvim-treesitter.install\").prefer_git = true\n```\n\n#### I want to use a HTTP proxy for downloading the parsers\n\nYou can either configure curl to use additional CLI arguments in your Lua config:\n\n```lua\nrequire(\"nvim-treesitter.install\").command_extra_args = {\n    curl = { \"--proxy\", \"<proxy url>\" },\n}\n```\n\nor you can configure git via `.gitconfig` and use git instead of curl\n\n```lua\nrequire(\"nvim-treesitter.install\").prefer_git = true\n```\n\n#### I want to use a mirror instead of \"https://github.com/\"\n\nIn your Lua config:\n\n```lua\nfor _, config in pairs(require(\"nvim-treesitter.parsers\").get_parser_configs()) do\n  config.install_info.url = config.install_info.url:gsub(\"https://github.com/\", \"something else\")\nend\n\nrequire'nvim-treesitter.configs'.setup {\n    --\n    --\n}\n```\n\n#### Using an existing parser for another filetype\n\nFor example, to use the `bash` tree-sitter to highlight file with\n`filetype=apkbuild`, use:\n\n```lua\nvim.treesitter.language.register(\"bash\", \"apkbuild\")\n```\n\nThe `bash` tree-sitter must be installed following the usual procedure [as\ndescribed above](#language-parsers).\n",
        "releases": []
    }
}