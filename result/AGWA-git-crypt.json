{
    "https://api.github.com/repos/AGWA/git-crypt": {
        "forks": 483,
        "watchers": 8553,
        "stars": 8553,
        "languages": {
            "C++": 154599,
            "Makefile": 2028
        },
        "commits": [
            "2024-09-03T23:30:58Z",
            "2022-06-07T16:34:04Z",
            "2022-04-21T17:07:59Z",
            "2022-04-21T17:01:40Z",
            "2021-02-18T23:57:58Z",
            "2020-04-28T13:14:29Z",
            "2020-01-25T15:21:23Z",
            "2020-01-25T15:18:10Z",
            "2020-01-25T15:16:20Z",
            "2019-05-02T19:52:54Z",
            "2019-05-02T19:51:02Z",
            "2018-08-08T00:57:19Z",
            "2019-05-02T19:36:27Z",
            "2019-05-02T19:31:48Z",
            "2019-01-27T03:15:57Z",
            "2017-11-26T18:24:03Z",
            "2017-11-26T18:21:23Z",
            "2017-11-26T18:05:42Z",
            "2017-09-10T19:36:21Z",
            "2017-09-10T19:33:18Z",
            "2017-09-10T19:29:43Z",
            "2017-03-18T23:23:34Z",
            "2016-07-09T00:54:28Z",
            "2016-10-30T22:57:14Z",
            "2017-05-31T06:57:57Z",
            "2017-09-10T19:13:04Z",
            "2017-09-10T19:09:31Z",
            "2017-09-10T19:05:13Z",
            "2016-10-03T05:18:48Z",
            "2017-07-30T19:45:41Z"
        ],
        "creation_date": "2012-12-19T00:43:59Z",
        "contributors": 15,
        "topics": [],
        "subscribers": 90,
        "readme": "git-crypt - transparent file encryption in git\n==============================================\n\ngit-crypt enables transparent encryption and decryption of files in a\ngit repository.  Files which you choose to protect are encrypted when\ncommitted, and decrypted when checked out.  git-crypt lets you freely\nshare a repository containing a mix of public and private content.\ngit-crypt gracefully degrades, so developers without the secret key can\nstill clone and commit to a repository with encrypted files.  This lets\nyou store your secret material (such as keys or passwords) in the same\nrepository as your code, without requiring you to lock down your entire\nrepository.\n\ngit-crypt was written by [Andrew Ayer](https://www.agwa.name) (agwa@andrewayer.name).\nFor more information, see <https://www.agwa.name/projects/git-crypt>.\n\nBuilding git-crypt\n------------------\nSee the [INSTALL.md](INSTALL.md) file.\n\n\nUsing git-crypt\n---------------\n\nConfigure a repository to use git-crypt:\n\n    cd repo\n    git-crypt init\n\nSpecify files to encrypt by creating a .gitattributes file:\n\n    secretfile filter=git-crypt diff=git-crypt\n    *.key filter=git-crypt diff=git-crypt\n    secretdir/** filter=git-crypt diff=git-crypt\n\nLike a .gitignore file, it can match wildcards and should be checked into\nthe repository.  See below for more information about .gitattributes.\nMake sure you don't accidentally encrypt the .gitattributes file itself\n(or other git files like .gitignore or .gitmodules).  Make sure your\n.gitattributes rules are in place *before* you add sensitive files, or\nthose files won't be encrypted!\n\nShare the repository with others (or with yourself) using GPG:\n\n    git-crypt add-gpg-user USER_ID\n\n`USER_ID` can be a key ID, a full fingerprint, an email address, or\nanything else that uniquely identifies a public key to GPG (see \"HOW TO\nSPECIFY A USER ID\" in the gpg man page).  Note: `git-crypt add-gpg-user`\nwill add and commit a GPG-encrypted key file in the .git-crypt directory\nof the root of your repository.\n\nAlternatively, you can export a symmetric secret key, which you must\nsecurely convey to collaborators (GPG is not required, and no files\nare added to your repository):\n\n    git-crypt export-key /path/to/key\n\nAfter cloning a repository with encrypted files, unlock with GPG:\n\n    git-crypt unlock\n\nOr with a symmetric key:\n\n    git-crypt unlock /path/to/key\n\nThat's all you need to do - after git-crypt is set up (either with\n`git-crypt init` or `git-crypt unlock`), you can use git normally -\nencryption and decryption happen transparently.\n\nCurrent Status\n--------------\n\nThe latest version of git-crypt is [0.7.0](NEWS.md), released on\n2022-04-21.  git-crypt aims to be bug-free and reliable, meaning it\nshouldn't crash, malfunction, or expose your confidential data.\nHowever, it has not yet reached maturity, meaning it is not as\ndocumented, featureful, or easy-to-use as it should be.  Additionally,\nthere may be backwards-incompatible changes introduced before version\n1.0.\n\nSecurity\n--------\n\ngit-crypt is more secure than other transparent git encryption systems.\ngit-crypt encrypts files using AES-256 in CTR mode with a synthetic IV\nderived from the SHA-1 HMAC of the file.  This mode of operation is\nprovably semantically secure under deterministic chosen-plaintext attack.\nThat means that although the encryption is deterministic (which is\nrequired so git can distinguish when a file has and hasn't changed),\nit leaks no information beyond whether two files are identical or not.\nOther proposals for transparent git encryption use ECB or CBC with a\nfixed IV.  These systems are not semantically secure and leak information.\n\nLimitations\n-----------\n\ngit-crypt relies on git filters, which were not designed with encryption\nin mind.  As such, git-crypt is not the best tool for encrypting most or\nall of the files in a repository. Where git-crypt really shines is where\nmost of your repository is public, but you have a few files (perhaps\nprivate keys named *.key, or a file with API credentials) which you\nneed to encrypt.  For encrypting an entire repository, consider using a\nsystem like [git-remote-gcrypt](https://spwhitton.name/tech/code/git-remote-gcrypt/)\ninstead.  (Note: no endorsement is made of git-remote-gcrypt's security.)\n\ngit-crypt does not encrypt file names, commit messages, symlink targets,\ngitlinks, or other metadata.\n\ngit-crypt does not hide when a file does or doesn't change, the length\nof a file, or the fact that two files are identical (see \"Security\"\nsection above).\n\ngit-crypt does not support revoking access to an encrypted repository\nwhich was previously granted. This applies to both multi-user GPG\nmode (there's no del-gpg-user command to complement add-gpg-user)\nand also symmetric key mode (there's no support for rotating the key).\nThis is because it is an inherently complex problem in the context\nof historical data. For example, even if a key was rotated at one\npoint in history, a user having the previous key can still access\nprevious repository history. This problem is discussed in more detail in\n<https://github.com/AGWA/git-crypt/issues/47>.\n\nFiles encrypted with git-crypt are not compressible.  Even the smallest\nchange to an encrypted file requires git to store the entire changed file,\ninstead of just a delta.\n\nAlthough git-crypt protects individual file contents with a SHA-1\nHMAC, git-crypt cannot be used securely unless the entire repository is\nprotected against tampering (an attacker who can mutate your repository\ncan alter your .gitattributes file to disable encryption).  If necessary,\nuse git features such as signed tags instead of relying solely on\ngit-crypt for integrity.\n\nFiles encrypted with git-crypt cannot be patched with git-apply, unless\nthe patch itself is encrypted.  To generate an encrypted patch, use `git\ndiff --no-textconv --binary`.  Alternatively, you can apply a plaintext\npatch outside of git using the patch command.\n\ngit-crypt does not work reliably with some third-party git GUIs, such\nas [Atlassian SourceTree](https://jira.atlassian.com/browse/SRCTREE-2511)\nand GitHub for Mac.  Files might be left in an unencrypted state.\n\nGitattributes File\n------------------\n\nThe .gitattributes file is documented in the gitattributes(5) man page.\nThe file pattern format is the same as the one used by .gitignore,\nas documented in the gitignore(5) man page, with the exception that\nspecifying merely a directory (e.g. `/dir/`) is *not* sufficient to\nencrypt all files beneath it.\n\nAlso note that the pattern `dir/*` does not match files under\nsub-directories of dir/.  To encrypt an entire sub-tree dir/, use `dir/**`:\n\n    dir/** filter=git-crypt diff=git-crypt\n\nThe .gitattributes file must not be encrypted, so make sure wildcards don't\nmatch it accidentally.  If necessary, you can exclude .gitattributes from\nencryption like this:\n\n    .gitattributes !filter !diff\n",
        "releases": [
            {
                "name": "0.7.0",
                "date": "2022-04-21T17:38:43Z"
            }
        ]
    }
}