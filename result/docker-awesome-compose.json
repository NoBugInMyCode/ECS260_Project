{
    "https://api.github.com/repos/docker/awesome-compose": {
        "forks": 6927,
        "watchers": 36810,
        "stars": 36810,
        "languages": {
            "HTML": 51781,
            "Dockerfile": 23333,
            "Rust": 13633,
            "TypeScript": 13374,
            "Java": 8869,
            "Python": 8510,
            "JavaScript": 7741,
            "C#": 5497,
            "CSS": 5011,
            "Go": 4437,
            "Vue": 2534,
            "SCSS": 537,
            "Shell": 121,
            "PHP": 46
        },
        "commits": [
            "2024-05-15T09:17:42Z",
            "2024-03-05T17:20:40Z",
            "2023-01-09T21:30:59Z",
            "2022-12-08T21:21:16Z",
            "2022-10-28T07:46:40Z",
            "2022-09-19T15:58:54Z",
            "2022-09-19T07:05:14Z",
            "2022-09-15T06:34:10Z",
            "2022-09-01T16:39:33Z",
            "2022-08-09T08:30:30Z",
            "2022-07-20T17:05:41Z",
            "2022-07-13T13:06:24Z",
            "2022-07-13T12:44:29Z",
            "2022-07-13T08:57:34Z",
            "2022-07-13T08:35:12Z",
            "2022-07-13T08:15:53Z",
            "2022-07-12T12:39:02Z",
            "2022-07-12T10:22:52Z",
            "2022-07-12T10:18:35Z",
            "2022-07-12T10:13:43Z",
            "2022-07-12T10:09:52Z",
            "2022-07-12T10:05:12Z",
            "2022-07-12T09:31:52Z",
            "2022-07-12T08:27:45Z",
            "2022-07-12T08:08:02Z",
            "2022-07-08T22:51:47Z",
            "2022-07-08T16:21:41Z",
            "2022-07-08T15:54:08Z",
            "2022-07-08T14:48:08Z",
            "2022-07-08T13:22:59Z"
        ],
        "creation_date": "2020-02-13T08:51:42Z",
        "contributors": 30,
        "topics": [
            "awesome",
            "awesome-list",
            "docker-compose"
        ],
        "subscribers": 453,
        "readme": "# Awesome Compose [![Awesome](https://awesome.re/badge.svg)](https://awesome.re)\n\n![logo](awesome-compose.jpg)\n\n> A curated list of Docker Compose samples.\n\nThese samples provide a starting point for how to integrate different services using a Compose file and to manage their deployment with Docker Compose.\n\n> **Note**\n> The following samples are intended for use in local development environments such as project setups, tinkering with software stacks, etc. These samples must not be deployed in production environments.\n\n<!--lint disable awesome-toc-->\n## Contents\n\n- [Samples of Docker Compose applications with multiple integrated services](#samples-of-docker-compose-applications-with-multiple-integrated-services).\n- [Single service samples](#single-service-samples).\n- [Basic setups for different platforms (not production ready - useful for personal use)](#basic-setups-for-different-platforms-not-production-ready---useful-for-personal-use).\n\n## Samples of Docker Compose applications with multiple integrated services\n\n<a href=\"https://docs.docker.com/desktop/wasm/\"><img src=\"icon_wasm.svg\" alt=\"Docker + wasm\" height=\"30\" align=\"top\"/></a> Icon indicates Sample is compatible with [Docker+Wasm](https://docs.docker.com/desktop/wasm/).\n\n- [`ASP.NET / MS-SQL`](aspnet-mssql) - Sample ASP.NET core application\nwith MS SQL server database.\n- [`Elasticsearch / Logstash / Kibana`](elasticsearch-logstash-kibana) - Sample Elasticsearch, Logstash, and Kibana stack.\n- [`Go / NGINX / MySQL`](nginx-golang-mysql) - Sample Go application\nwith an Nginx proxy and a MySQL database.\n- [`Go / NGINX / PostgreSQL`](nginx-golang-postgres) - Sample Go\napplication with an Nginx proxy and a PostgreSQL database.\n- [`Java Spark / MySQL`](sparkjava-mysql) - Sample Java application and\na MySQL database.\n- [`NGINX / ASP.NET / MySQL`](nginx-aspnet-mysql) - Sample Nginx reverse proxy with an C# backend using ASP.NET.\n- [`NGINX / Flask / MongoDB`](nginx-flask-mongo) - Sample Python/Flask\napplication with Nginx proxy and a Mongo database.\n- [`NGINX / Flask / MySQL`](nginx-flask-mysql) - Sample Python/Flask application with an Nginx proxy and a MySQL database.\n- [`NGINX / Node.js / Redis`](nginx-nodejs-redis) - Sample Node.js application with Nginx proxy and a Redis database.\n- [`NGINX / Go`](nginx-golang) - Sample Nginx proxy with a Go backend.\n- [`NGINX / WSGI / Flask`](nginx-wsgi-flask) - Sample Nginx reverse proxy with a Flask backend using WSGI.\n- [`PostgreSQL / pgAdmin`](postgresql-pgadmin) - Sample setup for postgreSQL database with pgAdmin web interface.\n- [`Python / Flask / Redis`](flask-redis) - Sample Python/Flask and a Redis database.\n- [`React / Spring / MySQL`](react-java-mysql) - Sample React\napplication with a Spring backend and a MySQL database.\n- [`React / Express / MySQL`](react-express-mysql) - Sample React\napplication with a Node.js backend and a MySQL database.\n- [`React / Express / MongoDB`](react-express-mongodb) - Sample React\napplication with a Node.js backend and a Mongo database.\n- [`React / Rust / PostgreSQL`](react-rust-postgres) - Sample React\napplication with a Rust backend and a Postgres database.\n- [`React / Nginx`](react-nginx) - Sample React application with Nginx.\n- [`Spring / PostgreSQL`](spring-postgres) - Sample Java application\nwith Spring framework and a Postgres database.\n- [`WasmEdge / MySQL / Nginx`](wasmedge-mysql-nginx) - Sample Wasm-based web application with a static HTML frontend, using a MySQL (MariaDB) database. The frontend connects to a Wasm microservice written in Rust, that runs using the WasmEdge runtime.&nbsp;<a href=\"wasmedge-mysql-nginx\"><img src=\"icon_wasm.svg\" alt=\"Compatible with Docker+wasm\" height=\"30\" align=\"top\"/></a>\n- [`WasmEdge / Kafka / MySQL`](wasmedge-kafka-mysql) - Sample Wasm-based microservice that subscribes to a Kafka (Redpanda) queue topic, and transforms and saves any incoming message into a MySQL (MariaDB) database.&nbsp;<a href=\"wasmedge-kafka-mysql\"><img src=\"icon_wasm.svg\" alt=\"Compatible with Docker+wasm\" height=\"30\" align=\"top\"/></a>\n\n## Single service samples\n\n- [`Angular`](angular)\n- [`Spark`](sparkjava)\n- [`VueJS`](vuejs)\n- [`Flask`](flask)\n- [`PHP`](apache-php)\n- [`Traefik`](traefik-golang)\n- [`Django`](django)\n- [`Minecraft server`](https://github.com/docker/awesome-compose/tree/master/minecraft)\n- [`Plex`](https://github.com/docker/awesome-compose/tree/master/plex)\n- [`Portainer`](https://github.com/docker/awesome-compose/tree/master/portainer)\n- [`Wireguard`](https://github.com/docker/awesome-compose/tree/master/wireguard)\n- [`FastAPI`](fastapi)\n\n## Basic setups for different platforms (not production ready - useful for personal use)\n\n- [`Gitea / PostgreSQL`](gitea-postgres)\n- [`Nextcloud / PostgreSQL`](nextcloud-postgres)\n- [`Nextcloud / Redis / MariaDB`](nextcloud-redis-mariadb)\n- [`Pi-hole / cloudflared`](pihole-cloudflared-DoH) - Sample Pi-hole setup with use of DoH cloudflared service\n- [`Prometheus / Grafana`](prometheus-grafana)\n- [`Wordpress / MySQL`](wordpress-mysql)\n\n<!--lint disable awesome-toc-->\n\n## Getting started\n\nThese instructions will get you through the bootstrap phase of creating and\ndeploying samples of containerized applications with Docker Compose.\n\n### Prerequisites\n\n- Make sure that you have Docker and Docker Compose installed\n  - Windows or macOS:\n    [Install Docker Desktop](https://www.docker.com/get-started)\n  - Linux: [Install Docker](https://www.docker.com/get-started) and then\n    [Docker Compose](https://github.com/docker/compose)\n- Download some or all of the samples from this repository.\n\n### Running a sample\n\nThe root directory of each sample contains the `compose.yaml` which\ndescribes the configuration of service components. All samples can be run in\na local environment by going into the root directory of each one and executing:\n\n```console\ndocker compose up -d\n```\n\nCheck the `README.md` of each sample to get more details on the structure and\nwhat is the expected output.\nTo stop and remove all containers of the sample application run:\n\n```console\ndocker compose down\n```\n\n### Quickstart guides\n\nIn addition to all the ready to run Compose samples listed above the folder [official-documentation-samples](official-documentation-samples/README.md) contains quickstart guides. Each of these step by step guides explain which files need to be created to build and run a Docker Compose application.\n\n<!--lint disable awesome-toc-->\n## Contribute\n\nWe welcome examples that help people understand how to use Docker Compose for\ncommon applications. Check the [Contribution Guide](CONTRIBUTING.md) for more details. \n",
        "releases": []
    }
}