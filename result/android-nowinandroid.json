{
    "https://api.github.com/repos/android/nowinandroid": {
        "forks": 3270,
        "watchers": 17734,
        "stars": 17734,
        "languages": {
            "Kotlin": 1065908,
            "Shell": 15371
        },
        "commits": [
            "2025-01-09T11:14:59Z",
            "2024-12-20T09:27:45Z",
            "2025-01-08T16:00:55Z",
            "2025-01-08T14:48:30Z",
            "2025-01-08T14:09:38Z",
            "2025-01-08T11:09:46Z",
            "2025-01-08T08:20:03Z",
            "2025-01-08T01:33:11Z",
            "2025-01-08T00:02:02Z",
            "2025-01-07T16:44:54Z",
            "2025-01-07T16:36:21Z",
            "2025-01-07T16:21:29Z",
            "2025-01-07T16:19:16Z",
            "2025-01-07T16:18:27Z",
            "2025-01-07T16:17:46Z",
            "2025-01-07T13:31:21Z",
            "2025-01-07T12:56:58Z",
            "2025-01-07T12:48:49Z",
            "2025-01-07T12:48:04Z",
            "2025-01-07T12:43:02Z",
            "2025-01-07T12:42:57Z",
            "2025-01-07T12:38:49Z",
            "2025-01-07T12:35:12Z",
            "2025-01-07T05:38:16Z",
            "2025-01-06T18:39:25Z",
            "2025-01-06T17:16:47Z",
            "2025-01-06T17:03:30Z",
            "2025-01-06T16:58:26Z",
            "2025-01-06T16:57:27Z",
            "2025-01-06T16:49:33Z"
        ],
        "creation_date": "2022-04-19T20:40:24Z",
        "contributors": 30,
        "topics": [
            "android",
            "jetpack-compose",
            "kotlin"
        ],
        "subscribers": 340,
        "readme": "![Now in Android](docs/images/nia-splash.jpg \"Now in Android\")\n\n<a href=\"https://play.google.com/store/apps/details?id=com.google.samples.apps.nowinandroid\"><img src=\"https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png\" height=\"70\"></a>\n\nNow in Android App\n==================\n\n**Learn how this app was designed and built in the [design case study](https://goo.gle/nia-figma), [architecture learning journey](docs/ArchitectureLearningJourney.md) and [modularization learning journey](docs/ModularizationLearningJourney.md).**\n\nThis is the repository for the [Now in Android](https://developer.android.com/series/now-in-android)\napp. It is a **work in progress** \ud83d\udea7.\n\n**Now in Android** is a fully functional Android app built entirely with Kotlin and Jetpack Compose. It\nfollows Android design and development best practices and is intended to be a useful reference\nfor developers. As a running app, it's intended to help developers keep up-to-date with the world\nof Android development by providing regular news updates.\n\nThe app is currently in development. The `prodRelease` variant is [available on the Play Store](https://play.google.com/store/apps/details?id=com.google.samples.apps.nowinandroid).\n\n# Features\n\n**Now in Android** displays content from the\n[Now in Android](https://developer.android.com/series/now-in-android) series. Users can browse for\nlinks to recent videos, articles and other content. Users can also follow topics they are interested\nin, and be notified when new content is published which matches interests they are following.\n\n## Screenshots\n\n![Screenshot showing For You screen, Interests screen and Topic detail screen](docs/images/screenshots.png \"Screenshot showing For You screen, Interests screen and Topic detail screen\")\n\n# Development Environment\n\n**Now in Android** uses the Gradle build system and can be imported directly into Android Studio (make sure you are using the latest stable version available [here](https://developer.android.com/studio)). \n\nChange the run configuration to `app`.\n\n![image](https://user-images.githubusercontent.com/873212/210559920-ef4a40c5-c8e0-478b-bb00-4879a8cf184a.png)\n\nThe `demoDebug` and `demoRelease` build variants can be built and run (the `prod` variants use a backend server which is not currently publicly available).\n\n![image](https://user-images.githubusercontent.com/873212/210560507-44045dc5-b6d5-41ca-9746-f0f7acf22f8e.png)\n\nOnce you're up and running, you can refer to the learning journeys below to get a better\nunderstanding of which libraries and tools are being used, the reasoning behind the approaches to\nUI, testing, architecture and more, and how all of these different pieces of the project fit\ntogether to create a complete app.\n\n# Architecture\n\nThe **Now in Android** app follows the\n[official architecture guidance](https://developer.android.com/topic/architecture) \nand is described in detail in the\n[architecture learning journey](docs/ArchitectureLearningJourney.md).\n\n# Modularization\n\nThe **Now in Android** app has been fully modularized and you can find the detailed guidance and\ndescription of the modularization strategy used in\n[modularization learning journey](docs/ModularizationLearningJourney.md).\n\n# Build\n\nThe app contains the usual `debug` and `release` build variants. \n\nIn addition, the `benchmark` variant of `app` is used to test startup performance and generate a\nbaseline profile (see below for more information).\n\n`app-nia-catalog` is a standalone app that displays the list of components that are stylized for\n**Now in Android**.\n\nThe app also uses\n[product flavors](https://developer.android.com/studio/build/build-variants#product-flavors) to\ncontrol where content for the app should be loaded from.\n\nThe `demo` flavor uses static local data to allow immediate building and exploring of the UI.\n\nThe `prod` flavor makes real network calls to a backend server, providing up-to-date content. At \nthis time, there is not a public backend available.\n\nFor normal development use the `demoDebug` variant. For UI performance testing use the\n`demoRelease` variant. \n\n# Testing\n\nTo facilitate testing of components, **Now in Android** uses dependency injection with\n[Hilt](https://developer.android.com/training/dependency-injection/hilt-android).\n\nMost data layer components are defined as interfaces.\nThen, concrete implementations (with various dependencies) are bound to provide those interfaces to\nother components in the app.\nIn tests, **Now in Android** notably does _not_ use any mocking libraries.\nInstead, the production implementations can be replaced with test doubles using Hilt's testing APIs\n(or via manual constructor injection for `ViewModel` tests).\n\nThese test doubles implement the same interface as the production implementations and generally\nprovide a simplified (but still realistic) implementation with additional testing hooks.\nThis results in less brittle tests that may exercise more production code, instead of just verifying\nspecific calls against mocks.\n\nExamples:\n- In instrumentation tests, a temporary folder is used to store the user's preferences, which is\n  wiped after each test.\n  This allows using the real `DataStore` and exercising all related code, instead of mocking the \n  flow of data updates.\n\n- There are `Test` implementations of each repository, which implement the normal, full repository\n  interface and also provide test-only hooks.\n  `ViewModel` tests use these `Test` repositories, and thus can use the test-only hooks to\n  manipulate the state of the `Test` repository and verify the resulting behavior, instead of\n  checking that specific repository methods were called.\n\nTo run the tests execute the following gradle tasks: \n\n- `testDemoDebug` run all local tests against the `demoDebug` variant. Screenshot tests will fail\n(see below for explanation). To avoid this, run `recordRoborazziDemoDebug` prior to running unit tests.\n- `connectedDemoDebugAndroidTest` run all instrumented tests against the `demoDebug` variant. \n\n> [!NOTE]\n> You should not run `./gradlew test` or `./gradlew connectedAndroidTest` as this will execute \ntests against _all_ build variants which is both unnecessary and will result in failures as only the\n`demoDebug` variant is supported. No other variants have any tests (although this might change in future). \n\n## Screenshot tests\nA screenshot test takes a screenshot of a screen or a UI component within the app, and compares it \nwith a previously recorded screenshot which is known to be rendered correctly. \n\nFor example, Now in Android has [screenshot tests](https://github.com/android/nowinandroid/blob/main/app/src/testDemo/kotlin/com/google/samples/apps/nowinandroid/ui/NiaAppScreenSizesScreenshotTests.kt)\nto verify that the navigation is displayed correctly on different screen sizes \n([known correct screenshots](https://github.com/android/nowinandroid/tree/main/app/src/testDemo/screenshots)). \n\nNow In Android uses [Roborazzi](https://github.com/takahirom/roborazzi) to run screenshot tests\nof certain screens and UI components. When working with screenshot tests the following gradle tasks are useful:\n\n- `verifyRoborazziDemoDebug` run all screenshot tests, verifying the screenshots against the known\ncorrect screenshots.\n- `recordRoborazziDemoDebug` record new \"known correct\" screenshots. Use this command when you have\nmade changes to the UI and manually verified that they are rendered correctly. Screenshots will be\nstored in `modulename/src/test/screenshots`.\n- `compareRoborazziDemoDebug` create comparison images between failed tests and the known correct\nimages. These can also be found in `modulename/src/test/screenshots`. \n\n> [!NOTE]\n> **Note on failing screenshot tests**   \n> The known correct screenshots stored in this repository are recorded on CI using Linux. Other\nplatforms may (and probably will) generate slightly different images, making the screenshot tests fail. \nWhen working on a non-Linux platform, a workaround to this is to run `recordRoborazziDemoDebug` on the\n`main` branch before starting work. After making changes, `verifyRoborazziDemoDebug` will identify only\nlegitimate changes. \n\nFor more information about screenshot testing \n[check out this talk](https://www.droidcon.com/2023/11/15/easy-screenshot-testing-with-compose/).\n\n# UI\nThe app was designed using [Material 3 guidelines](https://m3.material.io/). Learn more about the design process and \nobtain the design files in the [Now in Android Material 3 Case Study](https://goo.gle/nia-figma) (design assets [also available as a PDF](docs/Now-In-Android-Design-File.pdf)).\n\nThe Screens and UI elements are built entirely using [Jetpack Compose](https://developer.android.com/jetpack/compose). \n\nThe app has two themes: \n\n- Dynamic color - uses colors based on the [user's current color theme](https://material.io/blog/announcing-material-you) (if supported)\n- Default theme - uses predefined colors when dynamic color is not supported\n\nEach theme also supports dark mode. \n\nThe app uses adaptive layouts to\n[support different screen sizes](https://developer.android.com/guide/topics/large-screens/support-different-screen-sizes).\n\nFind out more about the [UI architecture here](docs/ArchitectureLearningJourney.md#ui-layer).\n\n# Performance\n\n## Benchmarks\n\nFind all tests written using [`Macrobenchmark`](https://developer.android.com/topic/performance/benchmarking/macrobenchmark-overview)\nin the `benchmarks` module. This module also contains the test to generate the Baseline profile.\n\n## Baseline profiles\n\nThe baseline profile for this app is located at [`app/src/main/baseline-prof.txt`](app/src/main/baseline-prof.txt).\nIt contains rules that enable AOT compilation of the critical user path taken during app launch.\nFor more information on baseline profiles, read [this document](https://developer.android.com/studio/profile/baselineprofiles).\n\n> [!NOTE]\n> The baseline profile needs to be re-generated for release builds that touch code which changes app startup.\n\nTo generate the baseline profile, select the `benchmark` build variant and run the\n`BaselineProfileGenerator` benchmark test on an AOSP Android Emulator.\nThen copy the resulting baseline profile from the emulator to [`app/src/main/baseline-prof.txt`](app/src/main/baseline-prof.txt).\n\n## Compose compiler metrics\n\nRun the following command to get and analyse compose compiler metrics:\n\n```bash\n./gradlew assembleRelease -PenableComposeCompilerMetrics=true -PenableComposeCompilerReports=true\n```\n\nThe reports files will be added to [build/compose-reports](build/compose-reports). The metrics files will also be \nadded to [build/compose-metrics](build/compose-metrics).\n\nFor more information on Compose compiler metrics, see [this blog post](https://medium.com/androiddevelopers/jetpack-compose-stability-explained-79c10db270c8).\n\n# License\n\n**Now in Android** is distributed under the terms of the Apache License (Version 2.0). See the\n[license](LICENSE) for more information.\n",
        "releases": [
            {
                "name": "Play release 0.1.1",
                "date": "2023-07-13T11:09:53Z"
            },
            {
                "name": "Play release 0.0.5",
                "date": "2023-05-02T16:34:58Z"
            }
        ]
    }
}