{
    "https://api.github.com/repos/paulmillr/chokidar": {
        "forks": 587,
        "watchers": 11170,
        "stars": 11170,
        "languages": {
            "JavaScript": 84680,
            "TypeScript": 55126
        },
        "commits": [
            "2025-01-21T12:11:58Z",
            "2025-01-21T09:29:07Z",
            "2025-01-19T15:33:17Z",
            "2025-01-13T04:51:59Z",
            "2025-01-13T00:26:52Z",
            "2025-01-13T00:26:16Z",
            "2025-01-11T18:33:49Z",
            "2025-01-11T18:26:35Z",
            "2025-01-11T18:23:38Z",
            "2025-01-11T17:57:23Z",
            "2025-01-11T17:43:30Z",
            "2025-01-11T16:34:16Z",
            "2025-01-11T16:32:47Z",
            "2025-01-11T16:32:27Z",
            "2025-01-10T00:30:34Z",
            "2024-12-18T22:20:06Z",
            "2024-12-18T22:11:07Z",
            "2024-12-18T21:56:21Z",
            "2024-12-18T19:10:59Z",
            "2024-12-16T19:05:07Z",
            "2024-12-16T15:46:32Z",
            "2024-11-01T15:26:56Z",
            "2024-11-01T10:35:33Z",
            "2024-11-01T05:59:39Z",
            "2024-10-29T09:02:47Z",
            "2024-10-19T20:50:13Z",
            "2024-10-19T19:46:27Z",
            "2024-10-12T20:31:42Z",
            "2024-10-04T19:13:49Z",
            "2024-10-04T19:12:26Z"
        ],
        "creation_date": "2012-04-20T19:17:49Z",
        "contributors": 30,
        "topics": [
            "chokidar",
            "filesystem",
            "fsevents",
            "nodejs",
            "watch-files",
            "watcher"
        ],
        "subscribers": 87,
        "readme": "# Chokidar [![Weekly downloads](https://img.shields.io/npm/dw/chokidar.svg)](https://github.com/paulmillr/chokidar)\n\n> Minimal and efficient cross-platform file watching library\n\n## Why?\n\nThere are many reasons to prefer Chokidar to raw fs.watch / fs.watchFile in 2024:\n\n- Events are properly reported\n    - macOS events report filenames\n    - events are not reported twice\n    - changes are reported as add / change / unlink instead of useless `rename`\n- Atomic writes are supported, using `atomic` option\n    - Some file editors use them\n- Chunked writes are supported, using `awaitWriteFinish` option\n    - Large files are commonly written in chunks\n- File / dir filtering is supported\n- Symbolic links are supported\n- Recursive watching is always supported, instead of partial when using raw events\n    - Includes a way to limit recursion depth\n\nChokidar relies on the Node.js core `fs` module, but when using\n`fs.watch` and `fs.watchFile` for watching, it normalizes the events it\nreceives, often checking for truth by getting file stats and/or dir contents.\nThe `fs.watch`-based implementation is the default, which\navoids polling and keeps CPU usage down. Be advised that chokidar will initiate\nwatchers recursively for everything within scope of the paths that have been\nspecified, so be judicious about not wasting system resources by watching much\nmore than needed. For some cases, `fs.watchFile`, which utilizes polling and uses more resources, is used.\n\nMade for [Brunch](https://brunch.io/) in 2012,\nit is now used in [~30 million repositories](https://www.npmjs.com/browse/depended/chokidar) and\nhas proven itself in production environments.\n\n**Sep 2024 update:** v4 is out! It decreases dependency count from 13 to 1, removes\nsupport for globs, adds support for ESM / Common.js modules, and bumps minimum node.js version from v8 to v14.\nCheck out [upgrading](#upgrading).\n\n## Getting started\n\nInstall with npm:\n\n```sh\nnpm install chokidar\n```\n\nUse it in your code:\n\n```javascript\nimport chokidar from 'chokidar';\n\n// One-liner for current directory\nchokidar.watch('.').on('all', (event, path) => {\n  console.log(event, path);\n});\n\n\n// Extended options\n// ----------------\n\n// Initialize watcher.\nconst watcher = chokidar.watch('file, dir, or array', {\n  ignored: (path, stats) => stats?.isFile() && !path.endsWith('.js'), // only watch js files\n  persistent: true\n});\n\n// Something to use when events are received.\nconst log = console.log.bind(console);\n// Add event listeners.\nwatcher\n  .on('add', path => log(`File ${path} has been added`))\n  .on('change', path => log(`File ${path} has been changed`))\n  .on('unlink', path => log(`File ${path} has been removed`));\n\n// More possible events.\nwatcher\n  .on('addDir', path => log(`Directory ${path} has been added`))\n  .on('unlinkDir', path => log(`Directory ${path} has been removed`))\n  .on('error', error => log(`Watcher error: ${error}`))\n  .on('ready', () => log('Initial scan complete. Ready for changes'))\n  .on('raw', (event, path, details) => { // internal\n    log('Raw event info:', event, path, details);\n  });\n\n// 'add', 'addDir' and 'change' events also receive stat() results as second\n// argument when available: https://nodejs.org/api/fs.html#fs_class_fs_stats\nwatcher.on('change', (path, stats) => {\n  if (stats) console.log(`File ${path} changed size to ${stats.size}`);\n});\n\n// Watch new files.\nwatcher.add('new-file');\nwatcher.add(['new-file-2', 'new-file-3']);\n\n// Get list of actual paths being watched on the filesystem\nlet watchedPaths = watcher.getWatched();\n\n// Un-watch some files.\nawait watcher.unwatch('new-file');\n\n// Stop watching. The method is async!\nawait watcher.close().then(() => console.log('closed'));\n\n// Full list of options. See below for descriptions.\n// Do not use this example!\nchokidar.watch('file', {\n  persistent: true,\n\n  // ignore .txt files\n  ignored: (file) => file.endsWith('.txt'),\n  // watch only .txt files\n  // ignored: (file, _stats) => _stats?.isFile() && !file.endsWith('.txt'),\n\n  awaitWriteFinish: true, // emit single event when chunked writes are completed\n  atomic: true, // emit proper events when \"atomic writes\" (mv _tmp file) are used\n\n  // The options also allow specifying custom intervals in ms\n  // awaitWriteFinish: {\n  //   stabilityThreshold: 2000,\n  //   pollInterval: 100\n  // },\n  // atomic: 100,\n\n  interval: 100,\n  binaryInterval: 300,\n\n  cwd: '.',\n  depth: 99,\n\n  followSymlinks: true,\n  ignoreInitial: false,\n  ignorePermissionErrors: false,\n  usePolling: false,\n  alwaysStat: false,\n});\n\n```\n\n`chokidar.watch(paths, [options])`\n\n* `paths` (string or array of strings). Paths to files, dirs to be watched\nrecursively.\n* `options` (object) Options object as defined below:\n\n#### Persistence\n\n* `persistent` (default: `true`). Indicates whether the process\nshould continue to run as long as files are being watched.\n\n#### Path filtering\n\n* `ignored` function, regex, or path. Defines files/paths to be ignored.\nThe whole relative or absolute path is tested, not just filename. If a function with two arguments\nis provided, it gets called twice per path - once with a single argument (the path), second\ntime with two arguments (the path and the\n[`fs.Stats`](https://nodejs.org/api/fs.html#fs_class_fs_stats)\nobject of that path).\n* `ignoreInitial` (default: `false`). If set to `false` then `add`/`addDir` events are also emitted for matching paths while\ninstantiating the watching as chokidar discovers these file paths (before the `ready` event).\n* `followSymlinks` (default: `true`). When `false`, only the\nsymlinks themselves will be watched for changes instead of following\nthe link references and bubbling events through the link's path.\n* `cwd` (no default). The base directory from which watch `paths` are to be\nderived. Paths emitted with events will be relative to this.\n\n#### Performance\n\n* `usePolling` (default: `false`).\nWhether to use fs.watchFile (backed by polling), or fs.watch. If polling\nleads to high CPU utilization, consider setting this to `false`. It is\ntypically necessary to **set this to `true` to successfully watch files over\na network**, and it may be necessary to successfully watch files in other\nnon-standard situations. Setting to `true` explicitly on MacOS overrides the\n`useFsEvents` default. You may also set the CHOKIDAR_USEPOLLING env variable\nto true (1) or false (0) in order to override this option.\n* _Polling-specific settings_ (effective when `usePolling: true`)\n  * `interval` (default: `100`). Interval of file system polling, in milliseconds. You may also\n    set the CHOKIDAR_INTERVAL env variable to override this option.\n  * `binaryInterval` (default: `300`). Interval of file system\n  polling for binary files.\n  ([see list of binary extensions](https://github.com/sindresorhus/binary-extensions/blob/master/binary-extensions.json))\n* `alwaysStat` (default: `false`). If relying upon the\n[`fs.Stats`](https://nodejs.org/api/fs.html#fs_class_fs_stats)\nobject that may get passed with `add`, `addDir`, and `change` events, set\nthis to `true` to ensure it is provided even in cases where it wasn't\nalready available from the underlying watch events.\n* `depth` (default: `undefined`). If set, limits how many levels of\nsubdirectories will be traversed.\n* `awaitWriteFinish` (default: `false`).\nBy default, the `add` event will fire when a file first appears on disk, before\nthe entire file has been written. Furthermore, in some cases some `change`\nevents will be emitted while the file is being written. In some cases,\nespecially when watching for large files there will be a need to wait for the\nwrite operation to finish before responding to a file creation or modification.\nSetting `awaitWriteFinish` to `true` (or a truthy value) will poll file size,\nholding its `add` and `change` events until the size does not change for a\nconfigurable amount of time. The appropriate duration setting is heavily\ndependent on the OS and hardware. For accurate detection this parameter should\nbe relatively high, making file watching much less responsive.\nUse with caution.\n  * *`options.awaitWriteFinish` can be set to an object in order to adjust\n  timing params:*\n  * `awaitWriteFinish.stabilityThreshold` (default: 2000). Amount of time in\n  milliseconds for a file size to remain constant before emitting its event.\n  * `awaitWriteFinish.pollInterval` (default: 100). File size polling interval, in milliseconds.\n\n#### Errors\n\n* `ignorePermissionErrors` (default: `false`). Indicates whether to watch files\nthat don't have read permissions if possible. If watching fails due to `EPERM`\nor `EACCES` with this set to `true`, the errors will be suppressed silently.\n* `atomic` (default: `true` if `useFsEvents` and `usePolling` are `false`).\nAutomatically filters out artifacts that occur when using editors that use\n\"atomic writes\" instead of writing directly to the source file. If a file is\nre-added within 100 ms of being deleted, Chokidar emits a `change` event\nrather than `unlink` then `add`. If the default of 100 ms does not work well\nfor you, you can override it by setting `atomic` to a custom value, in\nmilliseconds.\n\n### Methods & Events\n\n`chokidar.watch()` produces an instance of `FSWatcher`. Methods of `FSWatcher`:\n\n* `.add(path / paths)`: Add files, directories for tracking.\nTakes an array of strings or just one string.\n* `.on(event, callback)`: Listen for an FS event.\nAvailable events: `add`, `addDir`, `change`, `unlink`, `unlinkDir`, `ready`,\n`raw`, `error`.\nAdditionally `all` is available which gets emitted with the underlying event\nname and path for every event other than `ready`, `raw`, and `error`.  `raw` is internal, use it carefully.\n* `.unwatch(path / paths)`: Stop watching files or directories.\nTakes an array of strings or just one string.\n* `.close()`: **async** Removes all listeners from watched files. Asynchronous, returns Promise. Use with `await` to ensure bugs don't happen.\n* `.getWatched()`: Returns an object representing all the paths on the file\nsystem being watched by this `FSWatcher` instance. The object's keys are all the\ndirectories (using absolute paths unless the `cwd` option was used), and the\nvalues are arrays of the names of the items contained in each directory.\n\n### CLI\n\nCheck out third party [chokidar-cli](https://github.com/open-cli-tools/chokidar-cli),\nwhich allows to execute a command on each change, or get a stdio stream of change events.\n\n## Troubleshooting\n\nSometimes, Chokidar runs out of file handles, causing `EMFILE` and `ENOSP` errors:\n\n* `bash: cannot set terminal process group (-1): Inappropriate ioctl for device bash: no job control in this shell`\n* `Error: watch /home/ ENOSPC`\n\nThere are two things that can cause it.\n\n1. Exhausted file handles for generic fs operations\n    - Can be solved by using [graceful-fs](https://www.npmjs.com/package/graceful-fs),\n      which can monkey-patch native `fs` module used by chokidar: `let fs = require('fs'); let grfs = require('graceful-fs'); grfs.gracefulify(fs);`\n    - Can also be solved by tuning OS: `echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p`.\n2. Exhausted file handles for `fs.watch`\n    - Can't seem to be solved by graceful-fs or OS tuning\n    - It's possible to start using `usePolling: true`, which will switch backend to resource-intensive `fs.watchFile`\n\nAll fsevents-related issues (`WARN optional dep failed`, `fsevents is not a constructor`) are solved by upgrading to v4+.\n\n## Changelog\n\n- **v4 (Sep 2024):** remove glob support and bundled fsevents. Decrease dependency count from 13 to 1. Rewrite in typescript. Bumps minimum node.js requirement to v14+\n- **v3 (Apr 2019):** massive CPU & RAM consumption improvements; reduces deps / package size by a factor of 17x and bumps Node.js requirement to v8.16+.\n- **v2 (Dec 2017):** globs are now posix-style-only. Tons of bugfixes.\n- **v1 (Apr 2015):** glob support, symlink support, tons of bugfixes. Node 0.8+ is supported\n- **v0.1 (Apr 2012):** Initial release, extracted from [Brunch](https://github.com/brunch/brunch/blob/9847a065aea300da99bd0753f90354cde9de1261/src/helpers.coffee#L66)\n\n### Upgrading\n\nIf you've used globs before and want do replicate the functionality with v4:\n\n```js\n// v3\nchok.watch('**/*.js');\nchok.watch(\"./directory/**/*\");\n\n// v4\nchok.watch('.', {\n  ignored: (path, stats) => stats?.isFile() && !path.endsWith('.js'), // only watch js files\n});\nchok.watch('./directory');\n\n// other way\nimport { glob } from 'node:fs/promises';\nconst watcher = watch(await Array.fromAsync(glob('**/*.js')));\n\n// unwatching\n// v3\nchok.unwatch('**/*.js');\n// v4\nchok.unwatch(await glob('**/*.js'));\n```\n\n## Also\n\nWhy was chokidar named this way? What's the meaning behind it?\n\n>Chowkidar is a transliteration of a Hindi word meaning 'watchman, gatekeeper', \u091a\u094c\u0915\u0940\u0926\u093e\u0930. This ultimately comes from Sanskrit _ \u091a\u0924\u0941\u0937\u094d\u0915_ (crossway, quadrangle, consisting-of-four). This word is also used in other languages like Urdu as (\u0686\u0648\u06a9\u06cc\u062f\u0627\u0631) which is widely used in Pakistan and India. \n\n## License\n\nMIT (c) Paul Miller (<https://paulmillr.com>), see [LICENSE](LICENSE) file.\n",
        "releases": [
            {
                "name": "4.0.3",
                "date": "2024-12-18T22:21:09Z"
            },
            {
                "name": "4.0.2",
                "date": "2024-12-16T19:06:23Z"
            },
            {
                "name": "4.0.1",
                "date": "2024-09-22T13:09:57Z"
            },
            {
                "name": "4.0.0",
                "date": "2024-09-13T00:29:54Z"
            },
            {
                "name": "3.6.0",
                "date": "2024-02-06T22:57:08Z"
            },
            {
                "name": "3.5.3",
                "date": "2022-01-27T05:15:58Z"
            },
            {
                "name": "3.5.2",
                "date": "2021-06-15T13:26:25Z"
            },
            {
                "name": "3.5.1",
                "date": "2021-01-24T00:31:37Z"
            },
            {
                "name": "3.5.0",
                "date": "2021-01-06T07:35:48Z"
            },
            {
                "name": "3.4.2",
                "date": "2020-08-25T23:17:31Z"
            },
            {
                "name": "",
                "date": "2020-04-29T22:14:07Z"
            },
            {
                "name": "3.3.0",
                "date": "2019-12-03T05:04:04Z"
            },
            {
                "name": "3.2.1",
                "date": "2019-10-01T15:22:45Z"
            },
            {
                "name": "3.1.1",
                "date": "2019-09-19T18:33:00Z"
            },
            {
                "name": "3.1.0",
                "date": "2019-09-16T19:09:16Z"
            },
            {
                "name": "3.0.2",
                "date": "2019-07-07T00:06:07Z"
            },
            {
                "name": "3.0.1",
                "date": "2019-06-02T21:58:12Z"
            },
            {
                "name": "3.0.0",
                "date": "2019-05-02T20:11:55Z"
            }
        ]
    }
}