{
    "https://api.github.com/repos/ai/nanoid": {
        "forks": 808,
        "watchers": 24993,
        "stars": 24993,
        "languages": {
            "JavaScript": 24087,
            "HTML": 920
        },
        "commits": [
            "2025-01-21T20:05:26Z",
            "2025-01-14T08:29:15Z",
            "2025-01-08T20:21:41Z",
            "2025-01-08T20:06:19Z",
            "2025-01-08T19:59:23Z",
            "2024-12-09T11:32:02Z",
            "2024-12-05T09:01:18Z",
            "2024-12-05T08:58:38Z",
            "2024-11-26T15:17:42Z",
            "2024-11-26T12:02:01Z",
            "2024-11-26T11:59:31Z",
            "2024-11-26T11:58:04Z",
            "2024-11-26T11:53:29Z",
            "2024-11-26T11:34:51Z",
            "2024-11-26T11:34:15Z",
            "2024-11-26T11:31:28Z",
            "2024-11-26T10:54:36Z",
            "2024-11-25T20:27:33Z",
            "2024-11-25T20:27:05Z",
            "2024-11-25T20:25:45Z",
            "2024-11-21T09:43:55Z",
            "2024-11-15T21:48:14Z",
            "2024-10-28T11:28:55Z",
            "2024-10-28T11:27:36Z",
            "2024-10-28T11:26:33Z",
            "2024-10-28T11:24:10Z",
            "2024-10-24T14:31:59Z",
            "2024-08-28T21:30:52Z",
            "2024-08-21T21:21:19Z",
            "2024-06-25T14:30:12Z"
        ],
        "creation_date": "2017-08-05T05:24:35Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 157,
        "readme": "# Nano ID\n\n<img src=\"https://ai.github.io/nanoid/logo.svg\" align=\"right\"\n     alt=\"Nano ID logo by Anton Lovchikov\" width=\"180\" height=\"94\">\n\n**English** | [\u0420\u0443\u0441\u0441\u043a\u0438\u0439](./README.ru.md) | [\u7b80\u4f53\u4e2d\u6587](./README.zh-CN.md) | [Bahasa Indonesia](./README.id-ID.md)\n\nA tiny, secure, URL-friendly, unique\u00a0string ID\u00a0generator for\u00a0JavaScript.\n\n> \u201cAn amazing level of senseless perfectionism,\n> which is simply impossible not to respect.\u201d\n\n* **Small.** 118 bytes (minified and brotlied). No\u00a0dependencies.\n  [Size Limit] controls the size.\n* **Safe.** It uses hardware random generator. Can be used in clusters.\n* **Short IDs.** It uses a\u00a0larger alphabet than UUID (`A-Za-z0-9_-`).\n  So ID size was reduced from\u00a036\u00a0to\u00a021\u00a0symbols.\n* **Portable.** Nano ID was ported\n  to over [20 programming languages](./README.md#other-programming-languages).\n\n```js\nimport { nanoid } from 'nanoid'\nmodel.id = nanoid() //=> \"V1StGXR8_Z5jdHi6B-myT\"\n```\n\n---\n\n<img src=\"https://cdn.evilmartians.com/badges/logo-no-label.svg\" alt=\"\" width=\"22\" height=\"16\" />\u00a0\u00a0Made at <b><a href=\"https://evilmartians.com/devtools?utm_source=nanoid&utm_campaign=devtools-button&utm_medium=github\">Evil Martians</a></b>, product consulting for <b>developer tools</b>.\n\n---\n\n[online tool]: https://gitpod.io/#https://github.com/ai/nanoid/\n[with Babel]:  https://developer.epages.com/blog/coding/how-to-transpile-node-modules-with-babel-and-webpack-in-a-monorepo/\n[Size Limit]:  https://github.com/ai/size-limit\n\n\n## Table of Contents\n\n- [Table of Contents](#table-of-contents)\n- [Comparison with UUID](#comparison-with-uuid)\n- [Benchmark](#benchmark)\n- [Security](#security)\n- [Install](#install)\n  - [ESM](#esm)\n  - [CommonJS](#commonjs)\n  - [CDN](#cdn)\n- [API](#api)\n  - [Blocking](#blocking)\n  - [Non-Secure](#non-secure)\n  - [Custom Alphabet or Size](#custom-alphabet-or-size)\n  - [Custom Random Bytes Generator](#custom-random-bytes-generator)\n- [Usage](#usage)\n  - [React](#react)\n  - [React Native](#react-native)\n  - [PouchDB and CouchDB](#pouchdb-and-couchdb)\n  - [Web Workers](#web-workers)\n  - [CLI](#cli)\n  - [Other Programming Languages](#other-programming-languages)\n- [Tools](#tools)\n\n\n## Comparison with UUID\n\nNano ID is quite comparable to UUID v4 (random-based).\nIt has a similar number of random bits in the ID\n(126\u00a0in\u00a0Nano\u00a0ID\u00a0and\u00a0122\u00a0in\u00a0UUID), so\u00a0it\u00a0has\u00a0a similar\u00a0collision\u00a0probability:\n\n> For there to be a one in a billion chance of duplication,\n> 103 trillion version 4 IDs must be generated.\n\nThere are two main differences between Nano ID and UUID v4:\n\n1. Nano ID uses a bigger alphabet, so a similar number of random bits\n   are packed in just 21\u00a0symbols\u00a0instead of 36.\n2. Nano ID code is **4 times smaller** than `uuid/v4` package:\n   130 bytes instead of 423.\n\n\n## Benchmark\n\n```rust\n$ node ./test/benchmark.js\ncrypto.randomUUID          7,619,041 ops/sec\nuuid v4                    7,436,626 ops/sec\n@napi-rs/uuid              4,730,614 ops/sec\nuid/secure                 4,729,185 ops/sec\n@lukeed/uuid               4,015,673 ops/sec\nnanoid                     3,693,964 ops/sec\ncustomAlphabet             2,799,255 ops/sec\nnanoid for browser           380,915 ops/sec\nsecure-random-string         362,316 ops/sec\nuid-safe.sync                354,234 ops/sec\nshortid                       38,808 ops/sec\n\nNon-secure:\nuid                       11,872,105 ops/sec\nnanoid/non-secure          2,226,483 ops/sec\nrndm                       2,308,044 ops/sec\n```\n\nTest configuration: Framework 13 7840U, Fedora 39, Node.js 21.6.\n\n\n## Security\n\n*See a good article about random generators theory:\n[Secure random values (in Node.js)]*\n\n* **Unpredictability.** Instead of using the unsafe `Math.random()`, Nano ID\n  uses the `crypto` module in Node.js and\u00a0the\u00a0Web\u00a0Crypto\u00a0API\u00a0in\u00a0browsers.\n  These modules use unpredictable hardware random generator.\n* **Uniformity.** `random % alphabet` is a popular mistake to make when coding\n  an ID generator. The distribution will not be even; there\u00a0will be\u00a0a\u00a0lower\n  chance for some symbols to appear compared to others. So, it will reduce\n  the number of tries when\u00a0brute-forcing. Nano ID uses a [better algorithm]\n  and is tested for uniformity.\n\n  <img src=\"img/distribution.png\" alt=\"Nano ID uniformity\"\n     width=\"340\" height=\"135\">\n\n* **Well-documented:** all Nano ID hacks are documented. See comments\n  in [the source].\n* **Vulnerabilities:** to report a security vulnerability, please use\n  the [Tidelift security contact](https://tidelift.com/security).\n  Tidelift\u00a0will\u00a0coordinate\u00a0the\u00a0fix\u00a0and\u00a0disclosure.\n\n[Secure random values (in Node.js)]: https://gist.github.com/joepie91/7105003c3b26e65efcea63f3db82dfba\n[better algorithm]:                  https://github.com/ai/nanoid/blob/main/index.js\n[the source]:                        https://github.com/ai/nanoid/blob/main/index.js\n\n\n## Install\n\n### ESM\n\nNano ID 5 works with ESM projects (with `import`) in tests or Node.js scripts.\n\n```bash\nnpm install nanoid\n```\n\n### CommonJS\n\nNano ID can be used with CommonJS in one of the following ways:\n\n- You can use `require()` to import Nano ID. You need to use latest Node.js\n  22.12 (works out-of-the-box) or Node.js 20\n  (with `--experimental-require-module`).\n\n- For Node.js 18 you can dynamically import Nano ID as follows:\n\n  ```js\n  let nanoid\n  module.exports.createID = async () => {\n    if (!nanoid) ({ nanoid } = await import('nanoid'))\n    return nanoid() // => \"V1StGXR8_Z5jdHi6B-myT\"\n  }\n  ```\n\n- You can use Nano ID 3.x (we still support it):\n\n  ```bash\n  npm install nanoid@3\n  ```\n\n### CDN\n\nFor quick hacks, you can load Nano ID from CDN. Though, it is not recommended\nto be used in production because of the lower loading performance.\n\n```js\nimport { nanoid } from 'https://cdn.jsdelivr.net/npm/nanoid/nanoid.js'\n```\n\n## API\n\nNano ID has 2 APIs: normal and non-secure.\n\nBy default, Nano ID uses URL-friendly symbols (`A-Za-z0-9_-`) and returns an ID\nwith 21 characters (to\u00a0have\u00a0a\u00a0collision\u00a0probability\u00a0similar to\u00a0UUID v4).\n\n\n### Blocking\n\nThe safe and easiest way to use Nano ID.\n\nIn rare cases could block CPU from other work while noise collection\nfor hardware random generator.\n\n```js\nimport { nanoid } from 'nanoid'\nmodel.id = nanoid() //=> \"V1StGXR8_Z5jdHi6B-myT\"\n```\n\nIf you want to reduce the ID size (and increase collisions probability),\nyou can pass the size as\u00a0an\u00a0argument.\n\n```js\nnanoid(10) //=> \"IRFa-VaY2b\"\n```\n\nDon\u2019t forget to check the\u00a0safety of your ID size\nin our [ID collision probability] calculator.\n\nYou can also use a [custom alphabet](#custom-alphabet-or-size)\nor a [random generator](#custom-random-bytes-generator).\n\n[ID collision probability]: https://zelark.github.io/nano-id-cc/\n\n\n### Non-Secure\n\nBy default, Nano ID uses hardware random bytes generation for security\nand low collision probability. If you are not so concerned with security,\nyou can use it for environments without hardware random generators.\n\n```js\nimport { nanoid } from 'nanoid/non-secure'\nconst id = nanoid() //=> \"Uakgb_J5m9g-0JDMbcJqLJ\"\n```\n\n\n### Custom Alphabet or Size\n\n`customAlphabet` returns a function that allows you to create `nanoid`\nwith your own alphabet and ID size.\n\n```js\nimport { customAlphabet } from 'nanoid'\nconst nanoid = customAlphabet('1234567890abcdef', 10)\nmodel.id = nanoid() //=> \"4f90d13a42\"\n```\n\n```js\nimport { customAlphabet } from 'nanoid/non-secure'\nconst nanoid = customAlphabet('1234567890abcdef', 10)\nuser.id = nanoid()\n```\n\nCheck the\u00a0safety of your custom alphabet and ID size in our\n[ID collision probability] calculator. For\u00a0more\u00a0alphabets,\u00a0check\u00a0out\u00a0the\u00a0options\nin\u00a0[`nanoid-dictionary`].\n\nAlphabet must contain 256 symbols or less.\nOtherwise, the security of the internal generator algorithm is not guaranteed.\n\nIn addition to setting a default size, you can change the ID size when calling\nthe function:\n\n```js\nimport { customAlphabet } from 'nanoid'\nconst nanoid = customAlphabet('1234567890abcdef', 10)\nmodel.id = nanoid(5) //=> \"f01a2\"\n```\n\n[ID collision probability]: https://alex7kom.github.io/nano-nanoid-cc/\n[`nanoid-dictionary`]:      https://github.com/CyberAP/nanoid-dictionary\n\n\n### Custom Random Bytes Generator\n\n`customRandom` allows you to create a `nanoid` and replace alphabet\nand the default random bytes generator.\n\nIn\u00a0this\u00a0example,\u00a0a\u00a0seed-based\u00a0generator is used:\n\n```js\nimport { customRandom } from 'nanoid'\n\nconst rng = seedrandom(seed)\nconst nanoid = customRandom('abcdef', 10, size => {\n  return (new Uint8Array(size)).map(() => 256 * rng())\n})\n\nnanoid() //=> \"fbaefaadeb\"\n```\n\n`random` callback must accept the array size and return an array\nwith random numbers.\n\nIf you want to use the same URL-friendly symbols with `customRandom`,\nyou can get the default alphabet using\u00a0the\u00a0`urlAlphabet`.\n\n```js\nconst { customRandom, urlAlphabet } = require('nanoid')\nconst nanoid = customRandom(urlAlphabet, 10, random)\n```\n\nNote, that between Nano ID versions we may change random generator\ncall sequence. If you are using seed-based generators, we do not guarantee\nthe same result.\n\n\n## Usage\n\n### React\n\nThere\u2019s no correct way to use Nano ID for React `key` prop\nsince it should be consistent among renders.\n\n```jsx\nfunction Todos({todos}) {\n  return (\n    <ul>\n      {todos.map(todo => (\n        <li key={nanoid()}> /* DON\u2019T DO IT */\n          {todo.text}\n        </li>\n      ))}\n    </ul>\n  )\n}\n```\n\nYou should rather try to reach for stable ID inside your list item.\n\n```jsx\nconst todoItems = todos.map((todo) =>\n  <li key={todo.id}>\n    {todo.text}\n  </li>\n)\n```\n\nIn case you don\u2019t have stable IDs you'd rather use index as `key`\ninstead of `nanoid()`:\n\n```jsx\nconst todoItems = todos.map((text, index) =>\n  <li key={index}> /* Still not recommended but preferred over nanoid().\n                      Only do this if items have no stable IDs. */\n    {text}\n  </li>\n)\n```\n\nIn case you just need random IDs to link elements like labels\nand input fields together, [`useId`] is recommended.\nThat hook was added in React 18.\n\n[`useId`]: https://reactjs.org/docs/hooks-reference.html#useid\n\n\n### React Native\n\nReact Native does not have built-in random generator. The following polyfill\nworks for plain React Native and Expo starting with `39.x`.\n\n1. Check [`react-native-get-random-values`] docs and install it.\n2. Import it before Nano ID.\n\n```js\nimport 'react-native-get-random-values'\nimport { nanoid } from 'nanoid'\n```\n\n[`react-native-get-random-values`]: https://github.com/LinusU/react-native-get-random-values\n\n\n### PouchDB and CouchDB\n\nIn PouchDB and CouchDB, IDs can\u2019t start with an underscore `_`.\nA prefix is required to prevent this issue, as Nano ID might use a `_`\nat the start of the ID by default.\n\nOverride the default ID with the following option:\n\n```js\ndb.put({\n  _id: 'id' + nanoid(),\n  \u2026\n})\n```\n\n\n### Web Workers\n\nWeb Workers do not have access to a secure random generator.\n\nSecurity is important in IDs when IDs should be unpredictable.\nFor instance, in \"access by URL\" link generation.\nIf you do not need unpredictable IDs, but you need to use Web Workers,\nyou\u00a0can use the non\u2011secure\u00a0ID\u00a0generator.\n\n```js\nimport { nanoid } from 'nanoid/non-secure'\nnanoid() //=> \"Uakgb_J5m9g-0JDMbcJqLJ\"\n```\n\nNote: non-secure IDs are more prone to collision attacks.\n\n\n### CLI\n\nYou can get unique ID in terminal by calling `npx nanoid`. You need only\nNode.js in the system. You do not need Nano ID to be installed anywhere.\n\n```sh\n$ npx nanoid\nnpx: installed 1 in 0.63s\nLZfXLFzPPR4NNrgjlWDxn\n```\n\nSize of generated ID can be specified with `--size` (or `-s`) option:\n\n```sh\n$ npx nanoid --size 10\nL3til0JS4z\n```\n\nCustom alphabet can be specified with `--alphabet` (or `-a`) option\n(note that in this case `--size` is required):\n\n```sh\n$ npx nanoid --alphabet abc --size 15\nbccbcabaabaccab\n```\n\n\n### Other Programming Languages\n\nNano ID was ported to many languages. You can use these ports to have\nthe same ID generator on the client and server side.\n\n* [C](https://github.com/lukateras/nanoid.h)\n* [C#](https://github.com/codeyu/nanoid-net)\n* [C++](https://github.com/mcmikecreations/nanoid_cpp)\n* [Clojure and ClojureScript](https://github.com/zelark/nano-id)\n* [ColdFusion/CFML](https://github.com/JamoCA/cfml-nanoid)\n* [Crystal](https://github.com/mamantoha/nanoid.cr)\n* [Dart & Flutter](https://github.com/pd4d10/nanoid-dart)\n* [Deno](https://github.com/ianfabs/nanoid)\n* [Elixir](https://github.com/railsmechanic/nanoid)\n* [Gleam](https://github.com/0xca551e/glanoid)\n* [Go](https://github.com/matoous/go-nanoid)\n* [Haskell](https://github.com/MichelBoucey/NanoID)\n* [Haxe](https://github.com/flashultra/uuid)\n* [Janet](https://sr.ht/~statianzo/janet-nanoid/)\n* [Java](https://github.com/Soundicly/jnanoid-enhanced)\n* [Kotlin](https://github.com/viascom/nanoid-kotlin)\n* [MySQL/MariaDB](https://github.com/viascom/nanoid-mysql-mariadb)\n* [Nim](https://github.com/icyphox/nanoid.nim)\n* [OCaml](https://github.com/routineco/ocaml-nanoid)\n* [Perl](https://github.com/tkzwtks/Nanoid-perl)\n* [PHP](https://github.com/hidehalo/nanoid-php)\n* Python [native](https://github.com/puyuan/py-nanoid) implementation\n  with [dictionaries](https://pypi.org/project/nanoid-dictionary)\n  and [fast](https://github.com/oliverlambson/fastnanoid) implementation (written in Rust)\n* Postgres [Extension](https://github.com/spa5k/uids-postgres)\n  and [Native Function](https://github.com/viascom/nanoid-postgres)\n* [R](https://github.com/hrbrmstr/nanoid) (with dictionaries)\n* [Ruby](https://github.com/radeno/nanoid.rb)\n* [Rust](https://github.com/nikolay-govorov/nanoid)\n* [Swift](https://github.com/antiflasher/NanoID)\n* [Unison](https://share.unison-lang.org/latest/namespaces/hojberg/nanoid)\n* [V](https://github.com/invipal/nanoid)\n* [Zig](https://github.com/SasLuca/zig-nanoid)\n\nFor other environments, [CLI] is available to generate IDs from a command line.\n\n[CLI]: #cli\n\n\n## Tools\n\n* [ID size calculator] shows collision probability when adjusting\n  the ID alphabet or size.\n* [`nanoid-dictionary`] with popular alphabets to use with [`customAlphabet`].\n* [`nanoid-good`] to be sure that your ID doesn\u2019t contain any obscene words.\n\n[`nanoid-dictionary`]: https://github.com/CyberAP/nanoid-dictionary\n[ID size calculator]:  https://zelark.github.io/nano-id-cc/\n[`customAlphabet`]:    #custom-alphabet-or-size\n[`nanoid-good`]:       https://github.com/y-gagar1n/nanoid-good\n",
        "releases": [
            {
                "name": "5.0.9",
                "date": "2024-11-26T11:59:45Z"
            },
            {
                "name": "5.0.8",
                "date": "2024-10-28T11:29:09Z"
            },
            {
                "name": "5.0.7",
                "date": "2024-04-07T16:44:02Z"
            },
            {
                "name": "5.0.6",
                "date": "2024-02-20T13:56:49Z"
            },
            {
                "name": "3.0 Migration Guide",
                "date": "2020-03-26T22:32:53Z"
            }
        ]
    }
}