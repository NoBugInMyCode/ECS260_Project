{
    "https://api.github.com/repos/inorganik/countUp.js": {
        "forks": 1376,
        "watchers": 8058,
        "stars": 8058,
        "languages": {
            "TypeScript": 19466,
            "HTML": 6950,
            "JavaScript": 1608
        },
        "commits": [
            "2025-01-15T13:20:48Z",
            "2024-09-24T11:29:20Z",
            "2024-07-13T22:29:47Z",
            "2024-06-18T12:05:13Z",
            "2024-06-18T12:04:59Z",
            "2024-04-18T16:34:20Z",
            "2024-02-21T14:18:56Z",
            "2024-02-21T14:18:40Z",
            "2023-08-25T16:53:11Z",
            "2023-08-25T15:46:16Z",
            "2023-08-15T12:46:59Z",
            "2023-08-15T12:46:44Z",
            "2023-08-15T12:44:37Z",
            "2023-08-02T16:13:56Z",
            "2023-06-28T17:04:47Z",
            "2023-06-28T17:03:18Z",
            "2023-05-01T20:42:36Z",
            "2023-04-30T14:51:14Z",
            "2023-04-28T21:31:55Z",
            "2023-03-13T22:08:01Z",
            "2023-03-01T20:37:49Z",
            "2023-01-28T17:54:41Z",
            "2023-01-28T17:46:03Z",
            "2023-01-26T19:05:01Z",
            "2023-01-26T13:55:04Z",
            "2023-01-24T13:06:54Z",
            "2023-01-15T14:45:20Z",
            "2022-12-15T21:34:23Z",
            "2022-12-15T21:32:21Z",
            "2022-11-24T13:33:28Z"
        ],
        "creation_date": "2013-12-30T21:20:24Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 140,
        "readme": "# CountUp.js\nCountUp.js is a dependency-free, lightweight Javascript class that can be used to quickly create animations that display numerical data in a more interesting way.\n\nDespite its name, CountUp can count in either direction, depending on the start and end values that you pass.\n\nCountUp.js supports all browsers. MIT license.\n\n## [Try the demo](https://inorganik.github.io/countUp.js)\n\nOr tinker with CountUp in [Stackblitz](https://stackblitz.com/edit/countup-typescript)\n\n## Jump to:\n\n- **[Usage](#usage)**\n- **[Including CountUp](#including-countup)**\n- **[Contributing](#contributing)**\n- **[Creating Animation Plugins](#creating-animation-plugins)**\n\n## Features\n- **Animate when element scrolls into view.** Use option `enableScrollSpy`.\n- **Highly customizeable** with a large range of options, you can even substitute numerals.\n- **Smart easing**: CountUp intelligently defers easing until it gets close enough to the end value for easing to be visually noticeable. Configureable in the [options](#options).\n- **Plugins** allow for alternate animations like the [Odometer plugin](https://www.npmjs.com/package/odometer_countup)\n\n![Odomoeter plugin](./demo/images/odometer_plugin.gif)\n\n## Usage:\n\n**Use CountUp with:**\n\n- [Angular 2+](https://github.com/inorganik/ngx-countUp)\n- [Angular 1.x](https://github.com/inorganik/countUp.js-angular1)\n- [React](https://gist.github.com/inorganik/2cf776865a4c65c12857027870e9898e)\n- [Svelte](https://gist.github.com/inorganik/85a66941ab88cc10c5fa5b26aead5f2a)\n- [Vue](https://github.com/xlsdg/vue-countup-v2)\n- [WordPress](https://wordpress.org/plugins/countup-js/)\n- [jQuery](https://gist.github.com/inorganik/b63dbe5b3810ff2c0175aee4670a4732)\n\n**Use CountUp directly:**\n\nOn npm as `countup.js`. You can import as a module, or include the UMD script and access CountUp as a global. See [detailed instructions](#including-countup) on including CountUp.\n\n**Params**:\n- `target: string | HTMLElement | HTMLInputElement` - id of html element, input, svg text element, or DOM element reference where counting occurs\n- `endVal: number` - the value you want to arrive at\n- `options?: CountUpOptions` - optional configuration object for fine-grain control\n\n**Options** (defaults in parentheses): <a name=\"options\"></a>\n\n```ts\ninterface CountUpOptions {\n  startVal?: number; // number to start at (0)\n  decimalPlaces?: number; // number of decimal places (0)\n  duration?: number; // animation duration in seconds (2)\n  useGrouping?: boolean; // example: 1,000 vs 1000 (true)\n  useIndianSeparators?: boolean; // example: 1,00,000 vs 100,000 (false)\n  useEasing?: boolean; // ease animation (true)\n  smartEasingThreshold?: number; // smooth easing for large numbers above this if useEasing (999)\n  smartEasingAmount?: number; // amount to be eased for numbers above threshold (333)\n  separator?: string; // grouping separator (',')\n  decimal?: string; // decimal ('.')\n  // easingFn: easing function for animation (easeOutExpo)\n  easingFn?: (t: number, b: number, c: number, d: number) => number;\n  formattingFn?: (n: number) => string; // this function formats result\n  prefix?: string; // text prepended to result\n  suffix?: string; // text appended to result\n  numerals?: string[]; // numeral glyph substitution\n  enableScrollSpy?: boolean; // start animation when target is in view\n  scrollSpyDelay?: number; // delay (ms) after target comes into view\n  scrollSpyOnce?: boolean; // run only once\n  onCompleteCallback?: () => any; // gets called when animation completes\n  onStartCallback?: () => any; // gets called when animation starts\n  plugin?: CountUpPlugin; // for alternate animations\n}\n```\n\n**Example usage**: <a name=\"example\"></a>\n\n```js\nconst countUp = new CountUp('targetId', 5234);\nif (!countUp.error) {\n  countUp.start();\n} else {\n  console.error(countUp.error);\n}\n```\n\nPass options:\n```js\nconst countUp = new CountUp('targetId', 5234, options);\n```\n\nwith optional complete callback:\n\n```js\nconst countUp = new CountUp('targetId', 5234, { onCompleteCallback: someMethod });\n\n// or (passing fn to start will override options.onCompleteCallback)\ncountUp.start(someMethod);\n\n// or\ncountUp.start(() => console.log('Complete!'));\n```\n\n**Other methods**:\n\nToggle pause/resume:\n\n```js\ncountUp.pauseResume();\n```\n\nReset the animation:\n\n```js\ncountUp.reset();\n```\n\nUpdate the end value and animate:\n\n```js\ncountUp.update(989);\n```\n\n---\n### **Animate when the element is scrolled into view**\n\nUse the scroll spy option to animate when the element is scrolled into view. When using scroll spy, just initialize CountUp but do not call start();\n\n```js\nconst countUp = new CountUp('targetId', 989, { enableScrollSpy: true });\n```\n\n**Troubleshooting scroll spy**\n\nCountUp checks the scroll position as soon as it's initialized. So if you initialize it before the DOM renders and your target element is in view before any scrolling, you'll need to re-check the scroll position after the page renders:\n\n```js\n// after DOM has rendered\ncountUp.handleScroll();\n```\n---\n### **Alternate animations with plugins**\n\nCurrently there's just one plugin, the **[Odometer Plugin](https://github.com/msoler75/odometer_countup.js)**.\n\nTo use a plugin, you'll need to first install the plugin package. Then you can include it and use the plugin option. See each plugin's docs for more detailed info.\n```js\nconst countUp = new CountUp('targetId', 5234, {\n  plugin: new Odometer({ duration: 2.3, lastDigitDelay: 0 }),\n  duration: 3.0\n});\n```\nIf you'd like to make your own plugin, see [the docs](#creating-animation-plugins) below!\n\n---\n\n## Including CountUp\n\nCountUp is distributed as an ES6 module because it is the most standardized and most widely compatible module for browsers, though a UMD module is [also included](#umd-module), along with a separate requestAnimationFrame polyfill (see below).\n\nFor the examples below, first install CountUp. This will give you the latest:\n```\nnpm i countup.js\n```\n\n### Example with vanilla js\nThis is what I used in the demo. Checkout index.html and demo.js.\n\nmain.js:\n```js\nimport { CountUp } from './js/countUp.min.js';\n\nwindow.onload = function() {\n  var countUp = new CountUp('target', 2000);\n  countUp.start();\n}\n```\n\nInclude in your html. Notice the `type` attribute:\n```html\n<script src=\"./main.js\" type=\"module\"></script>\n```\n\nTo support IE and legacy browsers, use the `nomodule` script tag to include separate scripts that don't use the module syntax:\n\n```html\n<script nomodule src=\"js/countUp.umd.js\"></script>\n<script nomodule src=\"js/main-for-legacy.js\"></script>\n```\n\nTo run module-enabled scripts locally, you'll need a simple local server setup like [this](https://www.npmjs.com/package/http-server) (test the demo locally by running `npm run serve`) because otherwise you may see a CORS error when your browser tries to load the script as a module.\n\n### For Webpack and other build systems\nImport from the package, instead of the file location:\n\n```js\nimport { CountUp } from 'countup.js';\n```\n\n### UMD module\n\nCountUp is also wrapped as a UMD module in `./dist/countUp.umd.js` and it exposes CountUp as a global variable on the window scope. To use it, include `countUp.umd.js` in a script tag, and invoke it like so:\n\n```js\nvar numAnim = new countUp.CountUp('myTarget', 2000);\nnumAnim.start()\n```\n\n### requestAnimationFrame polyfill\n\nYou can include `dist/requestAnimationFrame.polyfill.js` if you want to support IE9 and older, and Opera mini.\n\n---\n\n## Contributing\n\nBefore you make a pull request, please be sure to follow these instructions:\n\n1. Do your work on `src/countUp.ts`\n1. Lint: `npm run lint`\n1. Run tests: `npm t`\n1. Build and serve the demo by running `npm start` then check the demo to make sure it counts.\n\n<!-- PUBLISHING\n\n1. bump version in package.json and countUp.ts\n2. npm run build\n3. commit changes\n4. npm publish\n\n-->\n\n---\n\n## Creating Animation Plugins\n\nCountUp supports plugins as of v2.6.0. Plugins implement their own render method to display each frame's formatted value. A class instance or object can be passed to the `plugin` property of CountUpOptions, and the plugin's render method will be called instead of CountUp's.\n\n```ts\nexport declare interface CountUpPlugin {\n  render(elem: HTMLElement, formatted: string): void;\n}\n```\n\nAn example of a plugin:\n```ts\nexport class SomePlugin implements CountUpPlugin {\n  // ...some properties here\n\n  constructor(options: SomePluginOptions) {\n    // ...setup code here if you need it\n  }\n\n  render(elem: HTMLElement, formatted: string): void {\n    // render DOM here\n  }\n}\n```\n\nIf you make a plugin, be sure to create a PR to add it to this README!\n",
        "releases": [
            {
                "name": "2.8.0",
                "date": "2023-08-25T16:56:45Z"
            },
            {
                "name": "2.7.0",
                "date": "2023-06-28T17:10:45Z"
            },
            {
                "name": "2.6.2",
                "date": "2023-05-01T20:48:19Z"
            },
            {
                "name": "2.6.1",
                "date": "2023-04-30T14:55:52Z"
            },
            {
                "name": "2.6.0",
                "date": "2023-03-13T22:12:13Z"
            },
            {
                "name": "v2.5.0",
                "date": "2023-03-01T20:43:33Z"
            },
            {
                "name": "2.4.2",
                "date": "2023-01-28T17:58:15Z"
            },
            {
                "name": "2.4.1",
                "date": "2023-01-24T13:14:51Z"
            },
            {
                "name": "2.3.2",
                "date": "2022-07-08T12:43:55Z"
            },
            {
                "name": "2.3.1",
                "date": "2022-06-29T19:51:43Z"
            },
            {
                "name": "2.3.0",
                "date": "2022-06-27T15:43:51Z"
            },
            {
                "name": "2.2.0",
                "date": "2022-05-18T22:09:21Z"
            },
            {
                "name": "2.1.0",
                "date": "2022-03-02T19:55:11Z"
            },
            {
                "name": "2.0.8",
                "date": "2021-07-27T20:09:46Z"
            },
            {
                "name": "2.0.7",
                "date": "2020-08-25T12:52:58Z"
            },
            {
                "name": "2.0.6",
                "date": "2020-08-08T12:40:58Z"
            },
            {
                "name": "2.0.4",
                "date": "2019-08-02T15:12:13Z"
            },
            {
                "name": "2.0.3",
                "date": "2019-03-05T13:42:58Z"
            },
            {
                "name": "2.0.2",
                "date": "2019-03-01T16:47:57Z"
            },
            {
                "name": "2.0.1",
                "date": "2019-02-26T15:41:40Z"
            },
            {
                "name": "2.0.0",
                "date": "2019-02-21T20:45:46Z"
            },
            {
                "name": "v1.9.3",
                "date": "2017-11-07T17:21:47Z"
            },
            {
                "name": "v1.9.2",
                "date": "2017-09-08T14:52:54Z"
            },
            {
                "name": "v1.9.1",
                "date": "2017-08-24T18:37:31Z"
            },
            {
                "name": "v1.9.0",
                "date": "2017-08-23T23:05:59Z"
            },
            {
                "name": "v1.8.5",
                "date": "2017-04-25T23:20:49Z"
            },
            {
                "name": "v1.8.4",
                "date": "2017-04-18T14:45:19Z"
            },
            {
                "name": "v1.8.3",
                "date": "2017-03-16T16:06:54Z"
            },
            {
                "name": "v1.8.2",
                "date": "2017-03-02T15:58:18Z"
            },
            {
                "name": "v1.8.1",
                "date": "2016-12-28T21:22:02Z"
            },
            {
                "name": "v1.8.0",
                "date": "2016-12-12T16:32:42Z"
            },
            {
                "name": "v1.7.1",
                "date": "2016-04-23T00:04:57Z"
            },
            {
                "name": "v1.7.0",
                "date": "2016-04-08T14:39:44Z"
            },
            {
                "name": "v1.6.1",
                "date": "2016-02-01T23:44:19Z"
            },
            {
                "name": "v1.6.0",
                "date": "2015-09-25T20:38:11Z"
            },
            {
                "name": "v 1.5.3",
                "date": "2015-06-16T13:02:58Z"
            },
            {
                "name": "v 1.5.0",
                "date": "2015-05-18T16:29:47Z"
            },
            {
                "name": "v 1.4.0",
                "date": "2015-05-08T16:18:47Z"
            },
            {
                "name": "v 1.3.3",
                "date": "2015-03-24T23:34:56Z"
            },
            {
                "name": "v1.3.2",
                "date": "2014-12-04T20:44:35Z"
            },
            {
                "name": "v1.3.1",
                "date": "2014-09-01T15:33:46Z"
            },
            {
                "name": "v1.3.0",
                "date": "2014-08-22T14:16:43Z"
            },
            {
                "name": "v1.2.0",
                "date": "2014-08-18T13:57:27Z"
            },
            {
                "name": "v1.1.1",
                "date": "2014-05-13T22:38:03Z"
            },
            {
                "name": "v1.1.0 - Globalization",
                "date": "2014-02-21T22:23:44Z"
            },
            {
                "name": "v 1.0.3",
                "date": "2014-02-07T20:28:37Z"
            },
            {
                "name": "v 1.0.2",
                "date": "2014-02-04T18:41:19Z"
            },
            {
                "name": "v 1.0.1",
                "date": "2014-01-30T18:11:54Z"
            },
            {
                "name": "Initial production version",
                "date": "2014-01-23T17:02:38Z"
            }
        ]
    }
}