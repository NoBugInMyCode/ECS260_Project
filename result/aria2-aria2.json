{
    "https://api.github.com/repos/aria2/aria2": {
        "forks": 3642,
        "watchers": 36492,
        "stars": 36492,
        "languages": {
            "C++": 5666032,
            "C": 219834,
            "M4": 62577,
            "Makefile": 47782,
            "Shell": 14736,
            "Dockerfile": 4591
        },
        "commits": [
            "2024-06-30T12:47:36Z",
            "2024-06-30T12:40:13Z",
            "2024-06-30T12:24:45Z",
            "2024-06-30T11:54:23Z",
            "2024-06-30T08:52:32Z",
            "2024-06-30T08:47:48Z",
            "2024-06-30T06:15:39Z",
            "2024-06-30T01:00:30Z",
            "2024-06-30T01:00:07Z",
            "2024-06-30T08:27:18Z",
            "2024-06-30T07:48:08Z",
            "2024-06-30T07:17:29Z",
            "2024-06-24T09:23:39Z",
            "2024-06-24T06:37:27Z",
            "2024-06-10T11:21:53Z",
            "2024-06-10T10:13:52Z",
            "2024-06-10T10:13:06Z",
            "2024-06-10T09:51:35Z",
            "2024-06-10T08:53:53Z",
            "2024-06-10T08:45:55Z",
            "2024-01-24T12:20:55Z",
            "2024-01-24T10:41:05Z",
            "2024-01-24T11:15:45Z",
            "2024-01-24T10:49:17Z",
            "2024-01-15T08:28:19Z",
            "2024-01-14T16:22:28Z",
            "2024-01-07T07:23:48Z",
            "2024-01-07T02:43:30Z",
            "2023-11-15T12:09:36Z",
            "2023-11-15T12:08:57Z"
        ],
        "creation_date": "2010-11-27T09:41:48Z",
        "contributors": 30,
        "topics": [
            "bittorrent",
            "cpp11",
            "download",
            "ftp",
            "http",
            "metalink",
            "rpc",
            "sftp"
        ],
        "subscribers": 744,
        "readme": "aria2 - The ultra fast download utility\n=======================================\n\nDisclaimer\n----------\nThis program comes with no warranty.\nYou must use this program at your own risk.\n\nIntroduction\n------------\n\naria2 is a utility for downloading files. The supported protocols are\nHTTP(S), FTP, SFTP, BitTorrent, and Metalink. aria2 can download a\nfile from multiple sources/protocols and tries to utilize your maximum\ndownload bandwidth. It supports downloading a file from\nHTTP(S)/FTP/SFTP and BitTorrent at the same time, while the data\ndownloaded from HTTP(S)/FTP/SFTP is uploaded to the BitTorrent\nswarm. Using Metalink's chunk checksums, aria2 automatically validates\nchunks of data while downloading a file like BitTorrent.\n\nThe project page is located at https://aria2.github.io/.\n\nSee the `aria2 Online Manual\n<https://aria2.github.io/manual/en/html/>`_ (`Russian translation\n<https://aria2.github.io/manual/ru/html/>`_, `Portuguese\ntranslation <https://aria2.github.io/manual/pt/html/>`_) to learn\nhow to use aria2.\n\nFeatures\n--------\n\nHere is a list of features:\n\n* Command-line interface\n* Download files through HTTP(S)/FTP/SFTP/BitTorrent\n* Segmented downloading\n* Metalink version 4 (RFC 5854) support(HTTP/FTP/SFTP/BitTorrent)\n* Metalink version 3.0 support(HTTP/FTP/SFTP/BitTorrent)\n* Metalink/HTTP (RFC 6249) support\n* HTTP/1.1 implementation\n* HTTP Proxy support\n* HTTP BASIC authentication support\n* HTTP Proxy authentication support\n* Well-known environment variables for proxy: ``http_proxy``,\n  ``https_proxy``, ``ftp_proxy``, ``all_proxy`` and ``no_proxy``\n* HTTP gzip, deflate content encoding support\n* Verify peer using given trusted CA certificate in HTTPS\n* Client certificate authentication in HTTPS\n* Chunked transfer encoding support\n* Load Cookies from the file using the Firefox3 format, Chromium/Google Chrome\n  and the Mozilla/Firefox\n  (1.x/2.x)/Netscape format.\n* Save Cookies in the Mozilla/Firefox (1.x/2.x)/Netscape format.\n* Custom HTTP Header support\n* Persistent Connections support\n* FTP/SFTP through HTTP Proxy\n* Download/Upload speed throttling\n* BitTorrent extensions: Fast extension, DHT, PEX, MSE/PSE,\n  Multi-Tracker, UDP tracker\n* BitTorrent `WEB-Seeding <http://getright.com/seedtorrent.html>`_.\n  aria2 requests chunk more than piece size to reduce the request\n  overhead. It also supports pipelined requests with piece size.\n* BitTorrent Local Peer Discovery\n* Rename/change the directory structure of BitTorrent downloads\n  completely\n* JSON-RPC (over HTTP and WebSocket)/XML-RPC interface\n* Run as a daemon process\n* Selective download in multi-file torrent/Metalink\n* Chunk checksum validation in Metalink\n* Can disable segmented downloading in Metalink\n* Netrc support\n* Configuration file support\n* Download URIs found in a text file or stdin and the destination\n  directory and output file name can be specified optionally\n* Parameterized URI support\n* IPv6 support with Happy Eyeballs\n* Disk cache to reduce disk activity\n\n\nVersioning and release schedule\n-------------------------------\n\nWe use 3 numbers for the aria2 version: MAJOR.MINOR.PATCH.  We will ship\nMINOR updates on the 15th of every month.  We may skip a release if we have\nhad no changes since the last release.  The feature and documentation\nfreeze happens 10 days before the release day (the 5th day of the month)\nfor translation teams.  We will raise an issue about the upcoming\nrelease around that day.\n\nWe may release PATCH releases between regular releases if we have\nsecurity issues.\n\nThe MAJOR version will stay at 1 for the time being.\n\nHow to get source code\n----------------------\n\nWe maintain the source code at Github:\nhttps://github.com/aria2/aria2\n\nTo get the latest source code, run the following command::\n\n    $ git clone https://github.com/aria2/aria2.git\n\nThis will create an aria2 directory in your current directory and source\nfiles are stored there.\n\nDependency\n----------\n\n\n======================== ========================================\nfeatures                  dependency\n======================== ========================================\nHTTPS                    OSX or GnuTLS or OpenSSL or Windows\nSFTP                     libssh2\nBitTorrent               None. Optional: libnettle+libgmp or libgcrypt\n                         or OpenSSL (see note)\nMetalink                 libxml2 or Expat.\nChecksum                 None. Optional: OSX or libnettle or libgcrypt\n                         or OpenSSL or Windows (see note)\ngzip, deflate in HTTP    zlib\nAsync DNS                C-Ares\nFirefox3/Chromium cookie libsqlite3\nXML-RPC                  libxml2 or Expat.\nJSON-RPC over WebSocket  libnettle or libgcrypt or OpenSSL\n======================== ========================================\n\n\n.. note::\n\n  libxml2 has precedence over Expat if both libraries are installed.\n  If you prefer Expat, run configure with ``--without-libxml2``.\n\n.. note::\n\n  On Apple OSX, OS-level SSL/TLS support will be preferred. Hence\n  neither GnuTLS nor OpenSSL is required on that platform. If you'd\n  like to disable this behavior, run configure with\n  ``--without-appletls``.\n\n  GnuTLS has precedence over OpenSSL if both libraries are installed.\n  If you prefer OpenSSL, run configure with ``--without-gnutls``\n  ``--with-openssl``.\n\n  On Windows, there is SSL implementation available that is based on\n  the native Windows SSL capabilities (Schannel) and it will be\n  preferred.  Hence neither GnuTLS nor OpenSSL is required on that\n  platform.  If you'd like to disable this behavior, run configure\n  with ``--without-wintls``.\n\n.. note::\n\n  On Apple OSX, the OS-level checksum support will be preferred,\n  unless aria2 is configured with ``--without-appletls``.\n\n  libnettle has precedence over libgcrypt if both libraries are\n  installed.  If you prefer libgcrypt, run configure with\n  ``--without-libnettle --with-libgcrypt``. If OpenSSL is selected over\n  GnuTLS, neither libnettle nor libgcrypt will be used.\n\n  If none of the optional dependencies are installed, an internal\n  implementation that only supports md5 and sha1 will be used.\n\n  On Windows, there is SSL implementation available that is based on\n  the native Windows capabilities and it will be preferred, unless\n  aria2 is configured with ``--without-wintls``.\n\nA user can have one of the following configurations for SSL and crypto\nlibraries:\n\n* OpenSSL\n* GnuTLS + libgcrypt\n* GnuTLS + libnettle\n* Apple TLS (OSX only)\n* Windows TLS (Windows only)\n\nYou can disable BitTorrent and Metalink support by providing\n``--disable-bittorrent`` and ``--disable-metalink`` to the configure\nscript respectively.\n\nTo enable async DNS support, you need c-ares.\n\n* c-ares: http://c-ares.haxx.se/\n\nHow to build\n------------\n\naria2 is primarily written in C++. Initially, it was written based on\nC++98/C++03 standard features. We are now migrating aria2 to the C++11\nstandard. The current source code requires a C++11 aware compiler. For\nwell-known compilers, such as g++ and clang, the ``-std=c++11`` or\n``-std=c++0x`` flag must be supported.\n\nTo build aria2 from the source package, you need the following\ndevelopment packages (package name may vary depending on the\ndistribution you use):\n\n* libgnutls-dev    (Required for HTTPS, BitTorrent, Checksum support)\n* nettle-dev       (Required for BitTorrent, Checksum support)\n* libgmp-dev       (Required for BitTorrent)\n* libssh2-1-dev    (Required for SFTP support)\n* libc-ares-dev    (Required for async DNS support)\n* libxml2-dev      (Required for Metalink support)\n* zlib1g-dev       (Required for gzip, deflate decoding support in HTTP)\n* libsqlite3-dev   (Required for Firefox3/Chromium cookie support)\n* pkg-config       (Required to detect installed libraries)\n\nYou can use libgcrypt-dev instead of nettle-dev and libgmp-dev:\n\n* libgpg-error-dev (Required for BitTorrent, Checksum support)\n* libgcrypt-dev    (Required for BitTorrent, Checksum support)\n\nYou can use libssl-dev instead of\nlibgnutls-dev, nettle-dev, libgmp-dev, libgpg-error-dev and libgcrypt-dev:\n\n* libssl-dev       (Required for HTTPS, BitTorrent, Checksum support)\n\nYou can use libexpat1-dev instead of libxml2-dev:\n\n* libexpat1-dev    (Required for Metalink support)\n\nOn Fedora you need the following packages: gcc, gcc-c++, kernel-devel,\nlibgcrypt-devel, libxml2-devel, openssl-devel, gettext-devel, cppunit\n\nIf you downloaded source code from a git repository, you have to install\nthe following packages to get autoconf macros:\n\n* libxml2-dev\n* libcppunit-dev\n* autoconf\n* automake\n* autotools-dev\n* autopoint\n* libtool\n\nAnd run the following command to generate configure script and other files\nnecessary to build the program::\n\n    $ autoreconf -i\n\nAlso, you need `Sphinx <http://sphinx-doc.org/>`_ to build the man page.\n\nIf you are building aria2 for Mac OS X, take a look at\nthe makerelease-osx.mk GNU Make makefile.\n\nThe quickest way to build aria2 is first to run configure script::\n\n    $ ./configure\n\nTo build statically linked aria2, use ``ARIA2_STATIC=yes``\ncommand-line option::\n\n    $ ./configure ARIA2_STATIC=yes\n\nAfter configuration is done, run ``make`` to compile the program::\n\n    $ make\n\nSee `Cross-compiling Windows binary`_ to create a Windows binary.\nSee `Cross-compiling Android binary`_ to create an Android binary.\n\nThe configure script checks available libraries and enables as many\nfeatures as possible except for experimental features not enabled by\ndefault.\n\nSince 1.1.0, aria2 checks the certificate of HTTPS servers by default.\nIf you build with OpenSSL or the recent version of GnuTLS which has\n``gnutls_certificate_set_x509_system_trust()`` function and the\nlibrary is properly configured to locate the system-wide CA\ncertificates store, aria2 will automatically load those certificates\nat the startup. If it is not the case, I recommend supplying the path\nto the CA bundle file. For example, in Debian the path to CA bundle\nfile is '/etc/ssl/certs/ca-certificates.crt' (in ca-certificates\npackage). This may vary depending on your distribution. You can give\nit to configure script using ``--with-ca-bundle option``::\n\n    $ ./configure --with-ca-bundle='/etc/ssl/certs/ca-certificates.crt'\n    $ make\n\nWithout ``--with-ca-bundle`` option, you will encounter the error when\naccessing HTTPS servers because the certificate cannot be verified\nwithout the CA bundle. In such a case, you can specify the CA bundle file\nusing aria2's ``--ca-certificate`` option.  If you don't have the CA bundle\nfile installed, then the last resort is to disable the certificate\nvalidation using ``--check-certificate=false``.\n\nUsing the native OSX (AppleTLS) and/or Windows (WinTLS) implementation\nwill automatically use the system certificate store, so\n``--with-ca-bundle`` is not necessary and will be ignored when using\nthese implementations.\n\nBy default, the bash_completion file named ``aria2c`` is installed to\nthe directory ``$prefix/share/doc/aria2/bash_completion``.  To change\nthe install directory of the file, use ``--with-bashcompletiondir``\noption.\n\nAfter a ``make``, the executable is located at ``src/aria2c``.\n\naria2 uses CppUnit for automated unit testing. To run the unit test::\n\n    $ make check\n\nCross-compiling Windows binary\n------------------------------\n\nIn this section, we describe how to build a Windows binary using a\nmingw-w64 (http://mingw-w64.org/doku.php) cross-compiler on Debian\nLinux. The MinGW (http://www.mingw.org/) may not be able to build\naria2.\n\nThe easiest way to build Windows binary is using Dockerfile.mingw.  See\nDockerfile.mingw how to build a binary.  If you cannot use Dockerfile,\nthen continue to read the following paragraphs.\n\nBasically, after compiling and installing depended libraries, you can\ndo cross-compile just passing appropriate ``--host`` option and\nspecifying ``CPPFLAGS``, ``LDFLAGS``, and ``PKG_CONFIG_LIBDIR``\nvariables to configure. For convenience and to lower our own\ndevelopment cost, we provide an easier way to configure the build\nsettings.\n\n``mingw-config`` script is a configure script wrapper for mingw-w64.\nWe use it to create official Windows build.  This script assumes\nthe following libraries have been built for cross-compile:\n\n* c-ares\n* expat\n* sqlite3\n* zlib\n* libssh2\n* cppunit\n\nSome environment variables can be adjusted to change build settings:\n\n``HOST``\n  cross-compile to build programs to run on ``HOST``. It defaults to\n  ``i686-w64-mingw32``. To build a 64bit binary, specify\n  ``x86_64-w64-mingw32``.\n\n``PREFIX``\n  Prefix to the directory where dependent libraries are installed.  It\n  defaults to ``/usr/local/$HOST``. ``-I$PREFIX/include`` will be\n  added to ``CPPFLAGS``. ``-L$PREFIX/lib`` will be added to\n  ``LDFLAGS``. ``$PREFIX/lib/pkgconfig`` will be set to\n  ``PKG_CONFIG_LIBDIR``.\n\nFor example, to build a 64bit binary do this::\n\n    $ HOST=x86_64-w64-mingw32 ./mingw-config\n\nIf you want libaria2 dll with ``--enable-libaria2``, then don't use\n``ARIA2_STATIC=yes`` and prepare the DLL version of external\nlibraries.\n\nCross-compiling Android binary\n------------------------------\n\nIn this section, we describe how to build Android binary using Android\nNDK cross-compiler on Debian Linux.\n\nAt the time of this writing, Android NDK r21e should compile aria2\nwithout errors.\n\n``android-config`` script is a configure script wrapper for Android\nbuild.  We use it to create an official Android build.  This script\nassumes the following libraries have been built for cross-compile:\n\n* c-ares\n* openssl\n* expat\n* zlib\n* libssh2\n\nWhen building the above libraries, make sure that disable shared\nlibrary and enable only static library. We are going to link those\nlibraries statically.\n\n``android-config`` assumes that ``$ANDROID_HOME`` and ``$NDK``\nenvironment variables are defined.\n\nWe currently use Android NDK r21e.  ``$NDK`` should point to the\ndirectory to Android NDK.  The build tools will be found under\n``$NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/``.\n\nAll the dependent libraries must be installed under\n``$ANDROID_HOME/usr/local``.\n\nAfter ``android-config``, run ``make`` to compile sources.\n\nBuilding documentation\n----------------------\n\n`Sphinx <http://sphinx-doc.org/>`_ is used to building the\ndocumentation. aria2 man pages will be build when you run ``make`` if\nthey are not up-to-date.  You can also build an HTML version of the aria2\nman page by ``make html``. The HTML version manual is also available\n`online <https://aria2.github.io/manual/en/html/>`_ (`Russian\ntranslation <https://aria2.github.io/manual/ru/html/>`_, `Portuguese\ntranslation <https://aria2.github.io/manual/pt/html/>`_).\n\nBitTorrent\n-----------\n\nAbout file names\n~~~~~~~~~~~~~~~~\nThe file name of the downloaded file is determined as follows:\n\nsingle-file mode\n    If \"name\" key is present in .torrent file, the file name is the value\n    of \"name\" key. Otherwise, the file name is the base name of .torrent\n    file appended by \".file\". For example, .torrent file is\n    \"test.torrent\", then file name is \"test.torrent.file\".  The\n    directory to store the downloaded file can be specified by -d\n    option.\n\nmulti-file mode\n    The complete directory/file structure mentioned in .torrent file\n    is created.  The directory to store the top directory of\n    downloaded files can be specified by -d option.\n\nBefore download starts, a complete directory structure is created if\nneeded. By default, aria2 opens at most 100 files mentioned in\n.torrent file, and directly writes to and reads from these files.\nThe number of files to open simultaneously can be controlled by\n``--bt-max-open-files`` option.\n\nDHT\n~~~\n\naria2 supports mainline compatible DHT. By default, the routing table\nfor IPv4 DHT is saved to ``$XDG_CACHE_HOME/aria2/dht.dat`` and the\nrouting table for IPv6 DHT is saved to\n``$XDG_CACHE_HOME/aria2/dht6.dat`` unless files exist at\n``$HOME/.aria2/dht.dat`` or ``$HOME/.aria2/dht6.dat``. aria2 uses the\nsame port number to listen on for both IPv4 and IPv6 DHT.\n\nUDP tracker\n~~~~~~~~~~~\n\nUDP tracker support is enabled when IPv4 DHT is enabled.  The port\nnumber of the UDP tracker is shared with DHT. Use ``--dht-listen-port``\noption to change the port number.\n\nOther things should be noted\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* ``-o`` option is used to change the file name of .torrent file itself,\n  not a file name of a file in .torrent file. For this purpose, use\n  ``--index-out`` option instead.\n* The port numbers that aria2 uses by default are 6881-6999 for TCP\n  and UDP.\n* aria2 doesn't configure port-forwarding automatically. Please\n  configure your router or firewall manually.\n* The maximum number of peers is 55. This limit may be exceeded when\n  the download rate is low. This download rate can be adjusted using\n  ``--bt-request-peer-speed-limit`` option.\n* As of release 0.10.0, aria2 stops sending request messages after\n  selective download completes.\n\nMetalink\n--------\n\nThe current implementation supports HTTP(S)/FTP/SFTP/BitTorrent.  The\nother P2P protocols are ignored. Both Metalink4 (RFC 5854) and\nMetalink version 3.0 documents are supported.\n\nFor checksum verification, md5, sha-1, sha-224, sha-256, sha-384, and\nsha-512 are supported. If multiple hash algorithms are provided, aria2\nuses a stronger one. If whole file checksum verification fails, aria2\ndoesn't retry the download and just exits with a non-zero return code.\n\nThe supported user preferences are version, language, location,\nprotocol, and os.\n\nIf chunk checksums are provided in the Metalink file, aria2 automatically\nvalidates chunks of data during download. This behavior can be turned\noff by a command-line option.\n\nIf a signature is included in a Metalink file, aria2 saves it as a file\nafter the completion of the download.  The file name is download\nfile name + \".sig\". If the same file already exists, the signature file is\nnot saved.\n\nIn Metalink4, a multi-file torrent could appear in metalink:metaurl\nelement.  Since aria2 cannot download 2 same torrents at the same\ntime, aria2 groups files in metalink:file element which has the same\nBitTorrent metaurl, and downloads them from a single BitTorrent swarm.\nThis is a basically multi-file torrent download with file selection, so\nthe adjacent files which are not in Metalink document but share the same\npiece with the selected file are also created.\n\nIf relative URI is specified in metalink:url or metalink:metaurl\nelement, aria2 uses the URI of Metalink file as base URI to resolve\nthe relative URI. If relative URI is found in the Metalink file which is\nread from the local disk, aria2 uses the value of ``--metalink-base-uri``\noption as base URI. If this option is not specified, the relative URI\nwill be ignored.\n\nMetalink/HTTP\n-------------\n\nThe current implementation only uses rel=duplicate links.  aria2\nunderstands Digest header fields and check whether it matches the\ndigest value from other sources. If it differs, drop the connection.\naria2 also uses this digest value to perform checksum verification\nafter the download is finished. aria2 recognizes geo value. To tell aria2\nwhich location you prefer, you can use ``--metalink-location`` option.\n\nnetrc\n-----\n\nnetrc support is enabled by default for HTTP(S)/FTP/SFTP.  To disable\nnetrc support, specify -n command-line option.  Your .netrc file\nshould have correct permissions(600).\n\nWebSocket\n---------\n\nThe WebSocket server embedded in aria2 implements the specification\ndefined in RFC 6455. The supported protocol version is 13.\n\nlibaria2\n--------\n\nThe libaria2 is a C++ library that offers aria2 functionality to the\nclient code. Currently, libaria2 is not built by default. To enable\nlibaria2, use ``--enable-libaria2`` configure option.  By default,\nonly the shared library is built. To build a static library, use\n``--enable-static`` configure option as well. See libaria2\ndocumentation to know how to use API.\n\nReferences\n----------\n\n* `aria2 Online Manual <https://aria2.github.io/manual/en/html/>`_\n* https://aria2.github.io/\n* `RFC 959 FILE TRANSFER PROTOCOL (FTP) <http://tools.ietf.org/html/rfc959>`_\n* `RFC 1738 Uniform Resource Locators (URL) <http://tools.ietf.org/html/rfc1738>`_\n* `RFC 2428 FTP Extensions for IPv6 and NATs <http://tools.ietf.org/html/rfc2428>`_\n* `RFC 2616 Hypertext Transfer Protocol -- HTTP/1.1 <http://tools.ietf.org/html/rfc2616>`_\n* `RFC 3659 Extensions to FTP <http://tools.ietf.org/html/rfc3659>`_\n* `RFC 3986 Uniform Resource Identifier (URI): Generic Syntax <http://tools.ietf.org/html/rfc3986>`_\n* `RFC 4038 Application Aspects of IPv6 Transition <http://tools.ietf.org/html/rfc4038>`_\n* `RFC 5854 The Metalink Download Description Format <http://tools.ietf.org/html/rfc5854>`_\n* `RFC 6249 Metalink/HTTP: Mirrors and Hashes <http://tools.ietf.org/html/rfc6249>`_\n* `RFC 6265 HTTP State Management Mechanism <http://tools.ietf.org/html/rfc6265>`_\n* `RFC 6266 Use of the Content-Disposition Header Field in the Hypertext Transfer Protocol (HTTP) <http://tools.ietf.org/html/rfc6266>`_\n* `RFC 6455 The WebSocket Protocol <http://tools.ietf.org/html/rfc6455>`_\n* `RFC 6555 Happy Eyeballs: Success with Dual-Stack Hosts <http://tools.ietf.org/html/rfc6555>`_\n\n* `The BitTorrent Protocol Specification <http://www.bittorrent.org/beps/bep_0003.html>`_\n* `BitTorrent: DHT Protocol <http://www.bittorrent.org/beps/bep_0005.html>`_\n* `BitTorrent: Fast Extension <http://www.bittorrent.org/beps/bep_0006.html>`_\n* `BitTorrent: IPv6 Tracker Extension <http://www.bittorrent.org/beps/bep_0007.html>`_\n* `BitTorrent: Extension for Peers to Send Metadata Files <http://www.bittorrent.org/beps/bep_0009.html>`_\n* `BitTorrent: Extension Protocol <http://www.bittorrent.org/beps/bep_0010.html>`_\n* `BitTorrent: Multitracker Metadata Extension <http://www.bittorrent.org/beps/bep_0012.html>`_\n* `BitTorrent: UDP Tracker Protocol for BitTorrent <http://www.bittorrent.org/beps/bep_0015.html>`_\n  and `BitTorrent udp-tracker protocol specification <http://www.rasterbar.com/products/libtorrent/udp_tracker_protocol.html>`_.\n* `BitTorrent: WebSeed - HTTP/FTP Seeding (GetRight style) <http://www.bittorrent.org/beps/bep_0019.html>`_\n* `BitTorrent: Private Torrents <http://www.bittorrent.org/beps/bep_0027.html>`_\n* `BitTorrent: BitTorrent DHT Extensions for IPv6 <http://www.bittorrent.org/beps/bep_0032.html>`_\n* `BitTorrent: Message Stream Encryption <http://wiki.vuze.com/w/Message_Stream_Encryption>`_\n* `Kademlia: A Peer-to-peer Information System Based on the  XOR Metric <https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf>`_\n",
        "releases": [
            {
                "name": "aria2 1.37.0",
                "date": "2023-11-15T12:07:32Z"
            },
            {
                "name": "aria2 1.36.0",
                "date": "2021-08-21T09:14:10Z"
            },
            {
                "name": "aria2 1.35.0",
                "date": "2019-10-06T01:43:25Z"
            },
            {
                "name": "aria2 1.34.0",
                "date": "2018-05-15T13:04:42Z"
            },
            {
                "name": "aria2 1.33.1",
                "date": "2017-11-08T13:08:57Z"
            },
            {
                "name": "aria2 1.33.0",
                "date": "2017-10-17T14:31:58Z"
            },
            {
                "name": "aria2 1.32.0",
                "date": "2017-05-17T15:03:31Z"
            },
            {
                "name": "aria2 1.31.0",
                "date": "2017-01-16T13:45:47Z"
            },
            {
                "name": "aria2 1.30.0",
                "date": "2016-12-15T14:12:19Z"
            },
            {
                "name": "aria2 1.29.0",
                "date": "2016-11-15T14:18:40Z"
            },
            {
                "name": "aria2 1.28.0",
                "date": "2016-10-16T08:43:30Z"
            },
            {
                "name": "aria2 1.27.1",
                "date": "2016-09-17T00:23:47Z"
            },
            {
                "name": "aria2 1.27.0",
                "date": "2016-09-16T13:08:35Z"
            },
            {
                "name": "aria2 1.26.1",
                "date": "2016-08-28T07:45:07Z"
            },
            {
                "name": "aria2 1.26.0",
                "date": "2016-08-20T02:24:51Z"
            },
            {
                "name": "aria2 1.25.0",
                "date": "2016-07-15T14:10:06Z"
            },
            {
                "name": "aria2 1.24.0",
                "date": "2016-06-15T13:16:35Z"
            },
            {
                "name": "aria2 1.23.0",
                "date": "2016-05-15T10:37:06Z"
            },
            {
                "name": "aria2 1.22.0",
                "date": "2016-04-15T14:19:34Z"
            },
            {
                "name": "aria2 1.21.0",
                "date": "2016-03-15T15:45:49Z"
            },
            {
                "name": "aria2 1.20.0",
                "date": "2016-02-15T16:10:57Z"
            },
            {
                "name": "aria2 1.19.3",
                "date": "2015-12-06T14:24:12Z"
            },
            {
                "name": "aria2 1.19.2",
                "date": "2015-10-04T09:39:52Z"
            },
            {
                "name": "aria2 1.19.1",
                "date": "2015-09-27T15:37:18Z"
            }
        ]
    }
}