{
    "https://api.github.com/repos/terryma/vim-multiple-cursors": {
        "forks": 246,
        "watchers": 7952,
        "stars": 7952,
        "languages": {
            "Vim Script": 49266,
            "Ruby": 23814
        },
        "commits": [
            "2020-07-30T19:44:08Z",
            "2020-05-19T00:23:00Z",
            "2020-05-19T00:18:33Z",
            "2020-05-18T21:15:09Z",
            "2020-05-14T17:46:11Z",
            "2020-02-06T22:24:36Z",
            "2019-11-09T19:14:48Z",
            "2019-07-11T17:42:39Z",
            "2019-07-05T15:43:45Z",
            "2019-06-26T18:54:15Z",
            "2019-06-26T18:50:21Z",
            "2019-06-26T18:49:44Z",
            "2019-06-11T01:28:04Z",
            "2019-03-25T20:30:26Z",
            "2019-03-24T01:46:37Z",
            "2019-03-24T01:46:06Z",
            "2019-02-21T19:30:54Z",
            "2019-02-21T19:29:36Z",
            "2018-10-16T18:23:57Z",
            "2018-09-10T09:31:11Z",
            "2018-08-10T18:38:32Z",
            "2018-08-10T17:26:00Z",
            "2018-07-16T22:02:48Z",
            "2018-07-14T18:34:22Z",
            "2018-04-17T22:56:37Z",
            "2018-04-17T20:15:08Z",
            "2018-04-09T17:15:12Z",
            "2018-04-09T16:55:48Z",
            "2018-04-09T16:53:34Z",
            "2018-04-08T20:13:54Z"
        ],
        "creation_date": "2013-04-14T04:27:28Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 135,
        "readme": "# **\u2757 This plugin is deprecated, use [vim-visual-multi](https://github.com/mg979/vim-visual-multi) instead \u2757**\n\n# vim-multiple-cursors\n[![Build Status](https://travis-ci.org/terryma/vim-multiple-cursors.svg?branch=master)](https://travis-ci.org/github/terryma/vim-multiple-cursors)\n\n## Contents\n - [About](#about)\n - [Installation](#installation)\n - [Quick Start](#quick-start)\n - [Mapping](#mapping)\n - [Settings](#settings)\n - [Interactions with other plugins](#interactions-with-other-plugins)\n - [Highlight](#highlight)\n - [FAQ](#faq)\n - [Contributing](#contributing)\n - [Credit](#credit)\n\n## About\n[There](https://github.com/paradigm/vim-multicursor) [have](https://github.com/felixr/vim-multiedit) [been](https://github.com/hlissner/vim-multiedit) [many](https://github.com/adinapoli/vim-markmultiple) [attempts](https://github.com/AndrewRadev/multichange.vim) at bringing Sublime Text's awesome [multiple selection][sublime-multiple-selection] feature into Vim, but none so far have been in my opinion a faithful port that is simplistic to use, yet powerful and intuitive enough for an existing Vim user. [vim-multiple-cursors] is yet another attempt at that.\n\n### It's great for quick refactoring\n![Example1](assets/example1.gif?raw=true)\n\nVim command sequence: `fp<C-n><C-n><C-n>cname`\n\n### Add a cursor to each line of your visual selection\n![Example2](assets/example2.gif?raw=true)\n\nVim command sequence: `vip<C-n>i\"<Right><Right><Right>\",<Esc>vipgJ$r]Idays = [`\n\n### Match characters from visual selection\n![Example3](assets/example3.gif?raw=true)\n\nVim command sequence: `df[$r,0f,v<C-n>\u2026<C-n>c<CR><Up><Del><Right><Right><Right><Del>`\n\n### Use the command to match regexp\n![Example4](assets/example4.gif?raw=true)\n\nTo see what keystrokes are used for the above examples, see [the wiki page](https://github.com/terryma/vim-multiple-cursors/wiki/Keystrokes-for-example-gifs).\n\n## Installation\nInstall using [Pathogen], [Vundle], [Neobundle], [vim-plug], or your favorite Vim package manager.\n\nRequires vim 7.4 or newer for full functionality.\n\n### vim-plug instructions\n\n1. Paste this block into the top of `~/.vimrc`.\n\n```vim script\ncall plug#begin()\n\nPlug 'terryma/vim-multiple-cursors'\n\ncall plug#end()\n```\n\n2. Start vim and execute `:PlugInstall`.\n\n## Quick Start\n### normal mode / visual mode\n  * start:          `<C-n>` start multicursor and add a _virtual cursor + selection_ on the match\n    * next:         `<C-n>` add a new _virtual cursor + selection_ on the next match\n    * skip:         `<C-x>` skip the next match\n    * prev:         `<C-p>` remove current _virtual cursor + selection_ and go back on previous match\n  * select all:     `<A-n>` start multicursor and directly select all matches\n\nYou can now change the _virtual cursors + selection_ with **visual mode** commands.\nFor instance: `c`, `s`, `I`, `A` work without any issues.\nYou could also go to **normal mode** by pressing `v` and use normal commands there.\n\nAt any time, you can press `<Esc>` to exit back to regular Vim.\n\n**NOTE**: start with `g<C-n>` to match without boundaries (behaves like `g*` instead of `*`)\n\n### visual mode when multiple lines are selected\n  * start: `<C-n>` add _virtual cursors_ on each line\n\nYou can now change the _virtual cursors_ with **normal mode** commands.\nFor instance: `ciw`.\n\n### command\nThe command `MultipleCursorsFind` accepts a range and a pattern (regexp), it creates a _visual cursor_ at the end of each match.\nIf no range is passed in, then it defaults to the entire buffer.\n\n\n## Mapping\nIf you don't like the plugin taking over your key bindings, you can turn it off and reassign them the way you want:\n```viml\nlet g:multi_cursor_use_default_mapping=0\n\n\" Default mapping\nlet g:multi_cursor_start_word_key      = '<C-n>'\nlet g:multi_cursor_select_all_word_key = '<A-n>'\nlet g:multi_cursor_start_key           = 'g<C-n>'\nlet g:multi_cursor_select_all_key      = 'g<A-n>'\nlet g:multi_cursor_next_key            = '<C-n>'\nlet g:multi_cursor_prev_key            = '<C-p>'\nlet g:multi_cursor_skip_key            = '<C-x>'\nlet g:multi_cursor_quit_key            = '<Esc>'\n```\n\n**NOTE:** Please make sure to always map something to `g:multi_cursor_quit_key`, otherwise you'll have a tough time quitting from multicursor mode.\n\n## Settings\nCurrently there are four additional global settings one can tweak:\n\n### ```g:multi_cursor_support_imap``` (Default: 1)\nIf set to 0, insert mappings won't be supported in _Insert_ mode anymore.\n\n### ```g:multi_cursor_exit_from_visual_mode``` (Default: 0)\nIf set to 1, then pressing `g:multi_cursor_quit_key` in _Visual_ mode will quit and\ndelete all existing cursors, just skipping normal mode with multiple cursors.\n\n### ```g:multi_cursor_exit_from_insert_mode``` (Default: 0)\nIf set to 1, then pressing `g:multi_cursor_quit_key` in _Insert_ mode will quit and\ndelete all existing cursors, just skipping normal mode with multiple cursors.\n\n### ```g:multi_cursor_normal_maps``` (Default: see below)\n`{'@': 1, 'F': 1, 'T': 1, '[': 1, '\\': 1, ']': 1, '!': 1, '\"': 1, 'c': 1, 'd': 1, 'f': 1, 'g': 1, 'm': 1, 'q': 1, 'r': 1, 't': 1, 'y': 1, 'z': 1, '<': 1, '=': 1, '>': 1}`\n\nAny key in this map (values are ignored) will cause multi-cursor _Normal_ mode\nto pause for map completion just like normal vim. Otherwise keys mapped in\nnormal mode will \"fail to replay\" when multiple cursors are active.\nFor example: `{'d':1}` makes normal-mode command `dw` work in multi-cursor mode.\n\nThe default list contents should work for anybody, unless they have remapped a\nkey from an operator-pending command to a non-operator-pending command or\nvice versa.\n\nThese keys must be manually listed because vim doesn't provide a way to\nautomatically see which keys _start_ mappings, and trying to run motion commands\nsuch as `j` as if they were operator-pending commands can break things.\n\n### ```g:multi_cursor_visual_maps``` (Default: see below)\n`{'T': 1, 'a': 1, 't': 1, 'F': 1, 'f': 1, 'i': 1}`\n\nSame principle as `g:multi_cursor_normal_maps`\n\n### Interactions with other plugins\n\n### ```Multiple_cursors_before/Multiple_cursors_after``` (Default: `nothing`)\n\nOther plugins may be incompatible in insert mode.\nThat is why we provide hooks to disable those plug-ins when vim-multiple-cursors is active:\n\nFor example, if you are using [Neocomplete](https://github.com/Shougo/neocomplete.vim),\nadd this to your vimrc to prevent conflict:\n\n```viml\nfunction! Multiple_cursors_before()\n  if exists(':NeoCompleteLock')==2\n    exe 'NeoCompleteLock'\n  endif\nendfunction\n\nfunction! Multiple_cursors_after()\n  if exists(':NeoCompleteUnlock')==2\n    exe 'NeoCompleteUnlock'\n  endif\nendfunction\n```\n\nPlugins themselves can register `User` autocommands on `MultipleCursorsPre` and\n`MultipleCursorsPost` for automatic integration.\n\n### Highlight\nThe plugin uses the highlight group `multiple_cursors_cursor` and `multiple_cursors_visual` to highlight the virtual cursors and their visual selections respectively. You can customize them by putting something similar like the following in your vimrc:\n\n```viml\n\" Default highlighting (see help :highlight and help :highlight-link)\nhighlight multiple_cursors_cursor term=reverse cterm=reverse gui=reverse\nhighlight link multiple_cursors_visual Visual\n```\n\n## FAQ\n\n#### **Q**  Pressing <kbd>i</kbd> after selecting words with <kbd>C-n</kbd> makes the plugin hang, why?\n**A** When selecting words with <kbd>C-n</kbd>, the plugin behaves like in **visual** mode.\nOnce you pressed <kbd>i</kbd>, you can still press <kbd>I</kbd> to insert text.\n\n#### **Q** <kbd>ALT</kbd>+<kbd>n</kbd> doesn't seem to work in VIM but works in gVIM, why?\n**A** This is a well known terminal/Vim [issue](http://vim.wikia.com/wiki/Get_Alt_key_to_work_in_terminal), different terminal have different ways to send ```Alt+key```.\nTry adding this in your `.vimrc` and **make sure to replace the string**:\n```vim\nif !has('gui_running')\n  map \"in Insert mode, type Ctrl+v Alt+n here\" <A-n>\nendif\n```\nOr remap the following:\n```vim\ng:multi_cursor_start_key\ng:multi_cursor_select_all_key\n```\n\n#### **Q** <kbd>CTRL</kbd>+<kbd>n</kbd> doesn't seem to work in gVIM?\n**A** Try setting `set selection=inclusive` in your `~/.gvimrc`\n\n**A** Alternatively, you can just temporarily disable _exclusive_ selection whenever the plugin is active:\n```VimL\naugroup MultipleCursorsSelectionFix\n    autocmd User MultipleCursorsPre  if &selection ==# 'exclusive' | let g:multi_cursor_save_selection = &selection | set selection=inclusive | endif\n    autocmd User MultipleCursorsPost if exists('g:multi_cursor_save_selection') | let &selection = g:multi_cursor_save_selection | unlet g:multi_cursor_save_selection | endif\naugroup END\n```\n\n### **Q** deoplete insert giberrish, how to fix this?\n**A** use the `Multiple_cursors` functions, add this in your vimrc:\n\n```VimL\n    func! Multiple_cursors_before()\n      if deoplete#is_enabled()\n        call deoplete#disable()\n        let g:deoplete_is_enable_before_multi_cursors = 1\n      else\n        let g:deoplete_is_enable_before_multi_cursors = 0\n      endif\n    endfunc\n    func! Multiple_cursors_after()\n      if g:deoplete_is_enable_before_multi_cursors\n        call deoplete#enable()\n      endif\n    endfunc\n```\n\n#### **Q** is it also working on Mac?\n**A** On Mac OS, [MacVim](https://code.google.com/p/macvim/) is known to work.\n\n#### **Q** How can I select `n` keywords with several keystrokes? `200<C-n>` does not work.\n**A** You can use :MultipleCursorsFind keyword. I have this binding in my vimrc:\n\n```VimL\nnnoremap <silent> <M-j> :MultipleCursorsFind <C-R>/<CR>\nvnoremap <silent> <M-j> :MultipleCursorsFind <C-R>/<CR>\n```\n\nThis allows one to search for the keyword using `*` and turn search results into cursors with `Alt-j`.\n\n\n## Contributing\nPatches and suggestions are always welcome! A list of open feature requests can be found [here](https://github.com/terryma/vim-multiple-cursors/labels/pull%20request%20welcome).\n\n### Issue Creation\nContributor's time is precious and limited. Please ensure it meets the requirements outlined in [CONTRIBUTING.md](CONTRIBUTING.md).\n\n### Pull Requests\nRunning the test suite requires ruby and rake as well as vim of course. Before submitting PR, please ensure the checks are passing:\n```bash\ncd vim-multiple-cursors/spec/\nbundle exec rake\n```\n\n### Contributors\nThis is a community supported project. Here is the list of all the [Contributors](https://github.com/terryma/vim-multiple-cursors/graphs/contributors)\n\n## Credit\nObviously inspired by Sublime Text's [multiple selection][sublime-multiple-selection] feature, also encouraged by Emac's [multiple cursors][emacs-multiple-cursors] implementation by Magnar Sveen\n\n[vim-multiple-cursors]:http://github.com/terryma/vim-multiple-cursors\n[sublime-multiple-selection]:http://www.sublimetext.com/docs/2/multiple_selection_with_the_keyboard.html\n[Pathogen]:http://github.com/tpope/vim-pathogen\n[Vundle]:http://github.com/gmarik/vundle\n[Neobundle]:http://github.com/Shougo/neobundle.vim\n[vim-plug]:https://github.com/junegunn/vim-plug\n[emacs-multiple-cursors]:https://github.com/magnars/multiple-cursors.el\n",
        "releases": []
    }
}