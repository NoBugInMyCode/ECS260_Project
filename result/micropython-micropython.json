{
    "https://api.github.com/repos/micropython/micropython": {
        "forks": 7901,
        "watchers": 19766,
        "stars": 19766,
        "languages": {
            "C": 20297313,
            "Python": 2084059,
            "Makefile": 247405,
            "CMake": 89440,
            "JavaScript": 57043,
            "Shell": 56412,
            "C++": 43811,
            "Assembly": 30591
        },
        "commits": [
            "2025-01-16T06:09:43Z",
            "2025-01-18T11:06:33Z",
            "2025-01-14T04:16:36Z",
            "2025-01-16T04:54:47Z",
            "2025-01-15T00:17:07Z",
            "2025-01-07T06:29:56Z",
            "2025-01-07T01:14:30Z",
            "2025-01-07T03:19:11Z",
            "2025-01-16T12:47:50Z",
            "2024-08-12T23:48:11Z",
            "2024-05-23T07:46:47Z",
            "2024-10-09T04:50:39Z",
            "2025-01-08T01:11:34Z",
            "2025-01-08T01:07:41Z",
            "2025-01-08T01:05:45Z",
            "2024-10-09T03:53:37Z",
            "2024-07-25T07:45:09Z",
            "2023-01-29T18:09:51Z",
            "2024-12-19T10:22:01Z",
            "2024-12-19T09:58:21Z",
            "2025-01-14T08:40:16Z",
            "2025-01-14T00:30:00Z",
            "2025-01-14T00:28:20Z",
            "2025-01-14T00:09:40Z",
            "2025-01-14T01:26:16Z",
            "2024-09-06T18:32:04Z",
            "2024-09-06T16:40:34Z",
            "2024-09-06T13:50:35Z",
            "2025-01-14T06:17:22Z",
            "2025-01-14T05:44:23Z"
        ],
        "creation_date": "2013-12-20T11:47:07Z",
        "contributors": 30,
        "topics": [
            "embedded",
            "microcontroller",
            "micropython",
            "python"
        ],
        "subscribers": 731,
        "readme": "[![Unix CI badge](https://github.com/micropython/micropython/actions/workflows/ports_unix.yml/badge.svg)](https://github.com/micropython/micropython/actions?query=branch%3Amaster+event%3Apush) [![STM32 CI badge](https://github.com/micropython/micropython/actions/workflows/ports_stm32.yml/badge.svg)](https://github.com/micropython/micropython/actions?query=branch%3Amaster+event%3Apush) [![Docs CI badge](https://github.com/micropython/micropython/actions/workflows/docs.yml/badge.svg)](https://docs.micropython.org/) [![codecov](https://codecov.io/gh/micropython/micropython/branch/master/graph/badge.svg?token=I92PfD05sD)](https://codecov.io/gh/micropython/micropython)\n\nThe MicroPython project\n=======================\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/micropython/micropython/master/logo/upython-with-micro.jpg\" alt=\"MicroPython Logo\"/>\n</p>\n\nThis is the MicroPython project, which aims to put an implementation\nof Python 3.x on microcontrollers and small embedded systems.\nYou can find the official website at [micropython.org](http://www.micropython.org).\n\nWARNING: this project is in beta stage and is subject to changes of the\ncode-base, including project-wide name changes and API changes.\n\nMicroPython implements the entire Python 3.4 syntax (including exceptions,\n`with`, `yield from`, etc., and additionally `async`/`await` keywords from\nPython 3.5 and some select features from later versions). The following core\ndatatypes are provided: `str`(including basic Unicode support), `bytes`,\n`bytearray`, `tuple`, `list`, `dict`, `set`, `frozenset`, `array.array`,\n`collections.namedtuple`, classes and instances. Builtin modules include\n`os`, `sys`, `time`, `re`, and `struct`, etc. Some ports have support for\n`_thread` module (multithreading), `socket` and `ssl` for networking, and\n`asyncio`. Note that only a subset of Python 3 functionality is implemented\nfor the data types and modules.\n\nMicroPython can execute scripts in textual source form (.py files) or from\nprecompiled bytecode (.mpy files), in both cases either from an on-device\nfilesystem or \"frozen\" into the MicroPython executable.\n\nMicroPython also provides a set of MicroPython-specific modules to access\nhardware-specific functionality and peripherals such as GPIO, Timers, ADC,\nDAC, PWM, SPI, I2C, CAN, Bluetooth, and USB.\n\nGetting started\n---------------\n\nSee the [online documentation](https://docs.micropython.org/) for the API\nreference and information about using MicroPython and information about how\nit is implemented.\n\nWe use [GitHub Discussions](https://github.com/micropython/micropython/discussions)\nas our forum, and [Discord](https://discord.gg/RB8HZSAExQ) for chat. These\nare great places to ask questions and advice from the community or to discuss your\nMicroPython-based projects.\n\nFor bugs and feature requests, please [raise an issue](https://github.com/micropython/micropython/issues/new/choose)\nand follow the templates there.\n\nFor information about the [MicroPython pyboard](https://store.micropython.org/pyb-features),\nthe officially supported board from the\n[original Kickstarter campaign](https://www.kickstarter.com/projects/214379695/micro-python-python-for-microcontrollers),\nsee the [schematics and pinouts](http://github.com/micropython/pyboard) and\n[documentation](https://docs.micropython.org/en/latest/pyboard/quickref.html).\n\nContributing\n------------\n\nMicroPython is an open-source project and welcomes contributions. To be\nproductive, please be sure to follow the\n[Contributors' Guidelines](https://github.com/micropython/micropython/wiki/ContributorGuidelines)\nand the [Code Conventions](https://github.com/micropython/micropython/blob/master/CODECONVENTIONS.md).\nNote that MicroPython is licenced under the MIT license, and all contributions\nshould follow this license.\n\nAbout this repository\n---------------------\n\nThis repository contains the following components:\n- [py/](py/) -- the core Python implementation, including compiler, runtime, and\n  core library.\n- [mpy-cross/](mpy-cross/) -- the MicroPython cross-compiler which is used to turn scripts\n  into precompiled bytecode.\n- [ports/](ports/) -- platform-specific code for the various ports and architectures that MicroPython runs on.\n- [lib/](lib/) -- submodules for external dependencies.\n- [tests/](tests/) -- test framework and test scripts.\n- [docs/](docs/) -- user documentation in Sphinx reStructuredText format. This is used to generate the [online documentation](http://docs.micropython.org).\n- [extmod/](extmod/) -- additional (non-core) modules implemented in C.\n- [tools/](tools/) -- various tools, including the pyboard.py module.\n- [examples/](examples/) -- a few example Python scripts.\n\n\"make\" is used to build the components, or \"gmake\" on BSD-based systems.\nYou will also need bash, gcc, and Python 3.3+ available as the command `python3`\n(if your system only has Python 2.7 then invoke make with the additional option\n`PYTHON=python2`). Some ports (rp2 and esp32) additionally use CMake.\n\nSupported platforms & architectures\n-----------------------------------\n\nMicroPython runs on a wide range of microcontrollers, as well as on Unix-like\n(including Linux, BSD, macOS, WSL) and Windows systems.\n\nMicrocontroller targets can be as small as 256kiB flash + 16kiB RAM, although\ndevices with at least 512kiB flash + 128kiB RAM allow a much more\nfull-featured experience.\n\nThe [Unix](ports/unix) and [Windows](ports/windows) ports allow both\ndevelopment and testing of MicroPython itself, as well as providing\nlightweight alternative to CPython on these platforms (in particular on\nembedded Linux systems).\n\nThe [\"minimal\"](ports/minimal) port provides an example of a very basic\nMicroPython port and can be compiled as both a standalone Linux binary as\nwell as for ARM Cortex M4. Start with this if you want to port MicroPython to\nanother microcontroller. Additionally the [\"bare-arm\"](ports/bare-arm) port\nis an example of the absolute minimum configuration, and is used to keep\ntrack of the code size of the core runtime and VM.\n\nIn addition, the following ports are provided in this repository:\n - [cc3200](ports/cc3200) -- Texas Instruments CC3200 (including PyCom WiPy).\n - [esp32](ports/esp32) -- Espressif ESP32 SoC (including ESP32S2, ESP32S3, ESP32C3, ESP32C6).\n - [esp8266](ports/esp8266) -- Espressif ESP8266 SoC.\n - [mimxrt](ports/mimxrt) -- NXP m.iMX RT (including Teensy 4.x).\n - [nrf](ports/nrf) -- Nordic Semiconductor nRF51 and nRF52.\n - [pic16bit](ports/pic16bit) -- Microchip PIC 16-bit.\n - [powerpc](ports/powerpc) -- IBM PowerPC (including Microwatt)\n - [qemu](ports/qemu) -- QEMU-based emulated target (for testing)\n - [renesas-ra](ports/renesas-ra) -- Renesas RA family.\n - [rp2](ports/rp2) -- Raspberry Pi RP2040 (including Pico and Pico W).\n - [samd](ports/samd) -- Microchip (formerly Atmel) SAMD21 and SAMD51.\n - [stm32](ports/stm32) -- STMicroelectronics STM32 family (including F0, F4, F7, G0, G4, H7, L0, L4, WB)\n - [webassembly](ports/webassembly) -- Emscripten port targeting browsers and NodeJS.\n - [zephyr](ports/zephyr) -- Zephyr RTOS.\n\nThe MicroPython cross-compiler, mpy-cross\n-----------------------------------------\n\nMost ports require the [MicroPython cross-compiler](mpy-cross) to be built\nfirst.  This program, called mpy-cross, is used to pre-compile Python scripts\nto .mpy files which can then be included (frozen) into the\nfirmware/executable for a port.  To build mpy-cross use:\n\n    $ cd mpy-cross\n    $ make\n\nExternal dependencies\n---------------------\n\nThe core MicroPython VM and runtime has no external dependencies, but a given\nport might depend on third-party drivers or vendor HALs. This repository\nincludes [several submodules](lib/) linking to these external dependencies.\nBefore compiling a given port, use\n\n    $ cd ports/name\n    $ make submodules\n\nto ensure that all required submodules are initialised.\n",
        "releases": [
            {
                "name": "Patch release for mpremote, rp2 IGMP, esp32 PWM, SDCard, and AP channel",
                "date": "2024-11-29T23:59:49Z"
            },
            {
                "name": "RP2350 and ESP32-C6 support, RISC-V native emitter, common TinyUSB code",
                "date": "2024-10-26T12:07:47Z"
            },
            {
                "name": "Dynamic USB devices, revamped webassembly port, openamp, tls, vfs modules",
                "date": "2024-05-31T05:03:47Z"
            },
            {
                "name": "Patch release for rp2 DMA, UART and BLE, esp32 BLE, renesas-ra I2C",
                "date": "2024-02-20T12:36:21Z"
            },
            {
                "name": "Patch release for rp2 atomic mutex",
                "date": "2024-01-05T02:21:22Z"
            },
            {
                "name": "SSL support in asyncio, sorted qstr pools, common machine module bindings",
                "date": "2023-12-27T12:58:56Z"
            },
            {
                "name": "U-module renaming, deflate module, IDF 5, board variants and Pico-W BLE",
                "date": "2023-10-06T00:09:41Z"
            },
            {
                "name": "New mip package manager, compressed type structs and Pico W support",
                "date": "2023-04-26T15:20:33Z"
            },
            {
                "name": "New mpy 6 file format with improved bytecode, addition of renesas-ra port",
                "date": "2022-06-16T06:19:58Z"
            },
            {
                "name": "Boosted performance, board.json metadata, more mimxrt, rp2, samd features",
                "date": "2022-01-16T23:37:48Z"
            },
            {
                "name": "F-strings, new machine.I2S class, ESP32-C3 support and LEGO_HUB_NO6 board",
                "date": "2021-09-02T01:12:36Z"
            },
            {
                "name": "New mpremote tool, and the mimxrt port gets Pin, ADC, UART, RTC and VFS",
                "date": "2021-06-18T09:07:56Z"
            },
            {
                "name": "The esp32 port moves to CMake and has S2 support, new features for rp2",
                "date": "2021-04-18T15:01:36Z"
            },
            {
                "name": "New rp2 port, BLE pairing, bonding and l2cap APIs, and docs on internals",
                "date": "2021-02-03T23:51:07Z"
            },
            {
                "name": "New uasyncio module, code formatting, BTstack bindings with unix support",
                "date": "2020-09-02T02:31:58Z"
            },
            {
                "name": "PYBD boards, BLE and littlefs, dynamic native modules, samd and powerpc",
                "date": "2019-12-20T07:34:44Z"
            },
            {
                "name": "Improved mpy format with support for native code, and new JavaScript port",
                "date": "2019-05-29T07:03:10Z"
            },
            {
                "name": "Vast improvements to native emitter, new nrf port, unified documentation",
                "date": "2019-01-25T14:27:42Z"
            },
            {
                "name": "Parser size reduced, new Python stack, stm32 improvements, new esp32 port",
                "date": "2018-05-11T06:57:37Z"
            },
            {
                "name": "Introduction of ports subdirectory where all ports are moved to",
                "date": "2017-11-01T00:44:31Z"
            },
            {
                "name": "Double precision math library and support on pyboard, and improved ussl",
                "date": "2017-08-23T01:58:16Z"
            }
        ]
    }
}