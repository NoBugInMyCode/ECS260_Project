{
    "https://api.github.com/repos/ladjs/supertest": {
        "forks": 762,
        "watchers": 13887,
        "stars": 13887,
        "languages": {
            "JavaScript": 50200
        },
        "commits": [
            "2024-04-24T15:19:16Z",
            "2024-04-24T15:14:03Z",
            "2024-04-24T00:34:24Z",
            "2024-04-23T19:45:43Z",
            "2024-01-14T16:40:41Z",
            "2024-01-14T16:39:26Z",
            "2023-01-18T16:58:22Z",
            "2024-01-14T16:37:56Z",
            "2024-01-14T16:22:51Z",
            "2024-01-14T16:22:35Z",
            "2024-01-14T08:00:23Z",
            "2023-12-06T01:11:40Z",
            "2023-04-13T13:57:08Z",
            "2023-04-13T11:12:22Z",
            "2023-02-21T18:53:13Z",
            "2023-02-21T18:51:00Z",
            "2023-01-25T17:05:26Z",
            "2023-01-25T15:01:37Z",
            "2023-01-24T09:49:01Z",
            "2023-01-18T16:58:11Z",
            "2022-12-22T19:52:19Z",
            "2022-12-07T23:26:14Z",
            "2022-12-07T23:26:00Z",
            "2022-12-02T21:34:52Z",
            "2022-12-02T21:33:56Z",
            "2022-12-02T21:31:59Z",
            "2022-10-24T20:30:55Z",
            "2022-10-24T20:30:29Z",
            "2022-10-04T02:54:58Z",
            "2022-10-04T02:54:23Z"
        ],
        "creation_date": "2012-06-27T20:56:12Z",
        "contributors": 30,
        "topics": [
            "assertions",
            "node",
            "superagent",
            "supertest"
        ],
        "subscribers": 115,
        "readme": "# [SuperTest](https://ladjs.github.io/superagent/)\n\n[![code coverage][coverage-badge]][coverage]\n[![Build Status][travis-badge]][travis]\n[![Dependencies][dependencies-badge]][dependencies]\n[![PRs Welcome][prs-badge]][prs]\n[![MIT License][license-badge]][license]\n\n> HTTP assertions made easy via [superagent](http://github.com/ladjs/superagent).  Maintained for [Forward Email](https://github.com/forwardemail) and [Lad](https://github.com/ladjs).\n\n## About\n\nThe motivation with this module is to provide a high-level abstraction for testing\nHTTP, while still allowing you to drop down to the [lower-level API](https://ladjs.github.io/superagent/) provided by superagent.\n\n## Getting Started\n\nInstall SuperTest as an npm module and save it to your package.json file as a development dependency:\n\n```bash\nnpm install supertest --save-dev\n```\n\n  Once installed it can now be referenced by simply calling ```require('supertest');```\n\n## Example\n\nYou may pass an `http.Server`, or a `Function` to `request()` - if the server is not\nalready listening for connections then it is bound to an ephemeral port for you so\nthere is no need to keep track of ports.\n\nSuperTest works with any test framework, here is an example without using any\ntest framework at all:\n\n```js\nconst request = require('supertest');\nconst express = require('express');\n\nconst app = express();\n\napp.get('/user', function(req, res) {\n  res.status(200).json({ name: 'john' });\n});\n\nrequest(app)\n  .get('/user')\n  .expect('Content-Type', /json/)\n  .expect('Content-Length', '15')\n  .expect(200)\n  .end(function(err, res) {\n    if (err) throw err;\n  });\n```\n\nTo enable http2 protocol, simply append an options to `request` or `request.agent`:\n\n```js\nconst request = require('supertest');\nconst express = require('express');\n\nconst app = express();\n\napp.get('/user', function(req, res) {\n  res.status(200).json({ name: 'john' });\n});\n\nrequest(app, { http2: true })\n  .get('/user')\n  .expect('Content-Type', /json/)\n  .expect('Content-Length', '15')\n  .expect(200)\n  .end(function(err, res) {\n    if (err) throw err;\n  });\n\nrequest.agent(app, { http2: true })\n  .get('/user')\n  .expect('Content-Type', /json/)\n  .expect('Content-Length', '15')\n  .expect(200)\n  .end(function(err, res) {\n    if (err) throw err;\n  });\n```\n\nHere's an example with mocha, note how you can pass `done` straight to any of the `.expect()` calls:\n\n```js\ndescribe('GET /user', function() {\n  it('responds with json', function(done) {\n    request(app)\n      .get('/user')\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200, done);\n  });\n});\n```\n\nYou can use `auth` method to pass HTTP username and password in the same way as in the [superagent](http://ladjs.github.io/superagent/#authentication):\n\n```js\ndescribe('GET /user', function() {\n  it('responds with json', function(done) {\n    request(app)\n      .get('/user')\n      .auth('username', 'password')\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200, done);\n  });\n});\n```\n\nOne thing to note with the above statement is that superagent now sends any HTTP\nerror (anything other than a 2XX response code) to the callback as the first argument if\nyou do not add a status code expect (i.e. `.expect(302)`).\n\nIf you are using the `.end()` method `.expect()` assertions that fail will\nnot throw - they will return the assertion as an error to the `.end()` callback. In\norder to fail the test case, you will need to rethrow or pass `err` to `done()`, as follows:\n\n```js\ndescribe('POST /users', function() {\n  it('responds with json', function(done) {\n    request(app)\n      .post('/users')\n      .send({name: 'john'})\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n      .end(function(err, res) {\n        if (err) return done(err);\n        return done();\n      });\n  });\n});\n```\n\nYou can also use promises:\n\n```js\ndescribe('GET /users', function() {\n  it('responds with json', function() {\n    return request(app)\n      .get('/users')\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n      .then(response => {\n         expect(response.body.email).toEqual('foo@bar.com');\n      })\n  });\n});\n```\n\nOr async/await syntax:\n\n```js\ndescribe('GET /users', function() {\n  it('responds with json', async function() {\n    const response = await request(app)\n      .get('/users')\n      .set('Accept', 'application/json')\n    expect(response.headers[\"Content-Type\"]).toMatch(/json/);\n    expect(response.status).toEqual(200);\n    expect(response.body.email).toEqual('foo@bar.com');\n  });\n});\n```\n\nExpectations are run in the order of definition. This characteristic can be used\nto modify the response body or headers before executing an assertion.\n\n```js\ndescribe('POST /user', function() {\n  it('user.name should be an case-insensitive match for \"john\"', function(done) {\n    request(app)\n      .post('/user')\n      .send('name=john') // x-www-form-urlencoded upload\n      .set('Accept', 'application/json')\n      .expect(function(res) {\n        res.body.id = 'some fixed id';\n        res.body.name = res.body.name.toLowerCase();\n      })\n      .expect(200, {\n        id: 'some fixed id',\n        name: 'john'\n      }, done);\n  });\n});\n```\n\nAnything you can do with superagent, you can do with supertest - for example multipart file uploads!\n\n```js\nrequest(app)\n  .post('/')\n  .field('name', 'my awesome avatar')\n  .field('complex_object', '{\"attribute\": \"value\"}', {contentType: 'application/json'})\n  .attach('avatar', 'test/fixtures/avatar.jpg')\n  ...\n```\n\nPassing the app or url each time is not necessary, if you're testing\nthe same host you may simply re-assign the request variable with the\ninitialization app or url, a new `Test` is created per `request.VERB()` call.\n\n```js\nrequest = request('http://localhost:5555');\n\nrequest.get('/').expect(200, function(err){\n  console.log(err);\n});\n\nrequest.get('/').expect('heya', function(err){\n  console.log(err);\n});\n```\n\nHere's an example with mocha that shows how to persist a request and its cookies:\n\n```js\nconst request = require('supertest');\nconst should = require('should');\nconst express = require('express');\nconst cookieParser = require('cookie-parser');\n\ndescribe('request.agent(app)', function() {\n  const app = express();\n  app.use(cookieParser());\n\n  app.get('/', function(req, res) {\n    res.cookie('cookie', 'hey');\n    res.send();\n  });\n\n  app.get('/return', function(req, res) {\n    if (req.cookies.cookie) res.send(req.cookies.cookie);\n    else res.send(':(')\n  });\n\n  const agent = request.agent(app);\n\n  it('should save cookies', function(done) {\n    agent\n    .get('/')\n    .expect('set-cookie', 'cookie=hey; Path=/', done);\n  });\n\n  it('should send cookies', function(done) {\n    agent\n    .get('/return')\n    .expect('hey', done);\n  });\n});\n```\n\nThere is another example that is introduced by the file [agency.js](https://github.com/ladjs/superagent/blob/master/test/node/agency.js)\n\nHere is an example where 2 cookies are set on the request.\n\n```js\nagent(app)\n  .get('/api/content')\n  .set('Cookie', ['nameOne=valueOne;nameTwo=valueTwo'])\n  .send()\n  .expect(200)\n  .end((err, res) => {\n    if (err) {\n      return done(err);\n    }\n    expect(res.text).to.be.equal('hey');\n    return done();\n  });\n```\n\n## API\n\nYou may use any [superagent](http://github.com/ladjs/superagent) methods,\nincluding `.write()`, `.pipe()` etc and perform assertions in the `.end()` callback\nfor lower-level needs.\n\n### .expect(status[, fn])\n\nAssert response `status` code.\n\n### .expect(status, body[, fn])\n\nAssert response `status` code and `body`.\n\n### .expect(body[, fn])\n\nAssert response `body` text with a string, regular expression, or\nparsed body object.\n\n### .expect(field, value[, fn])\n\nAssert header `field` `value` with a string or regular expression.\n\n### .expect(function(res) {})\n\nPass a custom assertion function. It'll be given the response object to check. If the check fails, throw an error.\n\n```js\nrequest(app)\n  .get('/')\n  .expect(hasPreviousAndNextKeys)\n  .end(done);\n\nfunction hasPreviousAndNextKeys(res) {\n  if (!('next' in res.body)) throw new Error(\"missing next key\");\n  if (!('prev' in res.body)) throw new Error(\"missing prev key\");\n}\n```\n\n### .end(fn)\n\nPerform the request and invoke `fn(err, res)`.\n\n## Notes\n\nInspired by [api-easy](https://github.com/flatiron/api-easy) minus vows coupling.\n\n## License\n\nMIT\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/ladjs/supertest.svg\n[coverage]: https://codecov.io/gh/ladjs/supertest\n[travis-badge]: https://travis-ci.org/ladjs/supertest.svg?branch=master\n[travis]: https://travis-ci.org/ladjs/supertest\n[dependencies-badge]: https://david-dm.org/ladjs/supertest/status.svg\n[dependencies]: https://david-dm.org/ladjs/supertest\n[prs-badge]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square\n[prs]: http://makeapullrequest.com\n[license-badge]: https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\n[license]: https://github.com/ladjs/supertest/blob/master/LICENSE\n",
        "releases": [
            {
                "name": "",
                "date": "2024-04-24T15:19:45Z"
            },
            {
                "name": "",
                "date": "2024-01-14T16:41:57Z"
            },
            {
                "name": "",
                "date": "2022-12-07T23:27:02Z"
            },
            {
                "name": "",
                "date": "2022-12-02T21:35:19Z"
            },
            {
                "name": "",
                "date": "2022-10-24T20:31:11Z"
            },
            {
                "name": "",
                "date": "2022-10-04T02:55:12Z"
            },
            {
                "name": "",
                "date": "2022-07-01T23:19:48Z"
            },
            {
                "name": "",
                "date": "2022-04-26T23:55:26Z"
            },
            {
                "name": "",
                "date": "2022-01-18T22:00:34Z"
            },
            {
                "name": "",
                "date": "2022-01-11T22:26:32Z"
            },
            {
                "name": "",
                "date": "2022-01-10T22:43:15Z"
            },
            {
                "name": "",
                "date": "2021-08-17T20:16:38Z"
            },
            {
                "name": "",
                "date": "2021-08-11T17:06:52Z"
            },
            {
                "name": "",
                "date": "2021-07-21T04:16:40Z"
            },
            {
                "name": "",
                "date": "2021-01-25T20:59:09Z"
            },
            {
                "name": "",
                "date": "2021-01-25T05:50:57Z"
            },
            {
                "name": "",
                "date": "2021-01-15T17:55:47Z"
            },
            {
                "name": "",
                "date": "2021-01-15T15:04:42Z"
            },
            {
                "name": "",
                "date": "2020-11-04T14:31:23Z"
            },
            {
                "name": "",
                "date": "2020-10-28T18:41:44Z"
            },
            {
                "name": "v5.0.0",
                "date": "2020-09-25T13:30:51Z"
            },
            {
                "name": "v5.0.0-0",
                "date": "2019-10-02T10:51:35Z"
            },
            {
                "name": "v4.0.2",
                "date": "2019-03-15T13:05:49Z"
            },
            {
                "name": "Fix - Superagent downgraded",
                "date": "2019-03-15T12:47:04Z"
            },
            {
                "name": "v4.0.0",
                "date": "2019-03-09T11:14:34Z"
            },
            {
                "name": "",
                "date": "2019-01-22T08:13:10Z"
            },
            {
                "name": "v3.4.1",
                "date": "2019-01-16T12:37:37Z"
            },
            {
                "name": "v3.4.0",
                "date": "2019-01-16T08:37:12Z"
            },
            {
                "name": "v3.3.0",
                "date": "2018-09-06T20:28:54Z"
            },
            {
                "name": "v3.2.0",
                "date": "2018-09-05T11:40:48Z"
            },
            {
                "name": "v3.1.0",
                "date": "2018-05-13T13:15:55Z"
            },
            {
                "name": "v3.0.0",
                "date": "2017-01-30T00:24:56Z"
            },
            {
                "name": "v2.0.0",
                "date": "2016-07-29T14:38:15Z"
            },
            {
                "name": "",
                "date": "2016-02-11T15:23:18Z"
            },
            {
                "name": "v1.1.0",
                "date": "2015-09-21T15:44:43Z"
            },
            {
                "name": "",
                "date": "2015-05-13T15:57:20Z"
            },
            {
                "name": "",
                "date": "2015-05-12T21:29:45Z"
            }
        ]
    }
}