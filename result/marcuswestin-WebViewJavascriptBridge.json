{
    "https://api.github.com/repos/marcuswestin/WebViewJavascriptBridge": {
        "forks": 2985,
        "watchers": 14300,
        "stars": 14300,
        "languages": {
            "Objective-C": 55306,
            "Swift": 11534,
            "HTML": 4633,
            "Ruby": 1463,
            "Makefile": 1135,
            "Rich Text Format": 436,
            "C": 401
        },
        "commits": [
            "2023-02-25T18:34:53Z",
            "2017-11-08T20:02:02Z",
            "2017-11-08T19:59:26Z",
            "2017-11-08T17:21:50Z",
            "2017-11-08T17:21:43Z",
            "2017-11-08T17:18:38Z",
            "2017-11-08T17:08:57Z",
            "2017-11-08T17:05:59Z",
            "2017-11-08T16:58:15Z",
            "2017-11-08T16:52:24Z",
            "2017-11-08T16:16:58Z",
            "2017-11-08T16:15:27Z",
            "2017-11-08T16:14:59Z",
            "2017-11-08T16:11:11Z",
            "2017-11-08T16:10:41Z",
            "2017-11-08T16:08:59Z",
            "2017-11-08T16:06:03Z",
            "2017-11-08T16:03:03Z",
            "2017-07-21T12:40:50Z",
            "2017-07-21T12:33:23Z",
            "2017-07-21T12:33:06Z",
            "2017-07-21T12:23:26Z",
            "2017-01-10T21:52:16Z",
            "2017-01-10T21:51:38Z",
            "2017-01-10T21:50:07Z",
            "2017-01-10T21:49:42Z",
            "2017-01-10T21:49:31Z",
            "2017-01-05T15:15:11Z",
            "2017-01-05T15:14:53Z",
            "2016-12-29T17:38:10Z"
        ],
        "creation_date": "2011-08-28T02:25:27Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 510,
        "readme": "WebViewJavascriptBridge\n=======================\n\n[![Circle CI](https://img.shields.io/circleci/project/github/marcuswestin/WebViewJavascriptBridge.svg)](https://circleci.com/gh/marcuswestin/WebViewJavascriptBridge)\n\nAn iOS/OSX bridge for sending messages between Obj-C and JavaScript in WKWebViews, UIWebViews & WebViews.\n\nMigration Guide\n---------------\n\nWhen upgrading from v5.0.x to 6.0.x you will have to update the `setupWebViewJavascriptBridge` javascript snippet. See https://github.com/marcuswestin/WebViewJavascriptBridge#usage part 4).\n\nWho uses WebViewJavascriptBridge?\n---------------------------------\nWebViewJavascriptBridge is used by a range of companies and projects. This is a small and incomplete sample list:\n\n- [Facebook Messenger](https://www.facebook.com/mobile/messenger)\n- [Facebook Paper](https://facebook.com/paper)\n- [Yardsale](http://www.getyardsale.com/)\n- [EverTrue](http://www.evertrue.com/)\n- [Game Insight](http://www.game-insight.com/)\n- [Sush.io](http://www.sush.io)\n- [Imbed](http://imbed.github.io/)\n- [CareZone](https://carezone.com)\n- [Hemlig](http://www.hemlig.co)\n- [Altralogica](http://www.altralogica.it)\n- [\u9f0e\u76db\u4e2d\u534e](https://itunes.apple.com/us/app/ding-sheng-zhong-hua/id537273940?mt=8)\n- [FRIL](https://fril.jp)\n- [\u7559\u767d\u00b7WHITE](http://liubaiapp.com)\n- [BrowZine](http://thirdiron.com/browzine/)\n- ... & many more!\n\nInstallation (iOS & OSX)\n------------------------\n\n### Installation with CocoaPods\nAdd this to your [podfile](https://guides.cocoapods.org/using/getting-started.html) and run `pod install` to install:\n\n```ruby\npod 'WebViewJavascriptBridge', '~> 6.0'\n```\n\n### Manual installation\n\nDrag the `WebViewJavascriptBridge` folder into your project.\n\nIn the dialog that appears, uncheck \"Copy items into destination group's folder\" and select \"Create groups for any folders\".\n\nExamples\n--------\n\nSee the `Example Apps/` folder. Open either the iOS or OSX project and hit run to see it in action.\n\nTo use a WebViewJavascriptBridge in your own project:\n\nUsage\n-----\n\n1) Import the header file and declare an ivar property:\n\n```objc\n#import \"WebViewJavascriptBridge.h\"\n```\n\n...\n\n```objc\n@property WebViewJavascriptBridge* bridge;\n```\n\n2) Instantiate WebViewJavascriptBridge with a WKWebView, UIWebView (iOS) or WebView (OSX):\n\n```objc\nself.bridge = [WebViewJavascriptBridge bridgeForWebView:webView];\n```\n\n3) Register a handler in ObjC, and call a JS handler:\n\n```objc\n[self.bridge registerHandler:@\"ObjC Echo\" handler:^(id data, WVJBResponseCallback responseCallback) {\n\tNSLog(@\"ObjC Echo called with: %@\", data);\n\tresponseCallback(data);\n}];\n[self.bridge callHandler:@\"JS Echo\" data:nil responseCallback:^(id responseData) {\n\tNSLog(@\"ObjC received response: %@\", responseData);\n}];\n```\n\n4) Copy and paste `setupWebViewJavascriptBridge` into your JS:\n\t\n```javascript\nfunction setupWebViewJavascriptBridge(callback) {\n\tif (window.WebViewJavascriptBridge) { return callback(WebViewJavascriptBridge); }\n\tif (window.WVJBCallbacks) { return window.WVJBCallbacks.push(callback); }\n\twindow.WVJBCallbacks = [callback];\n\tvar WVJBIframe = document.createElement('iframe');\n\tWVJBIframe.style.display = 'none';\n\tWVJBIframe.src = 'https://__bridge_loaded__';\n\tdocument.documentElement.appendChild(WVJBIframe);\n\tsetTimeout(function() { document.documentElement.removeChild(WVJBIframe) }, 0)\n}\n```\n\n5) Finally, call `setupWebViewJavascriptBridge` and then use the bridge to register handlers and call ObjC handlers:\n\n```javascript\nsetupWebViewJavascriptBridge(function(bridge) {\n\t\n\t/* Initialize your app here */\n\n\tbridge.registerHandler('JS Echo', function(data, responseCallback) {\n\t\tconsole.log(\"JS Echo called with:\", data)\n\t\tresponseCallback(data)\n\t})\n\tbridge.callHandler('ObjC Echo', {'key':'value'}, function responseCallback(responseData) {\n\t\tconsole.log(\"JS received response:\", responseData)\n\t})\n})\n```\n\nAutomatic reference counting (ARC)\n----------------------------------\nThis library relies on ARC, so if you use ARC in you project, all works fine.\nBut if your project have no ARC support, be sure to do next steps:\n\n1) In your Xcode project open project settings -> 'Build Phases'\n\n2) Expand 'Compile Sources' header and find all *.m files which are belongs to this library. Make attention on the 'Compiler Flags' in front of each source file in this list\n\n3) For each file add '-fobjc-arc' flag\n\nNow all WVJB files will be compiled with ARC support.\n\nContributors & Forks\n--------------------\nContributors: https://github.com/marcuswestin/WebViewJavascriptBridge/graphs/contributors\n\nForks: https://github.com/marcuswestin/WebViewJavascriptBridge/network/members\n\nAPI Reference\n-------------\n\n### ObjC API\n\n##### `[WebViewJavascriptBridge bridgeForWebView:(WKWebVIew/UIWebView/WebView*)webview`\n\nCreate a javascript bridge for the given web view.\n\nExample:\n\n```objc\t\n[WebViewJavascriptBridge bridgeForWebView:webView];\n```\n\n##### `[bridge registerHandler:(NSString*)handlerName handler:(WVJBHandler)handler]`\n\nRegister a handler called `handlerName`. The javascript can then call this handler with `WebViewJavascriptBridge.callHandler(\"handlerName\")`.\n\nExample:\n\n```objc\n[self.bridge registerHandler:@\"getScreenHeight\" handler:^(id data, WVJBResponseCallback responseCallback) {\n\tresponseCallback([NSNumber numberWithInt:[UIScreen mainScreen].bounds.size.height]);\n}];\n[self.bridge registerHandler:@\"log\" handler:^(id data, WVJBResponseCallback responseCallback) {\n\tNSLog(@\"Log: %@\", data);\n}];\n\n```\n\n##### `[bridge callHandler:(NSString*)handlerName data:(id)data]`\n##### `[bridge callHandler:(NSString*)handlerName data:(id)data responseCallback:(WVJBResponseCallback)callback]`\n\nCall the javascript handler called `handlerName`. If a `responseCallback` block is given the javascript handler can respond.\n\nExample:\n\n```objc\n[self.bridge callHandler:@\"showAlert\" data:@\"Hi from ObjC to JS!\"];\n[self.bridge callHandler:@\"getCurrentPageUrl\" data:nil responseCallback:^(id responseData) {\n\tNSLog(@\"Current UIWebView page URL is: %@\", responseData);\n}];\n```\n\n#### `[bridge setWebViewDelegate:(id)webViewDelegate]`\n\nOptionally, set a `WKNavigationDelegate/UIWebViewDelegate` if you need to respond to the [web view's lifecycle events](https://developer.apple.com/reference/uikit/uiwebviewdelegate).\n\n##### `[bridge disableJavscriptAlertBoxSafetyTimeout]`\n\nUNSAFE. Speed up bridge message passing by disabling the setTimeout safety check. It is only safe to disable this safety check if you do not call any of the javascript popup box functions (alert, confirm, and prompt). If you call any of these functions from the bridged javascript code, the app will hang.\n\nExample:\n\n\t[self.bridge disableJavscriptAlertBoxSafetyTimeout];\n\n\n\n### Javascript API\n\n##### `bridge.registerHandler(\"handlerName\", function(responseData) { ... })`\n\nRegister a handler called `handlerName`. The ObjC can then call this handler with `[bridge callHandler:\"handlerName\" data:@\"Foo\"]` and `[bridge callHandler:\"handlerName\" data:@\"Foo\" responseCallback:^(id responseData) { ... }]`\n\nExample:\n\n```javascript\nbridge.registerHandler(\"showAlert\", function(data) { alert(data) })\nbridge.registerHandler(\"getCurrentPageUrl\", function(data, responseCallback) {\n\tresponseCallback(document.location.toString())\n})\n```\n\n\n##### `bridge.callHandler(\"handlerName\", data)`\n##### `bridge.callHandler(\"handlerName\", data, function responseCallback(responseData) { ... })`\n\nCall an ObjC handler called `handlerName`. If a `responseCallback` function is given the ObjC handler can respond.\n\nExample:\n\n```javascript\nbridge.callHandler(\"Log\", \"Foo\")\nbridge.callHandler(\"getScreenHeight\", null, function(response) {\n\talert('Screen height:' + response)\n})\n```\n\n\n##### `bridge.disableJavscriptAlertBoxSafetyTimeout()`\n\nCalling `bridge.disableJavscriptAlertBoxSafetyTimeout()` has the same effect as calling `[bridge disableJavscriptAlertBoxSafetyTimeout];` in ObjC.\n\nExample:\n\n```javascript\nbridge.disableJavscriptAlertBoxSafetyTimeout()\n```\n",
        "releases": []
    }
}