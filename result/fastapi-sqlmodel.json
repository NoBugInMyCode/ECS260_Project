{
    "https://api.github.com/repos/tiangolo/sqlmodel": {
        "forks": 686,
        "watchers": 15056,
        "stars": 15056,
        "languages": {
            "Python": 1412480,
            "Jinja": 1556,
            "Shell": 386
        },
        "commits": [
            "2025-01-02T21:16:45Z",
            "2025-01-02T21:16:19Z",
            "2024-12-26T15:49:14Z",
            "2024-12-26T15:48:55Z",
            "2024-12-22T14:45:40Z",
            "2024-12-22T14:45:26Z",
            "2024-12-22T14:45:21Z",
            "2024-12-22T14:44:58Z",
            "2024-12-22T14:30:24Z",
            "2024-12-22T14:30:05Z",
            "2024-12-21T12:14:52Z",
            "2024-12-21T12:14:34Z",
            "2024-12-10T11:30:12Z",
            "2024-12-10T11:29:33Z",
            "2024-12-10T11:29:25Z",
            "2024-12-10T11:27:27Z",
            "2024-12-10T11:27:02Z",
            "2024-12-10T11:26:51Z",
            "2024-12-04T17:03:36Z",
            "2024-12-04T17:03:13Z",
            "2024-12-04T15:40:01Z",
            "2024-12-04T15:39:41Z",
            "2024-12-04T15:12:55Z",
            "2024-12-04T15:11:16Z",
            "2024-11-08T09:27:42Z",
            "2024-11-08T09:27:23Z",
            "2024-10-27T08:08:55Z",
            "2024-10-27T08:08:30Z",
            "2024-10-26T22:55:50Z",
            "2024-10-26T22:55:33Z"
        ],
        "creation_date": "2021-08-24T14:26:53Z",
        "contributors": 30,
        "topics": [
            "fastapi",
            "json",
            "json-schema",
            "pydantic",
            "python",
            "sql",
            "sqlalchemy"
        ],
        "subscribers": 138,
        "readme": "<p align=\"center\">\n  <a href=\"https://sqlmodel.tiangolo.com\"><img src=\"https://sqlmodel.tiangolo.com/img/logo-margin/logo-margin-vector.svg#only-light\" alt=\"SQLModel\"></a>\n\n</p>\n<p align=\"center\">\n    <em>SQLModel, SQL databases in Python, designed for simplicity, compatibility, and robustness.</em>\n</p>\n<p align=\"center\">\n<a href=\"https://github.com/fastapi/sqlmodel/actions?query=workflow%3ATest\" target=\"_blank\">\n    <img src=\"https://github.com/fastapi/sqlmodel/workflows/Test/badge.svg\" alt=\"Test\">\n</a>\n<a href=\"https://github.com/fastapi/sqlmodel/actions?query=workflow%3APublish\" target=\"_blank\">\n    <img src=\"https://github.com/fastapi/sqlmodel/workflows/Publish/badge.svg\" alt=\"Publish\">\n</a>\n<a href=\"https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/sqlmodel\" target=\"_blank\">\n    <img src=\"https://coverage-badge.samuelcolvin.workers.dev/fastapi/sqlmodel.svg\" alt=\"Coverage\">\n<a href=\"https://pypi.org/project/sqlmodel\" target=\"_blank\">\n    <img src=\"https://img.shields.io/pypi/v/sqlmodel?color=%2334D058&label=pypi%20package\" alt=\"Package version\">\n</a>\n</p>\n\n---\n\n**Documentation**: <a href=\"https://sqlmodel.tiangolo.com\" target=\"_blank\">https://sqlmodel.tiangolo.com</a>\n\n**Source Code**: <a href=\"https://github.com/fastapi/sqlmodel\" target=\"_blank\">https://github.com/fastapi/sqlmodel</a>\n\n---\n\nSQLModel is a library for interacting with <abbr title='Also called \"Relational databases\"'>SQL databases</abbr> from Python code, with Python objects. It is designed to be intuitive, easy to use, highly compatible, and robust.\n\n**SQLModel** is based on Python type annotations, and powered by <a href=\"https://pydantic-docs.helpmanual.io/\" class=\"external-link\" target=\"_blank\">Pydantic</a> and <a href=\"https://sqlalchemy.org/\" class=\"external-link\" target=\"_blank\">SQLAlchemy</a>.\n\nThe key features are:\n\n* **Intuitive to write**: Great editor support. <abbr title=\"also known as auto-complete, autocompletion, IntelliSense\">Completion</abbr> everywhere. Less time debugging. Designed to be easy to use and learn. Less time reading docs.\n* **Easy to use**: It has sensible defaults and does a lot of work underneath to simplify the code you write.\n* **Compatible**: It is designed to be compatible with **FastAPI**, Pydantic, and SQLAlchemy.\n* **Extensible**: You have all the power of SQLAlchemy and Pydantic underneath.\n* **Short**: Minimize code duplication. A single type annotation does a lot of work. No need to duplicate models in SQLAlchemy and Pydantic.\n\n## Sponsors\n\n<!-- sponsors -->\n\n<a href=\"https://www.govcert.lu\" target=\"_blank\" title=\"This project is being supported by GOVCERT.LU\"><img src=\"https://sqlmodel.tiangolo.com/img/sponsors/govcert.png\"></a>\n\n<!-- /sponsors -->\n\n## SQL Databases in FastAPI\n\n<a href=\"https://fastapi.tiangolo.com\" target=\"_blank\"><img src=\"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" style=\"width: 20%;\"></a>\n\n**SQLModel** is designed to simplify interacting with SQL databases in <a href=\"https://fastapi.tiangolo.com\" class=\"external-link\" target=\"_blank\">FastAPI</a> applications, it was created by the same <a href=\"https://tiangolo.com/\" class=\"external-link\" target=\"_blank\">author</a>. \ud83d\ude01\n\nIt combines SQLAlchemy and Pydantic and tries to simplify the code you write as much as possible, allowing you to reduce the **code duplication to a minimum**, but while getting the **best developer experience** possible.\n\n**SQLModel** is, in fact, a thin layer on top of **Pydantic** and **SQLAlchemy**, carefully designed to be compatible with both.\n\n## Requirements\n\nA recent and currently supported <a href=\"https://www.python.org/downloads/\" class=\"external-link\" target=\"_blank\">version of Python</a>.\n\nAs **SQLModel** is based on **Pydantic** and **SQLAlchemy**, it requires them. They will be automatically installed when you install SQLModel.\n\n## Installation\n\nMake sure you create a <a href=\"https://sqlmodel.tiangolo.com/virtual-environments/\" class=\"external-link\" target=\"_blank\">virtual environment</a>, activate it, and then install SQLModel, for example with:\n\n<div class=\"termy\">\n\n```console\n$ pip install sqlmodel\n---> 100%\nSuccessfully installed sqlmodel\n```\n\n</div>\n\n## Example\n\nFor an introduction to databases, SQL, and everything else, see the <a href=\"https://sqlmodel.tiangolo.com/databases/\" target=\"_blank\">SQLModel documentation</a>.\n\nHere's a quick example. \u2728\n\n### A SQL Table\n\nImagine you have a SQL table called `hero` with:\n\n* `id`\n* `name`\n* `secret_name`\n* `age`\n\nAnd you want it to have this data:\n\n| id | name | secret_name | age |\n-----|------|-------------|------|\n| 1  | Deadpond | Dive Wilson | null |\n| 2  | Spider-Boy | Pedro Parqueador | null |\n| 3  | Rusty-Man | Tommy Sharp | 48 |\n\n### Create a SQLModel Model\n\nThen you could create a **SQLModel** model like this:\n\n```Python\nfrom typing import Optional\n\nfrom sqlmodel import Field, SQLModel\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n```\n\nThat class `Hero` is a **SQLModel** model, the equivalent of a SQL table in Python code.\n\nAnd each of those class attributes is equivalent to each **table column**.\n\n### Create Rows\n\nThen you could **create each row** of the table as an **instance** of the model:\n\n```Python\nhero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\nhero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\nhero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n```\n\nThis way, you can use conventional Python code with **classes** and **instances** that represent **tables** and **rows**, and that way communicate with the **SQL database**.\n\n### Editor Support\n\nEverything is designed for you to get the best developer experience possible, with the best editor support.\n\nIncluding **autocompletion**:\n\n<img class=\"shadow\" src=\"https://sqlmodel.tiangolo.com/img/index/autocompletion01.png\">\n\nAnd **inline errors**:\n\n<img class=\"shadow\" src=\"https://sqlmodel.tiangolo.com/img/index/inline-errors01.png\">\n\n### Write to the Database\n\nYou can learn a lot more about **SQLModel** by quickly following the **tutorial**, but if you need a taste right now of how to put all that together and save to the database, you can do this:\n\n```Python hl_lines=\"18  21  23-27\"\nfrom typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nhero_1 = Hero(name=\"Deadpond\", secret_name=\"Dive Wilson\")\nhero_2 = Hero(name=\"Spider-Boy\", secret_name=\"Pedro Parqueador\")\nhero_3 = Hero(name=\"Rusty-Man\", secret_name=\"Tommy Sharp\", age=48)\n\n\nengine = create_engine(\"sqlite:///database.db\")\n\n\nSQLModel.metadata.create_all(engine)\n\nwith Session(engine) as session:\n    session.add(hero_1)\n    session.add(hero_2)\n    session.add(hero_3)\n    session.commit()\n```\n\nThat will save a **SQLite** database with the 3 heroes.\n\n### Select from the Database\n\nThen you could write queries to select from that same database, for example with:\n\n```Python hl_lines=\"15-18\"\nfrom typing import Optional\n\nfrom sqlmodel import Field, Session, SQLModel, create_engine, select\n\n\nclass Hero(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n    secret_name: str\n    age: Optional[int] = None\n\n\nengine = create_engine(\"sqlite:///database.db\")\n\nwith Session(engine) as session:\n    statement = select(Hero).where(Hero.name == \"Spider-Boy\")\n    hero = session.exec(statement).first()\n    print(hero)\n```\n\n### Editor Support Everywhere\n\n**SQLModel** was carefully designed to give you the best developer experience and editor support, **even after selecting data** from the database:\n\n<img class=\"shadow\" src=\"https://sqlmodel.tiangolo.com/img/index/autocompletion02.png\">\n\n## SQLAlchemy and Pydantic\n\nThat class `Hero` is a **SQLModel** model.\n\nBut at the same time, \u2728 it is a **SQLAlchemy** model \u2728. So, you can combine it and use it with other SQLAlchemy models, or you could easily migrate applications with SQLAlchemy to **SQLModel**.\n\nAnd at the same time, \u2728 it is also a **Pydantic** model \u2728. You can use inheritance with it to define all your **data models** while avoiding code duplication. That makes it very easy to use with **FastAPI**.\n\n## License\n\nThis project is licensed under the terms of the [MIT license](https://github.com/fastapi/sqlmodel/blob/main/LICENSE).\n",
        "releases": [
            {
                "name": "0.0.22",
                "date": "2024-08-31T09:42:46Z"
            },
            {
                "name": "0.0.21",
                "date": "2024-07-21T02:13:20Z"
            },
            {
                "name": "0.0.20",
                "date": "2024-07-17T02:54:42Z"
            },
            {
                "name": "0.0.19",
                "date": "2024-06-04T03:29:16Z"
            },
            {
                "name": "0.0.18",
                "date": "2024-04-30T06:30:05Z"
            },
            {
                "name": "0.0.17",
                "date": "2024-04-29T23:49:12Z"
            },
            {
                "name": "0.0.16",
                "date": "2024-02-17T13:54:28Z"
            },
            {
                "name": "0.0.15",
                "date": "2024-02-17T13:41:23Z"
            },
            {
                "name": "0.0.14",
                "date": "2023-12-04T14:53:29Z"
            },
            {
                "name": "0.0.13",
                "date": "2023-12-04T12:20:44Z"
            },
            {
                "name": "0.0.12",
                "date": "2023-11-18T11:34:40Z"
            },
            {
                "name": "0.0.11",
                "date": "2023-10-29T09:58:11Z"
            },
            {
                "name": "0.0.10",
                "date": "2023-10-26T14:37:46Z"
            },
            {
                "name": "0.0.9",
                "date": "2023-10-23T21:04:58Z"
            },
            {
                "name": "0.0.8",
                "date": "2022-08-30T17:56:11Z"
            },
            {
                "name": "0.0.7",
                "date": "2022-08-28T00:01:48Z"
            },
            {
                "name": "0.0.6",
                "date": "2021-12-28T11:29:56Z"
            },
            {
                "name": "0.0.5",
                "date": "2021-12-13T11:43:52Z"
            },
            {
                "name": "0.0.4",
                "date": "2021-08-25T13:48:05Z"
            },
            {
                "name": "0.0.3",
                "date": "2021-08-24T18:47:16Z"
            },
            {
                "name": "0.0.2",
                "date": "2021-08-24T18:27:58Z"
            }
        ]
    }
}