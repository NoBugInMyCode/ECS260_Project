{
    "https://api.github.com/repos/redis/go-redis": {
        "forks": 2400,
        "watchers": 20383,
        "stars": 20383,
        "languages": {
            "Go": 1475098,
            "Shell": 2385,
            "Makefile": 1460
        },
        "commits": [
            "2025-01-20T09:32:10Z",
            "2025-01-17T11:02:55Z",
            "2025-01-17T08:29:51Z",
            "2025-01-15T09:24:47Z",
            "2024-12-16T17:04:39Z",
            "2024-12-05T08:11:12Z",
            "2024-12-05T08:10:04Z",
            "2024-11-21T12:38:38Z",
            "2024-11-21T12:38:11Z",
            "2024-11-20T12:36:39Z",
            "2024-11-20T11:38:06Z",
            "2024-11-13T11:20:59Z",
            "2024-11-13T09:15:19Z",
            "2024-11-13T08:27:00Z",
            "2024-11-06T15:25:46Z",
            "2024-10-23T14:47:25Z",
            "2024-10-15T13:32:53Z",
            "2024-10-14T13:52:50Z",
            "2024-10-14T11:37:22Z",
            "2024-10-09T10:44:29Z",
            "2024-10-09T10:42:24Z",
            "2024-10-09T10:40:21Z",
            "2024-10-09T10:38:32Z",
            "2024-10-09T10:36:42Z",
            "2024-10-09T10:33:46Z",
            "2024-10-09T10:31:14Z",
            "2024-10-09T10:24:47Z",
            "2024-10-09T06:14:34Z",
            "2024-10-09T05:56:44Z",
            "2024-10-07T09:23:11Z"
        ],
        "creation_date": "2012-07-25T13:01:39Z",
        "contributors": 30,
        "topics": [
            "go",
            "golang",
            "redis",
            "redis-client",
            "redis-cluster"
        ],
        "subscribers": 261,
        "readme": "# Redis client for Go\n\n[![build workflow](https://github.com/redis/go-redis/actions/workflows/build.yml/badge.svg)](https://github.com/redis/go-redis/actions)\n[![PkgGoDev](https://pkg.go.dev/badge/github.com/redis/go-redis/v9)](https://pkg.go.dev/github.com/redis/go-redis/v9?tab=doc)\n[![Documentation](https://img.shields.io/badge/redis-documentation-informational)](https://redis.uptrace.dev/)\n[![codecov](https://codecov.io/github/redis/go-redis/graph/badge.svg?token=tsrCZKuSSw)](https://codecov.io/github/redis/go-redis)\n[![Chat](https://discordapp.com/api/guilds/752070105847955518/widget.png)](https://discord.gg/rWtp5Aj)\n\n> go-redis is brought to you by :star: [**uptrace/uptrace**](https://github.com/uptrace/uptrace).\n> Uptrace is an open-source APM tool that supports distributed tracing, metrics, and logs. You can\n> use it to monitor applications and set up automatic alerts to receive notifications via email,\n> Slack, Telegram, and others.\n>\n> See [OpenTelemetry](https://github.com/redis/go-redis/tree/master/example/otel) example which\n> demonstrates how you can use Uptrace to monitor go-redis.\n\n## How do I Redis?\n\n[Learn for free at Redis University](https://university.redis.com/)\n\n[Build faster with the Redis Launchpad](https://launchpad.redis.com/)\n\n[Try the Redis Cloud](https://redis.com/try-free/)\n\n[Dive in developer tutorials](https://developer.redis.com/)\n\n[Join the Redis community](https://redis.com/community/)\n\n[Work at Redis](https://redis.com/company/careers/jobs/)\n\n## Documentation\n\n- [English](https://redis.uptrace.dev)\n- [\u7b80\u4f53\u4e2d\u6587](https://redis.uptrace.dev/zh/)\n\n## Resources\n\n- [Discussions](https://github.com/redis/go-redis/discussions)\n- [Chat](https://discord.gg/rWtp5Aj)\n- [Reference](https://pkg.go.dev/github.com/redis/go-redis/v9)\n- [Examples](https://pkg.go.dev/github.com/redis/go-redis/v9#pkg-examples)\n\n## Ecosystem\n\n- [Redis Mock](https://github.com/go-redis/redismock)\n- [Distributed Locks](https://github.com/bsm/redislock)\n- [Redis Cache](https://github.com/go-redis/cache)\n- [Rate limiting](https://github.com/go-redis/redis_rate)\n\nThis client also works with [Kvrocks](https://github.com/apache/incubator-kvrocks), a distributed\nkey value NoSQL database that uses RocksDB as storage engine and is compatible with Redis protocol.\n\n## Features\n\n- Redis commands except QUIT and SYNC.\n- Automatic connection pooling.\n- [Pub/Sub](https://redis.uptrace.dev/guide/go-redis-pubsub.html).\n- [Pipelines and transactions](https://redis.uptrace.dev/guide/go-redis-pipelines.html).\n- [Scripting](https://redis.uptrace.dev/guide/lua-scripting.html).\n- [Redis Sentinel](https://redis.uptrace.dev/guide/go-redis-sentinel.html).\n- [Redis Cluster](https://redis.uptrace.dev/guide/go-redis-cluster.html).\n- [Redis Ring](https://redis.uptrace.dev/guide/ring.html).\n- [Redis Performance Monitoring](https://redis.uptrace.dev/guide/redis-performance-monitoring.html).\n- [Redis Probabilistic [RedisStack]](https://redis.io/docs/data-types/probabilistic/)\n\n## Installation\n\ngo-redis supports 2 last Go versions and requires a Go version with\n[modules](https://github.com/golang/go/wiki/Modules) support. So make sure to initialize a Go\nmodule:\n\n```shell\ngo mod init github.com/my/repo\n```\n\nThen install go-redis/**v9**:\n\n```shell\ngo get github.com/redis/go-redis/v9\n```\n\n## Quickstart\n\n```go\nimport (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/redis/go-redis/v9\"\n)\n\nvar ctx = context.Background()\n\nfunc ExampleClient() {\n    rdb := redis.NewClient(&redis.Options{\n        Addr:     \"localhost:6379\",\n        Password: \"\", // no password set\n        DB:       0,  // use default DB\n    })\n\n    err := rdb.Set(ctx, \"key\", \"value\", 0).Err()\n    if err != nil {\n        panic(err)\n    }\n\n    val, err := rdb.Get(ctx, \"key\").Result()\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(\"key\", val)\n\n    val2, err := rdb.Get(ctx, \"key2\").Result()\n    if err == redis.Nil {\n        fmt.Println(\"key2 does not exist\")\n    } else if err != nil {\n        panic(err)\n    } else {\n        fmt.Println(\"key2\", val2)\n    }\n    // Output: key value\n    // key2 does not exist\n}\n```\n\nThe above can be modified to specify the version of the RESP protocol by adding the `protocol`\noption to the `Options` struct:\n\n```go\n    rdb := redis.NewClient(&redis.Options{\n        Addr:     \"localhost:6379\",\n        Password: \"\", // no password set\n        DB:       0,  // use default DB\n        Protocol: 3, // specify 2 for RESP 2 or 3 for RESP 3\n    })\n\n```\n\n### Connecting via a redis url\n\ngo-redis also supports connecting via the\n[redis uri specification](https://github.com/redis/redis-specifications/tree/master/uri/redis.txt).\nThe example below demonstrates how the connection can easily be configured using a string, adhering\nto this specification.\n\n```go\nimport (\n    \"github.com/redis/go-redis/v9\"\n)\n\nfunc ExampleClient() *redis.Client {\n    url := \"redis://user:password@localhost:6379/0?protocol=3\"\n    opts, err := redis.ParseURL(url)\n    if err != nil {\n        panic(err)\n    }\n\n    return redis.NewClient(opts)\n}\n\n```\n\n\n### Advanced Configuration\n\ngo-redis supports extending the client identification phase to allow projects to send their own custom client identification.\n\n#### Default Client Identification\n\nBy default, go-redis automatically sends the client library name and version during the connection process. This feature is available in redis-server as of version 7.2. As a result, the command is \"fire and forget\", meaning it should fail silently, in the case that the redis server does not support this feature.\n\n#### Disabling Identity Verification\n\nWhen connection identity verification is not required or needs to be explicitly disabled, a `DisableIndentity` configuration option exists. In V10 of this library, `DisableIndentity` will become `DisableIdentity` in order to fix the associated typo.\n\nTo disable verification, set the `DisableIndentity` option to `true` in the Redis client options:\n\n```go\nrdb := redis.NewClient(&redis.Options{\n    Addr:            \"localhost:6379\",\n    Password:        \"\",\n    DB:              0,\n    DisableIndentity: true, // Disable set-info on connect\n})\n```\n\n#### Unstable RESP3 Structures for RediSearch Commands\nWhen integrating Redis with application functionalities using RESP3, it's important to note that some response structures aren't final yet. This is especially true for more complex structures like search and query results. We recommend using RESP2 when using the search and query capabilities, but we plan to stabilize the RESP3-based API-s in the coming versions. You can find more guidance in the upcoming release notes.\n\nTo enable unstable RESP3, set the option in your client configuration:\n\n```go\nredis.NewClient(&redis.Options{\n\t\t\tUnstableResp3: true,\n\t\t})\n```\n**Note:** When UnstableResp3 mode is enabled, it's necessary to use RawResult() and RawVal() to retrieve a raw data.\n          Since, raw response is the only option for unstable search commands Val() and Result() calls wouldn't have any affect on them:\n\n```go\nres1, err := client.FTSearchWithArgs(ctx, \"txt\", \"foo bar\", &redis.FTSearchOptions{}).RawResult()\nval1 := client.FTSearchWithArgs(ctx, \"txt\", \"foo bar\", &redis.FTSearchOptions{}).RawVal()\n```\n\n## Contributing\n\nPlease see [out contributing guidelines](CONTRIBUTING.md) to help us improve this library!\n\n## Look and feel\n\nSome corner cases:\n\n```go\n// SET key value EX 10 NX\nset, err := rdb.SetNX(ctx, \"key\", \"value\", 10*time.Second).Result()\n\n// SET key value keepttl NX\nset, err := rdb.SetNX(ctx, \"key\", \"value\", redis.KeepTTL).Result()\n\n// SORT list LIMIT 0 2 ASC\nvals, err := rdb.Sort(ctx, \"list\", &redis.Sort{Offset: 0, Count: 2, Order: \"ASC\"}).Result()\n\n// ZRANGEBYSCORE zset -inf +inf WITHSCORES LIMIT 0 2\nvals, err := rdb.ZRangeByScoreWithScores(ctx, \"zset\", &redis.ZRangeBy{\n    Min: \"-inf\",\n    Max: \"+inf\",\n    Offset: 0,\n    Count: 2,\n}).Result()\n\n// ZINTERSTORE out 2 zset1 zset2 WEIGHTS 2 3 AGGREGATE SUM\nvals, err := rdb.ZInterStore(ctx, \"out\", &redis.ZStore{\n    Keys: []string{\"zset1\", \"zset2\"},\n    Weights: []int64{2, 3}\n}).Result()\n\n// EVAL \"return {KEYS[1],ARGV[1]}\" 1 \"key\" \"hello\"\nvals, err := rdb.Eval(ctx, \"return {KEYS[1],ARGV[1]}\", []string{\"key\"}, \"hello\").Result()\n\n// custom command\nres, err := rdb.Do(ctx, \"set\", \"key\", \"value\").Result()\n```\n\n## Run the test\n\ngo-redis will start a redis-server and run the test cases.\n\nThe paths of redis-server bin file and redis config file are defined in `main_test.go`:\n\n```go\nvar (\n\tredisServerBin, _  = filepath.Abs(filepath.Join(\"testdata\", \"redis\", \"src\", \"redis-server\"))\n\tredisServerConf, _ = filepath.Abs(filepath.Join(\"testdata\", \"redis\", \"redis.conf\"))\n)\n```\n\nFor local testing, you can change the variables to refer to your local files, or create a soft link\nto the corresponding folder for redis-server and copy the config file to `testdata/redis/`:\n\n```shell\nln -s /usr/bin/redis-server ./go-redis/testdata/redis/src\ncp ./go-redis/testdata/redis.conf ./go-redis/testdata/redis/\n```\n\nLastly, run:\n\n```shell\ngo test\n```\n\nAnother option is to run your specific tests with an already running redis. The example below, tests\nagainst a redis running on port 9999.:\n\n```shell\nREDIS_PORT=9999 go test <your options>\n```\n\n## See also\n\n- [Golang ORM](https://bun.uptrace.dev) for PostgreSQL, MySQL, MSSQL, and SQLite\n- [Golang PostgreSQL](https://bun.uptrace.dev/postgres/)\n- [Golang HTTP router](https://bunrouter.uptrace.dev/)\n- [Golang ClickHouse ORM](https://github.com/uptrace/go-clickhouse)\n\n## Contributors\n\nThanks to all the people who already contributed!\n\n<a href=\"https://github.com/redis/go-redis/graphs/contributors\">\n  <img src=\"https://contributors-img.web.app/image?repo=redis/go-redis\" />\n</a>\n",
        "releases": [
            {
                "name": "9.7.0",
                "date": "2024-10-17T09:58:13Z"
            },
            {
                "name": "9.6.2",
                "date": "2024-10-14T11:28:42Z"
            },
            {
                "name": "9.7.0-beta.1",
                "date": "2024-09-26T10:33:32Z"
            },
            {
                "name": "9.6.1",
                "date": "2024-07-25T08:09:58Z"
            },
            {
                "name": "9.6.0",
                "date": "2024-07-19T07:19:16Z"
            },
            {
                "name": "9.6.0b2",
                "date": "2024-06-20T08:50:51Z"
            },
            {
                "name": "9.6.0b1",
                "date": "2024-06-19T23:45:17Z"
            },
            {
                "name": "9.5.2",
                "date": "2024-05-31T02:51:37Z"
            },
            {
                "name": "9.5.1",
                "date": "2024-02-20T15:46:31Z"
            },
            {
                "name": "9.5.0",
                "date": "2024-02-18T17:33:00Z"
            },
            {
                "name": "9.4.0",
                "date": "2024-01-07T10:33:04Z"
            },
            {
                "name": "9.3.1",
                "date": "2023-12-19T11:00:56Z"
            },
            {
                "name": "9.3.0",
                "date": "2023-10-31T15:04:50Z"
            },
            {
                "name": "9.2.1",
                "date": "2023-09-27T08:38:54Z"
            },
            {
                "name": "9.2.0",
                "date": "2023-09-20T15:02:33Z"
            },
            {
                "name": "9.1.0",
                "date": "2023-08-17T12:47:35Z"
            },
            {
                "name": "9.0.5",
                "date": "2023-05-29T06:06:51Z"
            },
            {
                "name": "9.0.4",
                "date": "2023-05-02T05:42:25Z"
            },
            {
                "name": "9.0.3",
                "date": "2023-04-02T12:16:58Z"
            },
            {
                "name": "v9.0.2",
                "date": "2023-02-01T08:15:10Z"
            },
            {
                "name": "v9.0.1",
                "date": "2023-01-30T08:25:30Z"
            },
            {
                "name": "v9.0.0",
                "date": "2023-01-30T07:14:16Z"
            },
            {
                "name": "v9.0.0-rc.4",
                "date": "2023-01-24T14:24:51Z"
            },
            {
                "name": "v9.0.0-rc.3",
                "date": "2023-01-24T14:11:29Z"
            },
            {
                "name": "v9.0.0-rc.2",
                "date": "2022-11-26T12:39:23Z"
            },
            {
                "name": "v9.0.0-rc.1",
                "date": "2022-10-14T14:05:33Z"
            },
            {
                "name": "v9.0.0-beta.3",
                "date": "2022-10-06T11:08:55Z"
            },
            {
                "name": "v9.0.0-beta.2",
                "date": "2022-07-28T13:05:21Z"
            },
            {
                "name": "v9.0.0-beta.1",
                "date": "2022-06-04T15:20:14Z"
            },
            {
                "name": "v8.11.5",
                "date": "2022-03-17T13:28:26Z"
            },
            {
                "name": "v8.11.4",
                "date": "2021-10-04T13:41:28Z"
            },
            {
                "name": "v8.11.2",
                "date": "2021-08-06T09:20:31Z"
            },
            {
                "name": "v8.11.1",
                "date": "2021-07-29T07:17:57Z"
            },
            {
                "name": "v7.4.1",
                "date": "2021-07-16T07:45:15Z"
            },
            {
                "name": "v8.11.0",
                "date": "2021-06-30T11:06:03Z"
            },
            {
                "name": "v8.10.0",
                "date": "2021-06-03T11:08:46Z"
            }
        ]
    }
}