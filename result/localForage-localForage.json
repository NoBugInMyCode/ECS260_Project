{
    "https://api.github.com/repos/localForage/localForage": {
        "forks": 1272,
        "watchers": 25128,
        "stars": 25128,
        "languages": {
            "JavaScript": 273016,
            "HTML": 14462,
            "TypeScript": 9353
        },
        "commits": [
            "2024-07-30T20:27:14Z",
            "2023-07-20T12:38:55Z",
            "2022-12-23T23:04:15Z",
            "2021-11-20T17:20:15Z",
            "2021-10-03T10:15:28Z",
            "2021-08-18T21:21:42Z",
            "2021-08-18T15:29:38Z",
            "2020-07-31T18:35:14Z",
            "2020-07-31T18:31:36Z",
            "2020-07-24T12:54:40Z",
            "2020-07-21T13:15:38Z",
            "2020-07-20T22:33:39Z",
            "2020-07-20T22:17:16Z",
            "2020-07-20T21:23:22Z",
            "2020-07-19T14:42:55Z",
            "2020-07-05T13:31:46Z",
            "2020-07-02T14:59:59Z",
            "2020-06-26T19:30:21Z",
            "2020-06-26T19:27:18Z",
            "2020-06-26T13:00:38Z",
            "2020-06-26T07:15:57Z",
            "2020-06-26T07:15:51Z",
            "2020-06-24T11:39:00Z",
            "2020-06-05T20:38:59Z",
            "2020-06-04T23:42:52Z",
            "2020-06-04T23:21:49Z",
            "2020-05-25T17:08:26Z",
            "2020-05-16T21:46:16Z",
            "2020-05-06T23:55:22Z",
            "2020-02-17T18:14:44Z"
        ],
        "creation_date": "2013-10-31T00:10:06Z",
        "contributors": 30,
        "topics": [
            "indexeddb",
            "javascript",
            "localforage",
            "localstorage",
            "offline",
            "storage",
            "websql"
        ],
        "subscribers": 309,
        "readme": "# localForage\n[![NPM version](https://badge.fury.io/js/localforage.svg)](http://badge.fury.io/js/localforage)\n[![npm](https://img.shields.io/npm/dm/localforage.svg?maxAge=2592000)](https://npmcharts.com/compare/localforage?minimal=true)\n[![jsDelivr Hits](https://data.jsdelivr.com/v1/package/npm/localforage/badge?style=rounded)](https://www.jsdelivr.com/package/npm/localforage)\n[![minzipped size](https://badgen.net/bundlephobia/minzip/localforage)](https://bundlephobia.com/result?p=localforage@1.10.0)\n\nlocalForage is a fast and simple storage library for JavaScript. localForage\nimproves the offline experience of your web app by using asynchronous storage\n(IndexedDB or WebSQL) with a simple, `localStorage`-like API.\n\nlocalForage uses localStorage in browsers with no IndexedDB or\nWebSQL support. See [the wiki for detailed compatibility info][supported browsers].\n\nTo use localForage, just drop a single JavaScript file into your page:\n\n```html\n<script src=\"localforage/dist/localforage.js\"></script>\n<script>localforage.getItem('something', myCallback);</script>\n```\nTry the [live example](http://codepen.io/thgreasi/pen/ojYKeE).\n\nDownload the [latest localForage from GitHub](https://github.com/localForage/localForage/releases/latest), or install with\n[npm](https://www.npmjs.com/):\n\n```bash\nnpm install localforage\n```\n\n[supported browsers]: https://github.com/localForage/localForage/wiki/Supported-Browsers-Platforms\n\n## Support\n\nLost? Need help? Try the\n[localForage API documentation](https://localforage.github.io/localForage). [localForage API\u6587\u6863\u4e5f\u6709\u4e2d\u6587\u7248\u3002](https://localforage.docschina.org)\n\nIf you're having trouble using the library, running the tests, or want to contribute to localForage, please look through the [existing issues](https://github.com/localForage/localForage/issues) for your problem first before creating a new one. If you still need help, [feel free to file an issue](https://github.com/localForage/localForage/issues/new).\n\n# How to use localForage\n\n## Callbacks vs Promises\n\nBecause localForage uses async storage, it has an async API.\nIt's otherwise exactly the same as the\n[localStorage API](https://hacks.mozilla.org/2009/06/localstorage/).\n\nlocalForage has a dual API that allows you to either use Node-style callbacks\nor [Promises](https://www.promisejs.org/). If you are unsure which one is right for you, it's recommended to use Promises.\n\nHere's an example of the Node-style callback form:\n\n```js\nlocalforage.setItem('key', 'value', function (err) {\n  // if err is non-null, we got an error\n  localforage.getItem('key', function (err, value) {\n    // if err is non-null, we got an error. otherwise, value is the value\n  });\n});\n```\n\nAnd the Promise form:\n\n```js\nlocalforage.setItem('key', 'value').then(function () {\n  return localforage.getItem('key');\n}).then(function (value) {\n  // we got our value\n}).catch(function (err) {\n  // we got an error\n});\n```\n\nOr, use `async`/`await`:\n\n```js\ntry {\n    const value = await localforage.getItem('somekey');\n    // This code runs once the value has been loaded\n    // from the offline store.\n    console.log(value);\n} catch (err) {\n    // This code runs if there were any errors.\n    console.log(err);\n}\n```\n\nFor more examples, please visit [the API docs](https://localforage.github.io/localForage).\n\n## Storing Blobs, TypedArrays, and other JS objects\n\nYou can store any type in localForage; you aren't limited to strings like in\nlocalStorage. Even if localStorage is your storage backend, localForage\nautomatically does `JSON.parse()` and `JSON.stringify()` when getting/setting\nvalues.\n\nlocalForage supports storing all native JS objects that can be serialized to\nJSON, as well as ArrayBuffers, Blobs, and TypedArrays. Check the\n[API docs][api] for a full list of types supported by localForage.\n\nAll types are supported in every storage backend, though storage limits in\nlocalStorage make storing many large Blobs impossible.\n\n[api]: https://localforage.github.io/localForage/#data-api-setitem\n\n## Configuration\n\nYou can set database information with the `config()` method.\nAvailable options are `driver`, `name`, `storeName`, `version`, `size`, and\n`description`.\n\nExample:\n```javascript\nlocalforage.config({\n    driver      : localforage.WEBSQL, // Force WebSQL; same as using setDriver()\n    name        : 'myApp',\n    version     : 1.0,\n    size        : 4980736, // Size of database, in bytes. WebSQL-only for now.\n    storeName   : 'keyvaluepairs', // Should be alphanumeric, with underscores.\n    description : 'some description'\n});\n```\n\n**Note:** you must call `config()` _before_ you interact with your data. This\nmeans calling `config()` before using `getItem()`, `setItem()`, `removeItem()`,\n`clear()`, `key()`, `keys()` or `length()`.\n\n## Multiple instances\n\nYou can create multiple instances of localForage that point to different stores\nusing `createInstance`. All the configuration options used by\n[`config`](#configuration) are supported.\n\n``` javascript\nvar store = localforage.createInstance({\n  name: \"nameHere\"\n});\n\nvar otherStore = localforage.createInstance({\n  name: \"otherName\"\n});\n\n// Setting the key on one of these doesn't affect the other.\nstore.setItem(\"key\", \"value\");\notherStore.setItem(\"key\", \"value2\");\n```\n\n## RequireJS\n\nYou can use localForage with [RequireJS](http://requirejs.org/):\n\n```javascript\ndefine(['localforage'], function(localforage) {\n    // As a callback:\n    localforage.setItem('mykey', 'myvalue', console.log);\n\n    // With a Promise:\n    localforage.setItem('mykey', 'myvalue').then(console.log);\n});\n```\n\n## TypeScript\n\nIf you have the [`allowSyntheticDefaultImports` compiler option](https://www.typescriptlang.org/docs/handbook/compiler-options.html) set to `true` in your [tsconfig.json](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html) (supported in TypeScript v1.8+), you should use:\n\n```javascript\nimport localForage from \"localforage\";\n```\n\nOtherwise you should use one of the following:\n\n```javascript\nimport * as localForage from \"localforage\";\n// or, in case that the typescript version that you are using\n// doesn't support ES6 style imports for UMD modules like localForage\nimport localForage = require(\"localforage\");\n```\n\n## Framework Support\n\nIf you use a framework listed, there's a localForage storage driver for the\nmodels in your framework so you can store data offline with localForage. We\nhave drivers for the following frameworks:\n\n* [AngularJS](https://github.com/ocombe/angular-localForage)\n* [Angular 4 and up](https://github.com/Alorel/ngforage/)\n* [Backbone](https://github.com/localForage/localForage-backbone)\n* [Ember](https://github.com/genkgo/ember-localforage-adapter)\n* [Vue](https://github.com/dmlzj/vlf)\n* [NuxtJS](https://github.com/nuxt-community/localforage-module)\n\nIf you have a driver you'd like listed, please\n[open an issue](https://github.com/localForage/localForage/issues/new) to have it\nadded to this list.\n\n## Custom Drivers\n\nYou can create your own driver if you want; see the\n[`defineDriver`](https://localforage.github.io/localForage/#driver-api-definedriver) API docs.\n\nThere is a [list of custom drivers on the wiki][custom drivers].\n\n[custom drivers]: https://github.com/localForage/localForage/wiki/Custom-Drivers\n\n# Working on localForage\n\nYou'll need [node/npm](http://nodejs.org/) and\n[bower](http://bower.io/#installing-bower).\n\nTo work on localForage, you should start by\n[forking it](https://github.com/localForage/localForage/fork) and installing its\ndependencies. Replace `USERNAME` with your GitHub username and run the\nfollowing:\n\n```bash\n# Install bower globally if you don't have it:\nnpm install -g bower\n\n# Replace USERNAME with your GitHub username:\ngit clone git@github.com:USERNAME/localForage.git\ncd localForage\nnpm install\nbower install\n```\n\nOmitting the bower dependencies will cause the tests to fail!\n\n## Running Tests\n\nYou need PhantomJS installed to run local tests. Run `npm test` (or,\ndirectly: `grunt test`). Your code must also pass the\n[linter](http://jshint.com/).\n\nlocalForage is designed to run in the browser, so the tests explicitly require\na browser environment. Local tests are run on a headless WebKit (using\n[PhantomJS](http://phantomjs.org)).\n\nWhen you submit a pull request, tests will be run against all browsers that\nlocalForage supports on Travis CI using [Sauce Labs](https://saucelabs.com/).\n\n## Library Size\nAs of version 1.7.3 the payload added to your app is rather small. Served using gzip compression, localForage will add less than 10k to your total bundle size:\n\n<dl>\n  <dt>minified</dt><dd>`~29kB`</dd>\n  <dt>gzipped</dt><dd>`~8.8kB`</dd>\n  <dt>brotli'd</dt><dd>`~7.8kB`</dd>\n</dl>\n\n# License\n\nThis program is free software; it is distributed under an\n[Apache License](https://github.com/localForage/localForage/blob/master/LICENSE).\n\n---\n\nCopyright (c) 2013-2016 [Mozilla](https://mozilla.org)\n([Contributors](https://github.com/localForage/localForage/graphs/contributors)).\n",
        "releases": [
            {
                "name": "Avoid dropInstance uncaught errors",
                "date": "2021-08-18T21:22:59Z"
            },
            {
                "name": "Improved TypeScript definition",
                "date": "2020-07-31T18:37:54Z"
            },
            {
                "name": "Added ESM support",
                "date": "2020-07-20T22:34:25Z"
            },
            {
                "name": "Improvement to key() retrieval",
                "date": "2020-06-05T20:39:57Z"
            },
            {
                "name": "Add npmignore",
                "date": "2018-10-26T22:47:17Z"
            },
            {
                "name": "Revert module support in package.json (for now)",
                "date": "2018-03-30T18:51:46Z"
            },
            {
                "name": "Add support for package.json \"module\" prop",
                "date": "2018-03-30T09:12:34Z"
            },
            {
                "name": "Add dropInstance() method!",
                "date": "2018-03-03T09:08:02Z"
            },
            {
                "name": "Fix IE8 localStorage support detection",
                "date": "2018-02-23T10:39:25Z"
            },
            {
                "name": "Upgrade lie to work with yarn",
                "date": "2018-01-18T14:01:45Z"
            },
            {
                "name": "Roll back dropInstance breaking change",
                "date": "2017-11-29T18:14:50Z"
            },
            {
                "name": "Set null as undefined (for Edge)",
                "date": "2017-11-28T18:41:42Z"
            },
            {
                "name": "Detect unusable LocalStorage on Safari",
                "date": "2017-10-28T19:04:58Z"
            },
            {
                "name": "Re-establish IDB connection after an InvalidStateError",
                "date": "2017-10-08T15:24:07Z"
            },
            {
                "name": "Safari IndexedDB support!",
                "date": "2017-02-18T15:32:45Z"
            },
            {
                "name": "Fix infinite loop bug and lie Promise bug",
                "date": "2016-02-11T04:36:47Z"
            },
            {
                "name": "ES6 Code and Webpack",
                "date": "2015-10-09T00:07:11Z"
            },
            {
                "name": "Iterate functionality",
                "date": "2014-11-16T18:23:08Z"
            },
            {
                "name": "Custom Driver Support",
                "date": "2014-10-19T20:35:39Z"
            },
            {
                "name": "Stable API",
                "date": "2014-10-01T03:39:09Z"
            },
            {
                "name": "Improved tests and keys() method",
                "date": "2014-07-03T15:40:08Z"
            },
            {
                "name": "Web Worker Support",
                "date": "2014-05-06T00:03:06Z"
            },
            {
                "name": "New config and error handling",
                "date": "2014-04-22T23:48:57Z"
            },
            {
                "name": "Fix bug on Samsung Android Phone Browsers",
                "date": "2014-04-06T16:58:23Z"
            },
            {
                "name": "Load storage driver after API call",
                "date": "2014-04-02T02:59:29Z"
            },
            {
                "name": "0.2.0 - Binary Data Support",
                "date": "2014-03-20T00:23:17Z"
            }
        ]
    }
}