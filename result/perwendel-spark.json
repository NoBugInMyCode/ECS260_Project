{
    "https://api.github.com/repos/perwendel/spark": {
        "forks": 1563,
        "watchers": 9656,
        "stars": 9656,
        "languages": {
            "Java": 703473,
            "JavaScript": 103,
            "HTML": 96,
            "CSS": 19,
            "FreeMarker": 19
        },
        "commits": [
            "2022-07-10T11:06:37Z",
            "2022-07-09T18:49:58Z",
            "2022-07-09T18:34:26Z",
            "2022-07-09T18:33:45Z",
            "2022-06-27T09:25:25Z",
            "2020-11-18T20:40:59Z",
            "2020-11-18T20:40:35Z",
            "2020-11-18T20:38:30Z",
            "2020-11-18T20:29:56Z",
            "2020-11-15T17:16:45Z",
            "2020-11-15T17:16:14Z",
            "2020-11-15T17:13:52Z",
            "2020-11-15T16:51:39Z",
            "2020-11-15T16:51:24Z",
            "2020-11-15T16:48:04Z",
            "2020-11-15T16:45:36Z",
            "2020-10-18T15:35:34Z",
            "2020-10-13T12:19:48Z",
            "2020-10-12T15:37:53Z",
            "2020-10-12T15:34:00Z",
            "2020-10-12T15:32:49Z",
            "2020-10-08T13:09:06Z",
            "2020-10-08T13:08:51Z",
            "2020-10-08T13:07:24Z",
            "2020-10-08T13:01:08Z",
            "2020-10-08T12:58:18Z",
            "2020-10-08T11:06:59Z",
            "2020-10-07T17:49:28Z",
            "2020-10-07T17:45:28Z",
            "2020-10-07T17:44:10Z"
        ],
        "creation_date": "2011-05-05T11:52:05Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 402,
        "readme": "[![](https://img.shields.io/travis/perwendel/spark.svg)](https://travis-ci.org/perwendel/spark)\n[![](https://img.shields.io/github/license/perwendel/spark.svg)](./LICENSE)\n[![](https://img.shields.io/maven-central/v/com.sparkjava/spark-core.svg)](http://mvnrepository.com/artifact/com.sparkjava/spark-core)\n\nSpark - a tiny web framework for Java 8\n==============================================\n\n**Spark 2.9.4 is out!!**\n```xml\n<dependency>\n    <groupId>com.sparkjava</groupId>\n    <artifactId>spark-core</artifactId>\n    <version>2.9.4</version>\n</dependency>\n```\n\nSponsor the project here https://github.com/sponsors/perwendel\n\nFor documentation please go to: http://sparkjava.com/documentation\n\nFor usage questions, please use [stack overflow with the \u201cspark-java\u201d tag](http://stackoverflow.com/questions/tagged/spark-java) \n\nJavadoc: http://javadoc.io/doc/com.sparkjava/spark-core\n\nWhen committing to the project please use Spark format configured in https://github.com/perwendel/spark/blob/master/config/spark_formatter_intellij.xml\n\nGetting started\n---------------\n\n```xml\n<dependency>\n    <groupId>com.sparkjava</groupId>\n    <artifactId>spark-core</artifactId>\n    <version>2.9.4</version>\n</dependency>\n```\n\n```java\nimport static spark.Spark.*;\n\npublic class HelloWorld {\n    public static void main(String[] arg){\n        get(\"/hello\", (request, response) -> \"Hello World!\");\n    }\n}\n```\n\nView at: http://localhost:4567/hello\n\n\nCheck out and try the examples in the source code.\nYou can also check out the javadoc. After getting the source from\n[github](https://github.com/perwendel/spark) run: \n\n    mvn javadoc:javadoc\n\nThe result is put in /target/site/apidocs\n\nExamples\n---------\n\nSimple example showing some basic functionality\n\n```java\nimport static spark.Spark.*;\n\n/**\n * A simple example just showing some basic functionality\n */\npublic class SimpleExample {\n\n    public static void main(String[] args) {\n\n        //  port(5678); <- Uncomment this if you want spark to listen to port 5678 instead of the default 4567\n\n        get(\"/hello\", (request, response) -> \"Hello World!\");\n\n        post(\"/hello\", (request, response) ->\n            \"Hello World: \" + request.body()\n        );\n\n        get(\"/private\", (request, response) -> {\n            response.status(401);\n            return \"Go Away!!!\";\n        });\n\n        get(\"/users/:name\", (request, response) -> \"Selected user: \" + request.params(\":name\"));\n\n        get(\"/news/:section\", (request, response) -> {\n            response.type(\"text/xml\");\n            return \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><news>\" + request.params(\"section\") + \"</news>\";\n        });\n\n        get(\"/protected\", (request, response) -> {\n            halt(403, \"I don't think so!!!\");\n            return null;\n        });\n\n        get(\"/redirect\", (request, response) -> {\n            response.redirect(\"/news/world\");\n            return null;\n        });\n\n        get(\"/\", (request, response) -> \"root\");\n    }\n}\n\n```\n\n-------------------------------\n\nA simple CRUD example showing how to create, get, update and delete book resources\n\n```java\nimport static spark.Spark.*;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Random;\n\n/**\n * A simple CRUD example showing how to create, get, update and delete book resources.\n */\npublic class Books {\n\n    /**\n     * Map holding the books\n     */\n    private static Map<String, Book> books = new HashMap<String, Book>();\n\n    public static void main(String[] args) {\n        final Random random = new Random();\n\n        // Creates a new book resource, will return the ID to the created resource\n        // author and title are sent in the post body as x-www-urlencoded values e.g. author=Foo&title=Bar\n        // you get them by using request.queryParams(\"valuename\")\n        post(\"/books\", (request, response) -> {\n            String author = request.queryParams(\"author\");\n            String title = request.queryParams(\"title\");\n            Book book = new Book(author, title);\n\n            int id = random.nextInt(Integer.MAX_VALUE);\n            books.put(String.valueOf(id), book);\n\n            response.status(201); // 201 Created\n            return id;\n        });\n\n        // Gets the book resource for the provided id\n        get(\"/books/:id\", (request, response) -> {\n            Book book = books.get(request.params(\":id\"));\n            if (book != null) {\n                return \"Title: \" + book.getTitle() + \", Author: \" + book.getAuthor();\n            } else {\n                response.status(404); // 404 Not found\n                return \"Book not found\";\n            }\n        });\n\n        // Updates the book resource for the provided id with new information\n        // author and title are sent in the request body as x-www-urlencoded values e.g. author=Foo&title=Bar\n        // you get them by using request.queryParams(\"valuename\")\n        put(\"/books/:id\", (request, response) -> {\n            String id = request.params(\":id\");\n            Book book = books.get(id);\n            if (book != null) {\n                String newAuthor = request.queryParams(\"author\");\n                String newTitle = request.queryParams(\"title\");\n                if (newAuthor != null) {\n                    book.setAuthor(newAuthor);\n                }\n                if (newTitle != null) {\n                    book.setTitle(newTitle);\n                }\n                return \"Book with id '\" + id + \"' updated\";\n            } else {\n                response.status(404); // 404 Not found\n                return \"Book not found\";\n            }\n        });\n\n        // Deletes the book resource for the provided id\n        delete(\"/books/:id\", (request, response) -> {\n            String id = request.params(\":id\");\n            Book book = books.remove(id);\n            if (book != null) {\n                return \"Book with id '\" + id + \"' deleted\";\n            } else {\n                response.status(404); // 404 Not found\n                return \"Book not found\";\n            }\n        });\n\n        // Gets all available book resources (ids)\n        get(\"/books\", (request, response) -> {\n            String ids = \"\";\n            for (String id : books.keySet()) {\n                ids += id + \" \";\n            }\n            return ids;\n        });\n    }\n\n    public static class Book {\n\n        public String author, title;\n\n        public Book(String author, String title) {\n            this.author = author;\n            this.title = title;\n        }\n\n        public String getAuthor() {\n            return author;\n        }\n\n        public void setAuthor(String author) {\n            this.author = author;\n        }\n\n        public String getTitle() {\n            return title;\n        }\n\n        public void setTitle(String title) {\n            this.title = title;\n        }\n    }\n}\n```\n\n---------------------------------\n\nExample showing a very simple (and stupid) authentication filter that is executed before all other resources\n\n```java\nimport static spark.Spark.*;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Example showing a very simple (and stupid) authentication filter that is\n * executed before all other resources.\n *\n * When requesting the resource with e.g.\n *     http://localhost:4567/hello?user=some&password=guy\n * the filter will stop the execution and the client will get a 401 UNAUTHORIZED with the content 'You are not welcome here'\n *\n * When requesting the resource with e.g.\n *     http://localhost:4567/hello?user=foo&password=bar\n * the filter will accept the request and the request will continue to the /hello route.\n *\n * Note: There is a second \"before filter\" that adds a header to the response\n * Note: There is also an \"after filter\" that adds a header to the response\n */\npublic class FilterExample {\n\n    private static Map<String, String> usernamePasswords = new HashMap<String, String>();\n\n    public static void main(String[] args) {\n\n        usernamePasswords.put(\"foo\", \"bar\");\n        usernamePasswords.put(\"admin\", \"admin\");\n\n        before((request, response) -> {\n            String user = request.queryParams(\"user\");\n            String password = request.queryParams(\"password\");\n\n            String dbPassword = usernamePasswords.get(user);\n            if (!(password != null && password.equals(dbPassword))) {\n                halt(401, \"You are not welcome here!!!\");\n            }\n        });\n\n        before(\"/hello\", (request, response) -> response.header(\"Foo\", \"Set by second before filter\"));\n\n        get(\"/hello\", (request, response) -> \"Hello World!\");\n\n        after(\"/hello\", (request, response) -> response.header(\"spark\", \"added by after-filter\"));\n\n        afterAfter(\"/hello\", (request, response) -> response.header(\"finally\", \"executed even if exception is throw\"));\n\n        afterAfter((request, response) -> response.header(\"finally\", \"executed after any route even if exception is throw\"));\n    }\n}\n```\n\n---------------------------------\n\nExample showing how to use attributes\n\n```java\nimport static spark.Spark.after;\nimport static spark.Spark.get;\n\n/**\n * Example showing the use of attributes\n */\npublic class FilterExampleAttributes {\n\n    public static void main(String[] args) {\n        get(\"/hi\", (request, response) -> {\n            request.attribute(\"foo\", \"bar\");\n            return null;\n        });\n\n        after(\"/hi\", (request, response) -> {\n            for (String attr : request.attributes()) {\n                System.out.println(\"attr: \" + attr);\n            }\n        });\n\n        after(\"/hi\", (request, response) -> {\n            Object foo = request.attribute(\"foo\");\n            response.body(asXml(\"foo\", foo));\n        });\n    }\n\n    private static String asXml(String name, Object value) {\n        return \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><\" + name +\">\" + value + \"</\"+ name + \">\";\n    }\n}\n```\n\n\n---------------------------------\n\nExample showing how to serve static resources\n\n```java\nimport static spark.Spark.*;\n\npublic class StaticResources {\n\n    public static void main(String[] args) {\n\n        // Will serve all static file are under \"/public\" in classpath if the route isn't consumed by others routes.\n        // When using Maven, the \"/public\" folder is assumed to be in \"/main/resources\"\n        staticFileLocation(\"/public\");\n\n        get(\"/hello\", (request, response) -> \"Hello World!\");\n    }\n}\n```\n---------------------------------\n\nExample showing how to define content depending on accept type\n\n```java\nimport static spark.Spark.*;\n\npublic class JsonAcceptTypeExample {\n\n    public static void main(String args[]) {\n\n        //Running curl -i -H \"Accept: application/json\" http://localhost:4567/hello json message is read.\n        //Running curl -i -H \"Accept: text/html\" http://localhost:4567/hello HTTP 404 error is thrown.\n        get(\"/hello\", \"application/json\", (request, response) -> \"{\\\"message\\\": \\\"Hello World\\\"}\");\n    }\n} \n```\n---------------------------------\n\nExample showing how to render a view from a template. Note that we are using `ModelAndView` class for setting the object and name/location of template. \n\nFirst of all we define a class which handles and renders output depending on template engine used. In this case [FreeMarker](http://freemarker.incubator.apache.org/).\n\n\n```java\npublic class FreeMarkerTemplateEngine extends TemplateEngine {\n\n    private Configuration configuration;\n\n    protected FreeMarkerTemplateEngine() {\n        this.configuration = createFreemarkerConfiguration();\n    }\n\n    @Override\n    public String render(ModelAndView modelAndView) {\n        try {\n            StringWriter stringWriter = new StringWriter();\n\n            Template template = configuration.getTemplate(modelAndView.getViewName());\n            template.process(modelAndView.getModel(), stringWriter);\n\n            return stringWriter.toString();\n        } catch (IOException e) {\n            throw new IllegalArgumentException(e);\n        } catch (TemplateException e) {\n            throw new IllegalArgumentException(e);\n        }\n    }\n\n    private Configuration createFreemarkerConfiguration() {\n        Configuration retVal = new Configuration();\n        retVal.setClassForTemplateLoading(FreeMarkerTemplateEngine.class, \"freemarker\");\n        return retVal;\n    }\n}\n```\n\nThen we can use it to generate our content. Note how we are setting model data and view name. Because we are using FreeMarker, in this case a `Map` and the name of the template is required:\n\n```java\npublic class FreeMarkerExample {\n\n    public static void main(String args[]) {\n\n        get(\"/hello\", (request, response) -> {\n            Map<String, Object> attributes = new HashMap<>();\n            attributes.put(\"message\", \"Hello FreeMarker World\");\n\n            // The hello.ftl file is located in directory:\n            // src/test/resources/spark/examples/templateview/freemarker\n            return modelAndView(attributes, \"hello.ftl\");\n        }, new FreeMarkerTemplateEngine());\n    }\n}\n```\n\n---------------------------------\n\nExample of using Transformer.\n\nFirst of all we define the transformer class, in this case a class which transforms an object to JSON format using gson API.\n\n```java\npublic class JsonTransformer implements ResponseTransformer {\n\n\tprivate Gson gson = new Gson();\n\n\t@Override\n\tpublic String render(Object model) {\n\t\treturn gson.toJson(model);\n\t}\n}\n```\n\nAnd then the code which return a simple POJO to be transformed to JSON:\n\n```java\npublic class TransformerExample {\n\n    public static void main(String args[]) {\n        get(\"/hello\", \"application/json\", (request, response) -> {\n            return new MyMessage(\"Hello World\");\n        }, new JsonTransformer());\n    }\n}\n```\n\nDebugging\n------------------\nSee [Spark-debug-tools](https://github.com/perwendel/spark-debug-tools) as a separate module.\n",
        "releases": []
    }
}