{
    "https://api.github.com/repos/dolphin-emu/dolphin": {
        "forks": 2702,
        "watchers": 13259,
        "stars": 13259,
        "languages": {
            "C++": 14486795,
            "Kotlin": 791951,
            "C": 381594,
            "CMake": 191793,
            "Objective-C++": 167420,
            "Java": 136773,
            "GLSL": 68449,
            "Python": 38566,
            "Shell": 11289,
            "NSIS": 8340,
            "Makefile": 6252,
            "Assembly": 5991,
            "Objective-C": 5314,
            "JavaScript": 3486,
            "Perl": 2587,
            "Roff": 2474,
            "Smarty": 896
        },
        "commits": [
            "2025-01-20T23:14:22Z",
            "2025-01-20T22:53:40Z",
            "2025-01-20T22:35:17Z",
            "2025-01-20T21:50:16Z",
            "2025-01-20T20:21:12Z",
            "2025-01-20T19:11:37Z",
            "2024-12-03T04:29:01Z",
            "2024-11-08T03:06:39Z",
            "2025-01-19T22:59:14Z",
            "2025-01-19T22:52:58Z",
            "2025-01-19T12:34:44Z",
            "2025-01-19T12:00:30Z",
            "2025-01-19T11:20:48Z",
            "2025-01-11T11:19:37Z",
            "2025-01-18T23:11:04Z",
            "2025-01-18T04:21:39Z",
            "2024-03-16T03:57:00Z",
            "2025-01-18T03:16:57Z",
            "2025-01-18T02:16:04Z",
            "2025-01-17T22:47:10Z",
            "2025-01-17T21:42:21Z",
            "2025-01-16T09:04:55Z",
            "2025-01-15T22:23:03Z",
            "2025-01-06T08:56:07Z",
            "2025-01-15T20:08:03Z",
            "2025-01-06T08:36:01Z",
            "2025-01-15T06:00:46Z",
            "2025-01-12T15:16:09Z",
            "2025-01-12T13:26:27Z",
            "2025-01-12T13:26:04Z"
        ],
        "creation_date": "2013-07-22T09:07:57Z",
        "contributors": 30,
        "topics": [
            "cpp",
            "emulation",
            "emulator",
            "gamecube",
            "wii"
        ],
        "subscribers": 477,
        "readme": "# Dolphin - A GameCube and Wii Emulator\n\n[Homepage](https://dolphin-emu.org/) | [Project Site](https://github.com/dolphin-emu/dolphin) | [Buildbot](https://dolphin.ci/) | [Forums](https://forums.dolphin-emu.org/) | [Wiki](https://wiki.dolphin-emu.org/) | [GitHub Wiki](https://github.com/dolphin-emu/dolphin/wiki) | [Issue Tracker](https://bugs.dolphin-emu.org/projects/emulator/issues) | [Coding Style](https://github.com/dolphin-emu/dolphin/blob/master/Contributing.md) | [Transifex Page](https://app.transifex.com/dolphinemu/dolphin-emu/dashboard/)\n\nDolphin is an emulator for running GameCube and Wii games on Windows,\nLinux, macOS, and recent Android devices. It's licensed under the terms\nof the GNU General Public License, version 2 or later (GPLv2+).\n\nPlease read the [FAQ](https://dolphin-emu.org/docs/faq/) before using Dolphin.\n\n## System Requirements\n\n### Desktop\n\n* OS\n    * Windows (10 1703 or higher).\n    * Linux.\n    * macOS (10.15 Catalina or higher).\n    * Unix-like systems other than Linux are not officially supported but might work.\n* Processor\n    * A CPU with SSE2 support.\n    * A modern CPU (3 GHz and Dual Core, not older than 2008) is highly recommended.\n* Graphics\n    * A reasonably modern graphics card (Direct3D 11.1 / OpenGL 3.3).\n    * A graphics card that supports Direct3D 11.1 / OpenGL 4.4 is recommended.\n\n### Android\n\n* OS\n    * Android (5.0 Lollipop or higher).\n* Processor\n    * A processor with support for 64-bit applications (either ARMv8 or x86-64).\n* Graphics\n    * A graphics processor that supports OpenGL ES 3.0 or higher. Performance varies heavily with [driver quality](https://dolphin-emu.org/blog/2013/09/26/dolphin-emulator-and-opengl-drivers-hall-fameshame/).\n    * A graphics processor that supports standard desktop OpenGL features is recommended for best performance.\n\nDolphin can only be installed on devices that satisfy the above requirements. Attempting to install on an unsupported device will fail and display an error message.\n\n## Building for Windows\n\nUse the solution file `Source/dolphin-emu.sln` to build Dolphin on Windows.\nDolphin targets the latest MSVC shipped with Visual Studio or Build Tools.\nOther compilers might be able to build Dolphin on Windows but have not been\ntested and are not recommended to be used. Git and latest Windows SDK must be\ninstalled when building.\n\nMake sure to pull submodules before building:\n```sh\ngit submodule update --init --recursive\n```\n\nThe \"Release\" solution configuration includes performance optimizations for the best user experience but complicates debugging Dolphin.\nThe \"Debug\" solution configuration is significantly slower, more verbose and less permissive but makes debugging Dolphin easier.\n\n## Building for Linux and macOS\n\nDolphin requires [CMake](https://cmake.org/) for systems other than Windows. \nYou need a recent version of GCC or Clang with decent c++20 support. CMake will\ninform you if your compiler is too old.\nMany libraries are bundled with Dolphin and used if they're not installed on \nyour system. CMake will inform you if a bundled library is used or if you need\nto install any missing packages yourself. You may refer to the [wiki](https://github.com/dolphin-emu/dolphin/wiki/Building-for-Linux) for more information.\n\nMake sure to pull submodules before building:\n```sh\ngit submodule update --init --recursive\n```\n\n### macOS Build Steps:\n\nA binary supporting a single architecture can be built using the following steps: \n\n1. `mkdir build`\n2. `cd build`\n3. `cmake ..`\n4. `make -j $(sysctl -n hw.logicalcpu)`\n\nAn application bundle will be created in `./Binaries`.\n\nA script is also provided to build universal binaries supporting both x64 and ARM in the same\napplication bundle using the following steps:\n\n1. `mkdir build`\n2. `cd build`\n3. `python ../BuildMacOSUniversalBinary.py`\n4. Universal binaries will be available in the `universal` folder\n\nDoing this is more complex as it requires installation of library dependencies for both x64 and ARM (or universal library\nequivalents) and may require specifying additional arguments to point to relevant library locations. \nExecute BuildMacOSUniversalBinary.py --help for more details.  \n\n### Linux Global Build Steps:\n\nTo install to your system.\n\n1. `mkdir build`\n2. `cd build`\n3. `cmake ..`\n4. `make -j $(nproc)`\n5. `sudo make install`\n\n### Linux Local Build Steps:\n\nUseful for development as root access is not required.\n\n1. `mkdir Build`\n2. `cd Build`\n3. `cmake .. -DLINUX_LOCAL_DEV=true`\n4. `make -j $(nproc)`\n5. `ln -s ../../Data/Sys Binaries/`\n\n### Linux Portable Build Steps:\n\nCan be stored on external storage and used on different Linux systems.\nOr useful for having multiple distinct Dolphin setups for testing/development/TAS.\n\n1. `mkdir Build`\n2. `cd Build`\n3. `cmake .. -DLINUX_LOCAL_DEV=true`\n4. `make -j $(nproc)`\n5. `cp -r ../Data/Sys/ Binaries/`\n6. `touch Binaries/portable.txt`\n\n## Building for Android\n\nThese instructions assume familiarity with Android development. If you do not have an\nAndroid dev environment set up, see [AndroidSetup.md](AndroidSetup.md).\n\nMake sure to pull submodules before building:\n```sh\ngit submodule update --init --recursive\n```\n\nIf using Android Studio, import the Gradle project located in `./Source/Android`.\n\nAndroid apps are compiled using a build system called Gradle. Dolphin's native component,\nhowever, is compiled using CMake. The Gradle script will attempt to run a CMake build\nautomatically while building the Java code.\n\n## Uninstalling\n\nOn Windows, simply remove the extracted directory, unless it was installed with the NSIS installer,\nin which case you can uninstall Dolphin like any other Windows application.\n\nLinux users can run `cat install_manifest.txt | xargs -d '\\n' rm` as root from the build directory\nto uninstall Dolphin from their system.\n\nmacOS users can simply delete Dolphin.app to uninstall it.\n\nAdditionally, you'll want to remove the global user directory if you don't plan on reinstalling Dolphin.\n\n## Command Line Usage\n\n```\nUsage: Dolphin.exe [options]... [FILE]...\n\nOptions:\n  --version             show program's version number and exit\n  -h, --help            show this help message and exit\n  -u USER, --user=USER  User folder path\n  -m MOVIE, --movie=MOVIE\n                        Play a movie file\n  -e <file>, --exec=<file>\n                        Load the specified file\n  -n <16-character ASCII title ID>, --nand_title=<16-character ASCII title ID>\n                        Launch a NAND title\n  -C <System>.<Section>.<Key>=<Value>, --config=<System>.<Section>.<Key>=<Value>\n                        Set a configuration option\n  -s <file>, --save_state=<file>\n                        Load the initial save state\n  -d, --debugger        Show the debugger pane and additional View menu options\n  -l, --logger          Open the logger\n  -b, --batch           Run Dolphin without the user interface (Requires\n                        --exec or --nand-title)\n  -c, --confirm         Set Confirm on Stop\n  -v VIDEO_BACKEND, --video_backend=VIDEO_BACKEND\n                        Specify a video backend\n  -a AUDIO_EMULATION, --audio_emulation=AUDIO_EMULATION\n                        Choose audio emulation from [HLE|LLE]\n```\n\nAvailable DSP emulation engines are HLE (High Level Emulation) and\nLLE (Low Level Emulation). HLE is faster but less accurate whereas\nLLE is slower but close to perfect. Note that LLE has two submodes (Interpreter and Recompiler)\nbut they cannot be selected from the command line.\n\nAvailable video backends are \"D3D\" and \"D3D12\" (they are only available on Windows), \"OGL\", and \"Vulkan\".\nThere's also \"Null\", which will not render anything, and\n\"Software Renderer\", which uses the CPU for rendering and\nis intended for debugging purposes only.\n\n## DolphinTool Usage\n```\nusage: dolphin-tool COMMAND -h\n\ncommands supported: [convert, verify, header, extract]\n```\n\n```\nUsage: convert [options]... [FILE]...\n\nOptions:\n  -h, --help            show this help message and exit\n  -u USER, --user=USER  User folder path, required for temporary processing\n                        files.Will be automatically created if this option is\n                        not set.\n  -i FILE, --input=FILE\n                        Path to disc image FILE.\n  -o FILE, --output=FILE\n                        Path to the destination FILE.\n  -f FORMAT, --format=FORMAT\n                        Container format to use. Default is RVZ. [iso|gcz|wia|rvz]\n  -s, --scrub           Scrub junk data as part of conversion.\n  -b BLOCK_SIZE, --block_size=BLOCK_SIZE\n                        Block size for GCZ/WIA/RVZ formats, as an integer.\n                        Suggested value for RVZ: 131072 (128 KiB)\n  -c COMPRESSION, --compression=COMPRESSION\n                        Compression method to use when converting to WIA/RVZ.\n                        Suggested value for RVZ: zstd [none|zstd|bzip|lzma|lzma2]\n  -l COMPRESSION_LEVEL, --compression_level=COMPRESSION_LEVEL\n                        Level of compression for the selected method. Ignored\n                        if 'none'. Suggested value for zstd: 5\n```\n\n```\nUsage: verify [options]...\n\nOptions:\n  -h, --help            show this help message and exit\n  -u USER, --user=USER  User folder path, required for temporary processing\n                        files.Will be automatically created if this option is\n                        not set.\n  -i FILE, --input=FILE\n                        Path to disc image FILE.\n  -a ALGORITHM, --algorithm=ALGORITHM\n                        Optional. Compute and print the digest using the\n                        selected algorithm, then exit. [crc32|md5|sha1|rchash]\n```\n\n```\nUsage: header [options]...\n\nOptions:\n  -h, --help            show this help message and exit\n  -i FILE, --input=FILE\n                        Path to disc image FILE.\n  -b, --block_size      Optional. Print the block size of GCZ/WIA/RVZ formats,\nthen exit.\n  -c, --compression     Optional. Print the compression method of GCZ/WIA/RVZ\n                        formats, then exit.\n  -l, --compression_level\n                        Optional. Print the level of compression for WIA/RVZ\n                        formats, then exit.\n```\n\n```\nUsage: extract [options]...\n\nOptions:\n  -h, --help            show this help message and exit\n  -i FILE, --input=FILE\n                        Path to disc image FILE.\n  -o FOLDER, --output=FOLDER\n                        Path to the destination FOLDER.\n  -p PARTITION, --partition=PARTITION\n                        Which specific partition you want to extract.\n  -s SINGLE, --single=SINGLE\n                        Which specific file/directory you want to extract.\n  -l, --list            List all files in volume/partition. Will print the\n                        directory/file specified with --single if defined.\n  -q, --quiet           Mute all messages except for errors.\n  -g, --gameonly        Only extracts the DATA partition.\n```\n",
        "releases": []
    }
}