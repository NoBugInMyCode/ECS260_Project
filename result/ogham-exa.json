{
    "https://api.github.com/repos/ogham/exa": {
        "forks": 660,
        "watchers": 23731,
        "stars": 23731,
        "languages": {
            "Rust": 402528,
            "Shell": 34024,
            "Just": 2644
        },
        "commits": [
            "2024-09-24T15:17:40Z",
            "2024-04-08T17:19:49Z",
            "2024-03-21T03:20:25Z",
            "2023-09-05T23:02:12Z",
            "2023-08-03T17:34:08Z",
            "2023-08-03T16:34:16Z",
            "2023-08-03T16:08:33Z",
            "2023-08-03T16:06:36Z",
            "2023-08-03T16:03:55Z",
            "2023-07-19T21:58:02Z",
            "2023-04-30T23:19:09Z",
            "2023-04-12T04:00:49Z",
            "2023-03-30T14:59:12Z",
            "2023-03-01T14:17:36Z",
            "2023-03-01T03:41:51Z",
            "2023-03-01T03:23:29Z",
            "2023-02-24T23:45:27Z",
            "2022-10-01T03:50:31Z",
            "2022-10-01T03:43:14Z",
            "2022-10-01T03:34:05Z",
            "2022-10-01T03:33:17Z",
            "2022-10-01T03:31:47Z",
            "2022-10-01T03:26:44Z",
            "2022-10-01T03:20:01Z",
            "2022-10-01T03:15:53Z",
            "2022-10-01T03:10:57Z",
            "2022-10-01T03:06:08Z",
            "2022-10-01T03:05:39Z",
            "2022-10-01T02:56:50Z",
            "2022-10-01T02:55:37Z"
        ],
        "creation_date": "2014-05-22T12:45:16Z",
        "contributors": 30,
        "topics": [
            "command-line",
            "files",
            "ls",
            "rust"
        ],
        "subscribers": 139,
        "readme": "# exa is unmaintained, use the [fork eza](https://github.com/eza-community/eza) instead.\n\n(This repository isn\u2019t archived because the only person with the rights to do so is unreachable).\n\n---\n\n<div align=\"center\">\n\n# exa\n\n[exa](https://the.exa.website/) is a modern replacement for _ls_.\n\n**README Sections:** [Options](#options) \u2014 [Installation](#installation) \u2014 [Development](#development)\n\n[![Unit tests](https://github.com/ogham/exa/actions/workflows/unit-tests.yml/badge.svg)](https://github.com/ogham/exa/actions/workflows/unit-tests.yml)\n</div>\n\n![Screenshots of exa](screenshots.png)\n\n---\n\n**exa** is a modern replacement for the venerable file-listing command-line program `ls` that ships with Unix and Linux operating systems, giving it more features and better defaults.\nIt uses colours to distinguish file types and metadata.\nIt knows about symlinks, extended attributes, and Git.\nAnd it\u2019s **small**, **fast**, and just **one single binary**.\n\nBy deliberately making some decisions differently, exa attempts to be a more featureful, more user-friendly version of `ls`.\nFor more information, see [exa\u2019s website](https://the.exa.website/).\n\n\n---\n\n<a id=\"options\">\n<h1>Command-line options</h1>\n</a>\n\nexa\u2019s options are almost, but not quite, entirely unlike `ls`\u2019s.\n\n### Display options\n\n- **-1**, **--oneline**: display one entry per line\n- **-G**, **--grid**: display entries as a grid (default)\n- **-l**, **--long**: display extended details and attributes\n- **-R**, **--recurse**: recurse into directories\n- **-T**, **--tree**: recurse into directories as a tree\n- **-x**, **--across**: sort the grid across, rather than downwards\n- **-F**, **--classify**: display type indicator by file names\n- **--colo[u]r**: when to use terminal colours\n- **--colo[u]r-scale**: highlight levels of file sizes distinctly\n- **--icons**: display icons\n- **--no-icons**: don't display icons (always overrides --icons)\n\n### Filtering options\n\n- **-a**, **--all**: show hidden and 'dot' files\n- **-d**, **--list-dirs**: list directories like regular files\n- **-L**, **--level=(depth)**: limit the depth of recursion\n- **-r**, **--reverse**: reverse the sort order\n- **-s**, **--sort=(field)**: which field to sort by\n- **--group-directories-first**: list directories before other files\n- **-D**, **--only-dirs**: list only directories\n- **--git-ignore**: ignore files mentioned in `.gitignore`\n- **-I**, **--ignore-glob=(globs)**: glob patterns (pipe-separated) of files to ignore\n\nPass the `--all` option twice to also show the `.` and `..` directories.\n\n### Long view options\n\nThese options are available when running with `--long` (`-l`):\n\n- **-b**, **--binary**: list file sizes with binary prefixes\n- **-B**, **--bytes**: list file sizes in bytes, without any prefixes\n- **-g**, **--group**: list each file\u2019s group\n- **-h**, **--header**: add a header row to each column\n- **-H**, **--links**: list each file\u2019s number of hard links\n- **-i**, **--inode**: list each file\u2019s inode number\n- **-m**, **--modified**: use the modified timestamp field\n- **-S**, **--blocks**: list each file\u2019s number of file system blocks\n- **-t**, **--time=(field)**: which timestamp field to use\n- **-u**, **--accessed**: use the accessed timestamp field\n- **-U**, **--created**: use the created timestamp field\n- **-@**, **--extended**: list each file\u2019s extended attributes and sizes\n- **--changed**: use the changed timestamp field\n- **--git**: list each file\u2019s Git status, if tracked or ignored\n- **--time-style**: how to format timestamps\n- **--no-permissions**: suppress the permissions field\n- **--octal-permissions**: list each file's permission in octal format\n- **--no-filesize**: suppress the filesize field\n- **--no-user**: suppress the user field\n- **--no-time**: suppress the time field\n\nSome of the options accept parameters:\n\n- Valid **--color** options are **always**, **automatic**, and **never**.\n- Valid sort fields are **accessed**, **changed**, **created**, **extension**, **Extension**, **inode**, **modified**, **name**, **Name**, **size**, **type**, and **none**. Fields starting with a capital letter sort uppercase before lowercase. The modified field has the aliases **date**, **time**, and **newest**, while its reverse has the aliases **age** and **oldest**.\n- Valid time fields are **modified**, **changed**, **accessed**, and **created**.\n- Valid time styles are **default**, **iso**, **long-iso**, and **full-iso**.\n\n\n---\n\n<a id=\"installation\">\n<h1>Installation</h1>\n</a>\n\nexa is available for macOS and Linux.\nMore information on how to install exa is available on [the Installation page](https://the.exa.website/install).\n\n### Alpine Linux\n\nOn Alpine Linux, [enable community repository](https://wiki.alpinelinux.org/wiki/Enable_Community_Repository) and install the [`exa`](https://pkgs.alpinelinux.org/package/edge/community/x86_64/exa) package.\n\n    apk add exa\n\n### Arch Linux\n\nOn Arch, install the [`exa`](https://www.archlinux.org/packages/community/x86_64/exa/) package.\n\n    pacman -S exa\n\n### Android / Termux\n\nOn Android / Termux, install the [`exa`](https://github.com/termux/termux-packages/tree/master/packages/exa) package.\n\n    pkg install exa\n\n### Debian\n\nOn Debian, install the [`exa`](https://packages.debian.org/stable/exa) package.\n\n    apt install exa\n\n### Fedora\n\nOn Fedora, install the [`exa`](https://src.fedoraproject.org/modules/exa) package.\n\n    dnf install exa\n\n### Gentoo\n\nOn Gentoo, install the [`sys-apps/exa`](https://packages.gentoo.org/packages/sys-apps/exa) package.\n\n    emerge sys-apps/exa\n\n### Homebrew\n\nIf you\u2019re using [Homebrew](https://brew.sh/) on macOS, install the [`exa`](http://formulae.brew.sh/formula/exa) formula.\n\n    brew install exa\n\n### MacPorts\n\nIf you're using [MacPorts](https://www.macports.org/) on macOS, install the [`exa`](https://ports.macports.org/port/exa/summary) port.\n\n    port install exa\n\n### Nix\n\nOn nixOS, install the [`exa`](https://github.com/NixOS/nixpkgs/blob/master/pkgs/tools/misc/exa/default.nix) package.\n\n    nix-env -i exa\n\n### openSUSE\n\nOn openSUSE, install the [`exa`](https://software.opensuse.org/package/exa) package.\n\n    zypper install exa\n\n### Ubuntu\n\nOn Ubuntu 20.10 (Groovy Gorilla) and later, install the [`exa`](https://packages.ubuntu.com/jammy/exa) package.\n\n    sudo apt install exa\n\n### Void Linux\n\nOn Void Linux, install the [`exa`](https://github.com/void-linux/void-packages/blob/master/srcpkgs/exa/template) package.\n\n    xbps-install -S exa\n\n### Manual installation from GitHub\n\nCompiled binary versions of exa are uploaded to GitHub when a release is made.\nYou can install exa manually by [downloading a release](https://github.com/ogham/exa/releases), extracting it, and copying the binary to a directory in your `$PATH`, such as `/usr/local/bin`.\n\nFor more information, see the [Manual Installation page](https://the.exa.website/install/linux#manual).\n\n### Cargo\n\nIf you already have a Rust environment set up, you can use the `cargo install` command:\n\n    cargo install exa\n\nCargo will build the `exa` binary and place it in `$HOME/.cargo`.\n\nTo build without Git support, run `cargo install --no-default-features exa` is also available, if the requisite dependencies are not installed.\n\n\n---\n\n<a id=\"development\">\n<h1>Development\n\n<a href=\"https://blog.rust-lang.org/2023/01/10/Rust-1.66.1.html\">\n    <img src=\"https://img.shields.io/badge/rustc-1.66.1+-lightgray.svg\" alt=\"Rust 1.66.1+\" />\n</a>\n\n<a href=\"https://github.com/ogham/exa/blob/master/LICENCE\">\n    <img src=\"https://img.shields.io/badge/licence-MIT-green\" alt=\"MIT Licence\" />\n</a>\n</h1></a>\n\nexa is written in [Rust](https://www.rust-lang.org/).\nYou will need rustc version 1.66.1 or higher.\nThe recommended way to install Rust for development is from the [official download page](https://www.rust-lang.org/tools/install), using rustup.\n\nOnce Rust is installed, you can compile exa with Cargo:\n\n    cargo build\n    cargo test\n\n- The [just](https://github.com/casey/just) command runner can be used to run some helpful development commands, in a manner similar to `make`.\nRun `just --list` to get an overview of what\u2019s available.\n\n- If you are compiling a copy for yourself, be sure to run `cargo build --release` or `just build-release` to benefit from release-mode optimisations.\nCopy the resulting binary, which will be in the `target/release` directory, into a folder in your `$PATH`.\n`/usr/local/bin` is usually a good choice.\n\n- To compile and install the manual pages, you will need [pandoc](https://pandoc.org/).\nThe `just man` command will compile the Markdown into manual pages, which it will place in the `target/man` directory.\nTo use them, copy them into a directory that `man` will read.\n`/usr/local/share/man` is usually a good choice.\n\n- exa depends on [libgit2](https://github.com/rust-lang/git2-rs) for certain features.\nIf you\u2019re unable to compile libgit2, you can opt out of Git support by running `cargo build --no-default-features`.\n\n- If you intend to compile for musl, you will need to use the flag `vendored-openssl` if you want to get the Git feature working.\nThe full command is `cargo build --release --target=x86_64-unknown-linux-musl --features vendored-openssl,git`.\n\nFor more information, see the [Building from Source page](https://the.exa.website/install/source).\n\n\n### Testing with Vagrant\n\nexa uses [Vagrant][] to configure virtual machines for testing.\n\nPrograms such as exa that are basically interfaces to the system are [notoriously difficult to test][testing].\nAlthough the internal components have unit tests, it\u2019s impossible to do a complete end-to-end test without mandating the current user\u2019s name, the time zone, the locale, and directory structure to test.\n(And yes, these tests are worth doing. I have missed an edge case on many an occasion.)\n\nThe initial attempt to solve the problem was just to create a directory of \u201cawkward\u201d test cases, run exa on it, and make sure it produced the correct output.\nBut even this output would change if, say, the user\u2019s locale formats dates in a different way.\nThese can be mocked inside the code, but at the cost of making that code more complicated to read and understand.\n\nAn alternative solution is to fake *everything*: create a virtual machine with a known state and run the tests on *that*.\nThis is what Vagrant does.\nAlthough it takes a while to download and set up, it gives everyone the same development environment to test for any obvious regressions.\n\n[Vagrant]: https://www.vagrantup.com/\n[testing]: https://eev.ee/blog/2016/08/22/testing-for-people-who-hate-testing/#troublesome-cases\n\nFirst, initialise the VM:\n\n    host$ vagrant up\n\nThe first command downloads the virtual machine image, and then runs our provisioning script, which installs Rust and exa\u2019s build-time dependencies, configures the environment, and generates some awkward files and folders to use as test cases.\nOnce this is done, you can SSH in, and build and test:\n\n    host$ vagrant ssh\n    vm$ cd /vagrant\n    vm$ cargo build\n    vm$ ./xtests/run\n    All the tests passed!\n\nOf course, the drawback of having a standard development environment is that you stop noticing bugs that occur outside of it.\nFor this reason, Vagrant isn\u2019t a *necessary* development step \u2014 it\u2019s there if you\u2019d like to use it, but exa still gets used and tested on other platforms.\nIt can still be built and compiled on any target triple that it supports, VM or no VM, with `cargo build` and `cargo test`.\n",
        "releases": [
            {
                "name": "exa v0.10.1",
                "date": "2021-04-12T21:42:01Z"
            },
            {
                "name": "exa v0.10.0",
                "date": "2021-04-04T19:55:38Z"
            },
            {
                "name": "exa v0.9.0",
                "date": "2019-07-15T03:25:54Z"
            },
            {
                "name": "exa v0.8.0",
                "date": "2017-09-30T11:59:34Z"
            },
            {
                "name": "exa v0.7.0",
                "date": "2017-07-07T17:40:36Z"
            },
            {
                "name": "exa v0.6.0",
                "date": "2017-05-17T23:21:46Z"
            },
            {
                "name": "exa v0.5.0 (The \u201cback-on-track\u201d release)",
                "date": "2017-04-11T19:45:36Z"
            },
            {
                "name": "exa v0.4.1 (basically a pre-release v0.5.0)",
                "date": "2017-03-29T13:36:34Z"
            },
            {
                "name": "exa v0.4.0",
                "date": "2015-10-18T19:36:22Z"
            },
            {
                "name": "0.3.0: Now With Fewer Bugs!",
                "date": "2015-06-05T03:07:38Z"
            },
            {
                "name": "0.2.0: Almost There",
                "date": "2015-03-02T16:16:31Z"
            },
            {
                "name": "Initial public offering",
                "date": "2015-02-21T23:21:40Z"
            }
        ]
    }
}