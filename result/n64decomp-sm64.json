{
    "https://api.github.com/repos/n64decomp/sm64": {
        "forks": 1396,
        "watchers": 7871,
        "stars": 7871,
        "languages": {
            "C": 31068435,
            "C++": 1425891,
            "Assembly": 351335,
            "Python": 269543,
            "SourcePawn": 125799,
            "Makefile": 58815,
            "Shell": 5988,
            "JavaScript": 5981,
            "OpenEdge ABL": 1365,
            "Dockerfile": 453
        },
        "commits": [
            "2023-08-17T13:21:59Z",
            "2023-08-17T12:56:02Z",
            "2023-01-09T19:50:53Z",
            "2021-10-14T19:25:30Z",
            "2021-07-13T03:17:54Z",
            "2020-12-04T02:00:33Z",
            "2020-12-04T01:57:48Z",
            "2020-12-03T19:26:38Z",
            "2020-09-20T15:15:47Z",
            "2020-07-04T15:18:55Z",
            "2020-06-18T02:14:59Z",
            "2020-06-02T16:44:34Z",
            "2020-05-13T22:11:50Z",
            "2020-04-19T19:06:42Z",
            "2020-04-03T18:57:26Z",
            "2020-04-02T17:50:36Z",
            "2020-04-01T03:11:48Z",
            "2020-03-02T03:42:52Z",
            "2020-02-03T05:51:26Z",
            "2020-01-03T15:38:57Z",
            "2019-12-02T02:52:53Z",
            "2019-11-03T19:36:27Z",
            "2019-10-05T23:41:44Z",
            "2019-10-05T23:40:22Z",
            "2019-10-05T19:08:05Z",
            "2019-09-01T19:50:50Z",
            "2019-08-25T21:34:16Z",
            "2019-08-25T06:41:24Z",
            "2019-08-25T04:58:46Z",
            "2019-08-25T04:46:40Z"
        ],
        "creation_date": "2019-06-08T04:30:49Z",
        "contributors": 5,
        "topics": [],
        "subscribers": 240,
        "readme": "# Super Mario 64\n\n- This repo contains a full decompilation of Super Mario 64 of the following releases: Japan (jp), North America (us), Europe (eu), Shindou (sh) and iQue Player (cn).\n- Naming and documentation of the source code and data structures are in progress.\n\nIt builds the following ROMs:\n\n* sm64.jp.z64 `sha1: 8a20a5c83d6ceb0f0506cfc9fa20d8f438cafe51`\n* sm64.us.z64 `sha1: 9bef1128717f958171a4afac3ed78ee2bb4e86ce`\n* sm64.eu.z64 `sha1: 4ac5721683d0e0b6bbb561b58a71740845dceea9`\n* sm64.sh.z64 `sha1: 3f319ae697533a255a1003d09202379d78d5a2e0`\n* sm64.cn.z64 `sha1: 2e1db2780985a1f068077dc0444b685f39cd90ec`\n\nThis repo does not include all assets necessary for compiling the ROMs.\nA prior copy of the game is required to extract the assets.\n\n## Quick Start (for Ubuntu)\n\n1. Install prerequisites: `sudo apt install -y binutils-mips-linux-gnu build-essential git pkgconf python3`\n2. Clone the repo from within Linux: `git clone https://github.com/n64decomp/sm64.git`\n3. Place a Super Mario 64 ROM called `baserom.<VERSION>.z64` into the project folder for asset extraction, where `VERSION` can be `jp`, `us`, `eu`, `sh`, or `cn`.\n4. Run `make` to build. Specify the version through `make VERSION=<VERSION>`. Add `-j4` to improve build speed (hardware dependent).\n\nEnsure the repo path length does not exceed 255 characters. Long path names result in build errors.\n\n## Installation\n\n### Windows\n\nInstall WSL and a distro of your choice following\n[Windows Subsystem for Linux Installation Guide for Windows 10.](https://docs.microsoft.com/en-us/windows/wsl/install-win10)\nWe recommend either Debian or Ubuntu 18.04 Linux distributions under WSL.\nNote: WSL1 does not currently support Ubuntu 20.04.\n\nNext, clone the SM64 repo from within the Linux shell:\n`git clone https://github.com/n64decomp/sm64.git`\n\nThen continue following the directions in the [Linux](#linux) installation section below.\n\n### Linux\n\nThere are 3 steps to set up a working build.\n\n#### Step 1: Install dependencies\n\nThe build system has the following package requirements:\n * binutils-mips\n * pkgconf\n * python3 >= 3.6\n\nDependency installation instructions for common Linux distros are provided below:\n\n##### Debian / Ubuntu\nTo install build dependencies:\n```\nsudo apt install -y binutils-mips-linux-gnu build-essential git pkgconf python3\n```\n\n##### Arch Linux\nTo install build dependencies:\n```\nsudo pacman -S base-devel python\n```\nInstall the following AUR packages:\n* [mips64-elf-binutils](https://aur.archlinux.org/packages/mips64-elf-binutils) (AUR)\n\n##### Other Linux distributions\n\nMost modern Linux distributions should have equivalent packages to the other two listed above.\nYou may have to use a different version of GNU binutils. Listed below are fully compatible binutils\ndistributions with support in the makefile, and examples of distros that offer them:\n\n* `mips64-elf-` (Arch AUR)\n* `mips-linux-gnu-` (Ubuntu and other Debian-based distros)\n* `mips64-linux-gnu-` (RHEL/CentOS/Fedora)\n\nYou may also use [Docker](#docker-installation) to handle installing an image with minimal dependencies.\n\n#### Step 2: Copy baserom(s) for asset extraction\n\nFor each version (jp/us/eu/sh/cn) for which you want to build a ROM, put an existing ROM at\n`./baserom.<VERSION>.z64` for asset extraction.\n\n##### Step 3: Build the ROM\n\nRun `make` to build the ROM (defaults to `VERSION=us`).\nOther examples:\n```\nmake VERSION=jp -j4       # build (J) version instead with 4 jobs\nmake VERSION=eu COMPARE=0 # build (EU) version but do not compare ROM hashes\n```\n\nResulting artifacts can be found in the `build` directory.\n\nThe full list of configurable variables are listed below, with the default being the first listed:\n\n* ``VERSION``: ``jp``, ``us``, ``eu``, ``sh``, ``cn``\n* ``GRUCODE``: ``f3d_old``, ``f3d_new``, ``f3dex``, ``f3dex2``, ``f3dzex``\n* ``COMPARE``: ``1`` (compare ROM hash), ``0`` (do not compare ROM hash)\n* ``NON_MATCHING``: Use functionally equivalent C implementations for non-matchings. Also will avoid instances of undefined behavior.\n* ``CROSS``: Cross-compiler tool prefix (Example: ``mips64-elf-``).\n\n### macOS\n\nWith macOS, you may either use Homebrew or [Docker](#docker-installation).\n\n#### Homebrew\n\n#### Step 1: Install dependencies\nInstall [Homebrew](https://brew.sh) and the following dependencies:\n```\nbrew update\nbrew install coreutils make pkg-config tehzz/n64-dev/mips64-elf-binutils\n```\n\n#### Step 2: Copy baserom(s) for asset extraction\n\nFor each version (jp/us/eu/sh/cn) for which you want to build a ROM, put an existing ROM at\n`./baserom.<VERSION>.z64` for asset extraction.\n\n##### Step 3: Build the ROM\n\nUse Homebrew's GNU make because the version included with macOS is too old.\n\n```\ngmake VERSION=jp -j4       # build (J) version instead with 4 jobs\n```\n\n### Docker Installation\n\n#### Create Docker image\n\nAfter installing and starting Docker, create the docker image. This only needs to be done once.\n```\ndocker build -t sm64 .\n```\n\n#### Build\n\nTo build, mount the local filesystem into the Docker container and build the ROM with `docker run sm64 make`.\n\n##### macOS example for (U):\n```\ndocker run --rm --mount type=bind,source=\"$(pwd)\",destination=/sm64 sm64 make VERSION=us -j4\n```\n\n##### Linux example for (U):\nFor a Linux host, Docker needs to be instructed which user should own the output files:\n```\ndocker run --rm --mount type=bind,source=\"$(pwd)\",destination=/sm64 --user $UID:$GID sm64 make VERSION=us -j4\n```\n\nResulting artifacts can be found in the `build` directory.\n\n## Project Structure\n\n\tsm64\n\t\u251c\u2500\u2500 actors: object behaviors, geo layout, and display lists\n\t\u251c\u2500\u2500 asm: handwritten assembly code, rom header\n\t\u2502   \u2514\u2500\u2500 non_matchings: asm for non-matching sections\n\t\u251c\u2500\u2500 assets: animation and demo data\n\t\u2502   \u251c\u2500\u2500 anims: animation data\n\t\u2502   \u2514\u2500\u2500 demos: demo data\n\t\u251c\u2500\u2500 bin: C files for ordering display lists and textures\n\t\u251c\u2500\u2500 build: output directory\n\t\u251c\u2500\u2500 data: behavior scripts, misc. data\n\t\u251c\u2500\u2500 doxygen: documentation infrastructure\n\t\u251c\u2500\u2500 enhancements: example source modifications\n\t\u251c\u2500\u2500 include: header files\n\t\u251c\u2500\u2500 levels: level scripts, geo layout, and display lists\n\t\u251c\u2500\u2500 lib: SDK library code\n\t\u251c\u2500\u2500 rsp: audio and Fast3D RSP assembly code\n\t\u251c\u2500\u2500 sound: sequences, sound samples, and sound banks\n\t\u251c\u2500\u2500 src: C source code for game\n\t\u2502   \u251c\u2500\u2500 audio: audio code\n\t\u2502   \u251c\u2500\u2500 buffers: stacks, heaps, and task buffers\n\t\u2502   \u251c\u2500\u2500 engine: script processing engines and utils\n\t\u2502   \u251c\u2500\u2500 game: behaviors and rest of game source\n\t\u2502   \u251c\u2500\u2500 goddard: Mario intro screen\n\t\u2502   \u2514\u2500\u2500 menu: title screen and file, act, and debug level selection menus\n\t\u251c\u2500\u2500 text: dialog, level names, act names\n\t\u251c\u2500\u2500 textures: skybox and generic texture data\n\t\u2514\u2500\u2500 tools: build tools\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to\ndiscuss what you would like to change.\n\nRun `clang-format` on your code to ensure it meets the project's coding standards.\n\nOfficial Discord: [discord.gg/DuYH3Fh](https://discord.gg/DuYH3Fh)\n",
        "releases": [
            {
                "name": "qemu-irix binary",
                "date": "2019-08-25T06:36:31Z"
            },
            {
                "name": "qemu-irix binary",
                "date": "2019-08-25T03:17:30Z"
            }
        ]
    }
}