{
    "https://api.github.com/repos/eligrey/FileSaver.js": {
        "forks": 4378,
        "watchers": 21740,
        "stars": 21740,
        "languages": {
            "JavaScript": 5775
        },
        "commits": [
            "2022-07-27T18:55:30Z",
            "2022-07-11T12:13:59Z",
            "2020-11-19T13:34:15Z",
            "2020-11-19T13:32:58Z",
            "2020-05-28T02:05:15Z",
            "2020-05-22T02:49:09Z",
            "2020-05-22T02:48:52Z",
            "2020-05-22T02:33:32Z",
            "2020-01-31T00:44:01Z",
            "2020-01-31T00:40:57Z",
            "2020-01-31T00:20:04Z",
            "2020-01-31T00:18:02Z",
            "2020-01-31T00:00:37Z",
            "2020-01-30T23:50:01Z",
            "2019-10-29T13:33:06Z",
            "2019-12-21T22:41:53Z",
            "2019-10-22T17:42:27Z",
            "2019-10-14T20:13:09Z",
            "2019-10-14T18:22:49Z",
            "2019-10-14T18:21:37Z",
            "2019-07-16T06:34:35Z",
            "2019-07-16T06:10:35Z",
            "2019-07-11T03:41:59Z",
            "2019-06-12T05:39:07Z",
            "2019-06-07T18:22:21Z",
            "2019-05-14T08:00:17Z",
            "2019-03-19T09:55:00Z",
            "2019-03-19T09:44:52Z",
            "2019-03-27T18:24:27Z",
            "2019-03-01T01:45:12Z"
        ],
        "creation_date": "2011-07-15T03:27:54Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 367,
        "readme": "If you need to save really large files bigger than the blob's size limitation or don't have\nenough RAM, then have a look at the more advanced [StreamSaver.js][7]\nthat can save data directly to the hard drive asynchronously with the power of the new streams API. That will have\nsupport for progress, cancelation and knowing when it's done writing\n\nFileSaver.js\n============\n\nFileSaver.js is the solution to saving files on the client-side, and is perfect for\nweb apps that generates files on the client, However if the file is coming from the\nserver we recommend you to first try to use [Content-Disposition][8] attachment response header as it has more cross-browser compatiblity.\n\nLooking for `canvas.toBlob()` for saving canvases? Check out\n[canvas-toBlob.js][2] for a cross-browser implementation.\n\nSupported Browsers\n------------------\n\n| Browser        | Constructs as | Filenames    | Max Blob Size | Dependencies |\n| -------------- | ------------- | ------------ | ------------- | ------------ |\n| Firefox 20+    | Blob          | Yes          | 800 MiB       | None         |\n| Firefox < 20   | data: URI     | No           | n/a           | [Blob.js](https://github.com/eligrey/Blob.js) |\n| Chrome         | Blob          | Yes          | [2GB][3]      | None         |\n| Chrome for Android | Blob      | Yes          | [RAM/5][3]    | None         |\n| Edge           | Blob          | Yes          | ?             | None         |\n| IE 10+         | Blob          | Yes          | 600 MiB       | None         |\n| Opera 15+      | Blob          | Yes          | 500 MiB       | None         |\n| Opera < 15     | data: URI     | No           | n/a           | [Blob.js](https://github.com/eligrey/Blob.js) |\n| Safari 6.1+*   | Blob          | No           | ?             | None         |\n| Safari < 6     | data: URI     | No           | n/a           | [Blob.js](https://github.com/eligrey/Blob.js) |\n| Safari 10.1+ \u00a0 | Blob \u00a0 \u00a0 \u00a0 \u00a0  | Yes \u00a0 \u00a0 \u00a0 \u00a0  | n/a \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | None         |\n\nFeature detection is possible:\n\n```js\ntry {\n    var isFileSaverSupported = !!new Blob;\n} catch (e) {}\n```\n\n### IE < 10\n\nIt is possible to save text files in IE < 10 without Flash-based polyfills.\nSee [ChenWenBrian and koffsyrup's `saveTextAs()`](https://github.com/koffsyrup/FileSaver.js#examples) for more details.\n\n### Safari 6.1+\n\nBlobs may be opened instead of saved sometimes\u2014you may have to direct your Safari users to manually\npress <kbd>\u2318</kbd>+<kbd>S</kbd> to save the file after it is opened. Using the `application/octet-stream` MIME type to force downloads [can cause issues in Safari](https://github.com/eligrey/FileSaver.js/issues/12#issuecomment-47247096).\n\n### iOS\n\nsaveAs must be run within a user interaction event such as onTouchDown or onClick; setTimeout will prevent saveAs from triggering. Due to restrictions in iOS saveAs opens in a new window instead of downloading, if you want this fixed please [tell Apple how this WebKit bug is affecting you](https://bugs.webkit.org/show_bug.cgi?id=167341).\n\nSyntax\n------\n### Import `saveAs()` from file-saver\n```js\nimport { saveAs } from 'file-saver';\n```\n\n```js\nFileSaver saveAs(Blob/File/Url, optional DOMString filename, optional Object { autoBom })\n```\n\nPass `{ autoBom: true }` if you want FileSaver.js to automatically provide Unicode text encoding hints (see: [byte order mark](https://en.wikipedia.org/wiki/Byte_order_mark)). Note that this is only done if your blob type has `charset=utf-8` set.\n\nExamples\n--------\n\n### Saving text using `require()`\n```js\nvar FileSaver = require('file-saver');\nvar blob = new Blob([\"Hello, world!\"], {type: \"text/plain;charset=utf-8\"});\nFileSaver.saveAs(blob, \"hello world.txt\");\n```\n\n### Saving text\n\n```js\nvar blob = new Blob([\"Hello, world!\"], {type: \"text/plain;charset=utf-8\"});\nFileSaver.saveAs(blob, \"hello world.txt\");\n```\n\n### Saving URLs\n\n```js\nFileSaver.saveAs(\"https://httpbin.org/image\", \"image.jpg\");\n```\nUsing URLs within the same origin will just use `a[download]`.\nOtherwise, it will first check if it supports cors header with a synchronous head request.\nIf it does, it will download the data and save using blob URLs.\nIf not, it will try to download it using `a[download]`.\n\nThe standard W3C File API [`Blob`][4] interface is not available in all browsers.\n[Blob.js][5] is a cross-browser `Blob` implementation that solves this.\n\n### Saving a canvas\n```js\nvar canvas = document.getElementById(\"my-canvas\");\ncanvas.toBlob(function(blob) {\n    saveAs(blob, \"pretty image.png\");\n});\n```\n\nNote: The standard HTML5 `canvas.toBlob()` method is not available in all browsers.\n[canvas-toBlob.js][6] is a cross-browser `canvas.toBlob()` that polyfills this.\n\n### Saving File\n\nYou can save a File constructor without specifying a filename. If the\nfile itself already contains a name, there is a hand full of ways to get a file\ninstance (from storage, file input, new constructor, clipboard event).\nIf you still want to change the name, then you can change it in the 2nd argument.\n\n```js\n// Note: Ie and Edge don't support the new File constructor,\n// so it's better to construct blobs and use saveAs(blob, filename)\nvar file = new File([\"Hello, world!\"], \"hello world.txt\", {type: \"text/plain;charset=utf-8\"});\nFileSaver.saveAs(file);\n```\n\n\n\n![Tracking image](https://in.getclicky.com/212712ns.gif)\n\n  [1]: http://eligrey.com/demos/FileSaver.js/\n  [2]: https://github.com/eligrey/canvas-toBlob.js\n  [3]: https://bugs.chromium.org/p/chromium/issues/detail?id=375297#c107\n  [4]: https://developer.mozilla.org/en-US/docs/DOM/Blob\n  [5]: https://github.com/eligrey/Blob.js\n  [6]: https://github.com/eligrey/canvas-toBlob.js\n  [7]: https://github.com/jimmywarting/StreamSaver.js\n  [8]: https://github.com/eligrey/FileSaver.js/wiki/Saving-a-remote-file#using-http-header\n\nInstallation\n------------------\n\n```bash\n# Basic Node.JS installation\nnpm install file-saver --save\nbower install file-saver\n```\n\nAdditionally, TypeScript definitions can be installed via:\n\n```bash\n# Additional typescript definitions\nnpm install @types/file-saver --save-dev\n```\n",
        "releases": [
            {
                "name": "v2.0.4",
                "date": "2020-08-06T22:13:47Z"
            },
            {
                "name": "v2.0.2",
                "date": "2019-05-14T08:01:28Z"
            },
            {
                "name": "v2.0.0",
                "date": "2018-11-14T11:35:32Z"
            },
            {
                "name": "1.3.8",
                "date": "2018-03-22T21:09:57Z"
            },
            {
                "name": "1.3.7",
                "date": "2018-03-20T21:31:43Z"
            },
            {
                "name": "1.3.6",
                "date": "2018-03-17T01:08:07Z"
            },
            {
                "name": "rollup fix",
                "date": "2018-01-12T13:06:15Z"
            },
            {
                "name": "is_safari fix",
                "date": "2016-10-05T10:54:21Z"
            },
            {
                "name": "1.3.2",
                "date": "2016-06-16T18:28:44Z"
            },
            {
                "name": "",
                "date": "2016-06-06T21:10:32Z"
            },
            {
                "name": "1.3.0",
                "date": "2016-05-31T07:43:31Z"
            },
            {
                "name": "1.2.2",
                "date": "2016-05-27T02:05:26Z"
            },
            {
                "name": "1.2.1",
                "date": "2016-05-26T23:02:10Z"
            },
            {
                "name": "",
                "date": "2016-05-25T20:22:32Z"
            }
        ]
    }
}