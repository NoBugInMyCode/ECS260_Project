{
    "https://api.github.com/repos/chriskiehl/Gooey": {
        "forks": 1023,
        "watchers": 20781,
        "stars": 20781,
        "languages": {
            "Python": 447853
        },
        "commits": [
            "2022-05-07T02:38:07Z",
            "2022-05-07T02:30:52Z",
            "2022-02-04T02:57:42Z",
            "2022-01-05T20:19:01Z",
            "2021-12-23T09:43:41Z",
            "2021-12-28T17:50:04Z",
            "2022-01-29T23:00:09Z",
            "2022-01-29T22:59:57Z",
            "2022-01-29T22:53:48Z",
            "2022-01-20T07:47:11Z",
            "2021-12-02T05:50:58Z",
            "2021-06-12T18:50:46Z",
            "2021-06-12T18:34:22Z",
            "2020-12-20T01:39:17Z",
            "2020-12-20T01:36:47Z",
            "2020-12-20T01:14:57Z",
            "2020-11-18T14:25:17Z",
            "2020-12-09T10:11:30Z",
            "2020-12-20T00:40:14Z",
            "2020-12-19T23:58:31Z",
            "2020-12-19T23:56:02Z",
            "2020-11-29T19:33:51Z",
            "2020-11-29T19:17:14Z",
            "2020-11-29T19:16:53Z",
            "2020-11-29T19:15:39Z",
            "2020-11-15T03:25:38Z",
            "2020-11-15T03:13:56Z",
            "2020-11-15T03:13:30Z",
            "2020-11-08T01:28:43Z",
            "2020-11-08T01:19:10Z"
        ],
        "creation_date": "2014-01-01T21:06:05Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 283,
        "readme": "# Gooey \n  \n\nTurn (almost) any Python 3 Console Program into a GUI application with one line\n\n<p align=\"center\">\n    <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/1-0-4-title-card.png\" />\n</p>\n\n\nTable of Contents\n-----------------  \n\n- [Gooey](#gooey)\n- [Table of contents](#table-of-contents)\n- [Latest Update](#latest-update)\n- [Quick Start](#quick-start)\n    - [Installation Instructions](#installation-instructions)\n    - [Usage](#usage)\n    - [Examples](#examples)\n- [What It Is](#what-is-it)\n- [Why Is It](#why)\n- [Who is this for](#who-is-this-for)\n- [How does it work](#how-does-it-work)\n- [Internationalization](#internationalization)\n- [Global Configuration](#global-configuration)\n- [Layout Customization](#layout-customization)\n- [Run Modes](#run-modes)\n    - [Full/Advanced](#advanced)\n    - [Basic](#basic)\n    - [No Config](#no-config)\n- [Menus](#menus)    \n- [Dynamic Validation](#dynamic-validation)\n- [Lifecycle Events and UI control](#lifecycle-events-and-ui-control)\n- [Showing Progress](#showing-progress)\n    - [Elapsed / Remaining Time](#elapsed--remaining-time)\n- [Customizing Icons](#customizing-icons)\n- [Packaging](#packaging)\n- [Screenshots](#screenshots)\n- [Contributing](#wanna-help)\n- [Image Credits](#image-credits)\n\n\n\n----------------  \n\n\n## Quick Start\n\n\n### Installation instructions\n\n\nThe easiest way to install Gooey is via `pip`\n\n    pip install Gooey \n\nAlternatively, you can install Gooey by cloning the project to your local directory\n\n    git clone https://github.com/chriskiehl/Gooey.git\n\nrun `setup.py` \n\n    python setup.py install\n    \n\n\n### Usage  \n\nGooey is attached to your code via a simple decorator on whichever method has your `argparse` declarations (usually `main`).\n\n    from gooey import Gooey\n\n    @Gooey      <--- all it takes! :)\n    def main():\n      parser = ArgumentParser(...)\n      # rest of code\n\nDifferent styling and functionality can be configured by passing arguments into the decorator.\n\n    # options\n    @Gooey(advanced=Boolean,          # toggle whether to show advanced config or not \n           language=language_string,  # Translations configurable via json\n           auto_start=True,           # skip config screens all together\n           target=executable_cmd,     # Explicitly set the subprocess executable arguments\n           program_name='name',       # Defaults to script name\n           program_description,       # Defaults to ArgParse Description\n           default_size=(610, 530),   # starting size of the GUI\n           required_cols=1,           # number of columns in the \"Required\" section\n           optional_cols=2,           # number of columns in the \"Optional\" section\n           dump_build_config=False,   # Dump the JSON Gooey uses to configure itself\n           load_build_config=None,    # Loads a JSON Gooey-generated configuration\n           monospace_display=False)   # Uses a mono-spaced font in the output screen\n    )\n    def main():\n      parser = ArgumentParser(...)\n      # rest of code\n            \nSee: [How does it Work](#how-does-it-work) section for details on each option.\n\nGooey will do its best to choose sensible widget defaults to display in the GUI. However, if more fine tuning is desired, you can use the drop-in replacement `GooeyParser` in place of `ArgumentParser`. This lets you control which widget displays in the GUI. See: [GooeyParser](#gooeyparser)\n\n    from gooey import Gooey, GooeyParser\n\n    @Gooey\n    def main():\n      parser = GooeyParser(description=\"My Cool GUI Program!\") \n      parser.add_argument('Filename', widget=\"FileChooser\")\n      parser.add_argument('Date', widget=\"DateChooser\")\n      ...\n\n### Examples\n\nGooey downloaded and installed? Great! Wanna see it in action? Head over the the [Examples Repository](https://github.com/chriskiehl/GooeyExamples) to download a few ready-to-go example scripts. They'll give you a quick tour of all Gooey's various layouts, widgets, and features. \n\n[Direct Download](https://github.com/chriskiehl/GooeyExamples/archive/master.zip)\n\n\n    \nWhat is it? \n-----------  \n\nGooey converts your Console Applications into end-user-friendly GUI applications. It lets you focus on building robust, configurable programs in a familiar way, all without having to worry about how it will be presented to and interacted with by your average user. \n\nWhy?\n---  \n\nBecause as much as we love the command prompt, the rest of the world looks at it like an ugly relic from the early '80s. On top of that, more often than not programs need to do more than just one thing, and that means giving options, which previously meant either building a GUI, or trying to explain how to supply arguments to a Console Application. Gooey was made to (hopefully) solve those problems. It makes programs easy to use, and pretty to look at! \n\nWho is this for?\n----------------  \n\nIf you're building utilities for yourself, other programmers, or something which produces a result that you want to capture and pipe over to another console application (e.g. *nix philosophy utils), Gooey probably isn't the tool for you. However, if you're building 'run and done,' around-the-office-style scripts, things that shovel bits from point A to point B, or simply something that's targeted at a non-programmer, Gooey is the perfect tool for the job. It lets you build as complex of an application as your heart desires all while getting the GUI side for free. \n\n\nHow does it work?\n-----------------\n\nGooey is attached to your code via a simple decorator on whichever method has your `argparse` declarations.\n\n    @Gooey\n    def my_run_func():\n      parser = ArgumentParser(...)\n      # rest of code\n\nAt run-time, it parses your Python script for all references to `ArgumentParser`. (The older `optparse` is currently not supported.) These references are then extracted, assigned a `component type` based on the `'action'` they provide, and finally used to assemble the GUI.  \n\n#### Mappings: \n\nGooey does its best to choose sensible defaults based on the options it finds. Currently, `ArgumentParser._actions` are mapped to the following `WX` components. \n\n| Parser Action    | Widget    | Example |\n|:----------------------|-----------|------|\n| store  |  TextCtrl |  <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/f54e9f5e-07c5-11e5-86e5-82f011c538cf.png\"/>|\n| store_const | CheckBox |<img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/f538c850-07c5-11e5-8cbe-864badfa54a9.png\"/>|\n| store_true | CheckBox | <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/f538c850-07c5-11e5-8cbe-864badfa54a9.png\"/>|\n| store_False | CheckBox|  <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/f538c850-07c5-11e5-8cbe-864badfa54a9.png\"/>   |\n| version | CheckBox|  <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/f538c850-07c5-11e5-8cbe-864badfa54a9.png\"/>   |\n| append | TextCtrl |  <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/f54e9f5e-07c5-11e5-86e5-82f011c538cf.png\"/>  | \n| count | DropDown &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/f53ccbe4-07c5-11e5-80e5-510e2aa22922.png\"/> | \n| Mutually Exclusive Group | RadioGroup | <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/f553feb8-07c5-11e5-9d5b-eaa4772075a9.png\"/>\n|choice &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|        DropDown | <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/f54e4da6-07c5-11e5-9e66-d8e6d7f18ac6.png\"/> |\n\n### GooeyParser\n\nIf the above defaults aren't cutting it, you can control the exact widget type by using the drop-in `ArgumentParser` replacement `GooeyParser`. This gives you the additional keyword argument `widget`, to which you can supply the name of the component you want to display. Best part? You don't have to change any of your `argparse` code to use it. Drop it in, and you're good to go. \n\n**Example:**\n\n    from argparse import ArgumentParser\n    ....\n    \n    def main(): \n        parser = ArgumentParser(description=\"My Cool Gooey App!\")\n        parser.add_argument('filename', help=\"name of the file to process\") \n\nGiven then above, Gooey would select a normal `TextField` as the widget type like this: \n<p align=\"center\">\n    <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/f5393e20-07c5-11e5-88e9-c153fc3ecfaa.PNG\">\n</p>\n\nHowever, by dropping in `GooeyParser` and supplying a `widget` name, you can display a much more user friendly `FileChooser`\n\n\n    from gooey import GooeyParser\n    ....\n    \n    def main(): \n        parser = GooeyParser(description=\"My Cool Gooey App!\")\n        parser.add_argument('filename', help=\"name of the file to process\", widget='FileChooser') \n        \n<p align=\"center\"><img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/f53ae23e-07c5-11e5-8757-c8aa6f3013b5.PNG\"></p>\n\n**Custom Widgets:**\n\n| Widget         |           Example            | \n|----------------|------------------------------| \n| DirChooser, FileChooser, MultiFileChooser, FileSaver, MultiFileSaver   | <p align=\"center\"><img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/f5483b28-07c5-11e5-9d01-1935635fc22d.gif\" width=\"400\"></p> | \n| DateChooser/TimeChooser   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <p align=\"center\"><img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/f544756a-07c5-11e5-86d6-862ac146ad35.gif\" width=\"400\"></p> <p>Please note that for both of these widgets the values passed to the application will always be in [ISO format](https://www.wxpython.org/Phoenix/docs/html/wx.DateTime.html#wx.DateTime.FormatISOTime) while localized values may appear in some parts of the GUI depending on end-user settings.</p> |\n| PasswordField | <p align=\"center\"><img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/28953722-eae72cca-788e-11e7-8fa1-9a1ef332a053.png\" width=\"400\"></p> |\n| Listbox | ![image](https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/31590191-fadd06f2-b1c0-11e7-9a49-7cbf0c6d33d1.png) |\n| BlockCheckbox | ![image](https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/46922288-9296f200-cfbb-11e8-8b0d-ddde08064247.png) <br/> The default InlineCheck box can look less than ideal if a large help text block is present. `BlockCheckbox` moves the text block to the normal position and provides a short-form `block_label` for display next to the control. Use `gooey_options.checkbox_label` to control the label text | \n|  ColourChooser   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;| <p align=\"center\"><img src=\"https://user-images.githubusercontent.com/21027844/72672451-0752aa80-3a0f-11ea-86ed-8303bd3e54b5.gif\" width=\"400\"></p> |\n| FilterableDropdown | <p align=\"center\"><img src=\"https://raw.githubusercontent.com/chriskiehl/GooeyImages/images/readme-images/filterable-dropdown.gif\" width=\"400\"></p> |\n| IntegerField | <p align=\"center\"><img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/integer-field.PNG\" width=\"400\"></p> |\n| DecimalField | <p align=\"center\"><img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/decimal-field.PNG\" width=\"400\"></p> |\n| Slider | <p align=\"center\"><img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/slider.PNG\" width=\"400\"></p> |\n\n\n\n \n  \nInternationalization\n-------------------- \n\n<img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/f52e9f1a-07c5-11e5-8f31-36a8fc14ac02.jpg\" align=\"right\" />\n\nGooey is international ready and easily ported to your host language. Languages are controlled via an argument to the `Gooey` decorator. \n\n    @Gooey(language='russian')\n    def main(): \n        ... \n\nAll program text is stored externally in `json` files. So adding new language support is as easy as pasting a few key/value pairs in the `gooey/languages/` directory. \n\nThanks to some awesome [contributors](https://github.com/chriskiehl/Gooey/graphs/contributors), Gooey currently comes pre-stocked with over 18 different translations! \n\nWant to add another one? Submit a [pull request!](https://github.com/chriskiehl/Gooey/compare)\n\n\n-------------------------------------------    \n\n\n\nGlobal Configuration \n--------------------\n\nJust about everything in Gooey's overall look and feel can be customized by passing arguments to the decorator. \n\n| Parameter | Summary | \n|-----------|---------|\n| encoding | Text encoding to use when displaying characters (default: 'utf-8') | \n| use_legacy_titles | Rewrites the default argparse group name from \"Positional\" to \"Required\". This is primarily for retaining backward compatibility with previous versions of Gooey (which had poor support/awareness of groups and did its own naive bucketing of arguments). |\n| advanced | Toggles whether to show the 'full' configuration screen, or a simplified version |\n| auto_start | Skips the configuration all together and runs the program immediately |\n| language | Tells Gooey which language set to load from the `gooey/languages` directory.|\n| target | Tells Gooey how to re-invoke itself. By default Gooey will find python, but this allows you to specify the program (and arguments if supplied).|\n| suppress_gooey_flag | Should be set when using a custom `target`. Prevent Gooey from injecting additional CLI params |\n|program_name | The name displayed in the title bar of the GUI window. If not supplied, the title defaults to the script name pulled from `sys.argv[0]`. |\n| program_description | Sets the text displayed in the top panel of the `Settings` screen. Defaults to the description pulled from `ArgumentParser`. |\n| default_size | Initial size of the window | \n| fullscreen | start Gooey in fullscreen mode |\n| required_cols | Controls how many columns are in the Required Arguments section <br> :warning: **Deprecation notice:** See [Layout Customization](https://github.com/chriskiehl/Gooey#layout-customization) for modern layout controls|\n| optional_cols | Controls how many columns are in the Optional Arguments section <br> :warning: **Deprecation notice:** See [Layout Customization](https://github.com/chriskiehl/Gooey#layout-customization) for modern layout controls|\n| dump_build_config | Saves a `json` copy of its build configuration on disk for reuse/editing | \n| load_build_config | Loads a `json` copy of its build configuration from disk | \n| monospace_display | Uses a mono-spaced font in the output screen <br> :warning: **Deprecation notice:** See [Layout Customization](https://github.com/chriskiehl/Gooey#layout-customization) for modern font configuration| \n| image_dir | Path to the directory in which Gooey should look for custom images/icons |\n| language_dir | Path to the directory in which Gooey should look for custom languages files |\n| disable_stop_button | Disable the `Stop` button when running |\n| show_stop_warning | Displays a warning modal before allowing the user to force termination of your program |\n| force_stop_is_error | Toggles whether an early termination by the shows the success or error screen |\n| show_success_modal | Toggles whether or not to show a summary modal after a successful run |\n| show_failure_modal | Toggles whether or not to show a summary modal on failure |\n| show_restart_button | Toggles whether or not to show the restart button at the end of execution |\n| run_validators | Controls whether or not to have Gooey perform validation before calling your program |\n| poll_external_updates | (Experimental!) When True, Gooey will call your code with a `gooey-seed-ui` CLI argument and use the response to fill out dynamic values in the UI (See: [Using Dynamic Values](#using-dynamic-values))|\n| use_cmd_args | Substitute any command line arguments provided at run time for the default values specified in the Gooey configuration |\n| return_to_config | When True, Gooey will return to the configuration settings window upon successful run |\n| progress_regex | A text regex used to pattern match runtime progress information. See: [Showing Progress](#showing-progress) for a detailed how-to | \n| progress_expr | A python expression applied to any matches found via the `progress_regex`. See: [Showing Progress](#showing-progress) for a detailed how-to |\n| hide_progress_msg | Option to hide textual progress updates which match the `progress_regex`. See: [Showing Progress](#showing-progress) for a detailed how-to |\n| disable_progress_bar_animation | Disable the progress bar |\n| timing_options | This contains the options for displaying time remaining and elapsed time, to be used with `progress_regex` and `progress_expr`. [Elapsed / Remaining Time](#elapsed--remaining-time). Contained as a dictionary with the options `show_time_remaining` and `hide_time_remaining_on_complete`. Eg: `timing_options={'show_time_remaining':True,'hide_time_remaining_on_complete':True}` |\n| show_time_remaining | Disable the time remaining text see [Elapsed / Remaining Time](#elapsed--remaining-time) |\n| hide_time_remaining_on_complete | Hide time remaining on complete screen see [Elapsed / Remaining Time](#elapsed--remaining-time) |\n| requires_shell | Controls whether or not the `shell` argument is used when invoking your program. [More info here](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess#3172488) |\n| shutdown_signal | Specifies the `signal` to send to the child process when the `stop` button is pressed. See [Gracefully Stopping](https://github.com/chriskiehl/Gooey/tree/master/docs) in the docs for more info. | \n| navigation | Sets the \"navigation\" style of Gooey's top level window. <br>Options: <table> <thead> <tr><th>TABBED</th><th>SIDEBAR</th></tr></thead> <tbody> <tr> <td><img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/34464826-2a946ba2-ee47-11e7-92a4-4afeb49dc9ca.png\" width=\"200\" height=\"auto\"></td><td><img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/34464847-9918fbb0-ee47-11e7-8d5f-0d42631c2bc0.png\" width=\"200\" height=\"auto\"></td></tr></tbody></table>|\n| sidebar_title | <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/34472159-1bfedbd0-ef10-11e7-8bc3-b6d69febb8c3.png\" width=\"250\" height=\"auto\" align=\"right\"> Controls the heading title above the SideBar's navigation pane. Defaults to: \"Actions\" |\n| show_sidebar | Show/Hide the sidebar in when navigation mode == `SIDEBAR` |\n| body_bg_color | HEX value of the main Gooey window |\n| header_bg_color | HEX value of the header background | \n| header_height | height in pixels of the header | \n| header_show_title | Show/Hide the header title | \n| header_show_subtitle | Show/Hide the header subtitle | \n| footer_bg_color | HEX value of the Footer background | \n| sidebar_bg_color | HEX value of the Sidebar's background | \n| terminal_panel_color | HEX value of the terminal's panel | \n| terminal_font_color | HEX value of the font displayed in Gooey's terminal | \n| terminal_font_family | Name of the Font Family to use in the terminal | \n| terminal_font_weight | Weight of the font (`constants.FONTWEIGHT_NORMAL`, `constants.FONTWEIGHT_XXX`) | \n| terminal_font_size | Point size of the font displayed in the terminal | \n| error_color | HEX value of the text displayed when a validation error occurs |\n| richtext_controls | Switch on/off the console support for terminal control sequences (limited support for font weight and color). Defaults to : False. See [docs](https://github.com/chriskiehl/Gooey/tree/master/docs) for additional details |\n| menus | Show custom menu groups and items (see: [Menus](#menus) |\n| clear_before_run | When true, previous output will be cleared from the terminal when running program again |\n\n\n\nLayout Customization\n--------------------\n\nYou can achieve fairly flexible layouts with Gooey by using a few simple customizations. \n\nAt the highest level, you have several overall layout options controllable via various arguments to the Gooey decorator.\n\n\n| `show_sidebar=True` | `show_sidebar=False` | `navigation='TABBED'` |  `tabbed_groups=True` |\n|---------------------|----------------------|----------------------|------------------------|\n|<img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/34464847-9918fbb0-ee47-11e7-8d5f-0d42631c2bc0.png\" width=\"400\"> |<img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/35487799-762aa308-0434-11e8-8eb3-1e9fab2d13ae.png\" width=\"400\"> |<img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/34464835-5ba9b0e4-ee47-11e7-9561-55e3647c2165.png\" width=\"400\"> |<img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/34464826-2a946ba2-ee47-11e7-92a4-4afeb49dc9ca.png\" width=\"400\"> |\n\n\n**Grouping Inputs**\n\nBy default, if you're using Argparse with Gooey, your inputs will be split into two buckets: `positional` and `optional`. However, these aren't always the most descriptive groups to present to your user. You can arbitrarily bucket inputs into logic groups and customize the layout of each. \n\nWith `argparse` this is done via `add_argument_group()`\n\n<img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/35487956-a4c9915e-0436-11e8-8a11-fd21528aedf0.png\" align=\"right\" width=\"410\">\n\n```\nparser = ArgumentParser()\nsearch_group = parser.add_argument_group(\n    \"Search Options\", \n    \"Customize the search options\"\n)\n```\n\nYou can add arguments to the group as normal \n\n```\nsearch_group.add_argument(\n    '--query', \n    help='Base search string'\n) \n```\n\nWhich will display them as part of the group within the UI. \n\n\n\n\nRun Modes\n---------\n\nGooey has a handful of presentation modes so you can tailor its layout to your content type and user's level or experience. \n\n\n\n\n### Advanced \n\n\n\n\nThe default view is the \"full\" or \"advanced\" configuration screen. It has two different layouts depending on the type of command line interface it's wrapping. For most applications, the flat layout will be the one to go with, as its layout matches best to the familiar CLI schema of a primary command followed by many options (e.g. Curl, FFMPEG). \n\nOn the other side is the Column Layout. This one is best suited for CLIs that have multiple paths or are made up of multiple little tools each with their own arguments and options (think: git). It displays the primary paths along the left column, and their corresponding arguments in the right. This is a great way to package a lot of varied functionality into a single app. \n\n<p align=\"center\">\n<img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/f06a36cc-08ad-11e5-843e-9322df96d4d6.png\">\n</p>\n\nBoth views present each action in the `Argument Parser` as a unique GUI component. It makes it ideal for presenting the program to users which are unfamiliar with command line options and/or Console Programs in general. Help messages are displayed along side each component to make it as clear as possible which each widget does.\n\n**Setting the layout style:**\n\nCurrently, the layouts can't be explicitly specified via a parameter (on the TODO!). The layouts are built depending on whether or not there are `subparsers` used in your code base. So, if you want to trigger the `Column Layout`, you'll need to add a `subparser` to your `argparse` code. \n\nIt can be toggled via the `advanced` parameter in the `Gooey` decorator. \n\n\n    @gooey(advanced=True)\n    def main():\n        # rest of code   \n        \n\n\n--------------------------------------------  \n\n\n\n### Basic  \n\nThe basic view is best for times when the user is familiar with Console Applications, but you still want to present something a little more polished than a simple terminal. The basic display is accessed by setting the `advanced` parameter in the `gooey` decorator to `False`. \n\n    @gooey(advanced=False)\n    def main():\n        # rest of code  \n\n<p align=\"center\">\n    <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/f53a4306-07c5-11e5-8e63-b510d6db9953.png\">\n</p>\n\n\n----------------------------------------------  \n\n### No Config\n\nNo Config pretty much does what you'd expect: it doesn't show a configuration screen. It hops right to the `display` section and begins execution of the host program. This is the one for improving the appearance of little one-off scripts. \n\nTo use this mode, set `auto_start=True` in the Gooey decorator. \n\n```python\n@Gooey(auto_start=True) \ndef main (): \n    ... \n```\n\n<p align=\"center\">\n    <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/f54fe6f2-07c5-11e5-92e4-f72a2ae12862.png\">\n</p>\n\n\n--------------------------------------\n\n\n### Menus \n\n\n![image](https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/47250909-74782a00-d3df-11e8-88ac-182d06c4435a.png)\n\n>Added 1.0.2\n\nYou can add a Menu Bar to the top of Gooey with customized menu groups and items.\n\nMenus are specified on the main `@Gooey` decorator as a list of maps. \n\n```\n@Gooey(menu=[{}, {}, ...])\n```\n\nEach map is made up of two key/value pairs \n\n1. `name` - the name for this menu group\n2. `items` - the individual menu items within this group \n\nYou can have as many menu groups as you want. They're passed as a list to the `menu` argument on the `@Gooey` decorator.\n\n```\n@Gooey(menu=[{'name': 'File', 'items: []},\n             {'name': 'Tools', 'items': []},\n             {'name': 'Help', 'items': []}])\n```\n\nIndividual menu items in a group are also just maps of key / value pairs. Their exact key set varies based on their `type`, but two keys will always be present: \n\n* `type` - this controls the behavior that will be attached to the menu item as well as the keys it needs specified\n* `menuTitle` - the name for this MenuItem  \n\n\nCurrently, three types of menu options are supported: \n\n * AboutDialog \n * MessageDialog\n * Link\n * HtmlDialog\n \n\n<img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/47251026-9ffc1400-d3e1-11e8-9095-982a6367561b.png\" width=\"400\" height=\"auto\" align=\"right\" />\n\n**About Dialog** is your run-of-the-mill About Dialog. It displays program information such as name, version, and license info in a standard native AboutBox.\n\nSchema \n\n * `name` - (_optional_) \n * `description` - (_optional_) \n * `version` - (_optional_)  \n * `copyright` - (_optional_) \n * `license` - (_optional_)\n * `website` - (_optional_)\n * `developer` - (_optional_)\n\nExample: \n\n```\n{\n    'type': 'AboutDialog',\n    'menuTitle': 'About',\n    'name': 'Gooey Layout Demo',\n    'description': 'An example of Gooey\\'s layout flexibility',\n    'version': '1.2.1',\n    'copyright': '2018',\n    'website': 'https://github.com/chriskiehl/Gooey',\n    'developer': 'http://chriskiehl.com/',\n    'license': 'MIT'\n}\n```\n\n<img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/47250925-bbfeb600-d3df-11e8-88a8-5ba838e9466d.png\" width=\"400\" height=\"auto\" align=\"right\" />\n\n**MessageDialog** is a generic informational dialog box. You can display anything from small alerts, to long-form informational text to the user.\n\nSchema: \n\n * `message` - (_required_) the text to display in the body of the modal \n * `caption` - (_optional_) the caption in the title bar of the modal    \n\nExample: \n\n```python\n{\n    'type': 'MessageDialog',\n    'menuTitle': 'Information',\n    'message': 'Hey, here is some cool info for ya!',\n    'caption': 'Stuff you should know'\n}\n```\n\n**Link** is for sending the user to an external website. This will spawn their default browser at the URL you specify. \n\nSchema: \n\n * `url` - (_required_) - the fully qualified URL to visit\n\nExample:\n\n```python\n{\n    'type': 'Link',\n    'menuTitle': 'Visit Out Site',\n    'url': 'http://www.example.com'\n}\n```\n\n\n<img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/docs/menus/html-dialog.PNG\" width=\"400\" height=\"auto\" align=\"right\" />\n\n**HtmlDialog** gives you full control over what's displayed in the message dialog (bonus: people can copy/paste text from this one!). \n\n\n\nSchema: \n\n * `caption` - (_optional_) the caption in the title bar of the modal   \n * `html` - (_required_) the html you want displayed in the dialog. Note: only a small subset of HTML is supported. [See the WX docs for more info](https://wxpython.org/Phoenix/docs/html/html_overview.html). \n\nExample: \n\n```python\n{\n    'type': 'HtmlDialog',\n    'menuTitle': 'Fancy Dialog!',\n    'caption': 'Demo of the HtmlDialog',\n    'html': '''\n    <body bgcolor=\"white\">\n        <img src=/path/to/your/image.png\" /> \n        <h1>Hello world!</h1> \n        <p><font color=\"red\">Lorem ipsum dolor sit amet, consectetur</font></p>\n    </body>\n    '''\n}\n\n```\n\n**A full example:**\n\nTwo menu groups (\"File\" and \"Help\") with four menu items between them. \n\n```python\n@Gooey(\n    program_name='Advanced Layout Groups',\n    menu=[{\n        'name': 'File',\n        'items': [{\n                'type': 'AboutDialog',\n                'menuTitle': 'About',\n                'name': 'Gooey Layout Demo',\n                'description': 'An example of Gooey\\'s layout flexibility',\n                'version': '1.2.1',\n                'copyright': '2018',\n                'website': 'https://github.com/chriskiehl/Gooey',\n                'developer': 'http://chriskiehl.com/',\n                'license': 'MIT'\n            }, {\n                'type': 'MessageDialog',\n                'menuTitle': 'Information',\n                'caption': 'My Message',\n                'message': 'I am demoing an informational dialog!'\n            }, {\n                'type': 'Link',\n                'menuTitle': 'Visit Our Site',\n                'url': 'https://github.com/chriskiehl/Gooey'\n            }]\n        },{\n        'name': 'Help',\n        'items': [{\n            'type': 'Link',\n            'menuTitle': 'Documentation',\n            'url': 'https://www.readthedocs.com/foo'\n        }]\n    }]\n)\n```\n\n\n---------------------------------------  \n\n\n### Dynamic Validation \n\n\n<img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/34464861-0e82c214-ee48-11e7-8f4a-a8e00721efef.png\" width=\"400\" height=\"auto\" align=\"right\" />\n\n>:warning: \n>Note! This functionality is experimental and likely to be unstable. Its API may be changed or removed altogether. Feedback/thoughts on this feature is welcome and encouraged!\n \n>:warning: \n>See [Release Notes]() for guidance on upgrading from 1.0.8 to 1.2.0 \n\n\nBefore passing the user's inputs to your program, Gooey can optionally run a special pre-flight validation to check that all arguments pass your specified validations.  \n\n**How does it work?**   \n\nGooey piggy backs on the `type` parameter available to most Argparse Argument types. \n\n```python\nparser.add_argument('--some-number', type=int)\nparser.add_argument('--some-number', type=float)\n```\n\nIn addition to simple builtins like `int` and `float`, you can supply your own function to the `type` parameter to vet the incoming values. \n\n```python\ndef must_be_exactly_ten(value): \n    number = int(value) \n    if number == 10:\n        return number\n    else: \n        raise TypeError(\"Hey! you need to provide exactly the number 10!\")\n        \n        \ndef main(): \n    parser = ArgumentParser()\n    parser.add_argument('--ten', type=must_be_exactly_ten)\n```\n\n**How to enable the pre-flight validation**\n\nBy default, Gooey won't run the validation. Why? This feature is fairly experimental and does a lot of intense Monkey Patching behind the scenes. As such, it's currently opt-in. \n\nYou enable to validation by telling Gooey you'd like to subscribe to the `VALIDATE_FORM` event. \n\n```python\nfrom gooey import Gooey, Events \n\n@Gooey(use_events=[Events.VALIDATE_FORM])\ndef main(): \n    ... \n```\n\n\n<img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/dynamic-validation-1-2-0.JPG\" />\n\nNow, when you run Gooey, before it invokes your main program, it'll send a separate pre-validation check and record any issues raised from your `type` functions.  \n\n\n**Full Code Example**\n\n```\nfrom gooey import Gooey, Events\nfrom argparse import ArgumentParser\n\ndef must_be_exactly_ten(value):\n    number = int(value)\n    if number == 10:\n        return number\n    else:\n        raise TypeError(\"Hey! you need to provide exactly the number 10!\")\n\n@Gooey(program_name='Validation Example', use_events=[Events.VALIDATE_FORM])\ndef main():\n    parser = ArgumentParser(description=\"Checkout this validation!\")\n    parser.add_argument('--ten', metavar='This field should be 10', type=must_be_exactly_ten)\n    args = parser.parse_args()\n    print(args)\n```\n\n\n\n\n---------------------------------------\n  \n\n## Lifecycle Events and UI control\n\n>:warning: \n>Note! This functionality is experimental. Its API may be changed or removed altogether. Feedback on this feature is welcome and encouraged! \n\nAs of 1.2.0, Gooey now exposes coarse grain lifecycle hooks to your program. This means you can now take additional follow-up actions in response to successful runs or failures and even control the current state of the UI itself! \n\nCurrently, two primary hooks are exposed: \n\n* `on_success`\n* `on_error`\n\nThese fire exactly when you'd expect: after your process has completed. \n\n\n**Anatomy of an lifecycle handler**:\n\nBoth `on_success` and `on_error` have the same type signature. \n\n```python\nfrom typing import Mapping, Any, Optional\nfrom gooey.types import PublicGooeyState  \n\ndef on_success(args: Mapping[str, Any], state: PublicGooeyState) -> Optional[PublicGooeyState]:\n    \"\"\"\n    You can do anything you want in the handler including \n    returning an updated UI state for your next run!   \n    \"\"\" \n    return state\n    \ndef on_error(args: Mapping[str, Any], state: PublicGooeyState) -> Optional[PublicGooeyState]:\n    \"\"\"\n    You can do anything you want in the handler including \n    returning an updated UI state for your next run!   \n    \"\"\" \n    return state    \n```\n\n* **args** This is the parsed Argparse object (e.g. the output of `parse_args()`). This will be a mapping of the user's arguments as existed when your program was invoked.\n* **state** This is the current state of Gooey's UI. If your program uses subparsers, this currently just lists the state of the active parser/form. Whatever updated version of this state you return will be reflected in the UI!    \n\n\n**Attaching the handlers:**\n\nHandlers are attached when instantiating the `GooeyParser`.\n\n```python\nparser = GooeyParser(\n    on_success=my_success_handler,\n    on_failure=my_failure_handler)\n``` \n\n\n**Subscribing to the lifecycle events**\n\nJust like [Validation](#dynamic-validation), these lifecycle events are opt-in. Pass the event you'd like to subscribe to into the `use_events` Gooey decorator argument. \n\n```python\nfrom gooey import Gooey, Events \n\n@Gooey(use_events=[Events.ON_SUCCESS, Events.ON_ERROR])\ndef main(): \n    ... \n```\n\n\n\n-------------------------------------\n\n## Showing Progress\n\n<img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/45590349-55bbda80-b8eb-11e8-9aed-b4fe377756ac.png\" align=\"right\" width=\"420\"/>\n\nGiving visual progress feedback with Gooey is easy! If you're already displaying textual progress updates, you can tell Gooey to hook into that existing output in order to power its Progress Bar. \n\nFor simple cases, output strings which resolve to a numeric representation of the completion percentage (e.g. `Progress 83%`) can be pattern matched and turned into a progress bar status with a simple regular expression (e.g. `@Gooey(progress_regex=r\"^progress: (\\d+)%$\")`). \n\nFor more complicated outputs, you can pass in a custom evaluation expression (`progress_expr`) to transform regular expression matches as needed. \n\nOutput strings which satisfy the regular expression can be hidden from the console via the `hide_progress_msg` parameter (e.g. `@Gooey(progress_regex=r\"^progress: (\\d+)%$\", hide_progress_msg=True)`.\n\n**Regex and Processing Expression**\n\n```python\n@Gooey(progress_regex=r\"^progress: (?P<current>\\d+)/(?P<total>\\d+)$\",\n       progress_expr=\"current / total * 100\")\n```\n\n**Program Output:**\n\n```\nprogress: 1/100\nprogress: 2/100\nprogress: 3/100\n...\n```\n\nThere are lots of options for telling Gooey about progress as your program is running. Checkout the [Gooey Examples](https://github.com/chriskiehl/GooeyExamples) repository for more detailed usage and examples! \n\n### Elapsed / Remaining Time\n\nGooey also supports tracking elapsed / remaining time when progress is used! This is done in a similar manner to that of the project [tqdm](https://github.com/tqdm/tqdm). This can be enabled with `timing_options`, the `timing_options` argument takes in a dictionary with the keys `show_time_remaining` and `hide_time_remaining_on_complete`. The default behavior is True for `show_time_remaining` and False for `hide_time_remaining_on_complete`. This will only work when `progress_regex` and `progress_expr` are used.\n\n```python\n@Gooey(progress_regex=r\"^progress: (?P<current>\\d+)/(?P<total>\\d+)$\",\n       progress_expr=\"current / total * 100\",\n       timing_options = {\n        'show_time_remaining':True,\n        'hide_time_remaining_on_complete':True,\n    })\n```\n\n--------------------------------------\n\n\n## Customizing Icons\n\nGooey comes with a set of six default icons. These can be overridden with your own custom images/icons by telling Gooey to search additional directories when initializing. This is done via the `image_dir` argument to the `Gooey` decorator. \n\n    @Gooey(program_name='Custom icon demo', image_dir='/path/to/my/image/directory')\n    def main():\n        # rest of program\n        \nImages are discovered by Gooey based on their _filenames_. So, for example, in order to supply a custom configuration icon, simply place an image with the filename `config_icon.png` in your images directory. These are the filenames which can be overridden:\n\n* program_icon.png\n* success_icon.png\n* running_icon.png\n* loading_icon.gif\n* config_icon.png\n* error_icon.png\n\n\n## Packaging\n\nThanks to some [awesome contributors](https://github.com/chriskiehl/Gooey/issues/58), packaging Gooey as an executable is super easy. \n\nThe tl;dr [pyinstaller](https://github.com/pyinstaller/pyinstaller) version is to drop this [build.spec](https://raw.githubusercontent.com/chriskiehl/Gooey/master/docs/packaging/build-win.spec) into the root directory of your application. Edit its contents so that the `APPPNAME` and `name` are relevant to your project and the `pathex` value points to your applications root, then execute `pyinstaller -F --windowed build.spec` to bundle your app into a ready-to-go executable. \n\nDetailed step by step instructions can be found [here](https://github.com/chriskiehl/Gooey/blob/master/docs/packaging/Packaging-Gooey.md). \n\n\nScreenshots\n------------  \n\n| Flat Layout | Column Layout |Success Screen | Error Screen | Warning Dialog |\n|-------------|---------------|---------------|--------------|----------------|\n| <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/4414e54e-0965-11e5-964b-f717a7adaac6.jpg\"> | <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/4411b824-0965-11e5-905a-3a2b5df0efb3.jpg\"> | <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/44165442-0965-11e5-8edf-b8305353285f.jpg\"> | <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/4410dcce-0965-11e5-8243-c1d832c05887.jpg\"> | <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/4415432c-0965-11e5-9190-17f55460faf3.jpg\"> | \n\n| Custom Groups | Tabbed Groups | Tabbed Navigation | Sidebar Navigation | Input Validation |\n|-------------|---------------|---------------|--------------|----------------|\n| <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/34464824-c044d57a-ee46-11e7-9c35-6e701a7c579a.png\"> | <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/34464826-2a946ba2-ee47-11e7-92a4-4afeb49dc9ca.png\"> | <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/34464835-5ba9b0e4-ee47-11e7-9561-55e3647c2165.png\"> | <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/34464847-9918fbb0-ee47-11e7-8d5f-0d42631c2bc0.png\"> | <img src=\"https://github.com/chriskiehl/GooeyImages/raw/images/readme-images/34464861-0e82c214-ee48-11e7-8f4a-a8e00721efef.png\"> | \n\n\n\n\n\n----------------------------------------------  \n\n\n\n\n\n\nWanna help?\n-----------  \n\nCode, translation, documentation, or graphics? All pull requests are welcome. Just make sure to checkout [the contributing guidelines](https://github.com/chriskiehl/Gooey/blob/master/CONTRIBUTING.md) first.\n\n\n\n\n",
        "releases": [
            {
                "name": "Gooey 1.2.0-ALPHA ",
                "date": "2022-02-04T02:56:41Z"
            },
            {
                "name": "Gooey 1.0.8.1",
                "date": "2021-06-12T18:51:56Z"
            },
            {
                "name": "Gooey 1.0.8",
                "date": "2020-12-20T01:40:37Z"
            },
            {
                "name": "Gooey 1.0.7",
                "date": "2020-11-29T19:38:07Z"
            },
            {
                "name": "Gooey 1.0.6",
                "date": "2020-11-15T03:30:01Z"
            },
            {
                "name": "Gooey 1.0.5 ",
                "date": "2020-11-08T01:38:38Z"
            },
            {
                "name": "Gooey 1.0.4",
                "date": "2020-06-21T20:11:13Z"
            },
            {
                "name": "Gooey 1.0.3.1 Hotfix",
                "date": "2020-04-25T22:34:37Z"
            },
            {
                "name": "Gooey 1.0.3 Released! ",
                "date": "2019-09-22T19:30:23Z"
            }
        ]
    }
}