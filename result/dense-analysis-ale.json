{
    "https://api.github.com/repos/dense-analysis/ale": {
        "forks": 1444,
        "watchers": 13636,
        "stars": 13636,
        "languages": {
            "Vim Script": 1278020,
            "Shell": 25924,
            "Python": 13548,
            "Lua": 2533,
            "Batchfile": 755,
            "Dockerfile": 663,
            "Astro": 309,
            "Racket": 229,
            "Elixir": 59,
            "JavaScript": 28,
            "Jsonnet": 13,
            "Kotlin": 1,
            "VHDL": 1
        },
        "commits": [
            "2025-01-10T04:35:30Z",
            "2025-01-10T04:34:56Z",
            "2025-01-10T04:34:29Z",
            "2024-12-29T04:55:43Z",
            "2024-12-29T04:42:04Z",
            "2024-12-29T04:37:33Z",
            "2024-12-29T04:36:18Z",
            "2024-12-29T04:35:28Z",
            "2024-12-29T04:07:00Z",
            "2024-11-27T13:17:31Z",
            "2024-11-27T13:17:02Z",
            "2024-11-23T09:42:22Z",
            "2024-11-19T02:40:56Z",
            "2024-11-17T02:22:36Z",
            "2024-11-17T02:00:55Z",
            "2024-11-09T06:51:54Z",
            "2024-10-31T12:29:59Z",
            "2024-10-31T12:28:44Z",
            "2024-10-19T15:19:18Z",
            "2024-10-19T15:18:24Z",
            "2024-10-19T15:13:50Z",
            "2024-10-14T02:45:41Z",
            "2024-09-05T06:37:30Z",
            "2024-08-14T07:24:22Z",
            "2024-07-12T00:40:38Z",
            "2024-07-09T00:41:17Z",
            "2024-07-08T02:22:46Z",
            "2024-07-02T07:43:02Z",
            "2024-06-27T05:30:06Z",
            "2024-06-25T08:18:28Z"
        ],
        "creation_date": "2016-09-08T23:22:45Z",
        "contributors": 30,
        "topics": [
            "autocomplete",
            "language-server-protocol",
            "languageclient",
            "linter",
            "neovim-plugin",
            "syntax-checker",
            "vim",
            "vim-plugin",
            "vim-plugins"
        ],
        "subscribers": 87,
        "readme": "# Asynchronous Lint Engine\n\n[![Vim](https://img.shields.io/badge/VIM-%2311AB00.svg?style=for-the-badge&logo=vim&logoColor=white)](https://www.vim.org/) [![Neovim](https://img.shields.io/badge/NeoVim-%2357A143.svg?&style=for-the-badge&logo=neovim&logoColor=white)](https://neovim.io/) [![CI](https://img.shields.io/github/actions/workflow/status/dense-analysis/ale/main.yml?branch=master&label=CI&logo=github&style=for-the-badge)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://img.shields.io/appveyor/build/dense-analysis/ale?label=Windows&style=for-the-badge)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the Dense Analysis Discord server](https://img.shields.io/badge/chat-Discord-5865F2?style=for-the-badge&logo=appveyor)](https://discord.gg/5zFD6pQxDk)\n\n![ALE Logo by Mark Grealish - https://www.bhalash.com/](https://user-images.githubusercontent.com/3518142/59195920-2c339500-8b85-11e9-9c22-f6b7f69637b8.jpg)\n\nALE (Asynchronous Lint Engine) is a plugin providing linting (syntax checking\nand semantic errors) in NeoVim 0.6.0+ and Vim 8.0+ while you edit your text files,\nand acts as a Vim [Language Server Protocol](https://langserver.org/) client.\n\n<video autoplay=\"true\" muted=\"true\" loop=\"true\" controls=\"false\" src=\"https://user-images.githubusercontent.com/3518142/210141215-8f2ff760-6a87-4704-a11e-c109b8e9ec41.mp4\" title=\"An example showing what ALE can do.\"></video>\n\nALE makes use of NeoVim and Vim 8 job control functions and timers to\nrun linters on the contents of text buffers and return errors as\ntext is changed in Vim. This allows for displaying warnings and\nerrors in files being edited in Vim before files have been saved\nback to a filesystem.\n\nIn other words, this plugin allows you to lint while you type.\n\nALE offers support for fixing code with command line tools in a non-blocking\nmanner with the `:ALEFix` feature, supporting tools in many languages, like\n`prettier`, `eslint`, `autopep8`, and more.\n\nALE acts as a \"language client\" to support a variety of Language Server Protocol\nfeatures, including:\n\n* Diagnostics (via Language Server Protocol linters)\n* Go To Definition (`:ALEGoToDefinition`)\n* Completion (Built in completion support, or with Deoplete)\n* Finding references (`:ALEFindReferences`)\n* Hover information (`:ALEHover`)\n* Symbol search (`:ALESymbolSearch`)\n\nIf you don't care about Language Server Protocol, ALE won't load any of the code\nfor working with it unless needed. One of ALE's general missions is that you\nwon't pay for the features that you don't use.\n\n**Help Wanted:** If you would like to help maintain this plugin by managing the\nmany issues and pull requests that are submitted, please send the author an\nemail at [dev@w0rp.com](mailto:dev@w0rp.com?subject=Helping%20with%20ALE).\n\nIf you enjoy this plugin, feel free to contribute or check out the author's\nother content at [w0rp.com](https://w0rp.com).\n\n## Why ALE?\n\nALE has been around for many years, and there are many ways to run asynchronous\nlinting and fixing of code in Vim. ALE offers the following.\n\n* No dependencies for ALE itself\n* Lightweight plugin architecture (No JavaScript or Python required)\n* Low memory footprint\n* Runs virtually everywhere, including remote shells, and in `git commit`\n* Out of the box support for running particular linters and language servers\n* Near-zero configuration with custom code for better defaults\n* Highly customizable and well-documented (`:help ale-options`)\n* Breaking changes for the plugin are extremely rare\n* Support for older Vim and Neovim versions\n* Windows support\n* Well-integrated with other plugins\n\n## Supported Languages and Tools\n\nALE supports a wide variety of languages and tools. See the\n[full list](supported-tools.md) in the\n[Supported Languages and Tools](supported-tools.md) page.\n\n## Usage\n\n<a name=\"usage-linting\"></a>\n\n### Linting\n\nOnce this plugin is installed, while editing your files in supported\nlanguages and tools which have been correctly installed,\nthis plugin will send the contents of your text buffers to a variety of\nprograms for checking the syntax and semantics of your programs. By default,\nlinters will be re-run in the background to check your syntax when you open\nnew buffers or as you make edits to your files.\n\nThe behavior of linting can be configured with a variety of options,\ndocumented in [the Vim help file](doc/ale.txt). For more information on the\noptions ALE offers, consult `:help ale-options` for global options and `:help\nale-integration-options` for options specified to particular linters.\n\n<a name=\"usage-fixing\"></a>\n\n### Fixing\n\nALE can fix files with the `ALEFix` command. Functions need to be configured\neither in each buffer with a `b:ale_fixers`, or globally with `g:ale_fixers`.\n\nThe recommended way to configure fixers is to define a List in an ftplugin file.\n\n```vim\n\" In ~/.vim/ftplugin/javascript.vim, or somewhere similar.\n\n\" Fix files with prettier, and then ESLint.\nlet b:ale_fixers = ['prettier', 'eslint']\n\" Equivalent to the above.\nlet b:ale_fixers = {'javascript': ['prettier', 'eslint']}\n```\n\nYou can also configure your fixers from vimrc using `g:ale_fixers`, before or\nafter ALE has been loaded.\n\nA `*` in place of the filetype will apply a List of fixers to all files which\ndo not match some filetype in the Dictionary.\n\nNote that using a plain List for `g:ale_fixers` is not supported.\n\n```vim\n\" In ~/.vim/vimrc, or somewhere similar.\nlet g:ale_fixers = {\n\\   '*': ['remove_trailing_lines', 'trim_whitespace'],\n\\   'javascript': ['eslint'],\n\\}\n```\n\nIf you want to automatically fix files when you save them, you need to turn\na setting on in vimrc.\n\n```vim\n\" Set this variable to 1 to fix files when you save them.\nlet g:ale_fix_on_save = 1\n```\n\nThe `:ALEFixSuggest` command will suggest some supported tools for fixing code.\nBoth `g:ale_fixers` and `b:ale_fixers` can also accept functions, including\nlambda functions, as fixers, for fixing files with custom tools.\n\nSee `:help ale-fix` for complete information on how to fix files with ALE.\n\n<a name=\"usage-completion\"></a>\n\n### Completion\n\nALE offers some support for completion via hijacking of omnicompletion while you\ntype. All of ALE's completion information must come from Language Server\nProtocol linters, or from `tsserver` for TypeScript.\n\nALE integrates with [Deoplete](https://github.com/Shougo/deoplete.nvim) as a\ncompletion source, named `'ale'`. You can configure Deoplete to only use ALE as\nthe source of completion information, or mix it with other sources.\n\n```vim\n\" Use ALE and also some plugin 'foobar' as completion sources for all code.\ncall deoplete#custom#option('sources', {\n\\ '_': ['ale', 'foobar'],\n\\})\n```\n\nALE also offers its own automatic completion support, which does not require any\nother plugins, and can be enabled by changing a setting before ALE is loaded.\n\n```vim\n\" Enable completion where available.\n\" This setting must be set before ALE is loaded.\n\"\n\" You should not turn this setting on if you wish to use ALE as a completion\n\" source for other completion plugins, like Deoplete.\nlet g:ale_completion_enabled = 1\n```\n\nALE provides an omni-completion function you can use for triggering\ncompletion manually with `<C-x><C-o>`.\n\n```vim\nset omnifunc=ale#completion#OmniFunc\n```\n\nALE supports automatic imports from external modules. This behavior is enabled\nby default and can be disabled by setting:\n\n```vim\nlet g:ale_completion_autoimport = 0\n```\n\nNote that disabling auto import can result in missing completion items from some\nLSP servers (e.g. eclipselsp). See `:help ale-completion` for more information.\n\n<a name=\"usage-go-to-definition\"></a>\n\n### Go To Definition\n\nALE supports jumping to the definition of words under your cursor with the\n`:ALEGoToDefinition` command using any enabled Language Server Protocol linters\nand `tsserver`.\n\nSee `:help ale-go-to-definition` for more information.\n\n<a name=\"usage-find-references\"></a>\n\n### Find References\n\nALE supports finding references for words under your cursor with the\n`:ALEFindReferences` command using any enabled Language Server Protocol linters\nand `tsserver`.\n\nSee `:help ale-find-references` for more information.\n\n<a name=\"usage-hover\"></a>\n\n### Hovering\n\nALE supports \"hover\" information for printing brief information about symbols at\nthe cursor taken from Language Server Protocol linters and `tsserver` with the\n`ALEHover` command.\n\nTruncated information will be displayed when the cursor rests on a symbol by\ndefault, as long as there are no problems on the same line.\n\nThe information can be displayed in a `balloon` tooltip in Vim or GVim by\nhovering your mouse over symbols. Mouse hovering is enabled by default in GVim,\nand needs to be configured for Vim 8.1+ in terminals.\n\nSee `:help ale-hover` for more information.\n\n<a name=\"usage-symbol-search\"></a>\n\n### Symbol Search\n\nALE supports searching for workspace symbols via Language Server Protocol\nlinters with the `ALESymbolSearch` command.\n\nSearch queries can be performed to find functions, types, and more which are\nsimilar to a given query string.\n\nSee `:help ale-symbol-search` for more information.\n\n<a name=\"usage-refactoring\"></a>\n\n### Refactoring: Rename, Actions\n\nALE supports renaming symbols in code such as variables or class\nnames with the `ALERename` command.\n\n`ALEFileRename` will rename file and fix import paths (tsserver\nonly).\n\n`ALECodeAction` will execute actions on the cursor or applied to a visual\nrange selection, such as automatically fixing errors.\n\nSee `:help ale-refactor` for more information.\n\n## Installation\n\nAdd ALE to your runtime path in the usual ways.\n\nIf you have trouble reading `:help ale`, try the following.\n\n```vim\npackloadall | silent! helptags ALL\n```\n\n#### Vim `packload`:\n\n```bash\nmkdir -p ~/.vim/pack/git-plugins/start\ngit clone --depth 1 https://github.com/dense-analysis/ale.git ~/.vim/pack/git-plugins/start/ale\n```\n\n#### Neovim `packload`:\n\n```bash\nmkdir -p ~/.local/share/nvim/site/pack/git-plugins/start\ngit clone --depth 1 https://github.com/dense-analysis/ale.git ~/.local/share/nvim/site/pack/git-plugins/start/ale\n```\n\n#### Windows `packload`:\n\n```bash\n# Run these commands in the \"Git for Windows\" Bash terminal\nmkdir -p ~/vimfiles/pack/git-plugins/start\ngit clone --depth 1 https://github.com/dense-analysis/ale.git ~/vimfiles/pack/git-plugins/start/ale\n```\n\n#### [vim-plug](https://github.com/junegunn/vim-plug)\n\n```vim\nPlug 'dense-analysis/ale'\n```\n\n#### [Vundle](https://github.com/VundleVim/Vundle.vim)\n\n```vim\nPlugin 'dense-analysis/ale'\n```\n\n#### [Pathogen](https://github.com/tpope/vim-pathogen)\n```vim\ngit clone https://github.com/dense-analysis/ale ~/.vim/bundle/ale\n```\n\n#### [lazy.nvim](https://github.com/folke/lazy.nvim)\n```lua\n{\n    'dense-analysis/ale',\n    config = function()\n        -- Configuration goes here.\n        local g = vim.g\n\n        g.ale_ruby_rubocop_auto_correct_all = 1\n\n        g.ale_linters = {\n            ruby = {'rubocop', 'ruby'},\n            lua = {'lua_language_server'}\n        }\n    end\n}\n```\n\n## Contributing\n\nIf you would like to see support for more languages and tools, please\n[create an issue](https://github.com/dense-analysis/ale/issues)\nor [create a pull request](https://github.com/dense-analysis/ale/pulls).\nIf your tool can read from stdin or you have code to suggest which is good,\nsupport can be happily added for it.\n\nIf you are interested in the general direction of the project, check out the\n[wiki home page](https://github.com/dense-analysis/ale/wiki). The wiki includes\na Roadmap for the future, and more.\n\nIf you'd liked to discuss ALE and more check out the Dense Analysis Discord\nserver here: https://discord.gg/5zFD6pQxDk\n\n## FAQ\n\n<a name=\"faq-disable-linters\"></a>\n\n### How do I disable particular linters?\n\nBy default, all available tools for all supported languages will be run. If you\nwant to only select a subset of the tools, you can define `b:ale_linters` for a\nsingle buffer, or `g:ale_linters` globally.\n\nThe recommended way to configure linters is to define a List in an ftplugin\nfile.\n\n```vim\n\" In ~/.vim/ftplugin/javascript.vim, or somewhere similar.\n\n\" Enable ESLint only for JavaScript.\nlet b:ale_linters = ['eslint']\n\n\" Equivalent to the above.\nlet b:ale_linters = {'javascript': ['eslint']}\n```\n\nYou can also declare which linters you want to run in your vimrc file, before or\nafter ALE has been loaded.\n\n```vim\n\" In ~/.vim/vimrc, or somewhere similar.\nlet g:ale_linters = {\n\\   'javascript': ['eslint'],\n\\}\n```\n\nFor all languages unspecified in the dictionary, all possible linters will\nbe run for those languages, just as when the dictionary is not defined.\nRunning many linters should not typically obstruct editing in Vim,\nas they will all be executed in separate processes simultaneously.\n\nIf you don't want ALE to run anything other than what you've explicitly asked\nfor, you can set `g:ale_linters_explicit` to `1`.\n\n```vim\n\" Only run linters named in ale_linters settings.\nlet g:ale_linters_explicit = 1\n```\n\nThis plugin will look for linters in the [`ale_linters`](ale_linters) directory.\nEach directory within corresponds to a particular filetype in Vim, and each file\nin each directory corresponds to the name of a particular linter.\n\n### How do I disable a particular warning or error?\n\nWarnings and errors should be configured in project configuration files for the\nrelevant tools. ALE supports disabling only warnings relating to trailing\nwhitespace, which Vim users often fix automatically.\n\n```vim\n\" Disable whitespace warnings\nlet g:ale_warn_about_trailing_whitespace = 0\n```\n\nUsers generally should not ignore warnings or errors in projects by changing\nsettings in their own editor. Instead, configure tools appropriately so any\nother user of the same project will see the same problems.\n\n<a name=\"faq-get-info\"></a>\n\n### How can I see what ALE has configured for the current file?\n\nRun the following to see what is currently configured:\n\n```vim\n:ALEInfo\n```\n\n### How can I disable virtual text appearing at ends of lines?\n\nBy default, ALE displays errors and warnings with virtual text. The problems ALE\nshows appear with comment-like syntax after every problem found. You can set ALE\nto only show problems where the cursor currently lies like so.\n\n```vim\nlet g:ale_virtualtext_cursor = 'current'\n```\n\nIf you want to disable virtual text completely, apply the following.\n\n```vim\nlet g:ale_virtualtext_cursor = 'disabled'\n```\n\n<a name=\"faq-keep-signs\"></a>\n<a name=\"faq-change-signs\"></a>\n\n### How can I customise signs?\n\nUse these options to specify what text should be used for signs:\n\n```vim\nlet g:ale_sign_error = '>>'\nlet g:ale_sign_warning = '--'\n```\n\nALE sets some background colors automatically for warnings and errors\nin the sign gutter, with the names `ALEErrorSign` and `ALEWarningSign`.\nThese colors can be customised, or even removed completely:\n\n```vim\nhighlight clear ALEErrorSign\nhighlight clear ALEWarningSign\n```\n\nYou can configure the sign gutter open at all times, if you wish.\n\n```vim\nlet g:ale_sign_column_always = 1\n```\n\n<a name=\"faq-change-highlights\"></a>\n\n### How can I change or disable the highlights ALE uses?\n\nALE's highlights problems with highlight groups which link to `SpellBad`,\n`SpellCap`, `error`, and `todo` groups by default. The characters that are\nhighlighted depend on the linters being used, and the information provided to\nALE.\n\nHighlighting can be disabled completely by setting `g:ale_set_highlights` to\n`0`.\n\n```vim\n\" Set this in your vimrc file to disabling highlighting\nlet g:ale_set_highlights = 0\n```\n\nYou can control all of the highlights ALE uses, say if you are using a different\ncolor scheme which produces ugly highlights. For example:\n\n```vim\nhighlight ALEWarning ctermbg=DarkMagenta\n```\n\nSee `:help ale-highlights` for more information.\n\n<a name=\"faq-echo-format\"></a>\n\n### How can I change the format for echo messages?\n\nThere are 3 global options that allow customizing the echoed message.\n\n- `g:ale_echo_msg_format` where:\n    * `%s` is the error message itself\n    * `%...code...%` is an optional error code, and most characters can be\n      written between the `%` characters.\n    * `%linter%` is the linter name\n    * `%severity%` is the severity type\n- `g:ale_echo_msg_error_str` is the string used for error severity.\n- `g:ale_echo_msg_warning_str` is the string used for warning severity.\n\nSo for example this:\n\n```vim\nlet g:ale_echo_msg_error_str = 'E'\nlet g:ale_echo_msg_warning_str = 'W'\nlet g:ale_echo_msg_format = '[%linter%] %s [%severity%]'\n```\n\nWill give you:\n\n![Echoed message](https://user-images.githubusercontent.com/3518142/59195927-348bd000-8b85-11e9-88b6-508a094f1548.png)\n\nSee `:help g:ale_echo_msg_format` for more information.\n\n<a name=\"faq-statusline\"></a>\n<a name=\"faq-lightline\"></a>\n\n### How can I customise the statusline?\n\n#### lightline\n\n[lightline](https://github.com/itchyny/lightline.vim) does not have built-in\nsupport for ALE, nevertheless there is a plugin that adds this functionality:\n[maximbaz/lightline-ale](https://github.com/maximbaz/lightline-ale).\n\nFor more information, check out the sources of that plugin,\n`:help ale#statusline#Count()` and\n[lightline documentation](https://github.com/itchyny/lightline.vim#advanced-configuration).\n\n#### vim-airline\n\n[vim-airline](https://github.com/vim-airline/vim-airline) integrates with ALE\nfor displaying error information in the status bar. If you want to see the\nstatus for ALE in a nice format, it is recommended to use vim-airline with ALE.\nThe airline extension can be enabled by adding the following to your vimrc:\n\n```vim\n\" Set this. Airline will handle the rest.\nlet g:airline#extensions#ale#enabled = 1\n```\n\n#### Custom statusline\n\nYou can implement your own statusline function without adding any other plugins.\nALE provides some functions to assist in this endeavour, including:\n\n* `ale#statusline#Count`: Which returns the number of problems found by ALE\n  for a specified buffer.\n* `ale#statusline#FirstProblem`: Which returns a dictionary containing the\n  full loclist details of the first problem of a specified type found by ALE\n  in a buffer. (e.g. The first style warning in the current buffer.)\n  This can be useful for displaying more detailed information such as the\n  line number of the first problem in a file.\n\nSay you want to display all errors as one figure, and all non-errors as another\nfigure. You can do the following:\n\n```vim\nfunction! LinterStatus() abort\n    let l:counts = ale#statusline#Count(bufnr(''))\n\n    let l:all_errors = l:counts.error + l:counts.style_error\n    let l:all_non_errors = l:counts.total - l:all_errors\n\n    return l:counts.total == 0 ? 'OK' : printf(\n    \\   '%dW %dE',\n    \\   all_non_errors,\n    \\   all_errors\n    \\)\nendfunction\n\nset statusline=%{LinterStatus()}\n```\n\nSee `:help ale#statusline#Count()` or `:help ale#statusline#FirstProblem()`\nfor more information.\n\n<a name=\"faq-window-borders\"></a>\n\n### How can I change the borders for floating preview windows?\n\nBorders for floating preview windows are enabled by default. You can use the\n`g:ale_floating_window_border` setting to configure them.\n\nYou could disable the border with an empty list.\n\n```vim\nlet g:ale_floating_window_border = []\n```\n\nIf the terminal supports Unicode, you might try setting the value like below, to\nmake it look nicer.\n\n```vim\nlet g:ale_floating_window_border = ['\u2502', '\u2500', '\u256d', '\u256e', '\u256f', '\u2570', '\u2502', '\u2500']\n```\n\nSince vim's default uses nice Unicode characters when possible, you can trick\nale into using that default with\n\n```vim\nlet g:ale_floating_window_border = repeat([''], 8)\n```\n\n<a name=\"faq-my-battery-is-sad\"></a>\n\n### Will this plugin eat all of my laptop battery power?\n\nALE takes advantage of the power of various tools to check your code. This of\ncourse means that CPU time will be used to continuously check your code. If you\nare concerned about the CPU time ALE will spend, which will of course imply\nsome cost to battery life, you can adjust your settings to make your CPU do\nless work.\n\nFirst, consider increasing the delay before which ALE will run any linters\nwhile you type. ALE uses a timeout which is cancelled and reset every time you\ntype, and this delay can be increased so linters are run less often. See\n`:help g:ale_lint_delay` for more information.\n\nIf you don't wish to run linters while you type, you can disable that behavior.\nSet `g:ale_lint_on_text_changed` to `never`. You won't get as frequent error\nchecking, but ALE shouldn't block your ability to edit a document after you save\na file, so the asynchronous nature of the plugin will still be an advantage.\n\nIf you are still concerned, you can turn the automatic linting off altogether,\nincluding the option `g:ale_lint_on_enter`, and you can run ALE manually with\n`:ALELint`.\n\n<a name=\"faq-coc-nvim\"></a>\n<a name=\"faq-vim-lsp\"></a>\n\n### How can I use ALE with other LSP clients?\n\nALE offers an API for letting any other plugin integrate with ALE. If you are\ninterested in writing an integration, see `:help ale-lint-other-sources`.\n\nIf you're running ALE in Neovim with\n[nvim-lspconfig](https://github.com/neovim/nvim-lspconfig) for configuring\nparticular language servers, ALE will automatically disable its LSP\nfunctionality for any language servers configured with nvim-lspconfig by\ndefault. The following setting is applied by default:\n\n```vim\nlet g:ale_disable_lsp = 'auto'\n```\n\nIf you are running ALE in combination with another LSP client, you may wish to\ndisable ALE's LSP functionality entirely. You can change the setting to `1` to\nalways disable all LSP functionality.\n\n```vim\nlet g:ale_disable_lsp = 1\n```\n\nYou can also use `b:ale_disable_lsp` in your ftplugin files to enable or disable\nLSP features in ALE for different filetypes.\n\n#### Neovim Diagnostics\n\nIf you are running Neovim 0.6 or later, you can make ALE display errors and\nwarnings via the Neovim diagnostics API.\n\n```vim\nlet g:ale_use_neovim_diagnostics_api = 1\n```\n\n<!-- We could expand this section to say a little more. -->\n\n#### coc.nvim\n\n[coc.nvim](https://github.com/neoclide/coc.nvim) is a popular Vim plugin written\nin TypeScript and dependent on the [npm](https://www.npmjs.com/) ecosystem for\nproviding full IDE features to Vim. Both ALE and coc.nvim implement\n[Language Server Protocol](https://microsoft.github.io/language-server-protocol/)\n(LSP) clients for supporting diagnostics (linting with a live server), and other\nfeatures like auto-completion, and others listed above.\n\nALE is primarily focused on integrating with external programs through virtually\nany means, provided the plugin remains almost entirely written in Vim script.\ncoc.nvim is primarily focused on bringing IDE features to Vim. If you want to\nrun external programs on your files to check for errors, and also use the most\nadvanced IDE features, you might want to use both plugins at the same time.\n\nThe easiest way to get both plugins to work together is to configure coc.nvim to\nsend diagnostics to ALE, so ALE controls how all problems are presented to you,\nand to disable all LSP features in ALE, so ALE doesn't try to provide LSP\nfeatures already provided by coc.nvim, such as auto-completion.\n\nOpen your coc.nvim configuration file with `:CocConfig` and add\n`\"diagnostic.displayByAle\": true` to your settings.\n\n#### vim-lsp\n\n[vim-lsp](https://github.com/prabirshrestha/vim-lsp) is a popular plugin as\nimplementation of Language Server Protocol (LSP) client for Vim. It provides\nall the LSP features including auto completion, diagnostics, go to definitions,\netc.\n\n[vim-lsp-ale](https://github.com/rhysd/vim-lsp-ale) is a bridge plugin to solve\nthe problem when using both ALE and vim-lsp. With the plugin, diagnostics are\nprovided by vim-lsp and ALE can handle all the errors. Please read\n[vim-lsp-ale's documentation](https://github.com/rhysd/vim-lsp-ale/blob/master/doc/vim-lsp-ale.txt)\nfor more details.\n\n<a name=\"faq-autocmd\"></a>\n\n### How can I execute some code when ALE starts or stops linting?\n\nALE runs its own [autocmd](http://vimdoc.sourceforge.net/htmldoc/autocmd.html)\nevents when a lint or fix cycle are started and stopped. There is also an event\nthat runs when a linter job has been successfully started. These events can be\nused to call arbitrary functions during these respective parts of the ALE's\noperation.\n\n```vim\naugroup YourGroup\n    autocmd!\n    autocmd User ALELintPre    call YourFunction()\n    autocmd User ALELintPost   call YourFunction()\n\n    autocmd User ALEJobStarted call YourFunction()\n\n    autocmd User ALEFixPre     call YourFunction()\n    autocmd User ALEFixPost    call YourFunction()\naugroup END\n```\n\n<a name=\"faq-navigation\"></a>\n\n### How can I navigate between errors quickly?\n\nALE offers some commands with `<Plug>` keybinds for moving between warnings and\nerrors quickly. You can map the keys Ctrl+j and Ctrl+k to moving between errors\nfor example:\n\n```vim\nnmap <silent> <C-k> <Plug>(ale_previous_wrap)\nnmap <silent> <C-j> <Plug>(ale_next_wrap)\n```\n\nFor more information, consult the online documentation with\n`:help ale-navigation-commands`.\n\n<a name=\"faq-lint-on-save\"></a>\n\n### How can I run linters only when I save files?\n\nALE offers an option `g:ale_lint_on_save` for enabling running the linters when\nfiles are saved. This option is enabled by default. If you only wish to run\nlinters when files are saved, you can turn the other options off.\n\n```vim\n\" Write this in your vimrc file\nlet g:ale_lint_on_text_changed = 'never'\nlet g:ale_lint_on_insert_leave = 0\n\" You can disable this option too\n\" if you don't want linters to run on opening a file\nlet g:ale_lint_on_enter = 0\n```\n\nIf for whatever reason you don't wish to run linters again when you save files,\nyou can set `g:ale_lint_on_save` to `0`.\n\n<a name=\"faq-quickfix\"></a>\n\n### How can I use the quickfix list instead of the loclist?\n\nThe quickfix list can be enabled by turning the `g:ale_set_quickfix` option on.\nIf you wish to also disable the loclist, you can disable the `g:ale_set_loclist`\noption.\n\n```vim\n\" Write this in your vimrc file\nlet g:ale_set_loclist = 0\nlet g:ale_set_quickfix = 1\n```\n\nIf you wish to show Vim windows for the loclist or quickfix items when a file\ncontains warnings or errors, `g:ale_open_list` can be set to `1`.\n`g:ale_keep_list_window_open` can be set to `1` if you wish to keep the window\nopen even after errors disappear.\n\n```vim\nlet g:ale_open_list = 1\n\" Set this if you want to.\n\" This can be useful if you are combining ALE with\n\" some other plugin which sets quickfix errors, etc.\nlet g:ale_keep_list_window_open = 1\n```\n\nYou can also set `let g:ale_list_vertical = 1` to open the windows vertically\ninstead of the default horizontally.\n\n### Why isn't ALE checking my filetype?\n\n<a name=\"faq-jsx-stylelint-eslint\"></a>\n\n#### stylelint for JSX\n\nFirst, install eslint and install stylelint with\n[stylelint-processor-styled-components](https://github.com/styled-components/stylelint-processor-styled-components).\n\nSupposing you have installed both tools correctly, configure your .jsx files so\n`jsx` is included in the filetype. You can use an `autocmd` for this.\n\n```vim\naugroup FiletypeGroup\n    autocmd!\n    au BufNewFile,BufRead *.jsx set filetype=javascript.jsx\naugroup END\n```\n\nSupposing the filetype has been set correctly, you can set the following\noptions in a jsx.vim ftplugin file.\n\n```vim\n\" In ~/.vim/ftplugin/jsx.vim, or somewhere similar.\nlet b:ale_linter_aliases = ['css', 'javascript']\nlet b:ale_linters = ['stylelint', 'eslint']\n```\n\nOr if you want, you can configure the linters from your vimrc file.\n\n```vim\n\" In ~/.vim/vimrc, or somewhere similar.\nlet g:ale_linter_aliases = {'jsx': ['css', 'javascript']}\nlet g:ale_linters = {'jsx': ['stylelint', 'eslint']}\n```\n\nALE will alias the `jsx` filetype so it uses the `css` filetype linters, and\nuse the original Array of selected linters for `jsx` from the `g:ale_linters`\nobject. All available linters will be used for the filetype `javascript`, and\nno linter will be run twice for the same file.\n\n<a name=\"faq-vue-eslint\"></a>\n\n#### Checking Vue with ESLint\n\nTo check Vue files with ESLint, your ESLint project configuration file must be\nconfigured to use the [Vue plugin](https://github.com/vuejs/eslint-plugin-vue).\nAfter that, you need to configure ALE so it will run the JavaScript ESLint\nlinter on your files. The settings you need are similar to the settings needed\nfor checking JSX code with both stylelint and ESLint, in the previous section.\n\n```vim\n\" In ~/.vim/ftplugin/vue.vim, or somewhere similar.\n\n\" Run both javascript and vue linters for vue files.\nlet b:ale_linter_aliases = ['javascript', 'vue']\n\" Select the eslint and vls linters.\nlet b:ale_linters = ['eslint', 'vls']\n```\n\nRun `:ALEInfo` to see which linters are available after telling ALE to run\nJavaScript linters on Vue files. Not all linters support checking Vue files.\n\nIf you don't want to configure your linters in ftplugin files for some reason,\nyou can configure them from your vimrc file instead.\n\n```vim\n\" In ~/.vim/vimrc, or somewhere similar.\nlet g:ale_linter_aliases = {'vue': ['vue', 'javascript']}\nlet g:ale_linters = {'vue': ['eslint', 'vls']}\n```\n\n<a name=\"faq-c-configuration\"></a>\n\n### How can I configure my C or C++ project?\n\nThe structure of C and C++ projects varies wildly from project to project, with\nmany different build tools being used for building them, and many different\nformats for project configuration files. ALE can run compilers easily, but\nALE cannot easily detect which compiler flags to use.\n\nSome tools and build configurations can generate\n[compile_commands.json](https://clang.llvm.org/docs/JSONCompilationDatabase.html)\nfiles. The `cppcheck`, `clangcheck`, `clangtidy` and `cquery` linters can read\nthese files for automatically determining the appropriate compiler flags to\nuse.\n\nFor linting with compilers like `gcc` and `clang`, and with other tools, you\nwill need to tell ALE which compiler flags to use yourself. You can use\ndifferent options for different projects with the `g:ale_pattern_options`\nsetting.  Consult the documentation for that setting for more information.\n`b:ale_linters` can be used to select which tools you want to run, say if you\nwant to use only `gcc` for one project, and only `clang` for another.\n\nALE will attempt to parse `compile_commands.json` files to discover compiler\nflags to use when linting code. See `:help g:ale_c_parse_compile_commands` for\nmore information. See Clang's documentation for\n[compile_commands.json files](https://clang.llvm.org/docs/JSONCompilationDatabase.html).\nYou should strongly consider generating them in your builds, which is easy to do\nwith CMake.\n\nYou can also configure ALE to automatically run `make -n` to run dry runs on\n`Makefile`s to discover compiler flags. This can execute arbitrary code, so the\noption is disabled by default. See `:help g:ale_c_parse_makefile`.\n\n<a name=\"faq-vm\"></a>\n\n### How can I run linters or fixers via Docker or a VM?\n\nALE supports running linters or fixers via Docker, virtual machines, or in\ncombination with any remote machine with a different file system, so long as the\ntools are well-integrated with ALE, and ALE is properly configured to run the\ncorrect commands and map filename paths between different file systems. See\n`:help ale-lint-other-machines` for the full documentation on how to configure\nALE to support this.\n",
        "releases": [
            {
                "name": "ALE v3.3.0",
                "date": "2022-12-25T20:33:56Z"
            },
            {
                "name": "ALE v3.2.0",
                "date": "2022-03-05T01:25:56Z"
            },
            {
                "name": "ALE v3.1.0",
                "date": "2021-02-06T20:27:10Z"
            },
            {
                "name": "ALE v3.0.0",
                "date": "2020-09-09T21:07:13Z"
            },
            {
                "name": "ALE v2.7.0",
                "date": "2020-06-11T18:22:18Z"
            },
            {
                "name": "ALE v2.6.0",
                "date": "2019-10-16T16:23:59Z"
            },
            {
                "name": "ALE v2.5.0",
                "date": "2019-06-10T22:54:41Z"
            },
            {
                "name": "ALE v2.4.1",
                "date": "2019-06-03T18:42:07Z"
            },
            {
                "name": "ALE v2.4.0",
                "date": "2019-04-07T15:36:04Z"
            },
            {
                "name": "ALE v2.3.1",
                "date": "2019-02-20T09:59:16Z"
            },
            {
                "name": "ALE v2.3.0",
                "date": "2018-12-02T18:25:50Z"
            },
            {
                "name": "ALE v2.2.1",
                "date": "2018-11-04T11:34:56Z"
            },
            {
                "name": "ALE v2.2.0",
                "date": "2018-09-25T09:19:22Z"
            },
            {
                "name": "ALE v2.1.1",
                "date": "2018-09-10T08:27:30Z"
            },
            {
                "name": "ALE v2.1.0",
                "date": "2018-08-08T08:58:38Z"
            },
            {
                "name": "ALE v2.0.1",
                "date": "2018-07-20T15:17:33Z"
            },
            {
                "name": "ALE v2.0.0",
                "date": "2018-07-04T07:37:12Z"
            },
            {
                "name": "ALE v1.9.1",
                "date": "2018-07-04T07:53:38Z"
            },
            {
                "name": "ALE v1.9.0",
                "date": "2018-05-30T20:21:40Z"
            },
            {
                "name": "ALE v1.8.1",
                "date": "2018-06-01T13:24:20Z"
            },
            {
                "name": "ALE v1.8.0",
                "date": "2018-03-25T12:15:00Z"
            },
            {
                "name": "ALE v1.7.1",
                "date": "2018-02-25T14:25:20Z"
            },
            {
                "name": "ALE v1.7.0",
                "date": "2017-12-19T18:31:17Z"
            },
            {
                "name": "ALE v1.6.2",
                "date": "2017-11-21T14:58:42Z"
            },
            {
                "name": "ALE v1.6.1",
                "date": "2017-11-09T21:17:20Z"
            },
            {
                "name": "ALE v1.6.0",
                "date": "2017-10-23T22:47:23Z"
            },
            {
                "name": "ALE v1.5.2",
                "date": "2017-10-03T17:56:36Z"
            },
            {
                "name": "ALE v1.5.1",
                "date": "2017-09-08T19:12:57Z"
            },
            {
                "name": "ALE v1.5.0",
                "date": "2017-08-28T16:59:19Z"
            },
            {
                "name": "ALE v1.4.1",
                "date": "2017-08-28T17:03:40Z"
            },
            {
                "name": "ALE v1.4.0",
                "date": "2017-06-27T15:22:29Z"
            },
            {
                "name": "ALE v1.3.1",
                "date": "2017-06-06T17:07:36Z"
            },
            {
                "name": "ALE v1.3.0",
                "date": "2017-05-07T18:37:26Z"
            },
            {
                "name": "ALE v1.2.1",
                "date": "2017-04-29T17:23:01Z"
            },
            {
                "name": "ALE v1.2.0",
                "date": "2017-03-26T21:40:33Z"
            },
            {
                "name": "ALE v1.1.1",
                "date": "2017-02-21T20:47:46Z"
            },
            {
                "name": "ALE v1.1.0",
                "date": "2017-02-09T09:43:46Z"
            },
            {
                "name": "ALE v1.0.0",
                "date": "2016-10-19T21:56:04Z"
            }
        ]
    }
}