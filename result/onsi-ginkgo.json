{
    "https://api.github.com/repos/onsi/ginkgo": {
        "forks": 666,
        "watchers": 8484,
        "stars": 8484,
        "languages": {
            "Go": 1649093,
            "Shell": 381,
            "Makefile": 248
        },
        "commits": [
            "2025-01-02T10:43:54Z",
            "2025-01-02T10:35:37Z",
            "2025-01-02T10:27:55Z",
            "2025-01-02T10:27:33Z",
            "2025-01-02T10:26:29Z",
            "2025-01-02T10:25:05Z",
            "2024-12-30T15:44:20Z",
            "2024-12-30T11:17:20Z",
            "2024-12-30T10:10:22Z",
            "2024-12-30T10:04:17Z",
            "2024-12-20T00:28:57Z",
            "2024-12-19T06:44:36Z",
            "2024-12-19T04:01:23Z",
            "2024-12-05T02:21:46Z",
            "2024-12-05T01:31:31Z",
            "2024-12-05T01:44:08Z",
            "2024-12-05T05:29:46Z",
            "2024-11-21T01:19:21Z",
            "2024-11-11T16:30:34Z",
            "2024-11-08T16:08:03Z",
            "2024-11-05T09:08:56Z",
            "2024-11-05T06:22:29Z",
            "2024-11-05T06:49:03Z",
            "2024-11-04T09:31:48Z",
            "2024-11-04T11:25:18Z",
            "2024-11-04T11:43:28Z",
            "2024-11-04T11:56:45Z",
            "2024-11-04T11:58:49Z",
            "2024-11-04T12:03:59Z",
            "2024-11-04T12:14:49Z"
        ],
        "creation_date": "2013-08-23T20:53:05Z",
        "contributors": 30,
        "topics": [
            "bdd",
            "bdd-framework",
            "go",
            "golang",
            "test",
            "test-driven-development",
            "testing"
        ],
        "subscribers": 100,
        "readme": "![Ginkgo](https://onsi.github.io/ginkgo/images/ginkgo.png)\n\n[![test](https://github.com/onsi/ginkgo/workflows/test/badge.svg?branch=master)](https://github.com/onsi/ginkgo/actions?query=workflow%3Atest+branch%3Amaster) | [Ginkgo Docs](https://onsi.github.io/ginkgo/)\n\n---\n\n# Ginkgo\n\nGinkgo is a mature testing framework for Go designed to help you write expressive specs.  Ginkgo builds on top of Go's `testing` foundation and is complemented by the [Gomega](https://github.com/onsi/gomega) matcher library.  Together, Ginkgo and Gomega let you express the intent behind your specs clearly:\n\n```go\nimport (\n    . \"github.com/onsi/ginkgo/v2\"\n    . \"github.com/onsi/gomega\"\n    ...\n)\n\nvar _ = Describe(\"Checking books out of the library\", Label(\"library\"), func() {\n    var library *libraries.Library\n    var book *books.Book\n    var valjean *users.User\n    BeforeEach(func() {\n        library = libraries.NewClient()\n        book = &books.Book{\n            Title: \"Les Miserables\",\n            Author: \"Victor Hugo\",\n        }\n        valjean = users.NewUser(\"Jean Valjean\")\n    })\n\n    When(\"the library has the book in question\", func() {\n        BeforeEach(func(ctx SpecContext) {\n            Expect(library.Store(ctx, book)).To(Succeed())\n        })\n\n        Context(\"and the book is available\", func() {\n            It(\"lends it to the reader\", func(ctx SpecContext) {\n                Expect(valjean.Checkout(ctx, library, \"Les Miserables\")).To(Succeed())\n                Expect(valjean.Books()).To(ContainElement(book))\n                Expect(library.UserWithBook(ctx, book)).To(Equal(valjean))\n            }, SpecTimeout(time.Second * 5))\n        })\n\n        Context(\"but the book has already been checked out\", func() {\n            var javert *users.User\n            BeforeEach(func(ctx SpecContext) {\n                javert = users.NewUser(\"Javert\")\n                Expect(javert.Checkout(ctx, library, \"Les Miserables\")).To(Succeed())\n            })\n\n            It(\"tells the user\", func(ctx SpecContext) {\n                err := valjean.Checkout(ctx, library, \"Les Miserables\")\n                Expect(err).To(MatchError(\"Les Miserables is currently checked out\"))\n            }, SpecTimeout(time.Second * 5))\n\n            It(\"lets the user place a hold and get notified later\", func(ctx SpecContext) {\n                Expect(valjean.Hold(ctx, library, \"Les Miserables\")).To(Succeed())\n                Expect(valjean.Holds(ctx)).To(ContainElement(book))\n\n                By(\"when Javert returns the book\")\n                Expect(javert.Return(ctx, library, book)).To(Succeed())\n\n                By(\"it eventually informs Valjean\")\n                notification := \"Les Miserables is ready for pick up\"\n                Eventually(ctx, valjean.Notifications).Should(ContainElement(notification))\n\n                Expect(valjean.Checkout(ctx, library, \"Les Miserables\")).To(Succeed())\n                Expect(valjean.Books(ctx)).To(ContainElement(book))\n                Expect(valjean.Holds(ctx)).To(BeEmpty())\n            }, SpecTimeout(time.Second * 10))\n        })  \n    })\n\n    When(\"the library does not have the book in question\", func() {\n        It(\"tells the reader the book is unavailable\", func(ctx SpecContext) {\n            err := valjean.Checkout(ctx, library, \"Les Miserables\")\n            Expect(err).To(MatchError(\"Les Miserables is not in the library catalog\"))\n        }, SpecTimeout(time.Second * 5))\n    })\n})\n```\n\nJump to the [docs](https://onsi.github.io/ginkgo/) to learn more.  It's easy to [bootstrap](https://onsi.github.io/ginkgo/#bootstrapping-a-suite) and start writing your [first specs](https://onsi.github.io/ginkgo/#adding-specs-to-a-suite).\n\nIf you have a question, comment, bug report, feature request, etc. please open a [GitHub issue](https://github.com/onsi/ginkgo/issues/new), or visit the [Ginkgo Slack channel](https://app.slack.com/client/T029RQSE6/CQQ50BBNW).\n\n## Capabilities\n\nWhether writing basic unit specs, complex integration specs, or even performance specs - Ginkgo gives you an expressive Domain-Specific Language (DSL) that will be familiar to users coming from frameworks such as [Quick](https://github.com/Quick/Quick), [RSpec](https://rspec.info), [Jasmine](https://jasmine.github.io), and [Busted](https://lunarmodules.github.io/busted/).  This style of testing is sometimes referred to as \"Behavior-Driven Development\" (BDD) though Ginkgo's utility extends beyond acceptance-level testing.\n\nWith Ginkgo's DSL you can use nestable [`Describe`, `Context` and `When` container nodes](https://onsi.github.io/ginkgo/#organizing-specs-with-container-nodes) to help you organize your specs.  [`BeforeEach` and `AfterEach` setup nodes](https://onsi.github.io/ginkgo/#extracting-common-setup-beforeeach) for setup and cleanup.  [`It` and `Specify` subject nodes](https://onsi.github.io/ginkgo/#spec-subjects-it) that hold your assertions. [`BeforeSuite` and `AfterSuite` nodes](https://onsi.github.io/ginkgo/#suite-setup-and-cleanup-beforesuite-and-aftersuite) to prep for and cleanup after a suite... and [much more!](https://onsi.github.io/ginkgo/#writing-specs).\n\nAt runtime, Ginkgo can run your specs in reproducibly [random order](https://onsi.github.io/ginkgo/#spec-randomization) and has sophisticated support for [spec parallelization](https://onsi.github.io/ginkgo/#spec-parallelization).  In fact, running specs in parallel is as easy as\n\n```bash\nginkgo -p\n```\n\nBy following [established patterns for writing parallel specs](https://onsi.github.io/ginkgo/#patterns-for-parallel-integration-specs) you can build even large, complex integration suites that parallelize cleanly and run performantly.  And you don't have to worry about your spec suite hanging or leaving a mess behind - Ginkgo provides a per-node `context.Context` and the capability to interrupt the spec after a set period of time - and then clean up.\n\nAs your suites grow Ginkgo helps you keep your specs organized with [labels](https://onsi.github.io/ginkgo/#spec-labels) and lets you easily run [subsets of specs](https://onsi.github.io/ginkgo/#filtering-specs), either [programmatically](https://onsi.github.io/ginkgo/#focused-specs) or on the [command line](https://onsi.github.io/ginkgo/#combining-filters).  And Ginkgo's reporting infrastructure generates machine-readable output in a [variety of formats](https://onsi.github.io/ginkgo/#generating-machine-readable-reports) _and_ allows you to build your own [custom reporting infrastructure](https://onsi.github.io/ginkgo/#generating-reports-programmatically).\n\nGinkgo ships with `ginkgo`, a [command line tool](https://onsi.github.io/ginkgo/#ginkgo-cli-overview) with support for generating, running, filtering, and profiling Ginkgo suites.  You can even have Ginkgo automatically run your specs when it detects a change with `ginkgo watch`, enabling rapid feedback loops during test-driven development.\n\nAnd that's just Ginkgo!  [Gomega](https://onsi.github.io/gomega/) brings a rich, mature, family of [assertions and matchers](https://onsi.github.io/gomega/#provided-matchers) to your suites.  With Gomega you can easily mix [synchronous and asynchronous assertions](https://onsi.github.io/ginkgo/#patterns-for-asynchronous-testing) in your specs.  You can even build your own set of expressive domain-specific matchers quickly and easily by composing Gomega's [existing building blocks](https://onsi.github.io/ginkgo/#building-custom-matchers).\n\nHappy Testing!\n\n## License\n\nGinkgo is MIT-Licensed\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md)\n",
        "releases": [
            {
                "name": "v2.22.2",
                "date": "2024-12-30T17:50:00Z"
            },
            {
                "name": null,
                "date": "2024-12-20T00:28:59Z"
            },
            {
                "name": null,
                "date": "2024-11-21T01:19:23Z"
            },
            {
                "name": null,
                "date": "2024-10-29T20:48:23Z"
            },
            {
                "name": null,
                "date": "2024-08-28T15:21:07Z"
            },
            {
                "name": null,
                "date": "2024-08-21T18:37:23Z"
            },
            {
                "name": null,
                "date": "2024-08-07T18:08:45Z"
            },
            {
                "name": null,
                "date": "2024-07-26T12:39:08Z"
            },
            {
                "name": null,
                "date": "2024-05-24T13:49:09Z"
            },
            {
                "name": null,
                "date": "2024-05-21T17:30:44Z"
            },
            {
                "name": null,
                "date": "2024-05-07T12:58:01Z"
            },
            {
                "name": null,
                "date": "2024-04-27T19:29:34Z"
            },
            {
                "name": null,
                "date": "2024-03-24T13:59:49Z"
            },
            {
                "name": null,
                "date": "2024-03-18T15:22:32Z"
            },
            {
                "name": null,
                "date": "2024-03-04T19:06:36Z"
            },
            {
                "name": null,
                "date": "2024-01-17T22:55:00Z"
            },
            {
                "name": null,
                "date": "2024-01-11T21:24:30Z"
            },
            {
                "name": null,
                "date": "2023-11-29T03:52:03Z"
            },
            {
                "name": null,
                "date": "2023-11-10T15:55:55Z"
            },
            {
                "name": null,
                "date": "2023-10-09T12:31:24Z"
            },
            {
                "name": null,
                "date": "2023-09-19T19:50:24Z"
            },
            {
                "name": null,
                "date": "2023-08-23T23:07:45Z"
            },
            {
                "name": null,
                "date": "2023-06-16T17:12:18Z"
            },
            {
                "name": null,
                "date": "2023-06-07T04:12:19Z"
            },
            {
                "name": null,
                "date": "2023-05-31T03:37:52Z"
            },
            {
                "name": null,
                "date": "2023-05-31T01:40:25Z"
            },
            {
                "name": null,
                "date": "2023-05-15T14:03:04Z"
            },
            {
                "name": null,
                "date": "2023-05-03T20:24:57Z"
            },
            {
                "name": null,
                "date": "2023-05-03T03:19:50Z"
            },
            {
                "name": null,
                "date": "2023-03-23T16:13:37Z"
            },
            {
                "name": null,
                "date": "2023-03-12T18:53:30Z"
            },
            {
                "name": null,
                "date": "2023-03-03T21:12:44Z"
            },
            {
                "name": null,
                "date": "2023-02-27T15:56:09Z"
            },
            {
                "name": "v2.8.3",
                "date": "2023-02-18T12:30:08Z"
            },
            {
                "name": null,
                "date": "2023-02-17T21:25:19Z"
            },
            {
                "name": null,
                "date": "2023-02-13T21:03:50Z"
            },
            {
                "name": null,
                "date": "2023-01-30T17:28:44Z"
            },
            {
                "name": "v2.7.1",
                "date": "2023-01-28T05:03:41Z"
            },
            {
                "name": "v2.7.0",
                "date": "2023-01-09T19:06:35Z"
            },
            {
                "name": "v2.6.1",
                "date": "2022-12-14T20:11:45Z"
            },
            {
                "name": "v2.6.0",
                "date": "2022-12-10T04:43:11Z"
            },
            {
                "name": "v2.5.1",
                "date": "2022-11-19T17:04:50Z"
            },
            {
                "name": "v2.5.0",
                "date": "2022-11-07T20:52:19Z"
            },
            {
                "name": "v2.4.0",
                "date": "2022-10-23T18:03:22Z"
            },
            {
                "name": "v2.3.1",
                "date": "2022-10-12T20:38:23Z"
            },
            {
                "name": "v2.3.0",
                "date": "2022-10-11T19:34:25Z"
            },
            {
                "name": "v2.2.0",
                "date": "2022-09-17T21:45:58Z"
            },
            {
                "name": "v2.1.6",
                "date": "2022-08-30T16:43:03Z"
            },
            {
                "name": "v2.1.5",
                "date": "2022-08-29T18:11:44Z"
            },
            {
                "name": "v2.1.4",
                "date": "2022-04-26T18:01:01Z"
            },
            {
                "name": "v2.1.3",
                "date": "2022-02-15T16:58:03Z"
            },
            {
                "name": "v2.1.2",
                "date": "2022-02-11T19:51:52Z"
            },
            {
                "name": "v2.1.1",
                "date": "2022-01-27T19:08:05Z"
            },
            {
                "name": "v2.1.0",
                "date": "2022-01-22T18:25:27Z"
            },
            {
                "name": "Ginkgo v2.0.0",
                "date": "2021-12-30T19:44:25Z"
            },
            {
                "name": "v1.16.5",
                "date": "2021-10-11T17:28:58Z"
            },
            {
                "name": "v1.16.4",
                "date": "2021-06-02T18:21:24Z"
            },
            {
                "name": "v1.16.3",
                "date": "2021-05-29T12:31:30Z"
            },
            {
                "name": "v1.16.2",
                "date": "2021-05-04T18:48:52Z"
            },
            {
                "name": "v1.16.1",
                "date": "2021-04-07T12:04:07Z"
            },
            {
                "name": "1.16.0",
                "date": "2021-04-03T20:10:35Z"
            },
            {
                "name": "v1.15.2",
                "date": "2021-03-16T12:46:44Z"
            },
            {
                "name": "v1.15.1",
                "date": "2021-03-07T11:21:27Z"
            },
            {
                "name": "v1.15.0",
                "date": "2021-02-01T21:54:36Z"
            },
            {
                "name": "v1.14.2",
                "date": "2020-10-12T18:00:09Z"
            },
            {
                "name": "v1.14.1",
                "date": "2020-09-04T19:18:03Z"
            },
            {
                "name": "v1.14.0",
                "date": "2020-07-03T12:55:17Z"
            },
            {
                "name": "v1.13.0",
                "date": "2020-06-12T18:54:39Z"
            },
            {
                "name": "v1.12.3",
                "date": "2020-06-01T08:31:43Z"
            },
            {
                "name": "v1.12.2",
                "date": "2020-05-20T16:47:05Z"
            },
            {
                "name": "v1.12.1",
                "date": "2020-05-16T11:07:49Z"
            },
            {
                "name": "v1.12.0",
                "date": "2020-02-01T10:37:03Z"
            },
            {
                "name": "v1.11.0",
                "date": "2019-12-18T17:42:15Z"
            },
            {
                "name": "v1.10.3",
                "date": "2019-10-30T17:17:20Z"
            },
            {
                "name": "v1.10.2",
                "date": "2019-10-02T08:41:18Z"
            },
            {
                "name": "v1.10.1",
                "date": "2019-08-30T15:23:31Z"
            },
            {
                "name": "",
                "date": "2019-08-29T16:10:01Z"
            },
            {
                "name": "",
                "date": "2019-08-19T20:08:56Z"
            },
            {
                "name": "v1.8.0",
                "date": "2019-03-08T13:30:16Z"
            },
            {
                "name": "",
                "date": "2018-11-21T17:20:11Z"
            },
            {
                "name": "",
                "date": "2018-07-17T16:35:40Z"
            },
            {
                "name": "v1.5.0",
                "date": "2018-05-10T16:19:33Z"
            },
            {
                "name": "v1.4.0",
                "date": "2017-07-16T19:32:56Z"
            },
            {
                "name": "v1.3.1",
                "date": "2017-04-03T18:59:14Z"
            },
            {
                "name": "Ginkgo 1.3.0",
                "date": "2017-03-29T03:52:39Z"
            }
        ]
    }
}