{
    "https://api.github.com/repos/HumanSignal/labelImg": {
        "forks": 6368,
        "watchers": 23142,
        "stars": 23142,
        "languages": {
            "Python": 164608,
            "Shell": 4891,
            "Makefile": 520
        },
        "commits": [
            "2022-09-22T22:12:32Z",
            "2022-07-10T02:53:33Z",
            "2022-07-07T01:47:50Z",
            "2022-07-05T20:48:10Z",
            "2022-06-19T06:38:03Z",
            "2022-06-15T06:12:04Z",
            "2022-06-15T06:07:24Z",
            "2022-06-15T05:56:28Z",
            "2022-06-15T05:39:47Z",
            "2022-06-15T05:37:49Z",
            "2022-06-15T05:37:24Z",
            "2022-06-12T17:41:54Z",
            "2022-06-12T17:31:38Z",
            "2022-06-12T17:21:53Z",
            "2022-06-12T17:12:19Z",
            "2022-06-12T17:09:22Z",
            "2022-06-12T17:05:42Z",
            "2022-06-12T17:05:06Z",
            "2022-06-12T17:03:14Z",
            "2022-06-12T17:01:41Z",
            "2022-04-30T06:38:55Z",
            "2022-04-15T14:45:42Z",
            "2022-03-27T17:04:09Z",
            "2022-03-09T05:53:45Z",
            "2022-03-08T06:56:10Z",
            "2022-03-08T01:54:53Z",
            "2022-03-08T00:55:26Z",
            "2022-02-23T06:23:10Z",
            "2022-02-17T19:18:21Z",
            "2022-01-26T16:18:13Z"
        ],
        "creation_date": "2015-09-17T01:33:59Z",
        "contributors": 30,
        "topics": [
            "annotations",
            "deep-learning",
            "detection",
            "image-classification",
            "imagenet",
            "python2",
            "python3",
            "recognition",
            "tools"
        ],
        "subscribers": 406,
        "readme": ".. image:: /readme/images/labelimg.png\n        :target: https://github.com/heartexlabs/label-studio\n\nLabel Studio is a modern, multi-modal data annotation tool\n=======\n\nLabelImg, the popular image annotation tool created by Tzutalin with the help of dozens contributors, is no longer actively being developed and has become part of the Label Studio community. Check out `Label Studio <https://github.com/heartexlabs/label-studio>`__, the most flexible open source data labeling tool for images, text, hypertext, audio, video and time-series data. `Install <https://labelstud.io/guide/install.html>`__ Label Studio and join the `slack community <https://label-studio.slack.com/>`__ to get started.\n\n.. image:: /readme/images/label-studio-1-6-player-screenshot.png\n        :target: https://github.com/heartexlabs/label-studio\n\nAbout LabelImg\n========\n\n.. image:: https://img.shields.io/pypi/v/labelimg.svg\n        :target: https://pypi.python.org/pypi/labelimg\n\n.. image:: https://img.shields.io/github/workflow/status/tzutalin/labelImg/Package?style=for-the-badge\n        :alt: GitHub Workflow Status\n\n.. image:: https://img.shields.io/badge/lang-en-blue.svg\n        :target: https://github.com/tzutalin/labelImg\n\n.. image:: https://img.shields.io/badge/lang-zh-green.svg\n        :target: https://github.com/tzutalin/labelImg/blob/master/readme/README.zh.rst\n\n.. image:: https://img.shields.io/badge/lang-jp-green.svg\n        :target: https://github.com/tzutalin/labelImg/blob/master/readme/README.jp.rst\n\nLabelImg is a graphical image annotation tool.\n\nIt is written in Python and uses Qt for its graphical interface.\n\nAnnotations are saved as XML files in PASCAL VOC format, the format used\nby `ImageNet <http://www.image-net.org/>`__.  Besides, it also supports YOLO and CreateML formats.\n\n.. image:: https://raw.githubusercontent.com/tzutalin/labelImg/master/demo/demo3.jpg\n     :alt: Demo Image\n\n.. image:: https://raw.githubusercontent.com/tzutalin/labelImg/master/demo/demo.jpg\n     :alt: Demo Image\n\n`Watch a demo video <https://youtu.be/p0nR2YsCY_U>`__\n\nInstallation\n------------------\n\nGet from PyPI but only python3.0 or above\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nThis is the simplest (one-command) install method on modern Linux distributions such as Ubuntu and Fedora.\n\n.. code:: shell\n\n    pip3 install labelImg\n    labelImg\n    labelImg [IMAGE_PATH] [PRE-DEFINED CLASS FILE]\n\n\nBuild from source\n~~~~~~~~~~~~~~~~~\n\nLinux/Ubuntu/Mac requires at least `Python\n2.6 <https://www.python.org/getit/>`__ and has been tested with `PyQt\n4.8 <https://www.riverbankcomputing.com/software/pyqt/intro>`__. However, `Python\n3 or above <https://www.python.org/getit/>`__ and  `PyQt5 <https://pypi.org/project/PyQt5/>`__ are strongly recommended.\n\n\nUbuntu Linux\n^^^^^^^^^^^^\n\nPython 3 + Qt5\n\n.. code:: shell\n\n    sudo apt-get install pyqt5-dev-tools\n    sudo pip3 install -r requirements/requirements-linux-python3.txt\n    make qt5py3\n    python3 labelImg.py\n    python3 labelImg.py [IMAGE_PATH] [PRE-DEFINED CLASS FILE]\n\nmacOS\n^^^^^\n\nPython 3 + Qt5\n\n.. code:: shell\n\n    brew install qt  # Install qt-5.x.x by Homebrew\n    brew install libxml2\n\n    or using pip\n\n    pip3 install pyqt5 lxml # Install qt and lxml by pip\n\n    make qt5py3\n    python3 labelImg.py\n    python3 labelImg.py [IMAGE_PATH] [PRE-DEFINED CLASS FILE]\n\n\nPython 3 Virtualenv (Recommended)\n\nVirtualenv can avoid a lot of the QT / Python version issues\n\n.. code:: shell\n\n    brew install python3\n    pip3 install pipenv\n    pipenv run pip install pyqt5==5.15.2 lxml\n    pipenv run make qt5py3\n    pipenv run python3 labelImg.py\n    [Optional] rm -rf build dist; pipenv run python setup.py py2app -A;mv \"dist/labelImg.app\" /Applications\n\nNote: The Last command gives you a nice .app file with a new SVG Icon in your /Applications folder. You can consider using the script: build-tools/build-for-macos.sh\n\n\nWindows\n^^^^^^^\n\nInstall `Python <https://www.python.org/downloads/windows/>`__,\n`PyQt5 <https://www.riverbankcomputing.com/software/pyqt/download5>`__\nand `install lxml <http://lxml.de/installation.html>`__.\n\nOpen cmd and go to the `labelImg <#labelimg>`__ directory\n\n.. code:: shell\n\n    pyrcc4 -o libs/resources.py resources.qrc\n    For pyqt5, pyrcc5 -o libs/resources.py resources.qrc\n\n    python labelImg.py\n    python labelImg.py [IMAGE_PATH] [PRE-DEFINED CLASS FILE]\n\nIf you want to package it into a separate EXE file\n\n.. code:: shell\n\n    Install pyinstaller and execute:\n\n    pip install pyinstaller\n    pyinstaller --hidden-import=pyqt5 --hidden-import=lxml -F -n \"labelImg\" -c labelImg.py -p ./libs -p ./\n\nWindows + Anaconda\n^^^^^^^^^^^^^^^^^^\n\nDownload and install `Anaconda <https://www.anaconda.com/download/#download>`__ (Python 3+)\n\nOpen the Anaconda Prompt and go to the `labelImg <#labelimg>`__ directory\n\n.. code:: shell\n\n    conda install pyqt=5\n    conda install -c anaconda lxml\n    pyrcc5 -o libs/resources.py resources.qrc\n    python labelImg.py\n    python labelImg.py [IMAGE_PATH] [PRE-DEFINED CLASS FILE]\n\nUse Docker\n~~~~~~~~~~~~~~~~~\n.. code:: shell\n\n    docker run -it \\\n    --user $(id -u) \\\n    -e DISPLAY=unix$DISPLAY \\\n    --workdir=$(pwd) \\\n    --volume=\"/home/$USER:/home/$USER\" \\\n    --volume=\"/etc/group:/etc/group:ro\" \\\n    --volume=\"/etc/passwd:/etc/passwd:ro\" \\\n    --volume=\"/etc/shadow:/etc/shadow:ro\" \\\n    --volume=\"/etc/sudoers.d:/etc/sudoers.d:ro\" \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    tzutalin/py2qt4\n\n    make qt4py2;./labelImg.py\n\nYou can pull the image which has all of the installed and required dependencies. `Watch a demo video <https://youtu.be/nw1GexJzbCI>`__\n\n\nUsage\n-----\n\nSteps (PascalVOC)\n~~~~~~~~~~~~~~~~~\n\n1. Build and launch using the instructions above.\n2. Click 'Change default saved annotation folder' in Menu/File\n3. Click 'Open Dir'\n4. Click 'Create RectBox'\n5. Click and release left mouse to select a region to annotate the rect\n   box\n6. You can use right mouse to drag the rect box to copy or move it\n\nThe annotation will be saved to the folder you specify.\n\nYou can refer to the below hotkeys to speed up your workflow.\n\nSteps (YOLO)\n~~~~~~~~~~~~\n\n1. In ``data/predefined_classes.txt`` define the list of classes that will be used for your training.\n\n2. Build and launch using the instructions above.\n\n3. Right below \"Save\" button in the toolbar, click \"PascalVOC\" button to switch to YOLO format.\n\n4. You may use Open/OpenDIR to process single or multiple images. When finished with a single image, click save.\n\nA txt file of YOLO format will be saved in the same folder as your image with same name. A file named \"classes.txt\" is saved to that folder too. \"classes.txt\" defines the list of class names that your YOLO label refers to.\n\nNote:\n\n- Your label list shall not change in the middle of processing a list of images. When you save an image, classes.txt will also get updated, while previous annotations will not be updated.\n\n- You shouldn't use \"default class\" function when saving to YOLO format, it will not be referred.\n\n- When saving as YOLO format, \"difficult\" flag is discarded.\n\nCreate pre-defined classes\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can edit the\n`data/predefined\\_classes.txt <https://github.com/tzutalin/labelImg/blob/master/data/predefined_classes.txt>`__\nto load pre-defined classes\n\nAnnotation visualization\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n1. Copy the existing lables file to same folder with the images. The labels file name must be same with image file name.\n\n2. Click File and choose 'Open Dir' then Open the image folder.\n\n3. Select image in File List, it will appear the bounding box and label for all objects in that image.\n\n(Choose Display Labels mode in View to show/hide lablels)\n\n\nHotkeys\n~~~~~~~\n\n+--------------------+--------------------------------------------+\n| Ctrl + u           | Load all of the images from a directory    |\n+--------------------+--------------------------------------------+\n| Ctrl + r           | Change the default annotation target dir   |\n+--------------------+--------------------------------------------+\n| Ctrl + s           | Save                                       |\n+--------------------+--------------------------------------------+\n| Ctrl + d           | Copy the current label and rect box        |\n+--------------------+--------------------------------------------+\n| Ctrl + Shift + d   | Delete the current image                   |\n+--------------------+--------------------------------------------+\n| Space              | Flag the current image as verified         |\n+--------------------+--------------------------------------------+\n| w                  | Create a rect box                          |\n+--------------------+--------------------------------------------+\n| d                  | Next image                                 |\n+--------------------+--------------------------------------------+\n| a                  | Previous image                             |\n+--------------------+--------------------------------------------+\n| del                | Delete the selected rect box               |\n+--------------------+--------------------------------------------+\n| Ctrl++             | Zoom in                                    |\n+--------------------+--------------------------------------------+\n| Ctrl--             | Zoom out                                   |\n+--------------------+--------------------------------------------+\n| \u2191\u2192\u2193\u2190               | Keyboard arrows to move selected rect box  |\n+--------------------+--------------------------------------------+\n\n**Verify Image:**\n\nWhen pressing space, the user can flag the image as verified, a green background will appear.\nThis is used when creating a dataset automatically, the user can then through all the pictures and flag them instead of annotate them.\n\n**Difficult:**\n\nThe difficult field is set to 1 indicates that the object has been annotated as \"difficult\", for example, an object which is clearly visible but difficult to recognize without substantial use of context.\nAccording to your deep neural network implementation, you can include or exclude difficult objects during training.\n\nHow to reset the settings\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn case there are issues with loading the classes, you can either:\n\n1. From the top menu of the labelimg click on Menu/File/Reset All\n2. Remove the `.labelImgSettings.pkl` from your home directory. In Linux and Mac you can do:\n    `rm ~/.labelImgSettings.pkl`\n\n\nHow to contribute\n~~~~~~~~~~~~~~~~~\n\nSend a pull request\n\nLicense\n~~~~~~~\n`Free software: MIT license <https://github.com/tzutalin/labelImg/blob/master/LICENSE>`_\n\nCitation: Tzutalin. LabelImg. Git code (2015). https://github.com/tzutalin/labelImg\n\nRelated and additional tools\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n1. `Label Studio <https://github.com/heartexlabs/label-studio>`__ to label images, text, audio, video and time-series data for machine learning and AI\n2. `ImageNet Utils <https://github.com/tzutalin/ImageNet_Utils>`__ to\n   download image, create a label text for machine learning, etc\n3. `Use Docker to run labelImg <https://hub.docker.com/r/tzutalin/py2qt4>`__\n4. `Generating the PASCAL VOC TFRecord files <https://github.com/tensorflow/models/blob/4f32535fe7040bb1e429ad0e3c948a492a89482d/research/object_detection/g3doc/preparing_inputs.md#generating-the-pascal-voc-tfrecord-files>`__\n5. `App Icon based on Icon by Nick Roach (GPL) <https://www.elegantthemes.com/>`__\n6. `Setup python development in vscode <https://tzutalin.blogspot.com/2019/04/set-up-visual-studio-code-for-python-in.html>`__\n7. `The link of this project on iHub platform <https://code.ihub.org.cn/projects/260/repository/labelImg>`__\n8. `Convert annotation files to CSV format or format for Google Cloud AutoML <https://github.com/tzutalin/labelImg/tree/master/tools>`__\n\n\n\nStargazers over time\n~~~~~~~~~~~~~~~~~~~~\n\n.. image:: https://starchart.cc/tzutalin/labelImg.svg\n\n",
        "releases": [
            {
                "name": "Binary v1.8.1",
                "date": "2018-12-03T05:40:38Z"
            },
            {
                "name": "Binary v1.8.0",
                "date": "2018-12-03T03:32:25Z"
            }
        ]
    }
}