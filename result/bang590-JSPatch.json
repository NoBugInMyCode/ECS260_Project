{
    "https://api.github.com/repos/bang590/JSPatch": {
        "forks": 2238,
        "watchers": 11373,
        "stars": 11373,
        "languages": {
            "Objective-C": 246159,
            "C": 242451,
            "C++": 20125,
            "JavaScript": 9648,
            "Ruby": 2802,
            "PHP": 1784
        },
        "commits": [
            "2018-04-22T07:02:28Z",
            "2018-03-28T11:31:32Z",
            "2018-03-28T05:02:03Z",
            "2018-03-26T11:20:13Z",
            "2018-03-26T11:18:28Z",
            "2018-03-26T09:45:42Z",
            "2018-03-26T07:54:19Z",
            "2018-03-24T05:07:26Z",
            "2018-03-22T12:08:13Z",
            "2017-08-09T07:20:54Z",
            "2017-08-07T03:27:12Z",
            "2017-07-22T07:25:20Z",
            "2017-05-13T09:08:32Z",
            "2017-05-01T05:51:40Z",
            "2017-05-01T05:37:54Z",
            "2017-04-17T04:28:45Z",
            "2017-04-16T06:21:25Z",
            "2017-04-09T07:10:20Z",
            "2017-03-30T11:23:46Z",
            "2017-03-30T11:22:36Z",
            "2017-03-10T11:05:43Z",
            "2017-03-10T10:27:56Z",
            "2017-02-22T03:06:28Z",
            "2017-02-21T13:31:43Z",
            "2017-02-17T09:29:27Z",
            "2017-02-17T08:04:21Z",
            "2017-02-16T09:52:08Z",
            "2017-02-13T03:40:35Z",
            "2017-02-10T10:32:06Z",
            "2017-02-08T13:25:09Z"
        ],
        "creation_date": "2015-05-25T02:37:22Z",
        "contributors": 30,
        "topics": [
            "hotfix",
            "jsbridge",
            "jspatch",
            "objc-runtime"
        ],
        "subscribers": 501,
        "readme": "# JSPatch\n[![Travis](https://img.shields.io/travis/bang590/JSPatch.svg)](https://travis-ci.org/bang590/JSPatch)\n![CocoaPods Version](https://img.shields.io/cocoapods/v/JSPatch.svg?style=flat)\n[![License](https://img.shields.io/github/license/bang590/JSPatch.svg?style=flat)](https://github.com/bang590/JSPatch/blob/master/LICENSE)\n\n[\u4e2d\u6587\u4ecb\u7ecd](https://github.com/bang590/JSPatch/blob/master/README-CN.md) | [\u6587\u6863](https://github.com/bang590/JSPatch/wiki) | [JSPatch\u5e73\u53f0](http://jspatch.com)\n\n**\u8bf7\u5927\u5bb6\u4e0d\u8981\u81ea\u884c\u63a5\u5165 JSPatch\uff0c\u7edf\u4e00\u63a5\u5165 JSPatch \u5e73\u53f0\uff0c\u8ba9\u70ed\u4fee\u590d\u5728\u4e00\u4e2a\u5b89\u5168\u548c\u53ef\u63a7\u7684\u73af\u5883\u4e0b\u4f7f\u7528\u3002\u539f\u56e0\u8be6\u89c1 [\u8fd9\u91cc](http://jspatch.com/Docs/appleFAQ)**\n\nJSPatch bridges Objective-C and JavaScript using the Objective-C runtime. You can call any Objective-C class and method in JavaScript by just including a small engine. That makes the APP obtaining the power of script language: add modules or replacing Objective-C code to fix bugs dynamically.\n\nJSPatch is still in development, welcome to improve the project together.\n\n**Notice**: Please go to [Wiki](https://github.com/bang590/JSPatch/wiki/) to get full document.\n\n## Example\n\n```objc\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions \n{\n    [JPEngine startEngine];\n    NSString *sourcePath = [[NSBundle mainBundle] pathForResource:@\"demo\" ofType:@\"js\"];\n    NSString *script = [NSString stringWithContentsOfFile:sourcePath encoding:NSUTF8StringEncoding error:nil];\n    [JPEngine evaluateScript:script];\n    \n    self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n    [self.window addSubview:[self genView]];\n    [self.window makeKeyAndVisible];\n    \n    return YES;\n}\n\n- (UIView *)genView\n{\n    return [[UIView alloc] initWithFrame:CGRectMake(0, 0, 320, 320)];\n}\n\n@end\n```\n\n```js\n// demo.js\nrequire('UIView, UIColor, UILabel')\ndefineClass('AppDelegate', {\n  // replace the -genView method\n  genView: function() {\n    var view = self.ORIGgenView();\n    view.setBackgroundColor(UIColor.greenColor())\n    var label = UILabel.alloc().initWithFrame(view.frame());\n    label.setText(\"JSPatch\");\n    label.setTextAlignment(1);\n    view.addSubview(label);\n    return view;\n  }\n});\n```\n\nYou can also try to use [JSPatch Convertor](https://github.com/bang590/JSPatchConvertor) to convertor code from Objective-C to JavaScript automatically.\n\n## Installation\n\n### CocoaPods\n\n[CocoaPods](http://cocoapods.org) is a dependency manager for Objective-C, which automates and simplifies the process of using 3rd-party libraries like JSPatch in your projects. See the [\"Getting Started\"](https://guides.cocoapods.org/using/getting-started.html) guide for more information.\n\n```ruby\n# Your Podfile\nplatform :ios, '6.0'\npod 'JSPatch'\n```\n\n### Manually\n\nCopy `JSEngine.m` `JSEngine.h` `JSPatch.js` in `JSPatch/` to your project.\n\n\n## Usage\n\n### Objective-C\n1. `#import \"JPEngine.h\"`\n2. call `[JPEngine startEngine]`\n3. exec JavasScript by `[JPEngine evaluateScript:@\"\"]`\n\n```objc\n[JPEngine startEngine];\n\n// exec js directly\n[JPEngine evaluateScript:@\"\\\n var alertView = require('UIAlertView').alloc().init();\\\n alertView.setTitle('Alert');\\\n alertView.setMessage('AlertView from js'); \\\n alertView.addButtonWithTitle('OK');\\\n alertView.show(); \\\n\"];\n\n// exec js file from network\n[NSURLConnection sendAsynchronousRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@\"http://cnbang.net/test.js\"]] queue:[NSOperationQueue mainQueue] completionHandler:^(NSURLResponse *response, NSData *data, NSError *connectionError) {\n    NSString *script = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n    [JPEngine evaluateScript:script];\n}];\n\n// exec local js file\nNSString *sourcePath = [[NSBundle mainBundle] pathForResource:@\"sample\" ofType:@\"js\"];\nNSString *script = [NSString stringWithContentsOfFile:sourcePath encoding:NSUTF8StringEncoding error:nil];\n[JPEngine evaluateScript:script];\n```\n\n### JavaScript\n\n#### Base Usage\n\n```js\n//require\nrequire('UIView, UIColor, UISlider, NSIndexPath')\n\n// Invoke class method\nvar redColor = UIColor.redColor();\n\n// Invoke instance method\nvar view = UIView.alloc().init();\nview.setNeedsLayout();\n\n// set proerty\nview.setBackgroundColor(redColor);\n\n// get property \nvar bgColor = view.backgroundColor();\n\n// multi-params method (use underline to separate)\n// OC\uff1aNSIndexPath *indexPath = [NSIndexPath indexPathForRow:0 inSection:1];\nvar indexPath = NSIndexPath.indexPathForRow_inSection(0, 1);\n\n// method name contains underline (use double undeline to represent)\n// OC: [JPObject _privateMethod];\nJPObject.__privateMethod()\n\n// use .toJS() to convert NSArray / NSString / NSDictionary to JS type.\nvar arr = require('NSMutableArray').alloc().init()\narr.addObject(\"JS\")\njsArr = arr.toJS()\nconsole.log(jsArr.push(\"Patch\").join(''))  //output: JSPatch\n\n// use hashes to represent struct like CGRect / CGSize / CGPoint / NSRange\nvar view = UIView.alloc().initWithFrame({x:20, y:20, width:100, height:100});\nvar x = view.bounds().x;\n\n// wrap function with `block()` when passing block from JS to OC\n// OC Method: + (void)request:(void(^)(NSString *content, BOOL success))callback\nrequire('JPObject').request(block(\"NSString *, BOOL\", function(ctn, succ) {\n  if (succ) log(ctn)\n}));\n\n// GCD\ndispatch_after(1.0, function(){\n  // do something\n})\ndispatch_async_main(function(){\n  // do something\n})\n```\n\nGo to wiki page for more details: [Base Usage](https://github.com/bang590/JSPatch/wiki/Base-usage)\n\n\n\n#### defineClass\nYou can redefine an existing class and override methods.\n\n```objc\n// OC\n@implementation JPTableViewController\n...\n- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath\n{\n  NSString *content = self.dataSource[[indexPath row]];  //may cause out of bound\n  JPViewController *ctrl = [[JPViewController alloc] initWithContent:content];\n  [self.navigationController pushViewController:ctrl];\n}\n- (NSArray *)dataSource\n{\n  return @[@\"JSPatch\", @\"is\"];\n}\n- (void)customMethod\n{\n  NSLog(@\"callCustom method\")\n}\n@end\n```\n\n```objc\n// JS\ndefineClass(\"JPTableViewController\", {\n  // instance method definitions\n  tableView_didSelectRowAtIndexPath: function(tableView, indexPath) {\n    var row = indexPath.row()\n    if (self.dataSource().count() > row) {  //fix the out of bound bug here\n      var content = self.dataSource().objectAtIndex(row);\n      var ctrl = JPViewController.alloc().initWithContent(content);\n      self.navigationController().pushViewController(ctrl);\n    }\n  },\n\n  dataSource: function() {\n    // get the original method by adding prefix 'ORIG'\n    var data = self.ORIGdataSource().toJS();\n    return data.push('Good!');\n  }\n}, {})\n```\n\nGo to wiki page for more details: [Usage of defineClass](https://github.com/bang590/JSPatch/wiki/Usage-of-defineClass)\n\n#### Extensions\n\nThere are some extensions provide support for custom struct type, C methods and other functional, call `+addExtensions:` after starting engine to add extensions:\n\n```objc\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions \n{\n    [JPEngine startEngine];\n\n    //add extensions after startEngine\n    [JPEngine addExtensions:@[@\"JPInclude\", @\"JPCGTransform\"]];\n\n    NSString *sourcePath = [[NSBundle mainBundle] pathForResource:@\"demo\" ofType:@\"js\"];\n    NSString *script = [NSString stringWithContentsOfFile:sourcePath encoding:NSUTF8StringEncoding error:nil];\n    [JPEngine evaluateScript:script];\n}\n\n@end\n```\n\n```js\ninclude('test.js')   //include function provide by JPInclude.m\nvar view = require('UIView').alloc().init()\n\n//CGAffineTransform is supported in JPCGTransform.m\nview.setTransform({a:1, b:0, c:0, d:1, tx:0, ty:100})\n```\n\nExtensions can be added dynamiclly in JS, which is recommended:\n\n```js\nrequire('JPEngine').addExtensions(['JPInclude', 'JPCGTransform'])\n\n// `include()` and `CGAffineTransform` is avaliable now.\n```\n\nYou can create your own extension to support custom struct type and C methods in project, see the wiki page for more details: [Adding new extensions](https://github.com/bang590/JSPatch/wiki/Adding-new-extensions)\n\n\n## Enviroment\n- iOS 7+, forward compatibility with iOS 6\n- JavaScriptCore.framework\n- Support armv7/armv7s/arm64\n",
        "releases": []
    }
}