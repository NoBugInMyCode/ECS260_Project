{
    "https://api.github.com/repos/lanpa/tensorboardX": {
        "forks": 865,
        "watchers": 7899,
        "stars": 7899,
        "languages": {
            "Python": 194531,
            "Shell": 1734
        },
        "commits": [
            "2025-01-01T16:22:53Z",
            "2025-01-01T06:19:28Z",
            "2024-12-29T17:07:27Z",
            "2024-12-28T17:23:18Z",
            "2024-12-28T09:46:13Z",
            "2024-12-24T16:44:32Z",
            "2024-12-23T01:26:36Z",
            "2024-12-23T00:36:19Z",
            "2024-12-22T22:57:47Z",
            "2024-12-22T07:58:59Z",
            "2024-12-21T17:47:07Z",
            "2024-12-21T05:58:05Z",
            "2024-12-20T17:22:48Z",
            "2024-11-16T04:31:19Z",
            "2023-11-12T14:28:03Z",
            "2023-11-02T14:10:35Z",
            "2023-09-03T09:26:33Z",
            "2023-08-20T11:58:59Z",
            "2023-08-06T17:48:44Z",
            "2023-07-30T14:02:26Z",
            "2023-07-30T09:48:39Z",
            "2023-07-16T09:53:06Z",
            "2023-07-16T09:46:36Z",
            "2023-07-16T09:42:53Z",
            "2023-07-09T15:24:18Z",
            "2023-07-09T05:12:54Z",
            "2023-06-25T09:49:09Z",
            "2023-06-25T09:48:22Z",
            "2023-06-24T15:30:26Z",
            "2023-06-24T12:22:22Z"
        ],
        "creation_date": "2017-06-13T13:54:19Z",
        "contributors": 30,
        "topics": [
            "machine-learning",
            "numpy",
            "pytorch",
            "tensorboard",
            "visualization"
        ],
        "subscribers": 85,
        "readme": "# tensorboardX\n\n[![PyPI version](https://badge.fury.io/py/tensorboardX.svg)](https://badge.fury.io/py/tensorboardX)\n[![Documentation Status](https://readthedocs.org/projects/tensorboardx/badge/?version=latest)](https://tensorboardx.readthedocs.io/en/latest/?badge=latest)\n[![Coverage Status](https://codecov.io/gh/lanpa/tensorboardX/branch/master/graph/badge.svg)](https://codecov.io/gh/lanpa/tensorboardX/)\n\nWrite TensorBoard events with simple function call.\n\nThe current release (v2.6.2.2) is tested on anaconda3, with PyTorch 1.11.0 / torchvision 0.12 / tensorboard 2.9.0.\n\n* Support `scalar`, `image`, `figure`, `histogram`, `audio`, `text`, `graph`, `onnx_graph`, `embedding`, `pr_curve`, `mesh`, `hyper-parameters`\n  and `video` summaries.\n\n* [FAQ](https://github.com/lanpa/tensorboardX/wiki)\n\n\n## Install\n\n`pip install tensorboardX`\n\nor build from source:\n\n`pip install 'git+https://github.com/lanpa/tensorboardX'`\n\nYou can optionally install [`crc32c`](https://github.com/ICRAR/crc32c) to speed up.\n\n`pip install crc32c`\n\nStarting from tensorboardX 2.1, You need to install `soundfile` for the `add_audio()` function (200x speedup).\n\n`pip install soundfile`\n\n## Example\n\n* Clone the files in https://github.com/lanpa/tensorboardX/tree/master/examples\n* Run the demo script: e.g. `python examples/demo.py`\n* Start TensorBoard with `tensorboard --logdir runs`  \n\n\n```python\n# demo.py\n\nimport torch\nimport torchvision.utils as vutils\nimport numpy as np\nimport torchvision.models as models\nfrom torchvision import datasets\nfrom tensorboardX import SummaryWriter\n\nresnet18 = models.resnet18(False)\nwriter = SummaryWriter()\nsample_rate = 44100\nfreqs = [262, 294, 330, 349, 392, 440, 440, 440, 440, 440, 440]\n\nfor n_iter in range(100):\n\n    dummy_s1 = torch.rand(1)\n    dummy_s2 = torch.rand(1)\n    # data grouping by `slash`\n    writer.add_scalar('data/scalar1', dummy_s1[0], n_iter)\n    writer.add_scalar('data/scalar2', dummy_s2[0], n_iter)\n\n    writer.add_scalars('data/scalar_group', {'xsinx': n_iter * np.sin(n_iter),\n                                             'xcosx': n_iter * np.cos(n_iter),\n                                             'arctanx': np.arctan(n_iter)}, n_iter)\n\n    dummy_img = torch.rand(32, 3, 64, 64)  # output from network\n    if n_iter % 10 == 0:\n        x = vutils.make_grid(dummy_img, normalize=True, scale_each=True)\n        writer.add_image('Image', x, n_iter)\n\n        dummy_audio = torch.zeros(sample_rate * 2)\n        for i in range(x.size(0)):\n            # amplitude of sound should in [-1, 1]\n            dummy_audio[i] = np.cos(freqs[n_iter // 10] * np.pi * float(i) / float(sample_rate))\n        writer.add_audio('myAudio', dummy_audio, n_iter, sample_rate=sample_rate)\n\n        writer.add_text('Text', 'text logged at step:' + str(n_iter), n_iter)\n\n        for name, param in resnet18.named_parameters():\n            writer.add_histogram(name, param.clone().cpu().data.numpy(), n_iter)\n\n        # needs tensorboard 0.4RC or later\n        writer.add_pr_curve('xoxo', np.random.randint(2, size=100), np.random.rand(100), n_iter)\n\ndataset = datasets.MNIST('mnist', train=False, download=True)\nimages = dataset.test_data[:100].float()\nlabel = dataset.test_labels[:100]\n\nfeatures = images.view(100, 784)\nwriter.add_embedding(features, metadata=label, label_img=images.unsqueeze(1))\n\n# export scalar data to JSON for external processing\nwriter.export_scalars_to_json(\"./all_scalars.json\")\nwriter.close()\n```\n\n## Screenshots\n\n<img src=\"screenshots/Demo.gif\">\n\n## Using TensorboardX with Comet\n\nTensorboardX now supports logging directly to [Comet](https://www.comet.com/site/products/ml-experiment-tracking/?utm_source=tensorboardx&utm_medium=partner&utm_campaign=partner_tensorboardx_2023). Comet is a **free** cloud based solution that allows you to automatically track, compare and explain your experiments. It adds a lot of functionality on top of tensorboard such as dataset management, diffing experiments, seeing the code that generated the results and more.\n\nThis works out of the box and just require an additional line of code. See a full code example in this [Colab Notebook](https://colab.research.google.com/drive/1cTO3tgZ03nuJQ8kOjZhEiwbB-45tV4lm?usp=sharing)\n\n<p align=\"center\">\n<img src=\"screenshots/comet.gif\" width=\"750\" height=\"400\">\n</p>\n\n## Tweaks\n\nTo add more ticks for the slider (show more image history), check https://github.com/lanpa/tensorboardX/issues/44 or \nhttps://github.com/tensorflow/tensorboard/pull/1138\n\n## Reference\n\n* [TeamHG-Memex/tensorboard_logger](https://github.com/TeamHG-Memex/tensorboard_logger)\n* [dmlc/tensorboard](https://github.com/dmlc/tensorboard)\n",
        "releases": [
            {
                "name": "Release v2.5",
                "date": "2022-06-05T10:13:32Z"
            },
            {
                "name": "Release v2.4",
                "date": "2021-07-09T12:36:58Z"
            },
            {
                "name": "Release v2.3",
                "date": "2021-07-09T12:35:54Z"
            },
            {
                "name": "Release v2.2",
                "date": "2021-04-25T09:18:11Z"
            },
            {
                "name": "Release v2.1",
                "date": "2020-07-05T17:52:33Z"
            },
            {
                "name": "Release v2.0",
                "date": "2020-07-05T17:54:10Z"
            },
            {
                "name": "Release v1.9",
                "date": "2019-10-09T01:02:17Z"
            },
            {
                "name": "release v1.8",
                "date": "2019-07-04T18:44:07Z"
            },
            {
                "name": "release v1.7",
                "date": "2019-05-20T00:32:11Z"
            },
            {
                "name": "release v1.6",
                "date": "2019-04-04T11:53:55Z"
            },
            {
                "name": "release v1.5",
                "date": "2019-04-04T11:53:27Z"
            },
            {
                "name": "release v1.2",
                "date": "2018-04-28T14:37:49Z"
            },
            {
                "name": "release v1.0",
                "date": "2018-01-18T12:41:27Z"
            },
            {
                "name": "TensorboardX",
                "date": "2017-11-10T14:28:36Z"
            },
            {
                "name": "All tensorboard functions are implemented.",
                "date": "2017-07-26T09:35:23Z"
            }
        ]
    }
}