{
    "https://api.github.com/repos/rafaballerini/GitTutorial": {
        "forks": 2990,
        "watchers": 9546,
        "stars": 9546,
        "languages": {},
        "commits": [
            "2021-06-14T17:20:12Z",
            "2021-05-26T00:03:44Z",
            "2021-05-22T22:00:15Z",
            "2021-05-22T21:58:14Z",
            "2021-05-22T21:58:02Z",
            "2021-05-22T21:44:07Z",
            "2021-05-22T21:43:15Z",
            "2021-05-22T21:43:05Z",
            "2021-05-21T20:22:24Z",
            "2021-05-10T04:47:17Z",
            "2021-05-04T04:31:23Z",
            "2021-05-04T04:31:11Z",
            "2021-05-04T04:26:23Z",
            "2021-05-04T04:23:32Z",
            "2021-04-29T13:27:21Z",
            "2021-04-28T05:11:50Z",
            "2021-04-28T05:10:57Z",
            "2021-04-28T05:08:00Z",
            "2021-04-28T05:06:19Z",
            "2021-04-28T04:33:00Z",
            "2021-04-28T04:08:52Z",
            "2021-04-27T00:41:41Z",
            "2021-04-26T04:56:54Z",
            "2021-04-22T15:20:14Z",
            "2021-04-22T12:56:04Z",
            "2021-04-22T12:55:35Z",
            "2021-04-22T12:51:50Z",
            "2021-04-22T12:51:25Z",
            "2021-04-22T12:44:15Z",
            "2021-04-22T10:41:18Z"
        ],
        "creation_date": "2021-04-15T13:45:15Z",
        "contributors": 2,
        "topics": [
            "git",
            "git-commit",
            "git-tutorial",
            "github",
            "github-config"
        ],
        "subscribers": 34,
        "readme": "# Como usar o Git e Github na pr\u00e1tica\n \n## In\u00edcio do v\u00eddeo\n\nOie gente sejam bem vindos a mais um v\u00eddeo aqui do canal, eu sou a Rafaella Ballerini e hoje eu vou mostrar pra voc\u00eas como utilizamos o GIT na pr\u00e1tica\n\nNo [v\u00eddeo anterior](https://www.youtube.com/watch?v=DqTITcMq68k) eu expliquei os conceitos de alguns termos t\u00e9cnicos que utilizamos quando estamos usando o git, ent\u00e3o [nesse v\u00eddeo](https://www.youtube.com/watch?v=UBAX-13g8OM) vou mostrar na pr\u00e1tica como isso acontece.\n\n## Instalando o GIT\n\n* [Link com os downloads](https://git-scm.com/downloads)\n\n## Criar um projeto novo\n\n* Criar uma nova pasta no PC pra isso chamada `Git Tutorial`\n\n* Abrir o VSCode nessa pasta\n\n* Criar um novo arquivo `README.md`\n\n* Escrever dentro dele `Ol\u00e1, nesse projeto voc\u00ea aprender\u00e1 alguns comandos do Git`\n\n* Salva o arquivo\n\nAgora ent\u00e3o \u00e9 hora de usarmos o Git\n\n* Abre o Git Bash que foi instalado na m\u00e1quina (pode ser pelo terminal do VSCode mesmo)\n\n* `git init` para inicializar o reposit\u00f3rio\n\nFoi criada uma pastinha `.git` e \u00e9 ali que toda a m\u00e1gica acontece, ent\u00e3o n\u00e3o apague\n\n* `git add README.md` para colocar o arquivo na \u00e1rea de stagging \n\n<img src=\"https://i1.wp.com/www.markus-gattol.name/misc/mm/si/content/git_git_add.png\">\n\nEsse `add` \u00e9 necess\u00e1rio antes de darmos o commit de fato, mas por que isso? No final do v\u00eddeo explico para voc\u00eas\n\n* `git commit -m \"primeiro commit\"` para de fato dar o commit no reposit\u00f3rio\n\n* `git branch -M \"main\"` para alterar o nome da branch principal de `master` para `main` (isso \u00e9 uma boa pr\u00e1tica atualmente recomendada)\n\n## Interfaces Git\n\nBeleza, recebemos a confirma\u00e7\u00e3o de que o commit aconteceu, mas isso t\u00e1 um pouco abstrato ainda n\u00e9?\nExistem algumas [interfaces legais do git](https://git-scm.com/downloads/guis) que voc\u00ea pode fazer o download para poder visualizar de fato como est\u00e1 o projeto, o que foi alterado em cada commit, quando foi alterado etc.\nAqui eu vou mostrar pra voc\u00eas a usarem direto no Github.\n\n## Reposit\u00f3rio no Github\n\n* Depois de voc\u00ea ter criado a sua conta na plataforma, voc\u00ea ir\u00e1 em `Criar novo reposit\u00f3rio`\n\nVoc\u00ea vai preencher com as informa\u00e7\u00f5es do projeto, ent\u00e3o dar o nome do reposit\u00f3rio, colocar uma breve descri\u00e7\u00e3o e criar\n\n<img src=\"https://media.discordapp.net/attachments/831974152667398214/836828773067915274/unknown.png\">\n\nLogo depois vai aparecer essa p\u00e1gina um pouco cinza e confusa e com v\u00e1rios comandos (pode at\u00e9 perceber que alguns deles jpa usamos), mas o que voc\u00ea tem que fazer \u00e9 bem simples, apenas copie o link que aparecer para voc\u00ea\n\n<img src=\"https://media.discordapp.net/attachments/831974152667398214/836828905859186708/unknown.png?width=1440&height=141\">\n\nLembra do conceito de `remote` que eu expliquei pra voc\u00eas no \u00faltimo v\u00eddeo? N\u00f3s iremos utiliz\u00e1-lo agora\n\n* Para passar o commit do meu reposit\u00f3rio local (da minha m\u00e1quina) para um reposit\u00f3rio na plataforma do Github, usamos o `git remote add origin <link do reposit\u00f3rio>`\n\n* `origin` \u00e9 o nome utilizado para referenciar o nosso reposit\u00f3rio\n\nAgora j\u00e1 temos o nosso reposit\u00f3rio local conectado com o resposit\u00f3rio do Github, por\u00e9m o `commit` que damos na m\u00e1quina n\u00e3o sobe automaticamente para a plataforma\n\n* Para isso precisaremos empurrar, enviar para l\u00e1 com o `git push -u origin main`\n\nAgora se recarregarmos a p\u00e1gina iremos ver o nosso arquivo aqui na plataforma!\n\n## Alterando e adicionando arquivo\n\nBeleza, agora que temos o nosso reposit\u00f3rio no Github configurado direitinho, podemos usar e abusar do que o Git oferece, afinal \u00e9 pra isso que estamos utilizando ele n\u00e9?\nPrimeira coisa que faremos ent\u00e3o \u00e9 alterar esse arquivo que j\u00e1 commitamos\n\n* Adiciona mais uma frase no arquivo `Essa \u00e9 uma altera\u00e7\u00e3o`\n\n* Al\u00e9m disso iremos criar um novo arquivo `Projeto.md`, onde escreveremos `Esse \u00e9 o arquivo onde desenvolverei o meu projeto`\n\n* Agora ent\u00e3o precisamos subir essa altera\u00e7\u00e3o, pra isso seguiremos os mesmos passos de `git add .` (agora ponto `.` pois adiciona todos os arquivos) e `git commit -m \"Primeira altera\u00e7\u00e3o\"`\n\n* Lembrando que para alterar algo no nosso resposit\u00f3rio do Github precisamos dar o push, ent\u00e3o `git push origin main` (sem o -u)\n\nSe olharmos agora o nosso c\u00f3digo no Github, ele ter\u00e1 sido alterado, e n\u00e3o s\u00f3 isso, se clicarmos no nome do `commit`, podemos ver exatamente as altera\u00e7\u00f5es que foram feitas nele.\nO verde com `+` e o vermelho com `-` mostra, os conte\u00fados que foram adicionados e editados dentro do c\u00f3digo.\nAqui nesse bot\u00e3o poderemos ver todos os commits j\u00e1 feitos anteriormente, ent\u00e3o se clicarmos em algum deles, veremos exatamente o que havia sido alterado, al\u00e9m de claro, vermos o c\u00f3digo como era. Incr\u00edvel n\u00e9?\n\n<img src=\"https://media.discordapp.net/attachments/831974152667398214/836830443617648670/unknown.png\">\n\n## Branch\n\nAt\u00e9 agora tudo o que fizemos de altera\u00e7\u00f5es e mandamos de commit, foi na nossa `main`, que \u00e9 aquela linha do tempo principal.\nAgora vou mostrar pra voc\u00eas como criamos uma branch e depois como que juntamos ela com o c\u00f3digo que j\u00e1 est\u00e1 na `main` (lembrando que ela \u00e9 uma linha cronol\u00f3gica adicional/alternativa a principal)\nE outra, a branch pode ser criada tanto para quando voc\u00ea for fazer uma altera\u00e7\u00e3o em um arquivo, quando para adicionar outro arquivo dentro do projeto ou mesmo excluir.\n<br>\nObs. *Lembrem que eu estou aqui editando um arquivo markdown, por\u00e9m isso tudo vale para qualquer tipo de arquivo com qualquer extens\u00e3o*\n\n* Nesse caso vamos adicionar um novo arquivo para desenvolver a nossa feature `Bot\u00e3o`\n\n* Ent\u00e3o a primeira coisa que fazemos \u00e9 `git checkout -b \"novo-botao\"`, assim criando uma branch para ele\nEsse comando al\u00e9m de criar a branch j\u00e1 entra nela com o checkout, inclusive se olharmos agora aqui no meu VSCode, estamos dentro dela.\n\n* Vou ent\u00e3o criar o arquivo, criar o `bot\u00e3o.md` \"aqui eu crio o bot\u00e3o\"\n\n* E agora fazemos o passo a passo que j\u00e1 sabemos, colocamos a nossa altera\u00e7\u00e3o em stagging com o `git add .` e commitamos com o `git commit -m \"novo bot\u00e3o\"`\n\n* Para enviarmos agora que vai ser diferente. Voc\u00eas lembram que utiliz\u00e1vamos o `git push orgin main` n\u00e9? Por\u00e9m main era aquela branch principal. Agora ent\u00e3o usaremos `git push origin botao`\n\nAgora se olharmos o nosso Github, veremos que tem 2 branches, a `main` e a `botao`\n\n<img src=\"https://media.discordapp.net/attachments/812313742192279612/836820670037622854/unknown.png\">\n\nVamos supor que eu ainda n\u00e3o tivesse terminado de desenvolver o bot\u00e3o, eu poderia continuar tranquilamente na branch `botao` at\u00e9 terminar!\n\nMas Rafa, e se eu precisasse por algum motivo voltar naquela branch `main` e desenvolver a partir do que deixei l\u00e1? Sem problemas, a \u00fanica coisa que voc\u00ea precisa fazer nesse caso \u00e9 `git checkout main`, e pra voltar depois \u00e9 s\u00f3 `git checkout botao` novamente\n\nBeleza! Agora desenvolvi tudo o que queria aqui na branch `botao`, como que junto ela com a main sem problemas?\n\n## Merge\n\n* Agora o que precisamos fazer \u00e9 ir para a nossa branch principal `git checkout main` e l\u00e1 faremos o merge com a branch `botao` que criamos, com `git merge botao`\n\nPronto, agora tudo o que tinha de altera\u00e7\u00e3o na branch `botao` juntou com a `main`\n\n* Para finalizar ent\u00e3o, vamos jogar l\u00e1 no Github isso tudo com o `git push origin main`\n\n## Clone\n\nComo voc\u00eas podem baixar meu c\u00f3digo?\n\nSempre que voc\u00ea entrar em um reposit\u00f3rio, seja o seu ou o de qualquer outra pessoa, ter\u00e1 esse bot\u00e3o `Code`, que quando voc\u00ea clica aparece um link:\n\n<img src=\"https://media.discordapp.net/attachments/812313742192279612/836823564513705994/unknown.png\">\n\n* Voc\u00ea ir\u00e1 copiar esse link e levar ele l\u00e1 pro nosso terminal\n\n* O comando para puxar o projeto para a sua m\u00e1quina \u00e9 o `git clone https://github.com/rafaballerini/GitTutorial.git`\n\nN\u00e3o \u00e9 necess\u00e1rio criar um reposit\u00f3rio antes disso, como fizemos anteriormente com o `git init`. Dessa vez, basta abrir o terminal e clonar o projeto e tudo aparecer\u00e1!\n\n## Pull\n\nE se eu fizer uma altera\u00e7\u00e3o no reposit\u00f3rio, como voc\u00eas podem atualizar na m\u00e1quina de voc\u00eas?\n\n* Basta voc\u00eas executarem o comando `git pull`, ele ir\u00e1 puxar todas as altera\u00e7\u00f5es feitas no reposit\u00f3rio do Github para o seu reposit\u00f3rio local\n\n## Fork\n\nMas Rafa quando eu fiz o clone do seu reposit\u00f3rio ele n\u00e3o apareceu no meu Github.\nExiste a ferramenta `fork`, que \u00e9 bem mais simples para fazer isso\nVoc\u00ea s\u00f3 precisa apertar nesse bot\u00e3o dentro do reposit\u00f3rio e TCHANAM! Ele aparece automaticamente l\u00e1 na sua conta:\n\n<img src=\"https://media.discordapp.net/attachments/831974152667398214/836826687634407434/unknown.png\">\n\n## Pull request\n\nO \u00faltimo conceito que quero ensinar para voc\u00eas \u00e9 o de Pull Request, vamos entender como ele funciona:\n\n* Ap\u00f3s voc\u00ea ter dado um fork no projeto e ele ter ido pra sua conta, voc\u00ea poder\u00e1 alterar o projeto e adicionar as funcionalidades que deseja\n\n* Voc\u00ea pode por exemplo dar um fork no meu reposit\u00f3rio de `Formul\u00e1rio` para adicionar uma valida\u00e7\u00e3o de campos ou qualquer outra coisa que acha v\u00e1lido\n\n* Depois disso, voc\u00ea poder\u00e1 salvar o projeto, dar o `git add .`, `git commit -m \"valida\u00e7\u00e3o de bot\u00f5es\"` e `git push origin main`\n\nQuando voc\u00ea for olhar o seu Github, ver\u00e1 que existe uma mensagem parecida com a seguinte:\n\n<img src=\"https://media.discordapp.net/attachments/831974152667398214/838990983852458035/unknown.png\">\n\nIsso significa que a branch do seu reposit\u00f3rio est\u00e1 1 commit \"na frente\" da branch original\n\nO que voc\u00ea deve perceber agora \u00e9 esse bot\u00e3o que aparece em seguida:\n\n<img src=\"https://media.discordapp.net/attachments/831974152667398214/838991711249235998/unknown.png\">\n\nEle servir\u00e1 para caso voc\u00ea deseje enviar para o dono do reposit\u00f3rio original uma solicita\u00e7\u00e3o de pull, ou seja, fazer com que ele puxe as altera\u00e7\u00f5es que voc\u00ea fez no seu reposit\u00f3rio para o reposit\u00f3rio dele, original\n\nAo clicar nesse bot\u00e3o, voc\u00ea ser\u00e1 direcionado para uma p\u00e1gina que far\u00e1 a avalia\u00e7\u00e3o se esse `pull request` ter\u00e1 conflitos ou n\u00e3o com o c\u00f3digo no reposit\u00f3rio original. Caso n\u00e3o tenha, bast\u00e3o clicar no bot\u00e3o de `Create pull request`\n\n<img src=\"https://media.discordapp.net/attachments/831974152667398214/838992584893399100/unknown.png\">\n\nVoc\u00ea ir\u00e1 colocar um nome intuitivo, que demonstre a funcionalidade adicionada e o ideal \u00e9 que voc\u00ea tamb\u00e9m crie uma boa descri\u00e7\u00e3o do que desenvolveu, n\u00e3o somente explicando o que \u00e9, mas ensinando ao dono do reposit\u00f3rio original a forma como ele poder\u00e1 testar tamb\u00e9m\n\nDepois disso, basta esperar para que o dono da branch original aceite o seu pull request\n\n## Finaliza\u00e7\u00e3o\n\nExistem diversas outras funcionalidades do Git e do Github, por\u00e9m tenho certeza que com tudo isso que voc\u00eas viram hoje voc\u00eas j\u00e1 conseguem desenvolver um projeto de uma forma bem legal\n\nRecomendo sempre voc\u00eas darem uma olhada na [documenta\u00e7\u00e3o do Git](https://git-scm.com/doc), pois qualquer d\u00favida que apare\u00e7a pode ser respondida por l\u00e1 na explica\u00e7\u00e3o\n\n**N\u00e3o esque\u00e7am de deixar o like e se inscrever no [canal do Youtube](https://youtube.com/RafaellaBallerini) \u2764**\n\nAt\u00e9 semana que vem, um beijo!\n",
        "releases": []
    }
}