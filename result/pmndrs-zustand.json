{
    "https://api.github.com/repos/pmndrs/zustand": {
        "forks": 1558,
        "watchers": 49576,
        "stars": 49576,
        "languages": {
            "TypeScript": 232577,
            "JavaScript": 5664
        },
        "commits": [
            "2025-01-21T16:06:48Z",
            "2025-01-16T13:45:58Z",
            "2025-01-15T09:33:23Z",
            "2025-01-15T03:30:34Z",
            "2025-01-14T01:29:48Z",
            "2025-01-12T11:47:51Z",
            "2025-01-11T22:47:07Z",
            "2025-01-08T12:49:47Z",
            "2025-01-07T22:43:04Z",
            "2025-01-07T14:20:43Z",
            "2025-01-07T14:17:07Z",
            "2025-01-07T14:03:11Z",
            "2025-01-07T13:57:18Z",
            "2025-01-07T00:14:08Z",
            "2025-01-06T12:14:27Z",
            "2025-01-06T03:36:20Z",
            "2025-01-04T02:27:41Z",
            "2024-12-31T00:17:25Z",
            "2024-12-29T13:18:02Z",
            "2024-12-28T23:18:09Z",
            "2024-12-20T00:43:51Z",
            "2024-12-19T13:00:49Z",
            "2024-12-16T12:18:55Z",
            "2024-12-16T07:25:30Z",
            "2024-12-16T00:35:34Z",
            "2024-12-14T02:09:42Z",
            "2024-12-13T13:39:28Z",
            "2024-12-13T02:56:49Z",
            "2024-12-12T12:17:54Z",
            "2024-12-10T13:48:39Z"
        ],
        "creation_date": "2019-04-09T09:10:06Z",
        "contributors": 30,
        "topics": [
            "hacktoberfest",
            "hooks",
            "react",
            "react-context",
            "reactjs",
            "redux",
            "state-management"
        ],
        "subscribers": 164,
        "readme": "<p align=\"center\">\n  <img src=\"docs/bear.jpg\" />\n</p>\n\n[![Build Status](https://img.shields.io/github/actions/workflow/status/pmndrs/zustand/lint-and-type.yml?branch=main&style=flat&colorA=000000&colorB=000000)](https://github.com/pmndrs/zustand/actions?query=workflow%3ALint)\n[![Build Size](https://img.shields.io/bundlephobia/minzip/zustand?label=bundle%20size&style=flat&colorA=000000&colorB=000000)](https://bundlephobia.com/result?p=zustand)\n[![Version](https://img.shields.io/npm/v/zustand?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Downloads](https://img.shields.io/npm/dt/zustand.svg?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/zustand)\n[![Discord Shield](https://img.shields.io/discord/740090768164651008?style=flat&colorA=000000&colorB=000000&label=discord&logo=discord&logoColor=ffffff)](https://discord.gg/poimandres)\n\nA small, fast and scalable bearbones state-management solution using simplified flux principles. Has a comfy API based on hooks, isn't boilerplatey or opinionated.\n\nDon't disregard it because it's cute. It has quite the claws, lots of time was spent dealing with common pitfalls, like the dreaded [zombie child problem](https://react-redux.js.org/api/hooks#stale-props-and-zombie-children), [react concurrency](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md), and [context loss](https://github.com/facebook/react/issues/13332) between mixed renderers. It may be the one state-manager in the React space that gets all of these right.\n\nYou can try a live demo [here](https://githubbox.com/pmndrs/zustand/tree/main/examples/demo).\n\n```bash\nnpm install zustand\n```\n\n:warning: This readme is written for JavaScript users. If you are a TypeScript user, be sure to check out our [TypeScript Usage section](#typescript-usage).\n\n## First create a store\n\nYour store is a hook! You can put anything in it: primitives, objects, functions. State has to be updated immutably and the `set` function [merges state](./docs/guides/immutable-state-and-merging.md) to help it.\n\n```jsx\nimport { create } from 'zustand'\n\nconst useBearStore = create((set) => ({\n  bears: 0,\n  increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 }),\n}))\n```\n\n## Then bind your components, and that's it!\n\nUse the hook anywhere, no providers are needed. Select your state and the component will re-render on changes.\n\n```jsx\nfunction BearCounter() {\n  const bears = useBearStore((state) => state.bears)\n  return <h1>{bears} around here ...</h1>\n}\n\nfunction Controls() {\n  const increasePopulation = useBearStore((state) => state.increasePopulation)\n  return <button onClick={increasePopulation}>one up</button>\n}\n```\n\n### Why zustand over redux?\n\n- Simple and un-opinionated\n- Makes hooks the primary means of consuming state\n- Doesn't wrap your app in context providers\n- [Can inform components transiently (without causing render)](#transient-updates-for-often-occurring-state-changes)\n\n### Why zustand over context?\n\n- Less boilerplate\n- Renders components only on changes\n- Centralized, action-based state management\n\n---\n\n# Recipes\n\n## Fetching everything\n\nYou can, but bear in mind that it will cause the component to update on every state change!\n\n```jsx\nconst state = useBearStore()\n```\n\n## Selecting multiple state slices\n\nIt detects changes with strict-equality (old === new) by default, this is efficient for atomic state picks.\n\n```jsx\nconst nuts = useBearStore((state) => state.nuts)\nconst honey = useBearStore((state) => state.honey)\n```\n\nIf you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can use [useShallow](./docs/guides/prevent-rerenders-with-use-shallow.md) to prevent unnecessary rerenders when the selector output does not change according to shallow equal.\n\n```jsx\nimport { create } from 'zustand'\nimport { useShallow } from 'zustand/react/shallow'\n\nconst useBearStore = create((set) => ({\n  nuts: 0,\n  honey: 0,\n  treats: {},\n  // ...\n}))\n\n// Object pick, re-renders the component when either state.nuts or state.honey change\nconst { nuts, honey } = useBearStore(\n  useShallow((state) => ({ nuts: state.nuts, honey: state.honey })),\n)\n\n// Array pick, re-renders the component when either state.nuts or state.honey change\nconst [nuts, honey] = useBearStore(\n  useShallow((state) => [state.nuts, state.honey]),\n)\n\n// Mapped picks, re-renders the component when state.treats changes in order, count or keys\nconst treats = useBearStore(useShallow((state) => Object.keys(state.treats)))\n```\n\nFor more control over re-rendering, you may provide any custom equality function (this example requires the use of [`createWithEqualityFn`](./docs/migrations/migrating-to-v5.md#using-custom-equality-functions-such-as-shallow)).\n\n```jsx\nconst treats = useBearStore(\n  (state) => state.treats,\n  (oldTreats, newTreats) => compare(oldTreats, newTreats),\n)\n```\n\n## Overwriting state\n\nThe `set` function has a second argument, `false` by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions.\n\n```jsx\nimport omit from 'lodash-es/omit'\n\nconst useFishStore = create((set) => ({\n  salmon: 1,\n  tuna: 2,\n  deleteEverything: () => set({}, true), // clears the entire store, actions included\n  deleteTuna: () => set((state) => omit(state, ['tuna']), true),\n}))\n```\n\n## Async actions\n\nJust call `set` when you're ready, zustand doesn't care if your actions are async or not.\n\n```jsx\nconst useFishStore = create((set) => ({\n  fishies: {},\n  fetch: async (pond) => {\n    const response = await fetch(pond)\n    set({ fishies: await response.json() })\n  },\n}))\n```\n\n## Read from state in actions\n\n`set` allows fn-updates `set(state => result)`, but you still have access to state outside of it through `get`.\n\n```jsx\nconst useSoundStore = create((set, get) => ({\n  sound: 'grunt',\n  action: () => {\n    const sound = get().sound\n    ...\n```\n\n## Reading/writing state and reacting to changes outside of components\n\nSometimes you need to access state in a non-reactive way or act upon the store. For these cases, the resulting hook has utility functions attached to its prototype.\n\n:warning: This technique is not recommended for adding state in [React Server Components](https://github.com/reactjs/rfcs/blob/main/text/0188-server-components.md) (typically in Next.js 13 and above). It can lead to unexpected bugs and privacy issues for your users. For more details, see [#2200](https://github.com/pmndrs/zustand/discussions/2200).\n\n```jsx\nconst useDogStore = create(() => ({ paw: true, snout: true, fur: true }))\n\n// Getting non-reactive fresh state\nconst paw = useDogStore.getState().paw\n// Listening to all changes, fires synchronously on every change\nconst unsub1 = useDogStore.subscribe(console.log)\n// Updating state, will trigger listeners\nuseDogStore.setState({ paw: false })\n// Unsubscribe listeners\nunsub1()\n\n// You can of course use the hook as you always would\nfunction Component() {\n  const paw = useDogStore((state) => state.paw)\n  ...\n```\n\n### Using subscribe with selector\n\nIf you need to subscribe with a selector,\n`subscribeWithSelector` middleware will help.\n\nWith this middleware `subscribe` accepts an additional signature:\n\n```ts\nsubscribe(selector, callback, options?: { equalityFn, fireImmediately }): Unsubscribe\n```\n\n```js\nimport { subscribeWithSelector } from 'zustand/middleware'\nconst useDogStore = create(\n  subscribeWithSelector(() => ({ paw: true, snout: true, fur: true })),\n)\n\n// Listening to selected changes, in this case when \"paw\" changes\nconst unsub2 = useDogStore.subscribe((state) => state.paw, console.log)\n// Subscribe also exposes the previous value\nconst unsub3 = useDogStore.subscribe(\n  (state) => state.paw,\n  (paw, previousPaw) => console.log(paw, previousPaw),\n)\n// Subscribe also supports an optional equality function\nconst unsub4 = useDogStore.subscribe(\n  (state) => [state.paw, state.fur],\n  console.log,\n  { equalityFn: shallow },\n)\n// Subscribe and fire immediately\nconst unsub5 = useDogStore.subscribe((state) => state.paw, console.log, {\n  fireImmediately: true,\n})\n```\n\n## Using zustand without React\n\nZustand core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the API utilities.\n\n```jsx\nimport { createStore } from 'zustand/vanilla'\n\nconst store = createStore((set) => ...)\nconst { getState, setState, subscribe, getInitialState } = store\n\nexport default store\n```\n\nYou can use a vanilla store with `useStore` hook available since v4.\n\n```jsx\nimport { useStore } from 'zustand'\nimport { vanillaStore } from './vanillaStore'\n\nconst useBoundStore = (selector) => useStore(vanillaStore, selector)\n```\n\n:warning: Note that middlewares that modify `set` or `get` are not applied to `getState` and `setState`.\n\n## Transient updates (for often occurring state-changes)\n\nThe subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a [drastic](https://codesandbox.io/s/peaceful-johnson-txtws) performance impact when you are allowed to mutate the view directly.\n\n```jsx\nconst useScratchStore = create((set) => ({ scratches: 0, ... }))\n\nconst Component = () => {\n  // Fetch initial state\n  const scratchRef = useRef(useScratchStore.getState().scratches)\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n  useEffect(() => useScratchStore.subscribe(\n    state => (scratchRef.current = state.scratches)\n  ), [])\n  ...\n```\n\n## Sick of reducers and changing nested states? Use Immer!\n\nReducing nested structures is tiresome. Have you tried [immer](https://github.com/mweststrate/immer)?\n\n```jsx\nimport { produce } from 'immer'\n\nconst useLushStore = create((set) => ({\n  lush: { forest: { contains: { a: 'bear' } } },\n  clearForest: () =>\n    set(\n      produce((state) => {\n        state.lush.forest.contains = null\n      }),\n    ),\n}))\n\nconst clearForest = useLushStore((state) => state.clearForest)\nclearForest()\n```\n\n[Alternatively, there are some other solutions.](./docs/guides/updating-state.md#with-immer)\n\n## Persist middleware\n\nYou can persist your store's data using any kind of storage.\n\n```jsx\nimport { create } from 'zustand'\nimport { persist, createJSONStorage } from 'zustand/middleware'\n\nconst useFishStore = create(\n  persist(\n    (set, get) => ({\n      fishes: 0,\n      addAFish: () => set({ fishes: get().fishes + 1 }),\n    }),\n    {\n      name: 'food-storage', // name of the item in the storage (must be unique)\n      storage: createJSONStorage(() => sessionStorage), // (optional) by default, 'localStorage' is used\n    },\n  ),\n)\n```\n\n[See the full documentation for this middleware.](./docs/integrations/persisting-store-data.md)\n\n## Immer middleware\n\nImmer is available as middleware too.\n\n```jsx\nimport { create } from 'zustand'\nimport { immer } from 'zustand/middleware/immer'\n\nconst useBeeStore = create(\n  immer((set) => ({\n    bees: 0,\n    addBees: (by) =>\n      set((state) => {\n        state.bees += by\n      }),\n  })),\n)\n```\n\n## Can't live without redux-like reducers and action types?\n\n```jsx\nconst types = { increase: 'INCREASE', decrease: 'DECREASE' }\n\nconst reducer = (state, { type, by = 1 }) => {\n  switch (type) {\n    case types.increase:\n      return { grumpiness: state.grumpiness + by }\n    case types.decrease:\n      return { grumpiness: state.grumpiness - by }\n  }\n}\n\nconst useGrumpyStore = create((set) => ({\n  grumpiness: 0,\n  dispatch: (args) => set((state) => reducer(state, args)),\n}))\n\nconst dispatch = useGrumpyStore((state) => state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n```\n\nOr, just use our redux-middleware. It wires up your main-reducer, sets the initial state, and adds a dispatch function to the state itself and the vanilla API.\n\n```jsx\nimport { redux } from 'zustand/middleware'\n\nconst useGrumpyStore = create(redux(reducer, initialState))\n```\n\n## Redux devtools\n\nInstall the [Redux DevTools Chrome extension](https://chromewebstore.google.com/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd) to use the devtools middleware.\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst usePlainStore = create(devtools((set) => ...))\n// Usage with a redux store, it will log full action types\nconst useReduxStore = create(devtools(redux(reducer, initialState)))\n```\n\nOne redux devtools connection for multiple stores\n\n```jsx\nimport { devtools } from 'zustand/middleware'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst usePlainStore1 = create(devtools((set) => ..., { name, store: storeName1 }))\nconst usePlainStore2 = create(devtools((set) => ..., { name, store: storeName2 }))\n// Usage with a redux store, it will log full action types\nconst useReduxStore = create(devtools(redux(reducer, initialState)), , { name, store: storeName3 })\nconst useReduxStore = create(devtools(redux(reducer, initialState)), , { name, store: storeName4 })\n```\n\nAssigning different connection names will separate stores in redux devtools. This also helps group different stores into separate redux devtools connections.\n\ndevtools takes the store function as its first argument, optionally you can name the store or configure [serialize](https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md#serialize) options with a second argument.\n\nName store: `devtools(..., {name: \"MyStore\"})`, which will create a separate instance named \"MyStore\" in the devtools.\n\nSerialize options: `devtools(..., { serialize: { options: true } })`.\n\n#### Logging Actions\n\ndevtools will only log actions from each separated store unlike in a typical _combined reducers_ redux store. See an approach to combining stores https://github.com/pmndrs/zustand/issues/163\n\nYou can log a specific action type for each `set` function by passing a third parameter:\n\n```jsx\nconst useBearStore = create(devtools((set) => ({\n  ...\n  eatFish: () => set(\n    (prev) => ({ fishes: prev.fishes > 1 ? prev.fishes - 1 : 0 }),\n    undefined,\n    'bear/eatFish'\n  ),\n  ...\n```\n\nYou can also log the action's type along with its payload:\n\n```jsx\n  ...\n  addFishes: (count) => set(\n    (prev) => ({ fishes: prev.fishes + count }),\n    undefined,\n    { type: 'bear/addFishes', count, }\n  ),\n  ...\n```\n\nIf an action type is not provided, it is defaulted to \"anonymous\". You can customize this default value by providing an `anonymousActionType` parameter:\n\n```jsx\ndevtools(..., { anonymousActionType: 'unknown', ... })\n```\n\nIf you wish to disable devtools (on production for instance). You can customize this setting by providing the `enabled` parameter:\n\n```jsx\ndevtools(..., { enabled: false, ... })\n```\n\n## React context\n\nThe store created with `create` doesn't require context providers. In some cases, you may want to use contexts for dependency injection or if you want to initialize your store with props from a component. Because the normal store is a hook, passing it as a normal context value may violate the rules of hooks.\n\nThe recommended method available since v4 is to use the vanilla store.\n\n```jsx\nimport { createContext, useContext } from 'react'\nimport { createStore, useStore } from 'zustand'\n\nconst store = createStore(...) // vanilla store without hooks\n\nconst StoreContext = createContext()\n\nconst App = () => (\n  <StoreContext.Provider value={store}>\n    ...\n  </StoreContext.Provider>\n)\n\nconst Component = () => {\n  const store = useContext(StoreContext)\n  const slice = useStore(store, selector)\n  ...\n```\n\n## TypeScript Usage\n\nBasic typescript usage doesn't require anything special except for writing `create<State>()(...)` instead of `create(...)`...\n\n```ts\nimport { create } from 'zustand'\nimport { devtools, persist } from 'zustand/middleware'\nimport type {} from '@redux-devtools/extension' // required for devtools typing\n\ninterface BearState {\n  bears: number\n  increase: (by: number) => void\n}\n\nconst useBearStore = create<BearState>()(\n  devtools(\n    persist(\n      (set) => ({\n        bears: 0,\n        increase: (by) => set((state) => ({ bears: state.bears + by })),\n      }),\n      {\n        name: 'bear-storage',\n      },\n    ),\n  ),\n)\n```\n\nA more complete TypeScript guide is [here](docs/guides/typescript.md).\n\n## Best practices\n\n- You may wonder how to organize your code for better maintenance: [Splitting the store into separate slices](./docs/guides/slices-pattern.md).\n- Recommended usage for this unopinionated library: [Flux inspired practice](./docs/guides/flux-inspired-practice.md).\n- [Calling actions outside a React event handler in pre-React 18](./docs/guides/event-handler-in-pre-react-18.md).\n- [Testing](./docs/guides/testing.md)\n- For more, have a look [in the docs folder](./docs/)\n\n## Third-Party Libraries\n\nSome users may want to extend Zustand's feature set which can be done using third-party libraries made by the community. For information regarding third-party libraries with Zustand, visit [the doc](./docs/integrations/third-party-libraries.md).\n\n## Comparison with other libraries\n\n- [Difference between zustand and other state management libraries for React](https://docs.pmnd.rs/zustand/getting-started/comparison)\n",
        "releases": [
            {
                "name": "v5.0.3",
                "date": "2025-01-07T14:22:57Z"
            },
            {
                "name": "v4.5.6",
                "date": "2025-01-07T13:01:07Z"
            },
            {
                "name": "v5.0.2",
                "date": "2024-12-04T15:10:28Z"
            },
            {
                "name": "v5.0.1",
                "date": "2024-10-30T12:05:02Z"
            },
            {
                "name": "v5.0.0",
                "date": "2024-10-14T14:17:49Z"
            },
            {
                "name": "v5.0.0-rc.2",
                "date": "2024-09-15T03:17:18Z"
            },
            {
                "name": "v5.0.0-rc.1",
                "date": "2024-08-27T01:23:19Z"
            },
            {
                "name": "v5.0.0-rc.0",
                "date": "2024-08-16T01:15:23Z"
            },
            {
                "name": "v4.5.5",
                "date": "2024-08-15T02:31:47Z"
            },
            {
                "name": "v4.5.4",
                "date": "2024-06-26T12:36:03Z"
            },
            {
                "name": "v4.5.3",
                "date": "2024-06-26T03:45:08Z"
            },
            {
                "name": "v4.5.2",
                "date": "2024-03-02T02:45:46Z"
            },
            {
                "name": "v4.5.1",
                "date": "2024-02-17T02:13:22Z"
            },
            {
                "name": "v4.5.0",
                "date": "2024-01-20T01:32:47Z"
            },
            {
                "name": "v4.4.7",
                "date": "2023-11-28T00:30:43Z"
            },
            {
                "name": "v4.4.6",
                "date": "2023-11-03T00:02:33Z"
            },
            {
                "name": "v4.4.5",
                "date": "2023-10-31T14:30:32Z"
            },
            {
                "name": "v4.4.4",
                "date": "2023-10-21T14:05:41Z"
            },
            {
                "name": "v4.4.3",
                "date": "2023-10-05T14:27:25Z"
            },
            {
                "name": "v4.4.2",
                "date": "2023-10-02T14:14:00Z"
            },
            {
                "name": "v4.4.1",
                "date": "2023-08-06T23:46:27Z"
            },
            {
                "name": "v4.4.0",
                "date": "2023-08-01T02:08:05Z"
            },
            {
                "name": "v4.3.9",
                "date": "2023-07-04T14:43:20Z"
            },
            {
                "name": "v4.3.8",
                "date": "2023-05-04T07:51:12Z"
            },
            {
                "name": "v4.3.7",
                "date": "2023-03-31T15:16:39Z"
            },
            {
                "name": "v4.3.6",
                "date": "2023-03-06T05:20:10Z"
            },
            {
                "name": "v4.3.5",
                "date": "2023-02-28T11:15:55Z"
            },
            {
                "name": "v4.3.4",
                "date": "2023-02-27T03:03:10Z"
            },
            {
                "name": "v4.3.3",
                "date": "2023-02-10T12:33:27Z"
            },
            {
                "name": "v4.3.2",
                "date": "2023-01-14T00:05:23Z"
            },
            {
                "name": "v4.3.1",
                "date": "2023-01-10T11:15:36Z"
            },
            {
                "name": "v4.3.0",
                "date": "2023-01-10T10:45:28Z"
            },
            {
                "name": "v4.2.0",
                "date": "2023-01-01T01:15:29Z"
            },
            {
                "name": "v4.1.5",
                "date": "2022-12-05T13:22:28Z"
            },
            {
                "name": "v4.1.4",
                "date": "2022-10-31T12:52:23Z"
            },
            {
                "name": "v4.1.3",
                "date": "2022-10-23T01:30:59Z"
            },
            {
                "name": "v4.1.2",
                "date": "2022-10-09T05:48:24Z"
            },
            {
                "name": "v4.1.1",
                "date": "2022-08-22T02:35:01Z"
            },
            {
                "name": "v4.1.0",
                "date": "2022-08-18T23:30:37Z"
            },
            {
                "name": "v4.0.0",
                "date": "2022-07-26T01:31:27Z"
            },
            {
                "name": "v4.0.0-rc.4",
                "date": "2022-07-20T23:22:09Z"
            },
            {
                "name": "v4.0.0-rc.3",
                "date": "2022-07-19T23:59:46Z"
            },
            {
                "name": "v4.0.0-rc.2",
                "date": "2022-07-17T15:00:31Z"
            },
            {
                "name": "v4.0.0-rc.1",
                "date": "2022-04-29T14:33:08Z"
            },
            {
                "name": "v4.0.0-rc.0",
                "date": "2022-04-18T02:12:21Z"
            },
            {
                "name": "v3.7.2",
                "date": "2022-04-07T14:05:49Z"
            },
            {
                "name": "v3.7.1",
                "date": "2022-02-28T02:45:18Z"
            },
            {
                "name": "v3.7.0",
                "date": "2022-02-10T23:53:04Z"
            },
            {
                "name": "v3.6.9",
                "date": "2022-01-10T14:18:02Z"
            },
            {
                "name": "v3.6.8",
                "date": "2021-12-24T07:35:50Z"
            },
            {
                "name": "v3.6.7",
                "date": "2021-12-07T07:35:35Z"
            },
            {
                "name": "v3.6.6",
                "date": "2021-12-03T13:28:14Z"
            },
            {
                "name": "v3.6.5",
                "date": "2021-11-09T14:08:23Z"
            },
            {
                "name": "v3.6.4",
                "date": "2021-11-03T22:50:48Z"
            },
            {
                "name": "v3.6.3",
                "date": "2021-11-02T12:23:47Z"
            },
            {
                "name": "v3.6.2",
                "date": "2021-10-30T00:52:37Z"
            },
            {
                "name": "v3.6.1",
                "date": "2021-10-26T15:44:42Z"
            },
            {
                "name": "v3.6.0",
                "date": "2021-10-21T14:09:21Z"
            },
            {
                "name": "v3.5.14",
                "date": "2021-10-19T11:43:43Z"
            },
            {
                "name": "v3.5.13",
                "date": "2021-10-07T12:54:10Z"
            },
            {
                "name": "v3.5.12",
                "date": "2021-10-01T13:34:08Z"
            },
            {
                "name": "v3.5.11",
                "date": "2021-09-28T16:12:22Z"
            },
            {
                "name": "v3.5.10",
                "date": "2021-08-26T14:24:56Z"
            },
            {
                "name": "v3.5.9",
                "date": "2021-08-17T12:06:25Z"
            },
            {
                "name": "v3.5.8",
                "date": "2021-08-13T12:03:09Z"
            },
            {
                "name": "v3.5.7",
                "date": "2021-07-13T23:49:05Z"
            },
            {
                "name": "v3.5.6",
                "date": "2021-07-09T13:40:32Z"
            },
            {
                "name": "v3.5.5",
                "date": "2021-06-29T13:12:11Z"
            },
            {
                "name": "v3.5.4",
                "date": "2021-06-22T14:26:22Z"
            },
            {
                "name": "v3.5.3",
                "date": "2021-06-22T12:26:19Z"
            },
            {
                "name": "v3.5.2",
                "date": "2021-06-05T09:29:29Z"
            },
            {
                "name": "v3.5.1",
                "date": "2021-05-08T13:24:04Z"
            },
            {
                "name": "v3.5.0",
                "date": "2021-05-05T15:33:13Z"
            },
            {
                "name": "v3.4.2",
                "date": "2021-04-27T00:16:24Z"
            },
            {
                "name": "v3.4.1",
                "date": "2021-04-08T01:29:06Z"
            },
            {
                "name": "v3.4.0",
                "date": "2021-04-06T15:40:19Z"
            },
            {
                "name": "v3.3.3",
                "date": "2021-02-28T01:50:51Z"
            },
            {
                "name": "v3.3.2",
                "date": "2021-02-16T22:22:20Z"
            },
            {
                "name": "v3.3.1",
                "date": "2021-01-10T12:21:23Z"
            },
            {
                "name": "v3.3.0",
                "date": "2021-01-08T10:36:22Z"
            },
            {
                "name": "v3.2.0",
                "date": "2020-11-16T14:37:51Z"
            },
            {
                "name": "v3.1.4",
                "date": "2020-11-08T05:52:37Z"
            },
            {
                "name": "v3.1.3",
                "date": "2020-09-23T23:37:28Z"
            },
            {
                "name": "v3.1.2",
                "date": "2020-09-12T11:59:18Z"
            },
            {
                "name": "v3.1.1",
                "date": "2020-09-08T13:14:48Z"
            },
            {
                "name": "v3.1.0",
                "date": "2020-09-03T13:16:41Z"
            },
            {
                "name": "v3.0.3",
                "date": "2020-10-14T14:41:04Z"
            },
            {
                "name": "v3.0.2",
                "date": "2020-10-14T14:35:24Z"
            },
            {
                "name": "Zustand 3.x",
                "date": "2020-08-17T20:04:43Z"
            },
            {
                "name": "v2.2.0",
                "date": "2019-10-24T14:15:30Z"
            },
            {
                "name": "v2.1.0",
                "date": "2019-10-11T16:49:57Z"
            },
            {
                "name": "v2.0.0",
                "date": "2019-10-11T16:47:54Z"
            }
        ]
    }
}