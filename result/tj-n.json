{
    "https://api.github.com/repos/tj/n": {
        "forks": 747,
        "watchers": 19001,
        "stars": 19001,
        "languages": {
            "Shell": 83109,
            "Makefile": 155
        },
        "commits": [
            "2024-11-08T23:15:23Z",
            "2024-11-08T23:08:54Z",
            "2024-11-08T22:57:34Z",
            "2024-11-08T22:43:28Z",
            "2024-11-08T22:42:51Z",
            "2024-10-28T01:58:34Z",
            "2024-10-28T01:54:27Z",
            "2024-10-28T01:12:13Z",
            "2024-10-27T21:05:44Z",
            "2024-10-19T22:12:02Z",
            "2024-10-19T22:11:52Z",
            "2024-10-19T22:05:41Z",
            "2024-10-19T22:05:12Z",
            "2024-10-03T22:07:21Z",
            "2024-09-06T02:31:49Z",
            "2024-09-06T02:29:49Z",
            "2024-09-06T02:28:25Z",
            "2024-09-06T02:07:51Z",
            "2024-08-16T04:37:02Z",
            "2024-08-16T04:32:28Z",
            "2024-08-16T04:17:59Z",
            "2024-08-16T04:13:52Z",
            "2024-06-09T03:31:52Z",
            "2024-05-29T20:50:34Z",
            "2024-05-11T04:18:53Z",
            "2024-05-09T07:46:14Z",
            "2024-04-21T00:35:24Z",
            "2024-04-21T00:34:04Z",
            "2024-04-21T00:33:23Z",
            "2024-04-21T00:30:05Z"
        ],
        "creation_date": "2011-01-05T14:53:19Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 205,
        "readme": "# `n` \u2013 Interactively Manage Your Node.js Versions\n\n[![npm](https://img.shields.io/npm/dt/n.svg?style=flat-square)](https://www.npmjs.com/package/n)\n[![npm](https://img.shields.io/npm/dm/n.svg?style=flat-square)](https://www.npmjs.com/package/n)\n[![npm](https://img.shields.io/npm/v/n.svg?style=flat-square)](https://www.npmjs.com/package/n)\n[![npm](https://img.shields.io/npm/l/n.svg?style=flat-square)](https://www.npmjs.com/package/n)\n\nNode.js version management: no subshells, no profile setup, no convoluted API, just **simple**.\n\n![usage animation](https://nimit.io/images/n/n.gif)\n\n- [`n` \u2013 Interactively Manage Your Node.js Versions](#n--interactively-manage-your-nodejs-versions)\n    - [Supported Platforms](#supported-platforms)\n    - [Installation](#installation)\n        - [Third Party Installers](#third-party-installers)\n        - [Replacing a previous node install](#replacing-a-previous-node-install)\n    - [Installing Node.js Versions](#installing-nodejs-versions)\n    - [Specifying Node.js Versions](#specifying-nodejs-versions)\n    - [Removing Versions](#removing-versions)\n    - [Using Downloaded Node.js Versions Without Reinstalling](#using-downloaded-nodejs-versions-without-reinstalling)\n    - [Preserving npm](#preserving-npm)\n    - [Miscellaneous](#miscellaneous)\n    - [Custom Mirror](#custom-mirror)\n    - [Custom Architecture](#custom-architecture)\n    - [Optional Environment Variables](#optional-environment-variables)\n    - [How It Works](#how-it-works)\n\n## Supported Platforms\n\n`n` is supported on macOS, Linux, including with Windows Subsystem for Linux, and various other unix-like systems.\nIt is written as a BASH script but does not require you to use BASH as your command shell.\n\n`n` does not work in native shells on Microsoft Windows (like PowerShell), or Git for Windows BASH, or with the Cygwin DLL.\n\n## Installation\n\nIf you already have Node.js installed, an easy way to install `n` is using `npm`:\n\n    npm install -g n\n\nThe default root location used when running `n` is `/usr/local` where a normal user does not have write permission. You may strike the same sort of permission error when using npm to install global modules, like the above command. You have three main options:\n\n1) change the ownership of the relevant directories to yourself (see below)\n2) tell `n` to use a custom location where you do have write permissions (see `N_PREFIX`)\n3) put `sudo` in front of the command to run it as super user\n\n`n` caches Node.js versions in subdirectory `n/versions`. The _active_ Node.js version is installed in subdirectories `bin`, `include`, `lib`, and `share`.\n\nTo take ownership of the system directories (option 1):\n\n    # make cache folder (if missing) and take ownership\n    sudo mkdir -p /usr/local/n\n    sudo chown -R $(whoami) /usr/local/n\n    # make sure the required folders exist (safe to execute even if they already exist)\n    sudo mkdir -p /usr/local/bin /usr/local/lib /usr/local/include /usr/local/share\n    # take ownership of Node.js install destination folders\n    sudo chown -R $(whoami) /usr/local/bin /usr/local/lib /usr/local/include /usr/local/share\n\n-----\n\nIf `npm` is not yet available, one way to bootstrap an install is to download and run `n` directly. To install the `lts` version of Node.js:\n\n    curl -fsSL https://raw.githubusercontent.com/tj/n/master/bin/n | bash -s install lts\n    # If you want n installed, you can use npm now.\n    npm install -g n\n\nIf you don't need support for updates to `n` itself you can just save the download:\n\n    curl -fsSL -o /usr/local/bin/n https://raw.githubusercontent.com/tj/n/master/bin/n \n    chmod 0755 /usr/local/bin/n\n    n install lts\n\n### Third Party Installers\n\nOn macOS with [Homebrew](https://brew.sh/) you can install the [n formula](https://github.com/Homebrew/homebrew-core/blob/master/Formula/n/n.rb).\n\n    brew install n\n\nOr on macOS with [MacPorts](https://www.macports.org/) you can install the [n port](https://ports.macports.org/port/n/summary):\n\n    port install n\n\nOn Linux and macOS, [n-install](https://github.com/mklement0/n-install) allows installation directly from GitHub; for instance:\n\n    curl -L https://bit.ly/n-install | bash\n\nn-install sets both `PREFIX` and `N_PREFIX` to `$HOME/n`, installs `n` to `$HOME/n/bin`, modifies the initialization files of supported shells to export `N_PREFIX` and add `$HOME/n/bin` to the `PATH`, and installs the latest LTS Node.js version.\n\nAs a result, both `n` itself and all Node.js versions it manages are hosted inside a single, optionally configurable directory, which you can later remove with the included `n-uninstall` script. `n-update` updates `n` itself to the latest version. See the [n-install repo](https://github.com/mklement0/n-install) for more details.\n\n### Replacing a previous node install\n\nChanging from a previous Node.js installed to a different location may involve a few extra steps. See docs for [changing node location](./docs/changing-node-location.md) for a walk-through example of switching from using Homebrew to using `n` to manage Node.js.\n\nYou have a problem with multiple versions if after installing node you see the \"installed\" and \"active\" locations are different:\n\n```console\n% n lts\n     copying : node/20.12.2\n   installed : v20.12.2 to /usr/local/bin/node\n      active : v21.7.3 at /opt/homebrew/bin/node\n```\n\n## Installing Node.js Versions\n\nSimply execute `n <version>` to download and install a version of Node.js. If `<version>` has already been downloaded, `n` will install from its cache.\n\n    n 10.16.0\n    n lts\n\nExecute `n` on its own to view your downloaded versions, and install the selected version.\n\n    $ n\n\n      node/4.9.1\n    \u03bf node/8.11.3\n      node/10.15.0\n\n    Use up/down arrow keys to select a version, return key to install, d to delete, q to quit\n\n(You can also use <kbd>j</kbd> and <kbd>k</kbd> to select next or previous version instead of using arrows, or <kbd>ctrl+n</kbd> and <kbd>ctrl+p</kbd>.)\n\nIf the active node version does not change after install, try opening a new shell in case seeing a stale version.\n\n## Specifying Node.js Versions\n\nThere are a variety of ways of specifying the target Node.js version for `n` commands. Most commands use the latest matching version, and  `n ls-remote` lists multiple matching versions.\n\nNumeric version numbers can be complete or incomplete, with an optional leading `v`.\n\n- `4.9.1`\n- `8`: 8.x.y versions\n- `v6.1`: 6.1.x versions\n\nThere are labels for two especially useful versions:\n\n- `lts`: newest Long Term Support official release\n- `latest`, `current`: newest official release\n  \nThere is an `auto` label to read the target version from a file in the current directory, or any parent directory. `n` looks for in order:\n\n- `.n-node-version`: version on single line. Custom to `n`.\n- `.node-version`: version on single line. Used by multiple tools: [node-version-usage](https://github.com/shadowspawn/node-version-usage)\n- `.nvmrc`: version on single line. Used by `nvm`.\n- if no version file found, look for `engine` as below.\n\nThe `engine` label looks for a `package.json` file and reads the `engines` field to determine compatible Node.js. Requires an installed version of `jq` or `node`, and uses `npx semver` to resolve complex ranges.\n\nThere is support for the named release streams:\n\n- `argon`, `boron`, `carbon`: codenames for LTS release streams\n\nThese Node.js support aliases may be used, although simply resolve to the latest matching version:\n\n- `active`, `lts_active`, `lts_latest`, `lts`, `current`, `supported`\n\nThe last version form is for specifying [other releases](https://nodejs.org/download) available using the name of the remote download folder optionally followed by the complete or incomplete version.\n\n- `nightly`\n- `test/v11.0.0-test20180528`\n- `rc/10`\n\n## Removing Versions\n\nRemove some cached versions:\n\n    n rm 0.9.4 v0.10.0\n\nRemoving all cached versions except the installed version:\n\n    n prune\n\nRemove the installed Node.js (does not affect the cached versions). This can be useful\nto revert to the system version of node (if in a different location), or if you no longer\nwish to use node and npm, or are switching to a different way of managing them.\n\n    n uninstall\n\n## Using Downloaded Node.js Versions Without Reinstalling\n\nThere are three commands for working directly with your downloaded versions of Node.js, without reinstalling.\n\nYou can show the path to the downloaded `node` version:\n\n    $ n which 6.14.3\n    /usr/local/n/versions/6.14.3/bin/node\n\nOr run a downloaded `node` version with the `n run` command:\n\n    n run 8.11.3 --debug some.js\n\nOr execute a command with `PATH` modified so `node` and `npm` will be from the downloaded Node.js version.\n(NB: `npm` run this way will be using global node_modules from the target node version folder.)\n\n    n exec 10 my-script --fast test\n    n exec lts zsh\n\n## Preserving npm\n\nA Node.js install normally also includes `npm`,  `npx`, and `corepack`, but you may wish to preserve your current (especially newer) versions using `--preserve`:\n\n    $ npm install -g npm@latest\n    ...\n    $ npm --version\n    6.13.7\n    # Node.js 8.17.0 includes (older) npm 6.13.4\n    $ n -p 8\n       installed : v8.17.0\n    $ npm --version\n    6.13.7\n\nYou can make this the default by setting the environment variable to a non-empty string. There are separate environment variables for `npm` and `corepack`:\n\n    export N_PRESERVE_NPM=1\n    export N_PRESERVE_COREPACK=1\n\nYou can be explicit to get the desired behaviour whatever the environment variables:\n\n    n --preserve nightly\n    n --no-preserve latest\n\n## Miscellaneous\n\nCommand line help can be obtained from `n --help`.\n\nList matching remote versions available for download:\n\n    n ls-remote lts\n    n ls-remote latest\n    n lsr 10\n    n --all lsr\n\nList downloaded versions in cache:\n\n    n ls\n\nDownload version into cache:\n\n    n download 22\n\nUse `n` to access cached versions (already downloaded) without internet available.\n\n    n --offline 12\n\nRemove the cache version after installing using `--cleanup`. This is particularly useful for a one-shot install, like in a docker container.\n\n    curl -fsSL https://raw.githubusercontent.com/tj/n/master/bin/n | bash -s install --cleanup lts\n\nNormally `n run`, `n exec`, and `n which` will fail if the target version is not already in the cache. You can add `--download` to use the cache if available or download if required:\n\n    n --download run 18.3 my-script.js\n\nDisplay diagnostics to help resolve problems:\n\n    n doctor\n\n## Custom Mirror\n\nIf you would like to use a different Node.js mirror which has the same layout as the default <https://nodejs.org/dist/>, you can define `N_NODE_MIRROR`.\n\nOne example is for users in China who can define:\n\n    export N_NODE_MIRROR=https://npmmirror.com/mirrors/node\n\nAnother example is the Node.js [unofficial-builds project](https://github.com/nodejs/unofficial-builds/) which has downloads for some platforms not made available officially, such as armv6l (Raspberry Pi) and 32-bit x86.\n\n    export N_NODE_MIRROR=https://unofficial-builds.nodejs.org/download/release\n\nYou may need to specify the architecture explicitly if not autodetected by `n`, such as using `musl` `libc` on Alpine:\n\n    export N_NODE_MIRROR=https://unofficial-builds.nodejs.org/download/release\n    apk add bash curl libstdc++\n    n --arch x64-musl install lts\n\nIf the custom mirror requires authentication you can add the [url-encoded](https://urlencode.org) username and password into the URL. e.g.\n\n    export N_NODE_MIRROR=https://encoded-username:encoded-password@host:port/path\n\nThere is also `N_NODE_DOWNLOAD_MIRROR` for a different mirror with same layout as the default <https://nodejs.org/download>.\n\n## Custom Architecture\n\nBy default `n` picks the binaries matching your system architecture. For example, on a 64 bit system `n` will download 64 bit binaries.\n\nOn a Mac with Apple silicon:\n\n- for Node.js 16 and higher, `n` defaults to arm64 binaries which run natively\n- for older versions of Node.js, `n` defaults to x64 binaries which run in Rosetta 2\n\nYou can override the default architecture by using the `-a` or `--arch` option.\n\ne.g. reinstall latest version of Node.js with x64 binaries:\n\n    n rm current\n    n --arch x64 current\n\n## Optional Environment Variables\n\nThe `n` command downloads and installs to `/usr/local` by default, but you may override this location by defining `N_PREFIX`.\nTo change the location to say `$HOME/.n`, add lines like the following to your shell initialization file:\n\n    export N_PREFIX=$HOME/.n\n    export PATH=$N_PREFIX/bin:$PATH\n\nIf you want to store the downloads under a different location, use `N_CACHE_PREFIX`. This does _not_ affect where the active\nnode version is installed.\n\n`n` defaults to using xz compressed Node.js tarballs for the download if it is likely tar on the system supports xz decompression.\nYou can override the automatic choice by setting an environment variable to zero or non-zero:\n\n    export N_USE_XZ=0 # to disable\n    export N_USE_XZ=1 # to enable\n\nYou can be explicit to get the desired behaviour whatever the environment variable:\n\n    n install --use-xz nightly\n    n install --no-use-xz latest\n\nIn brief:\n\n- `N_NODE_MIRROR`: See [Custom source](#custom-source)\n- `N_NODE_DOWNLOAD_MIRROR`: See [Custom source](#custom-source)\n- support for [NO_COLOR](https://no-color.org) and [CLICOLOR=0](https://bixense.com/clicolors) for controlling use of ANSI color codes\n- `N_MAX_REMOTE_MATCHES` to change the default `ls-remote` maximum of 20 matching versions\n- `N_PRESERVE_NPM`: See [Preserving npm](#preserving-npm)\n- `N_PRESERVE_COREPACK`: See [Preserving npm](#preserving-npm)\n\n## How It Works\n\n`n` downloads a prebuilt Node.js package and installs to a single prefix (e.g. `/usr/local`). This overwrites the previous version. The `bin` folder in this location should be in your `PATH` (e.g. `/usr/local/bin`).\n\nThe downloads are kept in a cache folder to be used for reinstalls. The downloads are also available for limited use using `n which` and `n run` and `n exec`.\n\nThe global `npm` packages are not changed by the install, with the\nexception of `npm` itself which is part of the Node.js install.\n",
        "releases": [
            {
                "name": "10.1.0",
                "date": "2024-11-08T23:17:15Z"
            },
            {
                "name": "10.0.0",
                "date": "2024-09-06T02:33:02Z"
            },
            {
                "name": "9.2.3",
                "date": "2024-04-21T00:36:26Z"
            },
            {
                "name": "9.2.1",
                "date": "2024-02-25T03:39:53Z"
            },
            {
                "name": "9.2.0",
                "date": "2023-10-15T04:36:01Z"
            },
            {
                "name": "9.1.0",
                "date": "2023-04-15T05:54:33Z"
            },
            {
                "name": "9.0.1",
                "date": "2022-11-04T06:02:05Z"
            },
            {
                "name": "9.0.0",
                "date": "2022-07-16T04:17:48Z"
            },
            {
                "name": "8.2.0",
                "date": "2022-04-18T03:33:37Z"
            },
            {
                "name": "8.1.0",
                "date": "2022-03-18T05:20:20Z"
            },
            {
                "name": "8.0.2",
                "date": "2022-01-08T21:08:46Z"
            },
            {
                "name": "8.0.1",
                "date": "2021-12-04T00:51:34Z"
            },
            {
                "name": "8.0.0",
                "date": "2021-10-22T21:22:34Z"
            },
            {
                "name": "7.5.0",
                "date": "2021-09-26T03:12:23Z"
            },
            {
                "name": "7.4.1",
                "date": "2021-09-10T21:54:55Z"
            },
            {
                "name": "7.4.0",
                "date": "2021-09-10T09:51:42Z"
            },
            {
                "name": "7.3.1",
                "date": "2021-07-24T21:58:25Z"
            },
            {
                "name": "7.3.0",
                "date": "2021-06-06T08:01:11Z"
            },
            {
                "name": "7.2.2",
                "date": "2021-04-25T01:09:47Z"
            },
            {
                "name": "7.2.1",
                "date": "2021-04-19T08:32:08Z"
            },
            {
                "name": "7.2.0 [YANKED]",
                "date": "2021-04-19T08:46:56Z"
            },
            {
                "name": "7.1.0",
                "date": "2021-03-12T07:14:25Z"
            },
            {
                "name": "7.0.2",
                "date": "2021-02-26T23:45:06Z"
            },
            {
                "name": "7.0.1",
                "date": "2021-01-30T03:57:02Z"
            },
            {
                "name": "7.0.0",
                "date": "2020-12-20T04:26:14Z"
            },
            {
                "name": "6.8.0",
                "date": "2020-12-12T06:37:39Z"
            },
            {
                "name": "6.7.1",
                "date": "2020-11-25T09:13:56Z"
            },
            {
                "name": "6.7.0",
                "date": "2020-07-25T10:08:17Z"
            },
            {
                "name": "6.6.0",
                "date": "2020-07-04T03:31:59Z"
            },
            {
                "name": "6.5.1",
                "date": "2020-04-11T05:51:15Z"
            },
            {
                "name": "6.5.0 [YANKED]",
                "date": "2020-04-11T02:21:02Z"
            },
            {
                "name": "6.4.0",
                "date": "2020-03-10T08:04:29Z"
            },
            {
                "name": "6.3.1",
                "date": "2020-02-25T08:31:52Z"
            },
            {
                "name": "6.3.0",
                "date": "2020-02-24T08:56:28Z"
            },
            {
                "name": "6.2.0",
                "date": "2020-01-29T09:11:11Z"
            },
            {
                "name": "6.1.3",
                "date": "2019-11-23T05:01:36Z"
            },
            {
                "name": "6.1.2",
                "date": "2019-11-16T03:45:35Z"
            },
            {
                "name": "6.1.1",
                "date": "2019-11-16T03:44:37Z"
            },
            {
                "name": "6.1.0",
                "date": "2019-10-25T07:50:42Z"
            },
            {
                "name": "6.0.1",
                "date": "2019-08-20T08:55:35Z"
            },
            {
                "name": "6.0.0",
                "date": "2019-08-16T09:21:23Z"
            },
            {
                "name": "6.0.0-1 Prerelease",
                "date": "2019-08-12T09:45:56Z"
            },
            {
                "name": "6.0.0-0 Prerelease",
                "date": "2019-08-03T09:41:54Z"
            },
            {
                "name": "5.0.2",
                "date": "2019-08-02T09:39:02Z"
            },
            {
                "name": "5.0.1",
                "date": "2019-07-20T01:48:04Z"
            },
            {
                "name": "5.0.0",
                "date": "2019-07-20T01:28:39Z"
            },
            {
                "name": "5.0.0-next.0",
                "date": "2019-06-03T08:51:22Z"
            },
            {
                "name": "4.1.0",
                "date": "2019-05-10T08:44:19Z"
            },
            {
                "name": "4.0.0",
                "date": "2019-05-04T22:08:10Z"
            },
            {
                "name": "3.0.2",
                "date": "2019-04-07T04:58:14Z"
            },
            {
                "name": "3.0.1",
                "date": "2019-04-05T07:42:48Z"
            },
            {
                "name": "3.0.0",
                "date": "2019-03-29T11:12:13Z"
            },
            {
                "name": "Version 2.1.11",
                "date": "2018-05-19T17:40:32Z"
            },
            {
                "name": "Version 2.1.10",
                "date": "2018-05-07T20:07:58Z"
            },
            {
                "name": "Version 2.1.0 (noble)",
                "date": "2015-12-29T19:32:02Z"
            },
            {
                "name": "v2.0.2",
                "date": "2015-08-15T18:52:04Z"
            },
            {
                "name": "v1.4.2",
                "date": "2015-08-15T18:50:47Z"
            },
            {
                "name": "v2.0.1",
                "date": "2015-07-22T19:00:29Z"
            },
            {
                "name": "v1.4.1",
                "date": "2015-07-22T18:58:50Z"
            },
            {
                "name": "",
                "date": "2015-02-12T20:37:13Z"
            }
        ]
    }
}