{
    "https://api.github.com/repos/Juanpe/SkeletonView": {
        "forks": 1119,
        "watchers": 12678,
        "stars": 12678,
        "languages": {
            "Swift": 133540,
            "Ruby": 614
        },
        "commits": [
            "2024-04-18T11:15:17Z",
            "2024-04-18T11:14:51Z",
            "2024-01-15T09:41:52Z",
            "2024-01-15T09:35:50Z",
            "2024-01-15T09:30:38Z",
            "2024-01-15T09:21:29Z",
            "2022-10-20T11:01:43Z",
            "2022-10-20T10:59:00Z",
            "2022-10-20T10:55:18Z",
            "2022-10-04T08:16:34Z",
            "2022-09-29T09:09:01Z",
            "2022-09-28T15:34:42Z",
            "2022-09-05T07:27:37Z",
            "2022-09-05T07:26:20Z",
            "2022-08-29T06:48:23Z",
            "2022-08-29T06:40:38Z",
            "2022-08-16T08:36:34Z",
            "2022-08-16T08:35:13Z",
            "2022-08-11T19:00:45Z",
            "2022-08-11T18:16:10Z",
            "2022-08-11T18:13:19Z",
            "2022-08-11T16:33:23Z",
            "2022-08-11T16:32:08Z",
            "2022-08-11T16:15:54Z",
            "2022-08-11T16:14:28Z",
            "2022-06-01T06:35:50Z",
            "2022-06-01T06:32:58Z",
            "2022-06-01T06:31:25Z",
            "2022-01-18T14:21:59Z",
            "2022-01-18T14:20:32Z"
        ],
        "creation_date": "2017-11-07T19:05:28Z",
        "contributors": 30,
        "topics": [
            "animation",
            "carthage",
            "facebook",
            "facebook-animation",
            "gradients",
            "hacktoberfest",
            "ios",
            "ios-animation",
            "ios-uiview",
            "loading",
            "loading-animation",
            "loading-animations",
            "placeholder",
            "redacted",
            "shimmer",
            "skeleton",
            "swift",
            "swift-package-manager",
            "uicollectionview",
            "uitableview"
        ],
        "subscribers": 126,
        "readme": "![](Assets/header2.jpg)\n\n<p align=\"center\">\n    <a href=\"https://github.com/Juanpe/SkeletonView/actions?query=workflow%3ACI\">\n      <img src=\"https://github.com/Juanpe/SkeletonView/workflows/CI/badge.svg\">\n    </a>\n    <a href=\"https://codebeat.co/projects/github-com-juanpe-skeletonview-main\"><img alt=\"codebeat badge\" src=\"https://codebeat.co/badges/1f37bbab-a1c8-4a4a-94d7-f21740d461e9\" /></a>\n    <a href=\"https://cocoapods.org/pods/SkeletonView\"><img src=\"https://img.shields.io/cocoapods/v/SkeletonView.svg?style=flat\"></a>\n    <a href=\"https://github.com/Carthage/Carthage/\"><img src=\"https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat\"></a>\n    <a href=\"https://swift.org/package-manager/\"><img src=\"https://img.shields.io/badge/SPM-supported-Green.svg?style=flat\"></a>\n    <img src=\"https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2FJuanpe%2FSkeletonView%2Fbadge%3Ftype%3Dplatforms\"/>\n    <a href=\"https://badge.bow-swift.io/recipe?name=SkeletonView&description=An%20elegant%20way%20to%20show%20users%20that%20something%20is%20happening%20and%20also%20prepare%20them%20to%20which%20contents%20he%20is%20waiting&url=https://github.com/juanpe/skeletonview&owner=Juanpe&avatar=https://avatars0.githubusercontent.com/u/1409041?v=4&tag=1.20.0\"><img src=\"https://raw.githubusercontent.com/bow-swift/bow-art/master/badges/nef-playgrounds-badge.svg\" alt=\"SkeletonView Playground\" style=\"height:20px\"></a>   \n</p>\n\n<p align=\"center\">\n    <a href=\"#-features\">Features</a>\n  \u2022 <a href=\"#-guides\">Guides</a>\n  \u2022 <a href=\"#-installation\">Installation</a>\n  \u2022 <a href=\"#-usage\">Usage</a>\n  \u2022 <a href=\"#-miscellaneous\">Miscellaneous</a>\n  \u2022 <a href=\"#\ufe0f-contributing\">Contributing</a>\n</p>\n\n**\ud83c\udf0e README is available in other languages:  [\ud83c\uddea\ud83c\uddf8](Translations/README_es.md) . [\ud83c\udde8\ud83c\uddf3](Translations/README_zh.md) . [\ud83c\udde7\ud83c\uddf7](Translations/README_pt-br.md) . [\ud83c\uddf0\ud83c\uddf7](Translations/README_ko.md) . [\ud83c\uddeb\ud83c\uddf7](Translations/README_fr.md) . [\ud83c\udde9\ud83c\uddea](Translations/README_de.md)**\n\nToday almost all apps have async processes, such as API requests, long running processes, etc. While the processes are working, usually developers place a loading view to show users that something is going on.\n\n**SkeletonView** has been conceived to address this need, an elegant way to show users that something is happening and also prepare them for which contents are waiting.\n\nEnjoy it! \ud83d\ude42\n\n\n##\n- [\ud83c\udf1f Features](#-features)\n- [\ud83c\udfac Guides](#-guides)\n- [\ud83d\udcf2 Installation](#-installation)\n- [\ud83d\udc12 Usage](#-usage)\n  - [\ud83c\udf3f Collections](#-collections)\n  - [\ud83d\udd20 Texts](#-texts)\n  - [\ud83e\udd8b Appearance](#-appearance)\n  - [\ud83c\udfa8 Custom colors](#-custom-colors)\n  - [\ud83c\udfc3\u200d\u2640\ufe0f Animations](#\ufe0f-animations)\n  - [\ud83c\udfc4 Transitions](#-transitions)\n- [\u2728 Miscellaneous](#-miscellaneous)\n- [\u2764\ufe0f Contributing](#\ufe0f-contributing)\n- [\ud83d\udce2 Mentions](#-mentions)\n- [\ud83c\udfc6 Sponsors](#-sponsors)\n- [\ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb Author](#-author)\n- [\ud83d\udc6e\ud83c\udffb License](#-license)\n\n\n\n## \ud83c\udf1f Features\n\n* Easy to use\n* All UIViews are skeletonables\n* Fully customizable\n* Universal (iPhone & iPad)\n* Interface Builder friendly\n* Simple Swift syntax\n* Lightweight readable codebase\n\n\n## \ud83c\udfac Guides\n\n| [![](https://img.youtube.com/vi/75kgOhWsPNA/maxresdefault.jpg)](https://youtu.be/75kgOhWsPNA)|[![](https://img.youtube.com/vi/MVCiM_VdxVA/maxresdefault.jpg)](https://youtu.be/MVCiM_VdxVA)|[![](https://img.youtube.com/vi/Qq3Evspeea8/maxresdefault.jpg)](https://youtu.be/Qq3Evspeea8)|[![](https://img.youtube.com/vi/Zx1Pg1gPfxA/maxresdefault.jpg)](https://www.youtube.com/watch?v=Zx1Pg1gPfxA)\n|:---:  | :---:  | :---: | :---:\n|[**SkeletonView Guides - Getting started**](https://youtu.be/75kgOhWsPNA)|[**How to Create Loading View with Skeleton View in Swift 5.2**](https://youtu.be/MVCiM_VdxVA)    by iKh4ever Studio|[**Create Skeleton Loading View in App (Swift 5) - Xcode 11, 2020**](https://youtu.be/Qq3Evspeea8)    by iOS Academy| [**C\u00f3mo crear una ANIMACI\u00d3N de CARGA de DATOS en iOS**](https://www.youtube.com/watch?v=Zx1Pg1gPfxA) by MoureDev\n\n\n## \ud83d\udcf2 Installation\n\n* [CocoaPods](https://guides.cocoapods.org/using/using-cocoapods.html):\n\n```ruby\npod 'SkeletonView'\n```\n\n* [Carthage](https://github.com/Carthage/Carthage):\n\n```ruby\ngithub \"Juanpe/SkeletonView\"\n```\n\n* [Swift Package Manager](https://swift.org/package-manager/):\n\n```swift\ndependencies: [\n  .package(url: \"https://github.com/Juanpe/SkeletonView.git\", from: \"1.7.0\")\n]\n```\n\n> \ud83d\udce3 **IMPORTANT!** \n>\n> Since version 1.30.0, `SkeletonView` supports **XCFrameworks**, so if you want to install it as a **XCFramework**, please use [this repo](https://github.com/Juanpe/SkeletonView-XCFramework.git) instead.\n\n\n## \ud83d\udc12 Usage\n\nOnly **3** steps needed to use `SkeletonView`:\n\n1\ufe0f\u20e3 Import SkeletonView in proper place.\n```swift\nimport SkeletonView\n```\n\n2\ufe0f\u20e3 Now, set which views will be `skeletonables`. You achieve this in two ways:\n\n**Using code:**\n```swift\navatarImageView.isSkeletonable = true\n```\n**Using IB/Storyboards:**\n\n![](Assets/storyboard.png)\n\n3\ufe0f\u20e3 Once you've set the views, you can show the **skeleton**. To do so, you have **4** choices:\n\n```swift\n(1) view.showSkeleton()                 // Solid\n(2) view.showGradientSkeleton()         // Gradient\n(3) view.showAnimatedSkeleton()         // Solid animated\n(4) view.showAnimatedGradientSkeleton() // Gradient animated\n```\n\n**Preview**\n\n<table>\n<tr>\n<td width=\"25%\">\n<center>Solid</center>\n</td>\n<td width=\"25%\">\n<center>Gradient</center>\n</td>\n<td width=\"25%\">\n<center>Solid Animated</center>\n</td>\n<td width=\"25%\">\n<center>Gradient Animated</center>\n</td>\n</tr>\n<tr>\n<td width=\"25%\">\n<img src=\"Assets/solid.png\"></img>\n</td>\n<td width=\"25%\">\n<img src=\"Assets/gradient.png\"></img>\n</td>\n<td width=\"25%\">\n<img src=\"Assets/solid_animated.gif\"></img>\n</td>\n<td width=\"25%\">\n<img src=\"Assets/gradient_animated.gif\"></img>\n</td>\n</tr>\n</table>\n\n\n> \ud83d\udce3 **IMPORTANT!** \n>\n> `SkeletonView` is recursive, so if you want show the skeleton in all skeletonable views, you only need to call the show method in the main container view. For example, with `UIViewControllers`.\n\n  \n\n\n### \ud83c\udf3f Collections\n\n```SkeletonView``` is compatible with ```UITableView``` and ```UICollectionView```.\n\n\n**UITableView**\n\nIf you want to show the skeleton in a ```UITableView```, you need to conform to ```SkeletonTableViewDataSource``` protocol.\n\n``` swift\npublic protocol SkeletonTableViewDataSource: UITableViewDataSource {\n    func numSections(in collectionSkeletonView: UITableView) -> Int // Default: 1\n    func collectionSkeletonView(_ skeletonView: UITableView, numberOfRowsInSection section: Int) -> Int\n    func collectionSkeletonView(_ skeletonView: UITableView, cellIdentifierForRowAt indexPath: IndexPath) -> ReusableCellIdentifier\n    func collectionSkeletonView(_ skeletonView: UITableView, skeletonCellForRowAt indexPath: IndexPath) -> UITableViewCell? // Default: nil\n    func collectionSkeletonView(_ skeletonView: UITableView, prepareCellForSkeleton cell: UITableViewCell, at indexPath: IndexPath)\n}\n```\nAs you can see, this protocol inherits from ```UITableViewDataSource```, so you can replace this protocol with the skeleton protocol.\n\nThis protocol has a default implementation for some methods. For example, the number of rows for each section is calculated in runtime:\n\n``` swift\nfunc collectionSkeletonView(_ skeletonView: UITableView, numberOfRowsInSection section: Int) -> Int\n// Default:\n// It calculates how many cells need to populate whole tableview\n```\n\n> \ud83d\udce3 **IMPORTANT!** \n>\n> If you return `UITableView.automaticNumberOfSkeletonRows` in the above method, it acts like the default behavior (i.e. it calculates how many cells needed to populate the whole tableview).\n\nThere is only one method you need to implement to let Skeleton know the cell identifier. This method doesn't have default implementation:\n ``` swift\n func collectionSkeletonView(_ skeletonView: UITableView, cellIdentifierForRowAt indexPath: IndexPath) -> ReusableCellIdentifier {\n    return \"CellIdentifier\"\n}\n ```\n \n By default, the library dequeues the cells from each indexPath, but you can also do this if you want to make some changes before the skeleton appears:\n ``` swift\n func collectionSkeletonView(_ skeletonView: UITableView, skeletonCellForRowAt indexPath: IndexPath) -> UITableViewCell? {\n     let cell = skeletonView.dequeueReusableCell(withIdentifier: \"CellIdentifier\", for: indexPath) as? Cell\n     cell?.textField.isHidden = indexPath.row == 0\n     return cell\n }\n ```\n \nIf you prefer to leave the deque part to the library you can configure the cell using this method:\n ``` swift\n func collectionSkeletonView(_ skeletonView: UITableView, prepareCellForSkeleton cell: UITableViewCell, at indexPath: IndexPath) {\n     let cell = cell as? Cell\n     cell?.textField.isHidden = indexPath.row == 0\n }\n ```\n\n \nBesides, you can skeletonize both the headers and footers. You need to conform to `SkeletonTableViewDelegate` protocol.\n\n```swift\npublic protocol SkeletonTableViewDelegate: UITableViewDelegate {\n    func collectionSkeletonView(_ skeletonView: UITableView, identifierForHeaderInSection section: Int) -> ReusableHeaderFooterIdentifier? // default: nil\n    func collectionSkeletonView(_ skeletonView: UITableView, identifierForFooterInSection section: Int) -> ReusableHeaderFooterIdentifier? // default: nil\n}\n```\n\n> \ud83d\udce3 **IMPORTANT!** \n> \n> 1\ufe0f\u20e3 If you are using resizable cells (**`tableView.rowHeight = UITableViewAutomaticDimension`**), it's mandatory define the **`estimatedRowHeight`**.\n> \n> 2\ufe0f\u20e3 When you add elements in a **`UITableViewCell`** you should add it to **`contentView`** and not to the cell directly.\n> ```swift\n> self.contentView.addSubview(titleLabel) \u2705         \n> self.addSubview(titleLabel) \u274c\n> ```\n\n  \n\n**UICollectionView**\n\nFor `UICollectionView`, you need to conform to `SkeletonCollectionViewDataSource` protocol.\n\n``` swift\npublic protocol SkeletonCollectionViewDataSource: UICollectionViewDataSource {\n    func numSections(in collectionSkeletonView: UICollectionView) -> Int  // default: 1\n    func collectionSkeletonView(_ skeletonView: UICollectionView, numberOfItemsInSection section: Int) -> Int\n    func collectionSkeletonView(_ skeletonView: UICollectionView, cellIdentifierForItemAt indexPath: IndexPath) -> ReusableCellIdentifier\n    func collectionSkeletonView(_ skeletonView: UICollectionView, supplementaryViewIdentifierOfKind: String, at indexPath: IndexPath) -> ReusableCellIdentifier? // default: nil\n    func collectionSkeletonView(_ skeletonView: UICollectionView, skeletonCellForItemAt indexPath: IndexPath) -> UICollectionViewCell?  // default: nil\n    func collectionSkeletonView(_ skeletonView: UICollectionView, prepareCellForSkeleton cell: UICollectionViewCell, at indexPath: IndexPath)\n    func collectionSkeletonView(_ skeletonView: UICollectionView, prepareViewForSkeleton view: UICollectionReusableView, at indexPath: IndexPath)\n}\n```\n\nThe rest of the process is the same as ```UITableView```\n\n\n### \ud83d\udd20 Texts\n\n![](Assets/multilines2.png)\n\nWhen using elements with text, ```SkeletonView``` draws lines to simulate text.\n\nYou can set some properties for multilines elements.\n\n| Property | Type | Default | Preview\n| ------- | ------- |------- | -------\n| **lastLineFillPercent**  | `CGFloat` | `70`| ![](Assets/multiline_lastline.png)\n| **linesCornerRadius**  | `Int` | `0` | ![](Assets/multiline_corner.png)\n| **skeletonLineSpacing**  | `CGFloat` | `10` | ![](Assets/multiline_lineSpacing.png)\n| **skeletonPaddingInsets**  | `UIEdgeInsets` | `.zero` | ![](Assets/multiline_insets.png)\n| **skeletonTextLineHeight**  | `SkeletonTextLineHeight` | `.fixed(15)` | ![](Assets/multiline_lineHeight.png)\n| **skeletonTextNumberOfLines**  | `SkeletonTextNumberOfLines` | `.inherited` | ![](Assets/multiline_corner.png)\n\n<br />\n\nTo modify the percent or radius **using code**, set the properties:\n```swift\ndescriptionTextView.lastLineFillPercent = 50\ndescriptionTextView.linesCornerRadius = 5\n```\n\nOr, if you prefer use **IB/Storyboard**:\n\n![](Assets/multiline_customize.png)\n\n<br />\n\n**How to define the number of lines?**\n\n\nBy default, the number of lines is the same as the value of the `numberOfLines` property. And, if it's set to **zero**, it'll calculate how many lines are needed to populate the whole skeleton and draw it.\n\nHowever, if you want to set a specific number of skeleton lines you can do it by setting the `skeletonTextNumberOfLines` property. This property has two possible values, `inherited` which returns `numberOfLines` value and `custom(Int)` which returns the specific number of lines specified as the associated value. \n\nFor example:\n\n```swift\nlabel.skeletonTextNumberOfLines = 3   // .custom(3)\n``` \n\n<br />\n\n> **\u26a0\ufe0f DEPRECATED!**\n>\n> **useFontLineHeight** has been deprecated. You can use **skeletonTextLineHeight** instead:\n> ```swift\n> descriptionTextView.skeletonTextLineHeight = .relativeToFont\n> ```\n\n> **\ud83d\udce3 IMPORTANT!**\n>\n> Please note that for views without multiple lines, the single line will be considered \n> as the last line.\n\n\n\n### \ud83e\udd8b Appearance\n\nThe skeletons have a default appearance. So, when you don't specify the color, gradient or multilines properties, `SkeletonView` uses the default values.\n\nDefault values:\n- **tintColor**: `UIColor`\n    - *default: `.skeletonDefault` (same as `.clouds` but adaptive to dark mode)*\n- **gradient**: SkeletonGradient\n  - *default: `SkeletonGradient(baseColor: .skeletonDefault)`*\n- **multilineHeight**: `CGFloat`\n  - *default: 15*\n- **multilineSpacing**: `CGFloat`\n  - *default: 10*\n- **multilineLastLineFillPercent**: `Int`\n  - *default: 70*\n- **multilineCornerRadius**: `Int`\n  - *default: 0*\n- **skeletonCornerRadius**: `CGFloat` (IBInspectable)  (Make your skeleton view with corner)\n  - *default: 0*\n\nTo get these default values you can use `SkeletonAppearance.default`. Using this property you can set the values as well:\n```swift\nSkeletonAppearance.default.multilineHeight = 20\nSkeletonAppearance.default.tintColor = .green\n```\n\n> **\u26a0\ufe0f DEPRECATED!**\n>\n> **useFontLineHeight** has been deprecated. You can use **textLineHeight** instead:\n> ```swift\n> SkeletonAppearance.default.textLineHeight = .relativeToFont\n> ```\n\n\n### \ud83c\udfa8 Custom colors\n\nYou can decide which color the skeleton is tinted with. You only need to pass as a parameter the color or gradient you want.\n\n**Using solid colors**\n```swift\nview.showSkeleton(usingColor: UIColor.gray) // Solid\n// or\nview.showSkeleton(usingColor: UIColor(red: 25.0, green: 30.0, blue: 255.0, alpha: 1.0))\n```\n**Using gradients**\n``` swift\nlet gradient = SkeletonGradient(baseColor: UIColor.midnightBlue)\nview.showGradientSkeleton(usingGradient: gradient) // Gradient\n```\n\nBesides, **SkeletonView** features 20 flat colors \ud83e\udd19\ud83c\udffc\n\n```UIColor.turquoise, UIColor.greenSea, UIColor.sunFlower, UIColor.flatOrange  ...```\n\n![](Assets/flatcolors.png)\n###### Image captured from website [https://flatuicolors.com](https://flatuicolors.com)\n\n\n### \ud83c\udfc3\u200d\u2640\ufe0f Animations\n\n**SkeletonView** has two built-in animations, *pulse* for solid skeletons and *sliding* for gradients.\n\nBesides, if you want to do your own skeleton animation, it's really easy.\n\n\nSkeleton provides the `showAnimatedSkeleton` function which has a ```SkeletonLayerAnimation``` closure where you can define your custom animation.\n\n```swift\npublic typealias SkeletonLayerAnimation = (CALayer) -> CAAnimation\n```\n\nYou can call the function like this:\n\n```swift\nview.showAnimatedSkeleton { (layer) -> CAAnimation in\n  let animation = CAAnimation()\n  // Customize here your animation\n\n  return animation\n}\n```\n\nIt's available ```SkeletonAnimationBuilder```. It's a builder to make ```SkeletonLayerAnimation```.\n\nToday, you can create **sliding animations** for gradients, deciding the **direction** and setting the **duration** of the animation (default = 1.5s).\n\n```swift\n// func makeSlidingAnimation(withDirection direction: GradientDirection, duration: CFTimeInterval = 1.5) -> SkeletonLayerAnimation\n\nlet animation = SkeletonAnimationBuilder().makeSlidingAnimation(withDirection: .leftToRight)\nview.showAnimatedGradientSkeleton(usingGradient: gradient, animation: animation)\n\n```\n\n```GradientDirection``` is an enum, with theses cases:\n\n|  Direction | Preview\n|------- | -------\n| .leftRight | ![](Assets/sliding_left_to_right.gif)\n| .rightLeft | ![](Assets/sliding_right_to_left.gif)\n| .topBottom | ![](Assets/sliding_top_to_bottom.gif)\n| .bottomTop | ![](Assets/sliding_bottom_to_top.gif)\n| .topLeftBottomRight | ![](Assets/sliding_topLeft_to_bottomRight.gif)\n| .bottomRightTopLeft | ![](Assets/sliding_bottomRight_to_topLeft.gif)\n\n> **\ud83d\ude09 TRICK!**\n>\n> Exist another way to create sliding animations, just using this shortcut:\n> ```swift\n> let animation = GradientDirection.leftToRight.slidingAnimation()\n> ```\n\n  \n\n### \ud83c\udfc4 Transitions\n\n**SkeletonView** has built-in transitions to **show** or **hide** the skeletons in a *smoother* way \ud83e\udd19\n\nTo use the transition, simply add the ```transition``` parameter to your ```showSkeleton()``` or ```hideSkeleton()``` function with the transition time, like this:\n\n```swift\nview.showSkeleton(transition: .crossDissolve(0.25))     //Show skeleton cross dissolve transition with 0.25 seconds fade time\nview.hideSkeleton(transition: .crossDissolve(0.25))     //Hide skeleton cross dissolve transition with 0.25 seconds fade time\n\n```\n\nThe default value is  `crossDissolve(0.25)`\n\n**Preview**\n\n<table>\n<tr>\n<td width=\"50%\">\n<center>None</center>\n</td>\n<td width=\"50%\">\n<center>Cross dissolve</center>\n</td>\n</tr>\n<tr>\n<td width=\"50%\">\n<img src=\"Assets/skeleton_transition_nofade.gif\"></img>\n</td>\n<td width=\"50%\">\n<img src=\"Assets/skeleton_transition_fade.gif\"></img>\n</td>\n</tr>\n</table>\n\n\n## \u2728 Miscellaneous \n\n  \n\n**Hierarchy**\n\nSince ```SkeletonView``` is recursive, and we want skeleton to be very efficient, we want to stop recursion as soon as possible. For this reason, you must set the container view as `Skeletonable`, because Skeleton will stop looking for `skeletonable` subviews as soon as a view is not Skeletonable, breaking then the recursion.\n\nBecause an image is worth a thousand words:\n\nIn this example we have a `UIViewController` with a `ContainerView` and a `UITableView`. When the view is ready, we show the skeleton using this method:\n```\nview.showSkeleton()\n```\n\n> ```isSkeletonable```= \u2620\ufe0f\n\n| Configuration | Result|\n|:-------:|:-------:|\n|<img src=\"Assets/no_skeletonable.jpg\" width=\"350\"/> | <img src=\"Assets/no_skeletonables_result.png\" width=\"350\"/>|\n|<img src=\"Assets/container_no_skeletonable.jpg\" width=\"350\"/> | <img src=\"Assets/no_skeletonables_result.png\" width=\"350\"/>|\n|<img src=\"Assets/container_skeletonable.jpg\" width=\"350\"/> | <img src=\"Assets/container_skeletonable_result.png\" width=\"350\"/>|\n|<img src=\"Assets/all_skeletonables.jpg\" width=\"350\"/>| <img src=\"Assets/all_skeletonables_result.png\" width=\"350\"/>|\n|<img src=\"Assets/tableview_no_skeletonable.jpg\" width=\"350\"/> | <img src=\"Assets/tableview_no_skeletonable_result.png\" height=\"350\"/>|\n|<img src=\"Assets/tableview_skeletonable.jpg\" width=\"350\"/> | <img src=\"Assets/tableview_skeletonable_result.png\" height=\"350\"/>|\n\n  \n\n**Skeleton views layout**\n\nSometimes skeleton layout may not fit your layout because the parent view bounds have changed. ~For example, rotating the device.~\n\nYou can relayout the skeleton views like so:\n\n```swift\noverride func viewDidLayoutSubviews() {\n    view.layoutSkeletonIfNeeded()\n}\n```\n\n> \ud83d\udce3 **IMPORTANT!** \n> \n> You shouldn't call this method. From **version 1.8.1** you don't need to call this method, the library does automatically. So, you can use this method **ONLY** in the cases when you need to update the layout of the skeleton manually.\n\n\n  \n\n**Update skeleton**\n\nYou can change the skeleton configuration at any time like its colour, animation, etc. with the following methods:\n\n```swift\n(1) view.updateSkeleton()                 // Solid\n(2) view.updateGradientSkeleton()         // Gradient\n(3) view.updateAnimatedSkeleton()         // Solid animated\n(4) view.updateAnimatedGradientSkeleton() // Gradient animated\n```\n\n**Hiding views when the animation starts**\n\nSometimes you wanna hide some view when the animation starts, so there is a quick property that you can use to make this happen:\n\n```swift\nview.isHiddenWhenSkeletonIsActive = true  // This works only when isSkeletonable = true\n```\n\n**Don't modify user interaction when the skeleton is active**\n\n\nBy default, the user interaction is disabled for skeletonized items, but if you don't want to modify the user interaction indicator when skeleton is active, you can use the `isUserInteractionDisabledWhenSkeletonIsActive` property:\n\n```swift\nview.isUserInteractionDisabledWhenSkeletonIsActive = false  // The view will be active when the skeleton will be active.\n```\n\n**Don't use the font line height for the skeleton lines in labels**\n\nFalse to disable skeleton to auto-adjust to font height for a `UILabel` or `UITextView`. By default, the skeleton lines height is auto-adjusted to font height to more accurately reflect the text in the label rect rather than using the bounding box.\n\n```swift\nlabel.useFontLineHeight = false\n```\n\n**Delayed show skeleton**\n\nYou can delay the presentation of the skeleton if the views update quickly.\n\n```swift\nfunc showSkeleton(usingColor: UIColor,\n                  animated: Bool,\n                  delay: TimeInterval,\n                  transition: SkeletonTransitionStyle)\n```\n\n```swift\nfunc showGradientSkeleton(usingGradient: SkeletonGradient,\n                          animated: Bool,\n                          delay: TimeInterval,\n                          transition: SkeletonTransitionStyle)\n```\n\n**Debug**\n\nTo facilitate the debug tasks when something is not working fine. **`SkeletonView`** has some new tools.\n\nFirst, `UIView` has available a property with his skeleton info:\n```swift\nvar sk.skeletonTreeDescription: String\n\n```\n\nBesides, you can activate the new **debug mode**. You just add the environment variable `SKELETON_DEBUG` and activate it.\n\n![](Assets/debug_mode.png)\n\nThen, when the skeleton appears, you can see the view hierarchy in the Xcode console.\n\n```\n{ \n  \"type\" : \"UIView\", // UITableView, UILabel...\n  \"isSkeletonable\" : true,\n  \"reference\" : \"0x000000014751ce30\",\n  \"children\" : [\n    {\n      \"type\" : \"UIView\",\n      \"isSkeletonable\" : true,\n      \"children\" : [ ... ],\n      \"reference\" : \"0x000000014751cfa0\"\n    }\n  ]\n}\n```\n  \n**Supported OS & SDK Versions**\n\n* iOS 9.0+\n* tvOS 9.0+\n* Swift 5.3\n\n## \u2764\ufe0f Contributing\nThis is an open source project, so feel free to contribute. How?\n\n- Open an [issue](https://github.com/Juanpe/SkeletonView/issues/new).\n- Send feedback via [email](mailto://juanpecatalan.com).\n- Propose your own fixes, suggestions and open a pull request with the changes.\n\nSee [all contributors](https://github.com/Juanpe/SkeletonView/graphs/contributors)\n\nFor more information, please read the [contributing guidelines](https://github.com/Juanpe/SkeletonView/blob/main/CONTRIBUTING.md).\n\n\n## \ud83d\udce2 Mentions\n\n- [iOS Dev Weekly #327](https://iosdevweekly.com/issues/327#start)\n- [Hacking with Swift Articles](https://www.hackingwithswift.com/articles/40/skeletonview-makes-loading-content-beautiful)\n- [Top 10 Swift Articles November](https://medium.mybridge.co/swift-top-10-articles-for-the-past-month-v-nov-2017-dfed7861cd65)\n- [30 Amazing iOS Swift Libraries (v2018)](https://medium.mybridge.co/30-amazing-ios-swift-libraries-for-the-past-year-v-2018-7cf15027eee9)\n- [AppCoda Weekly #44](http://digest.appcoda.com/issues/appcoda-weekly-issue-44-81899)\n- [iOS Cookies Newsletter #103](https://us11.campaign-archive.com/?u=cd1f3ed33c6527331d82107ba&id=48131a516d)\n- [Swift Developments Newsletter #113](https://andybargh.com/swiftdevelopments-113/)\n- [iOS Goodies #204](http://ios-goodies.com/post/167557280951/week-204)\n- [Swift Weekly #96](http://digest.swiftweekly.com/issues/swift-weekly-issue-96-81759)\n- [CocoaControls](https://www.cocoacontrols.com/controls/skeletonview)\n- [Awesome iOS Newsletter #74](https://ios.libhunt.com/newsletter/74)\n- [Swift News #36](https://www.youtube.com/watch?v=mAGpsQiy6so)\n- [Best iOS articles, new tools & more](https://medium.com/flawless-app-stories/best-ios-articles-new-tools-more-fcbe673e10d)\n\n## \ud83c\udfc6 Sponsors\n\nOpen-source projects cannot live long without your help. If you find **SkeletonView** is useful, please consider supporting this \nproject by becoming a sponsor. \n\nBecome a sponsor through [GitHub Sponsors](https://github.com/sponsors/Juanpe) :heart:\n\n## \ud83d\udc68\ud83c\udffb\u200d\ud83d\udcbb Author\n\n[Juanpe Catal\u00e1n](http://www.twitter.com/JuanpeCatalan)\n\n<a class=\"bmc-button\" target=\"_blank\" href=\"https://www.buymeacoffee.com/CDou4xtIK\"><img src=\"https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\" alt=\"Buy me a coffee\" style=\"height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;\"><span style=\"margin-left:5px\"></span></a>\n\n\n## \ud83d\udc6e\ud83c\udffb License\n\n```\nMIT License\n\nCopyright (c) 2017 Juanpe Catal\u00e1n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n",
        "releases": [
            {
                "name": "\ud83d\udce6 1.31.0",
                "date": "2024-04-18T11:15:12Z"
            },
            {
                "name": "\ud83d\udce6 1.30.4",
                "date": "2022-10-20T11:01:35Z"
            },
            {
                "name": "\ud83d\udce6 1.30.3",
                "date": "2022-09-29T09:08:52Z"
            },
            {
                "name": "\ud83d\udce6 1.30.2",
                "date": "2022-09-05T07:27:34Z"
            },
            {
                "name": "\ud83d\udce6 1.30.1",
                "date": "2022-08-16T08:36:30Z"
            },
            {
                "name": "\ud83d\udce6 1.30.0",
                "date": "2022-08-11T16:33:20Z"
            },
            {
                "name": "\ud83d\udce6 1.29.4",
                "date": "2022-08-11T16:15:50Z"
            },
            {
                "name": "\ud83d\udce6 1.29.3",
                "date": "2022-06-01T06:32:55Z"
            },
            {
                "name": "\ud83d\udce6 1.29.2",
                "date": "2022-01-18T14:21:56Z"
            },
            {
                "name": "\ud83d\udce6 1.29.1",
                "date": "2022-01-10T15:32:58Z"
            },
            {
                "name": "\ud83d\udce6 1.29.0",
                "date": "2022-01-10T10:24:32Z"
            },
            {
                "name": "\ud83d\udce6 1.28.0",
                "date": "2022-01-10T10:09:01Z"
            },
            {
                "name": "\ud83d\udce6 1.27.0",
                "date": "2022-01-08T12:40:19Z"
            },
            {
                "name": "\ud83d\udce6 1.26.2",
                "date": "2022-01-08T10:22:23Z"
            },
            {
                "name": "\ud83d\udce6 1.26.1",
                "date": "2022-01-07T15:56:37Z"
            },
            {
                "name": "\ud83d\udce6 1.26.0",
                "date": "2021-11-23T10:41:00Z"
            },
            {
                "name": "\ud83d\udce6 1.25.2",
                "date": "2021-10-21T14:48:57Z"
            },
            {
                "name": "\ud83d\udce6 1.25.1",
                "date": "2021-09-14T05:58:14Z"
            },
            {
                "name": "\ud83d\udce6 1.25.0",
                "date": "2021-09-09T07:45:47Z"
            },
            {
                "name": "\ud83d\udce6 1.24.4",
                "date": "2021-08-23T11:59:58Z"
            },
            {
                "name": "\ud83d\udce6 1.24.3",
                "date": "2021-08-23T10:36:14Z"
            },
            {
                "name": "\ud83d\udce6 1.24.2",
                "date": "2021-08-23T10:24:44Z"
            },
            {
                "name": "\ud83d\udce6 1.24.1",
                "date": "2021-08-23T10:22:07Z"
            },
            {
                "name": "\ud83d\udce6 1.24.0",
                "date": "2021-08-19T15:48:11Z"
            },
            {
                "name": "\ud83d\udce6 1.23.1",
                "date": "2021-08-19T12:48:12Z"
            },
            {
                "name": "\ud83d\udce6 1.23.0",
                "date": "2021-08-19T06:15:20Z"
            },
            {
                "name": "\ud83d\udce6 1.22.0",
                "date": "2021-08-17T17:08:31Z"
            },
            {
                "name": "\ud83d\udce6 1.21.2",
                "date": "2021-07-23T13:54:06Z"
            },
            {
                "name": "\ud83d\udce6 1.21.1",
                "date": "2021-07-13T11:51:23Z"
            },
            {
                "name": "\ud83d\udce6 1.21.0",
                "date": "2021-07-02T14:10:49Z"
            },
            {
                "name": "\ud83d\udce6 1.20.0",
                "date": "2021-06-28T15:47:18Z"
            },
            {
                "name": "\ud83d\udce6 1.19.0",
                "date": "2021-06-24T06:21:39Z"
            },
            {
                "name": "\ud83d\udce6 1.18.0",
                "date": "2021-06-22T10:58:39Z"
            },
            {
                "name": "\ud83d\udce6 1.17.2",
                "date": "2021-06-11T20:24:33Z"
            },
            {
                "name": "\ud83d\udce6 1.17.1",
                "date": "2021-06-10T17:36:05Z"
            },
            {
                "name": "\ud83d\udce6 1.17.0",
                "date": "2021-06-10T17:23:53Z"
            },
            {
                "name": "\ud83d\udce6 1.16.0",
                "date": "2021-05-31T15:09:13Z"
            },
            {
                "name": "\ud83d\udce6 1.15.0",
                "date": "2021-04-13T06:49:55Z"
            },
            {
                "name": "\ud83d\udce6 1.14.0",
                "date": "2021-04-08T10:03:10Z"
            },
            {
                "name": "\ud83d\udce6 1.13.0",
                "date": "2021-02-15T14:23:36Z"
            },
            {
                "name": "\ud83d\udce6 1.12.1",
                "date": "2021-02-08T09:02:01Z"
            },
            {
                "name": "\ud83d\udce6 1.12.0",
                "date": "2021-02-01T18:27:42Z"
            },
            {
                "name": "\ud83d\udce6 1.11.0",
                "date": "2020-10-29T13:26:04Z"
            },
            {
                "name": "\ud83d\udce6 1.10.0",
                "date": "2020-10-02T15:34:14Z"
            },
            {
                "name": "\ud83d\udce6  1.9",
                "date": "2020-09-10T09:13:09Z"
            },
            {
                "name": "1.8.8",
                "date": "2020-08-27T09:45:45Z"
            },
            {
                "name": "1.8.7",
                "date": "2020-08-27T09:45:22Z"
            },
            {
                "name": "\ud83d\udce6 1.8.6",
                "date": "2020-02-21T10:06:52Z"
            },
            {
                "name": "Single line (1.8.4)",
                "date": "2020-02-12T00:24:07Z"
            },
            {
                "name": "Dark mode (1.8.3)",
                "date": "2020-01-31T14:38:18Z"
            },
            {
                "name": "LayoutSkeleton (1.8.1)",
                "date": "2019-08-26T21:03:56Z"
            },
            {
                "name": "Transition (1.8)",
                "date": "2019-08-25T09:09:25Z"
            },
            {
                "name": "Layout update (1.7)",
                "date": "2019-07-02T08:45:29Z"
            },
            {
                "name": "SPM(1.6)",
                "date": "2019-06-04T17:22:18Z"
            },
            {
                "name": "Transparent (1.4.2)",
                "date": "2019-02-26T17:02:43Z"
            },
            {
                "name": "1.4.1",
                "date": "2018-12-11T08:24:19Z"
            },
            {
                "name": "Debug (1.4)",
                "date": "2018-08-10T15:44:14Z"
            },
            {
                "name": "Custom defaults (1.3)",
                "date": "2018-08-02T15:46:00Z"
            },
            {
                "name": "Typo (1.2.3)",
                "date": "2018-07-25T06:55:05Z"
            },
            {
                "name": "New face (1.2.2)",
                "date": "2018-07-24T06:35:18Z"
            },
            {
                "name": "State (1.2.1)",
                "date": "2018-06-05T15:42:52Z"
            },
            {
                "name": "On TV (1.2)",
                "date": "2018-05-01T11:33:54Z"
            },
            {
                "name": "Hotfix (1.1.1)",
                "date": "2018-02-14T19:39:59Z"
            },
            {
                "name": "Needed (1.1)",
                "date": "2018-02-08T23:49:19Z"
            },
            {
                "name": "Resizable (1.0.5)",
                "date": "2018-02-02T17:16:13Z"
            },
            {
                "name": "Filled or not (1.0.4)",
                "date": "2017-11-22T20:01:23Z"
            },
            {
                "name": "In all directions (1.0.3)",
                "date": "2017-11-18T18:32:35Z"
            },
            {
                "name": "Retro (1.0.2)",
                "date": "2017-11-10T14:56:24Z"
            },
            {
                "name": "Early bird bug (1.0.1)",
                "date": "2017-11-10T10:09:29Z"
            },
            {
                "name": "Starter",
                "date": "2017-11-10T10:09:59Z"
            }
        ]
    }
}