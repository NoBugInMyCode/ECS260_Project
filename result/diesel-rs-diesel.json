{
    "https://api.github.com/repos/diesel-rs/diesel": {
        "forks": 1093,
        "watchers": 13036,
        "stars": 13036,
        "languages": {
            "Rust": 3876791,
            "PLpgSQL": 2290,
            "Shell": 763
        },
        "commits": [
            "2025-01-20T20:23:43Z",
            "2025-01-20T17:03:13Z",
            "2025-01-19T15:10:25Z",
            "2025-01-19T15:07:00Z",
            "2025-01-19T14:35:07Z",
            "2025-01-19T14:27:52Z",
            "2025-01-19T14:24:43Z",
            "2025-01-19T14:22:04Z",
            "2025-01-11T16:11:40Z",
            "2025-01-11T05:24:29Z",
            "2025-01-17T14:40:46Z",
            "2025-01-17T11:12:04Z",
            "2025-01-17T11:53:16Z",
            "2025-01-17T11:08:02Z",
            "2025-01-17T10:39:39Z",
            "2025-01-13T17:49:36Z",
            "2025-01-11T17:29:45Z",
            "2024-12-17T19:17:49Z",
            "2024-12-17T19:16:18Z",
            "2024-12-17T19:05:52Z",
            "2025-01-11T10:15:18Z",
            "2025-01-10T17:06:49Z",
            "2025-01-08T18:34:07Z",
            "2025-01-04T20:15:59Z",
            "2025-01-04T19:18:51Z",
            "2025-01-10T17:19:57Z",
            "2025-01-10T16:33:11Z",
            "2025-01-10T15:35:56Z",
            "2025-01-10T15:25:47Z",
            "2025-01-10T15:22:13Z"
        ],
        "creation_date": "2015-08-29T22:51:00Z",
        "contributors": 30,
        "topics": [
            "mysql",
            "orm",
            "postgresql",
            "query-builder",
            "rust",
            "sqlite"
        ],
        "subscribers": 109,
        "readme": "[![diesel logo](https://diesel.rs/assets/images/diesel_logo_stacked_black.png)](https://diesel.rs)\n\n# A safe, extensible ORM and Query Builder for Rust\n\n[![Build Status](https://github.com/diesel-rs/diesel/workflows/CI%20Tests/badge.svg)](https://github.com/diesel-rs/diesel/actions?query=workflow%3A%22CI+Tests%22+branch%3Amaster)\n[![Crates.io](https://img.shields.io/crates/v/diesel.svg)](https://crates.io/crates/diesel)\n\nAPI Documentation: [latest release](https://docs.rs/diesel) \u2013 [master branch](https://docs.diesel.rs/master/diesel/index.html)\n\n[Homepage](https://diesel.rs)\n\nDiesel gets rid of the boilerplate for database interaction and eliminates\nruntime errors without sacrificing performance. It takes full advantage of\nRust's type system to create a low overhead query builder that \"feels like\nRust.\"\n\nSupported databases:\n1. [PostgreSQL](https://docs.diesel.rs/master/diesel/pg/index.html)\n2. [MySQL](https://docs.diesel.rs/master/diesel/mysql/index.html)\n3. [SQLite](https://docs.diesel.rs/master/diesel/sqlite/index.html)\n\nYou can configure the database backend in `Cargo.toml`:\n\n```toml\n[dependencies]\ndiesel = { version = \"<version>\", features = [\"<postgres|mysql|sqlite>\"] }\n```\n\n## Getting Started\n\nFind our extensive Getting Started tutorial at\n[https://diesel.rs/guides/getting-started](https://diesel.rs/guides/getting-started).\nGuides on more specific features are coming soon.\n\n## Getting help\n\nIf you run into problems, Diesel has a very active Gitter room.\nYou can come ask for help at in our [GitHub Discussions](https://github.com/diesel-rs/diesel/discussions) forum. \nThis is also the right place to propose new features or show your applications.\n\n## Usage\n\n### Simple queries\n\nSimple queries are a complete breeze. Loading all users from a database:\n\n```rust\nusers::table.load(&mut connection)\n```\n\nExecuted SQL:\n\n```sql\nSELECT * FROM users;\n```\n\nLoading all the posts for a user:\n\n``` rust\nPost::belonging_to(user).load(&mut connection)\n```\n\nExecuted SQL:\n\n```sql\nSELECT * FROM posts WHERE user_id = 1;\n```\n\n### Complex queries\n\nDiesel's powerful query builder helps you construct queries as simple or complex as\nyou need, at zero cost.\n\n```rust\nlet versions = Version::belonging_to(krate)\n  .select(id)\n  .order(num.desc())\n  .limit(5);\nlet downloads = version_downloads\n  .filter(date.gt(now - 90.days()))\n  .filter(version_id.eq_any(versions))\n  .order(date)\n  .load::<Download>(&mut conn)?;\n```\n\nExecuted SQL:\n\n```sql\nSELECT version_downloads.*\n  WHERE date > (NOW() - '90 days')\n    AND version_id = ANY(\n      SELECT id FROM versions\n        WHERE crate_id = 1\n        ORDER BY num DESC\n        LIMIT 5\n    )\n  ORDER BY date\n```\n\n### Less boilerplate\n\nDiesel codegen generates boilerplate for you. It lets you focus on your business logic, not mapping to and from SQL rows.\n\nThat means you can write this:\n\n```rust\n#[derive(Queryable, Selectable)]\n#[diesel(table_name = downloads)]\npub struct Download {\n    id: i32,\n    version_id: i32,\n    downloads: i32,\n    counted: i32,\n    date: SystemTime,\n}\n```\n\nInstead of this without Diesel:\n\n```rust\npub struct Download {\n    id: i32,\n    version_id: i32,\n    downloads: i32,\n    counted: i32,\n    date: SystemTime,\n}\n\nimpl Download {\n    fn from_row(row: &Row) -> Download {\n        Download {\n            id: row.get(\"id\"),\n            version_id: row.get(\"version_id\"),\n            downloads: row.get(\"downloads\"),\n            counted: row.get(\"counted\"),\n            date: row.get(\"date\"),\n        }\n    }\n}\n```\n\n### Inserting data\n\nIt's not just about reading data. Diesel makes it easy to use structs for new records.\n\n```rust\n#[derive(Insertable)]\n#[diesel(table_name = users)]\nstruct NewUser<'a> {\n    name: &'a str,\n    hair_color: Option<&'a str>,\n}\n\nlet new_users = vec![\n    NewUser { name: \"Sean\", hair_color: Some(\"Black\") },\n    NewUser { name: \"Gordon\", hair_color: None },\n];\n\ninsert_into(users)\n    .values(&new_users)\n    .execute(&mut connection);\n```\n\nExecuted SQL:\n\n```sql\nINSERT INTO users (name, hair_color) VALUES\n  ('Sean', 'Black'),\n  ('Gordon', DEFAULT)\n```\n\nIf you need data from the rows you inserted, just change `execute` to `get_result` or `get_results`. Diesel will take care of the rest.\n\n```rust\nlet new_users = vec![\n    NewUser { name: \"Sean\", hair_color: Some(\"Black\") },\n    NewUser { name: \"Gordon\", hair_color: None },\n];\n\nlet inserted_users = insert_into(users)\n    .values(&new_users)\n    .get_results::<User>(&mut connection);\n```\n\nExecuted SQL:\n\n```sql\nINSERT INTO users (name, hair_color) VALUES\n  ('Sean', 'Black'),\n  ('Gordon', DEFAULT)\n  RETURNING *\n```\n\n### Updating data\n\nDiesel's codegen can generate several ways to update a row, letting you encapsulate your logic in the way that makes sense for your app.\n\nModifying a struct:\n\n```rust\npost.published = true;\npost.save_changes(&mut connection);\n```\n\nOne-off batch changes:\n\n```rust\nupdate(users.filter(email.like(\"%@spammer.com\")))\n    .set(banned.eq(true))\n    .execute(&mut connection)\n```\n\nUsing a struct for encapsulation:\n\n```rust\nupdate(Settings::belonging_to(current_user))\n    .set(&settings_form)\n    .execute(&mut connection)\n```\n\n### Raw SQL\n\nThere will always be certain queries that are just easier to write as raw SQL, or can't be expressed with the query builder. Even in these cases, Diesel provides an easy to use API for writing raw SQL.\n\n```rust\n#[derive(QueryableByName)]\n#[diesel(table_name = users)]\nstruct User {\n    id: i32,\n    name: String,\n    organization_id: i32,\n}\n\n// Using `include_str!` allows us to keep the SQL in a\n// separate file, where our editor can give us SQL specific\n// syntax highlighting.\nsql_query(include_str!(\"complex_users_by_organization.sql\"))\n    .bind::<Integer, _>(organization_id)\n    .bind::<BigInt, _>(offset)\n    .bind::<BigInt, _>(limit)\n    .load::<User>(&mut conn)?;\n```\n\n## Code of conduct\n\nAnyone who interacts with Diesel in any space, including but not limited to\nthis GitHub repository, must follow our [code of conduct](https://github.com/diesel-rs/diesel/blob/master/code_of_conduct.md).\n\n## License\n\nLicensed under either of these:\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   https://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or\n   https://opensource.org/licenses/MIT)\n\n### Contributing\n\nBefore contributing, please read the [contributors guide](https://github.com/diesel-rs/diesel/blob/master/CONTRIBUTING.md)\nfor useful information about setting up Diesel locally, coding style and common abbreviations.\n\nUnless you explicitly state otherwise, any contribution you intentionally submit\nfor inclusion in the work, as defined in the Apache-2.0 license, shall be\ndual-licensed as above, without any additional terms or conditions.\n",
        "releases": [
            {
                "name": "Diesel 2.2.6",
                "date": "2024-12-03T18:15:25Z"
            },
            {
                "name": "Diesel 2.2.5",
                "date": "2024-11-21T10:33:55Z"
            },
            {
                "name": "Diesel 2.2.4",
                "date": "2024-09-03T14:30:51Z"
            },
            {
                "name": "Diesel 2.2.3",
                "date": "2024-08-23T08:25:27Z"
            },
            {
                "name": "Diesel 2.2.2",
                "date": "2024-07-19T11:27:38Z"
            },
            {
                "name": "Diesel 2.2.1",
                "date": "2024-06-13T11:54:01Z"
            },
            {
                "name": "Diesel 2.2.0",
                "date": "2024-05-31T07:41:51Z"
            },
            {
                "name": "Diesel 2.1.6",
                "date": "2024-04-19T06:02:53Z"
            },
            {
                "name": "Diesel 2.1.5",
                "date": "2024-03-15T09:37:34Z"
            },
            {
                "name": "Diesel 2.1.4",
                "date": "2023-11-14T15:04:43Z"
            },
            {
                "name": "Diesel 2.1.3",
                "date": "2023-10-05T15:13:09Z"
            },
            {
                "name": "Diesel 2.1.2",
                "date": "2023-09-25T17:53:30Z"
            },
            {
                "name": "Diesel 2.1.1",
                "date": "2023-08-25T07:19:43Z"
            },
            {
                "name": "Diesel 2.1.0",
                "date": "2023-05-26T08:46:08Z"
            },
            {
                "name": "Diesel 2.0.4",
                "date": "2023-04-18T15:01:04Z"
            },
            {
                "name": "Diesel-derives 2.0.2",
                "date": "2023-03-13T09:11:11Z"
            },
            {
                "name": "Diesel 2.0.3",
                "date": "2023-01-24T16:45:50Z"
            },
            {
                "name": "Diesel 2.0.2",
                "date": "2022-10-11T11:47:10Z"
            },
            {
                "name": "Diesel 2.0.1",
                "date": "2022-10-07T06:46:47Z"
            },
            {
                "name": "Diesel 2.0.0",
                "date": "2022-08-29T14:42:07Z"
            },
            {
                "name": "Diesel 2.0.0 RC1",
                "date": "2022-07-22T08:04:20Z"
            },
            {
                "name": "Diesel 2.0.0-rc.0",
                "date": "2022-04-22T15:12:24Z"
            },
            {
                "name": "1.4.8",
                "date": "2021-09-20T07:45:17Z"
            },
            {
                "name": "1.4.7",
                "date": "2021-06-08T07:45:56Z"
            },
            {
                "name": "1.4.6",
                "date": "2021-03-05T11:12:15Z"
            },
            {
                "name": "1.4.5",
                "date": "2020-06-09T11:28:48Z"
            },
            {
                "name": "1.4.4",
                "date": "2020-03-23T10:06:46Z"
            },
            {
                "name": "1.4.3",
                "date": "2019-10-11T20:30:33Z"
            },
            {
                "name": "v1.4.0",
                "date": "2019-01-21T09:52:59Z"
            },
            {
                "name": "1.3.3",
                "date": "2018-09-12T15:51:32Z"
            },
            {
                "name": "1.3.2",
                "date": "2018-06-14T21:03:45Z"
            },
            {
                "name": "v1.3.0",
                "date": "2018-05-22T20:43:26Z"
            },
            {
                "name": "1.2.0",
                "date": "2018-04-07T00:12:30Z"
            },
            {
                "name": "1.1.1",
                "date": "2018-01-16T15:53:00Z"
            },
            {
                "name": "1.1.0",
                "date": "2018-01-15T15:58:56Z"
            },
            {
                "name": "1.0.0",
                "date": "2018-01-02T23:19:33Z"
            },
            {
                "name": "1.0.0-rc1",
                "date": "2017-12-23T21:41:25Z"
            },
            {
                "name": "1.0.0 Beta 1",
                "date": "2017-12-04T22:13:19Z"
            },
            {
                "name": "v0.99.0 (It's basically 1.0 except it's not)",
                "date": "2017-11-29T00:16:25Z"
            },
            {
                "name": "v0.16.0",
                "date": "2017-08-24T18:35:34Z"
            },
            {
                "name": "v0.15.2",
                "date": "2017-07-28T16:05:10Z"
            },
            {
                "name": "v0.15.0",
                "date": "2017-07-23T09:41:03Z"
            },
            {
                "name": "v0.14.1",
                "date": "2017-07-10T15:51:42Z"
            },
            {
                "name": "v0.13.1",
                "date": "2017-07-10T15:51:56Z"
            },
            {
                "name": "v0.14.0 (The one with all the joins)",
                "date": "2017-07-04T15:30:15Z"
            },
            {
                "name": "0.13.0",
                "date": "2017-05-15T17:08:19Z"
            },
            {
                "name": "v0.12.0",
                "date": "2017-03-16T16:53:05Z"
            },
            {
                "name": "v0.11.4",
                "date": "2017-02-21T10:08:44Z"
            },
            {
                "name": "v0.11.3",
                "date": "2017-02-21T10:02:47Z"
            },
            {
                "name": "v0.11.2",
                "date": "2017-02-19T15:32:59Z"
            },
            {
                "name": "v0.11.1",
                "date": "2017-02-17T20:21:04Z"
            },
            {
                "name": "v0.11.0 (The one where we support MySQL)",
                "date": "2017-02-16T21:19:59Z"
            },
            {
                "name": "v0.10.1",
                "date": "2017-02-08T16:20:48Z"
            },
            {
                "name": "The one where we work on stable",
                "date": "2017-02-02T18:42:25Z"
            },
            {
                "name": "",
                "date": "2016-12-11T10:41:04Z"
            },
            {
                "name": "v0.9.0",
                "date": "2016-12-08T21:31:04Z"
            },
            {
                "name": "v0.8.0",
                "date": "2016-10-10T19:31:59Z"
            },
            {
                "name": "v0.7.2",
                "date": "2016-08-20T13:13:50Z"
            },
            {
                "name": "v0.7.1",
                "date": "2016-08-11T11:40:00Z"
            },
            {
                "name": "v0.7.0",
                "date": "2016-08-02T08:30:31Z"
            }
        ]
    }
}