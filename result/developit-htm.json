{
    "https://api.github.com/repos/developit/htm": {
        "forks": 171,
        "watchers": 8766,
        "stars": 8766,
        "languages": {
            "JavaScript": 65165
        },
        "commits": [
            "2022-06-03T00:03:32Z",
            "2022-04-27T20:44:10Z",
            "2022-04-26T16:22:22Z",
            "2022-04-26T16:15:16Z",
            "2022-04-26T16:13:59Z",
            "2022-04-26T16:13:22Z",
            "2022-04-25T18:16:01Z",
            "2021-11-04T20:20:50Z",
            "2021-11-04T20:20:21Z",
            "2021-09-01T16:15:09Z",
            "2021-09-01T16:09:28Z",
            "2021-09-01T07:08:47Z",
            "2021-08-11T11:20:29Z",
            "2021-07-09T15:32:22Z",
            "2021-07-09T15:28:04Z",
            "2021-07-09T15:24:31Z",
            "2021-07-09T15:22:42Z",
            "2021-07-09T15:14:33Z",
            "2021-07-09T15:14:12Z",
            "2021-07-09T15:11:21Z",
            "2021-07-09T15:11:10Z",
            "2021-07-09T15:02:21Z",
            "2021-07-09T15:01:49Z",
            "2021-03-31T07:23:19Z",
            "2021-02-19T16:23:41Z",
            "2021-02-19T16:13:25Z",
            "2021-02-19T15:34:52Z",
            "2021-02-19T14:40:18Z",
            "2021-02-19T14:34:11Z",
            "2021-02-05T03:40:13Z"
        ],
        "creation_date": "2018-07-30T19:04:49Z",
        "contributors": 30,
        "topics": [
            "babel",
            "babel-plugin",
            "jsx",
            "tagged-template",
            "virtual-dom"
        ],
        "subscribers": 72,
        "readme": "\n<h1 align=\"center\">\n  HTM (Hyperscript Tagged Markup)\n  <a href=\"https://www.npmjs.org/package/htm\"><img src=\"https://img.shields.io/npm/v/htm.svg?style=flat\" alt=\"npm\"></a>\n</h1>\n<p align=\"center\">\n  <img src=\"https://i.imgur.com/0ph8dbS.png\" width=\"572\" alt=\"hyperscript tagged markup demo\">\n</p>\n\n`htm` is **JSX-like syntax in plain JavaScript** - no transpiler necessary.\n\nDevelop with React/Preact directly in the browser, then compile `htm` away for production.\n\nIt uses standard JavaScript [Tagged Templates] and works in [all modern browsers].\n\n## `htm` by the numbers:\n\n\ud83d\udc23 **< 600 bytes** when used directly in the browser\n\n\u269b\ufe0f **< 500 bytes** when used with Preact _(thanks gzip \ud83c\udf08)_\n\n\ud83e\udd5a **< 450 byte** `htm/mini` version\n\n\ud83c\udfc5 **0 bytes** if compiled using [babel-plugin-htm]\n\n\n## Syntax: like JSX but also lit\n\nThe syntax you write when using HTM is as close as possible to JSX:\n\n- Spread props: `<div ...${props}>` instead of `<div {...props}>`\n- Self-closing tags: `<div />`\n- Components: `<${Foo}>` instead of `<Foo>` _(where `Foo` is a component reference)_\n- Boolean attributes: `<div draggable />`\n\n\n## Improvements over JSX\n\n`htm` actually takes the JSX-style syntax a couple steps further!\n\nHere's some ergonomic features you get for free that aren't present in JSX:\n\n- **No transpiler necessary**\n- HTML's optional quotes: `<div class=foo>`\n- Component end-tags: `<${Footer}>footer content<//>`\n- Syntax highlighting and language support via the [lit-html VSCode extension] and [vim-jsx-pretty plugin].\n- Multiple root element (fragments): `<div /><div />`\n- Support for HTML-style comments: `<div><!-- comment --></div>`\n\n## Installation\n\n`htm` is published to npm, and accessible via the unpkg.com CDN:\n\n**via npm:**\n\n```js\nnpm i htm\n```\n\n**hotlinking from unpkg:** _(no build tool needed!)_\n\n```js\nimport htm from 'https://unpkg.com/htm?module'\nconst html = htm.bind(React.createElement);\n```\n\n```js\n// just want htm + preact in a single file? there's a highly-optimized version of that:\nimport { html, render } from 'https://unpkg.com/htm/preact/standalone.module.js'\n```\n\n## Usage\n\nIf you're using Preact or React, we've included off-the-shelf bindings to make your life easier.\nThey also have the added benefit of sharing a template cache across all modules.\n\n```js\nimport { render } from 'preact';\nimport { html } from 'htm/preact';\nrender(html`<a href=\"/\">Hello!</a>`, document.body);\n```\n\nSimilarly, for React:\n\n```js\nimport ReactDOM from 'react-dom';\nimport { html } from 'htm/react';\nReactDOM.render(html`<a href=\"/\">Hello!</a>`, document.body);\n```\n\n### Advanced Usage\n\nSince `htm` is a generic library, we need to tell it what to \"compile\" our templates to.\nYou can bind `htm` to any function of the form `h(type, props, ...children)` _([hyperscript])_.\nThis function can return anything - `htm` never looks at the return value.\n\nHere's an example `h()` function that returns tree nodes:\n\n```js\nfunction h(type, props, ...children) {\n  return { type, props, children };\n}\n```\n\nTo use our custom `h()` function, we need to create our own `html` tag function by binding `htm` to our `h()` function:\n\n```js\nimport htm from 'htm';\n\nconst html = htm.bind(h);\n```\n\nNow we have an `html()` template tag that can be used to produce objects in the format we created above.\n\nHere's the whole thing for clarity:\n\n```js\nimport htm from 'htm';\n\nfunction h(type, props, ...children) {\n  return { type, props, children };\n}\n\nconst html = htm.bind(h);\n\nconsole.log( html`<h1 id=hello>Hello world!</h1>` );\n// {\n//   type: 'h1',\n//   props: { id: 'hello' },\n//   children: ['Hello world!']\n// }\n```\n\nIf the template has multiple element at the root level\nthe output is an array of `h` results:\n\n```js\nconsole.log(html`\n  <h1 id=hello>Hello</h1>\n  <div class=world>World!</div>\n`);\n// [\n//   {\n//     type: 'h1',\n//     props: { id: 'hello' },\n//     children: ['Hello']\n//   },\n//   {\n//     type: 'div',\n//     props: { class: 'world' },\n//     children: ['world!']\n//   }\n// ]\n```\n\n### Caching\n\nThe default build of `htm` caches template strings, which means that it can return the same Javascript object at multiple points in the tree. If you don't want this behaviour, you have three options:\n\n* Change your `h` function to copy nodes when needed.\n* Add the code `this[0] = 3;` at the beginning of your `h` function, which disables caching of created elements.\n* Use `htm/mini`, which disables caching by default.\n\n## Example\n\nCurious to see what it all looks like? Here's a working app!\n\nIt's a single HTML file, and there's no build or tooling. You can edit it with nano.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <title>htm Demo</title>\n  <script type=\"module\">\n    import { html, Component, render } from 'https://unpkg.com/htm/preact/standalone.module.js';\n\n    class App extends Component {\n      addTodo() {\n        const { todos = [] } = this.state;\n        this.setState({ todos: todos.concat(`Item ${todos.length}`) });\n      }\n      render({ page }, { todos = [] }) {\n        return html`\n          <div class=\"app\">\n            <${Header} name=\"ToDo's (${page})\" />\n            <ul>\n              ${todos.map(todo => html`\n                <li key=${todo}>${todo}</li>\n              `)}\n            </ul>\n            <button onClick=${() => this.addTodo()}>Add Todo</button>\n            <${Footer}>footer content here<//>\n          </div>\n        `;\n      }\n    }\n\n    const Header = ({ name }) => html`<h1>${name} List</h1>`\n\n    const Footer = props => html`<footer ...${props} />`\n\n    render(html`<${App} page=\"All\" />`, document.body);\n  </script>\n</html>\n```\n\n[\u26a1\ufe0f **See live version** \u25b6](https://htm-demo-preact.glitch.me/)\n\n[\u26a1\ufe0f **Try this on CodeSandbox** \u25b6](https://codesandbox.io/s/x7pmq32j6q)\n\nHow nifty is that?\n\nNotice there's only one import - here we're using the prebuilt Preact integration since it's easier to import and a bit smaller.\n\nThe same example works fine without the prebuilt version, just using two imports:\n\n```js\nimport { h, Component, render } from 'preact';\nimport htm from 'htm';\n\nconst html = htm.bind(h);\n\nrender(html`<${App} page=\"All\" />`, document.body);\n```\n\n## Other Uses\n\nSince `htm` is designed to meet the same need as JSX, you can use it anywhere you'd use JSX.\n\n**Generate HTML using [vhtml]:**\n\n```js\nimport htm from 'htm';\nimport vhtml from 'vhtml';\n\nconst html = htm.bind(vhtml);\n\nconsole.log( html`<h1 id=hello>Hello world!</h1>` );\n// '<h1 id=\"hello\">Hello world!</h1>'\n```\n\n**Webpack configuration via [jsxobj]:** ([details here](https://webpack.js.org/configuration/configuration-languages/#babel-and-jsx)) _(never do this)_\n\n```js\nimport htm from 'htm';\nimport jsxobj from 'jsxobj';\n\nconst html = htm.bind(jsxobj);\n\nconsole.log(html`\n  <webpack watch mode=production>\n    <entry path=\"src/index.js\" />\n  </webpack>\n`);\n// {\n//   watch: true,\n//   mode: 'production',\n//   entry: {\n//     path: 'src/index.js'\n//   }\n// }\n```\n\n## Demos & Examples\n\n- [Canadian Holidays](https://github.com/pcraig3/hols): A full app using HTM and Server-Side Rendering\n- [HTM SSR Example](https://github.com/timarney/htm-ssr-demo): Shows how to do SSR with HTM\n- [HTM + Preact SSR Demo](https://gist.github.com/developit/699c8d8f180a1e4eed58167f9c6711be)\n- [HTM + vhtml SSR Demo](https://gist.github.com/developit/ff925c3995b4a129b6b977bf7cd12ebd)\n\n## Project Status\n\nThe original goal for `htm` was to create a wrapper around Preact that felt natural for use untranspiled in the browser. I wanted to use Virtual DOM, but I wanted to eschew build tooling and use ES Modules directly.\n\n This meant giving up JSX, and the closest alternative was [Tagged Templates]. So, I wrote this library to patch up the differences between the two as much as possible. The technique turns out to be framework-agnostic, so it should work great with any library or renderer that works with JSX.\n\n`htm` is stable, fast, well-tested and ready for production use.\n\n[Tagged Templates]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates\n[lit-html]: https://github.com/Polymer/lit-html\n[babel-plugin-htm]: https://github.com/developit/htm/tree/master/packages/babel-plugin-htm\n[lit-html VSCode extension]: https://marketplace.visualstudio.com/items?itemName=bierner.lit-html\n[vim-jsx-pretty plugin]: https://github.com/MaxMEllon/vim-jsx-pretty\n[vhtml]: https://github.com/developit/vhtml\n[jsxobj]: https://github.com/developit/jsxobj\n[hyperscript]: https://github.com/hyperhype/hyperscript\n[all modern browsers]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Browser_compatibility\n",
        "releases": [
            {
                "name": "3.1.1",
                "date": "2022-04-26T16:24:14Z"
            },
            {
                "name": "",
                "date": "2021-07-09T15:35:47Z"
            },
            {
                "name": "babel-plugin-transform-jsx-to-htm v2.2.0",
                "date": "2021-07-09T15:30:22Z"
            },
            {
                "name": "",
                "date": "2020-04-15T16:43:43Z"
            },
            {
                "name": "v3.0.3",
                "date": "2020-02-05T11:07:15Z"
            },
            {
                "name": "v3.0.2",
                "date": "2020-01-28T18:03:51Z"
            },
            {
                "name": "v3.0.1",
                "date": "2020-01-21T17:13:12Z"
            },
            {
                "name": "\ud83c\udf89 HTM 3 is here!",
                "date": "2020-01-21T17:00:01Z"
            },
            {
                "name": "",
                "date": "2019-07-31T00:24:37Z"
            },
            {
                "name": "2.2.0",
                "date": "2019-07-29T17:11:16Z"
            },
            {
                "name": "",
                "date": "2019-02-28T23:00:06Z"
            },
            {
                "name": "",
                "date": "2019-02-25T20:26:04Z"
            },
            {
                "name": "",
                "date": "2018-12-20T20:43:09Z"
            },
            {
                "name": "",
                "date": "2018-11-21T01:34:53Z"
            },
            {
                "name": "",
                "date": "2018-07-30T19:52:01Z"
            },
            {
                "name": "first release",
                "date": "2018-07-30T19:25:09Z"
            }
        ]
    }
}