{
    "https://api.github.com/repos/pmndrs/valtio": {
        "forks": 265,
        "watchers": 9300,
        "stars": 9300,
        "languages": {
            "TypeScript": 202460,
            "JavaScript": 6270,
            "CSS": 4927
        },
        "commits": [
            "2025-01-15T03:30:01Z",
            "2025-01-14T01:29:28Z",
            "2025-01-12T11:48:11Z",
            "2025-01-11T22:47:30Z",
            "2025-01-11T05:26:17Z",
            "2025-01-07T22:43:50Z",
            "2025-01-06T03:36:05Z",
            "2025-01-04T02:28:04Z",
            "2024-12-31T00:19:32Z",
            "2024-12-28T01:55:51Z",
            "2024-12-20T00:44:38Z",
            "2024-12-19T13:10:16Z",
            "2024-12-18T10:40:58Z",
            "2024-12-17T07:12:08Z",
            "2024-12-17T01:58:53Z",
            "2024-12-16T13:43:09Z",
            "2024-12-16T00:35:53Z",
            "2024-12-14T02:10:04Z",
            "2024-12-13T13:40:00Z",
            "2024-12-13T04:15:25Z",
            "2024-12-12T15:30:17Z",
            "2024-12-09T23:34:37Z",
            "2024-12-06T04:19:47Z",
            "2024-11-13T08:37:02Z",
            "2024-11-13T02:07:07Z",
            "2024-11-10T01:27:50Z",
            "2024-11-09T00:48:21Z",
            "2024-11-05T11:28:33Z",
            "2024-11-05T11:27:55Z",
            "2024-11-05T11:19:27Z"
        ],
        "creation_date": "2020-11-16T22:30:51Z",
        "contributors": 30,
        "topics": [
            "mutable",
            "proxy",
            "react",
            "state"
        ],
        "subscribers": 39,
        "readme": "<img src=\"logo.svg\" alt=\"valtio\">\n<br />\n<br />\n\n<code>npm install valtio</code> makes proxy-state simple\n\n[![Build Status](https://img.shields.io/github/actions/workflow/status/pmndrs/valtio/lint-and-type.yml?branch=main&style=flat&colorA=000000&colorB=000000)](https://github.com/pmndrs/valtio/actions?query=workflow%3ALint)\n[![Build Size](https://img.shields.io/bundlephobia/minzip/valtio?label=bundle%20size&style=flat&colorA=000000&colorB=000000)](https://bundlephobia.com/result?p=valtio)\n[![Version](https://img.shields.io/npm/v/valtio?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/valtio)\n[![Downloads](https://img.shields.io/npm/dt/valtio.svg?style=flat&colorA=000000&colorB=000000)](https://www.npmjs.com/package/valtio)\n[![Discord Shield](https://img.shields.io/discord/740090768164651008?style=flat&colorA=000000&colorB=000000&label=discord&logo=discord&logoColor=ffffff)](https://discord.gg/poimandres)\n\n#### Wrap your state object\n\nValtio turns the object you pass it into a self-aware proxy.\n\n```jsx\nimport { proxy, useSnapshot } from 'valtio'\n\nconst state = proxy({ count: 0, text: 'hello' })\n```\n\n#### Mutate from anywhere\n\nYou can make changes to it in the same way you would to a normal js-object.\n\n```jsx\nsetInterval(() => {\n  ++state.count\n}, 1000)\n```\n\n#### React via useSnapshot\n\nCreate a local snapshot that catches changes. Rule of thumb: read from snapshots in render function, otherwise use the source. The component will only re-render when the parts of the state you access have changed, it is render-optimized.\n\n```jsx\n// This will re-render on `state.count` change but not on `state.text` change\nfunction Counter() {\n  const snap = useSnapshot(state)\n  return (\n    <div>\n      {snap.count}\n      <button onClick={() => ++state.count}>+1</button>\n    </div>\n  )\n}\n```\n\n<details>\n<summary>Note for TypeScript users: Return type of useSnapshot can be too strict.</summary>\n\nThe `snap` variable returned by `useSnapshot` is a (deeply) read-only object.\nIts type has `readonly` attribute, which may be too strict for some use cases.\n\nTo mitigate typing difficulties, you might want to loosen the type definition:\n\n```ts\ndeclare module 'valtio' {\n  function useSnapshot<T extends object>(p: T): T\n}\n```\n\nSee [#327](https://github.com/pmndrs/valtio/issues/327) for more information.\n\n</details>\n\n<details>\n<summary>Note: useSnapshot returns a new proxy for render optimization.</summary>\n\nInternally, `useSnapshot` calls `snapshot` in valtio/vanilla,\nand wraps the snapshot object with another proxy to detect property access.\nThis feature is based on [proxy-compare](https://github.com/dai-shi/proxy-compare).\n\nTwo kinds of proxies are used for different purposes:\n\n- `proxy()` from `valtio/vanilla` is for mutation tracking or write tracking.\n- `createProxy()` from `proxy-compare` is for usage tracking or read tracking.\n</details>\n\n<details>\n<summary>Use of <code>this</code> is for expert users.</summary>\n\nValtio tries best to handle `this` behavior\nbut it's hard to understand without familiarity.\n\n```js\nconst state = proxy({\n  count: 0,\n  inc() {\n    ++this.count\n  },\n})\nstate.inc() // `this` points to `state` and it works fine\nconst snap = useSnapshot(state)\nsnap.inc() // `this` points to `snap` and it doesn't work because snapshot is frozen\n```\n\nTo avoid this pitfall, the recommended pattern is not to use `this` and prefer arrow function.\n\n```js\nconst state = proxy({\n  count: 0,\n  inc: () => {\n    ++state.count\n  },\n})\n```\n\n</details>\n\nIf you are new to this, it's highly recommended to use\n[eslint-plugin-valtio](https://github.com/pmndrs/eslint-plugin-valtio).\n\n#### Subscribe from anywhere\n\nYou can access state outside of your components and subscribe to changes.\n\n```jsx\nimport { subscribe } from 'valtio'\n\n// Subscribe to all state changes\nconst unsubscribe = subscribe(state, () =>\n  console.log('state has changed to', state),\n)\n// Unsubscribe by calling the result\nunsubscribe()\n```\n\nYou can also subscribe to a portion of state.\n\n```jsx\nconst state = proxy({ obj: { foo: 'bar' }, arr: ['hello'] })\n\nsubscribe(state.obj, () => console.log('state.obj has changed to', state.obj))\nstate.obj.foo = 'baz'\n\nsubscribe(state.arr, () => console.log('state.arr has changed to', state.arr))\nstate.arr.push('world')\n```\n\nTo subscribe to a primitive value of state, consider `subscribeKey` in utils.\n\n```jsx\nimport { subscribeKey } from 'valtio/utils'\n\nconst state = proxy({ count: 0, text: 'hello' })\nsubscribeKey(state, 'count', (v) =>\n  console.log('state.count has changed to', v),\n)\n```\n\nThere is another util `watch` which might be convenient in some cases.\n\n```jsx\nimport { watch } from 'valtio/utils'\n\nconst state = proxy({ count: 0 })\nconst stop = watch((get) => {\n  console.log('state has changed to', get(state)) // auto-subscribe on use\n})\n```\n\n#### Suspend your components\n\nValtio is compatible with React 19 `use` hook. This eliminates all the async back-and-forth, you can access your data directly while the parent is responsible for fallback state and error handling.\n\n```jsx\nimport { use } from 'react' // React 19\n// import { use } from 'react18-use' // React 18\n\nconst state = proxy({ post: fetch(url).then((res) => res.json()) })\n\nfunction Post() {\n  const snap = useSnapshot(state)\n  return <div>{use(snap.post).title}</div>\n}\n\nfunction App() {\n  return (\n    <Suspense fallback={<span>waiting...</span>}>\n      <Post />\n    </Suspense>\n  )\n}\n```\n\nIt still suffers from \"de-opt\", which prevents `useTransition` to work well. To mitigate it, there is a third-party library [use-valtio](https://github.com/valtiojs/use-valtio).\n\n#### Holding objects in state without tracking them\n\nThis may be useful if you have large, nested objects with accessors that you don't want to proxy. `ref` allows you to keep these objects inside the state model.\n\nSee [#61](https://github.com/pmndrs/valtio/issues/61) and [#178](https://github.com/pmndrs/valtio/issues/178) for more information.\n\n```js\nimport { proxy, ref } from 'valtio'\n\nconst state = proxy({\n  count: 0,\n  dom: ref(document.body),\n})\n```\n\n#### Update transiently (for often occurring state-changes)\n\nYou can read state in a component without causing re-render.\n\n```jsx\nfunction Foo() {\n  const { count, text } = state\n  // ...\n```\n\nOr, you can have more control with subscribing in useEffect.\n\n```jsx\nfunction Foo() {\n  const total = useRef(0)\n  useEffect(() => subscribe(state.arr, () => {\n    total.current = state.arr.reduce((p, c) => p + c)\n  }), [])\n  // ...\n```\n\n#### Update synchronously\n\nBy default, state mutations are batched before triggering re-render.\nSometimes, we want to disable the batching.\nThe known use case of this is `<input>` [#270](https://github.com/pmndrs/valtio/issues/270).\n\n```jsx\nfunction TextBox() {\n  const snap = useSnapshot(state, { sync: true })\n  return (\n    <input value={snap.text} onChange={(e) => (state.text = e.target.value)} />\n  )\n}\n```\n\n#### Dev tools\n\nYou can use [Redux DevTools Extension](https://github.com/reduxjs/redux-devtools) for plain objects and arrays.\n\n```jsx\nimport { devtools } from 'valtio/utils'\n\nconst state = proxy({ count: 0, text: 'hello' })\nconst unsub = devtools(state, { name: 'state name', enabled: true })\n```\n\n<details>\n  <summary>Manipulating state with Redux DevTools</summary>\nThe screenshot below shows how to use Redux DevTools to manipulate state. First select the object from the instances drop down. Then type in a JSON object to dispatch. Then click \"Dispatch\". Notice how it changes the state.\n\n<br/>\n<img width=\"564\" alt=\"image\" src=\"https://user-images.githubusercontent.com/6372489/141134955-26e9ffce-1e2a-4c8c-a9b3-d9da739610fe.png\">\n</details>\n\n#### Use it vanilla\n\nValtio is not tied to React, you can use it in vanilla-js.\n\n```jsx\nimport { proxy, subscribe, snapshot } from 'valtio/vanilla'\n// import { ... } from 'valtio/vanilla/utils'\n\nconst state = proxy({ count: 0, text: 'hello' })\n\nsubscribe(state, () => {\n  console.log('state is mutated')\n  const obj = snapshot(state) // A snapshot is an immutable object\n})\n```\n\n#### `useProxy` util\n\nWhile the separation of proxy state and its snapshot is important,\nit's confusing for beginners.\nWe have a convenient util to improve developer experience. useProxy returns shallow proxy state and its snapshot, meaning you can only mutate on root level.\n\n```js\nimport { useProxy } from 'valtio/utils'\n\nconst state = proxy({ count: 1 })\n\nconst Component = () => {\n  // useProxy returns a special proxy that can be used both in render and callbacks\n  // The special proxy has to be used directly in a function scope. You can't destructure it outside the scope.\n  const $state = useProxy(state)\n  return (\n    <div>\n      {$state.count}\n      <button onClick={() => ++$state.count}>+1</button>\n    </div>\n  )\n}\n```\n\n#### Computed properties\n\nYou can define computed properties with object getters.\n\n```js\nconst state = proxy({\n  count: 1,\n  get doubled() {\n    return this.count * 2\n  },\n})\n```\n\nConsider it as an advanced usage, because the behavior of `this` is sometimes confusing.\n\nFor more information, check out [this guide](./docs/guides/computed-properties.mdx).\n\n#### `proxySet` util\n\nThis is to create a proxy which mimic the native Set behavior. The API is the same as Set API\n\n```js\nimport { proxySet } from 'valtio/utils'\n\nconst state = proxySet([1, 2, 3])\n//can be used inside a proxy as well\n//const state = proxy({\n//    count: 1,\n//    set: proxySet()\n//})\n\nstate.add(4)\nstate.delete(1)\nstate.forEach((v) => console.log(v)) // 2,3,4\n```\n\n#### `proxyMap` util\n\nThis is to create a proxy which emulate the native Map behavior. The API is the same as Map API\n\n```js\nimport { proxyMap } from 'valtio/utils'\n\nconst state = proxyMap([\n  ['key', 'value'],\n  ['key2', 'value2'],\n])\nstate.set('key', 'value')\nstate.delete('key')\nstate.get('key') // ---> value\nstate.forEach((value, key) => console.log(key, value)) // ---> \"key\", \"value\", \"key2\", \"value2\"\n```\n\n#### Compatibility\n\nValtio v2 works with React 18 and up.\nIt only depends on `react` and works with any\nrenderers such as `react-dom`, `react-native`, `react-three-fiber`, and so on.\n\nValtio works on Node.js, Next.js and other frameworks.\n\nValtio also works without React. See [vanilla](#use-it-vanilla).\n\n#### Plugins\n\n- [eslint-plugin-valtio](https://github.com/pmndrs/eslint-plugin-valtio)\n\n#### Recipes\n\nValtio is unopinionated about best practices.\nThe community is working on recipes.\n\n- [How to organize actions](https://github.com/pmndrs/valtio/blob/main/docs/how-tos/how-to-organize-actions.mdx)\n- [How to persist states](https://github.com/pmndrs/valtio/blob/main/docs/how-tos/how-to-persist-states.mdx)\n- [How to use with context](https://github.com/pmndrs/valtio/blob/main/docs/how-tos/how-to-use-with-context.mdx)\n- [How to split and compose states](https://github.com/pmndrs/valtio/blob/main/docs/how-tos/how-to-split-and-compose-states.mdx)\n",
        "releases": [
            {
                "name": "v2.1.2",
                "date": "2024-11-05T11:38:54Z"
            },
            {
                "name": "v2.1.1",
                "date": "2024-10-28T07:41:58Z"
            },
            {
                "name": "v2.1.0",
                "date": "2024-10-16T14:23:00Z"
            },
            {
                "name": "v2.0.0",
                "date": "2024-08-29T12:38:54Z"
            },
            {
                "name": "v2.0.0-rc.2",
                "date": "2024-08-18T13:34:34Z"
            },
            {
                "name": "v2.0.0-rc.1",
                "date": "2024-08-15T13:21:26Z"
            },
            {
                "name": "v2.0.0-rc.0",
                "date": "2024-08-15T01:42:40Z"
            },
            {
                "name": "v1.13.2",
                "date": "2024-03-02T03:52:28Z"
            },
            {
                "name": "v1.13.1",
                "date": "2024-02-09T01:54:13Z"
            },
            {
                "name": "v1.13.0",
                "date": "2024-01-06T03:13:19Z"
            },
            {
                "name": "v1.12.1",
                "date": "2023-11-28T01:42:11Z"
            },
            {
                "name": "v1.12.0",
                "date": "2023-11-03T02:07:33Z"
            },
            {
                "name": "v1.11.3",
                "date": "2023-10-23T02:52:50Z"
            },
            {
                "name": "v1.11.2",
                "date": "2023-08-12T11:30:21Z"
            },
            {
                "name": "v1.11.1",
                "date": "2023-07-27T01:38:49Z"
            },
            {
                "name": "v1.11.0",
                "date": "2023-07-20T06:52:40Z"
            },
            {
                "name": "v1.10.7",
                "date": "2023-07-10T14:41:04Z"
            },
            {
                "name": "v1.10.6",
                "date": "2023-06-21T11:57:20Z"
            },
            {
                "name": "v1.10.5",
                "date": "2023-05-04T14:58:12Z"
            },
            {
                "name": "v1.10.4",
                "date": "2023-04-04T05:00:02Z"
            },
            {
                "name": "v1.10.3",
                "date": "2023-02-25T00:38:49Z"
            },
            {
                "name": "v1.10.2",
                "date": "2023-02-14T03:36:32Z"
            },
            {
                "name": "v1.10.1",
                "date": "2023-02-07T15:03:19Z"
            },
            {
                "name": "v1.10.0",
                "date": "2023-02-04T06:51:57Z"
            },
            {
                "name": "v1.9.0",
                "date": "2023-01-15T07:27:18Z"
            },
            {
                "name": "v1.8.2",
                "date": "2023-01-05T11:39:31Z"
            },
            {
                "name": "v1.8.0",
                "date": "2022-12-27T12:38:05Z"
            },
            {
                "name": "v1.7.6",
                "date": "2022-11-18T02:46:53Z"
            },
            {
                "name": "v1.7.5",
                "date": "2022-10-29T15:08:16Z"
            },
            {
                "name": "v1.7.4",
                "date": "2022-10-15T11:20:26Z"
            },
            {
                "name": "v1.7.3",
                "date": "2022-10-15T01:32:39Z"
            },
            {
                "name": "v1.7.2",
                "date": "2022-10-09T09:59:11Z"
            },
            {
                "name": "v1.7.1",
                "date": "2022-10-07T11:39:09Z"
            },
            {
                "name": "v1.7.0",
                "date": "2022-09-05T04:42:25Z"
            },
            {
                "name": "v1.6.4",
                "date": "2022-08-18T22:25:24Z"
            },
            {
                "name": "v1.6.3",
                "date": "2022-07-19T11:26:42Z"
            },
            {
                "name": "v1.6.2",
                "date": "2022-07-13T14:34:45Z"
            },
            {
                "name": "v1.6.1",
                "date": "2022-05-20T12:32:36Z"
            },
            {
                "name": "v1.6.0",
                "date": "2022-04-21T14:14:27Z"
            },
            {
                "name": "v1.5.2",
                "date": "2022-04-07T12:21:44Z"
            },
            {
                "name": "v1.5.1",
                "date": "2022-04-02T02:08:33Z"
            },
            {
                "name": "v1.5.0",
                "date": "2022-03-30T11:59:22Z"
            },
            {
                "name": "v1.4.0",
                "date": "2022-03-16T11:24:10Z"
            },
            {
                "name": "v1.3.1",
                "date": "2022-02-28T11:41:46Z"
            },
            {
                "name": "v1.3.0",
                "date": "2022-02-12T13:33:51Z"
            },
            {
                "name": "v1.2.12",
                "date": "2022-02-08T12:12:20Z"
            },
            {
                "name": "v1.2.11",
                "date": "2022-01-25T12:05:06Z"
            },
            {
                "name": "v1.2.10",
                "date": "2022-01-24T12:09:43Z"
            },
            {
                "name": "v1.2.9",
                "date": "2022-01-17T11:38:44Z"
            },
            {
                "name": "v1.2.8",
                "date": "2022-01-11T12:40:16Z"
            },
            {
                "name": "v1.2.7",
                "date": "2021-12-01T14:39:16Z"
            },
            {
                "name": "v1.2.6",
                "date": "2021-11-09T22:50:23Z"
            },
            {
                "name": "v1.2.5",
                "date": "2021-10-18T12:18:18Z"
            },
            {
                "name": "v.1.2.4",
                "date": "2021-10-01T13:55:13Z"
            },
            {
                "name": "v1.2.3",
                "date": "2021-09-18T11:57:33Z"
            },
            {
                "name": "v1.2.2",
                "date": "2021-08-29T09:42:31Z"
            },
            {
                "name": "v1.2.1",
                "date": "2021-08-13T09:20:05Z"
            },
            {
                "name": "v1.2.0",
                "date": "2021-08-10T10:43:41Z"
            },
            {
                "name": "v1.1.3",
                "date": "2021-08-01T13:26:49Z"
            },
            {
                "name": "v1.1.2",
                "date": "2021-07-30T13:15:45Z"
            },
            {
                "name": "v1.1.1",
                "date": "2021-07-29T13:14:28Z"
            },
            {
                "name": "v1.1.0",
                "date": "2021-07-24T23:23:28Z"
            },
            {
                "name": "v1.0.7",
                "date": "2021-07-09T14:30:05Z"
            },
            {
                "name": "v1.0.6",
                "date": "2021-06-05T01:03:54Z"
            },
            {
                "name": "v1.0.5",
                "date": "2021-05-15T15:43:47Z"
            },
            {
                "name": "v1.0.4",
                "date": "2021-04-28T13:08:35Z"
            },
            {
                "name": "v1.0.3",
                "date": "2021-04-06T15:59:33Z"
            },
            {
                "name": "v1.0.2",
                "date": "2021-04-05T11:41:17Z"
            },
            {
                "name": "v1.0.1",
                "date": "2021-04-01T14:35:06Z"
            },
            {
                "name": "v1.0.0",
                "date": "2021-03-21T13:17:34Z"
            }
        ]
    }
}