{
    "https://api.github.com/repos/drduh/YubiKey-Guide": {
        "forks": 1203,
        "watchers": 11394,
        "stars": 11394,
        "languages": {
            "HTML": 298132,
            "Nix": 10789,
            "Shell": 778
        },
        "commits": [
            "2025-01-01T20:09:41Z",
            "2024-12-21T15:41:56Z",
            "2024-12-09T00:13:47Z",
            "2024-12-09T00:12:48Z",
            "2024-12-03T12:43:32Z",
            "2024-11-21T08:10:18Z",
            "2024-11-21T05:21:59Z",
            "2024-11-03T18:21:56Z",
            "2024-10-31T19:31:48Z",
            "2024-10-26T02:51:35Z",
            "2024-10-16T23:58:34Z",
            "2024-08-18T19:00:22Z",
            "2024-08-18T18:59:50Z",
            "2024-08-18T18:47:11Z",
            "2024-08-18T18:32:47Z",
            "2024-08-17T20:23:20Z",
            "2024-08-17T20:19:18Z",
            "2024-07-21T21:01:37Z",
            "2024-07-21T21:01:10Z",
            "2024-07-20T09:36:36Z",
            "2024-07-20T12:43:25Z",
            "2024-07-20T12:42:56Z",
            "2024-07-20T12:28:29Z",
            "2024-07-20T09:29:49Z",
            "2024-07-08T02:12:58Z",
            "2024-07-08T02:12:40Z",
            "2024-07-07T08:25:10Z",
            "2024-07-07T08:18:41Z",
            "2024-07-06T20:55:40Z",
            "2024-07-04T22:01:59Z"
        ],
        "creation_date": "2016-02-01T01:56:49Z",
        "contributors": 30,
        "topics": [
            "gnupg",
            "gpg",
            "gpg-agent",
            "gpg-configuration",
            "hardening",
            "pgp",
            "remote-access",
            "rsa-cryptography",
            "security",
            "smartcard",
            "ssh",
            "yubikey"
        ],
        "subscribers": 218,
        "readme": "This is a guide to using [YubiKey](https://www.yubico.com/products/identifying-your-yubikey/) as a [smart card](https://security.stackexchange.com/questions/38924/how-does-storing-gpg-ssh-private-keys-on-smart-cards-compare-to-plain-usb-drives) for secure encryption, signature and authentication operations.\n\nKeys stored on YubiKey are [non-exportable](https://web.archive.org/web/20201125172759/https://support.yubico.com/hc/en-us/articles/360016614880-Can-I-Duplicate-or-Back-Up-a-YubiKey-), unlike filesystem-based credentials, while remaining convenient for daily use. YubiKey can be configured to require a physical touch for cryptographic operations, reducing the risk of credential compromise.\n\nTo suggest an improvement, send a pull request or open an [issue](https://github.com/drduh/YubiKey-Guide/issues).\n\n- [Purchase YubiKey](#purchase-yubikey)\n- [Prepare environment](#prepare-environment)\n- [Install software](#install-software)\n- [Prepare GnuPG](#prepare-gnupg)\n   * [Configuration](#configuration)\n   * [Identity](#identity)\n   * [Key](#key)\n   * [Expiration](#expiration)\n   * [Passphrase](#passphrase)\n- [Create Certify key](#create-certify-key)\n- [Add additional uids (optional)](#add-additional-uids-optional)\n- [Create Subkeys](#create-subkeys)\n- [Verify keys](#verify-keys)\n- [Backup keys](#backup-keys)\n- [Export public key](#export-public-key)\n- [Configure YubiKey](#configure-yubikey)\n   * [Change PIN](#change-pin)\n   * [Set attributes](#set-attributes)\n- [Transfer Subkeys](#transfer-subkeys)\n   * [Signature key](#signature-key)\n   * [Encryption key](#encryption-key)\n   * [Authentication key](#authentication-key)\n- [Verify transfer](#verify-transfer)\n- [Finish setup](#finish-setup)\n- [Using YubiKey](#using-yubikey)\n   * [Encryption](#encryption)\n   * [Signature](#signature)\n   * [Configure touch](#configure-touch)\n   * [SSH](#ssh)\n      + [Replace agents](#replace-agents)\n      + [Copy public key](#copy-public-key)\n      + [Import SSH keys](#import-ssh-keys)\n      + [SSH agent forwarding](#ssh-agent-forwarding)\n         - [Use ssh-agent](#use-ssh-agent)\n         - [Use S.gpg-agent.ssh](#use-sgpg-agentssh)\n         - [Chained forwarding](#chained-forwarding)\n   * [GitHub](#github)\n   * [GnuPG agent forwarding](#gnupg-agent-forwarding)\n      + [Legacy distributions](#legacy-distributions)\n      + [Chained GnuPG agent forwarding](#chained-gnupg-agent-forwarding)\n   * [Using multiple YubiKeys](#using-multiple-yubikeys)\n   * [Email](#email)\n      + [Thunderbird](#thunderbird)\n      + [Mailvelope](#mailvelope)\n      + [Mutt](#mutt)\n   * [Keyserver](#keyserver)\n- [Updating keys](#updating-keys)\n   * [Renew Subkeys](#renew-subkeys)\n   * [Rotate Subkeys](#rotate-subkeys)\n- [Reset YubiKey](#reset-yubikey)\n- [Optional hardening](#optional-hardening)\n   * [Improving entropy](#improving-entropy)\n   * [Enable KDF](#enable-kdf)\n   * [Network considerations](#network-considerations)\n- [Notes](#notes)\n- [Troubleshooting](#troubleshooting)\n- [Alternative solutions](#alternative-solutions)\n- [Additional resources](#additional-resources)\n\n# Purchase YubiKey\n\n[Current YubiKeys](https://www.yubico.com/store/compare/) except the FIDO-only Security Key Series and Bio Series YubiKeys are compatible with this guide.\n\n[Verify YubiKey](https://support.yubico.com/hc/en-us/articles/360013723419-How-to-Confirm-Your-Yubico-Device-is-Genuine) by visiting [yubico.com/genuine](https://www.yubico.com/genuine/). Select *Verify Device* to begin the process. Touch the YubiKey when prompted and allow the site to see the make and model of the device when prompted. This device attestation may help mitigate [supply chain attacks](https://media.defcon.org/DEF%20CON%2025/DEF%20CON%2025%20presentations/DEF%20CON%2025%20-%20r00killah-and-securelyfitz-Secure-Tokin-and-Doobiekeys.pdf).\n\nSeveral portable storage devices (such as microSD cards) for storing encrypted backups are also recommended.\n\n# Prepare environment\n\nA dedicated, secure operating environment is recommended to generate cryptographic keys.\n\nThe following is a general ranking of environments least to most hospitable to generating materials:\n\n1. Public, shared or other computer owned by someone else\n1. Daily-use personal operating system with unrestricted network access\n1. Virtualized operating system with limited capabilities (using [virt-manager](https://virt-manager.org/), VirtualBox or VMware, for example)\n1. Dedicated and hardened [Debian](https://www.debian.org/) or [OpenBSD](https://www.openbsd.org/) installation\n1. Ephemeral [Debian Live](https://www.debian.org/CD/live/) or [Tails](https://tails.boum.org/index.en.html) booted without primary storage attached\n1. Hardened hardware and firmware ([Coreboot](https://www.coreboot.org/), [Intel ME removed](https://github.com/corna/me_cleaner))\n1. Air-gapped system without network capabilities, preferably ARM-based Raspberry Pi or other architecturally diverse equivalent\n\nDebian Live is used in this guide to balance usability and security, with some additional instructions for OpenBSD.\n\nDownload the latest image and signature files:\n\n```console\ncurl -fLO \"https://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/SHA512SUMS\"\n\ncurl -fLO \"https://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/SHA512SUMS.sign\"\n\ncurl -fLO \"https://cdimage.debian.org/debian-cd/current-live/amd64/iso-hybrid/$(awk '/xfce.iso$/ {print $2}' SHA512SUMS)\"\n```\n\nDownload the Debian signing public key:\n\n```console\ngpg --keyserver hkps://keyring.debian.org --recv DF9B9C49EAA9298432589D76DA87E80D6294BE9B\n```\n\nIf the public key cannot be received, use a different keyserver or DNS server:\n\n```console\ngpg --keyserver hkps://keyserver.ubuntu.com:443 --recv DF9B9C49EAA9298432589D76DA87E80D6294BE9B\n```\n\nVerify the signature:\n\n```console\ngpg --verify SHA512SUMS.sign SHA512SUMS\n```\n\n`gpg: Good signature from \"Debian CD signing key <debian-cd@lists.debian.org>\"` must appear in the output.\n\nVerify the cryptographic hash of the image file matches the one in the signed file:\n\n```console\ngrep $(sha512sum debian-live-*-amd64-xfce.iso) SHA512SUMS\n```\n\nSee [Verifying authenticity of Debian CDs](https://www.debian.org/CD/verify) for more information.\n\nConnect a portable storage device and identify the disk label - this guide uses `/dev/sdc` throughout, but this value may differ on your system:\n\n**Linux**\n\n```console\n$ sudo dmesg | tail\nusb-storage 3-2:1.0: USB Mass Storage device detected\nsd 2:0:0:0: [sdc] Attached SCSI removable disk\n```\n\nCopy the Debian image to the device:\n\n```console\nsudo dd if=debian-live-*-amd64-xfce.iso of=/dev/sdc bs=4M status=progress ; sync\n```\n\n**OpenBSD**\n\n```console\n$ dmesg | tail -n2\nsd2 at scsibus4 targ 1 lun 0: <TS-RDF5, SD Transcend, TS3A> SCSI4 0/direct removable serial.0000000000000\nsd2: 15193MB, 512 bytes/sector, 31116288 sectors\n\n$ doas dd if=debian-live-*-amd64-xfce.iso of=/dev/rsd2c bs=4m\n465+1 records in\n465+1 records out\n1951432704 bytes transferred in 139.125 secs (14026448 bytes/sec)\n```\n\nPower off, remove internal hard drives and all unnecessary devices, such as the wireless card.\n\n# Install software\n\nLoad the operating system and configure networking. Optional hardening steps related to networking can be found [below](#network-considerations).\n\n**Note** If the screen locks on Debian Live, unlock with `user` / `live`\n\nOpen terminal and install required software packages.\n\n**Debian/Ubuntu**\n\n```console\nsudo apt update\n\nsudo apt -y upgrade\n\nsudo apt -y install \\\n  wget gnupg2 gnupg-agent dirmngr \\\n  cryptsetup scdaemon pcscd \\\n  yubikey-personalization yubikey-manager\n```\n\n**OpenBSD**\n\n```console\ndoas pkg_add gnupg pcsc-tools\n```\n\n**macOS**\n\nDownload and install [Homebrew](https://brew.sh/) and the following packages:\n\n```console\nbrew install \\\n  gnupg yubikey-personalization ykman pinentry-mac wget\n```\n\n**Note** An additional Python package dependency may need to be installed to use [`ykman`](https://support.yubico.com/support/solutions/articles/15000012643-yubikey-manager-cli-ykman-user-guide) - `pip install yubikey-manager`\n\n**NixOS**\n\nBuild an air-gapped NixOS LiveCD image:\n\n```console\nref=$(git ls-remote https://github.com/drduh/Yubikey-Guide refs/heads/master | awk '{print $1}')\n\nnix build --experimental-features \"nix-command flakes\" \\\n  github:drduh/YubiKey-Guide/$ref#nixosConfigurations.yubikeyLive.x86_64-linux.config.system.build.isoImage\n```\n\nIf you have this repository checked out:\n\nRecommended, but optional: update `nixpkgs` and `drduh/config`:\n\n```console\nnix flake update --commit-lock-file\n```\n\nBuild the image:\n\n```console\nnix build --experimental-features \"nix-command flakes\" .#nixosConfigurations.yubikeyLive.x86_64-linux.config.system.build.isoImage\n```\n\nCopy it to a USB drive:\n\n```console\nsudo cp -v result/iso/yubikeyLive.iso /dev/sdc ; sync\n```\n\nSkip steps to create a temporary working directory and a hardened configuration, as they are already part of the image.\n\nIf you want to test your build before copying it into a USB stick, you can try it out on your machine using a tool like QEMU.\nPlease keep in mind that a virtualized environment does not provide the same amount of security as an ephemeral system (see *Prepare environment* above).\nHere is an example QEMU invocation after placing `yubikeyLive` in `result/iso` using the above `nix build` command:\n\n```console\n# Launch with 4G memory, 2 CPUs and KVM enabled\nqemu-system-x86_64 \\\n    -enable-kvm \\\n    -m 4G \\\n    -smp 2 \\\n    -drive readonly=on,media=cdrom,format=raw,file=result/iso/yubikeyLive.iso\n```\n\n**Arch**\n\n```console\nsudo pacman -Syu gnupg pcsclite ccid yubikey-personalization\n```\n\n**RHEL7**\n\n```console\nsudo yum install -y gnupg2 pinentry-curses pcsc-lite pcsc-lite-libs gnupg2-smime\n```\n\n**Fedora**\n\n```console\nsudo dnf install wget\n\nwget https://github.com/rpmsphere/noarch/raw/master/r/rpmsphere-release-38-1.noarch.rpm\n\nsudo rpm -Uvh rpmsphere-release*rpm\n\nsudo dnf install \\\n  gnupg2 dirmngr cryptsetup gnupg2-smime \\\n  pcsc-tools opensc pcsc-lite secure-delete \\\n  pgp-tools yubikey-personalization-gui\n```\n\n# Prepare GnuPG\n\nCreate a temporary directory which will be cleared on [reboot](https://en.wikipedia.org/wiki/Tmpfs) and set it as the GnuPG directory:\n\n```console\nexport GNUPGHOME=$(mktemp -d -t gnupg-$(date +%Y-%m-%d)-XXXXXXXXXX)\n```\n\n## Configuration\n\nImport or create a [hardened configuration](https://github.com/drduh/config/blob/master/gpg.conf):\n\n```console\ncd $GNUPGHOME\n\nwget https://raw.githubusercontent.com/drduh/config/master/gpg.conf\n```\n\nThe options will look similar to:\n\n```console\n$ grep -ve \"^#\" $GNUPGHOME/gpg.conf\npersonal-cipher-preferences AES256 AES192 AES\npersonal-digest-preferences SHA512 SHA384 SHA256\npersonal-compress-preferences ZLIB BZIP2 ZIP Uncompressed\ndefault-preference-list SHA512 SHA384 SHA256 AES256 AES192 AES ZLIB BZIP2 ZIP Uncompressed\ncert-digest-algo SHA512\ns2k-digest-algo SHA512\ns2k-cipher-algo AES256\ncharset utf-8\nno-comments\nno-emit-version\nno-greeting\nkeyid-format 0xlong\nlist-options show-uid-validity\nverify-options show-uid-validity\nwith-fingerprint\nrequire-cross-certification\nno-symkey-cache\narmor\nuse-agent\nthrow-keyids\n```\n\n**Note** Networking can be disabled for the remainder of the setup.\n\n## Identity\n\nWhen creating an identity with GnuPG, the default options ask for a \"Real name\", \"Email address\" and optional \"Comment\".\n\nDepending on how you plan to use GnuPG, set these values respectively:\n\n```console\nexport IDENTITY=\"YubiKey User <yubikey@example>\"\n```\n\nOr use any attribute which will uniquely identity the key (this may be incompatible with certain use cases):\n\n```console\nexport IDENTITY=\"My Cool YubiKey - 2024\"\n```\n\n## Key\n\nSelect the desired algorithm and key size. This guide recommends 4096-bit RSA.\n\nSet the value:\n\n```console\nexport KEY_TYPE=rsa4096\n```\n\n## Expiration\n\nDetermine the desired Subkey validity duration.\n\nSetting a Subkey expiry forces identity and credential lifecycle management. However, setting an expiry on the Certify key is pointless, because it can just be used to extend itself. [Revocation certificates](https://security.stackexchange.com/questions/14718/does-openpgp-key-expiration-add-to-security/79386#79386) should instead be used to revoke an identity.\n\nThis guide recommends a two year expiration for Subkeys to balance security and usability, however longer durations are possible to reduce maintenance frequency.\n\nWhen Subkeys expire, they may still be used to decrypt with GnuPG and authenticate with SSH, however they can **not** be used to encrypt nor sign new messages.\n\nSubkeys must be renewed or rotated using the Certify key - see [Updating keys](#updating-keys).\n\nSet the expiration date to two years:\n\n```console\nexport EXPIRATION=2y\n```\n\nOr set the expiration date to a specific date to schedule maintenance:\n\n```console\nexport EXPIRATION=2026-05-01\n```\n\n## Passphrase\n\nGenerate a passphrase for the Certify key. It will be used infrequently to manage Subkeys and should be very strong. The passphrase is recommended to consist of only uppercase letters and numbers for improved readability. [Diceware](https://secure.research.vt.edu/diceware) is another method for creating memorable passphrases.\n\nThe following commands will generate a strong passphrase and avoid ambiguous characters:\n\n```console\nexport CERTIFY_PASS=$(LC_ALL=C tr -dc 'A-Z1-9' < /dev/urandom | \\\n  tr -d \"1IOS5U\" | fold -w 30 | sed \"-es/./ /\"{1..26..5} | \\\n  cut -c2- | tr \" \" \"-\" | head -1) ; printf \"\\n$CERTIFY_PASS\\n\\n\"\n```\n\nWrite the passphrase in a secure location, ideally separate from the portable storage device used for key material, or memorize it.\n\nThis repository includes a [`passphrase.html`](https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/passphrase.html) template to help with credential transcription. Save the raw file, open it with a browser and print. Use a pen or permanent marker to select a letter or number on each row for each character in the passphrase. [`passphrase.csv`](https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/passphrase.csv) can also be printed without a browser:\n\n```console\nlp -d Printer-Name passphrase.csv\n```\n\n# Create Certify key\n\nThe primary key to generate is the Certify key, which is responsible for issuing Subkeys for encryption, signature and authentication operations.\n\nThe Certify key should be kept offline at all times and only accessed from a dedicated and secure environment to issue or revoke Subkeys.\n\nDo not set an expiration date on the Certify key.\n\nGenerate the Certify key:\n\n```console\necho \"$CERTIFY_PASS\" | gpg --batch --passphrase-fd 0 \\\n    --quick-generate-key \"$IDENTITY\" \"$KEY_TYPE\" cert never\n```\n\nSet and view the Certify key identifier and fingerprint for use later:\n\n```console\nexport KEYID=$(gpg -k --with-colons \"$IDENTITY\" | awk -F: '/^pub:/ { print $5; exit }')\n\nexport KEYFP=$(gpg -k --with-colons \"$IDENTITY\" | awk -F: '/^fpr:/ { print $10; exit }')\n\nprintf \"\\nKey ID: %40s\\nKey FP: %40s\\n\\n\" \"$KEYID\" \"$KEYFP\"\n```\n\n# Add additional uids (optional)\n\n## Rationale\n\nThis is an optional step if you have a use case which requires [additional identities](https://github.com/drduh/YubiKey-Guide/issues/445). Some non-exhaustive example use cases are:\n\n- different email addresses for different languages\n- different email addresses for professional versus personal but please see alternative reason below for not tying these addresses together\n- anonymized email addresses for different git providers\n\nAn alternative would be to have distinct keys but you would then require multiple YubiKeys, as each can only hold a single key for each type (signing, encryption, authentication). Nevertheless, there can be good reasons to have multiple YubiKeys:\n\n- if you have different email addresses for professional versus personal use cases, having distinct keys allow you to disassociate the identities\n- if you are also using the YubiKey as a U2F or FIDO2 device, having multiple YubiKeys is generally recommended as a backup measure\n\n## Steps\n\nDefine an array containing additional uids. As this is bash syntax, each array element should be surrounded by quotes and each element should be separated by a space:\n\n```console\ndeclare -a additional_uids\nadditional_uids=(\"Super Cool YubiKey 2024\" \"uid 1 <uid1@example.org>\")\n```\n\nAdd the additional uids to the key:\n\n```console\nfor uid in \"${additional_uids[@]}\" ; do \\\n    echo \"$CERTIFY_PASS\" | gpg --batch --passphrase-fd 0 --pinentry-mode=loopback --quick-add-uid \"$KEYFP\" \"$uid\"\ndone\n```\n\nAdjust the trust of the additional uids to be ultimate:\n\n```console\ngpg --command-fd=0 --pinentry-mode=loopback --edit-key \"$KEYID\" <<EOF\nuid *\ntrust\n5\ny\nsave\nEOF\n```\n\n# Create Subkeys\n\nUse the following command to generate Signature, Encryption and Authentication Subkeys using the previously configured key type, passphrase and expiration:\n\n```console\nfor SUBKEY in sign encrypt auth ; do \\\n  echo \"$CERTIFY_PASS\" | gpg --batch --pinentry-mode=loopback --passphrase-fd 0 \\\n      --quick-add-key \"$KEYFP\" \"$KEY_TYPE\" \"$SUBKEY\" \"$EXPIRATION\"\ndone\n```\n\n# Verify keys\n\nList available secret keys:\n\n```console\ngpg -K\n```\n\nThe output will display **[C]ertify, [S]ignature, [E]ncryption and [A]uthentication** keys:\n\n```console\nsec   rsa4096/0xF0F2CFEB04341FB5 2024-01-01 [C]\n      Key fingerprint = 4E2C 1FA3 372C BA96 A06A  C34A F0F2 CFEB 0434 1FB5\nuid                   [ultimate] YubiKey User <yubikey@example>\nssb   rsa4096/0xB3CD10E502E19637 2024-01-01 [S] [expires: 2026-05-01]\nssb   rsa4096/0x30CBE8C4B085B9F7 2024-01-01 [E] [expires: 2026-05-01]\nssb   rsa4096/0xAD9E24E1B8CB9600 2024-01-01 [A] [expires: 2026-05-01]\n```\n\n# Backup keys\n\nSave a copy of the Certify key, Subkeys and public key:\n\n```console\necho \"$CERTIFY_PASS\" | gpg --output $GNUPGHOME/$KEYID-Certify.key \\\n    --batch --pinentry-mode=loopback --passphrase-fd 0 \\\n    --armor --export-secret-keys $KEYID\n\necho \"$CERTIFY_PASS\" | gpg --output $GNUPGHOME/$KEYID-Subkeys.key \\\n    --batch --pinentry-mode=loopback --passphrase-fd 0 \\\n    --armor --export-secret-subkeys $KEYID\n\ngpg --output $GNUPGHOME/$KEYID-$(date +%F).asc \\\n    --armor --export $KEYID\n```\n\nCreate an **encrypted** backup on portable storage to be kept offline in a secure and durable location.\n\nThe following process is recommended to be repeated several times on multiple portable storage devices, as they are likely to fail over time. As an additional backup measure, [Paperkey](https://www.jabberwocky.com/software/paperkey/) can be used to make a physical copy of key materials for improved durability.\n\n**Tip** The [ext2](https://en.wikipedia.org/wiki/Ext2) filesystem without encryption can be mounted on Linux and OpenBSD. Use [FAT32](https://en.wikipedia.org/wiki/Fat32) or [NTFS](https://en.wikipedia.org/wiki/Ntfs) filesystem for macOS and Windows compatibility instead.\n\n**Linux**\n\nAttach a portable storage device and check its label, in this case `/dev/sdc`:\n\n```console\n$ sudo dmesg | tail\nusb-storage 3-2:1.0: USB Mass Storage device detected\nsd 2:0:0:0: [sdc] Attached SCSI removable disk\n\n$ sudo fdisk -l /dev/sdc\nDisk /dev/sdc: 14.9 GiB, 15931539456 bytes, 31116288 sectors\n```\n\n**Warning** Confirm the destination (`of`) before issuing the following command - it is destructive! This guide uses `/dev/sdc` throughout, but this value may be different on your system.\n\nZero the header to prepare for encryption:\n\n```console\nsudo dd if=/dev/zero of=/dev/sdc bs=4M count=1\n```\n\nRemove and re-connect the storage device.\n\nErase and create a new partition table:\n\n```console\nsudo fdisk /dev/sdc <<EOF\ng\nw\nEOF\n```\n\nCreate a small (at least 20 Mb is recommended to account for the LUKS header size) partition for storing secret materials:\n\n```console\nsudo fdisk /dev/sdc <<EOF\nn\n\n\n+20M\nw\nEOF\n```\n\nUse [LUKS](https://dys2p.com/en/2023-05-luks-security.html) to encrypt the new partition.\n\nGenerate another unique [Passphrase](#passphrase) (ideally different from the one used for the Certify key) to protect the encrypted volume:\n\n```console\nexport LUKS_PASS=$(LC_ALL=C tr -dc 'A-Z1-9' < /dev/urandom | \\\n  tr -d \"1IOS5U\" | fold -w 30 | sed \"-es/./ /\"{1..26..5} | \\\n  cut -c2- | tr \" \" \"-\" | head -1) ; printf \"\\n$LUKS_PASS\\n\\n\"\n```\n\nThis passphrase will also be used infrequently to access the Certify key and should be very strong.\n\nWrite the passphrase down or memorize it.\n\nFormat the partition:\n\n```console\necho $LUKS_PASS | sudo cryptsetup -q luksFormat /dev/sdc1\n```\n\nMount the partition:\n\n```console\necho $LUKS_PASS | sudo cryptsetup -q luksOpen /dev/sdc1 gnupg-secrets\n```\n\nCreate an ext2 filesystem:\n\n```console\nsudo mkfs.ext2 /dev/mapper/gnupg-secrets -L gnupg-$(date +%F)\n```\n\nMount the filesystem and copy the temporary GnuPG working directory with key materials:\n\n```console\nsudo mkdir /mnt/encrypted-storage\n\nsudo mount /dev/mapper/gnupg-secrets /mnt/encrypted-storage\n\nsudo cp -av $GNUPGHOME /mnt/encrypted-storage/\n```\n\nUnmount and close the encrypted volume:\n\n```console\nsudo umount /mnt/encrypted-storage\n\nsudo cryptsetup luksClose gnupg-secrets\n```\n\nRepeat the process for any additional storage devices (at least two are recommended).\n\n**OpenBSD**\n\nAttach a USB disk and determine its label:\n\n```console\n$ dmesg | grep sd.\\ at\nsd2 at scsibus5 targ 1 lun 0: <TS-RDF5, SD Transcend, TS37> SCSI4 0/direct removable serial.00000000000000000000\n```\n\nPrint the existing partitions to make sure it's the right device:\n\n```console\ndoas disklabel -h sd2\n```\n\nInitialize the disk by creating an `a` partition with FS type `RAID` and size of 25 Megabytes:\n\n```console\n$ doas fdisk -giy sd2\nWriting MBR at offset 0.\nWriting GPT.\n\n$ doas disklabel -E sd2\nLabel editor (enter '?' for help at any prompt)\nsd2> a a\noffset: [64]\nsize: [31101776] 25M\nFS type: [4.2BSD] RAID\nsd2*> w\nsd2> q\nNo label changes\n```\n\nEncrypt with bioctl using a unique [Passphrase](#passphrase):\n\n```console\n$ doas bioctl -c C -l sd2a softraid0\nNew passphrase:\nRe-type passphrase:\nsoftraid0: CRYPTO volume attached as sd3\n```\n\nCreate an `i` partition on the new crypto volume and the filesystem:\n\n```console\n$ doas fdisk -giy sd3\nWriting MBR at offset 0.\nWriting GPT.\n\n$ doas disklabel -E sd3\nLabel editor (enter '?' for help at any prompt)\nsd3> a i\noffset: [64]\nsize: [16001]\nFS type: [4.2BSD]\nsd3*> w\nsd3> q\nNo label changes.\n\n$ doas newfs sd3i\n```\n\nMount the filesystem and copy the temporary directory with the keyring:\n\n```console\ndoas mkdir /mnt/encrypted-storage\n\ndoas mount /dev/sd3i /mnt/encrypted-storage\n\ndoas cp -av $GNUPGHOME /mnt/encrypted-storage\n```\n\nUnmount and remove the encrypted volume:\n\n```console\ndoas umount /mnt/encrypted-storage\n\ndoas bioctl -d sd3\n```\n\nSee [OpenBSD FAQ#14](https://www.openbsd.org/faq/faq14.html#softraidCrypto) for more information.\n\n# Export public key\n\n**Important** Without the public key, it will **not** be possible to use GnuPG to decrypt nor sign messages. However, YubiKey can still be used for SSH authentication.\n\nConnect another portable storage device or create a new partition on the existing one.\n\n**Linux**\n\nUsing the same `/dev/sdc` device as in the previous step, create a small (at least 20 Mb is recommended) partition for storing materials:\n\n```console\nsudo fdisk /dev/sdc <<EOF\nn\n\n\n+20M\nw\nEOF\n```\n\nCreate a filesystem and export the public key:\n\n```console\nsudo mkfs.ext2 /dev/sdc2\n\nsudo mkdir /mnt/public\n\nsudo mount /dev/sdc2 /mnt/public\n\ngpg --armor --export $KEYID | sudo tee /mnt/public/$KEYID-$(date +%F).asc\n\nsudo chmod 0444 /mnt/public/*.asc\n```\n\nUnmount and remove the storage device:\n\n```console\nsudo umount /mnt/public\n```\n\n**OpenBSD**\n\n```console\n$ doas disklabel -E sd2\nLabel editor (enter '?' for help at any prompt)\nsd2> a b\noffset: [32130]\nsize: [31069710] 25M\nFS type: [swap] 4.2BSD\nsd2*> w\nsd2> q\nNo label changes.\n```\n\nCreate a filesystem and export the public key to it:\n\n```console\ndoas newfs sd2b\n\ndoas mkdir /mnt/public\n\ndoas mount /dev/sd2b /mnt/public\n\ngpg --armor --export $KEYID | doas tee /mnt/public/$KEYID-$(date +%F).asc\n```\n\nUnmount and remove the storage device:\n\n```console\ndoas umount /mnt/public\n```\n\n# Configure YubiKey\n\nConnect YubiKey and confirm its status:\n\n```console\ngpg --card-status\n```\n\nIf the card is locked, [Reset](#reset-yubikey) it.\n\n## Change PIN\n\nYubiKey's [PGP](https://developers.yubico.com/PGP/) interface has its own PINs separate from other modules such as [PIV](https://developers.yubico.com/PIV/Introduction/YubiKey_and_PIV.html):\n\nName       | Default value | Capability\n-----------|---------------|-------------------------------------------------------------\nUser PIN   | `123456`      | cryptographic operations (decrypt, sign, authenticate)\nAdmin PIN  | `12345678`    | reset PIN, change Reset Code, add keys and owner information\nReset Code | None          | reset PIN ([more information](https://forum.yubico.com/viewtopicd01c.html?p=9055#p9055))\n\nDetermine the desired PIN values. They can be shorter than the Certify key passphrase due to limited brute-forcing opportunities; the User PIN should be convenient enough to remember for every-day use.\n\nThe *User PIN* must be at least 6 characters and the *Admin PIN* must be at least 8 characters. A maximum of 127 ASCII characters are allowed. See [GnuPG - Managing PINs](https://www.gnupg.org/howtos/card-howto/en/ch03s02.html) for more information.\n\nSet PINs manually or generate them, for example a 6 digit User PIN and 8 digit Admin PIN:\n\n```console\nexport ADMIN_PIN=$(LC_ALL=C tr -dc '0-9' < /dev/urandom | fold -w8 | head -1)\n\nexport USER_PIN=$(LC_ALL=C tr -dc '0-9' < /dev/urandom | fold -w6 | head -1)\n\nprintf \"\\nAdmin PIN: %12s\\nUser PIN: %13s\\n\\n\" \"$ADMIN_PIN\" \"$USER_PIN\"\n```\n\nChange the Admin PIN:\n\n```console\ngpg --command-fd=0 --pinentry-mode=loopback --change-pin <<EOF\n3\n12345678\n$ADMIN_PIN\n$ADMIN_PIN\nq\nEOF\n```\n\nChange the User PIN:\n\n```console\ngpg --command-fd=0 --pinentry-mode=loopback --change-pin <<EOF\n1\n123456\n$USER_PIN\n$USER_PIN\nq\nEOF\n```\n\nRemove and re-insert YubiKey.\n\n**Warning** Three incorrect *User PIN* entries will cause it to become blocked and must be unblocked with either the *Admin PIN* or *Reset Code*. Three incorrect *Admin PIN* or *Reset Code* entries will destroy data on YubiKey.\n\nThe number of [retry attempts](https://docs.yubico.com/software/yubikey/tools/ykman/OpenPGP_Commands.html#ykman-openpgp-access-set-retries-options-pin-retries-reset-code-retries-admin-pin-retries) can be changed, for example to 5 attempts:\n\n```console\nykman openpgp access set-retries 5 5 5 -f -a $ADMIN_PIN\n```\n\n## Set attributes\n\nSet the [smart card attributes](https://gnupg.org/howtos/card-howto/en/smartcard-howto-single.html) with `gpg --edit-card` and `admin` mode - use `help` to see available options.\n\nOr use predetermined values:\n\n```console\ngpg --command-fd=0 --pinentry-mode=loopback --edit-card <<EOF\nadmin\nlogin\n$IDENTITY\n$ADMIN_PIN\nquit\nEOF\n```\n\nRun `gpg --card-status` to verify results (*Login data* field).\n\n# Transfer Subkeys\n\n**Important** Transferring keys to YubiKey is a one-way operation which converts the on-disk key into a stub making it no longer usable to transfer to subsequent YubiKeys. Ensure a backup was made before proceeding.\n\nThe Certify key passphrase and Admin PIN are required to transfer keys.\n\n## Signature key\n\nTransfer the first key:\n\n```console\ngpg --command-fd=0 --pinentry-mode=loopback --edit-key $KEYID <<EOF\nkey 1\nkeytocard\n1\n$CERTIFY_PASS\n$ADMIN_PIN\nsave\nEOF\n```\n\n## Encryption key\n\nRepeat the process for the second key:\n\n```console\ngpg --command-fd=0 --pinentry-mode=loopback --edit-key $KEYID <<EOF\nkey 2\nkeytocard\n2\n$CERTIFY_PASS\n$ADMIN_PIN\nsave\nEOF\n```\n\n## Authentication key\n\nRepeat the process for the third key:\n\n```console\ngpg --command-fd=0 --pinentry-mode=loopback --edit-key $KEYID <<EOF\nkey 3\nkeytocard\n3\n$CERTIFY_PASS\n$ADMIN_PIN\nsave\nEOF\n```\n\n# Verify transfer\n\nVerify Subkeys have been moved to YubiKey with `gpg -K` and look for `ssb>`, for example:\n\n```console\nsec   rsa4096/0xF0F2CFEB04341FB5 2024-01-01 [C]\n      Key fingerprint = 4E2C 1FA3 372C BA96 A06A  C34A F0F2 CFEB 0434 1FB5\nuid                   [ultimate] YubiKey User <yubikey@example>\nssb>  rsa4096/0xB3CD10E502E19637 2024-01-01 [S] [expires: 2026-05-01]\nssb>  rsa4096/0x30CBE8C4B085B9F7 2024-01-01 [E] [expires: 2026-05-01]\nssb>  rsa4096/0xAD9E24E1B8CB9600 2024-01-01 [A] [expires: 2026-05-01]\n```\n\nThe `>` after a tag indicates the key is stored on a smart card.\n\n# Finish setup\n\nVerify you have done the following:\n\n- [ ] Memorized or wrote down the Certify key (identity) passphrase to a secure and durable location\n  * `echo $CERTIFY_PASS` to see it again; [`passphrase.html`](https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/passphrase.html) or [`passphrase.csv`](https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/passphrase.csv) to transcribe it\n- [ ] Memorized or wrote down passphrase to encrypted volume on portable storage\n  * `echo $LUKS_PASS` to see it again; [`passphrase.html`](https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/passphrase.html) or [`passphrase.csv`](https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/passphrase.csv) to transcribe it\n- [ ] Saved the Certify key and Subkeys to encrypted portable storage, to be kept offline\n  * At least two backups are recommended, stored at separate locations\n- [ ] Exported a copy of the public key where is can be easily accessed later\n  * Separate device or non-encrypted partition was used\n- [ ] Memorized or wrote down the User PIN and Admin PIN, which are unique and changed from default values\n  * `echo $USER_PIN $ADMIN_PIN` to see them again; [`passphrase.html`](https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/passphrase.html) or [`passphrase.csv`](https://raw.githubusercontent.com/drduh/YubiKey-Guide/master/passphrase.csv) to transcribe them\n- [ ] Moved Encryption, Signature and Authentication Subkeys to YubiKey\n  * `gpg -K` shows `ssb>` for each of the 3 Subkeys\n\nReboot to clear the ephemeral environment and complete setup.\n\n# Using YubiKey\n\nInitialize GnuPG:\n\n```console\ngpg -k\n```\n\nImport or create a [hardened configuration](https://github.com/drduh/config/blob/master/gpg.conf):\n\n```console\ncd ~/.gnupg\n\nwget https://raw.githubusercontent.com/drduh/config/master/gpg.conf\n```\n\nSet the following option. This avoids the problem where GnuPG will repeatedly prompt for the insertion of an already-inserted YubiKey:\n\n```console\ntouch scdaemon.conf\n\necho \"disable-ccid\" >>scdaemon.conf\n```\n\nInstall the required packages:\n\n**Debian/Ubuntu**\n\n```console\nsudo apt update\n\nsudo apt install -y gnupg gnupg-agent scdaemon pcscd\n```\n\n**OpenBSD**\n\n```console\ndoas pkg_add gnupg pcsc-tools\n\ndoas rcctl enable pcscd\n\ndoas reboot\n```\n\nMount the non-encrypted volume with the public key:\n\n**Debian/Ubuntu**\n\n```console\nsudo mkdir /mnt/public\n\nsudo mount /dev/sdc2 /mnt/public\n```\n\n**OpenBSD**\n\n```console\ndoas mkdir /mnt/public\n\ndoas mount /dev/sd3i /mnt/public\n```\n\nImport the public key:\n\n```console\ngpg --import /mnt/public/*.asc\n```\n\nOr download the public key from a keyserver:\n\n```console\ngpg --recv $KEYID\n```\n\nOr with the URL on YubiKey, retrieve the public key:\n\n```console\ngpg/card> fetch\n\ngpg/card> quit\n```\n\nDetermine the key ID:\n\n```console\ngpg -k\n\nexport KEYID=0xF0F2CFEB04341FB5\n```\n\nAssign ultimate trust by typing `trust` and selecting option `5` then `quit`:\n\n```console\ngpg --command-fd=0 --pinentry-mode=loopback --edit-key $KEYID <<EOF\ntrust\n5\ny\nsave\nEOF\n```\n\nRemove and re-insert YubiKey.\n\nVerify the status with `gpg --card-status` which will list the available Subkeys:\n\n```console\nReader ...........: Yubico YubiKey OTP FIDO CCID 00 00\nApplication ID ...: D2760001240102010006055532110000\nApplication type .: OpenPGP\nVersion ..........: 3.4\nManufacturer .....: Yubico\nSerial number ....: 05553211\nName of cardholder: YubiKey User\nLanguage prefs ...: en\nSalutation .......:\nURL of public key : [not set]\nLogin data .......: yubikey@example\nSignature PIN ....: not forced\nKey attributes ...: rsa4096 rsa4096 rsa4096\nMax. PIN lengths .: 127 127 127\nPIN retry counter : 3 3 3\nSignature counter : 0\nKDF setting ......: on\nSignature key ....: CF5A 305B 808B 7A0F 230D  A064 B3CD 10E5 02E1 9637\n      created ....: 2024-01-01 12:00:00\nEncryption key....: A5FA A005 5BED 4DC9 889D  38BC 30CB E8C4 B085 B9F7\n      created ....: 2024-01-01 12:00:00\nAuthentication key: 570E 1355 6D01 4C04 8B6D  E2A3 AD9E 24E1 B8CB 9600\n      created ....: 2024-01-01 12:00:00\nGeneral key info..: sub  rsa4096/0xB3CD10E502E19637 2024-01-01 YubiKey User <yubikey@example>\nsec#  rsa4096/0xF0F2CFEB04341FB5  created: 2024-01-01  expires: never\nssb>  rsa4096/0xB3CD10E502E19637  created: 2024-01-01  expires: 2026-05-01\n                                  card-no: 0006 05553211\nssb>  rsa4096/0x30CBE8C4B085B9F7  created: 2024-01-01  expires: 2026-05-01\n                                  card-no: 0006 05553211\nssb>  rsa4096/0xAD9E24E1B8CB9600  created: 2024-01-01  expires: 2026-05-01\n                                  card-no: 0006 05553211\n```\n\n`sec#` indicates the corresponding key is not available (the Certify key is offline).\n\nYubiKey is now ready for use!\n\n## Encryption\n\nEncrypt a message to yourself (useful for storing credentials or protecting backups):\n\n```console\necho \"\\ntest message string\" | \\\n  gpg --encrypt --armor \\\n      --recipient $KEYID --output encrypted.txt\n```\n\nDecrypt the message - a prompt for the User PIN will appear:\n\n```console\ngpg --decrypt --armor encrypted.txt\n```\n\nTo encrypt to multiple recipients/keys, set the preferred key ID last:\n\n```console\necho \"test message string\" | \\\n  gpg --encrypt --armor \\\n      --recipient $KEYID_2 --recipient $KEYID_1 --recipient $KEYID \\\n      --output encrypted.txt\n```\n\nUse a [shell function](https://github.com/drduh/config/blob/master/zshrc) to make encrypting files easier:\n\n```console\nsecret () {\n  output=\"${1}\".$(date +%s).enc\n  gpg --encrypt --armor --output ${output} \\\n    -r $KEYID \"${1}\" && echo \"${1} -> ${output}\"\n}\n\nreveal () {\n  output=$(echo \"${1}\" | rev | cut -c16- | rev)\n  gpg --decrypt --output ${output} \"${1}\" && \\\n    echo \"${1} -> ${output}\"\n}\n```\n\nExample output:\n\n```console\n$ secret document.pdf\ndocument.pdf -> document.pdf.1580000000.enc\n\n$ reveal document.pdf.1580000000.enc\ngpg: anonymous recipient; trying secret key 0xF0F2CFEB04341FB5 ...\ngpg: okay, we are the anonymous recipient.\ngpg: encrypted with RSA key, ID 0x0000000000000000\ndocument.pdf.1580000000.enc -> document.pdf\n```\n\n[drduh/Purse](https://github.com/drduh/Purse) is a password manager based on GnuPG and YubiKey to securely store and use credentials.\n\n## Signature\n\nSign a message:\n\n```console\necho \"test message string\" | gpg --armor --clearsign > signed.txt\n```\n\nVerify the signature:\n\n```console\ngpg --verify signed.txt\n```\n\nThe output will be similar to:\n\n```console\ngpg: Signature made Mon 01 Jan 2024 12:00:00 PM UTC\ngpg:                using RSA key CF5A305B808B7A0F230DA064B3CD10E502E19637\ngpg: Good signature from \"YubiKey User <yubikey@example>\" [ultimate]\nPrimary key fingerprint: 4E2C 1FA3 372C BA96 A06A  C34A F0F2 CFEB 0434 1FB5\n     Subkey fingerprint: CF5A 305B 808B 7A0F 230D  A064 B3CD 10E5 02E1 9637\n```\n\n## Configure touch\n\nBy default, YubiKey will perform cryptographic operations without requiring any action from the user after the key is unlocked once with the PIN.\n\nTo require a touch for each key operation, use [YubiKey Manager](https://developers.yubico.com/yubikey-manager/) and the Admin PIN to set key policy.\n\nEncryption:\n\n```console\nykman openpgp keys set-touch dec on\n```\n\n**Note** Versions of YubiKey Manager before 5.1.0 use `enc` instead of `dec` for encryption:\n\n```console\nykman openpgp keys set-touch enc on\n```\n\nEven older versions of YubiKey Manager use `touch` instead of `set-touch`\n\nSignature:\n\n```console\nykman openpgp keys set-touch sig on\n```\n\nAuthentication:\n\n```console\nykman openpgp keys set-touch aut on\n```\n\nTo view and adjust policy options:\n\n```console\nykman openpgp keys set-touch -h\n```\n\n`Cached` or `Cached-Fixed` may be desirable for YubiKey use with email clients.\n\nYubiKey will blink when it is waiting for a touch. On Linux, [maximbaz/yubikey-touch-detector](https://github.com/maximbaz/yubikey-touch-detector) can be used to indicate YubiKey is waiting for a touch.\n\n## SSH\n\nImport or create a [hardened configuration](https://github.com/drduh/config/blob/master/gpg-agent.conf):\n\n```console\ncd ~/.gnupg\n\nwget https://raw.githubusercontent.com/drduh/config/master/gpg-agent.conf\n```\n\n**Important** The `cache-ttl` options do **not** apply when using YubiKey as a smart card, because the PIN is [cached by the smart card itself](https://dev.gnupg.org/T3362). To clear the PIN from cache (equivalent to `default-cache-ttl` and `max-cache-ttl`), remove YubiKey, or set `forcesig` when editing the card to be prompted for the PIN each time.\n\n**Tip** Set `pinentry-program` to `/usr/bin/pinentry-gnome3` for a GUI-based prompt.\n\n**macOS**\n\nInstall pinentry with `brew install pinentry-mac` then edit `gpg-agent.conf` to set the `pinentry-program` path to:\n\n* Apple Silicon Macs: `/opt/homebrew/bin/pinentry-mac`\n* Intel Macs: `/usr/local/bin/pinentry-mac`\n* MacGPG Suite: `/usr/local/MacGPG2/libexec/pinentry-mac.app/Contents/MacOS/pinentry-mac`\n\nThen run `gpgconf --kill gpg-agent` for the change to take effect.\n\nTo use graphical applications on macOS, [additional setup is required](https://jms1.net/yubikey/make-ssh-use-gpg-agent.md).\n\nCreate `$HOME/Library/LaunchAgents/gnupg.gpg-agent.plist` with the following contents:\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\"\n  \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n    <dict>\n        <key>Label</key>\n        <string>gnupg.gpg-agent</string>\n        <key>RunAtLoad</key>\n        <true/>\n        <key>KeepAlive</key>\n        <false/>\n        <key>ProgramArguments</key>\n        <array>\n            <string>/usr/local/MacGPG2/bin/gpg-connect-agent</string>\n            <string>/bye</string>\n        </array>\n    </dict>\n</plist>\n```\n\nLoad it:\n\n```console\nlaunchctl load $HOME/Library/LaunchAgents/gnupg.gpg-agent.plist\n```\n\nCreate `$HOME/Library/LaunchAgents/gnupg.gpg-agent-symlink.plist` with the following contens:\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/ProperyList-1.0/dtd\">\n<plist version=\"1.0\">\n    <dict>\n        <key>Label</key>\n        <string>gnupg.gpg-agent-symlink</string>\n        <key>ProgramArguments</key>\n        <array>\n            <string>/bin/sh</string>\n            <string>-c</string>\n            <string>/bin/ln -sf $HOME/.gnupg/S.gpg-agent.ssh $SSH_AUTH_SOCK</string>\n        </array>\n        <key>RunAtLoad</key>\n        <true/>\n    </dict>\n</plist>\n```\n\nLoad it:\n\n```console\nlaunchctl load $HOME/Library/LaunchAgents/gnupg.gpg-agent-symlink.plist\n```\n\nReboot to activate changes.\n\n**Windows**\n\nWindows can already have some virtual smart card readers installed, like the one provided for Windows Hello. To verify YubiKey is the correct one used by scdaemon, add it to its configuration.\n\nFind the YubiKey label using PowerShell:\n\n```powershell\nPS C:\\WINDOWS\\system32> Get-PnpDevice -Class SoftwareDevice | Where-Object {$_.FriendlyName -like \"*YubiKey*\"} | Select-Object -ExpandProperty FriendlyName\nYubico YubiKey OTP+FIDO+CCID 0\n```\n\nSee [How to setup Signed Git Commits with a YubiKey NEO and GPG and Keybase on Windows (2018)](https://www.hanselman.com/blog/HowToSetupSignedGitCommitsWithAYubiKeyNEOAndGPGAndKeybaseOnWindows.aspx) for more information.\n\nEdit `%APPDATA%/gnupg/scdaemon.conf` to add:\n\n```console\nreader-port <device name, e.g. Yubico YubiKey OTP+FIDO+CCID 0>\n```\n\nEdit `%APPDATA%/gnupg/gpg-agent.conf` to add:\n\n```console\nenable-ssh-support\nenable-putty-support\n```\n\nRestart the agent:\n\n```console\ngpg-connect-agent killagent /bye\n\ngpg-connect-agent /bye\n```\n\nVerify YubiKey details:\n\n```console\ngpg --card-status\n```\n\nImport the public key and set ultimate trust:\n\n```console\ngpg --import <path to public key file>\n```\n\nRetrieve the public key id:\n\n```console\ngpg --list-public-keys\n```\n\nExport the SSH public key:\n\n```console\ngpg --export-ssh-key <public key id>\n```\n\nCopy the public SSH key to a file - it corresponds to the secret key on YubiKey and can be copied to SSH destination hosts.\n\nCreate a shortcut that points to `gpg-connect-agent /bye` and place it in the startup folder `shell:startup` to make sure the agent starts after reboot. Modify the shortcut properties so it starts in a \"Minimized\" window.\n\nPuTTY can now be used for public-key SSH authentication. When the server asks for public-key verification, PuTTY will forward the request to GnuPG, which will prompt for a PIN to authorize the operation.\n\n**WSL**\n\nThe goal is to configure SSH client inside WSL work together with the Windows agent, such as gpg-agent.exe.\n\nSee the [WSL agent architecture](media/schema_gpg.png) illustration for an overview.\n\n**Note** GnuPG forwarding for cryptographic operations is not supported. See [vuori/weasel-pageant](https://github.com/vuori/weasel-pageant) for more information.\n\nOne way to forward is just `ssh -A` (still need to eval weasel to setup local ssh-agent), and only relies on OpenSSH. In this track, `ForwardAgent` and `AllowAgentForwarding` in ssh/sshd config may be involved. However, when using ssh socket forwarding, do not enable `ForwardAgent` in ssh config. See [SSH Agent Forwarding](#ssh-agent-forwarding) for more information. This requires Ubuntu 16.04 or newer for WSL and Kleopatra.\n\nDownload [vuori/weasel-pageant](https://github.com/vuori/weasel-pageant).\n\nAdd `eval $(/mnt/c/<path of extraction>/weasel-pageant -r -a /tmp/S.weasel-pageant)` to the shell rc file. Use a named socket here so it can be used in the `RemoteForward` directive of `~/.ssh/config`. Source it with `source ~/.bashrc`.\n\nDisplay the SSH key with `$ ssh-add -l`\n\nEdit `~/.ssh/config` to add the following for each agent forwarding host:\n\n```console\nRemoteForward <remote SSH socket path> /tmp/S.weasel-pageant\n```\n\n**Note** The remote SSH socket path can be found with `gpgconf --list-dirs agent-ssh-socket`\n\nAdd the following to the shell rc file:\n\n```console\nexport SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)\n```\n\nAdd the following to `/etc/ssh/sshd_config`:\n\n```console\nStreamLocalBindUnlink yes\n```\n\nReload SSH daemon:\n\n```console\nsudo service sshd reload\n```\n\nRemove YubiKey and reboot. Log back into Windows, open a WSL console and enter `ssh-add -l` - no output should appear.\n\nPlug in YubiKey, enter the same command to display the ssh key.\n\nConnect to the remote host and use `ssh-add -l` to confirm forwarding works.\n\nAgent forwarding may be chained through multiple hosts. Follow the same [protocol](#remote-host-configuration) to configure each host.\n\nAn alternate method is the [usbipd-win](https://github.com/dorssel/usbipd-win) library. If you encounter issues with accessing the YubiKey in WSL after configuring usbipd-win, you may need to add custom polkit rules to ensure proper permissions for the pcscd service. Here's an example configuration using a scard group (the group logic is optional):\n\nCreate a new rule file at /etc/polkit-1/rules.d/99-pcscd.rules:\n\n```bash\npolkit.addRule(function(action, subject) {\n    if (action.id == \"org.debian.pcsc-lite.access_card\" &&\n        subject.isInGroup(\"scard\")) {\n        return polkit.Result.YES;\n    }\n});\n\npolkit.addRule(function(action, subject) {\n    if (action.id == \"org.debian.pcsc-lite.access_pcsc\" &&\n        subject.isInGroup(\"scard\")) {\n        return polkit.Result.YES;\n    }\n});\n```\n\n### Replace agents\n\nTo launch `gpg-agent` for use by SSH, use the `gpg-connect-agent /bye` or `gpgconf --launch gpg-agent` commands.\n\nAdd the following to the shell rc file:\n\n```console\nexport GPG_TTY=\"$(tty)\"\nexport SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)\ngpgconf --launch gpg-agent\ngpg-connect-agent updatestartuptty /bye > /dev/null\n```\n\nFor fish, `config.fish` should look like this (consider putting them into the `is-interactive` block):\n\n```fish\nset -x GPG_TTY (tty)\nset -x SSH_AUTH_SOCK (gpgconf --list-dirs agent-ssh-socket)\ngpgconf --launch gpg-agent\n```\n\nWhen using `ForwardAgent` for ssh-agent forwarding, `SSH_AUTH_SOCK` only needs to be set on the *local* host, where YubiKey is connected. On the *remote* host, `ssh` will set `SSH_AUTH_SOCK` to something like `/tmp/ssh-mXzCzYT2Np/agent.7541` upon connection. Do **not** set `SSH_AUTH_SOCK` on the remote host - doing so will break [SSH Agent Forwarding](#ssh-agent-forwarding).\n\nFor `S.gpg-agent.ssh` (see [SSH Agent Forwarding](#ssh-agent-forwarding) for more info), `SSH_AUTH_SOCK` should also be set on the *remote*. However, `GPG_TTY` should not be set on the *remote*, explanation specified in that section.\n\n### Copy public key\n\n**Note** It is **not** necessary to import the GnuPG public key in order to use SSH only.\n\nCopy and paste the output from `ssh-add` to the server's `authorized_keys` file:\n\n```console\n$ ssh-add -L\nssh-rsa AAAAB4NzaC1yc2EAAAADAQABAAACAz[...]zreOKM+HwpkHzcy9DQcVG2Nw== cardno:000605553211\n```\n\n**Optional** Save the public key for identity file configuration. By default, SSH attempts to use all the identities available via the agent. It's often a good idea to manage exactly which keys SSH will use to connect to a server, for example to separate different roles or [to avoid being fingerprinted by untrusted ssh servers](https://words.filippo.io/ssh-whoami-filippo-io/). To do this you'll need to use the command line argument `-i [identity_file]` or the `IdentityFile` and `IdentitiesOnly` options in `.ssh/config`.\n\nThe argument provided to `IdentityFile` is traditionally the path to the _private_ key file (for example `IdentityFile ~/.ssh/id_rsa`). For YubiKey, `IdentityFile` must point to the _public_ key file, and `ssh` will select the appropriate private key from those available via ssh-agent. To prevent `ssh` from trying all keys in the agent, use `IdentitiesOnly yes` along with one or more `-i` or `IdentityFile` options for the target host.\n\nTo reiterate, with `IdentitiesOnly yes`, `ssh` will not enumerate public keys loaded into `ssh-agent` or `gpg-agent`. This means public-key authentication will not proceed unless explicitly named by `ssh -i [identity_file]` or in `.ssh/config` on a per-host basis.\n\nIn the case of YubiKey usage, to extract the public key from the ssh agent:\n\n```console\nssh-add -L | grep \"cardno:000605553211\" > ~/.ssh/id_rsa_yubikey.pub\n```\n\nThen explicitly associate this YubiKey-stored key for used with a host, `github.com` for example, as follows:\n\n```console\n$ cat << EOF >> ~/.ssh/config\nHost github.com\n    IdentitiesOnly yes\n    IdentityFile ~/.ssh/id_rsa_yubikey.pub\nEOF\n```\n\nConnect with public key authentication:\n\n```console\n$ ssh git@github.com -vvv\n[...]\ndebug2: key: cardno:000605553211 (0x1234567890),\ndebug1: Authentications that can continue: publickey\ndebug3: start over, passed a different list publickey\ndebug3: preferred gssapi-keyex,gssapi-with-mic,publickey,keyboard-interactive,password\ndebug3: authmethod_lookup publickey\ndebug3: remaining preferred: keyboard-interactive,password\ndebug3: authmethod_is_enabled publickey\ndebug1: Next authentication method: publickey\ndebug1: Offering RSA public key: cardno:000605553211\ndebug3: send_pubkey_test\ndebug2: we sent a publickey packet, wait for reply\ndebug1: Server accepts key: pkalg ssh-rsa blen 535\ndebug2: input_userauth_pk_ok: fp e5:de:a5:74:b1:3e:96:9b:85:46:e7:28:53:b4:82:c3\ndebug3: sign_and_send_pubkey: RSA e5:de:a5:74:b1:3e:96:9b:85:46:e7:28:53:b4:82:c3\ndebug1: Authentication succeeded (publickey).\n[...]\n```\n\n**Tip** To make multiple connections or securely transfer many files, use the [ControlMaster](https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Multiplexing) ssh option.\n\n### Import SSH keys\n\nIf there are existing SSH keys to make available via `gpg-agent`, they will need to be imported. Then, remove the original private keys. When importing the key, `gpg-agent` uses the key filename as the label - this makes it easier to follow where the key originated from. In this example, we're starting with just the YubiKey in place and importing `~/.ssh/id_rsa`:\n\n```console\n$ ssh-add -l\n4096 SHA256:... cardno:00060123456 (RSA)\n\n$ ssh-add ~/.ssh/id_rsa && rm ~/.ssh/id_rsa\n```\n\nWhen invoking `ssh-add`, a prompt for the SSH key passphrase will appear, then the `pinentry` program will prompt and confirm a new passphrase to encrypt the converted key within the GnuPG key store.\n\nThe migrated key will be listed in `ssh-add -l`:\n\n```console\n$ ssh-add -l\n4096 SHA256:... cardno:00060123456 (RSA)\n2048 SHA256:... /Users/username/.ssh/id_rsa (RSA)\n```\n\nTo show the keys with MD5 fingerprints, as used by `gpg-connect-agent`'s `KEYINFO` and `DELETE_KEY` commands:\n\n```console\n$ ssh-add -E md5 -l\n4096 MD5:... cardno:00060123456 (RSA)\n2048 MD5:... /Users/username/.ssh/id_rsa (RSA)\n```\n\nWhen using the key `pinentry` will be invoked to request the key passphrase. The passphrase will be cached for up to 10 idle minutes between uses, up to a maximum of 2 hours.\n\n### SSH agent forwarding\n\n**Warning** SSH Agent Forwarding can [add additional risk](https://matrix.org/blog/2019/05/08/post-mortem-and-remediations-for-apr-11-security-incident/#ssh-agent-forwarding-should-be-disabled) - proceed with caution!\n\nThere are two methods for ssh-agent forwarding, one is provided by OpenSSH and the other is provided by GnuPG.\n\nThe latter one may be more insecure as raw socket is just forwarded (not like `S.gpg-agent.extra` with only limited functionality; if `ForwardAgent` implemented by OpenSSH is just forwarding the raw socket, then they are insecure to the same degree). But for the latter one, one convenience is that one may forward once and use this agent everywhere in the remote. So again, proceed with caution!\n\nFor example, tmux does not have environment variables such as `$SSH_AUTH_SOCK` when connecting to remote hosts and attaching an existing session. For each shell, find the socket and `export SSH_AUTH_SOCK=/tmp/ssh-agent-xxx/xxxx.socket`. However, with `S.gpg-agent.ssh` in a fixed place, it can be used as the ssh-agent in shell rc files.\n\n#### Use ssh-agent\n\nYou should now be able to use `ssh -A remote` on the _local_ host to log into _remote_ host, and should then be able to use YubiKey as if it were connected to the remote host. For example, using e.g. `ssh-add -l` on that remote host will show the public key from the YubiKey (`cardno:`). Always use `ForwardAgent yes` only for a single host, never for all servers.\n\n#### Use S.gpg-agent.ssh\n\nFirst you need to go through [GnuPG agent forwarding)](#gnupg-agent-forwarding), know the conditions for gpg-agent forwarding and know the location of `S.gpg-agent.ssh` on both the local and the remote.\n\nYou may use the command:\n\n```console\n$ gpgconf --list-dirs agent-ssh-socket\n```\n\nEdit `.ssh/config` to add the remote host:\n\n```console\nHost\n  Hostname remote-host.tld\n  StreamLocalBindUnlink yes\n  RemoteForward /run/user/1000/gnupg/S.gpg-agent.ssh /run/user/1000/gnupg/S.gpg-agent.ssh\n  # RemoteForward [remote socket] [local socket]\n  # Note that ForwardAgent is not wanted here!\n```\n\nAfter successfully ssh into the remote host, confirm `/run/user/1000/gnupg/S.gpg-agent.ssh` exists.\n\nThen in the *remote* you can type in command line or configure in the shell rc file with:\n\n```console\nexport SSH_AUTH_SOCK=\"/run/user/$UID/gnupg/S.gpg-agent.ssh\"\n```\n\nAfter sourcing the shell rc file, `ssh-add -l` will return the correct public key.\n\n**Note** In this process no gpg-agent in the remote is involved, hence `gpg-agent.conf` in the remote is of no use. Also pinentry is invoked locally.\n\n#### Chained forwarding\n\nIf you use `ssh-agent` provided by OpenSSH and want to forward it into a *third* box, you can just `ssh -A third` on the *remote*.\n\nMeanwhile, if you use `S.gpg-agent.ssh`, assume you have gone through the steps above and have `S.gpg-agent.ssh` on the *remote*, and you would like to forward this agent into a *third* box, first you may need to configure `sshd_config` and `SSH_AUTH_SOCK` of *third* in the same way as *remote*, then in the ssh config of *remote*, add the following lines\n\n```console\nHost third\n  Hostname third-host.tld\n  StreamLocalBindUnlink yes\n  RemoteForward /run/user/1000/gnupg/S.gpg-agent.ssh /run/user/1000/gnupg/S.gpg-agent.ssh\n  #RemoteForward [remote socket] [local socket]\n  #Note that ForwardAgent is not wanted here!\n```\n\nThe path must be set according to `gpgconf --list-dirs agent-ssh-socket` on *remote* and *third* hosts.\n\n## GitHub\n\nYubiKey can be used to sign commits and tags, and authenticate SSH to GitHub when configured in [Settings](https://github.com/settings/keys).\n\nConfigure a signing key:\n\n```console\ngit config --global user.signingkey $KEYID\n```\n\n**Important** The `user.email` option must match the email address associated with the PGP identity.\n\nTo sign commits or tags, use the `-S` option.\n\n**Windows**\n\nConfigure authentication:\n\n```console\ngit config --global core.sshcommand \"plink -agent\"\n\ngit config --global gpg.program 'C:\\Program Files (x86)\\GnuPG\\bin\\gpg.exe'\n```\n\nThen update the repository URL to `git@github.com:USERNAME/repository`\n\n**Note** For the error `gpg: signing failed: No secret key` - run `gpg --card-status` with YubiKey plugged in and try the git command again.\n\n## GnuPG agent forwarding\n\nYubiKey can be used sign git commits and decrypt files on remote hosts with GnuPG Agent Forwarding. To ssh through another network, especially to push to/pull from GitHub using ssh, see [Remote Machines (SSH Agent forwarding)](#ssh-agent-forwarding).\n\n`gpg-agent.conf` is not needed on the remote host; after forwarding, remote GnuPG directly communicates with `S.gpg-agent` without starting `gpg-agent` on the remote host.\n\nOn the remote host, edit `/etc/ssh/sshd_config` to set `StreamLocalBindUnlink yes`\n\n**Optional** Without root access on the remote host to edit `/etc/ssh/sshd_config`, socket located at `gpgconf --list-dir agent-socket` on the remote host will need to be removed before forwarding works. See [AgentForwarding GNUPG wiki page](https://wiki.gnupg.org/AgentForwarding) for more information.\n\nImport the public key on the remote host. On the local host, copy the public keyring to the remote host:\n\n```console\nscp ~/.gnupg/pubring.kbx remote:~/.gnupg/\n```\n\nOn modern distributions, such as Fedora 30, there is no need to set `RemoteForward` in `~/.ssh/config`\n\n### Legacy distributions\n\nOn the local host, run:\n\n```console\ngpgconf --list-dirs agent-extra-socket\n```\n\nThis should return a path to agent-extra-socket - `/run/user/1000/gnupg/S.gpg-agent.extra` - though on older Linux distros (and macOS) it may be `/home/<user>/.gnupg/S/gpg-agent.extra`\n\nFind the agent socket on the **remote** host:\n\n```console\ngpgconf --list-dirs agent-socket\n```\n\nThis should return a path such as `/run/user/1000/gnupg/S.gpg-agent`\n\nFinally, enable agent forwarding for a given host by adding the following to the local host's `~/.ssh/config` (agent sockets may differ):\n\n```\nHost\n  Hostname remote-host.tld\n  StreamLocalBindUnlink yes\n  RemoteForward /run/user/1000/gnupg/S.gpg-agent /run/user/1000/gnupg/S.gpg-agent.extra\n  #RemoteForward [remote socket] [local socket]\n```\n\nIt may be necessary to edit `gpg-agent.conf` on the *local* host to add the following information:\n\n```\npinentry-program /usr/bin/pinentry-gtk-2\nextra-socket /run/user/1000/gnupg/S.gpg-agent.extra\n```\n\n**Note** The pinentry program starts on the *local* host, not remote.\n\n**Important** Any pinentry program except `pinentry-tty` or `pinentry-curses` may be used. This is because local `gpg-agent` may start headlessly (by systemd without `$GPG_TTY` set locally telling which tty it is on), thus failed to obtain the pin. Errors on the remote may be misleading saying that there is *IO Error*. (Yes, internally there is actually an *IO Error* since it happens when writing to/reading from tty while finding no tty to use, but for end users this is not friendly.)\n\nSee [Issue 85](https://github.com/drduh/YubiKey-Guide/issues/85) for more information and troubleshooting.\n\n### Chained GnuPG agent forwarding\n\nAssume you have gone through the steps above and have `S.gpg-agent` on the *remote*, and you would like to forward this agent into a *third* box, first you may need to configure `sshd_config` of *third* in the same way as *remote*, then in the ssh config of *remote*, add the following lines:\n\n```console\nHost third\n  Hostname third-host.tld\n  StreamLocalBindUnlink yes\n  RemoteForward /run/user/1000/gnupg/S.gpg-agent /run/user/1000/gnupg/S.gpg-agent\n  #RemoteForward [remote socket] [local socket]\n```\n\nYou should change the path according to `gpgconf --list-dirs agent-socket` on *remote* and *third*.\n\n**Note** On *local* you have `S.gpg-agent.extra` whereas on *remote* and *third*, you only have `S.gpg-agent`\n\n## Using multiple YubiKeys\n\nWhen a GnuPG key is added to YubiKey using `keytocard`, the key is deleted from the keyring and a **stub** is added, pointing to the YubiKey. The stub identifies the GnuPG key ID and YubiKey serial number.\n\nWhen a Subkey is added to an additional YubiKey, the stub is overwritten and will now point to the latest YubiKey. GnuPG will request a specific YubiKey by serial number, as referenced by the stub, and will not recognize another YubiKey with a different serial number.\n\nTo scan an additional YubiKey and recreate the correct stub:\n\n```console\ngpg-connect-agent \"scd serialno\" \"learn --force\" /bye\n```\n\nAlternatively, use a script to delete the GnuPG shadowed key, where the card serial number is stored (see [GnuPG #T2291](https://dev.gnupg.org/T2291)):\n\n```console\ncat >> ~/scripts/remove-keygrips.sh <<EOF\n#!/usr/bin/env bash\n(( $# )) || { echo \"Specify a key.\" >&2; exit 1; }\nKEYGRIPS=$(gpg --with-keygrip --list-secret-keys \"$@\" | awk '/Keygrip/ { print $3 }')\nfor keygrip in $KEYGRIPS\ndo\n    rm \"$HOME/.gnupg/private-keys-v1.d/$keygrip.key\" 2> /dev/null\ndone\n\ngpg --card-status\nEOF\n\nchmod +x ~/scripts/remove-keygrips.sh\n\n~/scripts/remove-keygrips.sh $KEYID\n```\n\nSee discussion in Issues [#19](https://github.com/drduh/YubiKey-Guide/issues/19) and [#112](https://github.com/drduh/YubiKey-Guide/issues/112) for more information and troubleshooting steps.\n\n## Email\n\nYubiKey can be used to decrypt and sign emails and attachments using [Thunderbird](https://www.thunderbird.net/), [Enigmail](https://www.enigmail.net) and [Mutt](http://www.mutt.org/). Thunderbird supports OAuth 2 authentication and can be used with Gmail. See [this EFF guide](https://ssd.eff.org/en/module/how-use-pgp-linux) for more information. Mutt has OAuth 2 support since version 2.0.\n\n### Thunderbird\n\nFollow [instructions on the mozilla wiki](https://wiki.mozilla.org/Thunderbird:OpenPGP:Smartcards#Configure_an_email_account_to_use_an_external_GnuPG_key) to setup your YubiKey with your thunderbird client using the external gpg provider.\n\n**Important** Thunderbird [fails](https://github.com/drduh/YubiKey-Guide/issues/448) to decrypt emails if the ASCII `armor` option is enabled in your `~/.gnupg/gpg.conf`. If you see the error `gpg: [don't know]: invalid packet (ctb=2d)` or `message cannot be decrypted (there are unknown problems with this encrypted message)` simply remove this option from your config file.\n\n### Mailvelope\n\n[Mailvelope](https://www.mailvelope.com/en) allows YubiKey to be used with Gmail and others.\n\n**Important** Mailvelope [does not work](https://github.com/drduh/YubiKey-Guide/issues/178) with the `throw-keyids` option set in `gpg.conf`\n\nOn macOS, install gpgme using Homebrew:\n\n```console\nbrew install gpgme\n```\n\nTo allow Chrome to run gpgme, edit `~/Library/Application\\ Support/Google/Chrome/NativeMessagingHosts/gpgmejson.json` to add:\n\n```json\n{\n    \"name\": \"gpgmejson\",\n    \"description\": \"Integration with GnuPG\",\n    \"path\": \"/usr/local/bin/gpgme-json\",\n    \"type\": \"stdio\",\n    \"allowed_origins\": [\n        \"chrome-extension://kajibbejlbohfaggdiogboambcijhkke/\"\n    ]\n}\n```\n\nEdit the default path to allow Chrome to find GnuPG:\n\n```console\nsudo launchctl config user path /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n```\n\nFinally, install the [Mailvelope extension](https://chromewebstore.google.com/detail/mailvelope/kajibbejlbohfaggdiogboambcijhkke) from the Chrome web store.\n\n### Mutt\n\nMutt has both CLI and TUI interfaces - the latter provides powerful functions for processing email. In addition, PGP can be integrated such that cryptographic operations can be done without leaving TUI.\n\nTo enable GnuPG support, copy `/usr/share/doc/mutt/samples/gpg.rc`\n\nEdit the file to enable options `pgp_default_key`, `pgp_sign_as` and `pgp_autosign`\n\n`source` the file in `muttrc`\n\n**Important** `pinentry-tty` set as the pinentry program in `gpg-agent.conf` is reported to cause problems with Mutt TUI, because it uses curses. It is recommended to use `pinentry-curses` or other graphic pinentry program instead.\n\n## Keyserver\n\nPublic keys can be uploaded to a public server for discoverability:\n\n```console\ngpg --send-key $KEYID\n\ngpg --keyserver keys.gnupg.net --send-key $KEYID\n\ngpg --keyserver hkps://keyserver.ubuntu.com:443 --send-key $KEYID\n```\n\nOr if [uploading to keys.openpgp.org](https://keys.openpgp.org/about/usage):\n\n```console\ngpg --send-key $KEYID | curl -T - https://keys.openpgp.org\n```\n\nThe public key URL can also be added to YubiKey (based on [Shaw 2003](https://datatracker.ietf.org/doc/html/draft-shaw-openpgp-hkp-00)):\n\n```console\nURL=\"hkps://keyserver.ubuntu.com:443/pks/lookup?op=get&search=${KEYID}\"\n```\n\nEdit YubiKey with `gpg --edit-card` and the Admin PIN:\n\n```console\ngpg/card> admin\n\ngpg/card> url\nURL to retrieve public key: hkps://keyserver.ubuntu.com:443/pks/lookup?op=get&search=0xFF00000000000000\n\ngpg/card> quit\n```\n\n# Updating keys\n\nPGP does not provide [forward secrecy](https://en.wikipedia.org/wiki/Forward_secrecy), meaning a compromised key may be used to decrypt all past messages. Although keys stored on YubiKey are more difficult to exploit, it is not impossible: the key and PIN could be physically compromised, or a vulnerability may be discovered in firmware or in the random number generator used to create keys, for example. Therefore, it is recommended practice to rotate Subkeys periodically.\n\nWhen a Subkey expires, it can either be renewed or replaced. Both actions require access to the Certify key.\n\n- Renewing Subkeys by updating expiration indicates continued possession of the Certify key and is more convenient.\n\n- Replacing Subkeys is less convenient but potentially more secure: the new Subkeys will **not** be able to decrypt previous messages, authenticate with SSH, etc. Contacts will need to receive the updated public key and any encrypted secrets need to be decrypted and re-encrypted to new Subkeys to be usable. This process is functionally equivalent to losing the YubiKey and provisioning a new one.\n\nNeither rotation method is superior and it is up to personal philosophy on identity management and individual threat modeling to decide which one to use, or whether to expire Subkeys at all. Ideally, Subkeys would be ephemeral: used only once for each unique encryption, signature and authentication event, however in practice that is not really practical nor worthwhile with YubiKey. Advanced users may dedicate an air-gapped machine for frequent credential rotation.\n\nTo renew or rotate Subkeys, follow the same process as generating keys: boot to a secure environment, install required software and disable networking.\n\nConnect the portable storage device with the Certify key and identify the disk label.\n\nDecrypt and mount the encrypted volume:\n\n```console\nsudo cryptsetup luksOpen /dev/sdc1 gnupg-secrets\n\nsudo mkdir /mnt/encrypted-storage\n\nsudo mount /dev/mapper/gnupg-secrets /mnt/encrypted-storage\n```\n\nMount the non-encrypted public partition:\n\n```console\nsudo mkdir /mnt/public\n\nsudo mount /dev/sdc2 /mnt/public\n```\n\nCopy the original private key materials to a temporary working directory:\n\n```console\nexport GNUPGHOME=$(mktemp -d -t gnupg-$(date +%Y-%m-%d)-XXXXXXXXXX)\n\ncd $GNUPGHOME\n\ncp -avi /mnt/encrypted-storage/gnupg-*/* $GNUPGHOME\n```\n\nConfirm the identity is available, set the key id and fingerprint:\n\n```console\ngpg -K\n\nexport KEYID=$(gpg -k --with-colons \"$IDENTITY\" | awk -F: '/^pub:/ { print $5; exit }')\n\nexport KEYFP=$(gpg -k --with-colons \"$IDENTITY\" | awk -F: '/^fpr:/ { print $10; exit }')\n\necho $KEYID $KEYFP\n```\n\nRecall the Certify key passphrase and set it, for example:\n\n```console\nexport CERTIFY_PASS=ABCD-0123-IJKL-4567-QRST-UVWX\n```\n\n## Renew Subkeys\n\nDetermine the updated expiration, for example:\n\n```console\nexport EXPIRATION=2026-09-01\n\nexport EXPIRATION=2y\n```\n\nRenew the Subkeys:\n\n```console\necho \"$CERTIFY_PASS\" | gpg --batch --pinentry-mode=loopback \\\n  --passphrase-fd 0 --quick-set-expire \"$KEYFP\" \"$EXPIRATION\" \\\n  $(gpg -K --with-colons | awk -F: '/^fpr:/ { print $10 }' | tail -n \"+2\" | tr \"\\n\" \" \")\n```\n\nExport the updated public key:\n\n```console\ngpg --armor --export $KEYID | sudo tee /mnt/public/$KEYID-$(date +%F).asc\n```\n\nTransfer the public key to the destination host and import it:\n\n```console\ngpg --import /mnt/public/*.asc\n```\n\nAlternatively, publish to a public key server and download it:\n\n```console\ngpg --send-key $KEYID\n\ngpg --recv $KEYID\n```\n\nThe validity of the GnuPG identity will be extended, allowing it to be used again for encryption and signature operations.\n\nThe SSH public key does **not** need to be updated on remote hosts.\n\n## Rotate Subkeys\n\nFollow the original procedure to [Create Subkeys](#create-subkeys).\n\nPrevious Subkeys can be deleted from the identity.\n\nFinish by transfering new Subkeys to YubiKey.\n\nCopy the **new** temporary working directory to encrypted storage, which is still mounted:\n\n```console\nsudo cp -avi $GNUPGHOME /mnt/encrypted-storage\n```\n\nUnmount and close the encrypted volume:\n\n```console\nsudo umount /mnt/encrypted-storage\n\nsudo cryptsetup luksClose gnupg-secrets\n```\n\nExport the updated public key:\n\n```console\nsudo mkdir /mnt/public\n\nsudo mount /dev/sdc2 /mnt/public\n\ngpg --armor --export $KEYID | sudo tee /mnt/public/$KEYID-$(date +%F).asc\n\nsudo umount /mnt/public\n```\n\nRemove the storage device and follow the original steps to transfer new Subkeys (`4`, `5` and `6`) to YubiKey, replacing existing ones.\n\nReboot or securely erase the GnuPG temporary working directory.\n\n# Reset YubiKey\n\nIf PIN attempts are exceeded, the YubiKey is locked and must be [Reset](https://developers.yubico.com/ykneo-openpgp/ResetApplet.html) and set up again using the encrypted backup.\n\nCopy the following to a file and run `gpg-connect-agent -r $file` to lock and terminate the card. Then re-insert YubiKey to complete reset.\n\n```console\n/hex\nscd serialno\nscd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40\nscd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40\nscd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40\nscd apdu 00 20 00 81 08 40 40 40 40 40 40 40 40\nscd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40\nscd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40\nscd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40\nscd apdu 00 20 00 83 08 40 40 40 40 40 40 40 40\nscd apdu 00 e6 00 00\nscd apdu 00 44 00 00\n/echo Card has been successfully reset.\n/bye\n```\n\nOr use `ykman` (sometimes in `~/.local/bin/`):\n\n```console\n$ ykman openpgp reset\nWARNING! This will delete all stored OpenPGP keys and data and restore factory settings? [y/N]: y\nResetting OpenPGP data, don't remove your YubiKey...\nSuccess! All data has been cleared and default PINs are set.\nPIN:         123456\nReset code:  NOT SET\nAdmin PIN:   12345678\n```\n\n# Optional hardening\n\nThe following steps may improve the security and privacy of YubiKey.\n\n## Improving entropy\n\nGenerating cryptographic keys requires high-quality [randomness](https://www.random.org/randomness/), measured as entropy. Most operating systems use software-based pseudorandom number generators or CPU-based hardware random number generators (HRNG).\n\nOptionally, a device such as [OneRNG](https://onerng.info/onerng/) may be used to [increase the speed](https://lwn.net/Articles/648550/) and possibly the quality of available entropy.\n\nBefore creating keys, configure [rng-tools](https://wiki.archlinux.org/title/Rng-tools):\n\n```console\nsudo apt -y install at rng-tools python3-gnupg openssl\n\nwget https://github.com/OneRNG/onerng.github.io/raw/master/sw/onerng_3.7-1_all.deb\n```\n\nVerify the package:\n\n```console\nsha256sum onerng_3.7-1_all.deb\n```\n\nThe value must match:\n\n```console\nb7cda2fe07dce219a95dfeabeb5ee0f662f64ba1474f6b9dddacc3e8734d8f57\n```\n\nInstall the package:\n\n```console\nsudo dpkg -i onerng_3.7-1_all.deb\n\necho \"HRNGDEVICE=/dev/ttyACM0\" | sudo tee /etc/default/rng-tools\n```\n\nInsert the device and restart rng-tools:\n\n```console\nsudo atd\n\nsudo service rng-tools restart\n```\n\n## Enable KDF\n\n**Note** This feature may not be compatible with older GnuPG versions, especially mobile clients. These incompatible clients will not function because the PIN will always be rejected.\n\nThis step must be completed before changing PINs or moving keys or an error will occur: `gpg: error for setup KDF: Conditions of use not satisfied`\n\nKey Derived Function (KDF) enables YubiKey to store the hash of PIN, preventing the PIN from being passed as plain text.\n\nEnable KDF using the default Admin PIN of `12345678`:\n\n```console\ngpg --command-fd=0 --pinentry-mode=loopback --card-edit <<EOF\nadmin\nkdf-setup\n12345678\nEOF\n```\n\n## Network considerations\n\nThis section is primarily focused on Debian / Ubuntu based systems, but the same concept applies to any system connected to a network.\n\nWhether you're using a VM, installing on dedicated hardware, or running a Live OS temporarily, start *without* a network connection and disable any unnecessary services listening on all interfaces before connecting to the network.\n\nThe reasoning for this is because services like cups or avahi can be listening by default. While this isn't an immediate problem it simply broadens the attack surface. Not everyone will have a dedicated subnet or trusted network equipment they can control, and for the purposes of this guide, these steps treat *any* network as untrusted / hostile.\n\n**Disable Listening Services**\n\n- Ensures only essential network services are running\n- If the service doesn't exist you'll get a \"Failed to stop\" which is fine\n- Only disable `Bluetooth` if you don't need it\n\n```bash\nsudo systemctl stop bluetooth exim4 cups avahi avahi-daemon sshd\n```\n\n**Firewall**\n\nEnable a basic firewall policy of *deny inbound, allow outbound*. Note that Debian does not come with a firewall, simply disabling the services in the previous step is fine. The following options have Ubuntu and similar systems in mind.\n\nOn Ubuntu, `ufw` is built in and easy to enable:\n\n```bash\nsudo ufw enable\n```\n\nOn systems without `ufw`, `nftables` is replacing `iptables`. The [nftables wiki has examples](https://wiki.nftables.org/wiki-nftables/index.php/Simple_ruleset_for_a_workstation) for a baseline *deny inbound, allow outbound* policy. The `fw.inet.basic` policy covers both IPv4 and IPv6.\n\n(Remember to download this README and any other resources to another external drive when creating the bootable media, to have this information ready to use offline)\n\nRegardless of which policy you use, write the contents to a file (e.g. `nftables.conf`) and apply the policy with the following comand:\n\n```bash\nsudo nft -f ./nftables.conf\n```\n\n**Review the System State**\n\n`NetworkManager` should be the only listening service on port 68/udp to obtain a DHCP lease (and 58/icmp6 if you have IPv6).\n\nIf you want to look at every process's command line arguments you can use `ps axjf`. This prints a process tree which may have a large number of lines but should be easy to read on a live image or fresh install.\n\n```bash\nsudo ss -anp -A inet    # Dump all network state information\nps axjf                 # List all processes in a process tree\nps aux                  # BSD syntax, list all processes but no process tree\n```\n\nIf you find any additional processes listening on the network that aren't needed, take note and disable them with one of the following:\n\n```bash\nsudo systemctl stop <process-name>                      # Stops services managed by systemctl\nsudo pkill -f '<process-name-or-command-line-string>'   # Terminate the process by matching it's command line string\npgrep -f '<process-name-or-command-line-string>'        # Obtain the PID\nsudo kill <pid>                                         # Terminate the process via its PID\n```\n\nNow connect to a network.\n\n# Notes\n\n1. YubiKey has two configurations, invoked with either a short or long press. By default, the short-press mode is configured for HID OTP; a brief touch will emit an OTP string starting with `cccccccc`. OTP mode can be swapped to the second configuration via the YubiKey Personalization tool or disabled entirely using [YubiKey Manager](https://developers.yubico.com/yubikey-manager): `ykman config usb -d OTP`\n\n1. Using YubiKey for GnuPG does not prevent use of [other features](https://developers.yubico.com/), such as [WebAuthn](https://developers.yubico.com/WebAuthn/) and [OTP](https://developers.yubico.com/OTP/).\n\n1. Add additional identities to a Certify key with the `adduid` command during setup, then trust it ultimately with `trust` and `5` to configure for use.\n\n1. To switch between YubiKeys, remove the first YubiKey and restart gpg-agent, ssh-agent and pinentry with `pkill \"gpg-agent|ssh-agent|pinentry\" ; eval $(gpg-agent --daemon --enable-ssh-support)` then insert the other YubiKey and run `gpg-connect-agent updatestartuptty /bye`\n\n1. To use YubiKey on multiple computers, import the corresponding public keys, then confirm YubiKey is visible with `gpg --card-status`. Trust the imported public keys ultimately with `trust` and `5`, then `gpg --list-secret-keys` will show the correct and trusted key.\n\n# Troubleshooting\n\n- Use `man gpg` to understand GnuPG options and command-line flags.\n\n- To get more information on potential errors, restart the `gpg-agent` process with debug output to the console with `pkill gpg-agent; gpg-agent --daemon --no-detach -v -v --debug-level advanced --homedir ~/.gnupg`.\n\n- A lot of issues can be fixed by removing and re-inserting YubiKey, or restarting the `gpg-agent` process.\n\n- If you receive the error, `Yubikey core error: no yubikey present` - make sure the YubiKey is inserted correctly. It should blink once when plugged in.\n\n- If you still receive the error, `Yubikey core error: no yubikey present` - you likely need to install newer versions of yubikey-personalize as outlined in [Install software](#install-software).\n\n- If you see `General key info..: [none]` in card status output - import the public key.\n\n- If you receive the error, `gpg: decryption failed: secret key not available` - you likely need to install GnuPG version 2.x. Another possibility is that there is a problem with the PIN, e.g., it is too short or blocked.\n\n- If you receive the error, `Yubikey core error: write error` - YubiKey is likely locked. Install and run yubikey-personalization-gui to unlock it.\n\n- If you receive the error, `Key does not match the card's capability` - you likely need to use 2048-bit RSA key sizes.\n\n- If you receive the error, `sign_and_send_pubkey: signing failed: agent refused operation` - make sure you replaced `ssh-agent` with `gpg-agent` as noted above.\n\n- If you still receive the error, `sign_and_send_pubkey: signing failed: agent refused operation` - [run the command](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=835394) `gpg-connect-agent updatestartuptty /bye`\n\n- If you still receive the error, `sign_and_send_pubkey: signing failed: agent refused operation` - edit `~/.gnupg/gpg-agent.conf` to set a valid `pinentry` program path. `gpg: decryption failed: No secret key` could also indicate an invalid `pinentry` path\n\n- If you still receive the error, `sign_and_send_pubkey: signing failed: agent refused operation` - it is a [known issue](https://bbs.archlinux.org/viewtopic.php?id=274571) that openssh 8.9p1 and higher has issues with YubiKey. Adding `KexAlgorithms -sntrup761x25519-sha512@openssh.com` to `/etc/ssh/ssh_config` often resolves the issue.\n\n- If you receive the error, `The agent has no identities` from `ssh-add -L`, make sure you have installed and started `scdaemon`\n\n- If you receive the error, `Error connecting to agent: No such file or directory` from `ssh-add -L`, the UNIX file socket that the agent uses for communication with other processes may not be set up correctly. On Debian, try `export SSH_AUTH_SOCK=\"/run/user/$UID/gnupg/S.gpg-agent.ssh\"`. Also see that `gpgconf --list-dirs agent-ssh-socket` is returning single path, to existing `S.gpg-agent.ssh` socket.\n\n- If you receive the error, `Permission denied (publickey)`, increase ssh verbosity with the `-v` flag and verify the public key from the card is being offered: `Offering public key: RSA SHA256:abcdefg... cardno:00060123456`. If it is, verify the correct user the target system - not the user on the local system. Otherwise, be sure `IdentitiesOnly` is not [enabled](https://github.com/FiloSottile/whosthere#how-do-i-stop-it) for this host.\n\n- If SSH authentication still fails - add up to 3 `-v` flags to the `ssh` command to increase verbosity.\n\n- If it still fails, it may be useful to stop the background `sshd` daemon process service on the server (e.g. using `sudo systemctl stop sshd`) and instead start it in the foreground with extensive debugging output, using `/usr/sbin/sshd -eddd`. Note that the server will not fork and will only process one connection, therefore has to be re-started after every `ssh` test.\n\n- If you receive the error, `Please insert the card with serial number` see [Using Multiple Keys](#using-multiple-keys).\n\n- If you receive the error, `There is no assurance this key belongs to the named user` or `encryption failed: Unusable public key` or `No public key` use `gpg --edit-key` to set `trust` to `5 = I trust ultimately`\n\n- If, when you try the above command, you get the error `Need the secret key to do this` - specify trust for the key in `~/.gnupg/gpg.conf` by using the `trust-key [key ID]` directive.\n\n- If, when using a previously provisioned YubiKey on a new computer with `pass`, you see the following error on `pass insert`, you need to adjust the trust associated with the key. See the note above.\n\n```\ngpg: 0x0000000000000000: There is no assurance this key belongs to the named user\ngpg: [stdin]: encryption failed: Unusable public key\n```\n\n- If you receive the error, `gpg: 0x0000000000000000: skipped: Unusable public key`, `signing failed: Unusable secret key`, or `encryption failed: Unusable public key` the Subkey may be expired and can no longer be used to encrypt nor sign messages. It can still be used to decrypt and authenticate, however.\n\n- If the _pinentry_ graphical dialog does not show and this error appears: `sign_and_send_pubkey: signing failed: agent refused operation`, install the `dbus-user-session` package and restart for the `dbus` user session to be fully inherited. This is because `pinentry` complains about `No $DBUS_SESSION_BUS_ADDRESS found`, falls back to `curses` but doesn't find the expected `tty`\n\n- If, when you try the above `--card-status` command, you get receive the error, `gpg: selecting card failed: No such device` or `gpg: OpenPGP card not available: No such device`, it's possible that the latest release of pcscd now requires polkit rules to operate properly. Create the following file to allow users in the `wheel` group to use the card. Be sure to restart pcscd when you're done to allow the new rules to take effect.\n\n```console\ncat << EOF >  /etc/polkit-1/rules.d/99-pcscd.rules\npolkit.addRule(function(action, subject) {\n        if (action.id == \"org.debian.pcsc-lite.access_card\" &&\n                subject.isInGroup(\"wheel\")) {\n                return polkit.Result.YES;\n        }\n});\npolkit.addRule(function(action, subject) {\n        if (action.id == \"org.debian.pcsc-lite.access_pcsc\" &&\n                subject.isInGroup(\"wheel\")) {\n                return polkit.Result.YES;\n        }\n});\nEOF\n```\n\n- If the public key is lost, follow [this guide](https://www.nicksherlock.com/2021/08/recovering-lost-gpg-public-keys-from-your-yubikey/) to recover it from YubiKey.\n\n- Refer to Yubico article [Troubleshooting Issues with GPG](https://support.yubico.com/hc/en-us/articles/360013714479-Troubleshooting-Issues-with-GPG) for additional guidance.\n\n# Alternative solutions\n\n* [`vorburger/ed25519-sk.md`](https://github.com/vorburger/vorburger.ch-Notes/blob/develop/security/ed25519-sk.md) - use YubiKey for SSH without GnuPG\n* [`smlx/piv-agent`](https://github.com/smlx/piv-agent) - SSH and GnuPG agent which can be used with PIV devices\n* [`keytotpm`](https://www.gnupg.org/documentation/manuals/gnupg/OpenPGP-Key-Management.html) - use GnuPG with TPM systems\n\n# Additional resources\n\n* [Yubico - PGP](https://developers.yubico.com/PGP/)\n* [Yubico - Yubikey Personalization](https://developers.yubico.com/yubikey-personalization/)\n* [A Visual Explanation of GPG Subkeys (2022)](https://rgoulter.com/blog/posts/programming/2022-06-10-a-visual-explanation-of-gpg-subkeys.html)\n* [dhess/nixos-yubikey](https://github.com/dhess/nixos-yubikey)\n* [lsasolutions/makegpg](https://gitlab.com/lsasolutions/makegpg)\n* [Trammell Hudson - Yubikey (2020)](https://trmm.net/Yubikey)\n* [Yubikey forwarding SSH keys (2019)](https://blog.onefellow.com/post/180065697833/yubikey-forwarding-ssh-keys)\n* [GPG Agent Forwarding (2018)](https://mlohr.com/gpg-agent-forwarding/)\n* [Stick with security: YubiKey, SSH, GnuPG, macOS (2018)](https://evilmartians.com/chronicles/stick-with-security-yubikey-ssh-gnupg-macos)\n* [PGP and SSH keys on a Yubikey NEO (2015)](https://www.esev.com/blog/post/2015-01-pgp-ssh-key-on-yubikey-neo/)\n* [Offline GnuPG Master Key and Subkeys on YubiKey NEO Smartcard (2014)](https://blog.josefsson.org/2014/06/23/offline-gnupg-master-key-and-subkeys-on-yubikey-neo-smartcard/)\n* [Creating the perfect GPG keypair (2013)](https://alexcabal.com/creating-the-perfect-gpg-keypair/)\n",
        "releases": []
    }
}