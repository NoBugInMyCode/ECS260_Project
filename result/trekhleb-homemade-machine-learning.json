{
    "https://api.github.com/repos/trekhleb/homemade-machine-learning": {
        "forks": 4076,
        "watchers": 23248,
        "stars": 23248,
        "languages": {
            "Jupyter Notebook": 7778246,
            "Python": 45905
        },
        "commits": [
            "2024-11-12T20:52:53Z",
            "2023-07-21T18:08:26Z",
            "2023-05-03T19:50:18Z",
            "2023-05-03T19:42:09Z",
            "2022-10-21T20:22:13Z",
            "2022-09-21T07:12:58Z",
            "2022-09-21T07:10:38Z",
            "2022-07-02T15:51:29Z",
            "2022-03-12T16:46:31Z",
            "2022-03-12T16:43:07Z",
            "2020-07-08T16:07:21Z",
            "2020-07-08T05:54:55Z",
            "2020-07-06T20:38:15Z",
            "2020-05-05T15:56:31Z",
            "2020-05-05T15:55:12Z",
            "2019-01-10T11:45:00Z",
            "2019-01-10T11:38:24Z",
            "2019-01-10T11:19:25Z",
            "2019-01-10T06:15:52Z",
            "2019-01-09T06:53:49Z",
            "2019-01-04T05:24:38Z",
            "2019-01-04T04:58:40Z",
            "2018-12-28T06:44:34Z",
            "2018-12-28T06:43:41Z",
            "2018-12-27T05:06:52Z",
            "2018-12-27T04:50:44Z",
            "2018-12-27T04:49:51Z",
            "2018-12-25T14:41:28Z",
            "2018-12-25T14:23:22Z",
            "2018-12-25T08:48:01Z"
        ],
        "creation_date": "2018-11-01T04:34:19Z",
        "contributors": 3,
        "topics": [
            "algorithm",
            "jupyter",
            "jupyter-notebook",
            "machine-learning",
            "machine-learning-algorithms",
            "machinelearning",
            "python"
        ],
        "subscribers": 940,
        "readme": "# Homemade Machine Learning\n\n> \ud83c\uddfa\ud83c\udde6 UKRAINE [IS BEING ATTACKED](https://war.ukraine.ua/) BY RUSSIAN ARMY. CIVILIANS ARE GETTING KILLED. RESIDENTIAL AREAS ARE GETTING BOMBED.\n> - Help Ukraine via:\n>   - [Serhiy Prytula Charity Foundation](https://prytulafoundation.org/en/)\n>   - [Come Back Alive Charity Foundation](https://savelife.in.ua/en/donate-en/)\n>   - [National Bank of Ukraine](https://bank.gov.ua/en/news/all/natsionalniy-bank-vidkriv-spetsrahunok-dlya-zboru-koshtiv-na-potrebi-armiyi)\n> - More info on [war.ukraine.ua](https://war.ukraine.ua/) and [MFA of Ukraine](https://twitter.com/MFA_Ukraine)\n\n<hr/>\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/trekhleb/homemade-machine-learning/master?filepath=notebooks)\n\n> _Read this in other languages:_ [_Espa\u00f1ol_](README.es-ES.md)\n\n\n> _You might be interested in:_\n> - _[Homemade GPT \u2022 JS](https://github.com/trekhleb/homemade-gpt-js)_\n> - _[Interactive Machine Learning Experiments](https://github.com/trekhleb/machine-learning-experiments)_\n\n_For Octave/MatLab version of this repository please check [machine-learning-octave](https://github.com/trekhleb/machine-learning-octave) project._\n\n> This repository contains examples of popular machine learning algorithms implemented in **Python** with mathematics behind them being explained. Each algorithm has interactive **Jupyter Notebook** demo that allows you to play with training data, algorithms configurations and immediately see the results, charts and predictions **right in your browser**. In most cases the explanations are based on [this great machine learning course](https://www.coursera.org/learn/machine-learning) by Andrew Ng.\n\nThe purpose of this repository is _not_ to implement machine learning algorithms by using 3<sup>rd</sup> party library one-liners _but_ rather to practice implementing these algorithms from scratch and get better understanding of the mathematics behind each algorithm. That's why all algorithms implementations are called \"homemade\" and not intended to be used for production.\n\n## Supervised Learning\n\nIn supervised learning we have a set of training data as an input and a set of labels or \"correct answers\" for each training set as an output. Then we're training our model (machine learning algorithm parameters) to map the input to the output correctly (to do correct prediction). The ultimate purpose is to find such model parameters that will successfully continue correct _input\u2192output_ mapping (predictions) even for new input examples.\n\n### Regression\n\nIn regression problems we do real value predictions. Basically we try to draw a line/plane/n-dimensional plane along the training examples.\n\n_Usage examples: stock price forecast, sales analysis, dependency of any number, etc._\n\n#### \ud83e\udd16 Linear Regression\n\n- \ud83d\udcd7 [Math | Linear Regression](homemade/linear_regression) - theory and links for further readings\n- \u2699\ufe0f [Code | Linear Regression](homemade/linear_regression/linear_regression.py) - implementation example\n- \u25b6\ufe0f [Demo | Univariate Linear Regression](https://nbviewer.jupyter.org/github/trekhleb/homemade-machine-learning/blob/master/notebooks/linear_regression/univariate_linear_regression_demo.ipynb) - predict `country happiness` score by `economy GDP`\n- \u25b6\ufe0f [Demo | Multivariate Linear Regression](https://nbviewer.jupyter.org/github/trekhleb/homemade-machine-learning/blob/master/notebooks/linear_regression/multivariate_linear_regression_demo.ipynb) - predict `country happiness` score by `economy GDP` and `freedom index`\n- \u25b6\ufe0f [Demo | Non-linear Regression](https://nbviewer.jupyter.org/github/trekhleb/homemade-machine-learning/blob/master/notebooks/linear_regression/non_linear_regression_demo.ipynb) - use linear regression with _polynomial_ and _sinusoid_ features to predict non-linear dependencies\n\n### Classification\n\nIn classification problems we split input examples by certain characteristic.\n\n_Usage examples: spam-filters, language detection, finding similar documents, handwritten letters recognition, etc._\n\n#### \ud83e\udd16 Logistic Regression\n\n- \ud83d\udcd7 [Math | Logistic Regression](homemade/logistic_regression) - theory and links for further readings\n- \u2699\ufe0f [Code | Logistic Regression](homemade/logistic_regression/logistic_regression.py) - implementation example\n- \u25b6\ufe0f [Demo | Logistic Regression (Linear Boundary)](https://nbviewer.jupyter.org/github/trekhleb/homemade-machine-learning/blob/master/notebooks/logistic_regression/logistic_regression_with_linear_boundary_demo.ipynb) - predict Iris flower `class` based on `petal_length` and `petal_width`\n- \u25b6\ufe0f [Demo | Logistic Regression (Non-Linear Boundary)](https://nbviewer.jupyter.org/github/trekhleb/homemade-machine-learning/blob/master/notebooks/logistic_regression/logistic_regression_with_non_linear_boundary_demo.ipynb) - predict microchip `validity` based on `param_1` and `param_2`\n- \u25b6\ufe0f [Demo | Multivariate Logistic Regression | MNIST](https://nbviewer.jupyter.org/github/trekhleb/homemade-machine-learning/blob/master/notebooks/logistic_regression/multivariate_logistic_regression_demo.ipynb) - recognize handwritten digits from `28x28` pixel images\n- \u25b6\ufe0f [Demo | Multivariate Logistic Regression | Fashion MNIST](https://nbviewer.jupyter.org/github/trekhleb/homemade-machine-learning/blob/master/notebooks/logistic_regression/multivariate_logistic_regression_fashion_demo.ipynb) - recognize clothes types from `28x28` pixel images\n\n## Unsupervised Learning\n\nUnsupervised learning is a branch of machine learning that learns from test data that has not been labeled, classified or categorized. Instead of responding to feedback, unsupervised learning identifies commonalities in the data and reacts based on the presence or absence of such commonalities in each new piece of data.\n\n### Clustering\n\nIn clustering problems we split the training examples by unknown characteristics. The algorithm itself decides what characteristic to use for splitting.\n\n_Usage examples: market segmentation, social networks analysis, organize computing clusters, astronomical data analysis, image compression, etc._\n\n#### \ud83e\udd16 K-means Algorithm\n\n- \ud83d\udcd7 [Math | K-means Algorithm](homemade/k_means) - theory and links for further readings\n- \u2699\ufe0f [Code | K-means Algorithm](homemade/k_means/k_means.py) - implementation example\n- \u25b6\ufe0f [Demo | K-means Algorithm](https://nbviewer.jupyter.org/github/trekhleb/homemade-machine-learning/blob/master/notebooks/k_means/k_means_demo.ipynb) - split Iris flowers into clusters based on `petal_length` and `petal_width`\n\n### Anomaly Detection\n\nAnomaly detection (also outlier detection) is the identification of rare items, events or observations which raise suspicions by differing significantly from the majority of the data.\n\n_Usage examples: intrusion detection, fraud detection, system health monitoring, removing anomalous data from the dataset etc._\n\n#### \ud83e\udd16 Anomaly Detection using Gaussian Distribution\n\n- \ud83d\udcd7 [Math | Anomaly Detection using Gaussian Distribution](homemade/anomaly_detection) - theory and links for further readings\n- \u2699\ufe0f [Code | Anomaly Detection using Gaussian Distribution](homemade/anomaly_detection/gaussian_anomaly_detection.py) - implementation example\n- \u25b6\ufe0f [Demo | Anomaly Detection](https://nbviewer.jupyter.org/github/trekhleb/homemade-machine-learning/blob/master/notebooks/anomaly_detection/anomaly_detection_gaussian_demo.ipynb) - find anomalies in server operational parameters like `latency` and `threshold`\n\n## Neural Network (NN)\n\nThe neural network itself isn't an algorithm, but rather a framework for many different machine learning algorithms to work together and process complex data inputs.\n\n_Usage examples: as a substitute of all other algorithms in general, image recognition, voice recognition, image processing (applying specific style), language translation, etc._\n\n#### \ud83e\udd16 Multilayer Perceptron (MLP)\n\n- \ud83d\udcd7 [Math | Multilayer Perceptron](homemade/neural_network) - theory and links for further readings\n- \u2699\ufe0f [Code | Multilayer Perceptron](homemade/neural_network/multilayer_perceptron.py) - implementation example\n- \u25b6\ufe0f [Demo | Multilayer Perceptron | MNIST](https://nbviewer.jupyter.org/github/trekhleb/homemade-machine-learning/blob/master/notebooks/neural_network/multilayer_perceptron_demo.ipynb) - recognize handwritten digits from `28x28` pixel images\n- \u25b6\ufe0f [Demo | Multilayer Perceptron | Fashion MNIST](https://nbviewer.jupyter.org/github/trekhleb/homemade-machine-learning/blob/master/notebooks/neural_network/multilayer_perceptron_fashion_demo.ipynb) - recognize the type of clothes from `28x28` pixel images\n\n## Machine Learning Map\n\n![Machine Learning Map](images/machine-learning-map.png)\n\nThe source of the following machine learning topics map is [this wonderful blog post](https://vas3k.ru/blog/machine_learning/)\n\n## Prerequisites\n\n#### Installing Python\n\nMake sure that you have [Python installed](https://realpython.com/installing-python/) on your machine.\n\nYou might want to use [venv](https://docs.python.org/3/library/venv.html) standard Python library\nto create virtual environments and have Python, `pip` and all dependent packages to be installed and \nserved from the local project directory to avoid messing with system wide packages and their \nversions.\n\n#### Installing Dependencies\n\nInstall all dependencies that are required for the project by running:\n\n```bash\npip install -r requirements.txt\n```\n\n#### Launching Jupyter Locally\n\nAll demos in the project may be run directly in your browser without installing Jupyter locally. But if you want to launch [Jupyter Notebook](http://jupyter.org/) locally you may do it by running the following command from the root folder of the project:\n\n```bash\njupyter notebook\n```\nAfter this Jupyter Notebook will be accessible by `http://localhost:8888`.\n\n#### Launching Jupyter Remotely\n\nEach algorithm section contains demo links to [Jupyter NBViewer](http://nbviewer.jupyter.org/). This is fast online previewer for Jupyter notebooks where you may see demo code, charts and data right in your browser without installing anything locally. In case if you want to _change_ the code and _experiment_ with demo notebook you need to launch the notebook in [Binder](https://mybinder.org/). You may do it by simply clicking the _\"Execute on Binder\"_ link in top right corner of the NBViewer.\n\n![](./images/binder-button-place.png)\n\n## Datasets\n\nThe list of datasets that is being used for Jupyter Notebook demos may be found in [data folder](data).\n\n## Supporting the project\n\nYou may support this project via \u2764\ufe0f\ufe0f [GitHub](https://github.com/sponsors/trekhleb) or \u2764\ufe0f\ufe0f [Patreon](https://www.patreon.com/trekhleb).\n\n## Author\n\n- [@trekhleb](https://trekhleb.dev)\n",
        "releases": []
    }
}