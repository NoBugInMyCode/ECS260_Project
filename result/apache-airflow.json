{
    "https://api.github.com/repos/apache/airflow": {
        "forks": 14550,
        "watchers": 38385,
        "stars": 38385,
        "languages": {
            "Python": 38664034,
            "TypeScript": 2043679,
            "JavaScript": 280233,
            "HTML": 190640,
            "Shell": 190272,
            "Dockerfile": 88056,
            "Jinja": 51226,
            "CSS": 35545,
            "Go": 9491,
            "Jupyter Notebook": 5572,
            "HCL": 3786,
            "Mako": 2684
        },
        "commits": [
            "2025-01-22T05:29:41Z",
            "2025-01-22T04:04:27Z",
            "2025-01-21T23:46:20Z",
            "2025-01-21T23:31:24Z",
            "2025-01-21T23:26:21Z",
            "2025-01-21T22:50:44Z",
            "2025-01-21T22:34:12Z",
            "2025-01-21T22:18:50Z",
            "2025-01-21T21:56:53Z",
            "2025-01-21T21:48:27Z",
            "2025-01-21T16:26:53Z",
            "2025-01-21T16:06:37Z",
            "2025-01-21T15:52:00Z",
            "2025-01-21T13:46:49Z",
            "2025-01-21T13:46:17Z",
            "2025-01-21T12:45:34Z",
            "2025-01-21T12:22:36Z",
            "2025-01-21T11:49:46Z",
            "2025-01-21T11:05:19Z",
            "2025-01-21T09:40:02Z",
            "2025-01-21T05:44:25Z",
            "2025-01-21T05:36:58Z",
            "2025-01-21T02:04:41Z",
            "2025-01-20T22:56:17Z",
            "2025-01-20T22:54:44Z",
            "2025-01-20T22:43:56Z",
            "2025-01-20T22:31:52Z",
            "2025-01-20T22:31:38Z",
            "2025-01-20T21:45:01Z",
            "2025-01-20T17:52:53Z"
        ],
        "creation_date": "2015-04-13T18:04:58Z",
        "contributors": 30,
        "topics": [
            "airflow",
            "apache",
            "apache-airflow",
            "automation",
            "dag",
            "data-engineering",
            "data-integration",
            "data-orchestrator",
            "data-pipelines",
            "data-science",
            "elt",
            "etl",
            "machine-learning",
            "mlops",
            "orchestration",
            "python",
            "scheduler",
            "workflow",
            "workflow-engine",
            "workflow-orchestration"
        ],
        "subscribers": 767,
        "readme": "<!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n distributed with this work for additional information\n regarding copyright ownership.  The ASF licenses this file\n to you under the Apache License, Version 2.0 (the\n \"License\"); you may not use this file except in compliance\n with the License.  You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing,\n software distributed under the License is distributed on an\n \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n KIND, either express or implied.  See the License for the\n specific language governing permissions and limitations\n under the License.\n-->\n\n<!-- START Apache Airflow, please keep comment here to allow auto update of PyPI readme.md -->\n# Apache Airflow\n\n[![PyPI version](https://badge.fury.io/py/apache-airflow.svg)](https://badge.fury.io/py/apache-airflow)\n[![GitHub Build](https://github.com/apache/airflow/actions/workflows/ci.yml/badge.svg)](https://github.com/apache/airflow/actions)\n[![Coverage Status](https://codecov.io/gh/apache/airflow/graph/badge.svg?token=WdLKlKHOAU)](https://codecov.io/gh/apache/airflow)\n[![License](https://img.shields.io/:license-Apache%202-blue.svg)](https://www.apache.org/licenses/LICENSE-2.0.txt)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/apache-airflow.svg)](https://pypi.org/project/apache-airflow/)\n[![Docker Pulls](https://img.shields.io/docker/pulls/apache/airflow.svg)](https://hub.docker.com/r/apache/airflow)\n[![Docker Stars](https://img.shields.io/docker/stars/apache/airflow.svg)](https://hub.docker.com/r/apache/airflow)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/apache-airflow)](https://pypi.org/project/apache-airflow/)\n[![Artifact HUB](https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/apache-airflow)](https://artifacthub.io/packages/search?repo=apache-airflow)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Twitter Follow](https://img.shields.io/twitter/follow/ApacheAirflow.svg?style=social&label=Follow)](https://x.com/ApacheAirflow)\n[![Slack Status](https://img.shields.io/badge/slack-join_chat-white.svg?logo=slack&style=social)](https://s.apache.org/airflow-slack)\n[![Contributors](https://img.shields.io/github/contributors/apache/airflow)](https://github.com/apache/airflow/graphs/contributors)\n[![OSSRank](https://shields.io/endpoint?url=https://ossrank.com/shield/6)](https://ossrank.com/p/6)\n\n<picture width=\"500\">\n  <img\n    src=\"https://github.com/apache/airflow/blob/19ebcac2395ef9a6b6ded3a2faa29dc960c1e635/docs/apache-airflow/img/logos/wordmark_1.png?raw=true\"\n    alt=\"Apache Airflow logo\"\n  />\n</picture>\n\n[Apache Airflow](https://airflow.apache.org/docs/apache-airflow/stable/) (or simply Airflow) is a platform to programmatically author, schedule, and monitor workflows.\n\nWhen workflows are defined as code, they become more maintainable, versionable, testable, and collaborative.\n\nUse Airflow to author workflows as directed acyclic graphs (DAGs) of tasks. The Airflow scheduler executes your tasks on an array of workers while following the specified dependencies. Rich command line utilities make performing complex surgeries on DAGs a snap. The rich user interface makes it easy to visualize pipelines running in production, monitor progress, and troubleshoot issues when needed.\n\n<!-- END Apache Airflow, please keep comment here to allow auto update of PyPI readme.md -->\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of contents**\n\n- [Project Focus](#project-focus)\n- [Principles](#principles)\n- [Requirements](#requirements)\n- [Getting started](#getting-started)\n- [Installing from PyPI](#installing-from-pypi)\n- [Official source code](#official-source-code)\n- [Convenience packages](#convenience-packages)\n- [User Interface](#user-interface)\n- [Semantic versioning](#semantic-versioning)\n- [Version Life Cycle](#version-life-cycle)\n- [Support for Python and Kubernetes versions](#support-for-python-and-kubernetes-versions)\n- [Base OS support for reference Airflow images](#base-os-support-for-reference-airflow-images)\n- [Approach to dependencies of Airflow](#approach-to-dependencies-of-airflow)\n- [Contributing](#contributing)\n- [Voting Policy](#voting-policy)\n- [Who uses Apache Airflow?](#who-uses-apache-airflow)\n- [Who maintains Apache Airflow?](#who-maintains-apache-airflow)\n- [What goes into the next release?](#what-goes-into-the-next-release)\n- [Can I use the Apache Airflow logo in my presentation?](#can-i-use-the-apache-airflow-logo-in-my-presentation)\n- [Links](#links)\n- [Sponsors](#sponsors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Project Focus\n\nAirflow works best with workflows that are mostly static and slowly changing. When the DAG structure is similar from one run to the next, it clarifies the unit of work and continuity. Other similar projects include [Luigi](https://github.com/spotify/luigi), [Oozie](https://oozie.apache.org/) and [Azkaban](https://azkaban.github.io/).\n\nAirflow is commonly used to process data, but has the opinion that tasks should ideally be idempotent (i.e., results of the task will be the same, and will not create duplicated data in a destination system), and should not pass large quantities of data from one task to the next (though tasks can pass metadata using Airflow's [XCom feature](https://airflow.apache.org/docs/apache-airflow/stable/concepts/xcoms.html)). For high-volume, data-intensive tasks, a best practice is to delegate to external services specializing in that type of work.\n\nAirflow is not a streaming solution, but it is often used to process real-time data, pulling data off streams in batches.\n\n## Principles\n\n- **Dynamic**: Airflow pipelines are configuration as code (Python), allowing for dynamic pipeline generation. This allows for writing code that instantiates pipelines dynamically.\n- **Extensible**: Easily define your own operators, executors and extend the library so that it fits the level of abstraction that suits your environment.\n- **Elegant**: Airflow pipelines are lean and explicit. Parameterizing your scripts is built into the core of Airflow using the powerful **Jinja** templating engine.\n- **Scalable**: Airflow has a modular architecture and uses a message queue to orchestrate an arbitrary number of workers.\n\n<!-- START Requirements, please keep comment here to allow auto update of PyPI readme.md -->\n## Requirements\n\nApache Airflow is tested with:\n\n|            | Main version (dev)         | Stable version (2.10.4)    |\n|------------|----------------------------|----------------------------|\n| Python     | 3.9, 3.10, 3.11, 3.12      | 3.8, 3.9, 3.10, 3.11, 3.12 |\n| Platform   | AMD64/ARM64(\\*)            | AMD64/ARM64(\\*)            |\n| Kubernetes | 1.28, 1.29, 1.30, 1.31     | 1.27, 1.28, 1.29, 1.30     |\n| PostgreSQL | 13, 14, 15, 16, 17         | 12, 13, 14, 15, 16         |\n| MySQL      | 8.0, 8.4, Innovation       | 8.0, 8.4, Innovation       |\n| SQLite     | 3.15.0+                    | 3.15.0+                    |\n\n\\* Experimental\n\n**Note**: MariaDB is not tested/recommended.\n\n**Note**: SQLite is used in Airflow tests. Do not use it in production. We recommend\nusing the latest stable version of SQLite for local development.\n\n**Note**: Airflow currently can be run on POSIX-compliant Operating Systems. For development, it is regularly\ntested on fairly modern Linux Distros and recent versions of macOS.\nOn Windows you can run it via WSL2 (Windows Subsystem for Linux 2) or via Linux Containers.\nThe work to add Windows support is tracked via [#10388](https://github.com/apache/airflow/issues/10388), but\nit is not a high priority. You should only use Linux-based distros as \"Production\" execution environment\nas this is the only environment that is supported. The only distro that is used in our CI tests and that\nis used in the [Community managed DockerHub image](https://hub.docker.com/p/apache/airflow) is\n`Debian Bookworm`.\n\n<!-- END Requirements, please keep comment here to allow auto update of PyPI readme.md -->\n<!-- START Getting started, please keep comment here to allow auto update of PyPI readme.md -->\n## Getting started\n\nVisit the official Airflow website documentation (latest **stable** release) for help with\n[installing Airflow](https://airflow.apache.org/docs/apache-airflow/stable/installation/),\n[getting started](https://airflow.apache.org/docs/apache-airflow/stable/start.html), or walking\nthrough a more complete [tutorial](https://airflow.apache.org/docs/apache-airflow/stable/tutorial/).\n\n> Note: If you're looking for documentation for the main branch (latest development branch): you can find it on [s.apache.org/airflow-docs](https://s.apache.org/airflow-docs/).\n\nFor more information on Airflow Improvement Proposals (AIPs), visit\nthe [Airflow Wiki](https://cwiki.apache.org/confluence/display/AIRFLOW/Airflow+Improvement+Proposals).\n\nDocumentation for dependent projects like provider packages, Docker image, Helm Chart, you'll find it in [the documentation index](https://airflow.apache.org/docs/).\n\n<!-- END Getting started, please keep comment here to allow auto update of PyPI readme.md -->\n<!-- START Installing from PyPI, please keep comment here to allow auto update of PyPI readme.md -->\n## Installing from PyPI\n\nWe publish Apache Airflow as `apache-airflow` package in PyPI. Installing it however might be sometimes tricky\nbecause Airflow is a bit of both a library and application. Libraries usually keep their dependencies open, and\napplications usually pin them, but we should do neither and both simultaneously. We decided to keep\nour dependencies as open as possible (in `pyproject.toml`) so users can install different versions of libraries\nif needed. This means that `pip install apache-airflow` will not work from time to time or will\nproduce unusable Airflow installation.\n\nTo have repeatable installation, however, we keep a set of \"known-to-be-working\" constraint\nfiles in the orphan `constraints-main` and `constraints-2-0` branches. We keep those \"known-to-be-working\"\nconstraints files separately per major/minor Python version.\nYou can use them as constraint files when installing Airflow from PyPI. Note that you have to specify\ncorrect Airflow tag/version/branch and Python versions in the URL.\n\n\n1. Installing just Airflow:\n\n> Note: Only `pip` installation is currently officially supported.\n\nWhile it is possible to install Airflow with tools like [Poetry](https://python-poetry.org) or\n[pip-tools](https://pypi.org/project/pip-tools), they do not share the same workflow as\n`pip` - especially when it comes to constraint vs. requirements management.\nInstalling via `Poetry` or `pip-tools` is not currently supported.\n\nThere are known issues with ``bazel`` that might lead to circular dependencies when using it to install\nAirflow. Please switch to ``pip`` if you encounter such problems. ``Bazel`` community works on fixing\nthe problem in `this PR <https://github.com/bazelbuild/rules_python/pull/1166>`_ so it might be that\nnewer versions of ``bazel`` will handle it.\n\nIf you wish to install Airflow using those tools, you should use the constraint files and convert\nthem to the appropriate format and workflow that your tool requires.\n\n\n```bash\npip install 'apache-airflow==2.10.4' \\\n --constraint \"https://raw.githubusercontent.com/apache/airflow/constraints-2.10.4/constraints-3.9.txt\"\n```\n\n2. Installing with extras (i.e., postgres, google)\n\n```bash\npip install 'apache-airflow[postgres,google]==2.10.4' \\\n --constraint \"https://raw.githubusercontent.com/apache/airflow/constraints-2.10.4/constraints-3.9.txt\"\n```\n\nFor information on installing provider packages, check\n[providers](http://airflow.apache.org/docs/apache-airflow-providers/index.html).\n\n<!-- END Installing from PyPI, please keep comment here to allow auto update of PyPI readme.md -->\n<!-- START Official source code, please keep comment here to allow auto update of PyPI readme.md -->\n## Official source code\n\nApache Airflow is an [Apache Software Foundation](https://www.apache.org) (ASF) project,\nand our official source code releases:\n\n- Follow the [ASF Release Policy](https://www.apache.org/legal/release-policy.html)\n- Can be downloaded from [the ASF Distribution Directory](https://downloads.apache.org/airflow)\n- Are cryptographically signed by the release manager\n- Are officially voted on by the PMC members during the\n  [Release Approval Process](https://www.apache.org/legal/release-policy.html#release-approval)\n\nFollowing the ASF rules, the source packages released must be sufficient for a user to build and test the\nrelease provided they have access to the appropriate platform and tools.\n\n<!-- END Official source code, please keep comment here to allow auto update of PyPI readme.md -->\n## Convenience packages\n\nThere are other ways of installing and using Airflow. Those are \"convenience\" methods - they are\nnot \"official releases\" as stated by the `ASF Release Policy`, but they can be used by the users\nwho do not want to build the software themselves.\n\nThose are - in the order of most common ways people install Airflow:\n\n- [PyPI releases](https://pypi.org/project/apache-airflow/) to install Airflow using standard `pip` tool\n- [Docker Images](https://hub.docker.com/r/apache/airflow) to install airflow via\n  `docker` tool, use them in Kubernetes, Helm Charts, `docker-compose`, `docker swarm`, etc. You can\n  read more about using, customizing, and extending the images in the\n  [Latest docs](https://airflow.apache.org/docs/docker-stack/index.html), and\n  learn details on the internals in the [images](https://airflow.apache.org/docs/docker-stack/index.html) document.\n- [Tags in GitHub](https://github.com/apache/airflow/tags) to retrieve the git project sources that\n  were used to generate official source packages via git\n\nAll those artifacts are not official releases, but they are prepared using officially released sources.\nSome of those artifacts are \"development\" or \"pre-release\" ones, and they are clearly marked as such\nfollowing the ASF Policy.\n\n## User Interface\n\n- **DAGs**: Overview of all DAGs in your environment.\n\n  ![DAGs](https://raw.githubusercontent.com/apache/airflow/main/docs/apache-airflow/img/dags.png)\n\n- **Grid**: Grid representation of a DAG that spans across time.\n\n  ![Grid](https://raw.githubusercontent.com/apache/airflow/main/docs/apache-airflow/img/grid.png)\n\n- **Graph**: Visualization of a DAG's dependencies and their current status for a specific run.\n\n  ![Graph](https://raw.githubusercontent.com/apache/airflow/main/docs/apache-airflow/img/graph.png)\n\n- **Task Duration**: Total time spent on different tasks over time.\n\n  ![Task Duration](https://raw.githubusercontent.com/apache/airflow/main/docs/apache-airflow/img/duration.png)\n\n- **Gantt**: Duration and overlap of a DAG.\n\n  ![Gantt](https://raw.githubusercontent.com/apache/airflow/main/docs/apache-airflow/img/gantt.png)\n\n- **Code**: Quick way to view source code of a DAG.\n\n  ![Code](https://raw.githubusercontent.com/apache/airflow/main/docs/apache-airflow/img/code.png)\n\n## Semantic versioning\n\nAs of Airflow 2.0.0, we support a strict [SemVer](https://semver.org/) approach for all packages released.\n\nThere are few specific rules that we agreed to that define details of versioning of the different\npackages:\n\n* **Airflow**: SemVer rules apply to core airflow only (excludes any changes to providers).\n  Changing limits for versions of Airflow dependencies is not a breaking change on its own.\n* **Airflow Providers**: SemVer rules apply to changes in the particular provider's code only.\n  SemVer MAJOR and MINOR versions for the packages are independent of the Airflow version.\n  For example, `google 4.1.0` and `amazon 3.0.3` providers can happily be installed\n  with `Airflow 2.1.2`. If there are limits of cross-dependencies between providers and Airflow packages,\n  they are present in providers as `install_requires` limitations. We aim to keep backwards\n  compatibility of providers with all previously released Airflow 2 versions but\n  there will sometimes be breaking changes that might make some, or all\n  providers, have minimum Airflow version specified.\n* **Airflow Helm Chart**: SemVer rules apply to changes in the chart only. SemVer MAJOR and MINOR\n  versions for the chart are independent of the Airflow version. We aim to keep backwards\n  compatibility of the Helm Chart with all released Airflow 2 versions, but some new features might\n  only work starting from specific Airflow releases. We might however limit the Helm\n  Chart to depend on minimal Airflow version.\n* **Airflow API clients**: Their versioning is independent from Airflow versions. They follow their own\n  SemVer rules for breaking changes and new features - which for example allows to change the way we generate\n  the clients.\n\n## Version Life Cycle\n\nApache Airflow version life cycle:\n\n<!-- This table is automatically updated by pre-commit scripts/ci/pre_commit/supported_versions.py -->\n<!-- Beginning of auto-generated table -->\n\n| Version   | Current Patch/Minor   | State     | First Release   | Limited Support   | EOL/Terminated   |\n|-----------|-----------------------|-----------|-----------------|-------------------|------------------|\n| 2         | 2.10.4                | Supported | Dec 17, 2020    | TBD               | TBD              |\n| 1.10      | 1.10.15               | EOL       | Aug 27, 2018    | Dec 17, 2020      | June 17, 2021    |\n| 1.9       | 1.9.0                 | EOL       | Jan 03, 2018    | Aug 27, 2018      | Aug 27, 2018     |\n| 1.8       | 1.8.2                 | EOL       | Mar 19, 2017    | Jan 03, 2018      | Jan 03, 2018     |\n| 1.7       | 1.7.1.2               | EOL       | Mar 28, 2016    | Mar 19, 2017      | Mar 19, 2017     |\n\n<!-- End of auto-generated table -->\n\nLimited support versions will be supported with security and critical bug fix only.\nEOL versions will not get any fixes nor support.\nWe always recommend that all users run the latest available minor release for whatever major version is in use.\nWe **highly** recommend upgrading to the latest Airflow major release at the earliest convenient time and before the EOL date.\n\n## Support for Python and Kubernetes versions\n\nAs of Airflow 2.0, we agreed to certain rules we follow for Python and Kubernetes support.\nThey are based on the official release schedule of Python and Kubernetes, nicely summarized in the\n[Python Developer's Guide](https://devguide.python.org/#status-of-python-branches) and\n[Kubernetes version skew policy](https://kubernetes.io/docs/setup/release/version-skew-policy/).\n\n1. We drop support for Python and Kubernetes versions when they reach EOL. Except for Kubernetes, a\n   version stays supported by Airflow if two major cloud providers still provide support for it. We drop\n   support for those EOL versions in main right after EOL date, and it is effectively removed when we release\n   the first new MINOR (Or MAJOR if there is no new MINOR version) of Airflow. For example, for Python 3.9 it\n   means that we will drop support in main right after 27.06.2023, and the first MAJOR or MINOR version of\n   Airflow released after will not have it.\n\n2. We support a new version of Python/Kubernetes in main after they are officially released, as soon as we\n   make them work in our CI pipeline (which might not be immediate due to dependencies catching up with\n   new versions of Python mostly) we release new images/support in Airflow based on the working CI setup.\n\n3. This policy is best-effort which means there may be situations where we might terminate support earlier\n   if circumstances require it.\n\n## Base OS support for reference Airflow images\n\nThe Airflow Community provides conveniently packaged container images that are published whenever\nwe publish an Apache Airflow release. Those images contain:\n\n* Base OS with necessary packages to install Airflow (stable Debian OS)\n* Base Python installation in versions supported at the time of release for the MINOR version of\n  Airflow released (so there could be different versions for 2.3 and 2.2 line for example)\n* Libraries required to connect to supported Databases (again the set of databases supported depends\n  on the MINOR version of Airflow)\n* Predefined set of popular providers (for details see the [Dockerfile](https://raw.githubusercontent.com/apache/airflow/main/Dockerfile)).\n* Possibility of building your own, custom image where the user can choose their own set of providers\n  and libraries (see [Building the image](https://airflow.apache.org/docs/docker-stack/build.html))\n* In the future Airflow might also support a \"slim\" version without providers nor database clients installed\n\nThe version of the base OS image is the stable version of Debian. Airflow supports using all currently active\nstable versions - as soon as all Airflow dependencies support building, and we set up the CI pipeline for\nbuilding and testing the OS version. Approximately 6 months before the end-of-regular support of a\nprevious stable version of the OS, Airflow switches the images released to use the latest supported\nversion of the OS.\n\nFor example switch from ``Debian Bullseye`` to ``Debian Bookworm`` has been implemented\nbefore 2.8.0 release in October 2023 and ``Debian Bookworm`` will be the only option supported as of\nAirflow 2.10.0.\n\nUsers will continue to be able to build their images using stable Debian releases until the end of regular\nsupport and building and verifying of the images happens in our CI but no unit tests were executed using\nthis image in the `main` branch.\n\n## Approach to dependencies of Airflow\n\nAirflow has a lot of dependencies - direct and transitive, also Airflow is both - library and application,\ntherefore our policies to dependencies has to include both - stability of installation of application,\nbut also ability to install newer version of dependencies for those users who develop DAGs. We developed\nthe approach where `constraints` are used to make sure airflow can be installed in a repeatable way, while\nwe do not limit our users to upgrade most of the dependencies. As a result we decided not to upper-bound\nversion of Airflow dependencies by default, unless we have good reasons to believe upper-bounding them is\nneeded because of importance of the dependency as well as risk it involves to upgrade specific dependency.\nWe also upper-bound the dependencies that we know cause problems.\n\nThe constraint mechanism of ours takes care about finding and upgrading all the non-upper bound dependencies\nautomatically (providing that all the tests pass). Our `main` build failures will indicate in case there\nare versions of dependencies that break our tests - indicating that we should either upper-bind them or\nthat we should fix our code/tests to account for the upstream changes from those dependencies.\n\nWhenever we upper-bound such a dependency, we should always comment why we are doing it - i.e. we should have\na good reason why dependency is upper-bound. And we should also mention what is the condition to remove the\nbinding.\n\n### Approach for dependencies for Airflow Core\n\nThose dependencies are maintained in ``pyproject.toml``.\n\nThere are few dependencies that we decided are important enough to upper-bound them by default, as they are\nknown to follow predictable versioning scheme, and we know that new versions of those are very likely to\nbring breaking changes. We commit to regularly review and attempt to upgrade to the newer versions of\nthe dependencies as they are released, but this is manual process.\n\nThe important dependencies are:\n\n* `SQLAlchemy`: upper-bound to specific MINOR version (SQLAlchemy is known to remove deprecations and\n   introduce breaking changes especially that support for different Databases varies and changes at\n   various speed)\n* `Alembic`: it is important to handle our migrations in predictable and performant way. It is developed\n   together with SQLAlchemy. Our experience with Alembic is that it very stable in MINOR version\n* `Flask`: We are using Flask as the back-bone of our web UI and API. We know major version of Flask\n   are very likely to introduce breaking changes across those so limiting it to MAJOR version makes sense\n* `werkzeug`: the library is known to cause problems in new versions. It is tightly coupled with Flask\n   libraries, and we should update them together\n* `celery`: Celery is a crucial component of Airflow as it used for CeleryExecutor (and similar). Celery\n   [follows SemVer](https://docs.celeryq.dev/en/stable/contributing.html?highlight=semver#versions), so\n   we should upper-bound it to the next MAJOR version. Also, when we bump the upper version of the library,\n   we should make sure Celery Provider minimum Airflow version is updated.\n* `kubernetes`: Kubernetes is a crucial component of Airflow as it is used for the KubernetesExecutor\n   (and similar). Kubernetes Python library [follows SemVer](https://github.com/kubernetes-client/python#compatibility),\n   so we should upper-bound it to the next MAJOR version. Also, when we bump the upper version of the library,\n   we should make sure Kubernetes Provider minimum Airflow version is updated.\n\n### Approach for dependencies in Airflow Providers and extras\n\nThe main part of the Airflow is the Airflow Core, but the power of Airflow also comes from a number of\nproviders that extend the core functionality and are released separately, even if we keep them (for now)\nin the same monorepo for convenience. You can read more about the providers in the\n[Providers documentation](https://airflow.apache.org/docs/apache-airflow-providers/index.html). We also\nhave set of policies implemented for maintaining and releasing community-managed providers as well\nas the approach for community vs. 3rd party providers in the [providers](https://github.com/apache/airflow/blob/main/PROVIDERS.rst) document.\n\nThose `extras` and `providers` dependencies are maintained in `provider.yaml` of each provider.\n\nBy default, we should not upper-bound dependencies for providers, however each provider's maintainer\nmight decide to add additional limits (and justify them with comment).\n\n<!-- START Contributing, please keep comment here to allow auto update of PyPI readme.md -->\n\n## Contributing\n\nWant to help build Apache Airflow? Check out our [contributors' guide](https://github.com/apache/airflow/blob/main/contributing-docs/README.rst) for a comprehensive overview of how to contribute, including setup instructions, coding standards, and pull request guidelines.\n\nIf you can't wait to contribute, and want to get started asap, check out the [contribution quickstart](https://github.com/apache/airflow/blob/main/contributing-docs/03_contributors_quick_start.rst) here!\n\nOfficial Docker (container) images for Apache Airflow are described in [images](dev/breeze/doc/ci/02_images.md).\n\n<!-- END Contributing, please keep comment here to allow auto update of PyPI readme.md -->\n<!-- START Who uses Apache Airflow, please keep comment here to allow auto update of PyPI readme.md -->\n\n## Voting Policy\n\n* Commits need a +1 vote from a committer who is not the author\n* When we do AIP voting, both PMC member's and committer's `+1s` are considered a binding vote.\n\n## Who uses Apache Airflow?\n\nWe know about around 500 organizations that are using Apache Airflow (but there are likely many more)\n[in the wild](https://github.com/apache/airflow/blob/main/INTHEWILD.md).\n\nIf you use Airflow - feel free to make a PR to add your organisation to the list.\n\n<!-- END Who uses Apache Airflow, please keep comment here to allow auto update of PyPI readme.md -->\n<!-- START Who maintains Apache Airflow, please keep comment here to allow auto update of PyPI readme.md -->\n\n## Who maintains Apache Airflow?\n\nAirflow is the work of the [community](https://github.com/apache/airflow/graphs/contributors),\nbut the [core committers/maintainers](https://people.apache.org/committers-by-project.html#airflow)\nare responsible for reviewing and merging PRs as well as steering conversations around new feature requests.\nIf you would like to become a maintainer, please review the Apache Airflow\n[committer requirements](https://github.com/apache/airflow/blob/main/COMMITTERS.rst#guidelines-to-become-an-airflow-committer).\n\n<!-- END Who maintains Apache Airflow, please keep comment here to allow auto update of PyPI readme.md -->\n\n## What goes into the next release?\n\nOften you will see an issue that is assigned to specific milestone with Airflow version, or a PR that gets merged\nto the main branch and you might wonder which release the merged PR(s) will be released in or which release the fixed\nissues will be in. The answer to this is as usual - it depends on various scenarios. The answer is different for PRs and Issues.\n\nTo add a bit of context, we are following the [Semver](https://semver.org/) versioning scheme as described in\n[Airflow release process](https://airflow.apache.org/docs/apache-airflow/stable/release-process.html). More\ndetails are explained in detail in this README under the [Semantic versioning](#semantic-versioning) chapter, but\nin short, we have `MAJOR.MINOR.PATCH` versions of Airflow.\n\n* `MAJOR` version is incremented in case of breaking changes\n* `MINOR` version is incremented when there are new features added\n* `PATCH` version is incremented when there are only bug-fixes and doc-only changes\n\nGenerally we release `MINOR` versions of Airflow from a branch that is named after the MINOR version. For example\n`2.7.*` releases are released from `v2-7-stable` branch, `2.8.*` releases are released from `v2-8-stable`\nbranch, etc.\n\n1. Most of the time in our release cycle, when the branch for next `MINOR` branch is not yet created, all\nPRs merged to `main` (unless they get reverted), will find their way to the next `MINOR` release. For example\nif the last release is `2.7.3` and `v2-8-stable` branch is not created yet, the next `MINOR` release\nis `2.8.0` and all PRs merged to main will be released in `2.8.0`. However, some PRs (bug-fixes and\ndoc-only changes) when merged, can be cherry-picked to current `MINOR` branch and released in the\nnext `PATCHLEVEL` release. For example, if `2.8.1` is already released and we are working on `2.9.0dev`,  then\nmarking a PR with `2.8.2` milestone means that it will be cherry-picked to `v2-8-test` branch and\nreleased in `2.8.2rc1`, and eventually in `2.8.2`.\n\n2. When we prepare for the next `MINOR` release, we cut new `v2-*-test` and `v2-*-stable` branch\nand prepare `alpha`, `beta` releases for the next `MINOR` version, the PRs merged to main will still be\nreleased in the next `MINOR` release until `rc` version is cut. This is happening because the `v2-*-test`\nand `v2-*-stable` branches are rebased on top of main when next `beta` and `rc` releases are prepared.\nFor example, when we cut `2.10.0beta1` version, anything merged to main before `2.10.0rc1` is released,\nwill find its way to 2.10.0rc1.\n\n3. Then, once we prepare the first RC candidate for the MINOR release, we stop moving the `v2-*-test` and\n`v2-*-stable` branches and the PRs merged to main will be released in the next `MINOR` release.\nHowever, some PRs (bug-fixes and doc-only changes) when merged, can be cherry-picked to current `MINOR`\nbranch and released in the next `PATCHLEVEL` release - for example when the last released version from `v2-10-stable`\nbranch is `2.10.0rc1`, some of the PRs from main can be marked as `2.10.0` milestone by committers,\nthe release manager will try to cherry-pick them into the release branch.\nIf successful, they will be released in `2.10.0rc2` and subsequently in `2.10.0`. This also applies to\nsubsequent `PATCHLEVEL` versions. When for example `2.10.1` is already released, marking a PR with\n`2.10.2` milestone will mean that it will be cherry-picked to `v2-10-stable` branch and released in `2.10.2rc1`\nand eventually in `2.10.2`.\n\nThe final decision about cherry-picking is made by the release manager.\n\nMarking issues with a milestone is a bit different. Maintainers do not mark issues with a milestone usually,\nnormally they are only marked in PRs. If PR linked to the issue (and \"fixing it\") gets merged and released\nin a specific version following the process described above, the issue will be automatically closed, no\nmilestone will be set for the issue, you need to check the PR that fixed the issue to see which version\nit was released in.\n\nHowever, sometimes maintainers mark issues with specific milestone, which means that the\nissue is important to become a candidate to take a look when the release is being prepared. Since this is an\nOpen-Source project, where basically all contributors volunteer their time, there is no guarantee that specific\nissue will be fixed in specific version. We do not want to hold the release because some issue is not fixed,\nso in such case release manager will reassign such unfixed issues to the next milestone in case they are not\nfixed in time for the current release. Therefore, the milestone for issue is more of an intent that it should be\nlooked at, than promise it will be fixed in the version.\n\nMore context and **FAQ** about the patchlevel release can be found in the\n[What goes into the next release](dev/WHAT_GOES_INTO_THE_NEXT_RELEASE.md) document in the `dev` folder of the\nrepository.\n\n## Can I use the Apache Airflow logo in my presentation?\n\nYes! Be sure to abide by the Apache Foundation [trademark policies](https://www.apache.org/foundation/marks/#books) and the Apache Airflow [Brandbook](https://cwiki.apache.org/confluence/display/AIRFLOW/Brandbook). The most up-to-date logos are found in [this repo](https://github.com/apache/airflow/tree/main/docs/apache-airflow/img/logos/) and on the Apache Software Foundation [website](https://www.apache.org/logos/about.html).\n\n## Links\n\n- [Documentation](https://airflow.apache.org/docs/apache-airflow/stable/)\n- [Chat](https://s.apache.org/airflow-slack)\n- [Community Information](https://airflow.apache.org/community/)\n\n## Sponsors\n\nThe CI infrastructure for Apache Airflow has been sponsored by:\n\n<!-- Ordered by most recently \"funded\" -->\n\n<a href=\"https://astronomer.io\"><img src=\"https://assets2.astronomer.io/logos/logoForLIGHTbackground.png\" alt=\"astronomer.io\" width=\"250px\"></a>\n<a href=\"https://aws.amazon.com/opensource/\"><img src=\"docs/integration-logos/aws/AWS-Cloud-alt_light-bg@4x.png\" alt=\"AWS OpenSource\" width=\"130px\"></a>\n\n<!-- telemetry/analytics pixel: -->\n<img referrerpolicy=\"no-referrer-when-downgrade\" src=\"https://static.scarf.sh/a.png?x-pxid=1b5a5e3c-da81-42f5-befa-42d836bf1b54\" alt=\"Tracking Pixel\" />\n",
        "releases": [
            {
                "name": "Apache Airflow 2.10.4",
                "date": "2024-12-16T12:40:18Z"
            },
            {
                "name": "Apache Airflow 2.10.3",
                "date": "2024-11-05T14:15:14Z"
            },
            {
                "name": "Apache Airflow 2.10.2",
                "date": "2024-09-20T23:01:13Z"
            },
            {
                "name": "Apache Airflow 2.10.1",
                "date": "2024-09-06T11:30:12Z"
            },
            {
                "name": "Apache Airflow 2.10.0",
                "date": "2024-08-16T01:53:36Z"
            },
            {
                "name": "Apache Airflow Helm Chart 1.15.0",
                "date": "2024-07-24T12:45:34Z"
            },
            {
                "name": " Apache Airflow 2.9.3",
                "date": "2024-07-16T11:30:52Z"
            },
            {
                "name": "Apache Airflow Helm Chart 1.14.0",
                "date": "2024-06-19T00:26:03Z"
            },
            {
                "name": "Apache Airflow 2.9.2",
                "date": "2024-06-10T10:58:26Z"
            },
            {
                "name": "Apache Airflow 2.9.1",
                "date": "2024-05-06T10:30:55Z"
            },
            {
                "name": "Apache Airflow 2.9.0",
                "date": "2024-04-08T12:11:00Z"
            },
            {
                "name": "Apache Airflow 2.8.4",
                "date": "2024-03-25T20:26:18Z"
            },
            {
                "name": "Apache Airflow Helm Chart 1.13.1",
                "date": "2024-03-25T19:40:49Z"
            },
            {
                "name": "Apache Airflow 2.8.3",
                "date": "2024-03-11T12:53:41Z"
            },
            {
                "name": "Apache Airflow Helm Chart 1.13.0",
                "date": "2024-03-05T16:19:06Z"
            },
            {
                "name": "Apache Airflow 2.8.2",
                "date": "2024-02-26T09:14:14Z"
            },
            {
                "name": "Apache Airflow Helm Chart 1.12.0",
                "date": "2024-02-12T04:30:06Z"
            },
            {
                "name": "Apache Airflow 2.8.1",
                "date": "2024-01-19T13:09:58Z"
            },
            {
                "name": "Apache Airflow 2.8.0",
                "date": "2023-12-18T19:16:17Z"
            },
            {
                "name": "Apache Airflow 2.7.3",
                "date": "2023-11-06T07:14:17Z"
            },
            {
                "name": "Apache Airflow 2.7.2",
                "date": "2023-10-12T10:58:32Z"
            },
            {
                "name": "Apache Airflow Helm Chart 1.11.0",
                "date": "2023-10-02T23:29:57Z"
            },
            {
                "name": "Apache Airflow 2.7.1",
                "date": "2023-09-07T18:08:24Z"
            },
            {
                "name": "Apache Airflow 2.7.0",
                "date": "2023-08-18T16:40:16Z"
            },
            {
                "name": "Apache Airflow 2.6.3",
                "date": "2023-07-10T23:02:37Z"
            },
            {
                "name": "Apache Airflow Helm Chart 1.10.0",
                "date": "2023-06-27T14:34:24Z"
            },
            {
                "name": "Apache Airflow 2.6.2",
                "date": "2023-06-17T10:19:05Z"
            },
            {
                "name": "Apache Airflow 2.6.1",
                "date": "2023-05-16T14:38:31Z"
            },
            {
                "name": "Apache Airflow 2.6.0",
                "date": "2023-04-30T13:06:10Z"
            },
            {
                "name": "Apache Airflow Helm Chart 1.9.0",
                "date": "2023-04-14T21:02:23Z"
            },
            {
                "name": "Apache Airflow 2.5.3",
                "date": "2023-04-01T09:33:57Z"
            },
            {
                "name": "Apache Airflow 2.5.2",
                "date": "2023-03-15T00:40:12Z"
            },
            {
                "name": "Apache Airflow Helm Chart 1.8.0",
                "date": "2023-02-06T17:55:31Z"
            },
            {
                "name": "Apache Airflow 2.5.1",
                "date": "2023-01-20T20:39:10Z"
            },
            {
                "name": "Apache Airflow 2.5.0",
                "date": "2022-12-02T17:24:11Z"
            },
            {
                "name": "Apache Airflow 2.4.3",
                "date": "2022-11-14T14:36:31Z"
            },
            {
                "name": "Apache Airflow 2.4.2",
                "date": "2022-10-24T11:30:50Z"
            },
            {
                "name": "Apache Airflow Helm Chart 1.7.0",
                "date": "2022-10-14T15:36:05Z"
            },
            {
                "name": "Apache Airflow 2.4.1",
                "date": "2022-09-30T20:44:00Z"
            },
            {
                "name": "Apache Airflow 2.4.0",
                "date": "2022-09-19T09:11:49Z"
            },
            {
                "name": "Apache Airflow 2.3.4",
                "date": "2022-08-23T14:41:06Z"
            },
            {
                "name": "Apache Airflow 2.3.3",
                "date": "2022-07-09T18:29:26Z"
            },
            {
                "name": "Apache Airflow 2.3.2",
                "date": "2022-06-04T14:19:24Z"
            },
            {
                "name": "Apache Airflow 2.3.1",
                "date": "2022-05-25T10:26:20Z"
            },
            {
                "name": "Apache Airflow Helm Chart 1.6.0",
                "date": "2022-05-20T22:09:08Z"
            },
            {
                "name": "Apache Airflow 2.3.0",
                "date": "2022-05-01T00:37:18Z"
            },
            {
                "name": "Apache Airflow 2.2.5",
                "date": "2022-04-04T09:30:39Z"
            },
            {
                "name": "Apache Airflow Helm Chart 1.5.0",
                "date": "2022-03-11T20:12:18Z"
            },
            {
                "name": "Apache Airflow 2.2.4",
                "date": "2022-02-22T20:36:03Z"
            },
            {
                "name": "Apache Airflow Helm Chart 1.4.0",
                "date": "2022-01-10T18:26:40Z"
            },
            {
                "name": "Apache Airflow 2.2.3",
                "date": "2021-12-21T17:25:57Z"
            },
            {
                "name": "Apache Airflow Helm Chart 1.3.0",
                "date": "2021-11-09T14:50:35Z"
            },
            {
                "name": "Apache Airflow 2.2.2",
                "date": "2021-11-15T18:37:15Z"
            },
            {
                "name": "Apache Airflow 2.2.1",
                "date": "2021-10-30T05:32:00Z"
            },
            {
                "name": "Apache Airflow 2.2.0",
                "date": "2021-10-11T17:48:06Z"
            },
            {
                "name": "Apache Airflow Helm Chart 1.2.0",
                "date": "2021-09-28T18:42:52Z"
            },
            {
                "name": "Apache Airflow 2.1.4",
                "date": "2021-09-18T22:00:13Z"
            },
            {
                "name": "Apache Airflow 2.1.3",
                "date": "2021-09-11T21:53:56Z"
            },
            {
                "name": "Apache Airflow Helm Chart 1.1.0",
                "date": "2021-07-28T20:37:11Z"
            },
            {
                "name": "Apache Airflow 2.1.2",
                "date": "2021-07-14T20:14:52Z"
            },
            {
                "name": "Apache Airflow 2.1.1",
                "date": "2021-07-02T20:12:21Z"
            },
            {
                "name": "Apache Airflow Upgrade Check 1.4.0",
                "date": "2021-06-26T14:38:47Z"
            },
            {
                "name": "Apache Airflow Helm Chart 1.0.0",
                "date": "2021-05-20T01:22:06Z"
            },
            {
                "name": "",
                "date": "2021-05-18T11:19:34Z"
            },
            {
                "name": "",
                "date": "2021-05-17T23:24:57Z"
            },
            {
                "name": "",
                "date": "2021-04-19T21:11:50Z"
            },
            {
                "name": "Apache Airflow 1.10.15, 2021-03-17",
                "date": "2021-03-17T17:29:35Z"
            },
            {
                "name": "Airflow 2.0.1, 2021-02-08",
                "date": "2021-02-08T22:50:02Z"
            },
            {
                "name": "Airflow 2.0.0, 2020-12-17",
                "date": "2020-12-18T13:21:47Z"
            },
            {
                "name": "Airflow 1.10.14, 2020-12-10",
                "date": "2020-12-10T15:11:26Z"
            },
            {
                "name": "apache-airflow-upgrade-check 1.0.0",
                "date": "2020-12-02T12:19:41Z"
            },
            {
                "name": "Airflow 1.10.13, 2020-11-25",
                "date": "2020-11-25T14:03:23Z"
            },
            {
                "name": "Airflow 2.0.0b3",
                "date": "2020-11-20T11:01:02Z"
            },
            {
                "name": "Airflow 2.0.0b2",
                "date": "2020-12-02T12:21:13Z"
            },
            {
                "name": "Airflow 1.10.12, 2020-08-25",
                "date": "2020-08-25T19:02:05Z"
            },
            {
                "name": "Airflow 1.10.11, 2020-07-10",
                "date": "2020-07-10T15:22:29Z"
            },
            {
                "name": "Airflow 1.10.10, 2020-04-09",
                "date": "2020-04-09T20:10:58Z"
            },
            {
                "name": "Airflow 1.10.9, 2020-02-07",
                "date": "2020-02-19T22:47:08Z"
            },
            {
                "name": "Airflow 1.10.8, 2020-02-07",
                "date": "2020-02-07T04:04:24Z"
            },
            {
                "name": "Airflow 1.10.7, 2019-12-24",
                "date": "2019-12-24T14:47:22Z"
            },
            {
                "name": "Airflow 1.10.6rc1, 2019-10-18",
                "date": "2019-10-18T16:05:44Z"
            },
            {
                "name": "Airflow 1.10.5, 2019-08-30",
                "date": "2019-09-04T10:35:13Z"
            },
            {
                "name": "",
                "date": "2019-07-17T15:09:04Z"
            },
            {
                "name": "",
                "date": "2019-07-17T15:10:46Z"
            },
            {
                "name": "1.7.0",
                "date": "2016-03-28T19:32:48Z"
            },
            {
                "name": "",
                "date": "2016-01-04T20:29:18Z"
            },
            {
                "name": "v1.6.1",
                "date": "2015-11-15T06:20:57Z"
            },
            {
                "name": "v1.6.0",
                "date": "2015-11-13T01:10:47Z"
            },
            {
                "name": "v1.5.2",
                "date": "2015-10-23T06:13:39Z"
            },
            {
                "name": "",
                "date": "2015-09-04T16:49:36Z"
            },
            {
                "name": "",
                "date": "2015-09-04T06:29:30Z"
            },
            {
                "name": "",
                "date": "2015-08-18T22:34:52Z"
            }
        ]
    }
}