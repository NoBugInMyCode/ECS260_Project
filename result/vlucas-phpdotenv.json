{
    "https://api.github.com/repos/vlucas/phpdotenv": {
        "forks": 636,
        "watchers": 13245,
        "stars": 13245,
        "languages": {
            "PHP": 149473,
            "Makefile": 1529
        },
        "commits": [
            "2024-07-20T21:52:34Z",
            "2024-07-20T21:26:17Z",
            "2023-11-12T22:51:44Z",
            "2023-11-12T22:43:29Z",
            "2023-11-12T22:42:18Z",
            "2023-11-12T22:39:50Z",
            "2022-10-16T01:01:54Z",
            "2022-10-16T00:54:01Z",
            "2022-10-16T00:51:09Z",
            "2022-10-15T22:57:19Z",
            "2022-10-15T22:57:03Z",
            "2022-10-15T22:46:09Z",
            "2022-10-15T22:28:12Z",
            "2022-10-15T22:24:18Z",
            "2022-10-15T22:23:59Z",
            "2022-10-15T22:21:51Z",
            "2022-10-15T21:56:13Z",
            "2022-10-15T21:53:53Z",
            "2021-12-17T00:42:26Z",
            "2021-12-14T15:42:27Z",
            "2021-12-14T15:42:07Z",
            "2021-12-12T23:22:04Z",
            "2021-12-12T23:12:20Z",
            "2021-12-12T23:07:53Z",
            "2021-12-12T23:02:19Z",
            "2021-12-12T23:02:06Z",
            "2021-12-12T22:59:57Z",
            "2021-12-12T22:59:22Z",
            "2021-11-10T01:08:39Z",
            "2021-11-10T01:08:33Z"
        ],
        "creation_date": "2013-01-23T06:57:12Z",
        "contributors": 30,
        "topics": [
            "configuration",
            "dotenv",
            "environment",
            "environment-variables",
            "hacktoberfest",
            "php"
        ],
        "subscribers": 173,
        "readme": "PHP dotenv\n==========\n\nLoads environment variables from `.env` to `getenv()`, `$_ENV` and `$_SERVER` automagically.\n\n![Banner](https://user-images.githubusercontent.com/2829600/71564012-31105580-2a91-11ea-9ad7-ef1278411b35.png)\n\n<p align=\"center\">\n<a href=\"LICENSE\"><img src=\"https://img.shields.io/badge/license-BSD%203--Clause-brightgreen.svg?style=flat-square\" alt=\"Software License\"></img></a>\n<a href=\"https://packagist.org/packages/vlucas/phpdotenv\"><img src=\"https://img.shields.io/packagist/dt/vlucas/phpdotenv.svg?style=flat-square\" alt=\"Total Downloads\"></img></a>\n<a href=\"https://github.com/vlucas/phpdotenv/releases\"><img src=\"https://img.shields.io/github/release/vlucas/phpdotenv.svg?style=flat-square\" alt=\"Latest Version\"></img></a>\n</p>\n\n\n## Why .env?\n\n**You should never store sensitive credentials in your code**. Storing\n[configuration in the environment](https://www.12factor.net/config) is one of\nthe tenets of a [twelve-factor app](https://www.12factor.net/). Anything that\nis likely to change between deployment environments \u2013 such as database\ncredentials or credentials for 3rd party services \u2013 should be extracted from\nthe code into environment variables.\n\nBasically, a `.env` file is an easy way to load custom configuration variables\nthat your application needs without having to modify .htaccess files or\nApache/nginx virtual hosts. This means you won't have to edit any files outside\nthe project, and all the environment variables are always set no matter how you\nrun your project - Apache, Nginx, CLI, and even PHP's built-in webserver. It's\nWAY easier than all the other ways you know of to set environment variables,\nand you're going to love it!\n\n* NO editing virtual hosts in Apache or Nginx\n* NO adding `php_value` flags to .htaccess files\n* EASY portability and sharing of required ENV values\n* COMPATIBLE with PHP's built-in web server and CLI runner\n\nPHP dotenv is a PHP version of the original [Ruby\ndotenv](https://github.com/bkeepers/dotenv).\n\n\n## Installation\n\nInstallation is super-easy via [Composer](https://getcomposer.org/):\n\n```bash\n$ composer require vlucas/phpdotenv\n```\n\nor add it by hand to your `composer.json` file.\n\n\n## Upgrading\n\nWe follow [semantic versioning](https://semver.org/), which means breaking\nchanges may occur between major releases. We have upgrading guides available\nfor V2 to V3, V3 to V4 and V4 to V5 available [here](UPGRADING.md).\n\n\n## Usage\n\nThe `.env` file is generally kept out of version control since it can contain\nsensitive API keys and passwords. A separate `.env.example` file is created\nwith all the required environment variables defined except for the sensitive\nones, which are either user-supplied for their own development environments or\nare communicated elsewhere to project collaborators. The project collaborators\nthen independently copy the `.env.example` file to a local `.env` and ensure\nall the settings are correct for their local environment, filling in the secret\nkeys or providing their own values when necessary. In this usage, the `.env`\nfile should be added to the project's `.gitignore` file so that it will never\nbe committed by collaborators.  This usage ensures that no sensitive passwords\nor API keys will ever be in the version control history so there is less risk\nof a security breach, and production values will never have to be shared with\nall project collaborators.\n\nAdd your application configuration to a `.env` file in the root of your\nproject. **Make sure the `.env` file is added to your `.gitignore` so it is not\nchecked-in the code**\n\n```shell\nS3_BUCKET=\"dotenv\"\nSECRET_KEY=\"souper_seekret_key\"\n```\n\nNow create a file named `.env.example` and check this into the project. This\nshould have the ENV variables you need to have set, but the values should\neither be blank or filled with dummy data. The idea is to let people know what\nvariables are required, but not give them the sensitive production values.\n\n```shell\nS3_BUCKET=\"devbucket\"\nSECRET_KEY=\"abc123\"\n```\n\nYou can then load `.env` in your application with:\n\n```php\n$dotenv = Dotenv\\Dotenv::createImmutable(__DIR__);\n$dotenv->load();\n```\n\nTo suppress the exception that is thrown when there is no `.env` file, you can:\n\n```php\n$dotenv = Dotenv\\Dotenv::createImmutable(__DIR__);\n$dotenv->safeLoad();\n```\n\nOptionally you can pass in a filename as the second parameter, if you would\nlike to use something other than `.env`:\n\n```php\n$dotenv = Dotenv\\Dotenv::createImmutable(__DIR__, 'myconfig');\n$dotenv->load();\n```\n\nAll of the defined variables are now available in the `$_ENV` and `$_SERVER`\nsuper-globals.\n\n```php\n$s3_bucket = $_ENV['S3_BUCKET'];\n$s3_bucket = $_SERVER['S3_BUCKET'];\n```\n\n\n### Putenv and Getenv\n\nUsing `getenv()` and `putenv()` is strongly discouraged due to the fact that\nthese functions are not thread safe, however it is still possible to instruct\nPHP dotenv to use these functions. Instead of calling\n`Dotenv::createImmutable`, one can call `Dotenv::createUnsafeImmutable`, which\nwill add the `PutenvAdapter` behind the scenes. Your environment variables will\nnow be available using the `getenv` method, as well as the super-globals:\n\n```php\n$s3_bucket = getenv('S3_BUCKET');\n$s3_bucket = $_ENV['S3_BUCKET'];\n$s3_bucket = $_SERVER['S3_BUCKET'];\n```\n\n\n### Nesting Variables\n\nIt's possible to nest an environment variable within another, useful to cut\ndown on repetition.\n\nThis is done by wrapping an existing environment variable in `${\u2026}` e.g.\n\n```shell\nBASE_DIR=\"/var/webroot/project-root\"\nCACHE_DIR=\"${BASE_DIR}/cache\"\nTMP_DIR=\"${BASE_DIR}/tmp\"\n```\n\n\n### Immutability and Repository Customization\n\nImmutability refers to if Dotenv is allowed to overwrite existing environment\nvariables. If you want Dotenv to overwrite existing environment variables,\nuse `createMutable` instead of `createImmutable`:\n\n```php\n$dotenv = Dotenv\\Dotenv::createMutable(__DIR__);\n$dotenv->load();\n```\n\nBehind the scenes, this is instructing the \"repository\" to allow immutability\nor not. By default, the repository is configured to allow overwriting existing\nvalues by default, which is relevant if one is calling the \"create\" method\nusing the `RepositoryBuilder` to construct a more custom repository:\n\n```php\n$repository = Dotenv\\Repository\\RepositoryBuilder::createWithNoAdapters()\n    ->addAdapter(Dotenv\\Repository\\Adapter\\EnvConstAdapter::class)\n    ->addWriter(Dotenv\\Repository\\Adapter\\PutenvAdapter::class)\n    ->immutable()\n    ->make();\n\n$dotenv = Dotenv\\Dotenv::create($repository, __DIR__);\n$dotenv->load();\n```\n\nThe above example will write loaded values to `$_ENV` and `putenv`, but when\ninterpolating environment variables, we'll only read from `$_ENV`. Moreover, it\nwill never replace any variables already set before loading the file.\n\nBy means of another example, one can also specify a set of variables to be\nallow listed. That is, only the variables in the allow list will be loaded:\n\n```php\n$repository = Dotenv\\Repository\\RepositoryBuilder::createWithDefaultAdapters()\n    ->allowList(['FOO', 'BAR'])\n    ->make();\n\n$dotenv = Dotenv\\Dotenv::create($repository, __DIR__);\n$dotenv->load();\n```\n\n\n### Requiring Variables to be Set\n\nPHP dotenv has built in validation functionality, including for enforcing the\npresence of an environment variable. This is particularly useful to let people\nknow any explicit required variables that your app will not work without.\n\nYou can use a single string:\n\n```php\n$dotenv->required('DATABASE_DSN');\n```\n\nOr an array of strings:\n\n```php\n$dotenv->required(['DB_HOST', 'DB_NAME', 'DB_USER', 'DB_PASS']);\n```\n\nIf any ENV vars are missing, Dotenv will throw a `RuntimeException` like this:\n\n```\nOne or more environment variables failed assertions: DATABASE_DSN is missing\n```\n\n\n### Empty Variables\n\nBeyond simply requiring a variable to be set, you might also need to ensure the\nvariable is not empty:\n\n```php\n$dotenv->required('DATABASE_DSN')->notEmpty();\n```\n\nIf the environment variable is empty, you'd get an Exception:\n\n```\nOne or more environment variables failed assertions: DATABASE_DSN is empty\n```\n\n\n### Integer Variables\n\nYou might also need to ensure that the variable is of an integer value. You may\ndo the following:\n\n```php\n$dotenv->required('FOO')->isInteger();\n```\n\nIf the environment variable is not an integer, you'd get an Exception:\n\n```\nOne or more environment variables failed assertions: FOO is not an integer.\n```\n\nOne may only want to enforce validation rules when a variable is set. We\nsupport this too:\n\n```php\n$dotenv->ifPresent('FOO')->isInteger();\n```\n\n\n### Boolean Variables\n\nYou may need to ensure a variable is in the form of a boolean, accepting\n\"true\", \"false\", \"On\", \"1\", \"Yes\", \"Off\", \"0\" and \"No\". You may do the\nfollowing:\n\n```php\n$dotenv->required('FOO')->isBoolean();\n```\n\nIf the environment variable is not a boolean, you'd get an Exception:\n\n```\nOne or more environment variables failed assertions: FOO is not a boolean.\n```\n\nSimilarly, one may write:\n\n```php\n$dotenv->ifPresent('FOO')->isBoolean();\n```\n\n\n### Allowed Values\n\nIt is also possible to define a set of values that your environment variable\nshould be. This is especially useful in situations where only a handful of\noptions or drivers are actually supported by your code:\n\n```php\n$dotenv->required('SESSION_STORE')->allowedValues(['Filesystem', 'Memcached']);\n```\n\nIf the environment variable wasn't in this list of allowed values, you'd get a\nsimilar Exception:\n\n```\nOne or more environment variables failed assertions: SESSION_STORE is not an allowed value.\n```\n\nIt is also possible to define a regex that your environment variable should be.\n```php\n$dotenv->required('FOO')->allowedRegexValues('([[:lower:]]{3})');\n```\n\n\n### Comments\n\nYou can comment your `.env` file using the `#` character. E.g.\n\n```shell\n# this is a comment\nVAR=\"value\" # comment\nVAR=value # comment\n```\n\n\n### Parsing Without Loading\n\nSometimes you just wanna parse the file and resolve the nested environment variables, by giving us a string, and have an array returned back to you. While this is already possible, it is a little fiddly, so we have provided a direct way to do this:\n\n```php\n// ['FOO' => 'Bar', 'BAZ' => 'Hello Bar']\nDotenv\\Dotenv::parse(\"FOO=Bar\\nBAZ=\\\"Hello \\${FOO}\\\"\");\n```\n\nThis is exactly the same as:\n\n```php\nDotenv\\Dotenv::createArrayBacked(__DIR__)->load();\n```\n\nonly, instead of providing the directory to find the file, you have directly provided the file contents.\n\n\n### Usage Notes\n\nWhen a new developer clones your codebase, they will have an additional\none-time step to manually copy the `.env.example` file to `.env` and fill-in\ntheir own values (or get any sensitive values from a project co-worker).\n\n\n### Troubleshooting\n\nIn certain server setups (most commonly found in shared hosting), PHP might deactivate superglobals like `$_ENV` or `$_SERVER`. If these variables are not set, review the `variables_order` in the `php.ini` file. See [php.net/manual/en/ini.core.php#ini.variables-order](https://www.php.net/manual/en/ini.core.php#ini.variables-order).\n\n## Security\n\nIf you discover a security vulnerability within this package, please send an email to security@tidelift.com. All security vulnerabilities will be promptly addressed. You may view our full security policy [here](https://github.com/vlucas/phpdotenv/security/policy).\n\n\n## License\n\nPHP dotenv is licensed under [The BSD 3-Clause License](LICENSE).\n\n\n## For Enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of `vlucas/phpdotenv` and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/packagist-vlucas-phpdotenv?utm_source=packagist-vlucas-phpdotenv&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n",
        "releases": [
            {
                "name": "V5.6.1 (20/07/2024)",
                "date": "2024-07-20T21:54:46Z"
            },
            {
                "name": "V5.6.0 (12/11/2023)",
                "date": "2023-11-12T22:47:10Z"
            },
            {
                "name": "V5.5.0 (16/10/2022)",
                "date": "2022-10-16T01:02:40Z"
            },
            {
                "name": "V4.3.0 (16/10/2022)",
                "date": "2022-10-16T01:02:37Z"
            },
            {
                "name": "V5.4.1 (12/12/2021)",
                "date": "2021-12-12T23:29:31Z"
            },
            {
                "name": "V4.2.2 (12/12/2021)",
                "date": "2021-12-12T23:29:25Z"
            },
            {
                "name": "V3.6.10 (12/12/2021)",
                "date": "2021-12-12T23:29:22Z"
            },
            {
                "name": "V2.6.9 (12/12/2021)",
                "date": "2021-12-12T23:29:20Z"
            },
            {
                "name": "V5.4.0 (10/11/2021)",
                "date": "2021-11-10T01:11:56Z"
            },
            {
                "name": "V5.3.1 (02/10/2021)",
                "date": "2021-10-02T19:30:34Z"
            },
            {
                "name": "V4.2.1 (02/10/2021)",
                "date": "2021-10-02T19:30:20Z"
            },
            {
                "name": "V3.6.9 (02/10/2021)",
                "date": "2021-10-02T19:30:18Z"
            },
            {
                "name": "V2.6.8 (02/10/2021)",
                "date": "2021-10-02T19:30:15Z"
            },
            {
                "name": "V5.3.0 (20/01/2021)",
                "date": "2021-01-20T15:35:54Z"
            },
            {
                "name": "V4.2.0 (20/01/2021)",
                "date": "2021-01-20T15:35:49Z"
            },
            {
                "name": "V3.6.8 (20/01/2021)",
                "date": "2021-01-20T15:35:47Z"
            },
            {
                "name": "V2.6.7 (20/01/2021)",
                "date": "2021-01-20T15:35:44Z"
            },
            {
                "name": "V5.2.0 (14/09/2020)",
                "date": "2020-09-14T16:01:38Z"
            },
            {
                "name": "V5.1.0 (14/07/2020)",
                "date": "2020-07-14T19:44:16Z"
            },
            {
                "name": "V5.0.1 (14/07/2020)",
                "date": "2020-07-14T19:44:12Z"
            },
            {
                "name": "V4.1.8 (14/07/2020)",
                "date": "2020-07-14T19:44:04Z"
            },
            {
                "name": "V3.6.7 (14/07/2020)",
                "date": "2020-07-14T19:44:00Z"
            },
            {
                "name": "V2.6.6 (14/07/2020)",
                "date": "2020-07-14T19:43:57Z"
            },
            {
                "name": "V5.0.0 (07/06/2020)",
                "date": "2020-06-07T19:10:35Z"
            },
            {
                "name": "V4.1.7 (07/06/2020)",
                "date": "2020-06-07T19:10:25Z"
            },
            {
                "name": "V3.6.6 (07/06/2020)",
                "date": "2020-06-07T19:10:20Z"
            },
            {
                "name": "V2.6.5 (07/06/2020)",
                "date": "2020-06-07T19:10:11Z"
            },
            {
                "name": "V4.1.6 (23/05/2020)",
                "date": "2020-05-23T16:02:00Z"
            },
            {
                "name": "V3.6.5 (23/05/2020)",
                "date": "2020-05-23T16:01:57Z"
            },
            {
                "name": "V4.1.5 (02/05/2020)",
                "date": "2020-05-02T14:53:39Z"
            },
            {
                "name": "V3.6.4 (02/05/2020)",
                "date": "2020-05-02T14:53:36Z"
            },
            {
                "name": "V2.6.4 (02/05/2020)",
                "date": "2020-05-02T14:53:34Z"
            },
            {
                "name": "V4.1.4 (12/04/2020)",
                "date": "2020-04-12T15:26:45Z"
            },
            {
                "name": "V3.6.3 (12/04/2020)",
                "date": "2020-04-12T15:26:42Z"
            },
            {
                "name": "V2.6.3 (12/04/2020)",
                "date": "2020-04-12T15:26:40Z"
            },
            {
                "name": "V4.1.3 (27/03/2020)",
                "date": "2020-03-27T23:48:46Z"
            },
            {
                "name": "V3.6.2 (27/03/2020)",
                "date": "2020-03-27T23:46:33Z"
            },
            {
                "name": "V2.6.2 (27/03/2020)",
                "date": "2020-03-27T23:33:26Z"
            },
            {
                "name": "V4.1.2 (12/03/2020)",
                "date": "2020-03-12T13:45:21Z"
            },
            {
                "name": "V3.6.1 (12/03/2020)",
                "date": "2020-03-12T13:45:18Z"
            },
            {
                "name": "V4.1.1 (02/03/2020)",
                "date": "2020-03-02T00:10:15Z"
            },
            {
                "name": "V4.1 (14/12/2019)",
                "date": "2019-12-14T14:07:02Z"
            },
            {
                "name": "V4.0.1 (08/12/2019)",
                "date": "2019-12-08T15:09:59Z"
            },
            {
                "name": "V4.0 (30/11/2019)",
                "date": "2019-11-30T20:41:14Z"
            },
            {
                "name": "V3.6.0 (10/09/2019)",
                "date": "2019-09-10T21:51:53Z"
            },
            {
                "name": "V3.5.0 (27/08/2019)",
                "date": "2019-08-27T17:06:41Z"
            },
            {
                "name": "V3.4.0 (15/06/2019)",
                "date": "2019-06-15T22:46:13Z"
            },
            {
                "name": "V3.3.3 (06/03/2019)",
                "date": "2019-03-06T09:47:02Z"
            },
            {
                "name": "V3.3.2 (30/01/2019)",
                "date": "2019-01-30T10:46:11Z"
            },
            {
                "name": "V3.3.1 (29/01/2019)",
                "date": "2019-01-29T11:15:42Z"
            },
            {
                "name": "V2.6.1 (29/01/2019)",
                "date": "2019-01-29T11:13:40Z"
            },
            {
                "name": "V2.6.0 (28/01/2019)",
                "date": "2019-01-28T21:07:46Z"
            },
            {
                "name": "V3.3.0 (26/01/2019)",
                "date": "2019-01-26T17:09:47Z"
            },
            {
                "name": "V3.2.0 (24/01/2019)",
                "date": "2019-01-24T20:41:21Z"
            },
            {
                "name": "V3.1.1 (23/01/2019)",
                "date": "2019-01-23T18:40:41Z"
            },
            {
                "name": "V3.1.0 (04/01/2019)",
                "date": "2019-01-05T00:06:20Z"
            },
            {
                "name": "V3.0.0 (03/01/2019)",
                "date": "2019-01-03T14:01:32Z"
            },
            {
                "name": "V2.5.2 (30/10/2018)",
                "date": "2019-01-02T16:10:00Z"
            },
            {
                "name": "V2.5.1 (29/07/2018)",
                "date": "2018-07-29T20:41:08Z"
            },
            {
                "name": "V2.5.0 (01/07/2018)",
                "date": "2018-07-01T10:31:36Z"
            },
            {
                "name": "V2.4.0 (01/09/2016)",
                "date": "2018-07-29T20:40:10Z"
            },
            {
                "name": "V2.3.0 (14/06/2016)",
                "date": "2018-07-29T20:40:48Z"
            },
            {
                "name": "V2.2.1 (15/04/2016)",
                "date": "2019-01-05T00:16:33Z"
            }
        ]
    }
}