{
    "https://api.github.com/repos/realm/jazzy": {
        "forks": 414,
        "watchers": 7361,
        "stars": 7361,
        "languages": {
            "Ruby": 208282,
            "JavaScript": 152458,
            "SCSS": 42194,
            "Mustache": 27001
        },
        "commits": [
            "2024-10-19T11:38:23Z",
            "2024-10-19T11:35:07Z",
            "2024-10-18T11:21:48Z",
            "2024-09-20T10:43:55Z",
            "2024-09-20T10:40:23Z",
            "2024-09-20T10:06:45Z",
            "2024-07-13T10:17:17Z",
            "2024-06-08T10:12:16Z",
            "2024-06-08T09:46:38Z",
            "2024-05-24T12:24:49Z",
            "2024-05-24T10:46:58Z",
            "2024-05-04T17:40:36Z",
            "2024-05-04T17:32:24Z",
            "2024-05-04T12:09:02Z",
            "2024-02-27T17:49:32Z",
            "2024-02-23T12:37:21Z",
            "2024-02-19T21:42:46Z",
            "2024-02-16T11:07:14Z",
            "2024-02-14T13:08:17Z",
            "2024-02-13T13:32:23Z",
            "2024-02-13T12:57:17Z",
            "2024-02-12T13:19:54Z",
            "2024-02-12T12:29:29Z",
            "2024-02-09T12:40:40Z",
            "2024-02-09T11:29:25Z",
            "2024-02-08T18:16:25Z",
            "2024-02-07T12:50:35Z",
            "2023-10-10T14:44:39Z",
            "2024-02-27T12:21:26Z",
            "2024-02-06T13:21:45Z"
        ],
        "creation_date": "2014-06-06T05:52:11Z",
        "contributors": 30,
        "topics": [
            "ruby",
            "sourcekit",
            "sourcekitten",
            "swift",
            "xcode"
        ],
        "subscribers": 161,
        "readme": "![jazzy](images/logo.jpg)\n\n[![Build Status](https://github.com/realm/jazzy/actions/workflows/Tests.yml/badge.svg)](https://github.com/realm/jazzy/actions/workflows/Tests.yml)\n\n*jazzy is a command-line utility that generates documentation for Swift or Objective-C*\n\n## About\n\nBoth Swift and Objective-C projects are supported.\n\nInstead of parsing your source files, `jazzy` hooks into [Clang][clang] and\n[SourceKit][sourcekit] to use the [AST][ast] representation of your code and\nits comments for more accurate results. The output matches the look and feel\nof Apple\u2019s official reference documentation, post WWDC 2014.\n\nJazzy can also generate documentation from compiled Swift modules [using their\nsymbol graph](#docs-from-swiftmodules-or-frameworks) instead of source code.\n\n![Screenshot](images/screenshot.jpg)\n\nThis project adheres to the [Contributor Covenant Code of Conduct](https://realm.io/conduct).\nBy participating, you are expected to uphold this code. Please report\nunacceptable behavior to [info@realm.io](mailto:info@realm.io).\n\n## Requirements\n\nYou need development tools to build the project you wish to document.  Jazzy supports\nboth [Xcode][xcode] and [Swift Package Manager][spm] projects.\n\nJazzy expects to be running on __macOS__.  See [below](#linux) for tips to run Jazzy\non Linux.\n\n## Installation\n\n```shell\n[sudo] gem install jazzy\n```\n\nSee [Installation Problems](#installation-problems) for solutions to some\ncommon problems.\n\n## Usage\n\nRun `jazzy` from your command line. Run `jazzy -h` for a list of additional options.\n\nIf your Swift module is the first thing to build, and it builds fine when running\n`xcodebuild` or `swift build` without any arguments from the root of your project, then\njust running `jazzy` (without any arguments) from the root of your project should\nsucceed too!\n\nIf Jazzy generates docs for the wrong module then use `--module` to tell it which\none you'd prefer.  If this doesn't help, and you're using Xcode, then try passing\nextra arguments to `xcodebuild`, for example\n`jazzy --build-tool-arguments -scheme,MyScheme,-target,MyTarget`.\n\nIf you want to generate docs for several modules at once then see [Documenting multiple\nmodules](#documenting-multiple-modules).\n\nYou can set options for your project\u2019s documentation in a configuration file,\n`.jazzy.yaml` by default. For a detailed explanation and an exhaustive list of\nall available options, run `jazzy --help config`.\n\n### Supported documentation keywords\n\nSwift documentation is written in markdown and supports a number of special keywords.\nHere are some resources with tutorials and examples, starting with the most modern:\n* Apple's [Writing Symbol Documentation in Your Source Files](https://developer.apple.com/documentation/xcode/writing-symbol-documentation-in-your-source-files) article.\n* Apple's [Formatting Your Documentation Content](https://developer.apple.com/documentation/xcode/formatting-your-documentation-content) article.\n* Apple's [Xcode Markup Formatting Reference](https://developer.apple.com/library/content/documentation/Xcode/Reference/xcode_markup_formatting_ref/).\n* Erica Sadun's [Swift header documentation in Xcode 7](https://ericasadun.com/2015/06/14/swift-header-documentation-in-xcode-7/) post and her [book on Swift Documentation Markup](https://itunes.apple.com/us/book/swift-documentation-markup/id1049010423).\n\nFor Objective-C documentation the same keywords are supported, but note that the format\nis slightly different. In Swift you would write `- returns:`, but in Objective-C you write `@return`. See Apple's [*HeaderDoc User Guide*](https://developer.apple.com/legacy/library/documentation/DeveloperTools/Conceptual/HeaderDoc/tags/tags.html) for more details. **Note: `jazzy` currently does not support _all_ Objective-C keywords listed in this document, only @param, @return, @warning, @see, @note, @code, @endcode, and @c.**\n\nJazzy can also generate cross-references within your documentation. A symbol name in\nbackticks generates a link, for example:\n* \\`MyClass\\` - a link to documentation for `MyClass`.\n* \\`MyClass.method(param1:)\\` - a link to documentation for that method.\n* \\`MyClass.method(...)\\` - shortcut syntax for the same thing.\n* \\`method(...)\\` - shortcut syntax to link to `method` from the documentation of another\n  method or property in the same class.\n* \\`[MyClass method1]\\` - a link to an Objective-C method.\n* \\`-[MyClass method2:param1]\\` - a link to another Objective-C method.\n\nJazzy understands Apple's DocC-style links too, for example:\n* \\`\\`MyClass/method(param1:)\\`\\` - a link to the documentation for that method\n  that appears as just `method(param1:)` in the rendered page.\n* \\`\\`\\<doc:method(_:)-e873\\>\\`\\` - a link to a specific overload of `method(_:)`.\n  Jazzy can't tell which overload you intend and links to the first one.\n\nIf your documentation is for multiple modules then symbol name resolution works\napproximately as though all the modules have been imported: you can use \\`TypeName\\`\nto refer to a top-level type in any of the modules, or \\`ModuleName.TypeName\\` to\nbe specific.  If there is an ambiguity then you can use a leading slash to\nindicate that the first part of the name should be read as a module name:\n\\`/ModuleName.TypeName\\`.\n\n### Math\n\nJazzy can render math equations written in LaTeX embedded in your markdown:\n* `` `$equation$` `` renders the equation in an inline style.\n* `` `$$equation$$` `` renders the equation in a display style, centered on a\n  line of its own.\n\nFor example, the markdown:\n```markdown\nInline: `$ax^2+bx+c=0$`\n\nBlock: `$$x={\\frac {-b\\pm {\\sqrt {b^{2}-4ac}}}{2a}}$$`\n```\n..renders as:\n\n![math](images/math.png)\n\nMath support is provided by [KaTeX](https://katex.org).\n\n### Swift\n\nSwift documentation is generated by default.\n\n##### Example\n\nThis is how Realm Swift docs are generated:\n\n```shell\njazzy \\\n  --clean \\\n  --author Realm \\\n  --author_url https://realm.io \\\n  --source-host github \\\n  --source-host-url https://github.com/realm/realm-cocoa \\\n  --source-host-files-url https://github.com/realm/realm-cocoa/tree/v0.96.2 \\\n  --module-version 0.96.2 \\\n  --build-tool-arguments -scheme,RealmSwift \\\n  --module RealmSwift \\\n  --root-url https://realm.io/docs/swift/0.96.2/api/ \\\n  --output docs/swift_output \\\n  --theme docs/themes\n```\n\nThis is how docs are generated for a project that uses the Swift Package Manager:\n\n```shell\njazzy \\\n  --module DeckOfPlayingCards \\\n  --swift-build-tool spm \\\n  --build-tool-arguments -Xswiftc,-swift-version,-Xswiftc,5\n```\n\n### Objective-C\n\nTo generate documentation for a simple Objective-C project, you must pass the\nfollowing parameters:\n* `--objc`\n* `--umbrella-header ...`\n* `--framework-root ...`\n\n...and optionally:\n* `--sdk [iphone|watch|appletv][os|simulator]|macosx` (default value\n   of `macosx`)\n* `--hide-declarations [objc|swift]` (hides the selected language declarations)\n\nFor example, this is how the `AFNetworking` docs are generated:\n\n```shell\njazzy \\\n  --objc \\\n  --author AFNetworking \\\n  --author_url http://afnetworking.com \\\n  --source-host github \\\n  --source-host-url https://github.com/AFNetworking/AFNetworking \\\n  --source-host-files-url https://github.com/AFNetworking/AFNetworking/tree/2.6.2 \\\n  --module-version 2.6.2 \\\n  --umbrella-header AFNetworking/AFNetworking.h \\\n  --framework-root . \\\n  --module AFNetworking\n```\n\nFor a more complicated Objective-C project, instead use `--build-tool-arguments`\nto pass arbitrary compiler flags.  For example, this is how Realm Objective-C\ndocs are generated:\n\n```shell\njazzy \\\n  --objc \\\n  --clean \\\n  --author Realm \\\n  --author_url https://realm.io \\\n  --source-host github \\\n  --source-host-url https://github.com/realm/realm-cocoa \\\n  --source-host-files-url https://github.com/realm/realm-cocoa/tree/v2.2.0 \\\n  --module-version 2.2.0 \\\n  --build-tool-arguments --objc,Realm/Realm.h,--,-x,objective-c,-isysroot,$(xcrun --show-sdk-path),-I,$(pwd) \\\n  --module Realm \\\n  --root-url https://realm.io/docs/objc/2.2.0/api/ \\\n  --output docs/objc_output \\\n  --head \"$(cat docs/custom_head.html)\"\n```\n\nSee [the Objective-C docs](ObjectiveC.md) for more information and some tips\non troubleshooting.\n\n### Mixed Objective-C / Swift\n\n*This feature has some rough edges.*\n\nTo generate documentation for a mixed Swift and Objective-C project you must first\ngenerate two [SourceKitten][sourcekitten] files: one for Swift and one for Objective-C.\n\nThen pass these files to Jazzy together using `--sourcekitten-sourcefile`.\n\n#### Example\n\nThis is how docs are generated from an Xcode project for a module containing both\nSwift and Objective-C files:\n\n```shell\n# Generate Swift SourceKitten output\nsourcekitten doc -- -workspace MyProject.xcworkspace -scheme MyScheme > swiftDoc.json\n\n# Generate Objective-C SourceKitten output\nsourcekitten doc --objc $(pwd)/MyProject/MyProject.h \\\n      -- -x objective-c  -isysroot $(xcrun --show-sdk-path --sdk iphonesimulator) \\\n      -I $(pwd) -fmodules > objcDoc.json\n\n# Feed both outputs to Jazzy as a comma-separated list\njazzy --module MyProject --sourcekitten-sourcefile swiftDoc.json,objcDoc.json\n```\n\n### Docs from `.swiftmodule`s or frameworks\n\nSwift 5.3 added support for symbol graph generation from `.swiftmodule` files.\n\nJazzy can use this to generate API documentation.  This is faster than using\nthe source code directly but does have limitations: for example documentation\ncomments are available only for `public` declarations, and the presentation of\nSwift extensions may not match the way they are written in code.\n\nSome examples:\n\n1. Generate docs for the Apple Combine framework for macOS:\n   ```shell\n   jazzy --module Combine --swift-build-tool symbolgraph\n   ```\n   The SDK's library directories are included in the search path by\n   default.\n2. Same but for iOS:\n   ```shell\n   jazzy --module Combine --swift-build-tool symbolgraph\n         --sdk iphoneos\n         --build-tool-arguments -target,arm64-apple-ios14.1\n   ```\n   The `target` is the LLVM target triple and needs to match the SDK.  The\n   default here is the target of the host system that Jazzy is running on,\n   something like `x86_64-apple-darwin19.6.0`.\n3. Generate docs for a personal `.swiftmodule`:\n   ```shell\n   jazzy --module MyMod --swift-build-tool symbolgraph\n         --build-tool-arguments -I,/Build/Products\n   ```\n   This implies that `/Build/Products/MyMod.swiftmodule` exists.  Jazzy's\n   `--source-directory` (default current directory) is searched by default,\n   so you only need the `-I` override if that's not enough.\n4. For a personal framework:\n   ```shell\n   jazzy --module MyMod --swift-build-tool symbolgraph\n         --build-tool-arguments -F,/Build/Products\n   ```\n   This implies that `/Build/Products/MyMod.framework` exists and contains\n   a `.swiftmodule`.  Again the `--source-directory` is searched by default\n   if `-F` is not passed in.\n5. With pre-generated symbolgraph files:\n    ```shell\n    jazzy --module MyMod --swift-build-tool symbolgraph\n          --symbolgraph-directory Build/symbolgraphs\n    ```\n    If you've separately generated symbolgraph files by the use of \n    `-emit-symbol-graph`, you can pass the location of these files using\n    `--symbolgraph-directory` from where they can be parsed directly.\n\nSee `swift symbolgraph-extract -help` for all the things you can pass via\n`--build-tool-arguments`: if your module has dependencies then you may need\nto add various search path options to let Swift load it.\n\n### Documenting multiple modules\n\n*This feature is new, bugs and feedback welcome*\n\nSometimes it's useful to document multiple modules together in the same site,\nfor example an app and its extensions, or an SDK that happens to be implemented\nas several modules.\n\nJazzy can build docs for all these together and create a single site with\nsearch, cross-module linking, and navigation.\n\n#### Build configuration\n\nIf all the modules share the same build flags then the easiest way to do this\nis with `--modules`, for example `jazzy --modules ModuleA,ModuleB,ModuleC`.\n\nIf your modules have different build flags then you have to use the config file.\nFor example:\n```yaml\nmodules:\n  - module: ModuleA\n  - module: ModuleB\n    build_tool_arguments:\n      - -scheme\n      - SpecialScheme\n      - -target\n      - ModuleB\n    source_directory: ModuleBProject\n  - module: ModuleC\n    objc: true\n    umbrella_header: ModuleC/ModuleC.h\n    framework_root: ModuleC\n    sdk: appletvsimulator\n  - module: ModuleD\n    sourcekitten_sourcefile: [ModuleD1.json, ModuleD2.json]\n```\nThis describes a four-module project of which one is 'normal', one requires\nspecial Xcode treatment, one is Objective-C, and one has prebuilt SourceKitten\nJSON.\n\nPer-module options set at the top level are inherited by each module unless\nalso set locally -- but you can't set both `--module` and `--modules`.\n\nJazzy doesn't support `--podspec` mode in conjunction with the multiple\nmodules feature.\n\n#### Presentation\n\nThe `--merge-modules` flag controls how declarations from multiple modules\nare arranged into categories.\n\nThe default of `all` has Jazzy combine declarations from the modules so there\nis one category of classes, one of structures, and so on.  To the user this means\nthey do not worry about which module exports a particular type, although that\ninformation remains available in the type's page.\n\nSetting `--merge-modules none` changes this so each module is a top-level\ncategory, with the module's symbols listed under it.  \n\nSetting `--merge-modules extensions` is like `none` except cross-module\nextensions are shown as part of their extended type.  For example if `ModuleA`\nextends `ModuleB.SomeType` then those extension members from `ModuleA` are shown\non the `ModuleB.SomeType` page along with the rest of `SomeType`.\n\nYou can use `--documentation` to include guides, `custom_categories` to customize\nthe layout with types from whichever modules you want, and `--abstract` to add\nadditional markdown content to the per-module category pages.\n\nUse the `--title`, `--readme-title`, and `--docset-title` flags to control the\ntop-level names of your documentation.  Without these, Jazzy uses the name of one\nof the modules being documented.\n\n### Themes\n\nThree themes are provided with jazzy: `apple` (default), `fullwidth` and `jony`.\n\n* `apple` example: <https://realm.io/docs/swift/latest/api/>\n* `fullwidth` example: <https://reduxkit.github.io/ReduxKit/>\n* `jony` example: <https://harshilshah.github.io/IGListKit/>\n\nYou can specify which theme to use by passing in the `--theme` option. You can\nalso provide your own custom theme by passing in the path to your theme\ndirectory.\n\n### Guides\n\n| Description | Command |\n| ---         | ---     |\n| Command line option | `--documentation={file pattern}` |\n| Example             | `--documentation=Docs/*.md` |\n| jazzy.yaml example  | `documentation: Docs/*.md` |\n\nBy default, jazzy looks for one of README.md, README.markdown, README.mdown or README (in that order) in the directory from where it runs to render the index page at the root of the docs output directory.\nUsing the `--documentation` option, extra markdown files can be integrated into the generated docs and sidebar navigation.\n\nAny files found matching the file pattern will be parsed and included as a document with the type 'Guide' when generated. If the files are not included using the `custom_categories` config option, they will be grouped under 'Other Guides' in the sidebar navigation.\n\nThere are a few limitations:\n- File names must be unique from source files.\n- Readme should be specified separately using the `readme` option.\n\nYou can link to a guide from other guides or doc comments using the name of the page\nas it appears in the site.  For example, to link to the guide generated from a file\ncalled `My Guide.md` you would write \\`My Guide\\`.\n\n### Section description abstracts\n\n| Description | Command |\n| ---         | ---     |\n| Command line option | `--abstract={file pattern}` |\n| Example             | `--abstract=Docs/Sections/*.md` |\n| jazzy.yaml example  | `abstract: Docs/Sections/*.md` |\n\nUsing the `--abstract` options, extra markdown can be included after the heading of section overview pages. Think of it as a template include.\n\nThe list of files matching the pattern is compared against the list of sections generated and if a match is found, it's contents will be included in that section before listing source output.\n\nUnlike the `--documentation` option, these files are not included in navigation and if a file does not match a section title, it is not included at all.\n\nThis is very helpful when using `custom_categories` for grouping types and including relevant documentation in those sections.\n\nFor an example of a project using both `--documentation` and `--abstract` see: [https://reswift.github.io/ReSwift/](https://reswift.github.io/ReSwift/)\n\n### Controlling what is documented\n\nIn Swift mode, Jazzy by default documents only `public` and `open` declarations. To\ninclude declarations with a lower access level, set the `--min-acl` flag to `internal`,\n`fileprivate`, or `private`.\n\nBy default, Jazzy does not document declarations marked `@_spi` when `--min-acl` is\nset to `public` or `open`.  Set the `--include-spi-declarations` flag to include them.\n\nIn Objective-C mode, Jazzy documents all declarations found in the `--umbrella-header`\nheader file and any other header files included by it.\n\nYou can control exactly which declarations should be documented using `--exclude`,\n`--include`, or `:nodoc:`.\n\nThe `--include` and `--exclude` flags list source files that should be included/excluded\nrespectively in the documentation. Entries in the list can be absolute pathnames beginning\nwith `/` or relative pathnames. Relative pathnames are interpreted relative to the\ndirectory from where you run `jazzy` or, if the flags are set in the config file, relative\nto the directory containing the config file. Entries in the list can match multiple files\nusing `*` to match any number of characters including `/`.  For example:\n* `jazzy --include=/Users/fred/project/Sources/Secret.swift` -- include a specific file\n* `jazzy --exclude=/*/Internal*` -- exclude all files with names that begin with *Internal*\n  and any files under any directory with a name beginning *Internal*.\n* `jazzy --exclude=Impl1/*,Impl2/*` -- exclude all files under the directories *Impl1* and\n  *Impl2* found in the current directory.\n\nNote that the `--include` option is applied before the `--exclude` option. For example:\n\n* `jazzy --include=/*/Internal* --exclude=Impl1/*,Impl2/*` -- include all files with names\n  that begin with *Internal* and any files under any directory with a name beginning\n  *Internal*, **except** for those under the directories *Impl1* and *Impl2* found in the\n  current directory\n\nDeclarations with a documentation comment containing `:nodoc:` are excluded from the\ndocumentation.\n\nDeclarations with the `@_documentation(visibility:)` attribute are treated as though they\nare written with the given visibility.  You can use this as a replacement for `:nodoc:` as\npart of a transition to Apple's DocC but it is not compatible with Jazzy's symbolgraph mode.\n\n### Documentation structure\n\nJazzy arranges documentation into categories.  The default categories are things\nlike _Classes_ and _Structures_ corresponding to programming-language concepts,\nas well as _Guides_ if `--documentation` is set.\n\nYou can customize the categories and their contents using `custom_categories` in\nthe config file \u2014 see the ReSwift [docs](https://reswift.github.io/ReSwift/) and\n[config file](https://github.com/ReSwift/ReSwift/blob/e94737282850fa038b625b4e351d1608a3d02cee/.jazzy.json)\nfor an example.\n\nWithin each category the items are ordered first alphabetically by source\nfilename, and then by declaration order within the file.  You can use\n`// MARK:` comments within the file to create subheadings on the page, for\nexample to split up properties and methods.  There\u2019s no way to customize this\norder short of editing either the generated web page or the SourceKitten JSON.\n\nSwift extensions and Objective-C categories allow type members to be declared\nacross multiple source files.  In general, extensions follow the main type\ndeclaration: first extensions from the same source file, then extensions from\nother files ordered alphabetically by filename.  Swift conditional extensions\n(`extension A where \u2026`) always appear beneath unconditional extensions.\n\nUse this pattern to add or customize the subheading before extension members:\n```swift\nextension MyType {\n  // MARK: Subheading for this group of methods\n  \u2026\n}\n```\n\nWhen Jazzy is using `--swift-build-tool symgraph` the source file names and\nline numbers may not be available. In this case the ordering is approximately\nalphabetical by symbol name and USR; the order is stable for the same input.\n\nJazzy does not normally create separate web pages for declarations that do not\nhave any members -- instead they are entirely nested into their parent page.  Use\nthe `--separate-global-declarations` flag to change this and create pages for\nthese empty types.\n\n### Choosing the Swift language version\n\nJazzy normally uses the Swift compiler from the Xcode currently configured by\n`xcode-select`.  Use the `--swift-version` flag or the `DEVELOPER_DIR` environment\nvariable to compile with a different Xcode.\n\nThe value you pass to `--swift-version` must be the Swift language version given\nby `swift --version` in the Xcode you want to use. Jazzy uses\n[xcinvoke](https://github.com/segiddins/xcinvoke) to find a suitable Xcode\ninstallation on your system. This can be slow: if you know where Xcode is\ninstalled then it's faster to set `DEVELOPER_DIR` directly.\n\nFor example to use Xcode 14:\n```shell\njazzy --swift-version 5.7\n```\n...or:\n```shell\nDEVELOPER_DIR=/Applications/Xcode_14.app/Contents/Developer jazzy\n```\n\n### Dash Docset Support\n\nAs well as the browsable HTML documentation, Jazzy creates a _docset_ for use\nwith the [Dash][dash] app.\n\nBy default the docset is created at `docs/docsets/ModuleName.tgz`.  Use\n`--docset-path` to create it somewhere else; use `--docset-title` to change\nthe docset's title.\n\nUse `--docset-playground-url` and `--docset-icon` to further customize the\ndocset.\n\nIf you set both `--root-url` to be the (https://) URL where you plan to deploy\nyour documentation and `--version` to give your documentation a version number\nthen Jazzy also creates a docset feed XML file and includes an \"Install in Dash\"\nbutton on the site.  This lets users who are browsing your documentation on the\nweb install and start using the docs in Dash locally.\n\n## Linux\n\nJazzy uses [SourceKitten][sourcekitten] to communicate with the Swift build\nenvironment and compiler.  The `sourcekitten` binary included in the Jazzy gem\nis built for macOS and so does not run on other operating systems.\n\nTo use Jazzy on Linux you first need to install and build `sourcekitten`\nfollowing instructions from [SourceKitten's GitHub repository][sourcekitten].\n\nThen to generate documentation for a SwiftPM project, instead of running just\n`jazzy` do:\n```shell\nsourcekitten doc --spm > doc.json\njazzy --sourcekitten-sourcefile doc.json\n```\n\nWe hope to improve this process in the future.\n\n## Troubleshooting\n\n### Swift\n\n**Only extensions are listed in the documentation?**\n\nCheck the `--min-acl` setting -- see [above](#controlling-what-is-documented).\n\n**Unable to find an Xcode with swift version X**\n\n1. The value passed with `--swift-version` must exactly match the version\n   number from `swiftc --version`.  For example Xcode 10.1 needs\n   `--swift-version 4.2.1`.  See [the flag documentation](#choosing-the-swift-language-version).\n2. The Xcode you want to use must be in the Spotlight index.  You can check\n   this using `mdfind 'kMDItemCFBundleIdentifier == com.apple.dt.Xcode'`.\n   Some users have reported this issue being fixed by a reboot; `mdutil -E`\n   may also help.  If none of these work then you can set the `DEVELOPER_DIR`\n   environment variable to point to the Xcode you want before running Jazzy\n   without the `--swift-version` flag.\n\n### Objective-C\n\nSee [this document](ObjectiveC.md).\n\n### Miscellaneous\n\n**Missing docset**\n\nJazzy only builds a docset when you set the `--module` or `--modules` flag.\n\n**Unable to pass --build-tool-arguments containing commas**\n\nIf you want Jazzy to run something like `xcodebuild -scheme Scheme -destination 'a=x,b=y,c=z'`\nthen you must use the config file instead of the CLI flag because the CLI parser\nthat Jazzy uses cannot handle arguments that themselves contain commas.\n\nThe example config file here would be:\n```yaml\nbuild_tool_arguments:\n  - \"-scheme\"\n  - \"Scheme\"\n  - \"-destination\"\n  - \"a=x,b=y,c=z\"\n```\n\n**Errors running in an Xcode Run Script phase**\n\nRunning Jazzy from an Xcode build phase can go wrong in cryptic ways when Jazzy\nhas to run `xcodebuild`.\n\nUsers [have reported](https://github.com/realm/jazzy/issues/1012) that error\nmessages about symbols lacking USRs can be fixed by unsetting\n`LLVM_TARGET_TRIPLE_SUFFIX` as part of the run script.\n\n**Warnings about matches and leftovers when using globs and wildcards**\n\nSome flags such as `--include` and `--documentation` support '*' characters as\nwildcards.  If you are using the CLI then you must make sure that your shell\ndoes not itself try to interpret them, for example by quoting the token: use\n`jazzy --documentation '*.md'` instead of `jazzy --documentation *.md`.\n\n### Installation Problems\n\n**Can't find header files / clang**\n\nSome of the Ruby gems that Jazzy depends on have native C extensions.  This\nmeans you need the Xcode command-line developer tools installed to build\nthem: run `xcode-select --install` to install the tools.\n\n**/Applications/Xcode: No such file or directory**\n\nThe path of your active Xcode installation must not contain spaces.  So\n`/Applications/Xcode.app/` is fine, `/Applications/Xcode-10.2.app/` is fine,\nbut `/Applications/Xcode 10.2.app/` is not.  This restriction applies only\nwhen *installing* Jazzy, not running it.\n\n### MacOS Before 10.14.4\n\nStarting with Jazzy 0.10.0, if you see an error similar to `dyld: Symbol not found: _$s11SubSequenceSlTl` then you need to install the [Swift 5 Runtime Support for Command Line Tools](https://support.apple.com/kb/DL1998).\n\nAlternatively, you can:\n* Update to macOS 10.14.4 or later; or\n* Install Xcode 10.2 or later at `/Applications/Xcode.app`.\n\n## Development\n\nPlease review jazzy's [contributing guidelines](https://github.com/realm/jazzy/blob/master/CONTRIBUTING.md) when submitting pull requests.\n\njazzy is composed of two parts:\n\n1. The parser, [SourceKitten][SourceKitten] (written in Swift)\n2. The site generator (written in ruby)\n\nTo build and run jazzy from source:\n\n1. Install [bundler][bundler].\n2. Run `bundle install` from the root of this repo.\n3. Run jazzy from source by running `bin/jazzy`.\n\nInstructions to build SourceKitten from source can be found at\n[SourceKitten's GitHub repository][SourceKitten].\n\n## Design Goals\n\n- Generate source code docs matching Apple's official reference documentation\n- Support for standard Objective-C and Swift documentation comment syntax\n- Leverage modern HTML templating ([Mustache][mustache])\n- Leverage the power and accuracy of the [Clang AST][ast] and [SourceKit][sourcekit]\n- Support for Dash docsets\n- Support Swift and Objective-C\n\n## License\n\nThis project is released under the [MIT license](https://github.com/realm/jazzy/blob/master/LICENSE).\n\n## About\n\n<img src=\"images/realm.png\" width=\"184\" />\n\nJazzy is maintained and funded by Realm Inc. The names and logos for\nRealm are trademarks of Realm Inc.\n\nWe :heart: open source software!\nSee [our other open source projects](https://github.com/realm),\nread [our blog](https://realm.io/news) or say hi on twitter\n([@realm](https://twitter.com/realm)).\n\n[clang]: https://clang.llvm.org \"Clang\"\n[sourcekit]: https://www.jpsim.com/uncovering-sourcekit \"Uncovering SourceKit\"\n[ast]: https://clang.llvm.org/docs/IntroductionToTheClangAST.html \"Introduction To The Clang AST\"\n[xcode]: https://developer.apple.com/xcode \"Xcode\"\n[SourceKitten]: https://github.com/jpsim/SourceKitten \"SourceKitten\"\n[bundler]: https://rubygems.org/gems/bundler\n[mustache]: https://mustache.github.io \"Mustache\"\n[spm]: https://swift.org/package-manager/ \"Swift Package Manager\"\n[dash]: https://kapeli.com/dash/ \"Dash\"\n",
        "releases": [
            {
                "name": "0.15.3",
                "date": "2024-10-19T11:37:10Z"
            },
            {
                "name": "0.15.2",
                "date": "2024-09-20T10:42:52Z"
            },
            {
                "name": "0.15.1",
                "date": "2024-06-08T10:10:52Z"
            },
            {
                "name": "0.15.0",
                "date": "2024-05-04T17:37:13Z"
            },
            {
                "name": "0.14.4",
                "date": "2023-09-18T12:30:06Z"
            },
            {
                "name": "0.14.3",
                "date": "2022-09-11T18:14:16Z"
            },
            {
                "name": "0.14.2",
                "date": "2022-03-17T10:24:25Z"
            },
            {
                "name": "0.14.1",
                "date": "2021-10-04T11:34:28Z"
            },
            {
                "name": "0.14.0",
                "date": "2021-08-14T16:24:01Z"
            },
            {
                "name": "0.13.7",
                "date": "2021-05-06T08:48:20Z"
            },
            {
                "name": "0.13.6",
                "date": "2020-11-08T19:35:00Z"
            },
            {
                "name": "0.13.5",
                "date": "2020-07-06T10:51:48Z"
            },
            {
                "name": "0.13.4",
                "date": "2020-05-31T10:52:22Z"
            },
            {
                "name": "0.13.3",
                "date": "2020-04-24T08:27:55Z"
            },
            {
                "name": "0.13.2",
                "date": "2020-04-02T09:06:32Z"
            },
            {
                "name": "0.13.1",
                "date": "2020-01-07T21:39:33Z"
            },
            {
                "name": "0.13.0",
                "date": "2019-12-09T17:25:12Z"
            },
            {
                "name": "0.12.0",
                "date": "2019-11-11T12:03:45Z"
            },
            {
                "name": "0.11.2",
                "date": "2019-09-25T12:11:20Z"
            },
            {
                "name": "0.11.1",
                "date": "2019-09-17T09:03:32Z"
            },
            {
                "name": "0.11.0",
                "date": "2019-09-14T00:07:39Z"
            },
            {
                "name": "0.10.0",
                "date": "2019-06-22T17:33:40Z"
            },
            {
                "name": "0.9.6",
                "date": "2019-04-04T09:53:22Z"
            },
            {
                "name": "0.9.5",
                "date": "2019-01-26T11:52:33Z"
            },
            {
                "name": "0.9.4",
                "date": "2019-01-26T11:51:43Z"
            },
            {
                "name": "0.9.3",
                "date": "2018-05-06T22:16:17Z"
            },
            {
                "name": "0.9.2",
                "date": "2018-04-21T17:20:35Z"
            },
            {
                "name": "0.9.1",
                "date": "2018-01-08T19:19:06Z"
            },
            {
                "name": "0.9.0",
                "date": "2017-10-27T22:43:50Z"
            },
            {
                "name": "0.8.4",
                "date": "2017-09-28T23:55:02Z"
            },
            {
                "name": "0.8.3",
                "date": "2017-07-07T19:25:49Z"
            },
            {
                "name": "0.8.2",
                "date": "2017-05-13T00:17:11Z"
            },
            {
                "name": "0.8.1",
                "date": "2017-05-02T00:07:13Z"
            },
            {
                "name": "0.8.0",
                "date": "2017-04-27T22:05:58Z"
            },
            {
                "name": "0.7.5",
                "date": "2017-03-21T16:37:46Z"
            },
            {
                "name": "0.7.4",
                "date": "2017-02-08T21:54:19Z"
            },
            {
                "name": "0.7.3",
                "date": "2016-12-01T20:34:20Z"
            },
            {
                "name": "0.7.2: More Public Than Public",
                "date": "2016-09-14T18:33:54Z"
            },
            {
                "name": "0.7.1: Xcode 8 Support",
                "date": "2016-09-13T22:31:59Z"
            },
            {
                "name": "0.7.0: Autolink Improvements",
                "date": "2016-06-12T16:49:44Z"
            },
            {
                "name": "0.6.3: Custom Docs",
                "date": "2016-06-09T23:33:47Z"
            },
            {
                "name": "0.6.2: Nest Egg",
                "date": "2016-05-21T03:00:50Z"
            },
            {
                "name": "0.6.1: Swift-Colored Glasses",
                "date": "2016-05-19T06:34:16Z"
            },
            {
                "name": "0.6.0: Grand Unified Theory",
                "date": "2016-04-06T00:56:13Z"
            },
            {
                "name": "0.5.0: Now with themes!",
                "date": "2016-01-03T21:43:39Z"
            },
            {
                "name": "0.4.1: Wall of Asterisks",
                "date": "2015-11-24T19:31:13Z"
            },
            {
                "name": "0.4.0: Long Live Objective-C",
                "date": "2015-11-11T01:02:12Z"
            },
            {
                "name": "0.3.2: All the Fixin's",
                "date": "2015-10-14T03:51:30Z"
            },
            {
                "name": "0.3.1: Skipped a Beat",
                "date": "2015-11-03T18:23:37Z"
            },
            {
                "name": "0.3.0: Minor Third",
                "date": "2015-09-09T14:46:09Z"
            },
            {
                "name": "0.2.4: Copy, Right?",
                "date": "2015-08-27T17:39:29Z"
            },
            {
                "name": "0.2.3: Xcode, I choose you!",
                "date": "2015-07-31T03:55:04Z"
            },
            {
                "name": "0.2.2: Groomed Stache",
                "date": "2015-07-07T19:43:10Z"
            },
            {
                "name": "0.2.1: Exclude me",
                "date": "2015-05-06T07:49:38Z"
            },
            {
                "name": "0.2.0: Catching up with Swift",
                "date": "2015-04-23T18:48:07Z"
            },
            {
                "name": "0.1.6: Install me maybe?",
                "date": "2015-04-23T18:45:19Z"
            },
            {
                "name": "0.1.5: All That Jazz, Now in Style",
                "date": "2015-04-09T18:11:58Z"
            },
            {
                "name": "0.1.4: Fixin the Fixins",
                "date": "2015-03-24T23:30:20Z"
            },
            {
                "name": "0.1.3: All The Fixins",
                "date": "2015-03-24T23:05:40Z"
            },
            {
                "name": "0.1.2: The Rise of the Symlinks, the Prequel",
                "date": "2015-02-28T20:30:49Z"
            },
            {
                "name": "0.1.1: The Return of the Symlinks",
                "date": "2015-02-18T01:12:42Z"
            },
            {
                "name": "0.1.0: Podspecs Come Alive",
                "date": "2015-01-28T22:01:02Z"
            },
            {
                "name": "0.0.20: Now with Anti-Skip\u2122 Technology",
                "date": "2015-01-02T22:02:21Z"
            }
        ]
    }
}