{
    "https://api.github.com/repos/JetBrains/Exposed": {
        "forks": 694,
        "watchers": 8491,
        "stars": 8491,
        "languages": {
            "Kotlin": 2446256
        },
        "commits": [
            "2025-01-22T04:03:51Z",
            "2025-01-21T10:56:44Z",
            "2025-01-20T11:20:41Z",
            "2025-01-20T09:18:15Z",
            "2025-01-17T14:40:41Z",
            "2025-01-17T13:23:00Z",
            "2025-01-16T23:19:15Z",
            "2025-01-16T21:30:05Z",
            "2025-01-16T20:56:09Z",
            "2025-01-14T16:25:10Z",
            "2025-01-13T12:41:13Z",
            "2025-01-10T12:34:02Z",
            "2025-01-09T16:43:53Z",
            "2025-01-08T17:02:05Z",
            "2025-01-08T14:20:21Z",
            "2025-01-08T13:41:05Z",
            "2025-01-07T21:20:13Z",
            "2025-01-07T15:20:59Z",
            "2025-01-07T13:53:15Z",
            "2025-01-07T13:12:32Z",
            "2025-01-06T02:09:04Z",
            "2025-01-06T01:25:26Z",
            "2025-01-03T13:00:24Z",
            "2024-12-21T02:18:01Z",
            "2024-12-21T01:44:50Z",
            "2024-12-19T14:53:15Z",
            "2024-12-18T15:15:06Z",
            "2024-12-18T13:46:02Z",
            "2024-12-17T14:00:39Z",
            "2024-12-17T13:16:51Z"
        ],
        "creation_date": "2013-07-30T12:55:27Z",
        "contributors": 30,
        "topics": [
            "dao",
            "kotlin",
            "orm",
            "sql"
        ],
        "subscribers": 129,
        "readme": "<div align=\"center\">\n\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"./docs/logo-dark.png\" width=\"315\">\n    <img alt=\"Exposed logo\" src=\"./docs/logo-light.png\" width=\"315\">\n  </picture>\n\n</div>\n<br><br>\n\n<div align=\"center\">\n\n[![JetBrains team project](https://jb.gg/badges/team.svg)](https://confluence.jetbrains.com/display/ALL/JetBrains+on+GitHub)\n[![Slack Channel](https://img.shields.io/badge/chat-exposed-yellow.svg?logo=slack)](https://kotlinlang.slack.com/messages/exposed/)\n[![TC Build status](https://exposed.teamcity.com/app/rest/builds/buildType:id:Exposed_Build/statusIcon.svg)](https://exposed.teamcity.com/viewType.html?buildTypeId=Exposed_Build&guest=1)\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/org.jetbrains.exposed/exposed-core/badge.svg)](https://maven-badges.herokuapp.com/maven-central/org.jetbrains.exposed/exposed-core)\n[![GitHub License](https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg?style=flat)](https://www.apache.org/licenses/LICENSE-2.0)\n\n</div>\n\n## Welcome to **Exposed**, an ORM framework for [Kotlin](https://github.com/JetBrains/kotlin).\n\nExposed is a lightweight SQL library on top of a JDBC driver for the Kotlin language.\nExposed has two flavors of database access: typesafe SQL wrapping DSL and lightweight Data Access Objects (DAO).\n\nWith Exposed, you have two options for database access: wrapping DSL and a lightweight DAO. Our official mascot is the cuttlefish, which is well-known for its outstanding mimicry ability that enables it to blend seamlessly into any environment.\nSimilar to our mascot, Exposed can be used to mimic a variety of database engines, which helps you to build applications without dependencies on any specific database engine and to switch between them with very little or no changes.\n\n## Supported Databases\n\n- H2 (versions 2.x; 1.x version is deprecated and will be removed in future releases)\n- [![MariaDB](https://img.shields.io/badge/MariaDB-003545?style=for-the-badge&logo=mariadb&logoColor=white)](https://github.com/mariadb-corporation/mariadb-connector-j)\n- [![MySQL](https://img.shields.io/badge/mysql-4479A1.svg?style=for-the-badge&logo=mysql&logoColor=white)](https://github.com/mysql/mysql-connector-j)\n- [![Oracle](https://img.shields.io/badge/Oracle-F80000?style=for-the-badge&logo=oracle&logoColor=white)](https://www.oracle.com/ca-en/database/technologies/appdev/jdbc-downloads.html)\n- [![Postgres](https://img.shields.io/badge/postgres-%23316192.svg?style=for-the-badge&logo=postgresql&logoColor=white)](https://jdbc.postgresql.org/)\n  (Also, PostgreSQL using the [pgjdbc-ng](https://impossibl.github.io/pgjdbc-ng/) JDBC driver)\n- [![MicrosoftSQLServer](https://img.shields.io/badge/Microsoft%20SQL%20Server-CC2927?style=for-the-badge&logo=microsoft%20sql%20server&logoColor=white)](https://github.com/microsoft/mssql-jdbc)\n- [![SQLite](https://img.shields.io/badge/sqlite-%2307405e.svg?style=for-the-badge&logo=sqlite&logoColor=white)](https://github.com/xerial/sqlite-jdbc)\n\n## Dependencies\n\n### Maven Central configuration\n\nReleases of Exposed are available in the Maven Central repository. You can declare this repository in your build script as follows:\n\n#### Gradle Groovy and Kotlin DSL\n\n**Warning:** You might need to set your Kotlin JVM target to 8, and when using Spring to 17, in order for this to work properly:\n\n```kotlin\nrepositories {\n    // Versions after 0.30.1\n    // Versions before 0.30.1 is unavailable for now\n    mavenCentral()\n}\n```\n\n#### Maven\n\nThe Maven Central repository is enabled by default for Maven users.\n\n### Exposed modules\n\n`Exposed` consists of the following modules:\n\n* exposed-core - base module, which contains both DSL api along with mapping\n* exposed-crypt - provides additional column types to store encrypted data in DB and encode/decode it on client-side\n* exposed-dao - DAO api\n* exposed-java-time - date-time extensions based on Java8 Time API\n* exposed-jdbc - transport level implementation based on Java JDBC API\n* exposed-jodatime - date-time extensions based on JodaTime library\n* exposed-json - JSON and JSONB data type extensions\n* exposed-kotlin-datetime - date-time extensions based on kotlinx-datetime\n* exposed-money - extensions to support MonetaryAmount from \"javax.money:money-api\"\n* exposed-spring-boot-starter - a starter for [Spring Boot](https://spring.io/projects/spring-boot) to utilize Exposed as the ORM instead\n  of [Hibernate](https://hibernate.org/)\n\n```xml\n\n<dependencies>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-core</artifactId>\n        <version>0.58.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-crypt</artifactId>\n        <version>0.58.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-dao</artifactId>\n        <version>0.58.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-java-time</artifactId>\n        <version>0.58.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-jdbc</artifactId>\n        <version>0.58.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-jodatime</artifactId>\n        <version>0.58.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-json</artifactId>\n        <version>0.58.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-kotlin-datetime</artifactId>\n        <version>0.58.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-money</artifactId>\n        <version>0.58.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.jetbrains.exposed</groupId>\n        <artifactId>exposed-spring-boot-starter</artifactId>\n        <version>0.58.0</version>\n    </dependency>\n</dependencies>\n\n```\n\n#### Gradle Groovy\n\n```groovy\ndependencies {\n    implementation 'org.jetbrains.exposed:exposed-core:0.58.0'\n    implementation 'org.jetbrains.exposed:exposed-crypt:0.58.0'\n    implementation 'org.jetbrains.exposed:exposed-dao:0.58.0'\n    implementation 'org.jetbrains.exposed:exposed-jdbc:0.58.0'\n    \n    implementation 'org.jetbrains.exposed:exposed-jodatime:0.58.0'\n    // or\n    implementation 'org.jetbrains.exposed:exposed-java-time:0.58.0'\n    // or\n    implementation 'org.jetbrains.exposed:exposed-kotlin-datetime:0.58.0'\n    \n    implementation 'org.jetbrains.exposed:exposed-json:0.58.0'\n    implementation 'org.jetbrains.exposed:exposed-money:0.58.0'\n    implementation 'org.jetbrains.exposed:exposed-spring-boot-starter:0.58.0'\n}\n```\n\n#### Gradle Kotlin DSL\n\nIn `build.gradle.kts`:\n\n```kotlin\nval exposedVersion: String by project\ndependencies {\n    implementation(\"org.jetbrains.exposed:exposed-core:$exposedVersion\")\n    implementation(\"org.jetbrains.exposed:exposed-crypt:$exposedVersion\")\n    implementation(\"org.jetbrains.exposed:exposed-dao:$exposedVersion\")\n    implementation(\"org.jetbrains.exposed:exposed-jdbc:$exposedVersion\")\n    \n    implementation(\"org.jetbrains.exposed:exposed-jodatime:$exposedVersion\")\n    // or\n    implementation(\"org.jetbrains.exposed:exposed-java-time:$exposedVersion\")\n    // or\n    implementation(\"org.jetbrains.exposed:exposed-kotlin-datetime:$exposedVersion\")\n    \n    implementation(\"org.jetbrains.exposed:exposed-json:$exposedVersion\")\n    implementation(\"org.jetbrains.exposed:exposed-money:$exposedVersion\")\n    implementation(\"org.jetbrains.exposed:exposed-spring-boot-starter:$exposedVersion\")\n}\n```\n\nand in `gradle.properties`\n\n```\nexposedVersion=0.58.0\n```\n\n## Samples\n\nCheck out the [samples](samples/README.md) for a quick start.\n\n## Links\n\nCurrently, Exposed is available for **maven/gradle builds**. Check the [Maven Central](https://search.maven.org/search?q=g:org.jetbrains.exposed) and read [Getting Started](https://jetbrains.github.io/Exposed/getting-started-with-exposed.html) to get an insight on setting up Exposed.\n<br><br>\nFor more information visit the links below:\n\n-   [Documentation](https://jetbrains.github.io/Exposed/home.html) with examples and docs\n-   [Contributing to Exposed](#contributing)\n-   [Migration Guide](https://jetbrains.github.io/Exposed/migration-guide.html)\n-   [Breaking changes](https://jetbrains.github.io/Exposed/breaking-changes.html) and any migration details\n-   [Slack Channel](https://kotlinlang.slack.com/messages/exposed/)\n-   [Filing Issues](#contributing)\n-   [Issue Tracker](https://youtrack.jetbrains.com/issues/EXPOSED)\n<br><br>\n\n## Community\n\nDo you have questions? Feel free to [request an invitation](https://surveys.jetbrains.com/s3/kotlin-slack-sign-up) for the [kotlinlang slack](https://kotlinlang.slack.com/) and join the project conversation at our [#exposed](https://kotlinlang.slack.com/messages/exposed/) channel.\n\n## Contributing\n\nWe encourage your feedback in any form, such as feature requests, bug reports, documentation updates, and questions.\nNote that we are moving away from GitHub Issues for this reporting. Log any new requests on [YouTrack](https://youtrack.jetbrains.com/issues/EXPOSED).\nWhile issues are visible publicly, either creating a new issue or commenting on an existing one does require logging in to YouTrack.\n\nWe also actively welcome your pull requests. However, linking your work to an [existing issue](https://youtrack.jetbrains.com/issues/EXPOSED) is preferred.\n\n\nSee the full [contribution guide](https://jetbrains.github.io/Exposed/contributing.html) for more details.\n\nBy contributing to the Exposed project, you agree that your contributions will be licensed under [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0).\n<br><br>\n\n## Examples\n\n### SQL DSL\n\n```kotlin\nimport org.jetbrains.exposed.sql.*\nimport org.jetbrains.exposed.sql.SqlExpressionBuilder.like\nimport org.jetbrains.exposed.sql.transactions.transaction\n\nobject Users : Table() {\n    val id: Column<String> = varchar(\"id\", 10)\n    val name: Column<String> = varchar(\"name\", length = 50)\n    val cityId: Column<Int?> = (integer(\"city_id\") references Cities.id).nullable()\n\n    override val primaryKey = PrimaryKey(id, name = \"PK_User_ID\") // name is optional here\n}\n\nobject Cities : Table() {\n    val id: Column<Int> = integer(\"id\").autoIncrement()\n    val name: Column<String> = varchar(\"name\", 50)\n\n    override val primaryKey = PrimaryKey(id, name = \"PK_Cities_ID\")\n}\n\nfun main() {\n    Database.connect(\"jdbc:h2:mem:test\", driver = \"org.h2.Driver\", user = \"root\", password = \"\")\n\n    transaction {\n        addLogger(StdOutSqlLogger)\n\n        SchemaUtils.create(Cities, Users)\n\n        val saintPetersburgId = Cities.insert {\n            it[name] = \"St. Petersburg\"\n        } get Cities.id\n\n        val munichId = Cities.insert {\n            it[name] = \"Munich\"\n        } get Cities.id\n\n        val pragueId = Cities.insert {\n            it.update(name, stringLiteral(\"   Prague   \").trim().substring(1, 2))\n        }[Cities.id]\n\n        val pragueName = Cities.selectAll().where { Cities.id eq pragueId }.single()[Cities.name]\n        println(\"pragueName = $pragueName\")\n\n        Users.insert {\n            it[id] = \"andrey\"\n            it[name] = \"Andrey\"\n            it[Users.cityId] = saintPetersburgId\n        }\n\n        Users.insert {\n            it[id] = \"sergey\"\n            it[name] = \"Sergey\"\n            it[Users.cityId] = munichId\n        }\n\n        Users.insert {\n            it[id] = \"eugene\"\n            it[name] = \"Eugene\"\n            it[Users.cityId] = munichId\n        }\n\n        Users.insert {\n            it[id] = \"alex\"\n            it[name] = \"Alex\"\n            it[Users.cityId] = null\n        }\n\n        Users.insert {\n            it[id] = \"smth\"\n            it[name] = \"Something\"\n            it[Users.cityId] = null\n        }\n\n        Users.update({ Users.id eq \"alex\" }) {\n            it[name] = \"Alexey\"\n        }\n\n        Users.deleteWhere{ Users.name like \"%thing\" }\n\n        println(\"All cities:\")\n\n        for (city in Cities.selectAll()) {\n            println(\"${city[Cities.id]}: ${city[Cities.name]}\")\n        }\n\n        println(\"Manual join:\")\n        \n        (Users innerJoin Cities)\n            .select(Users.name, Cities.name)\n            .where {\n                (Users.id.eq(\"andrey\") or Users.name.eq(\"Sergey\")) and\n                    Users.id.eq(\"sergey\") and Users.cityId.eq(Cities.id)\n            }.forEach { \n                println(\"${it[Users.name]} lives in ${it[Cities.name]}\") \n            }\n\n        println(\"Join with foreign key:\")\n\n        (Users innerJoin Cities)\n            .select(Users.name, Users.cityId, Cities.name)\n            .where { Cities.name.eq(\"St. Petersburg\") or Users.cityId.isNull() }\n            .forEach { \n                if (it[Users.cityId] != null) { \n                    println(\"${it[Users.name]} lives in ${it[Cities.name]}\") \n                } \n                else { \n                    println(\"${it[Users.name]} lives nowhere\") \n                } \n            }\n\n        println(\"Functions and group by:\")\n\n        ((Cities innerJoin Users)\n            .select(Cities.name, Users.id.count())\n            .groupBy(Cities.name)\n            ).forEach {\n                val cityName = it[Cities.name]\n                val userCount = it[Users.id.count()]\n\n                if (userCount > 0) {\n                    println(\"$userCount user(s) live(s) in $cityName\")\n                } else {\n                    println(\"Nobody lives in $cityName\")\n                }\n            }\n\n        SchemaUtils.drop(Users, Cities)\n    }\n}\n\n```\n\nGenerated SQL:\n\n```sql\n    SQL: CREATE TABLE IF NOT EXISTS Cities (id INT AUTO_INCREMENT, name VARCHAR(50) NOT NULL, CONSTRAINT PK_Cities_ID PRIMARY KEY (id))\n    SQL: CREATE TABLE IF NOT EXISTS Users (id VARCHAR(10), name VARCHAR(50) NOT NULL, city_id INT NULL, CONSTRAINT PK_User_ID PRIMARY KEY (id), CONSTRAINT FK_Users_city_id__ID FOREIGN KEY (city_id) REFERENCES Cities(id) ON DELETE RESTRICT ON UPDATE RESTRICT)\n    SQL: INSERT INTO Cities (name) VALUES ('St. Petersburg')\n    SQL: INSERT INTO Cities (name) VALUES ('Munich')\n    SQL: INSERT INTO Cities (name) VALUES (SUBSTRING(TRIM('   Prague   '), 1, 2))\n    SQL: SELECT Cities.id, Cities.name FROM Cities WHERE Cities.id = 3\n    pragueName = Pr\n    SQL: INSERT INTO Users (id, name, city_id) VALUES ('andrey', 'Andrey', 1)\n    SQL: INSERT INTO Users (id, name, city_id) VALUES ('sergey', 'Sergey', 2)\n    SQL: INSERT INTO Users (id, name, city_id) VALUES ('eugene', 'Eugene', 2)\n    SQL: INSERT INTO Users (id, name, city_id) VALUES ('alex', 'Alex', NULL)\n    SQL: INSERT INTO Users (id, name, city_id) VALUES ('smth', 'Something', NULL)\n    SQL: UPDATE Users SET name='Alexey' WHERE Users.id = 'alex'\n    SQL: DELETE FROM Users WHERE Users.name LIKE '%thing'\n    All cities:\n    SQL: SELECT Cities.id, Cities.name FROM Cities\n    1: St. Petersburg\n    2: Munich\n    3: Pr\n    Manual join:\n    SQL: SELECT Users.name, Cities.name FROM Users INNER JOIN Cities ON Cities.id = Users.city_id WHERE ((Users.id = 'andrey') or (Users.name = 'Sergey')) and (Users.id = 'sergey') and (Users.city_id = Cities.id)\n    Sergey lives in Munich\n    Join with foreign key:\n    SQL: SELECT Users.name, Users.city_id, Cities.name FROM Users INNER JOIN Cities ON Cities.id = Users.city_id WHERE (Cities.name = 'St. Petersburg') or (Users.city_id IS NULL)\n    Andrey lives in St. Petersburg\n    Functions and group by:\n    SQL: SELECT Cities.name, COUNT(Users.id) FROM Cities INNER JOIN Users ON Cities.id = Users.city_id GROUP BY Cities.name\n    1 user(s) live(s) in St. Petersburg\n    2 user(s) live(s) in Munich\n    SQL: DROP TABLE IF EXISTS Users\n    SQL: DROP TABLE IF EXISTS Cities\n```\n\n### DAO\n\n```kotlin\nimport org.jetbrains.exposed.dao.*\nimport org.jetbrains.exposed.dao.id.EntityID\nimport org.jetbrains.exposed.dao.id.IntIdTable\nimport org.jetbrains.exposed.sql.*\nimport org.jetbrains.exposed.sql.transactions.transaction\n\nobject Users : IntIdTable() {\n    val name = varchar(\"name\", 50).index()\n    val city = reference(\"city\", Cities)\n    val age = integer(\"age\")\n}\n\nobject Cities: IntIdTable() {\n    val name = varchar(\"name\", 50)\n}\n\nclass User(id: EntityID<Int>) : IntEntity(id) {\n    companion object : IntEntityClass<User>(Users)\n\n    var name by Users.name\n    var city by City referencedOn Users.city\n    var age by Users.age\n}\n\nclass City(id: EntityID<Int>) : IntEntity(id) {\n    companion object : IntEntityClass<City>(Cities)\n\n    var name by Cities.name\n    val users by User referrersOn Users.city\n}\n\nfun main() {\n    Database.connect(\"jdbc:h2:mem:test\", driver = \"org.h2.Driver\", user = \"root\", password = \"\")\n\n    transaction {\n        addLogger(StdOutSqlLogger)\n\n        SchemaUtils.create(Cities, Users)\n\n        val stPete = City.new {\n            name = \"St. Petersburg\"\n        }\n\n        val munich = City.new {\n            name = \"Munich\"\n        }\n\n        User.new {\n            name = \"a\"\n            city = stPete\n            age = 5\n        }\n\n        User.new {\n            name = \"b\"\n            city = stPete\n            age = 27\n        }\n\n        User.new {\n            name = \"c\"\n            city = munich\n            age = 42\n        }\n\n        println(\"Cities: ${City.all().joinToString { it.name }}\")\n        println(\"Users in ${stPete.name}: ${stPete.users.joinToString { it.name }}\")\n        println(\"Adults: ${User.find { Users.age greaterEq 18 }.joinToString { it.name }}\")\n    }\n}\n```\n\nGenerated SQL:\n\n```sql\n    SQL: CREATE TABLE IF NOT EXISTS Cities (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(50) NOT NULL)\n    SQL: CREATE TABLE IF NOT EXISTS Users (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(50) NOT NULL, city INT NOT NULL, age INT NOT NULL, CONSTRAINT FK_Users_city__ID FOREIGN KEY (city) REFERENCES Cities(id) ON DELETE RESTRICT ON UPDATE RESTRICT)\n    SQL: CREATE INDEX Users_name ON Users (name)\n    SQL: INSERT INTO Cities (name) VALUES ('St. Petersburg')\n    SQL: INSERT INTO Cities (name) VALUES ('Munich')\n    SQL: SELECT Cities.id, Cities.name FROM Cities\n    Cities: St. Petersburg, Munich\n    SQL: INSERT INTO Users (name, city, age) VALUES ('a', 1, 5)\n    SQL: INSERT INTO Users (name, city, age) VALUES ('b', 1, 27)\n    SQL: INSERT INTO Users (name, city, age) VALUES ('c', 2, 42)\n    SQL: SELECT Users.id, Users.name, Users.city, Users.age FROM Users WHERE Users.city = 1\n    Users in St. Petersburg: a, b\n    SQL: SELECT Users.id, Users.name, Users.city, Users.age FROM Users WHERE Users.age >= 18\n    Adults: b, c\n```\n",
        "releases": [
            {
                "name": "0.58.0",
                "date": "2025-01-13T12:43:34Z"
            },
            {
                "name": "0.57.0",
                "date": "2024-12-05T20:01:04Z"
            },
            {
                "name": "0.56.0",
                "date": "2024-10-30T15:15:17Z"
            },
            {
                "name": "0.55.0",
                "date": "2024-09-25T16:03:08Z"
            },
            {
                "name": "0.54.0",
                "date": "2024-08-30T11:21:57Z"
            },
            {
                "name": "0.53.0",
                "date": "2024-07-31T12:48:54Z"
            },
            {
                "name": "0.52.0",
                "date": "2024-06-26T11:27:04Z"
            },
            {
                "name": "0.51.1",
                "date": "2024-06-04T09:38:51Z"
            },
            {
                "name": "0.51.0",
                "date": "2024-05-31T14:08:44Z"
            },
            {
                "name": "0.50.1",
                "date": "2024-05-09T12:03:00Z"
            },
            {
                "name": "0.50.0",
                "date": "2024-04-30T12:24:42Z"
            },
            {
                "name": "0.49.0",
                "date": "2024-03-29T08:53:23Z"
            },
            {
                "name": "0.48.0",
                "date": "2024-02-28T12:27:54Z"
            },
            {
                "name": "0.47.0",
                "date": "2024-01-31T11:53:21Z"
            },
            {
                "name": "0.46.0",
                "date": "2024-01-06T22:28:55Z"
            },
            {
                "name": "0.45.0",
                "date": "2023-11-29T14:22:20Z"
            },
            {
                "name": "0.44.1",
                "date": "2023-10-30T18:37:01Z"
            },
            {
                "name": "0.44.0",
                "date": "2023-09-27T04:39:10Z"
            },
            {
                "name": "0.43.0",
                "date": "2023-08-30T09:31:10Z"
            },
            {
                "name": "0.42.1",
                "date": "2023-08-22T09:54:32Z"
            },
            {
                "name": "0.42.0",
                "date": "2023-07-31T08:13:35Z"
            },
            {
                "name": "Release 0.41.1",
                "date": "2022-11-14T22:30:03Z"
            },
            {
                "name": "Release 0.40.1",
                "date": "2022-10-24T13:42:19Z"
            },
            {
                "name": "Release 0.39.2",
                "date": "2022-08-03T21:29:42Z"
            },
            {
                "name": "Realease 0.39.1",
                "date": "2022-08-01T15:26:27Z"
            },
            {
                "name": "Realease 0.38.2",
                "date": "2022-04-19T22:06:58Z"
            },
            {
                "name": "Release 0.38.1",
                "date": "2022-04-12T07:50:16Z"
            },
            {
                "name": "Release 0.37.3",
                "date": "2022-02-19T09:06:36Z"
            },
            {
                "name": "Release 0.37.2",
                "date": "2021-12-28T15:06:07Z"
            },
            {
                "name": "Release 0.37.1",
                "date": "2021-12-27T23:03:25Z"
            },
            {
                "name": "Release 0.36.2",
                "date": "2021-11-08T20:46:18Z"
            },
            {
                "name": "Release 0.36.1",
                "date": "2021-11-05T11:22:54Z"
            },
            {
                "name": "Release 0.35.3",
                "date": "2021-10-20T08:03:41Z"
            },
            {
                "name": "Release 0.35.2",
                "date": "2021-10-11T21:01:50Z"
            },
            {
                "name": "Release 0.35.1",
                "date": "2021-09-22T19:21:46Z"
            },
            {
                "name": "Release 0.34.2",
                "date": "2021-09-14T23:52:02Z"
            },
            {
                "name": "Release 0.34.1",
                "date": "2021-09-01T17:07:24Z"
            },
            {
                "name": "Release 0.33.1",
                "date": "2021-08-08T20:50:05Z"
            },
            {
                "name": "Release 0.32.1",
                "date": "2021-06-04T22:42:40Z"
            },
            {
                "name": "Release 0.31.1",
                "date": "2021-04-25T19:33:10Z"
            },
            {
                "name": "Release 0.30.2",
                "date": "2021-04-14T19:49:34Z"
            },
            {
                "name": "Release 0.30.1",
                "date": "2021-04-02T11:25:25Z"
            },
            {
                "name": "Release 0.29.1",
                "date": "2021-01-27T16:50:27Z"
            },
            {
                "name": "Release 0.28.1",
                "date": "2020-10-14T23:04:15Z"
            },
            {
                "name": "Release 0.27.1",
                "date": "2020-10-16T22:35:24Z"
            },
            {
                "name": "Release 0.26.2",
                "date": "2020-10-16T22:34:52Z"
            },
            {
                "name": "Release 0.26.1",
                "date": "2020-10-16T22:34:25Z"
            },
            {
                "name": "Release 0.25.1",
                "date": "2020-05-25T17:49:56Z"
            },
            {
                "name": "Release 0.21.1",
                "date": "2020-02-08T12:28:45Z"
            },
            {
                "name": "0.14.1",
                "date": "2019-06-03T12:11:44Z"
            },
            {
                "name": "0.13.7",
                "date": "2019-06-03T12:11:14Z"
            }
        ]
    }
}