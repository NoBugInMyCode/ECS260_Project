{
    "https://api.github.com/repos/jsonmodel/jsonmodel": {
        "forks": 1045,
        "watchers": 6851,
        "stars": 6851,
        "languages": {
            "Objective-C": 119796,
            "Ruby": 745
        },
        "commits": [
            "2018-09-19T12:40:11Z",
            "2018-09-19T12:34:34Z",
            "2018-02-01T10:26:52Z",
            "2018-01-29T13:12:01Z",
            "2018-01-26T14:02:26Z",
            "2017-09-29T07:06:06Z",
            "2017-07-06T09:29:10Z",
            "2017-04-29T10:29:02Z",
            "2017-03-30T09:35:59Z",
            "2017-03-28T15:17:00Z",
            "2017-03-24T12:29:01Z",
            "2017-02-23T15:14:27Z",
            "2017-02-21T11:48:52Z",
            "2016-10-28T21:58:21Z",
            "2016-10-07T15:28:31Z",
            "2016-10-07T12:56:09Z",
            "2016-10-07T12:52:34Z",
            "2016-10-07T12:37:29Z",
            "2016-10-07T12:36:35Z",
            "2016-10-07T12:34:35Z",
            "2016-10-07T12:27:39Z",
            "2016-10-07T12:27:26Z",
            "2016-10-05T17:05:51Z",
            "2016-10-05T16:59:01Z",
            "2016-09-12T13:04:51Z",
            "2016-09-12T09:51:13Z",
            "2016-09-12T09:44:58Z",
            "2016-09-12T09:42:28Z",
            "2016-09-12T09:40:44Z",
            "2016-09-12T09:26:14Z"
        ],
        "creation_date": "2012-12-02T17:19:21Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 259,
        "readme": "# JSONModel - Magical Data Modeling Framework for JSON\n\nJSONModel allows rapid creation of smart data models. You can use it in your\niOS, macOS, watchOS and tvOS apps. Automatic introspection of your model classes\nand JSON input drastically reduces the amount of code you have to write.\n\nSee [CHANGELOG.md](CHANGELOG.md) for details on changes.\n\n## Installation\n\n### CocoaPods\n\n```ruby\npod 'JSONModel'\n```\n\n### Carthage\n\n```ruby\ngithub \"jsonmodel/jsonmodel\"\n```\n\n### Manual\n\n0. download the JSONModel repository\n0. copy the JSONModel sub-folder into your Xcode project\n0. link your app to SystemConfiguration.framework\n\n## Basic Usage\n\nConsider you have JSON like this:\n\n```json\n{ \"id\": 10, \"country\": \"Germany\", \"dialCode\": 49, \"isInEurope\": true }\n```\n\n- create a JSONModel subclass for your data model\n- declare properties in your header file with the name of the JSON keys:\n\n```objc\n@interface CountryModel : JSONModel\n@property (nonatomic) NSInteger id;\n@property (nonatomic) NSString *country;\n@property (nonatomic) NSString *dialCode;\n@property (nonatomic) BOOL isInEurope;\n@end\n```\n\nThere's no need to do anything in the implementation (`.m`) file.\n\n- initialize your model with data:\n\n```objc\nNSError *error;\nCountryModel *country = [[CountryModel alloc] initWithString:myJson error:&error];\n```\n\nIf the validation of the JSON passes. you have all the corresponding properties\nin your model populated from the JSON. JSONModel will also try to convert as\nmuch data to the types you expect. In the example above it will:\n\n- convert `id` from string (in the JSON) to an `int` for your class\n- copy the `country` value\n- convert `dialCode` from a number (in the JSON) to an `NSString` value\n- copy the `isInEurope` value\n\nAll you have to do is define the properties and their expected types.\n\n## Examples\n\n### Automatic name based mapping\n\n```json\n{\n\t\"id\": 123,\n\t\"name\": \"Product name\",\n\t\"price\": 12.95\n}\n```\n\n```objc\n@interface ProductModel : JSONModel\n@property (nonatomic) NSInteger id;\n@property (nonatomic) NSString *name;\n@property (nonatomic) float price;\n@end\n```\n\n### Model cascading (models including other models)\n\n```json\n{\n\t\"orderId\": 104,\n\t\"totalPrice\": 13.45,\n\t\"product\": {\n\t\t\"id\": 123,\n\t\t\"name\": \"Product name\",\n\t\t\"price\": 12.95\n\t}\n}\n```\n\n```objc\n@interface ProductModel : JSONModel\n@property (nonatomic) NSInteger id;\n@property (nonatomic) NSString *name;\n@property (nonatomic) float price;\n@end\n\n@interface OrderModel : JSONModel\n@property (nonatomic) NSInteger orderId;\n@property (nonatomic) float totalPrice;\n@property (nonatomic) ProductModel *product;\n@end\n```\n\n### Model collections\n\n```json\n{\n\t\"orderId\": 104,\n\t\"totalPrice\": 103.45,\n\t\"products\": [\n\t\t{\n\t\t\t\"id\": 123,\n\t\t\t\"name\": \"Product #1\",\n\t\t\t\"price\": 12.95\n\t\t},\n\t\t{\n\t\t\t\"id\": 137,\n\t\t\t\"name\": \"Product #2\",\n\t\t\t\"price\": 82.95\n\t\t}\n\t]\n}\n```\n\n```objc\n@protocol ProductModel;\n\n@interface ProductModel : JSONModel\n@property (nonatomic) NSInteger id;\n@property (nonatomic) NSString *name;\n@property (nonatomic) float price;\n@end\n\n@interface OrderModel : JSONModel\n@property (nonatomic) NSInteger orderId;\n@property (nonatomic) float totalPrice;\n@property (nonatomic) NSArray <ProductModel> *products;\n@end\n```\n\nNote: the angle brackets after `NSArray` contain a protocol. This is not the\nsame as the Objective-C generics system. They are not mutually exclusive, but\nfor JSONModel to work, the protocol must be in place.\n\nAlso property can have generics info for compiler\n```objc\n@interface OrderModel : JSONModel\n@property (nonatomic) NSInteger orderId;\n@property (nonatomic) float totalPrice;\n@property (nonatomic) NSArray<ProductModel *> <ProductModel> *products;\n@end\n```\n\n### Nested key mapping\n\n```json\n{\n\t\"orderId\": 104,\n\t\"orderDetails\": {\n\t\t\"name\": \"Product #1\",\n\t\t\"price\": {\n\t\t\t\"usd\": 12.95\n\t\t}\n\t}\n}\n```\n\n```objc\n@interface OrderModel : JSONModel\n@property (nonatomic) NSInteger id;\n@property (nonatomic) NSString *productName;\n@property (nonatomic) float price;\n@end\n\n@implementation OrderModel\n\n+ (JSONKeyMapper *)keyMapper\n{\n\treturn [[JSONKeyMapper alloc] initWithModelToJSONDictionary:@{\n\t\t@\"id\": @\"orderId\",\n\t\t@\"productName\": @\"orderDetails.name\",\n\t\t@\"price\": @\"orderDetails.price.usd\"\n\t}];\n}\n\n@end\n```\n\n### Map automatically to snake_case\n\n```json\n{\n\t\"order_id\": 104,\n\t\"order_product\": \"Product #1\",\n\t\"order_price\": 12.95\n}\n```\n\n```objc\n@interface OrderModel : JSONModel\n@property (nonatomic) NSInteger orderId;\n@property (nonatomic) NSString *orderProduct;\n@property (nonatomic) float orderPrice;\n@end\n\n@implementation OrderModel\n\n+ (JSONKeyMapper *)keyMapper\n{\n\treturn [JSONKeyMapper mapperForSnakeCase];\n}\n\n@end\n```\n\n### Optional properties (i.e. can be missing or null)\n\n```json\n{\n\t\"id\": 123,\n\t\"name\": null,\n\t\"price\": 12.95\n}\n```\n\n```objc\n@interface ProductModel : JSONModel\n@property (nonatomic) NSInteger id;\n@property (nonatomic) NSString <Optional> *name;\n@property (nonatomic) float price;\n@property (nonatomic) NSNumber <Optional> *uuid;\n@end\n```\n\n### Ignored properties (i.e. JSONModel completely ignores them)\n\n```json\n{\n\t\"id\": 123,\n\t\"name\": null\n}\n```\n\n```objc\n@interface ProductModel : JSONModel\n@property (nonatomic) NSInteger id;\n@property (nonatomic) NSString <Ignore> *customProperty;\n@end\n```\n\n### Making scalar types optional\n\n```json\n{\n\t\"id\": null\n}\n```\n\n```objc\n@interface ProductModel : JSONModel\n@property (nonatomic) NSInteger id;\n@end\n\n@implementation ProductModel\n\n+ (BOOL)propertyIsOptional:(NSString *)propertyName\n{\n\tif ([propertyName isEqualToString:@\"id\"])\n\t\treturn YES;\n\n\treturn NO;\n}\n\n@end\n```\n\n### Export model to `NSDictionary` or JSON\n\n```objc\nProductModel *pm = [ProductModel new];\npm.name = @\"Some Name\";\n\n// convert to dictionary\nNSDictionary *dict = [pm toDictionary];\n\n// convert to json\nNSString *string = [pm toJSONString];\n```\n\n### Custom data transformers\n\n```objc\n@interface JSONValueTransformer (CustomTransformer)\n@end\n\n@implementation JSONValueTransformer (CustomTransformer)\n\n- (NSDate *)NSDateFromNSString:(NSString *)string\n{\n\tNSDateFormatter *formatter = [NSDateFormatter new];\n\tformatter.dateFormat = APIDateFormat;\n\treturn [formatter dateFromString:string];\n}\n\n- (NSString *)JSONObjectFromNSDate:(NSDate *)date\n{\n\tNSDateFormatter *formatter = [NSDateFormatter new];\n\tformatter.dateFormat = APIDateFormat;\n\treturn [formatter stringFromDate:date];\n}\n\n@end\n```\n\n### Custom getters/setters\n\n```objc\n@interface ProductModel : JSONModel\n@property (nonatomic) NSInteger id;\n@property (nonatomic) NSString *name;\n@property (nonatomic) float price;\n@property (nonatomic) NSLocale *locale;\n@end\n\n@implementation ProductModel\n\n- (void)setLocaleWithNSString:(NSString *)string\n{\n\tself.locale = [NSLocale localeWithLocaleIdentifier:string];\n}\n\n- (void)setLocaleWithNSDictionary:(NSDictionary *)dictionary\n{\n\tself.locale = [NSLocale localeWithLocaleIdentifier:dictionary[@\"identifier\"]];\n}\n\n- (NSString *)JSONObjectForLocale\n{\n\treturn self.locale.localeIdentifier;\n}\n\n@end\n```\n\n### Custom JSON validation\n\n```objc\n\n@interface ProductModel : JSONModel\n@property (nonatomic) NSInteger id;\n@property (nonatomic) NSString *name;\n@property (nonatomic) float price;\n@property (nonatomic) NSLocale *locale;\n@property (nonatomic) NSNumber <Ignore> *minNameLength;\n@end\n\n@implementation ProductModel\n\n- (BOOL)validate:(NSError **)error\n{\n\tif (![super validate:error])\n\t\treturn NO;\n\n\tif (self.name.length < self.minNameLength.integerValue)\n\t{\n\t\t*error = [NSError errorWithDomain:@\"me.mycompany.com\" code:1 userInfo:nil];\n\t\treturn NO;\n\t}\n\n\treturn YES;\n}\n\n@end\n```\n\n## License\n\nMIT licensed - see [LICENSE](LICENSE) file.\n\n## Contributing\n\nWe love pull requests! See [CONTRIBUTING.md](CONTRIBUTING.md) for full details.\n",
        "releases": [
            {
                "name": "v1.7.0",
                "date": "2016-10-07T12:38:33Z"
            },
            {
                "name": "v1.6.0",
                "date": "2016-10-05T17:08:52Z"
            },
            {
                "name": "v1.5.1",
                "date": "2016-09-12T09:49:36Z"
            },
            {
                "name": "v1.5.0",
                "date": "2016-09-12T09:49:20Z"
            },
            {
                "name": "v1.4.2",
                "date": "2016-09-12T09:49:05Z"
            },
            {
                "name": "v1.4.1",
                "date": "2016-09-12T09:48:17Z"
            },
            {
                "name": "v1.4.0",
                "date": "2016-09-12T09:47:40Z"
            },
            {
                "name": "v1.3.0",
                "date": "2016-07-22T13:37:49Z"
            },
            {
                "name": "v1.2.0",
                "date": "2016-07-22T13:38:10Z"
            }
        ]
    }
}