{
    "https://api.github.com/repos/ftlabs/fastclick": {
        "forks": 3218,
        "watchers": 18635,
        "stars": 18635,
        "languages": {
            "HTML": 83172,
            "JavaScript": 25999,
            "Makefile": 749
        },
        "commits": [
            "2021-02-12T15:32:38Z",
            "2019-02-14T15:27:20Z",
            "2019-02-14T15:27:06Z",
            "2017-10-07T22:03:35Z",
            "2017-10-07T21:58:33Z",
            "2017-10-07T21:56:52Z",
            "2017-10-07T21:56:22Z",
            "2017-03-03T09:00:17Z",
            "2016-08-29T22:38:26Z",
            "2016-08-01T22:27:37Z",
            "2016-06-28T16:44:02Z",
            "2016-04-26T09:56:16Z",
            "2016-04-21T10:29:42Z",
            "2015-01-26T21:19:01Z",
            "2015-01-26T21:18:22Z",
            "2015-01-26T21:14:58Z",
            "2015-01-25T18:20:51Z",
            "2015-01-25T18:05:26Z",
            "2015-01-25T18:05:04Z",
            "2015-01-25T17:55:40Z",
            "2015-01-18T00:03:57Z",
            "2015-01-08T16:28:11Z",
            "2015-01-06T11:23:34Z",
            "2014-12-16T19:55:36Z",
            "2014-12-16T18:54:46Z",
            "2014-12-06T00:10:51Z",
            "2014-11-27T13:29:25Z",
            "2014-11-25T11:06:36Z",
            "2014-11-23T18:47:08Z",
            "2014-11-23T18:37:09Z"
        ],
        "creation_date": "2012-02-13T08:38:00Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 487,
        "readme": "# FastClick #\n\nFastClick is a simple, easy-to-use library for eliminating the 300ms delay between a physical tap and the firing of a `click` event on mobile browsers. The aim is to make your application feel less laggy and more responsive while avoiding any interference with your current logic.\n\nFastClick is developed by [FT Labs](http://labs.ft.com/), part of the Financial Times.\n\n*Note: As of late 2015 most mobile browsers - notably Chrome and Safari - no longer have a 300ms touch delay, so fastclick offers no benefit on newer browsers, and risks introducing [bugs](https://github.com/ftlabs/fastclick/issues) into your application. Consider carefully whether you really need to use it.*\n\n[Explication en fran\u00e7ais](http://maxime.sh/2013/02/supprimer-le-lag-des-clics-sur-mobile-avec-fastclick/).\n\n[\u65e5\u672c\u8a9e\u3067\u8aac\u660e](https://developer.mozilla.org/ja/docs/Mozilla/Firefox_OS/Apps/Tips_and_techniques#Make_events_immediate)\u3002\n\n## Why does the delay exist? ##\n\nAccording to [Google](https://developers.google.com/mobile/articles/fast_buttons):\n\n> ...mobile browsers will wait approximately 300ms from the time that you tap the button to fire the click event. The reason for this is that the browser is waiting to see if you are actually performing a double tap.\n\n## Compatibility ##\n\nThe library has been deployed as part of the [FT Web App](http://app.ft.com/) and is tried and tested on the following mobile browsers:\n\n* Mobile Safari on iOS 3 and upwards\n* Chrome on iOS 5 and upwards\n* Chrome on Android (ICS)\n* Opera Mobile 11.5 and upwards\n* Android Browser since Android 2\n* PlayBook OS 1 and upwards\n\n## When it isn't needed ##\n\nFastClick doesn't attach any listeners on desktop browsers.\n\nChrome 32+ on Android with `width=device-width` in the [viewport meta tag](https://developer.mozilla.org/en-US/docs/Mobile/Viewport_meta_tag) doesn't have a 300ms delay, therefore listeners aren't attached.\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n```\n\nSame goes for Chrome on Android (all versions) with `user-scalable=no` in the viewport meta tag. But be aware that `user-scalable=no` also disables pinch zooming, which may be an accessibility concern.\n\nFor IE11+, you can use `touch-action: manipulation;` to disable double-tap-to-zoom on certain elements (like links and buttons).  For IE10 use `-ms-touch-action: manipulation`.\n\n## Usage ##\n\nInclude fastclick.js in your JavaScript bundle or add it to your HTML page like this:\n\n```html\n<script type='application/javascript' src='/path/to/fastclick.js'></script>\n```\n\nThe script must be loaded prior to instantiating FastClick on any element of the page.\n\nTo instantiate FastClick on the `body`, which is the recommended method of use:\n\n```js\nif ('addEventListener' in document) {\n\tdocument.addEventListener('DOMContentLoaded', function() {\n\t\tFastClick.attach(document.body);\n\t}, false);\n}\n```\n\nOr, if you're using jQuery:\n\n```js\n$(function() {\n\tFastClick.attach(document.body);\n});\n```\n\nIf you're using Browserify or another CommonJS-style module system, the `FastClick.attach` function will be returned when you call `require('fastclick')`. As a result, the easiest way to use FastClick with these loaders is as follows:\n\n```js\nvar attachFastClick = require('fastclick');\nattachFastClick(document.body);\n```\n\n### Minified ###\n\nRun `make` to build a minified version of FastClick using the Closure Compiler REST API. The minified file is saved to `build/fastclick.min.js` or you can [download a pre-minified version](https://origami-build.ft.com/bundles/js?modules=fastclick).\n\nNote: the pre-minified version is built using [our build service](http://origami.ft.com/docs/developer-guide/build-service/) which exposes the `FastClick` object through `Origami.fastclick` and will have the Browserify/CommonJS API (see above).\n\n```js\nvar attachFastClick = Origami.fastclick;\nattachFastClick(document.body);\n```\n\n### AMD ###\n\nFastClick has AMD (Asynchronous Module Definition) support. This allows it to be lazy-loaded with an AMD loader, such as [RequireJS](http://requirejs.org/). Note that when using the AMD style require, the full `FastClick` object will be returned, _not_ `FastClick.attach`\n\n```js\nvar FastClick = require('fastclick');\nFastClick.attach(document.body, options);\n```\n\n### Package managers ###\n\nYou can install FastClick using [Component](https://github.com/component/component), [npm](https://npmjs.org/package/fastclick) or [Bower](http://bower.io/).\n\nFor Ruby, there's a third-party gem called [fastclick-rails](http://rubygems.org/gems/fastclick-rails). For .NET there's a [NuGet package](http://nuget.org/packages/FastClick).\n\n## Advanced ##\n\n### Ignore certain elements with `needsclick` ###\n\nSometimes you need FastClick to ignore certain elements. You can do this easily by adding the `needsclick` class.\n```html\n<a class=\"needsclick\">Ignored by FastClick</a>\n```\n\n#### Use case 1: non-synthetic click required ####\n\nInternally, FastClick uses `document.createEvent` to fire a synthetic `click` event as soon as `touchend` is fired by the browser. It then suppresses the additional `click` event created by the browser after that. In some cases, the non-synthetic `click` event created by the browser is required, as described in the [triggering focus example](http://ftlabs.github.com/fastclick/examples/focus.html).\n\nThis is where the `needsclick` class comes in. Add the class to any element that requires a non-synthetic click.\n\n#### Use case 2: Twitter Bootstrap 2.2.2 dropdowns ####\n\nAnother example of when to use the `needsclick` class is with dropdowns in Twitter Bootstrap 2.2.2. Bootstrap add its own `touchstart` listener for dropdowns, so you want to tell FastClick to ignore those. If you don't, touch devices will automatically close the dropdown as soon as it is clicked, because both FastClick and Bootstrap execute the synthetic click, one opens the dropdown, the second closes it immediately after.\n\n```html\n<a class=\"dropdown-toggle needsclick\" data-toggle=\"dropdown\">Dropdown</a>\n```\n\n## Examples ##\n\nFastClick is designed to cope with many different browser oddities. Here are some examples to illustrate this:\n\n* [basic use](http://ftlabs.github.com/fastclick/examples/layer.html) showing the increase in perceived responsiveness\n* [triggering focus](http://ftlabs.github.com/fastclick/examples/focus.html) on an input element from a `click` handler\n* [input element](http://ftlabs.github.com/fastclick/examples/input.html) which never receives clicks but gets fast focus\n\n## Tests ##\n\nThere are no automated tests. The files in `tests/` are manual reduced test cases. We've had a think about how best to test these cases, but they tend to be very browser/device specific and sometimes subjective which means it's not so trivial to test.\n\n## Credits and collaboration ##\n\nFastClick is maintained by [Rowan Beentje](http://twitter.com/rowanbeentje), [Matthew Caruana Galizia](http://twitter.com/mcaruanagalizia) and [Matthew Andrews](http://twitter.com/andrewsmatt) at [FT Labs](http://labs.ft.com). All open source code released by FT Labs is licenced under the MIT licence. We welcome comments, feedback and suggestions.  Please feel free to raise an issue or pull request.\n",
        "releases": [
            {
                "name": "Fix various Firefox bugs by disabling FastClick in Firefox 27+",
                "date": "2015-01-26T21:20:22Z"
            },
            {
                "name": "Fix bug: \u2018Windows Phone 8.1: select and input elements not usable\u2019 #304",
                "date": "2015-01-25T18:06:43Z"
            },
            {
                "name": "Lots of bug fixes",
                "date": "2015-01-25T18:14:19Z"
            }
        ]
    }
}