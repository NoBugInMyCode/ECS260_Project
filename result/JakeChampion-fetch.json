{
    "https://api.github.com/repos/JakeChampion/fetch": {
        "forks": 2840,
        "watchers": 25758,
        "stars": 25758,
        "languages": {
            "JavaScript": 79156,
            "Makefile": 425
        },
        "commits": [
            "2024-04-08T10:02:11Z",
            "2024-01-25T14:28:24Z",
            "2024-01-18T10:34:31Z",
            "2024-01-11T13:16:19Z",
            "2023-12-22T23:58:51Z",
            "2023-12-19T14:07:41Z",
            "2023-12-16T18:15:07Z",
            "2023-12-14T05:36:53Z",
            "2023-12-13T23:12:18Z",
            "2023-12-13T00:41:31Z",
            "2023-12-13T00:40:28Z",
            "2023-12-13T00:40:14Z",
            "2023-12-11T23:01:11Z",
            "2023-12-04T16:32:40Z",
            "2023-11-25T22:39:18Z",
            "2023-11-17T21:47:40Z",
            "2023-11-10T21:32:39Z",
            "2023-11-07T07:18:38Z",
            "2023-10-30T10:40:55Z",
            "2023-10-24T11:43:47Z",
            "2023-10-23T12:50:11Z",
            "2023-10-18T09:33:29Z",
            "2023-10-16T10:07:19Z",
            "2023-10-13T12:46:52Z",
            "2023-10-10T11:17:18Z",
            "2023-10-09T09:36:29Z",
            "2023-09-29T00:36:42Z",
            "2023-09-28T13:04:05Z",
            "2023-09-25T20:10:59Z",
            "2023-09-25T20:05:47Z"
        ],
        "creation_date": "2014-10-13T00:26:19Z",
        "contributors": 30,
        "topics": [
            "fetch",
            "javascript",
            "polyfill",
            "promise"
        ],
        "subscribers": 621,
        "readme": "# window.fetch polyfill\n\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/JakeChampion/fetch/badge)](https://securityscorecards.dev/viewer/?uri=github.com/JakeChampion/fetch)\n\nThe `fetch()` function is a Promise-based mechanism for programmatically making\nweb requests in the browser. This project is a polyfill that implements a subset\nof the standard [Fetch specification][], enough to make `fetch` a viable\nreplacement for most uses of XMLHttpRequest in traditional web applications.\n\n## Table of Contents\n\n* [Read this first](#read-this-first)\n* [Installation](#installation)\n* [Usage](#usage)\n  * [Importing](#importing)\n  * [HTML](#html)\n  * [JSON](#json)\n  * [Response metadata](#response-metadata)\n  * [Post form](#post-form)\n  * [Post JSON](#post-json)\n  * [File upload](#file-upload)\n  * [Caveats](#caveats)\n    * [Handling HTTP error statuses](#handling-http-error-statuses)\n    * [Sending cookies](#sending-cookies)\n    * [Receiving cookies](#receiving-cookies)\n    * [Redirect modes](#redirect-modes)\n    * [Obtaining the Response URL](#obtaining-the-response-url)\n    * [Aborting requests](#aborting-requests)\n* [Browser Support](#browser-support)\n\n## Read this first\n\n* If you believe you found a bug with how `fetch` behaves in your browser,\n  please **don't open an issue in this repository** unless you are testing in\n  an old version of a browser that doesn't support `window.fetch` natively.\n  Make sure you read this _entire_ readme, especially the [Caveats](#caveats)\n  section, as there's probably a known work-around for an issue you've found.\n  This project is a _polyfill_, and since all modern browsers now implement the\n  `fetch` function natively, **no code from this project** actually takes any\n  effect there. See [Browser support](#browser-support) for detailed\n  information.\n\n* If you have trouble **making a request to another domain** (a different\n  subdomain or port number also constitutes another domain), please familiarize\n  yourself with all the intricacies and limitations of [CORS][] requests.\n  Because CORS requires participation of the server by implementing specific\n  HTTP response headers, it is often nontrivial to set up or debug. CORS is\n  exclusively handled by the browser's internal mechanisms which this polyfill\n  cannot influence.\n\n* This project **doesn't work under Node.js environments**. It's meant for web\n  browsers only. You should ensure that your application doesn't try to package\n  and run this on the server.\n\n* If you have an idea for a new feature of `fetch`, **submit your feature\n  requests** to the [specification's repository](https://github.com/whatwg/fetch/issues).\n  We only add features and APIs that are part of the [Fetch specification][].\n\n## Installation\n\n```\nnpm install whatwg-fetch --save\n```\n\nYou will also need a Promise polyfill for [older browsers](https://caniuse.com/promises).\nWe recommend [taylorhakes/promise-polyfill](https://github.com/taylorhakes/promise-polyfill)\nfor its small size and Promises/A+ compatibility.\n\n## Usage\n\n### Importing\n\nImporting will automatically polyfill `window.fetch` and related APIs:\n\n```javascript\nimport 'whatwg-fetch'\n\nwindow.fetch(...)\n```\n\nIf for some reason you need to access the polyfill implementation, it is\navailable via exports:\n\n```javascript\nimport {fetch as fetchPolyfill} from 'whatwg-fetch'\n\nwindow.fetch(...)   // use native browser version\nfetchPolyfill(...)  // use polyfill implementation\n```\n\nThis approach can be used to, for example, use [abort\nfunctionality](#aborting-requests) in browsers that implement a native but\noutdated version of fetch that doesn't support aborting.\n\nFor use with webpack, add this package in the `entry` configuration option\nbefore your application entry point:\n\n```javascript\nentry: ['whatwg-fetch', ...]\n```\n\n### HTML\n\n```javascript\nfetch('/users.html')\n  .then(function(response) {\n    return response.text()\n  }).then(function(body) {\n    document.body.innerHTML = body\n  })\n```\n\n### JSON\n\n```javascript\nfetch('/users.json')\n  .then(function(response) {\n    return response.json()\n  }).then(function(json) {\n    console.log('parsed json', json)\n  }).catch(function(ex) {\n    console.log('parsing failed', ex)\n  })\n```\n\n### Response metadata\n\n```javascript\nfetch('/users.json').then(function(response) {\n  console.log(response.headers.get('Content-Type'))\n  console.log(response.headers.get('Date'))\n  console.log(response.status)\n  console.log(response.statusText)\n})\n```\n\n### Post form\n\n```javascript\nvar form = document.querySelector('form')\n\nfetch('/users', {\n  method: 'POST',\n  body: new FormData(form)\n})\n```\n\n### Post JSON\n\n```javascript\nfetch('/users', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    name: 'Hubot',\n    login: 'hubot',\n  })\n})\n```\n\n### File upload\n\n```javascript\nvar input = document.querySelector('input[type=\"file\"]')\n\nvar data = new FormData()\ndata.append('file', input.files[0])\ndata.append('user', 'hubot')\n\nfetch('/avatars', {\n  method: 'POST',\n  body: data\n})\n```\n\n### Caveats\n\n* The Promise returned from `fetch()` **won't reject on HTTP error status**\n  even if the response is an HTTP 404 or 500. Instead, it will resolve normally,\n  and it will only reject on network failure or if anything prevented the\n  request from completing.\n\n* For maximum browser compatibility when it comes to sending & receiving\n  cookies, always supply the `credentials: 'same-origin'` option instead of\n  relying on the default. See [Sending cookies](#sending-cookies).\n\n* Not all Fetch standard options are supported in this polyfill. For instance,\n  [`redirect`](#redirect-modes) and\n  `cache` directives are ignored.\n  \n* `keepalive` is not supported because it would involve making a synchronous XHR, which is something this project is not willing to do. See [issue #700](https://github.com/github/fetch/issues/700#issuecomment-484188326) for more information.\n\n#### Handling HTTP error statuses\n\nTo have `fetch` Promise reject on HTTP error statuses, i.e. on any non-2xx\nstatus, define a custom response handler:\n\n```javascript\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response\n  } else {\n    var error = new Error(response.statusText)\n    error.response = response\n    throw error\n  }\n}\n\nfunction parseJSON(response) {\n  return response.json()\n}\n\nfetch('/users')\n  .then(checkStatus)\n  .then(parseJSON)\n  .then(function(data) {\n    console.log('request succeeded with JSON response', data)\n  }).catch(function(error) {\n    console.log('request failed', error)\n  })\n```\n\n#### Sending cookies\n\nFor [CORS][] requests, use `credentials: 'include'` to allow sending credentials\nto other domains:\n\n```javascript\nfetch('https://example.com:1234/users', {\n  credentials: 'include'\n})\n```\n\nThe default value for `credentials` is \"same-origin\".\n\nThe default for `credentials` wasn't always the same, though. The following\nversions of browsers implemented an older version of the fetch specification\nwhere the default was \"omit\":\n\n* Firefox 39-60\n* Chrome 42-67\n* Safari 10.1-11.1.2\n\nIf you target these browsers, it's advisable to always specify `credentials:\n'same-origin'` explicitly with all fetch requests instead of relying on the\ndefault:\n\n```javascript\nfetch('/users', {\n  credentials: 'same-origin'\n})\n```\n\nNote: due to [limitations of\nXMLHttpRequest](https://github.com/github/fetch/pull/56#issuecomment-68835992),\nusing `credentials: 'omit'` is not respected for same domains in browsers where\nthis polyfill is active. Cookies will always be sent to same domains in older\nbrowsers.\n\n#### Receiving cookies\n\nAs with XMLHttpRequest, the `Set-Cookie` response header returned from the\nserver is a [forbidden header name][] and therefore can't be programmatically\nread with `response.headers.get()`. Instead, it's the browser's responsibility\nto handle new cookies being set (if applicable to the current URL). Unless they\nare HTTP-only, new cookies will be available through `document.cookie`.\n\n#### Redirect modes\n\nThe Fetch specification defines these values for [the `redirect`\noption](https://fetch.spec.whatwg.org/#concept-request-redirect-mode): \"follow\"\n(the default), \"error\", and \"manual\".\n\nDue to limitations of XMLHttpRequest, only the \"follow\" mode is available in\nbrowsers where this polyfill is active.\n\n#### Obtaining the Response URL\n\nDue to limitations of XMLHttpRequest, the `response.url` value might not be\nreliable after HTTP redirects on older browsers.\n\nThe solution is to configure the server to set the response HTTP header\n`X-Request-URL` to the current URL after any redirect that might have happened.\nIt should be safe to set it unconditionally.\n\n``` ruby\n# Ruby on Rails controller example\nresponse.headers['X-Request-URL'] = request.url\n```\n\nThis server workaround is necessary if you need reliable `response.url` in\nFirefox < 32, Chrome < 37, Safari, or IE.\n\n#### Aborting requests\n\nThis polyfill supports\n[the abortable fetch API](https://developers.google.com/web/updates/2017/09/abortable-fetch).\nHowever, aborting a fetch requires use of two additional DOM APIs:\n[AbortController](https://developer.mozilla.org/en-US/docs/Web/API/AbortController) and\n[AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal).\nTypically, browsers that do not support fetch will also not support\nAbortController or AbortSignal. Consequently, you will need to include\n[an additional polyfill](https://www.npmjs.com/package/yet-another-abortcontroller-polyfill)\nfor these APIs to abort fetches:\n\n```js\nimport 'yet-another-abortcontroller-polyfill'\nimport {fetch} from 'whatwg-fetch'\n\n// use native browser implementation if it supports aborting\nconst abortableFetch = ('signal' in new Request('')) ? window.fetch : fetch\n\nconst controller = new AbortController()\n\nabortableFetch('/avatars', {\n  signal: controller.signal\n}).catch(function(ex) {\n  if (ex.name === 'AbortError') {\n    console.log('request aborted')\n  }\n})\n\n// some time later...\ncontroller.abort()\n```\n\n## Browser Support\n\n- Chrome\n- Firefox\n- Safari 6.1+\n- Internet Explorer 10+\n\nNote: modern browsers such as Chrome, Firefox, Microsoft Edge, and Safari contain native\nimplementations of `window.fetch`, therefore the code from this polyfill doesn't\nhave any effect on those browsers. If you believe you've encountered an error\nwith how `window.fetch` is implemented in any of these browsers, you should file\nan issue with that browser vendor instead of this project.\n\n\n  [fetch specification]: https://fetch.spec.whatwg.org\n  [cors]: https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\n    \"Cross-origin resource sharing\"\n  [csrf]: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet\n    \"Cross-site request forgery\"\n  [forbidden header name]: https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name\n  [releases]: https://github.com/github/fetch/releases\n",
        "releases": [
            {
                "name": "v3.6.20",
                "date": "2023-12-13T23:12:38Z"
            },
            {
                "name": "v3.6.19",
                "date": "2023-09-11T10:38:00Z"
            },
            {
                "name": "v3.6.18",
                "date": "2023-08-28T22:33:55Z"
            },
            {
                "name": "v3.6.17",
                "date": "2023-08-28T22:33:40Z"
            },
            {
                "name": "v3.6.16",
                "date": "2023-08-28T22:33:27Z"
            },
            {
                "name": "v3.6.15",
                "date": "2023-08-28T22:33:15Z"
            },
            {
                "name": "v3.6.14",
                "date": "2023-08-28T22:33:05Z"
            },
            {
                "name": "v3.6.13",
                "date": "2023-08-28T22:32:55Z"
            },
            {
                "name": "v3.6.12",
                "date": "2023-08-28T22:32:45Z"
            },
            {
                "name": "v3.6.11",
                "date": "2023-08-28T22:32:36Z"
            },
            {
                "name": "v3.6.10",
                "date": "2023-08-28T22:32:26Z"
            },
            {
                "name": "v3.6.9",
                "date": "2023-08-28T22:32:16Z"
            },
            {
                "name": "v3.6.8",
                "date": "2023-08-28T22:31:50Z"
            },
            {
                "name": "",
                "date": "2023-08-28T22:31:39Z"
            },
            {
                "name": "v3.6.6",
                "date": "2023-08-28T22:31:27Z"
            },
            {
                "name": "v3.6.5",
                "date": "2023-08-28T22:31:13Z"
            },
            {
                "name": "v3.6.4",
                "date": "2023-08-28T22:30:53Z"
            },
            {
                "name": "v3.6.3",
                "date": "2023-08-28T22:30:36Z"
            },
            {
                "name": "",
                "date": "2021-02-27T18:46:42Z"
            },
            {
                "name": "",
                "date": "2021-02-18T17:48:20Z"
            },
            {
                "name": "",
                "date": "2021-02-18T12:29:39Z"
            },
            {
                "name": "v3.5.0",
                "date": "2020-11-06T10:31:20Z"
            },
            {
                "name": "Republishing to ensure the dist/fetch.umd.js is up-to-date",
                "date": "2020-09-07T10:37:45Z"
            },
            {
                "name": "",
                "date": "2020-08-07T16:04:40Z"
            },
            {
                "name": "",
                "date": "2020-08-04T11:34:05Z"
            },
            {
                "name": "",
                "date": "2020-08-04T11:16:17Z"
            },
            {
                "name": "",
                "date": "2020-07-09T15:51:07Z"
            },
            {
                "name": "v3.1.1",
                "date": "2020-07-08T17:29:12Z"
            },
            {
                "name": "v3.1.0",
                "date": "2020-06-30T10:19:25Z"
            },
            {
                "name": "fetch 3.0.0",
                "date": "2018-09-07T13:22:22Z"
            },
            {
                "name": "fetch 2.0.4",
                "date": "2018-03-30T11:24:47Z"
            },
            {
                "name": "fetch 2.0.3",
                "date": "2017-03-02T17:50:12Z"
            },
            {
                "name": "fetch 2.0.2",
                "date": "2017-01-19T17:35:39Z"
            },
            {
                "name": "fetch 2.0.1",
                "date": "2016-11-17T16:20:53Z"
            },
            {
                "name": "fetch 1.1.1",
                "date": "2016-11-17T16:17:39Z"
            },
            {
                "name": "fetch 2.0.0",
                "date": "2016-11-14T19:56:39Z"
            },
            {
                "name": "fetch 1.1.0",
                "date": "2016-11-14T19:47:44Z"
            },
            {
                "name": "Fetch 0.11.1",
                "date": "2016-05-05T12:03:01Z"
            },
            {
                "name": "Fetch 1.0.0",
                "date": "2016-04-28T20:51:28Z"
            },
            {
                "name": "Fetch 0.11.0",
                "date": "2016-01-19T05:41:57Z"
            },
            {
                "name": "Fetch 0.10.1",
                "date": "2015-11-02T20:00:39Z"
            },
            {
                "name": "Fetch 0.10.0",
                "date": "2015-10-12T12:03:57Z"
            },
            {
                "name": "fetch 0.9.0",
                "date": "2015-05-30T12:49:55Z"
            },
            {
                "name": "fetch 0.8.2",
                "date": "2015-05-30T12:49:54Z"
            },
            {
                "name": "fetch 0.8.1",
                "date": "2015-05-30T13:08:22Z"
            },
            {
                "name": "fetch 0.8.0",
                "date": "2015-05-30T12:49:53Z"
            },
            {
                "name": "fetch 0.7.0",
                "date": "2015-05-30T12:49:21Z"
            },
            {
                "name": "fetch 0.6.1",
                "date": "2015-05-30T12:49:20Z"
            },
            {
                "name": "fetch 0.6.0",
                "date": "2015-05-30T12:49:19Z"
            },
            {
                "name": "fetch 0.5.0",
                "date": "2015-05-30T12:49:19Z"
            },
            {
                "name": "fetch 0.4.0",
                "date": "2015-05-30T12:46:21Z"
            },
            {
                "name": "fetch 0.3.2",
                "date": "2015-05-30T12:46:20Z"
            },
            {
                "name": "fetch 0.3.1",
                "date": "2015-05-30T12:46:20Z"
            },
            {
                "name": "fetch 0.3.0",
                "date": "2015-05-30T12:46:19Z"
            },
            {
                "name": "fetch 0.2.1",
                "date": "2015-05-30T12:46:18Z"
            },
            {
                "name": "fetch 0.2.0",
                "date": "2015-05-30T12:46:17Z"
            }
        ]
    }
}