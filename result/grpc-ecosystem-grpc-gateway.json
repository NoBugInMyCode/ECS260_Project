{
    "https://api.github.com/repos/grpc-ecosystem/grpc-gateway": {
        "forks": 2259,
        "watchers": 18422,
        "stars": 18422,
        "languages": {
            "Go": 1096541,
            "Starlark": 122132,
            "Makefile": 10328
        },
        "commits": [
            "2025-01-22T05:26:56Z",
            "2025-01-21T09:37:34Z",
            "2025-01-21T05:17:59Z",
            "2025-01-21T05:09:32Z",
            "2025-01-21T05:04:55Z",
            "2025-01-21T05:04:43Z",
            "2025-01-21T04:33:55Z",
            "2025-01-21T04:25:35Z",
            "2025-01-21T04:22:55Z",
            "2025-01-20T16:29:41Z",
            "2025-01-20T08:43:05Z",
            "2025-01-19T13:28:48Z",
            "2025-01-19T10:04:51Z",
            "2025-01-17T04:25:42Z",
            "2025-01-17T01:45:19Z",
            "2025-01-17T01:44:44Z",
            "2025-01-16T21:28:55Z",
            "2025-01-16T13:21:18Z",
            "2025-01-16T01:55:02Z",
            "2025-01-16T01:52:26Z",
            "2025-01-15T21:48:04Z",
            "2025-01-15T21:45:22Z",
            "2025-01-15T17:13:10Z",
            "2025-01-14T22:04:38Z",
            "2025-01-14T10:03:46Z",
            "2025-01-13T21:37:26Z",
            "2025-01-13T21:35:15Z",
            "2025-01-13T08:39:28Z",
            "2025-01-13T08:37:59Z",
            "2025-01-13T05:19:09Z"
        ],
        "creation_date": "2015-04-03T07:25:13Z",
        "contributors": 30,
        "topics": [
            "go",
            "grpc",
            "grpc-gateway",
            "openapi",
            "rest-api",
            "restful-api",
            "swagger"
        ],
        "subscribers": 281,
        "readme": "<div align=\"center\">\n<h1>gRPC-Gateway</h1>\n<p>\ngRPC to JSON proxy generator following the gRPC HTTP spec\n</p>\n<a href=\"https://github.com/grpc-ecosystem/grpc-gateway/actions/workflows/main.yml\"><img src=\"https://img.shields.io/github/workflow/status/grpc-ecosystem/grpc-gateway/main?color=379c9c&label=build&logo=github&logoColor=ffffff&style=flat-square\"/></a>\n<a href=\"https://app.slack.com/client/T029RQSE6/CBATURP1D\"><img src=\"https://img.shields.io/badge/slack-grpc--gateway-379c9c?logo=slack&logoColor=ffffff&style=flat-square\"/></a>\n<a href=\"https://github.com/grpc-ecosystem/grpc-gateway/blob/main/LICENSE\"><img src=\"https://img.shields.io/github/license/grpc-ecosystem/grpc-gateway?color=379c9c&style=flat-square\"/></a>\n<a href=\"https://github.com/grpc-ecosystem/grpc-gateway/releases\"><img src=\"https://img.shields.io/github/v/release/grpc-ecosystem/grpc-gateway?color=379c9c&logoColor=ffffff&style=flat-square\"/></a>\n<a href=\"https://github.com/grpc-ecosystem/grpc-gateway/stargazers\"><img src=\"https://img.shields.io/github/stars/grpc-ecosystem/grpc-gateway?color=379c9c&style=flat-square\"/></a>\n<a href=\"https://slsa.dev/images/gh-badge-level3.svg\"><img src=\"https://slsa.dev/images/gh-badge-level3.svg\"/></a>\n\n</div>\n\n## About\n\nThe gRPC-Gateway is a plugin of the Google protocol buffers compiler\n[protoc](https://github.com/protocolbuffers/protobuf).\nIt reads protobuf service definitions and generates a reverse-proxy server which\ntranslates a RESTful HTTP API into gRPC. This server is generated according to the\n[`google.api.http`](https://github.com/googleapis/googleapis/blob/master/google/api/http.proto#L46)\nannotations in your service definitions.\n\nThis helps you provide your APIs in both gRPC and RESTful style at the same time.\n\n<div align=\"center\">\n<img src=\"docs/assets/images/architecture_introduction_diagram.svg\" />\n</div>\n\n## Docs\n\nYou can read our docs at:\n\n- https://grpc-ecosystem.github.io/grpc-gateway/\n\n## Testimonials\n\n> We use the gRPC-Gateway to serve millions of API requests per day,\n> and have been since 2018 and through all of that,\n> we have never had any issues with it.\n>\n> _- William Mill, [Ad Hoc](http://adhocteam.us/)_\n\n## Background\n\ngRPC is great -- it generates API clients and server stubs in many programming\nlanguages, it is fast, easy-to-use, bandwidth-efficient and its design is\ncombat-proven by Google. However, you might still want to provide a traditional\nRESTful JSON API as well. Reasons can range from maintaining\nbackward-compatibility, supporting languages or clients that are not well supported by\ngRPC, to simply maintaining the aesthetics and tooling involved with a RESTful\nJSON architecture.\n\nThis project aims to provide that HTTP+JSON interface to your gRPC service.\nA small amount of configuration in your service to attach HTTP semantics is all\nthat's needed to generate a reverse-proxy with this library.\n\n## Installation\n\n### Compile from source\n\nThe following instructions assume you are using\n[Go Modules](https://go.dev/wiki/Modules) for dependency\nmanagement. Use a\n[tool dependency](https://go.dev/wiki/Modules#how-can-i-track-tool-dependencies-for-a-module)\nto track the versions of the following executable packages:\n\n```go\n// +build tools\n\npackage tools\n\nimport (\n    _ \"github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway\"\n    _ \"github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2\"\n    _ \"google.golang.org/grpc/cmd/protoc-gen-go-grpc\"\n    _ \"google.golang.org/protobuf/cmd/protoc-gen-go\"\n)\n```\n\nRun `go mod tidy` to resolve the versions. Install by running\n\n```sh\ngo install \\\n    github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway \\\n    github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2 \\\n    google.golang.org/protobuf/cmd/protoc-gen-go \\\n    google.golang.org/grpc/cmd/protoc-gen-go-grpc\n```\n\nThis will place four binaries in your `$GOBIN`;\n\n- `protoc-gen-grpc-gateway`\n- `protoc-gen-openapiv2`\n- `protoc-gen-go`\n- `protoc-gen-go-grpc`\n\nMake sure that your `$GOBIN` is in your `$PATH`.\n\n### Download the binaries\n\nYou may alternatively download the binaries from the [GitHub releases page](https://github.com/grpc-ecosystem/grpc-gateway/releases/latest).\nWe generate [SLSA3 signatures](slsa.dev) using the OpenSSF's [slsa-framework/slsa-github-generator](https://github.com/slsa-framework/slsa-github-generator) during the release process. To verify a release binary:\n\n1. Install the verification tool from [slsa-framework/slsa-verifier#installation](https://github.com/slsa-framework/slsa-verifier#installation).\n2. Download the provenance file `attestation.intoto.jsonl` from the [GitHub releases page](https://github.com/grpc-ecosystem/grpc-gateway/releases/latest).\n3. Run the verifier:\n\n```shell\nslsa-verifier -artifact-path <the-binary> -provenance attestation.intoto.jsonl -source github.com/grpc-ecosystem/grpc-gateway -tag <the-tag>\n```\n\nAlternatively, see the section on remotely managed plugin versions below.\n\n## Usage\n\n### 1.Define your [gRPC](https://grpc.io/docs/) service using protocol buffers\n\n`your_service.proto`:\n\n```protobuf\n syntax = \"proto3\";\n package your.service.v1;\n option go_package = \"github.com/yourorg/yourprotos/gen/go/your/service/v1\";\n\n message StringMessage {\n   string value = 1;\n }\n\n service YourService {\n   rpc Echo(StringMessage) returns (StringMessage) {}\n }\n```\n\n### 2. Generate gRPC stubs\n\nThis step generates the gRPC stubs that you can use to implement the service and consume from clients:\n\nHere's an example `buf.gen.yaml` you can use to generate the stubs with [buf](https://github.com/bufbuild/buf):\n\n```yaml\nversion: v2\nplugins:\n  - local: protoc-gen-go\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - local: protoc-gen-go-grpc\n    out: gen/go\n    opt:\n      - paths=source_relative\n```\n\nWith this file in place, you can generate your files using `buf generate`.\n\n> For a complete example of using `buf generate` to generate protobuf stubs, see\n> [the boilerplate repo](https://github.com/johanbrandhorst/grpc-gateway-boilerplate).\n> For more information on generating the stubs with buf, see\n> [the official documentation](https://docs.buf.build/generate-usage).\n\nIf you are using `protoc` to generate stubs, here's an example of what a command\nmight look like:\n\n```sh\nprotoc -I . \\\n    --go_out ./gen/go/ --go_opt paths=source_relative \\\n    --go-grpc_out ./gen/go/ --go-grpc_opt paths=source_relative \\\n    your/service/v1/your_service.proto\n```\n\n### 3. Implement your service in gRPC as usual.\n\n### 4. Generate reverse-proxy using `protoc-gen-grpc-gateway`\n\nAt this point, you have 3 options:\n\n- no further modifications, use the default mapping to HTTP semantics (method, path, etc.)\n  - this will work on any `.proto` file, but will not allow setting HTTP paths, request parameters or similar\n- additional `.proto` modifications to use a custom mapping\n  - relies on parameters in the `.proto` file to set custom HTTP mappings\n- no `.proto` modifications, but use an external configuration file\n  - relies on an external configuration file to set custom HTTP mappings\n  - mostly useful when the source proto file isn't under your control\n\n#### 1. Using the default mapping\n\nThis requires no additional modification to the `.proto` file but does require enabling a specific option when executing the plugin.\nThe `generate_unbound_methods` should be enabled.\n\nHere's what a `buf.gen.yaml` file might look like with this option enabled:\n\n```yaml\nversion: v2\nplugins:\n  - local: protoc-gen-go\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - local: protoc-gen-go-grpc\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - local: protoc-gen-grpc-gateway\n    out: gen/go\n    opt:\n      - paths=source_relative\n      - generate_unbound_methods=true\n```\n\nWith `protoc` (just the grpc-gateway stubs):\n\n```sh\nprotoc -I . --grpc-gateway_out ./gen/go \\\n    --grpc-gateway_opt paths=source_relative \\\n    --grpc-gateway_opt generate_unbound_methods=true \\\n    your/service/v1/your_service.proto\n```\n\n#### 2. With custom annotations\n\nAdd a [`google.api.http`](https://github.com/googleapis/googleapis/blob/master/google/api/http.proto#L46)\nannotation to your .proto file\n\n`your_service.proto`:\n\n```diff\n syntax = \"proto3\";\n package your.service.v1;\n option go_package = \"github.com/yourorg/yourprotos/gen/go/your/service/v1\";\n+\n+import \"google/api/annotations.proto\";\n+\n message StringMessage {\n   string value = 1;\n }\n\n service YourService {\n-  rpc Echo(StringMessage) returns (StringMessage) {}\n+  rpc Echo(StringMessage) returns (StringMessage) {\n+    option (google.api.http) = {\n+      post: \"/v1/example/echo\"\n+      body: \"*\"\n+    };\n+  }\n }\n```\n\n> You will need to provide the required third party protobuf files to the protobuf compiler.\n> If you are using [buf](https://github.com/bufbuild/buf), this dependency can\n> be added to the `deps` array in your `buf.yaml` under the name\n> `buf.build/googleapis/googleapis`:\n>\n> ```yaml\n> version: v2\n> name: buf.build/yourorg/myprotos\n> deps:\n>   - buf.build/googleapis/googleapis\n> ```\n>\n> Always run `buf dep update` after adding a dependency to your `buf.yaml`.\n\nSee [a_bit_of_everything.proto](examples/internal/proto/examplepb/a_bit_of_everything.proto)\nfor examples of more annotations you can add to customize gateway behavior\nand generated OpenAPI output.\n\nHere's what a `buf.gen.yaml` file might look like:\n\n```yaml\nversion: v2\nplugins:\n  - local: protoc-gen-go\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - local: protoc-gen-go-grpc\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - local: protoc-gen-grpc-gateway\n    out: gen/go\n    opt:\n      - paths=source_relative\n```\n\nIf you are using `protoc` to generate stubs, you need to ensure the required\ndependencies are available to the compiler at compile time. These can be found\nby manually cloning and copying the relevant files from the\n[googleapis repository](https://github.com/googleapis/googleapis), and providing\nthem to `protoc` when running. The files you will need are:\n\n```\ngoogle/api/annotations.proto\ngoogle/api/field_behavior.proto\ngoogle/api/http.proto\ngoogle/api/httpbody.proto\n```\n\nHere's what a `protoc` execution might look like:\n\n```sh\nprotoc -I . --grpc-gateway_out ./gen/go \\\n    --grpc-gateway_opt paths=source_relative \\\n    your/service/v1/your_service.proto\n```\n\n#### 3. External configuration\n\nIf you do not want to (or cannot) modify the proto file for use with gRPC-Gateway you can\nalternatively use an external\n[gRPC Service Configuration](https://cloud.google.com/endpoints/docs/grpc/grpc-service-config) file.\n[Check our documentation](https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/grpc_api_configuration/)\nfor more information. This is best combined with the `standalone=true` option\nto generate a file that can live in its own package, separate from the files\ngenerated by the source protobuf file.\n\nHere's what a `buf.gen.yaml` file might look like with this option enabled:\n\n```yaml\nversion: v2\nplugins:\n  - local: protoc-gen-go\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - local: protoc-gen-go-grpc\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - local: protoc-gen-grpc-gateway\n    out: gen/go\n    opt:\n      - paths=source_relative\n      - grpc_api_configuration=path/to/config.yaml\n      - standalone=true\n```\n\nWith `protoc` (just the grpc-gateway stubs):\n\n```sh\nprotoc -I . --grpc-gateway_out ./gen/go \\\n    --grpc-gateway_opt paths=source_relative \\\n    --grpc-gateway_opt grpc_api_configuration=path/to/config.yaml \\\n    --grpc-gateway_opt standalone=true \\\n    your/service/v1/your_service.proto\n```\n\n### 5. Write an entrypoint for the HTTP reverse-proxy server\n\n```go\npackage main\n\nimport (\n  \"context\"\n  \"flag\"\n  \"net/http\"\n\n  \"github.com/grpc-ecosystem/grpc-gateway/v2/runtime\"\n  \"google.golang.org/grpc\"\n  \"google.golang.org/grpc/credentials/insecure\"\n  \"google.golang.org/grpc/grpclog\"\n\n  gw \"github.com/yourorg/yourrepo/proto/gen/go/your/service/v1/your_service\"  // Update\n)\n\nvar (\n  // command-line options:\n  // gRPC server endpoint\n  grpcServerEndpoint = flag.String(\"grpc-server-endpoint\",  \"localhost:9090\", \"gRPC server endpoint\")\n)\n\nfunc run() error {\n  ctx := context.Background()\n  ctx, cancel := context.WithCancel(ctx)\n  defer cancel()\n\n  // Register gRPC server endpoint\n  // Note: Make sure the gRPC server is running properly and accessible\n  mux := runtime.NewServeMux()\n  opts := []grpc.DialOption{grpc.WithTransportCredentials(insecure.NewCredentials())}\n  err := gw.RegisterYourServiceHandlerFromEndpoint(ctx, mux,  *grpcServerEndpoint, opts)\n  if err != nil {\n    return err\n  }\n\n  // Start HTTP server (and proxy calls to gRPC server endpoint)\n  return http.ListenAndServe(\":8081\", mux)\n}\n\nfunc main() {\n  flag.Parse()\n\n  if err := run(); err != nil {\n    grpclog.Fatal(err)\n  }\n}\n```\n\n### 6. (Optional) Generate OpenAPI definitions using `protoc-gen-openapiv2`\n\nHere's what a `buf.gen.yaml` file might look like:\n\n```yaml\nversion: v2\nplugins:\n  - local: protoc-gen-go\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - local: protoc-gen-go-grpc\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - local: protoc-gen-grpc-gateway\n    out: gen/go\n    opt:\n      - paths=source_relative\n      - generate_unbound_methods=true\n  - local: protoc-gen-openapiv2\n    out: gen/go\n```\n\nTo use the custom protobuf annotations supported by `protoc-gen-openapiv2`, we need\nanother dependency added to our protobuf generation step. If you are using\n`buf`, you can add the `buf.build/grpc-ecosystem/grpc-gateway` dependency\nto your `deps` array:\n\n```yaml\nversion: v2\nname: buf.build/yourorg/myprotos\ndeps:\n  - buf.build/googleapis/googleapis\n  - buf.build/grpc-ecosystem/grpc-gateway\n```\n\nWith `protoc` (just the swagger file):\n\n```sh\nprotoc -I . --openapiv2_out ./gen/openapiv2 \\\n    your/service/v1/your_service.proto\n```\n\nIf you are using `protoc` to generate stubs, you will need to copy the protobuf\nfiles from the `protoc-gen-openapiv2/options` directory of this repository,\nand providing them to `protoc` when running.\n\nNote that this plugin also supports generating OpenAPI definitions for unannotated methods;\nuse the `generate_unbound_methods` option to enable this.\n\nIt is possible with the HTTP mapping for a gRPC service method to create duplicate mappings\nwith the only difference being constraints on the path parameter.\n\n`/v1/{name=projects/*}` and `/v1/{name=organizations/*}` both become `/v1/{name}`. When\nthis occurs the plugin will rename the path parameter with a \"\\_1\" (or \"\\_2\" etc) suffix\nto differentiate the different operations. So in the above example, the 2nd path would become\n`/v1/{name_1=organizations/*}`. This can also cause OpenAPI clients to URL encode the \"/\" that is\npart of the path parameter as that is what OpenAPI defines in the specification. To allow gRPC gateway to\naccept the URL encoded slash and still route the request, use the UnescapingModeAllCharacters or\nUnescapingModeLegacy (which is the default currently though may change in future versions). See\n[Customizing Your Gateway](https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/customizing_your_gateway/)\nfor more information.\n\n## Usage with remote plugins\n\nAs an alternative to all of the above, you can use `buf` with\n[remote plugins](https://buf.build/docs/bsr/remote-plugins/usage)\nto manage plugin versions and generation. An example `buf.gen.yaml` using remote\nplugin generation looks like this:\n\n```yaml\nversion: v2\nplugins:\n  - remote: buf.build/protocolbuffers/go:v1.31.0\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - remote: buf.build/grpc/go:v1.3.0\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - remote: buf.build/grpc-ecosystem/gateway:v2.16.2\n    out: gen/go\n    opt:\n      - paths=source_relative\n  - remote: buf.build/grpc-ecosystem/openapiv2:v2.16.2\n    out: gen/openapiv2\n```\n\nThis requires no local installation of any plugins. Be careful to use the same\nversion of the generator as the runtime library, i.e. if using `v2.16.2`, run\n\n```shell\n$ go get github.com/grpc-ecosystem/grpc-gateway/v2@v2.16.2\n```\n\nTo get the same version of the runtime in your `go.mod`.\n\nNote that usage of remote plugins is incompatible with usage of external configuration files like [grpc_api_configuration](https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/grpc_api_configuration/#using-an-external-configuration-file).\n\n## Video intro\n\nThis GopherCon UK 2019 presentation from our maintainer [@JohanBrandhorst](https://github.com/johanbrandhorst) provides a good intro to using the gRPC-Gateway. It uses the following boilerplate repo as a base: https://github.com/johanbrandhorst/grpc-gateway-boilerplate.\n\n<div align=\"center\">\n<a href=\"https://www.youtube.com/watch?v=Pq1paKC-fXk\">\n<img src=\"https://img.youtube.com/vi/Pq1paKC-fXk/0.jpg\" />\n</a>\n</div>\n\n## Parameters and flags\n\nWhen using `buf` to generate stubs, flags and parameters are passed through\nthe `opt` field in your `buf.gen.yaml` file, for example:\n\n```yaml\nversion: v2\nplugins:\n  - local: protoc-gen-grpc-gateway\n    out: gen/go\n    opt:\n      - paths=source_relative\n      - grpc_api_configuration=path/to/config.yaml\n      - standalone=true\n```\n\nDuring code generation with `protoc`, flags to gRPC-Gateway tools must be passed\nthrough `protoc` using one of 2 patterns:\n\n- as part of the `--<tool_suffix>_out` `protoc` parameter: `--<tool_suffix>_out=<flags>:<path>`\n\n```sh\n--grpc-gateway_out=repeated_path_param_separator=ssv:.\n--openapiv2_out=repeated_path_param_separator=ssv:.\n```\n\n- using additional `--<tool_suffix>_opt` parameters: `--<tool_suffix>_opt=<flag>[,<flag>]*`\n\n```sh\n--grpc-gateway_opt repeated_path_param_separator=ssv\n--openapiv2_opt repeated_path_param_separator=ssv\n```\n\n## More examples\n\nMore examples are available under the `examples` directory.\n\n- `proto/examplepb/echo_service.proto`, `proto/examplepb/a_bit_of_everything.proto`, `proto/examplepb/unannotated_echo_service.proto`: service definition\n  - `proto/examplepb/echo_service.pb.go`, `proto/examplepb/a_bit_of_everything.pb.go`, `proto/examplepb/unannotated_echo_service.pb.go`: [generated] stub of the service\n  - `proto/examplepb/echo_service.pb.gw.go`, `proto/examplepb/a_bit_of_everything.pb.gw.go`, `proto/examplepb/uannotated_echo_service.pb.gw.go`: [generated] reverse proxy for the service\n  - `proto/examplepb/unannotated_echo_service.yaml`: gRPC API Configuration for `unannotated_echo_service.proto`\n- `server/main.go`: service implementation\n- `main.go`: entrypoint of the generated reverse proxy\n\nTo use the same port for custom HTTP handlers (e.g. serving `swagger.json`),\ngRPC-Gateway, and a gRPC server, see\n[this example by CoreOS](https://github.com/philips/grpc-gateway-example/blob/master/cmd/serve.go)\n(and its accompanying [blog post](https://web.archive.org/web/20201112010739/https://coreos.com/blog/grpc-protobufs-swagger.html)).\n\n[This example by neiro.ai](https://github.com/mynalabsai/grpc_gateway_media_example) (and its accompanying [blog post](https://medium.com/neiro-ai/grpc-gateway-for-media-api-by-neiro-9033caab12c8)) shows how mediafiles using `multipart/form-data` can be integrated into rpc messages using a middleware.\n\n## Features\n\n### Supported\n\n- Generating JSON API handlers.\n- Method parameters in the request body.\n- Method parameters in the request path.\n- Method parameters in the query string.\n- Enum fields in the path parameter (including repeated enum fields).\n- Mapping streaming APIs to newline-delimited JSON streams.\n- Mapping HTTP headers with `Grpc-Metadata-` prefix to gRPC metadata (prefixed with `grpcgateway-`)\n- Optionally emitting API definitions for\n  [OpenAPI (Swagger) v2](https://swagger.io/docs/specification/2-0/basic-structure/).\n- Setting [gRPC timeouts](https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests)\n  through inbound HTTP `Grpc-Timeout` header.\n- Partial support for [gRPC API Configuration](https://cloud.google.com/endpoints/docs/grpc/grpc-service-config)\n  files as an alternative to annotation.\n- Automatically translating PATCH requests into Field Mask gRPC requests. See\n  [the docs](https://grpc-ecosystem.github.io/grpc-gateway/docs/mapping/patch_feature/)\n  for more information.\n\n### No plan to support\n\nBut patches are welcome.\n\n- Method parameters in HTTP headers.\n- Handling trailer metadata.\n- Encoding request/response body in XML.\n- True bi-directional streaming.\n\n## Mapping gRPC to HTTP\n\n- [How gRPC error codes map to HTTP status codes in the response](https://github.com/grpc-ecosystem/grpc-gateway/blob/main/runtime/errors.go#L15).\n- HTTP request source IP is added as `X-Forwarded-For` gRPC request header.\n- HTTP request host is added as `X-Forwarded-Host` gRPC request header.\n- HTTP `Authorization` header is added as `authorization` gRPC request header.\n- Remaining Permanent HTTP header keys (as specified by the IANA\n  [here](http://www.iana.org/assignments/message-headers/message-headers.xhtml))\n  are prefixed with `grpcgateway-` and added with their values to gRPC request\n  header.\n- HTTP headers that start with 'Grpc-Metadata-' are mapped to gRPC metadata\n  (prefixed with `grpcgateway-`).\n- While configurable, the default {un,}marshaling uses\n  [protojson](https://pkg.go.dev/google.golang.org/protobuf/encoding/protojson).\n- The path template used to map gRPC service methods to HTTP endpoints supports the [google.api.http](https://github.com/googleapis/googleapis/blob/master/google/api/http.proto)\n  path template syntax. For example, `/api/v1/{name=projects/*/topics/*}` or `/prefix/{path=organizations/**}`.\n\n## Contribution\n\nSee [CONTRIBUTING.md](http://github.com/grpc-ecosystem/grpc-gateway/blob/main/CONTRIBUTING.md).\n\n## License\n\ngRPC-Gateway is licensed under the BSD 3-Clause License.\nSee [LICENSE](https://github.com/grpc-ecosystem/grpc-gateway/blob/main/LICENSE) for more details.\n",
        "releases": [
            {
                "name": "v2.26.0",
                "date": "2025-01-21T05:08:23Z"
            },
            {
                "name": "v2.25.1",
                "date": "2024-12-20T04:28:39Z"
            },
            {
                "name": "v2.25.0",
                "date": "2024-12-20T03:45:40Z"
            },
            {
                "name": "v2.24.0",
                "date": "2024-11-22T19:45:29Z"
            },
            {
                "name": "v2.23.0",
                "date": "2024-11-01T18:43:11Z"
            },
            {
                "name": "v2.22.0",
                "date": "2024-08-16T21:45:29Z"
            },
            {
                "name": "v2.21.0",
                "date": "2024-07-25T22:25:24Z"
            },
            {
                "name": "v2.20.0",
                "date": "2024-05-15T20:22:01Z"
            },
            {
                "name": "v2.19.1",
                "date": "2024-01-29T19:08:04Z"
            },
            {
                "name": "v2.19.0",
                "date": "2024-01-03T19:57:19Z"
            },
            {
                "name": "v2.18.1",
                "date": "2023-11-06T22:03:47Z"
            },
            {
                "name": "v2.18.0",
                "date": "2023-09-10T18:56:37Z"
            },
            {
                "name": "v2.17.1",
                "date": "2023-08-25T17:31:23Z"
            },
            {
                "name": "v2.17.0",
                "date": "2023-08-22T21:59:51Z"
            },
            {
                "name": "v2.16.2",
                "date": "2023-07-28T17:57:18Z"
            },
            {
                "name": "v2.16.1",
                "date": "2023-07-24T21:22:34Z"
            },
            {
                "name": "v2.16.0",
                "date": "2023-06-01T01:03:21Z"
            },
            {
                "name": "v2.15.2",
                "date": "2023-02-28T05:04:47Z"
            },
            {
                "name": "v2.15.1",
                "date": "2023-02-22T20:00:57Z"
            },
            {
                "name": "v2.15.0",
                "date": "2022-12-21T18:06:37Z"
            },
            {
                "name": "v2.14.0",
                "date": "2022-11-15T22:44:52Z"
            },
            {
                "name": "v2.13.0",
                "date": "2022-11-01T22:12:20Z"
            },
            {
                "name": "v2.12.0",
                "date": "2022-10-17T17:02:30Z"
            },
            {
                "name": "v2.11.3",
                "date": "2022-08-23T20:44:50Z"
            },
            {
                "name": "v2.11.2",
                "date": "2022-08-06T08:41:06Z"
            },
            {
                "name": "v2.11.1",
                "date": "2022-07-30T02:53:48Z"
            },
            {
                "name": "v2.11.0",
                "date": "2022-07-19T22:54:56Z"
            },
            {
                "name": "v2.10.3",
                "date": "2022-06-01T13:46:31Z"
            },
            {
                "name": "v2.10.2",
                "date": "2022-05-23T22:53:29Z"
            },
            {
                "name": "v2.10.1",
                "date": "2022-05-20T00:10:43Z"
            },
            {
                "name": "v2.10.0",
                "date": "2022-03-21T20:42:42Z"
            },
            {
                "name": "v2.9.0",
                "date": "2022-03-18T01:29:01Z"
            },
            {
                "name": "v2.8.0",
                "date": "2022-03-02T17:58:02Z"
            },
            {
                "name": "v2.7.3",
                "date": "2022-01-20T02:27:34Z"
            },
            {
                "name": "v2.7.2",
                "date": "2021-12-16T01:09:03Z"
            },
            {
                "name": "v2.7.1",
                "date": "2021-12-02T03:30:25Z"
            },
            {
                "name": "v2.7.0",
                "date": "2021-11-20T15:15:37Z"
            },
            {
                "name": "v2.6.0",
                "date": "2021-09-08T00:55:25Z"
            },
            {
                "name": "v2.5.0",
                "date": "2021-06-22T01:53:28Z"
            },
            {
                "name": "v2.4.0",
                "date": "2021-04-28T00:08:06Z"
            },
            {
                "name": "v2.3.0",
                "date": "2021-02-25T18:33:18Z"
            },
            {
                "name": "v2.2.0",
                "date": "2021-02-09T17:56:33Z"
            },
            {
                "name": "v2.1.0",
                "date": "2021-01-07T11:47:31Z"
            },
            {
                "name": "v1.16.0",
                "date": "2020-10-28T10:30:46Z"
            },
            {
                "name": "v2.0.1",
                "date": "2020-10-21T10:16:51Z"
            },
            {
                "name": "v2.0.0",
                "date": "2020-10-14T08:16:00Z"
            },
            {
                "name": "v1.15.2",
                "date": "2020-10-10T14:46:03Z"
            },
            {
                "name": "v1.15.1",
                "date": "2020-10-10T14:44:42Z"
            },
            {
                "name": "v2.0.0-beta.5",
                "date": "2020-09-24T12:53:21Z"
            },
            {
                "name": "v1.15.0",
                "date": "2020-09-18T10:33:02Z"
            },
            {
                "name": "v1.14.8",
                "date": "2020-09-03T18:14:53Z"
            },
            {
                "name": "v1.14.7",
                "date": "2020-08-12T08:47:44Z"
            },
            {
                "name": "v2.0.0-beta.4",
                "date": "2020-08-10T10:20:09Z"
            },
            {
                "name": "v2.0.0-beta.3",
                "date": "2020-05-25T14:00:29Z"
            },
            {
                "name": "v2.0.0-beta.1",
                "date": "2020-05-25T10:50:57Z"
            },
            {
                "name": "v1.14.6",
                "date": "2020-05-25T10:51:51Z"
            },
            {
                "name": "v1.14.5",
                "date": "2020-05-08T17:53:13Z"
            },
            {
                "name": "v2.0.0-alpha.2, the first alpha release of v2",
                "date": "2020-04-18T23:17:09Z"
            },
            {
                "name": "v1.14.4",
                "date": "2020-04-18T15:26:27Z"
            },
            {
                "name": "v1.14.4-rc.1",
                "date": "2020-04-01T09:25:49Z"
            },
            {
                "name": "v1.14.3",
                "date": "2020-03-11T09:47:38Z"
            },
            {
                "name": "v1.14.2",
                "date": "2020-03-09T13:04:10Z"
            },
            {
                "name": "v1.14.1",
                "date": "2020-03-05T10:21:20Z"
            },
            {
                "name": "v1.14.0",
                "date": "2020-03-04T21:35:51Z"
            },
            {
                "name": "v1.13.0",
                "date": "2020-02-11T12:22:44Z"
            },
            {
                "name": "v1.12.2",
                "date": "2020-01-22T13:43:05Z"
            },
            {
                "name": "v1.12.1",
                "date": "2019-11-06T15:00:39Z"
            },
            {
                "name": "v1.12.0",
                "date": "2019-11-04T16:17:58Z"
            },
            {
                "name": "v1.11.3",
                "date": "2019-09-30T09:50:06Z"
            },
            {
                "name": "v1.11.2",
                "date": "2019-09-20T08:41:56Z"
            },
            {
                "name": "v1.11.1",
                "date": "2019-09-02T17:22:22Z"
            },
            {
                "name": "v1.11.0",
                "date": "2019-08-30T21:20:05Z"
            },
            {
                "name": "v1.10.0",
                "date": "2019-08-28T11:00:12Z"
            },
            {
                "name": "v1.9.6",
                "date": "2019-08-16T08:16:30Z"
            },
            {
                "name": "v1.9.5",
                "date": "2019-07-22T17:30:42Z"
            },
            {
                "name": "v1.9.4",
                "date": "2019-07-09T08:06:56Z"
            },
            {
                "name": "v1.9.3",
                "date": "2019-06-28T22:22:57Z"
            },
            {
                "name": "v1.9.2",
                "date": "2019-06-17T15:02:58Z"
            },
            {
                "name": "v1.9.1",
                "date": "2019-06-13T20:48:45Z"
            },
            {
                "name": "v1.9.0",
                "date": "2019-05-14T09:08:11Z"
            },
            {
                "name": "v1.8.6",
                "date": "2019-05-07T15:55:46Z"
            },
            {
                "name": "v1.8.5",
                "date": "2019-03-15T09:56:12Z"
            },
            {
                "name": "v1.8.4",
                "date": "2019-03-13T11:33:57Z"
            },
            {
                "name": "v1.8.3",
                "date": "2019-03-11T12:19:03Z"
            },
            {
                "name": "v1.8.2",
                "date": "2019-03-07T09:59:15Z"
            },
            {
                "name": "v1.8.1",
                "date": "2019-03-02T00:05:20Z"
            },
            {
                "name": "v1.8.1-pre1",
                "date": "2019-03-01T23:47:46Z"
            },
            {
                "name": "v1.8.0",
                "date": "2019-03-01T16:04:56Z"
            },
            {
                "name": "v1.7.0",
                "date": "2019-01-23T16:32:45Z"
            },
            {
                "name": "v1.6.4",
                "date": "2019-01-08T09:24:56Z"
            },
            {
                "name": "v1.6.3",
                "date": "2018-12-21T14:42:57Z"
            },
            {
                "name": "v1.6.2",
                "date": "2018-12-08T00:27:18Z"
            },
            {
                "name": "v1.6.1",
                "date": "2018-12-07T22:49:51Z"
            },
            {
                "name": "v1.6.0 with automatic Patch translation",
                "date": "2018-12-07T23:05:09Z"
            },
            {
                "name": "v1.5.1",
                "date": "2018-10-02T19:36:06Z"
            },
            {
                "name": "v1.5.0",
                "date": "2018-09-09T12:11:51Z"
            },
            {
                "name": "",
                "date": "2018-05-23T02:48:45Z"
            },
            {
                "name": "Version v1.4.0",
                "date": "2018-05-20T22:05:02Z"
            },
            {
                "name": "v1.3.1",
                "date": "2017-12-23T22:50:33Z"
            },
            {
                "name": "",
                "date": "2017-11-11T22:23:11Z"
            },
            {
                "name": "v1.3",
                "date": "2017-11-08T02:27:34Z"
            },
            {
                "name": "v1.2.2",
                "date": "2017-04-17T16:11:15Z"
            },
            {
                "name": "v1.2.1",
                "date": "2017-04-17T05:47:55Z"
            },
            {
                "name": "grpc-gateway v1.2.0",
                "date": "2017-03-31T02:42:49Z"
            },
            {
                "name": "grpc-gateway v1.2.0.rc1",
                "date": "2017-03-28T02:21:19Z"
            },
            {
                "name": "grpc-gateway v1.1.0",
                "date": "2016-07-23T12:47:23Z"
            },
            {
                "name": "Initial release",
                "date": "2016-07-11T00:54:56Z"
            }
        ]
    }
}