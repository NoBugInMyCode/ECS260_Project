{
    "https://api.github.com/repos/smartcontractkit/full-blockchain-solidity-course-py": {
        "forks": 2922,
        "watchers": 10886,
        "stars": 10886,
        "languages": {},
        "commits": [
            "2024-04-10T05:10:43Z",
            "2024-04-08T14:04:56Z",
            "2023-03-27T14:43:41Z",
            "2023-03-27T14:42:23Z",
            "2023-03-25T09:01:15Z",
            "2023-03-24T15:38:44Z",
            "2023-03-15T15:35:53Z",
            "2023-03-15T15:34:53Z",
            "2022-11-30T03:50:12Z",
            "2022-09-15T22:49:30Z",
            "2022-09-15T22:36:36Z",
            "2022-05-31T21:19:48Z",
            "2022-05-31T21:19:41Z",
            "2022-05-28T19:51:07Z",
            "2022-05-25T13:55:41Z",
            "2022-05-25T13:55:21Z",
            "2022-05-24T06:02:53Z",
            "2022-04-11T14:13:48Z",
            "2022-04-11T14:13:08Z",
            "2022-04-11T14:11:40Z",
            "2022-04-11T14:10:42Z",
            "2022-04-11T14:09:43Z",
            "2022-03-31T10:19:20Z",
            "2022-02-17T01:38:10Z",
            "2022-02-15T20:01:58Z",
            "2022-02-11T00:35:06Z",
            "2022-02-08T02:32:06Z",
            "2022-02-08T02:32:02Z",
            "2022-02-08T02:31:57Z",
            "2022-02-06T00:10:32Z"
        ],
        "creation_date": "2021-07-27T00:23:44Z",
        "contributors": 17,
        "topics": [
            "blockchain",
            "chainlink",
            "dapp",
            "ethereum",
            "smart-contracts",
            "solidity",
            "web3"
        ],
        "subscribers": 254,
        "readme": "_Big Update_: [New Sepolia Faucet Located Here](https://sepoliafaucet.com/).\n\\Kovan, Ropsten, and Rinkeby have been deprecated. Goerli Still works but we highly recommend Sepolia as its proof of stake based.\n\nYou'll need to verify via Twitter to get ETH & LINK.\nYou can find [Backup Faucets here](https://docs.chain.link/docs/link-token-contracts/#goerli).\n\nAdditionally, lesson 7 uses Chainlink VRF v1 instead of v2, [you can find the docs for Chainlink VRFv1 here](https://docs.chain.link/vrf/v1/examples/get-a-random-number).\n\n[YouTube Video](https://www.youtube.com/watch?v=M576WGiDBdQ)\n\n<br/>\n<p align=\"center\">\n<a href=\"https://www.youtube.com/watch?v=M576WGiDBdQ\" target=\"_blank\">\n<img src=\"./img/youtube_thumbnail.jpeg\" width=\"350\" alt=\"Solidity, Blockchain, and Smart Contract Course \u2013 Beginner to Expert Python Tutorial\">\n</a>\n</p>\n<br/>\n\nWelcome to the repository for the Ultimate Solidity, Blockchain, and Smart Contract - Beginner to Expert Full Course | Python Edition FreeCodeCamp course!\n\n# Table of Contents\n\n- [Table of Contents](#table-of-contents)\n- [Resources For This Course](#resources-for-this-course)\n  - [Questions](#questions)\n  - [Windows Support](#windows-support)\n  - [Hiccups/Issues from the Video](#hiccupsissues-from-the-video)\n- [Lesson 0: Welcome To Blockchain](#lesson-0-welcome-to-blockchain)\n  - [What is a Blockchain?](#what-is-a-blockchain)\n  - [Making Your First Transaction](#making-your-first-transaction)\n  - [How Do Blockchains Work?](#how-do-blockchains-work)\n    - [Consensus](#consensus)\n  - [The Future](#the-future)\n  - [Miscellaneous](#miscellaneous)\n- [Lesson 1: Welcome to Remix! Simple Storage](#lesson-1-welcome-to-remix-simple-storage)\n  - [Everything in this section can be read about in the Solidity Documentation](#everything-in-this-section-can-be-read-about-in-the-solidity-documentation)\n  - [Remix](#remix)\n  - [Basic Solidity](#basic-solidity)\n  - [Deploying to a \"Live\" network](#deploying-to-a-live-network)\n- [Lesson 2: Storage Factory](#lesson-2-storage-factory)\n  - [Inheritance, Factory Pattern, and Interacting with External Contracts](#inheritance-factory-pattern-and-interacting-with-external-contracts)\n- [Lesson 3: Fund Me](#lesson-3-fund-me)\n  - [Payable, msg.sender, msg.value, Units of Measure](#payable-msgsender-msgvalue-units-of-measure)\n  - [Chainlink Oracles](#chainlink-oracles)\n  - [Importing from NPM and Advanced Solidity](#importing-from-npm-and-advanced-solidity)\n- [Lesson 4: Web3.py Simple Storage](#lesson-4-web3py-simple-storage)\n  - [Installing VSCode, Python, and Web3](#installing-vscode-python-and-web3)\n  - [Our First Python Script with Web3.py - Deploying a Contract](#our-first-python-script-with-web3py---deploying-a-contract)\n  - [Interacting with Our Contract in Python & Web3.py](#interacting-with-our-contract-in-python--web3py)\n- [Lesson 5: Brownie Simple Storage](#lesson-5-brownie-simple-storage)\n  - [Brownie Introduction](#brownie-introduction)\n  - [Installing Brownie](#installing-brownie)\n  - [Brownie Simple Storage Project](#brownie-simple-storage-project)\n  - [Testing Basics](#testing-basics)\n  - [[Brownie console]](#brownie-console)\n- [Lesson 6: Brownie Fund Me](#lesson-6-brownie-fund-me)\n  - [Introduction](#introduction)\n  - [Dependencies, Deploying, and Networks](#dependencies-deploying-and-networks)\n  - [Funding and Withdrawing Python Scripts](#funding-and-withdrawing-python-scripts)\n  - [Testing across networks](#testing-across-networks)\n  - [Git](#git)\n  - [Compatibility with Ganache UI](#compatibility-with-ganache-ui)\n- [Lesson 7: SmartContract Lottery](#lesson-7-smartcontract-lottery)\n  - [Introduction](#introduction-1)\n  - [`Lottery.sol`](#lotterysol)\n  - [Testing Lottery.sol](#testing-lotterysol)\n  - [Lottery.sol Testnet Deployment](#lotterysol-testnet-deployment)\n- [Lesson 8: Chainlink Mix](#lesson-8-chainlink-mix)\n  - [Brownie Mixes](#brownie-mixes)\n- [Lesson 9: ERC20s, EIPs, and Token Standards](#lesson-9-erc20s-eips-and-token-standards)\n- [Lesson 10: Defi & Aave](#lesson-10-defi--aave)\n  - [Defi Intro](#defi-intro)\n  - [Aave UI](#aave-ui)\n  - [Programmatic Interactions with Aave](#programmatic-interactions-with-aave)\n  - [Testing](#testing)\n- [Lesson 11: NFTs](#lesson-11-nfts)\n  - [Non-Technical Explainer](#non-technical-explainer)\n  - [Simple NFT](#simple-nft)\n  - [SimpleCollectible Testing](#simplecollectible-testing)\n  - [Advanced NFT](#advanced-nft)\n  - [Advanced deploy_and_create](#advanced-deploy_and_create)\n  - [Creating Metadata & IPFS](#creating-metadata--ipfs)\n- [Lesson 12: Upgrades](#lesson-12-upgrades)\n  - [Introduction to upgrading smart contracts](#introduction-to-upgrading-smart-contracts)\n  - [Upgrades-mix and code](#upgrades-mix-and-code)\n  - [Testing Upgrades](#testing-upgrades)\n  - [Upgrades on a testnet](#upgrades-on-a-testnet)\n- [Bonus Lesson 13: Full Stack Defi](#bonus-lesson-13-full-stack-defi)\n  - [Defi Stake Yield Brownie Scripts & Tests](#defi-stake-yield-brownie-scripts--tests)\n  - [Testing our Defi Stake Yield Brownie Dapp](#testing-our-defi-stake-yield-brownie-dapp)\n  - [Front End / Full Stack](#front-end--full-stack)\n- [Closing and Summary](#closing-and-summary)\n  - [Security](#security)\n  - [Where do I go now?](#where-do-i-go-now)\n    - [Learning More](#learning-more)\n    - [Community](#community)\n    - [Hackathons](#hackathons)\n    - [Vyper](#vyper)\n\n# Resources For This Course\n\n### Questions\n\n- [Github Discussions](https://github.com/smartcontractkit/full-blockchain-solidity-course-py/discussions)\n  - Ask questions and chat about the course here!\n- [Stack Exchange Ethereum](https://ethereum.stackexchange.com/)\n  - Great place for asking technical questions about Ethereum\n- [StackOverflow](https://stackoverflow.com/)\n  - Great place for asking technical questions overall\n\n### Windows Support\n\n- [Setup your windows environment](https://medium.com/@cromewar/how-to-setup-windows-10-11-for-smart-contract-development-and-brownie-e7d8d13555b3)\n  - Learn how to install all the tools you will need for this course on a windows machine\n\n### Hiccups/Issues from the Video\n\n- [Chronological Issues from the Video](https://github.com/smartcontractkit/full-blockchain-solidity-course-py/blob/main/chronological-issues-from-video.md)\n  - A list of known hiccups/issues you may encounter while implementing the content from the video\n\n# Lesson 0: Welcome To Blockchain\n\n## What is a Blockchain?\n\n- [Bitcoin Whitepaper](https://bitcoin.org/bitcoin.pdf)\n- [Ethereum Whitepaper](https://ethereum.org/en/whitepaper/)\n- [Hybrid Smart Contracts](https://blog.chain.link/hybrid-smart-contracts-explained/)\n- [Blockchain Oracles](https://betterprogramming.pub/what-is-a-blockchain-oracle-f5ccab8dbd72?source=friends_link&sk=d921a38466df8a9176ed8dd767d8c77d)\n- [What is a blockchain](https://www.investopedia.com/terms/b/blockchain.asp)\n\n## Making Your First Transaction\n\n- [Metamask](https://metamask.io/)\n- [Etherscan](https://etherscan.io/)\n- [Goerli Etherscan](https://goerli.etherscan.io/)\n- [Kovan Etherscan](https://kovan.etherscan.io/)\n- [Goerli Faucet](https://faucets.chain.link/goerli)\n- [Sepolia Faucet](https://sepoliafaucet.com/)\n- [Sepolia Etherscan](https://sepolia.etherscan.io/)\n\n- Rinkeby Faucet (Check the [link token contracts page](https://docs.chain.link/docs/link-token-contracts/#rinkeby))\n  - NOTE: You can always find the most up to date faucets at [faucets.chain.link](https://faucets.chain.link/).\n- OR, use the [Kovan ETH Faucet](https://faucets.chain.link/), just be sure to swap your metamask to kovan!\n- [Gas and Gas Fees](https://ethereum.org/en/developers/docs/gas/)\n- [Wei, Gwei, and Ether Converter](https://eth-converter.com/)\n- [ETH Gas Station](https://ethgasstation.info/)\n\n## How Do Blockchains Work?\n\n- [Blockchain Demo](https://andersbrownworth.com/blockchain/)\n- [Public / Private Keys](https://andersbrownworth.com/blockchain/public-private-keys/keys)\n- [Layer 2 and Rollups](https://ethereum.org/en/developers/docs/scaling/layer-2-rollups/)\n- [Decentralized Blockchain Oracles](https://blog.chain.link/what-is-the-blockchain-oracle-problem/)\n- [Block Rewards](https://www.investopedia.com/terms/b/block-reward.asp)\n- [Run Your Own Ethereum Node](https://geth.ethereum.org/docs/getting-started)\n\n### Consensus\n\n- [Consensus](https://wiki.polkadot.network/docs/learn-consensus)\n- [Proof of Stake](https://ethereum.org/en/developers/docs/consensus-mechanisms/pos/)\n- [Proof of Work](https://ethereum.org/en/developers/docs/consensus-mechanisms/pow/)\n- [Nakamoto Consensus](https://blockonomi.com/nakamoto-consensus/)\n\n## The Future\n\n- [Ethereum 2](https://ethereum.org/en/eth2/)\n\n## Miscellaneous\n\n- [DAOs](https://www.investopedia.com/tech/what-dao/)\n\n# Lesson 1: [Welcome to Remix! Simple Storage](https://github.com/PatrickAlphaC/simple_storage)\n\n\ud83d\udcbb Code: https://github.com/PatrickAlphaC/simple_storage\n\n### Everything in this section can be read about in the [Solidity Documentation](https://docs.soliditylang.org/en/v0.8.6/index.html)\n\n### [Remix](https://remix.ethereum.org/)\n\n### Basic Solidity\n\n- Versioning\n- Compiling\n- Contract Declaration\n- [Types & Declaring Variables](https://docs.soliditylang.org/en/v0.8.6/types.html)\n  - `uint256`, `int256`, `bool`, `string`, `address`, `bytes32`\n- Default Initializations\n- Comments\n- Functions\n- Deploying a Contract\n- Calling a public state-changing Function\n- [Visibility](https://docs.soliditylang.org/en/v0.7.3/contracts.html#visibility-and-getters)\n- Scope\n- View & Pure Functions\n- Structs\n- Intro to Storage\n- Arrays - Dynamic & Fixed sized\n- Compiler Errors and Warnings\n- Memory\n- Mappings\n- SPDX License\n- Recap\n\n### Deploying to a \"Live\" network\n\n- A testnet or mainnet\n- [Find a faucet here](https://faucets.chain.link/)\n- Connecting Metamask\n- Interacting with Deployed Contracts\n- The EVM\n\n# Lesson 2: [Storage Factory](https://github.com/PatrickAlphaC/storage_factory)\n\n\ud83d\udcbb Code: https://github.com/PatrickAlphaC/storage_factory\n\n### Inheritance, Factory Pattern, and Interacting with External Contracts\n\n- Factory Pattern\n- Imports\n- Deploy a Contract From a Contract\n- Interact With a Deployed Contract\n- Recap\n\n# Lesson 3: [Fund Me](https://github.com/PatrickAlphaC/fund_me)\n\n\ud83d\udcbb Code: https://github.com/PatrickAlphaC/fund_me\n\n### Payable, msg.sender, msg.value, Units of Measure\n\n- Payable\n- [Wei/Gwei/Eth Converter](https://eth-converter.com/)\n- msg.sender & msg.value\n\n### Chainlink Oracles\n\n- Decentralized Oracle Network Chainlink\n  - Blockchains can't make API calls\n  - Centralized Nodes are Points of Failure\n- [data.chain.link](https://data.chain.link/)\n- Getting External Data with Chainlink Oracles\n  - [Chainlink](https://docs.chain.link/)\n  - [Faucets and Contract Addresses](https://docs.chain.link/docs/link-token-contracts/)\n    - [Kovan](https://docs.chain.link/docs/link-token-contracts/#kovan)\n  - [Getting Price Information](https://docs.chain.link/docs/get-the-latest-price/)\n\n### Importing from NPM and Advanced Solidity\n\n- Decimals/Floating Point Numbers in Solidity\n- latestRoundData\n- Importing from NPM in Remix\n- Interfaces\n  - Introduction to ABIs\n- [Getting Price Feed Addresses](https://docs.chain.link/docs/reference-contracts/)\n- getPrice\n- Tuples\n  - Unused Tuple Variables\n- Matching Units (WEI/GWEI/ETH)\n- getConversionRate\n- Matching Units (Continued)\n- SafeMath & Integer Overflow\n  - using keyword\n  - [Libraries](https://docs.soliditylang.org/en/v0.8.6/contracts.html#libraries)\n  - SafeMath PSA\n- Setting a Threshold\n- Require\n- Revert\n- Withdraw Function\n- Transfer\n- Balance\n- this\n- Contract Owners\n- Constructor\n- ==\n- Modifiers\n- Resetting\n- for loop\n- Array Length\n- Forcing a Transaction\n- Recap\n\n# Lesson 4: [Web3.py Simple Storage](https://github.com/PatrickAlphaC/web3_py_simple_storage)\n\n\ud83d\udcbb Code: https://github.com/PatrickAlphaC/web3_py_simple_storage\n\n### Installing VSCode, Python, and Web3\n\n- [Developer Bootcamp Setup Instructions (metamask, vscode, python, nodejs..)](https://chain.link/bootcamp/brownie-setup-instructions)\n- [VSCode](https://code.visualstudio.com/download)\n- [VSCode Crash Course](https://www.youtube.com/watch?v=WPqXP_kLzpo)\n- Extensions\n- Short Cuts:\n  - [VSCode Shortcuts](https://code.visualstudio.com/docs/getstarted/keybindings)\n  - [VSCode MacOS Shortcuts](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf)\n- [Python](https://www.python.org/downloads/)\n  - Install Troubleshooting\n- Terminal\n- Making a directory/Folder\n- Opening the folder up with VSCode\n- Creating a new file\n- Syntax Highlights\n- Remember to save!\n- Setting linting compile version\n- VSCode Solidity Settings\n  - Formatting & Format on Save\n  - Solidity Prettier\n  - [Python Black](https://pypi.org/project/black/)\n  - [pip](https://pypi.org/project/pip/)\n\n### Our First Python Script with Web3.py - Deploying a Contract\n\n- Reading our solidity file\n- Running a Python Script in the Terminal\n- [MaxOS Shortcuts](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf)\n- [Windows Shortcuts](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf)\n- [Linux Shortcuts](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf)\n- Compiling in Python\n- [py-solc-x](https://pypi.org/project/py-solc-x/)\n  - compile_standard\n- Colorized Brackets\n- JSON ABI\n- Saving Compiled Code\n- Formatting JSON\n- Deploying in Python\n  1. Get Bytecode\n  2. Get ABI\n  3. Choose Blockchain to Deploy To\n  - Local Ganache Chain\n    - [Ganache UI](https://www.trufflesuite.com/ganache)\n    - [Ganache Command Line](https://github.com/trufflesuite/ganache-cli)\n- [Web3.py](https://web3py.readthedocs.io/en/stable/)\n- HTTP / RPC Provider\n- Private Keys MUST start with \"0x\"\n- Contract Object\n- Building a Transaction\n- Account Nonce\n- Calling \"Constructor\"\n- Transaction Parameters\n- Signing the Transaction\n- NEVER put your private key directly in your code\n- [Setting Environment Variables (Windows, Linux, MacOS)](https://www.twilio.com/blog/2017/01/how-to-set-environment-variables.html)\n  - [More on Windows Environment Variables](https://www.youtube.com/watch?v=tqWDiu8a4gc&t=40s)\n- Exported Environment Variables Only Last the Duration of the Shell/Terminal\n- Private Key PSA\n- .env file\n- .gitignore\n- Loading .env File in Python\n  - [python-dotenv](https://pypi.org/project/python-dotenv/)\n- Viewing our Transaction / Deployment in Ganache\n- Waiting for Block Confirmations\n\n### Interacting with Our Contract in Python & Web3.py\n\n- 2 Things you always need\n  1. Contract Address\n  2. Contract ABI\n- Getting address from transaction receipt\n- Calling a view function with web3.py\n  - Call vs Transact\n- Updating State with Web3.py\n- [ganache-cli](https://github.com/trufflesuite/ganache-cli)\n  - Installing Ganache\n    - [Install Nodejs](https://nodejs.org/en/)\n    - [Install Yarn](https://classic.yarnpkg.com/en/docs/install)\n- Working with ganache-cli\n- Open a new terminal in the same window\n- Deploying to a testnet\n- [Infura](https://infura.io/)\n- [Alchemy](https://www.alchemy.com/)\n- Using Infura RPC URL / HTTP Provider\n- [Chain Ids](https://chainlist.org/)\n- Wow this seems like a lot of work... Is there a better way?\n\n# Lesson 5: [Brownie Simple Storage](https://github.com/PatrickAlphaC/brownie_simple_storage)\n\n\ud83d\udcbb Code: https://github.com/PatrickAlphaC/brownie_simple_storage\n\n### Brownie Introduction\n\n- Some Users:\n  - https://yearn.finance/\n  - https://curve.fi/\n  - https://badger.finance/\n\n### Installing Brownie\n\n- [Installing Brownie](https://eth-brownie.readthedocs.io/en/stable/install.html)\n  - Install pipx\n  - pipx install eth-brownie\n  - Testing Successful Install\n\n### Brownie Simple Storage Project\n\n- A new Brownie project with `brownie init`\n  - Project Basic Explanation\n- Adding `SimpleStorage.sol` to the `contracts` folder\n- Compiling with `brownie compile`\n- Brownie deploy script\n  - `def main` is brownie's entry point\n- brownie defaults to a `development` `ganache` chain that it creates\n- Placing functions outside of the `main` function\n- brownie `accounts`\n  - 3 Ways to Add Accounts\n    1. `accounts[0]`: Brownie's \"default\" ganache accounts\n       - Only works for local ganache\n    2. `accounts.load(\"...\")`: Brownie's encrypted command line (MOST SECURE)\n       - Run `brownie accounts new <name>` and enter your private key and a password\n    3. `accounts.add(config[\"wallets\"][\"from_key\"])`: Storing Private Keys as an environment variable, and pulling from our `brownie-config.yaml`\n       - You'll need to add `dotenv: .env` to your `brownie-config.yaml` and have a `.env` file\n- Importing a Contract\n- Contract.Deploy\n- View Function Call in Brownie\n- State-Changing Function Call in Brownie / Contract Interaction\n- `transaction.wait(1)`\n\n### Testing Basics\n\n- `test_simple_storage.py`\n- Arrange, Act, Assert\n- [`assert`](https://docs.pytest.org/en/6.2.x/assert.html)\n- `brownie test`\n- `test_updating_storage`\n- [Pytest / Brownie Test Tips](https://docs.pytest.org/en/6.2.x/)\n- Deploy to a Testnet\n- `brownie networks list`\n- Development vs Ethereum\n  - Development is temporary\n  - Ethereum networks persist\n- RPC URL / HTTP Provider in Brownie\n- The network flag\n  - `list index out of range`\n- `get_account()`\n- `networks.show_active()`\n- build/deployments\n- Accessing previous deployments\n- Interacting with contracts deployed in our brownie project\n\n### [Brownie console]\n\n- `brownie console`\n\n# Lesson 6: [Brownie Fund Me](https://github.com/PatrickAlphaC/brownie_fund_me)\n\n\ud83d\udcbb Code: https://github.com/PatrickAlphaC/brownie_fund_me\n\n### Introduction\n\n- Setup\n\n### Dependencies, Deploying, and Networks\n\n- Dependencies\n- [chainlink-brownie-contracts](https://github.com/smartcontractkit/chainlink-brownie-contracts)\n- remappings\n- Deploy Script (V1)\n- `helpful_scripts.py`\n- `__init__.py`\n- Deploy to Rinkeby\n- Contract Verification (`publish_source`)\n  - The Manual Way\n    - \"Flattening\"\n  - The Programmatic Way\n    - Getting an [Etherscan API Key](https://etherscan.io/apis)\n    - `ETHERSCAN_TOKEN`\n  - Interacting with Etherscan\n- Deploying to Local Chains\n- Introduction to Mocking\n- Constructor Parameters\n- `networks` in our `brownie-config.yaml`\n- Copying [Mock Contracts from chainlink-mix](https://github.com/smartcontractkit/chainlink-mix)\n- Deploying and using our mock\n- Refactoring\n- Deploying to a persistent ganache\n- brownie attach\n- Adding a persistent brownie network\n- resetting a network build\n\n### Funding and Withdrawing Python Scripts\n\n- Whoops! Let's fix an issue...\n- Fund Script\n- Withdraw Script\n\n### Testing across networks\n\n- `test_can_fund_and_withdraw`\n- default networks\n- pytest `pip install pytest`\n- pytest.skip\n- brownie exceptions\n- `mainnet-fork`\n- Custom mainnet fork\n- Adding a development brownie network\n  - `brownie networks add development mainnet-fork-dev cmd=ganache-cli host=http://127.0.0.1 fork='https://infura.io/v3/$WEB3_INFURA_PROJECT_ID' accounts=10 mnemonic=brownie port=8545`\n- [Alchemy](https://www.alchemy.com/)\n- `brownie test --network mainnet-fork`\n- brownie ganache vs local ganache vs mainnet-fork vs testnet...\n\n### Git\n\n- [Installing Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)\n- Creating a repository\n- [First time with git](https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup)\n- [Adding our project to github](https://docs.github.com/en/github/importing-your-projects-to-github/importing-source-code-to-github/adding-an-existing-project-to-github-using-the-command-line)\n- Tweet it out!\n\n### Compatibility with Ganache UI\n\n- `test_only_owner_can_withdraw()` gives below error if the selected network is Ganache UI::\n\n```\nE           ValueError: Execution reverted during call: 'VM Exception while processing transaction: revert'. This transaction will likely revert. If you wish to broadcast, include `allow_revert:True` as a transaction parameter.\n```\n\n[More information here.](https://ethereum.stackexchange.com/questions/114889/deploying-ganache-local-w-brownie-vm-exception-while-processing-transaction-in)\n\n# Lesson 7: [SmartContract Lottery](https://github.com/PatrickAlphaC/smartcontract-lottery)\n\n\ud83d\udcbb Code: https://github.com/PatrickAlphaC/smartcontract-lottery\n\n[Chainlink VRF v1 docs](https://docs.chain.link/vrf/v1/examples/get-a-random-number)\n\n### Introduction\n\n- Add a `README.md`\n- Defining the project\n- Is it decentralized?\n\n### `Lottery.sol`\n\n- basic setup\n- Main Functions\n- address payable[]\n- getEntranceFee & Setup\n  - [Chainlink Price Feed](https://docs.chain.link/docs/get-the-latest-price/)\n  - brownie-config\n  - SPDX\n- Matching Units of Measure\n  - Can't just divide\n- Test early and often\n- Quick Math Sanity Check\n- deleting networks\n- [Alchemy](https://www.alchemy.com/) again\n- Enum\n- `startLottery`\n- [Openzeppelin](https://openzeppelin.com/contracts/)... Is this the first openzeppelin reference?\n- [Openzeppelin Contracts Github](https://github.com/OpenZeppelin/openzeppelin-contracts)\n- Randomness\n- Pseudorandomness\n- `block` keyword\n  - `block.difficulty`\n  - `block.timestamp`\n- `keccack256`\n- [True Randomness with Chainlink VRF](https://docs.chain.link/docs/get-a-random-number/)\n- [VRFConsumerBase.sol](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/vrf/VRFConsumerBase.sol)\n- Chainlink VRF Remix Version\n- Inheriting Constructors\n- Oracle Gas & Transaction Gas\n- [Why didn't we pay gas on the price feeds?](https://ethereum.stackexchange.com/questions/87473/is-chainlinks-price-reference-data-free-to-consume)\n- Chainlink Node Fees\n- [Request And Receive Introduction](https://docs.chain.link/docs/architecture-request-model/)\n- [Kovan Faucets](https://docs.chain.link/docs/link-token-contracts/#kovan)\n- Funding Chainlink Contracts\n- [Request And Receive Explanation](https://docs.chain.link/docs/architecture-request-model/)\n- A Clarification\n- `endLottery`\n- `returns (type variableName)`\n- `fulfillRandomness`\n- `override`\n- Modulo Operation (Mod Operation %)\n- Paying the lottery winner\n- Resetting the lottery\n\n### Testing Lottery.sol\n\n- `deploy_lottery.py`\n- `get_account()` refactored\n- `get_contract`\n  - `contract_to_mock`\n  - `Contract.from_abi`\n- Adding the parameters to deploying to lottery\n- `vrfCoordinatorMock` and adding mocks\n- `LinkToken` and Mocks\n- Successful Ganache Deployment!\n- Python Lottery Scripts/Functions\n  - `start_lottery`\n  - Brownie tip: Remember to `tx.wait(1)` your last transaction\n  - `enter_lottery`\n  - `end_lottery`\n- Funding with LINK\n- brownie interfaces\n- Waiting for callback\n- Integration Tests & Unit Tests\n- Test all lines of code\n- `test_get_entrance_fee`\n- `pytest.skip` (again)\n- `test_cant_enter_unless_started`\n- `test_can_start_and_enter_lottery`\n- `test_can_pick_winner_correctly`\n- Events and Logs\n- `callBackWithRandomness`\n\n### Lottery.sol Testnet Deployment\n\n- `topics`\n- [conftest.py](https://stackoverflow.com/questions/34466027/in-pytest-what-is-the-use-of-conftest-py-files)\n\n# Lesson 8: [Chainlink Mix](https://github.com/smartcontractkit/chainlink-mix)\n\n\ud83d\udcbb Code: https://github.com/smartcontractkit/chainlink-mix\n\n## [Brownie Mixes](https://github.com/brownie-mix)\n\n# Lesson 9: [ERC20s, EIPs, and Token Standards](https://github.com/PatrickAlphaC/erc20-brownie-py)\n\n\ud83d\udcbb Code: https://github.com/PatrickAlphaC/erc20-brownie-py\n\n- [ERC20/EIP20 Standard](https://eips.ethereum.org/EIPS/eip-20)\n- What is an ERC20?\n- Creating an ERC20\n- [OpenZeppelin ERC20](https://docs.openzeppelin.com/contracts/2.x/api/token/erc20)\n- [Solidity 0.8](https://docs.soliditylang.org/en/breaking/080-breaking-changes.html)\n- I Challenge you to code this yourself!\n- `deploy_token.py`\n- Copy paste `helpful_scripts.py`\n- Viewing our token in metamask\n- Adding to an exchange\n\n# Lesson 10: [Defi & Aave](https://github.com/PatrickAlphaC/aave_brownie_py_freecode)\n\n\\*NOTE: This repo is now archived as kovan is no longer supported. You can still follow along with the learning, but know the code may not work the same on a different testnet.\n\n\ud83d\udcbb Code: https://github.com/PatrickAlphaC/aave_brownie_py_freecode\n\n### Defi Intro\n\n- [Defipulse](https://defipulse.com/)\n- [Defillama](https://defillama.com/)\n- [Aave Testnet Site](https://staging.aave.com/)\n- [Paraswap](https://paraswap.io/)\n- Decentralized Exchange\n\n### Aave UI\n\n- [Kovan ETH](https://docs.chain.link/docs/link-token-contracts/#kovan)\n- What is Aave?\n- Borrowing and Lending\n- Connecting to Aave\n- Depositing Tokens / Lending\n- Checking your transaction is correct\n- WETH Gateway\n- Interest Bearing Token (aToken)\n- Collateral\n- [DAI](https://makerdao.com/en/)\n- [Stablecoin](https://www.investopedia.com/terms/s/stablecoin.asp)\n- [Wrapped Bitcoin (wBTC)](https://www.gemini.com/cryptopedia/wrapped-bitcoin-what-can-you-do)\n- [Why borrow tokens?](https://docs.aave.com/faq/borrowing)\n- [Blockchain Fintech Tutorial](https://blog.chain.link/blockchain-fintech-defi-tutorial-lending-borrowing-python/)\n- DISCLAIMER ABOUT BORROWING\n- Borrowing Tokens\n- [Liquidations](https://docs.aave.com/faq/liquidations)\n- Your health factor must be above 1\n- [Solvent](https://www.investopedia.com/terms/s/solvency.asp)\n- [Stable vs Variable Interest Rate](https://docs.aave.com/faq/borrowing#what-is-the-difference-between-stable-and-variable-rate)\n- Repaying our borrows/loans\n- Reward token / governance token\n- Governance\n\n### [Programmatic Interactions with Aave](https://github.com/PatrickAlphaC/aave_brownie_py_freecode)\n\n- Quant Defi Engineer\n- [Aave Documentation](https://docs.aave.com/developers/)\n- Setup\n- Converting ETH -> WETH\n- `get_weth.py`\n- [IWETH](https://github.com/PatrickAlphaC/aave_brownie_py/blob/main/interfaces/WethInterface.sol)\n- [Kovan WETH Token Address: 0xd0a1e359811322d97991e03f863a0c30c2cf029c](https://kovan.etherscan.io/token/0xd0a1e359811322d97991e03f863a0c30c2cf029c)\n- [Mainnet WETH Token Address: 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2](https://etherscan.io/token/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2)\n- Converting WETH -> ETH with `withdraw`\n- `aave_borrow.py`\n- [LendingPool](https://docs.aave.com/developers/the-core-protocol/lendingpool)\n- [LendingPoolAddressProvider](https://docs.aave.com/developers/the-core-protocol/addresses-provider)\n- [LendingPool and LendingPoolAddressProvider Addresses](https://docs.aave.com/developers/deployed-contracts/deployed-contracts)\n- Fixing import dependencies\n- [Aave Github](https://github.com/aave/protocol-v2)\n- [ERC20 Approve Function](https://medium.com/ethex-market/erc20-approve-allow-explained-88d6de921ce9)\n- [IERC20 from Patrick's repo](https://github.com/PatrickAlphaC/aave_brownie_py/blob/main/interfaces/IERC20.sol)\n- `deposit`\n- [getUserAccountData](https://docs.aave.com/developers/the-core-protocol/lendingpool#getuseraccountdata)\n- Liquidation Threshold\n- [Risk Parameters](https://docs.aave.com/risk/asset-risk/risk-parameters)\n- Borrowing DAI\n- Getting DAI Conversion Rate\n  - [Chainlink Price Feeds](https://docs.chain.link/docs/reference-contracts/)\n  - [AggregatorV3Interface](https://github.com/PatrickAlphaC/aave_brownie_py/blob/main/interfaces/AggregatorV3Interface.sol)\n- [borrow](https://docs.aave.com/developers/the-core-protocol/lendingpool#borrow)\n- [Mainnet DAI Address: 0x6b175474e89094c44da98b954eedeac495271d0f](https://etherscan.io/token/0x6b175474e89094c44da98b954eedeac495271d0f)\n- [Aave Testnet Token Addresses](https://aave.github.io/aave-addresses/kovan.json)\n- Repaying\n- Kovan Run\n- Viewing the transactions\n\n### Testing\n\n# Lesson 11: [NFTs](https://github.com/PatrickAlphaC/nft-demo)\n\n\ud83d\udcbb Code: https://github.com/PatrickAlphaC/nft-demo\n\n### Non-Technical Explainer\n\n- [End-to-end article](https://www.freecodecamp.org/news/how-to-make-an-nft-and-render-on-opensea-marketplace/)\n- What is an NFT?\n- [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n- Token URI\n- [Token Metadata Example](https://docs.opensea.io/docs/2-adding-metadata)\n- [IPFS](https://ipfs.io/)\n\n### Simple NFT\n\n- [brownie mix](https://github.com/PatrickAlphaC/nft-mix)\n- Initial Setup\n- `SimpleCollectible.sol`\n- [OpenZeppelin ERC721](https://docs.openzeppelin.com/contracts/3.x/)\n- [Pug Image](https://github.com/PatrickAlphaC/nft-mix/blob/main/img/pug.png)\n- NFT Constructor\n- NFT is a type of factory pattern\n- `createCollectible`\n  - `_safeMint`\n- TokenURI & Metadata\n- Opensea listing example\n- Is this decentralized?\n- Ethereum Size and dStorage\n  - [Ethereum Size](https://ycharts.com/indicators/ethereum_chain_full_sync_data_size)\n  - [dStorage Solutions](https://ethereum.org/en/developers/docs/storage/)\n  - [IPFS](https://www.ipfs.com/)\n- You need to have your NFT attributes both on-chain and inside your tokenURI metadata\n- `deploy_and_create.py`\n- [TokenURI used for the demo: https://ipfs.io/ipfs/Qmd9MCGtdVz2miNumBHDbvj8bigSgTwnr4SbyH6DNnpWdt?filename=0-PUG.json](https://ipfs.io/ipfs/Qmd9MCGtdVz2miNumBHDbvj8bigSgTwnr4SbyH6DNnpWdt?filename=0-PUG.json)\n- [IPFS Companion](https://chrome.google.com/webstore/detail/ipfs-companion/nibjojkomfdiaoajekhjakgkdhaomnch?hl=en)\n- Rinkeby Deployment\n- [Opensea Example](https://testnets.opensea.io/assets/0x8acb7ca932892eb83e4411b59309d44dddbc4cdf/0)\n\n### SimpleCollectible Testing\n\n- What else with NFTs?\n\n### Advanced NFT\n\n- `AdvancedCollectible.sol`\n- [Dungeons and Dragons Example](https://github.com/PatrickAlphaC/dungeons-and-dragons-nft)\n- Double Inherited Constructors\n- `createCollectible` (Advanced)\n  - `tokenIdToBreed`\n- Working with in-flight Chainlink VRF requests\n- Download the NFT images from the [nft-mix](https://github.com/PatrickAlphaC/nft-mix)\n- `setTokenURI`\n  - `_isApprovedOrOwner`\n- Emit events when you update mappings\n- [`indexed` event keyword](https://ethereum.stackexchange.com/questions/8658/what-does-the-indexed-keyword-do/8659)\n\n### Advanced deploy_and_create\n\n- Move `OPENSEA_URL` to `helpful_scripts`\n- Deploying AdvancedCollectible\n  - Opensea testnet is only compatible with Rinkeby\n- [Rinkeby Chainlink VRF Contract Addresses](https://docs.chain.link/docs/vrf-contracts/#rinkeby)\n- Speeding through adding functions from previous projects\n- Deploy to Rinkeby\n- `create_collectible.py`\n- A quick unit test\n- A quick integration test\n\n### Creating Metadata & IPFS\n\n- `create_metadata.py`\n- `get_breed`\n- Metadata Folder\n- `metadata_template`\n- NFT Metadata Attributes\n- Checking if Metadata file already exists\n- Uploading to IPFS\n  - `upload_to_ipfs`\n  - [Download IPFS Command Line](https://docs.ipfs.io/install/command-line/)\n  - [Download IPFS Desktop](https://docs.ipfs.io/install/ipfs-desktop/)\n  - [HTTP IPFS Docs](https://docs.ipfs.io/reference/http/api/)\n  - `ipfs daemon`\n  - [Pinata](https://app.pinata.cloud/)\n  - [Pinata Docs](https://docs.pinata.cloud/)\n  - Refactoring to not re-upload to IPFS\n- Setting the TokenURI\n- End-To-End Manual Testnet Test\n- Viewing on Opensea\n\n# Lesson 12: [Upgrades](https://github.com/PatrickAlphaC/upgrades-mix)\n\n\ud83d\udcbb Code: https://github.com/PatrickAlphaC/upgrades-mix\n\n### Introduction to upgrading smart contracts\n\n- [Original Video](https://www.youtube.com/watch?v=bdXJmWajZRY)\n- Smart Contracts can be upgraded!\n- Does this mean they are not immutable?\n- [Trail of Bits on Upgradeable Smart Contracts](https://blog.trailofbits.com/2018/09/05/contract-upgrade-anti-patterns/)\n- The \"Not Really Upgrading\" / Parameterization Method\n- The Social Yeet / Migration Method\n- [Contract Migration](https://blog.trailofbits.com/2018/10/29/how-contract-migration-works/)\n- Proxies\n  - DelegateCall\n  - Terminology:\n    - Implementation Contract\n    - Proxy Contract\n    - User\n    - Admin\n  - Gotchas:\n    - Storage Clashes\n    - Function Selector\n    - Function Selector Clashes\n  - Proxy Patterns:\n    - [Transparent Proxy Pattern](https://blog.openzeppelin.com/the-transparent-proxy-pattern/)\n    - [Universal Upgrade Proxy Standard](https://eips.ethereum.org/EIPS/eip-1822)\n    - [Diamond/Multi-Facet Proxy](https://eips.ethereum.org/EIPS/eip-2535)\n\n### Upgrades-mix and code\n\n- Setup\n- `Box.sol`\n- `BoxV2.sol`\n- Getting the proxy contracts\n- [Openzeppelin Proxy Github](https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/proxy/transparent)\n- `01_deploy_box.py`\n- Hooking up a proxy to our implementation contract\n- (Optional) [Creating a Gnosis Safe](https://help.gnosis-safe.io/en/articles/3876461-create-a-safe)\n- Initializers\n- Encoding Initializer Function\n- Assigning ABI to a proxy\n- Running the script\n- Upgrade Python Function\n\n### Testing Upgrades\n\n- Testing our proxy\n- Testing our upgrades\n\n### Upgrades on a testnet\n\n# Bonus Lesson 13: [Full Stack Defi](https://github.com/PatrickAlphaC/defi-stake-yield-brownie-freecode)\n\n_Note: This section is archived as kovan is now deprecated. If you're looking to learn more Full-stack, check out the full stack portions of the hardhat/javascript video._\n\n_Link to hardhat/javascript video with more full-stack examples: https://github.com/smartcontractkit/full-blockchain-solidity-course-js_\n\n\ud83d\udcbb Code: https://github.com/PatrickAlphaC/defi-stake-yield-brownie-freecode\n\n- [FreeCodeCamp React](https://www.freecodecamp.org/news/tag/react/)\n- What are we building?\n- Setup\n- `DappToken.sol`\n- `TokenFarm.sol`\n  - `tokenIsAllowed`\n  - `addAllowedTokens`\n  - mapping of a mapping\n  - `stakeTokens`\n  - `issueTokens`\n  - `getUserTotalValue`\n  - `getUserSingleTokenValue`\n  - `getTokenValue`\n  - `setPriceFeedContract`\n  - `unStakeTokens`\n  - Can this be reentrancy attacked?\n\n### Defi Stake Yield Brownie Scripts & Tests\n\n- `deploy.py`\n  - Deploying DappToken\n  - Deploying TokenFarm\n  - Adding allowed tokens\n- [ERC20 Kovan Faucet](https://erc20faucet.com/)\n  - If the link above does not work, you can get another ERC20 token using this faucet: [Weenus ERC20 Faucet](https://github.com/bokkypoobah/WeenusTokenFaucet)\n- Mocking our ERC20s\n\n### Testing our Defi Stake Yield Brownie Dapp\n\n- `test_set_price_feed_contract`\n- `test_stake_tokens`\n- Fixtures\n- `test_issue_tokens`\n- Now you try on tests!\n\n### Front End / Full Stack\n\n- Front End Introduction\n- Typescript\n- [React](https://reactjs.org/)\n- [useDapp](https://usedapp.readthedocs.io/en/latest/)\n- [npx](https://www.npmjs.com/package/npx)\n- [yarn](https://classic.yarnpkg.com/en/docs/install/)\n- `create-react-app`\n  - Layout\n- [Testing Front End](https://www.freecodecamp.org/news/testing-react-hooks/)\n- yarn && yarn start\n- Connecting our wallets\n  - Install useDapp\n  - Header Component\n  - Connect Button\n- [Material-UI](https://material-ui.com/)\n- Making our button nicer\n- `Main.tsx`\n  - Sending `brownie-config` & `build` folder to our UI\n  - Helper Config\n  - TypeScript error suppression\n  - Getting addresses\n  - [Ethers](https://docs.ethers.io/v5/)\n  - Only support kovan\n- `YourWallet`\n  - `supportedTokens`\n  - State Hooks\n  - Showing tokens\n  - `WalletBalance`\n  - [`ethersproject/units`](https://www.npmjs.com/package/@ethersproject/units)\n  - `BalanceMsg`\n  - Stake Form\n  - Calling `approve`\n  - `useContractFunction`\n  - `useEffect`\n  - Notifications\n  - Make it pretty\n  - Alerts\n\nShoutout to [Matt](https://twitter.com/mdurkin92) for the help on the front end!\n\n# Closing and Summary\n\n## Security\n\n- [Best Practices](https://consensys.github.io/smart-contract-best-practices/)\n- [Attacks](https://consensys.github.io/smart-contract-best-practices/attacks/)\n  - [Oracle Attacks](https://hackernoon.com/how-dollar100m-got-stolen-from-defi-in-2021-price-oracle-manipulation-and-flash-loan-attacks-explained-3n6q33r1)\n  - [Re-entrancy Attacks](https://quantstamp.com/blog/what-is-a-re-entrancy-attack)\n- [Damn Vulnerable Defi](https://www.damnvulnerabledefi.xyz/)\n- [Ethernaut](https://ethernaut.openzeppelin.com/)\n- Some Auditors\n  - [OpenZeppelin](https://openzeppelin.com/)\n  - [SigmaPrime](https://sigmaprime.io/)\n  - [Trail of Bits](https://www.trailofbits.com/)\n\n## Where do I go now?\n\n### Learning More\n\n- [CryptoZombies](https://cryptozombies.io/)\n- [Dapp University](https://www.youtube.com/channel/UCY0xL8V6NzzFcwzHCgB8orQ)\n- [ChainShot](https://www.chainshot.com/courses)\n- [Ivan on Tech](https://academy.ivanontech.com/)\n- [Eat the Blocks](https://www.youtube.com/channel/UCZM8XQjNOyG2ElPpEUtNasA)\n- [Patrick Collins](https://www.youtube.com/channel/UCn-3f8tw_E1jZvhuHatROwA)\n- [Austin Griffith](https://www.youtube.com/channel/UC_HI2i2peo1A-STdG22GFsA)\n- [Nader Dabit](https://www.youtube.com/user/boyindasouth)\n- [Ethereum.org](https://ethereum.org/en/)\n\n### Community\n\n- Twitter\n- [Brownie Discord](https://discord.gg/9zk7snTfWe)\n- [Ethereum Discord](https://ethereum.org/en/)\n- [Chainlink Discord](https://discord.gg/2YHSAey)\n- [Reddit ethdev](https://www.reddit.com/r/ethdev/)\n\n### Hackathons\n\n- [CL Hackathon](https://chain.link/hackathon)\n- [ETH Global](https://ethglobal.co/)\n- [ETH India](https://twitter.com/ETHIndiaco)\n\nBe sure to check out project grant programs!\n\n### Vyper\n\n[From solidity course to vyper](https://github.com/chalex-eth/From-solidity-course-to-vyper-py)\n\nAnd make today an amazing day!\n",
        "releases": []
    }
}