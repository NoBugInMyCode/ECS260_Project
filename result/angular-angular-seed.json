{
    "https://api.github.com/repos/angular/angular-seed": {
        "forks": 6917,
        "watchers": 13021,
        "stars": 13021,
        "languages": {
            "JavaScript": 5004,
            "HTML": 4992,
            "CSS": 306
        },
        "commits": [
            "2018-11-15T14:05:18Z",
            "2018-11-02T15:34:10Z",
            "2018-10-30T10:10:39Z",
            "2018-10-26T16:42:27Z",
            "2018-10-26T15:35:14Z",
            "2018-10-26T15:24:54Z",
            "2018-10-26T15:24:33Z",
            "2017-10-13T20:32:30Z",
            "2016-12-07T11:26:43Z",
            "2016-08-25T14:32:22Z",
            "2016-11-21T11:35:56Z",
            "2016-11-21T11:34:59Z",
            "2016-11-21T11:25:21Z",
            "2016-11-21T11:12:43Z",
            "2016-10-18T10:44:17Z",
            "2016-10-03T12:55:09Z",
            "2016-09-21T10:36:56Z",
            "2016-09-08T16:30:49Z",
            "2015-12-15T13:27:16Z",
            "2016-08-25T13:53:25Z",
            "2016-08-16T09:00:22Z",
            "2015-05-01T13:46:47Z",
            "2014-10-11T20:13:53Z",
            "2016-06-17T09:44:22Z",
            "2016-06-17T09:12:40Z",
            "2016-05-21T21:29:15Z",
            "2016-05-21T21:14:04Z",
            "2016-05-21T11:56:45Z",
            "2015-06-15T12:41:06Z",
            "2015-06-14T22:27:20Z"
        ],
        "creation_date": "2010-12-24T06:07:50Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 690,
        "readme": "# `angular-seed` \u2014 the seed for AngularJS apps\n\nThis project is an application skeleton for a typical [AngularJS][angularjs] web app. You can use it\nto quickly bootstrap your angular webapp projects and dev environment for these projects.\n\nThe seed contains a sample AngularJS application and is preconfigured to install the AngularJS\nframework and a bunch of development and testing tools for instant web development gratification.\n\nThe seed app doesn't do much, just shows how to wire two controllers and views together.\n\n\n## Getting Started\n\nTo get you started you can simply clone the `angular-seed` repository and install the dependencies:\n\n### Prerequisites\n\nYou need git to clone the `angular-seed` repository. You can get git from [here][git].\n\nWe also use a number of Node.js tools to initialize and test `angular-seed`. You must have Node.js\nand its package manager (npm) installed. You can get them from [here][node].\n\n### Clone `angular-seed`\n\nClone the `angular-seed` repository using git:\n\n```\ngit clone https://github.com/angular/angular-seed.git\ncd angular-seed\n```\n\nIf you just want to start a new project without the `angular-seed` commit history then you can do:\n\n```\ngit clone --depth=1 https://github.com/angular/angular-seed.git <your-project-name>\n```\n\nThe `depth=1` tells git to only pull down one commit worth of historical data.\n\n### Install Dependencies\n\nWe have two kinds of dependencies in this project: tools and AngularJS framework code. The tools\nhelp us manage and test the application.\n\n* We get the tools we depend upon and the AngularJS code via `npm`, the [Node package manager][npm].\n* In order to run the end-to-end tests, you will also need to have the\n  [Java Development Kit (JDK)][jdk] installed on your machine. Check out the section on\n  [end-to-end testing](#e2e-testing) for more info.\n\nWe have preconfigured `npm` to automatically copy the downloaded AngularJS files to `app/lib` so we\ncan simply do:\n\n```\nnpm install\n```\n\nBehind the scenes this will also call `npm run copy-libs`, which copies the AngularJS files and\nother front end dependencies. After that, you should find out that you have two new directories in\nyour project.\n\n* `node_modules` - contains the npm packages for the tools we need\n* `app/lib` - contains the AngularJS framework files and other front end dependencies\n\n*Note copying the AngularJS files from `node_modules` to `app/lib` makes it easier to serve the\nfiles by a web server.*\n\n### Run the Application\n\nWe have preconfigured the project with a simple development web server. The simplest way to start\nthis server is:\n\n```\nnpm start\n```\n\nNow browse to the app at [`localhost:8000/index.html`][local-app-url].\n\n\n## Directory Layout\n\n```\napp/                  --> all of the source files for the application\n  app.css               --> default stylesheet\n  core/                 --> all app specific modules\n    version/              --> version related components\n      version.js                 --> version module declaration and basic \"version\" value service\n      version_test.js            --> \"version\" value service tests\n      version-directive.js       --> custom directive that returns the current app version\n      version-directive_test.js  --> version directive tests\n      interpolate-filter.js      --> custom interpolation filter\n      interpolate-filter_test.js --> interpolate filter tests\n  view1/                --> the view1 view template and logic\n    view1.html            --> the partial template\n    view1.js              --> the controller logic\n    view1_test.js         --> tests of the controller\n  view2/                --> the view2 view template and logic\n    view2.html            --> the partial template\n    view2.js              --> the controller logic\n    view2_test.js         --> tests of the controller\n  app.js                --> main application module\n  index.html            --> app layout file (the main html template file of the app)\n  index-async.html      --> just like index.html, but loads js files asynchronously\ne2e-tests/            --> end-to-end tests\n  protractor-conf.js    --> Protractor config file\n  scenarios.js          --> end-to-end scenarios to be run by Protractor\nkarma.conf.js         --> config file for running unit tests with Karma\npackage.json          --> Node.js specific metadata, including development tools dependencies\npackage-lock.json     --> Npm specific metadata, including versions of installed development tools dependencies\n```\n\n\n## Testing\n\nThere are two kinds of tests in the `angular-seed` application: Unit tests and end-to-end tests.\n\n### Running Unit Tests\n\nThe `angular-seed` app comes preconfigured with unit tests. These are written in [Jasmine][jasmine],\nwhich we run with the [Karma][karma] test runner. We provide a Karma configuration file to run them.\n\n* The configuration is found at `karma.conf.js`.\n* The unit tests are found next to the code they are testing and have a `.spec.js` suffix (e.g.\n  `view1.spec.js`).\n\nThe easiest way to run the unit tests is to use the supplied npm script:\n\n```\nnpm test\n```\n\nThis script will start the Karma test runner to execute the unit tests. Moreover, Karma will start\nwatching the source and test files for changes and then re-run the tests whenever any of them\nchanges.\nThis is the recommended strategy; if your unit tests are being run every time you save a file then\nyou receive instant feedback on any changes that break the expected code functionality.\n\nYou can also ask Karma to do a single run of the tests and then exit. This is useful if you want to\ncheck that a particular version of the code is operating as expected. The project contains a\npredefined script to do this:\n\n```\nnpm run test-single-run\n```\n\n\n<a name=\"e2e-testing\"></a>\n### Running End-to-End Tests\n\nThe `angular-seed` app comes with end-to-end tests, again written in [Jasmine][jasmine]. These tests\nare run with the [Protractor][protractor] End-to-End test runner. It uses native events and has\nspecial features for AngularJS applications.\n\n* The configuration is found at `e2e-tests/protractor-conf.js`.\n* The end-to-end tests are found in `e2e-tests/scenarios.js`.\n\nProtractor simulates interaction with our web app and verifies that the application responds\ncorrectly. Therefore, our web server needs to be serving up the application, so that Protractor can\ninteract with it.\n\n**Before starting Protractor, open a separate terminal window and run:**\n\n```\nnpm start\n```\n\nIn addition, since Protractor is built upon WebDriver, we need to ensure that it is installed and\nup-to-date. The `angular-seed` project is configured to do this automatically before running the\nend-to-end tests, so you don't need to worry about it. If you want to manually update the WebDriver,\nyou can run:\n\n```\nnpm run update-webdriver\n```\n\nOnce you have ensured that the development web server hosting our application is up and running, you\ncan run the end-to-end tests using the supplied npm script:\n\n```\nnpm run protractor\n```\n\nThis script will execute the end-to-end tests against the application being hosted on the\ndevelopment server.\n\n**Note:**\nUnder the hood, Protractor uses the [Selenium Standalone Server][selenium], which in turn requires\nthe [Java Development Kit (JDK)][jdk] to be installed on your local machine. Check this by running\n`java -version` from the command line.\n\nIf JDK is not already installed, you can download it [here][jdk-download].\n\n\n## Updating AngularJS and other dependencies\n\nSince the AngularJS framework library code and tools are acquired through package managers (e.g.\nnpm) you can use these tools to easily update the dependencies. Simply run the preconfigured script:\n\n```\nnpm run update-deps\n```\n\nThis will call `npm update` and `npm run copy-libs`, which in turn will find and install the latest\nversions that match the version ranges specified in the `package.json` file.\n\nIf you want to update a dependency to a version newer than what the specificed range would permit,\nyou can change the version range in `package.json` and then run `npm run update-deps` as usual.\n\n\n## Loading AngularJS Asynchronously\n\nThe `angular-seed` project supports loading the framework and application scripts asynchronously.\nThe special `index-async.html` is designed to support this style of loading. For it to work you must\ninject a piece of AngularJS JavaScript into the HTML page. The project has a predefined script to help\ndo this:\n\n```\nnpm run update-index-async\n```\n\nThis will copy the contents of the `angular-loader.js` library file into the `index-async.html`\npage. You can run this every time you update the version of AngularJS that you are using.\n\n\n## Serving the Application Files\n\nWhile AngularJS is client-side-only technology and it is possible to create AngularJS web apps that\ndo not require a backend server at all, we recommend serving the project files using a local\nweb server during development to avoid issues with security restrictions (sandbox) in browsers. The\nsandbox implementation varies between browsers, but quite often prevents things like cookies, XHR,\netc to function properly when an HTML page is opened via the `file://` scheme instead of `http://`.\n\n### Running the App during Development\n\nThe `angular-seed` project comes preconfigured with a local development web server. It is a Node.js\ntool called [http-server][http-server]. You can start this web server with `npm start`, but you may\nchoose to install the tool globally:\n\n```\nsudo npm install -g http-server\n```\n\nThen you can start your own development web server to serve static files from any folder by running:\n\n```\nhttp-server -a localhost -p 8000\n```\n\nAlternatively, you can choose to configure your own web server, such as Apache or Nginx. Just\nconfigure your server to serve the files under the `app/` directory.\n\n### Running the App in Production\n\nThis really depends on how complex your app is and the overall infrastructure of your system, but\nthe general rule is that all you need in production are the files under the `app/` directory.\nEverything else should be omitted.\n\nAngularJS apps are really just a bunch of static HTML, CSS and JavaScript files that need to be\nhosted somewhere they can be accessed by browsers.\n\nIf your AngularJS app is talking to the backend server via XHR or other means, you need to figure\nout what is the best way to host the static files to comply with the same origin policy if\napplicable. Usually this is done by hosting the files by the backend server or through\nreverse-proxying the backend server(s) and web server(s).\n\n\n## Continuous Integration\n\n### Travis CI\n\n[Travis CI][travis] is a continuous integration service, which can monitor GitHub for new commits to\nyour repository and execute scripts such as building the app or running tests. The `angular-seed`\nproject contains a Travis configuration file, `.travis.yml`, which will cause Travis to run your\ntests when you push to GitHub.\n\nYou will need to enable the integration between Travis and GitHub. See the\n[Travis website][travis-docs] for instructions on how to do this.\n\n\n## Contact\n\nFor more information on AngularJS please check out [angularjs.org][angularjs].\n\n\n[angularjs]: https://angularjs.org/\n[git]: https://git-scm.com/\n[http-server]: https://github.com/indexzero/http-server\n[jasmine]: https://jasmine.github.io/\n[jdk]: https://wikipedia.org/wiki/Java_Development_Kit\n[jdk-download]: http://www.oracle.com/technetwork/java/javase/downloads\n[karma]: https://karma-runner.github.io/\n[local-app-url]: http://localhost:8000/index.html\n[node]: https://nodejs.org/\n[npm]: https://www.npmjs.org/\n[protractor]: http://www.protractortest.org/\n[selenium]: http://docs.seleniumhq.org/\n[travis]: https://travis-ci.org/\n[travis-docs]: https://docs.travis-ci.com/user/getting-started\n",
        "releases": []
    }
}