{
    "https://api.github.com/repos/sindresorhus/ky": {
        "forks": 367,
        "watchers": 14141,
        "stars": 14141,
        "languages": {
            "TypeScript": 130449
        },
        "commits": [
            "2024-12-18T13:40:07Z",
            "2024-12-18T01:39:38Z",
            "2024-12-10T21:32:35Z",
            "2024-12-09T23:52:04Z",
            "2024-09-02T19:28:25Z",
            "2024-09-02T15:30:17Z",
            "2024-08-29T10:35:03Z",
            "2024-08-21T19:24:08Z",
            "2024-08-21T14:28:06Z",
            "2024-08-17T11:51:37Z",
            "2024-08-17T11:48:09Z",
            "2024-08-13T09:19:59Z",
            "2024-08-12T23:27:37Z",
            "2024-08-10T21:29:40Z",
            "2024-08-08T13:06:02Z",
            "2024-07-31T22:04:40Z",
            "2024-07-30T16:45:19Z",
            "2024-07-25T19:14:33Z",
            "2024-07-18T10:06:05Z",
            "2024-07-25T18:56:14Z",
            "2024-07-23T14:20:24Z",
            "2024-07-19T18:12:12Z",
            "2024-07-19T16:18:57Z",
            "2024-06-30T15:06:56Z",
            "2024-06-26T13:21:49Z",
            "2024-06-26T13:00:50Z",
            "2024-06-26T08:15:20Z",
            "2024-06-26T07:19:39Z",
            "2024-06-25T11:29:06Z",
            "2024-06-24T18:52:29Z"
        ],
        "creation_date": "2018-09-04T16:26:42Z",
        "contributors": 30,
        "topics": [
            "fetch",
            "http-client",
            "http-request",
            "javascript",
            "js",
            "json",
            "npm-package",
            "request",
            "rest",
            "tiny",
            "whatwg-fetch"
        ],
        "subscribers": 60,
        "readme": "<div align=\"center\">\n\t<br>\n\t<div>\n\t\t<img width=\"600\" height=\"600\" src=\"media/logo.svg\" alt=\"ky\">\n\t</div>\n\t<br>\n\t<br>\n\t<p>\n\t\t<p>\n\t\t\t<sup>\n\t\t\t\tSindre's open source work is supported by the community.<br>Special thanks to:\n\t\t\t</sup>\n\t\t</p>\n\t\t<br>\n\t\t<br>\n\t\t<a href=\"https://logto.io/?ref=sindre\">\n\t\t\t<div>\n\t\t\t\t<picture>\n\t\t\t\t\t<source width=\"200\" media=\"(prefers-color-scheme: dark)\" srcset=\"https://sindresorhus.com/assets/thanks/logto-logo-dark.svg?x\">\n\t\t\t\t\t<source width=\"200\" media=\"(prefers-color-scheme: light)\" srcset=\"https://sindresorhus.com/assets/thanks/logto-logo-light.svg?x\">\n\t\t\t\t\t<img width=\"200\" src=\"https://sindresorhus.com/assets/thanks/logto-logo-light.svg?x\" alt=\"Logto logo\">\n\t\t\t\t</picture>\n\t\t\t</div>\n\t\t\t<b>The better identity infrastructure for developers</b>\n\t\t\t<div>\n\t\t\t\t<sup>Logto is an open-source Auth0 alternative designed for every app.</sup>\n\t\t\t</div>\n\t\t</a>\n\t</p>\n\t<br>\n\t<br>\n\t<br>\n\t<br>\n\t<br>\n\t<br>\n\t<br>\n\t<br>\n</div>\n\n> Ky is a tiny and elegant HTTP client based on the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch)\n\n[![Coverage Status](https://codecov.io/gh/sindresorhus/ky/branch/main/graph/badge.svg)](https://codecov.io/gh/sindresorhus/ky)\n[![](https://badgen.net/bundlephobia/minzip/ky)](https://bundlephobia.com/result?p=ky)\n\nKy targets [modern browsers](#browser-support), Node.js, Bun, and Deno.\n\nIt's just a tiny package with no dependencies.\n\n## Benefits over plain `fetch`\n\n- Simpler API\n- Method shortcuts (`ky.post()`)\n- Treats non-2xx status codes as errors (after redirects)\n- Retries failed requests\n- JSON option\n- Timeout support\n- URL prefix option\n- Instances with custom defaults\n- Hooks\n- TypeScript niceties (e.g. `.json()` supports generics and defaults to `unknown`, not `any`)\n\n## Install\n\n```sh\nnpm install ky\n```\n\n###### CDN\n\n- [jsdelivr](https://cdn.jsdelivr.net/npm/ky/+esm)\n- [unpkg](https://unpkg.com/ky)\n- [esm.sh](https://esm.sh/ky)\n\n## Usage\n\n```js\nimport ky from 'ky';\n\nconst json = await ky.post('https://example.com', {json: {foo: true}}).json();\n\nconsole.log(json);\n//=> `{data: '\ud83e\udd84'}`\n```\n\nWith plain `fetch`, it would be:\n\n```js\nclass HTTPError extends Error {}\n\nconst response = await fetch('https://example.com', {\n\tmethod: 'POST',\n\tbody: JSON.stringify({foo: true}),\n\theaders: {\n\t\t'content-type': 'application/json'\n\t}\n});\n\nif (!response.ok) {\n\tthrow new HTTPError(`Fetch error: ${response.statusText}`);\n}\n\nconst json = await response.json();\n\nconsole.log(json);\n//=> `{data: '\ud83e\udd84'}`\n```\n\nIf you are using [Deno](https://github.com/denoland/deno), import Ky from a URL. For example, using a CDN:\n\n```js\nimport ky from 'https://esm.sh/ky';\n```\n\n## API\n\n### ky(input, options?)\n\nThe `input` and `options` are the same as [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch), with additional `options` available (see below).\n\nReturns a [`Response` object](https://developer.mozilla.org/en-US/docs/Web/API/Response) with [`Body` methods](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#body) added for convenience. So you can, for example, call `ky.get(input).json()` directly without having to await the `Response` first. When called like that, an appropriate `Accept` header will be set depending on the body method used. Unlike the `Body` methods of `window.Fetch`; these will throw an `HTTPError` if the response status is not in the range of `200...299`. Also, `.json()` will return an empty string if body is empty or the response status is `204` instead of throwing a parse error due to an empty body.\n\n```js\nimport ky from 'ky';\n\nconst user = await ky('/api/user').json();\n\nconsole.log(user);\n```\n\n\u2328\ufe0f **TypeScript:** Accepts an optional [type parameter](https://www.typescriptlang.org/docs/handbook/2/generics.html), which defaults to [`unknown`](https://www.typescriptlang.org/docs/handbook/2/functions.html#unknown), and is passed through to the return type of `.json()`.\n\n```ts\nimport ky from 'ky';\n\n// user1 is unknown\nconst user1 = await ky('/api/users/1').json();\n// user2 is a User\nconst user2 = await ky<User>('/api/users/2').json();\n// user3 is a User\nconst user3 = await ky('/api/users/3').json<User>();\n\nconsole.log([user1, user2, user3]);\n```\n\n### ky.get(input, options?)\n### ky.post(input, options?)\n### ky.put(input, options?)\n### ky.patch(input, options?)\n### ky.head(input, options?)\n### ky.delete(input, options?)\n\nSets `options.method` to the method name and makes a request.\n\n\u2328\ufe0f **TypeScript:** Accepts an optional type parameter for use with JSON responses (see [`ky()`](#kyinput-options)).\n\n#### input\n\nType: `string` | `URL` | `Request`\n\nSame as [`fetch` input](https://developer.mozilla.org/en-US/docs/Web/API/Request/Request#input).\n\nWhen using a [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) instance as `input`, any URL altering options (such as `prefixUrl`) will be ignored.\n\n#### options\n\nType: `object`\n\nSame as [`fetch` options](https://developer.mozilla.org/en-US/docs/Web/API/fetch#options), plus the following additional options:\n\n##### method\n\nType: `string`\\\nDefault: `'get'`\n\nHTTP method used to make the request.\n\nInternally, the standard methods (`GET`, `POST`, `PUT`, `PATCH`, `HEAD` and `DELETE`) are uppercased in order to avoid server errors due to case sensitivity.\n\n##### json\n\nType: `object` and any other value accepted by [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify)\n\nShortcut for sending JSON. Use this instead of the `body` option. Accepts any plain object or value, which will be `JSON.stringify()`'d and sent in the body with the correct header set.\n\n##### searchParams\n\nType: `string | object<string, string | number | boolean> | Array<Array<string | number | boolean>> | URLSearchParams`\\\nDefault: `''`\n\nSearch parameters to include in the request URL. Setting this will override all existing search parameters in the input URL.\n\nAccepts any value supported by [`URLSearchParams()`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/URLSearchParams).\n\n##### prefixUrl\n\nType: `string | URL`\n\nA prefix to prepend to the `input` URL when making the request. It can be any valid URL, either relative or absolute. A trailing slash `/` is optional and will be added automatically, if needed, when it is joined with `input`. Only takes effect when `input` is a string. The `input` argument cannot start with a slash `/` when using this option.\n\nUseful when used with [`ky.extend()`](#kyextenddefaultoptions) to create niche-specific Ky-instances.\n\n```js\nimport ky from 'ky';\n\n// On https://example.com\n\nconst response = await ky('unicorn', {prefixUrl: '/api'});\n//=> 'https://example.com/api/unicorn'\n\nconst response2 = await ky('unicorn', {prefixUrl: 'https://cats.com'});\n//=> 'https://cats.com/unicorn'\n```\n\nNotes:\n - After `prefixUrl` and `input` are joined, the result is resolved against the [base URL](https://developer.mozilla.org/en-US/docs/Web/API/Node/baseURI) of the page (if any).\n - Leading slashes in `input` are disallowed when using this option to enforce consistency and avoid confusion about how the `input` URL is handled, given that `input` will not follow the normal URL resolution rules when `prefixUrl` is being used, which changes the meaning of a leading slash.\n\n##### retry\n\nType: `object | number`\\\nDefault:\n- `limit`: `2`\n- `methods`: `get` `put` `head` `delete` `options` `trace`\n- `statusCodes`: [`408`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/408) [`413`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413) [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) [`500`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500) [`502`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502) [`503`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503) [`504`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504)\n- `afterStatusCodes`: [`413`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413), [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429), [`503`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503)\n- `maxRetryAfter`: `undefined`\n- `backoffLimit`: `undefined`\n- `delay`: `attemptCount => 0.3 * (2 ** (attemptCount - 1)) * 1000`\n\nAn object representing `limit`, `methods`, `statusCodes`, `afterStatusCodes`, and `maxRetryAfter` fields for maximum retry count, allowed methods, allowed status codes, status codes allowed to use the [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time, and maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time.\n\nIf `retry` is a number, it will be used as `limit` and other defaults will remain in place.\n\nIf the response provides an HTTP status contained in `afterStatusCodes`, Ky will wait until the date, timeout, or timestamp given in the [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header has passed to retry the request. If `Retry-After` is missing, the non-standard [`RateLimit-Reset`](https://www.ietf.org/archive/id/draft-polli-ratelimit-headers-05.html#section-3.3) header is used in its place as a fallback. If the provided status code is not in the list, the [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header will be ignored.\n\nIf `maxRetryAfter` is set to `undefined`, it will use `options.timeout`. If [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will use `maxRetryAfter`.\n\nThe `backoffLimit` option is the upper limit of the delay per retry in milliseconds.\nTo clamp the delay, set `backoffLimit` to 1000, for example.\nBy default, the delay is calculated with `0.3 * (2 ** (attemptCount - 1)) * 1000`. The delay increases exponentially.\n\nThe `delay` option can be used to change how the delay between retries is calculated. The function receives one parameter, the attempt count, starting at `1`.\n\nRetries are not triggered following a [timeout](#timeout).\n\n```js\nimport ky from 'ky';\n\nconst json = await ky('https://example.com', {\n\tretry: {\n\t\tlimit: 10,\n\t\tmethods: ['get'],\n\t\tstatusCodes: [413],\n\t\tbackoffLimit: 3000\n\t}\n}).json();\n```\n\n##### timeout\n\nType: `number | false`\\\nDefault: `10000`\n\nTimeout in milliseconds for getting a response, including any retries. Can not be greater than 2147483647.\nIf set to `false`, there will be no timeout.\n\n##### hooks\n\nType: `object<string, Function[]>`\\\nDefault: `{beforeRequest: [], beforeRetry: [], afterResponse: []}`\n\nHooks allow modifications during the request lifecycle. Hook functions may be async and are run serially.\n\n###### hooks.beforeRequest\n\nType: `Function[]`\\\nDefault: `[]`\n\nThis hook enables you to modify the request right before it is sent. Ky will make no further changes to the request after this. The hook function receives `request` and `options` as arguments. You could, for example, modify the `request.headers` here.\n\nThe hook can return a [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) to replace the outgoing request, or return a [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response) to completely avoid making an HTTP request. This can be used to mock a request, check an internal cache, etc. An **important** consideration when returning a request or response from this hook is that any remaining `beforeRequest` hooks will be skipped, so you may want to only return them from the last hook.\n\n```js\nimport ky from 'ky';\n\nconst api = ky.extend({\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\trequest => {\n\t\t\t\trequest.headers.set('X-Requested-With', 'ky');\n\t\t\t}\n\t\t]\n\t}\n});\n\nconst response = await api.get('https://example.com/api/users');\n```\n\n###### hooks.beforeRetry\n\nType: `Function[]`\\\nDefault: `[]`\n\nThis hook enables you to modify the request right before retry. Ky will make no further changes to the request after this. The hook function receives an object with the normalized request and options, an error instance, and the retry count. You could, for example, modify `request.headers` here.\n\nIf the request received a response, the error will be of type `HTTPError` and the `Response` object will be available at `error.response`. Be aware that some types of errors, such as network errors, inherently mean that a response was not received. In that case, the error will not be an instance of `HTTPError`.\n\nYou can prevent Ky from retrying the request by throwing an error. Ky will not handle it in any way and the error will be propagated to the request initiator. The rest of the `beforeRetry` hooks will not be called in this case. Alternatively, you can return the [`ky.stop`](#kystop) symbol to do the same thing but without propagating an error (this has some limitations, see `ky.stop` docs for details).\n\n```js\nimport ky from 'ky';\n\nconst response = await ky('https://example.com', {\n\thooks: {\n\t\tbeforeRetry: [\n\t\t\tasync ({request, options, error, retryCount}) => {\n\t\t\t\tconst token = await ky('https://example.com/refresh-token');\n\t\t\t\trequest.headers.set('Authorization', `token ${token}`);\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n###### hooks.beforeError\n\nType: `Function[]`\\\nDefault: `[]`\n\nThis hook enables you to modify the `HTTPError` right before it is thrown. The hook function receives a `HTTPError` as an argument and should return an instance of `HTTPError`.\n\n```js\nimport ky from 'ky';\n\nawait ky('https://example.com', {\n\thooks: {\n\t\tbeforeError: [\n\t\t\terror => {\n\t\t\t\tconst {response} = error;\n\t\t\t\tif (response && response.body) {\n\t\t\t\t\terror.name = 'GitHubError';\n\t\t\t\t\terror.message = `${response.body.message} (${response.status})`;\n\t\t\t\t}\n\n\t\t\t\treturn error;\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n###### hooks.afterResponse\n\nType: `Function[]`\\\nDefault: `[]`\n\nThis hook enables you to read and optionally modify the response. The hook function receives normalized request, options, and a clone of the response as arguments. The return value of the hook function will be used by Ky as the response object if it's an instance of [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response).\n\n```js\nimport ky from 'ky';\n\nconst response = await ky('https://example.com', {\n\thooks: {\n\t\tafterResponse: [\n\t\t\t(_request, _options, response) => {\n\t\t\t\t// You could do something with the response, for example, logging.\n\t\t\t\tlog(response);\n\n\t\t\t\t// Or return a `Response` instance to overwrite the response.\n\t\t\t\treturn new Response('A different response', {status: 200});\n\t\t\t},\n\n\t\t\t// Or retry with a fresh token on a 403 error\n\t\t\tasync (request, options, response) => {\n\t\t\t\tif (response.status === 403) {\n\t\t\t\t\t// Get a fresh token\n\t\t\t\t\tconst token = await ky('https://example.com/token').text();\n\n\t\t\t\t\t// Retry with the token\n\t\t\t\t\trequest.headers.set('Authorization', `token ${token}`);\n\n\t\t\t\t\treturn ky(request);\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n##### throwHttpErrors\n\nType: `boolean`\\\nDefault: `true`\n\nThrow an `HTTPError` when, after following redirects, the response has a non-2xx status code. To also throw for redirects instead of following them, set the [`redirect`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters) option to `'manual'`.\n\nSetting this to `false` may be useful if you are checking for resource availability and are expecting error responses.\n\nNote: If `false`, error responses are considered successful and the request will not be retried.\n\n##### onDownloadProgress\n\nType: `Function`\n\nDownload progress event handler.\n\nThe function receives a `progress` and `chunk` argument:\n- The `progress` object contains the following elements: `percent`, `transferredBytes` and `totalBytes`. If it's not possible to retrieve the body size, `totalBytes` will be `0`.\n- The `chunk` argument is an instance of `Uint8Array`. It's empty for the first call.\n\n```js\nimport ky from 'ky';\n\nconst response = await ky('https://example.com', {\n\tonDownloadProgress: (progress, chunk) => {\n\t\t// Example output:\n\t\t// `0% - 0 of 1271 bytes`\n\t\t// `100% - 1271 of 1271 bytes`\n\t\tconsole.log(`${progress.percent * 100}% - ${progress.transferredBytes} of ${progress.totalBytes} bytes`);\n\t}\n});\n```\n\n##### parseJson\n\nType: `Function`\\\nDefault: `JSON.parse()`\n\nUser-defined JSON-parsing function.\n\nUse-cases:\n1. Parse JSON via the [`bourne` package](https://github.com/hapijs/bourne) to protect from prototype pollution.\n2. Parse JSON with [`reviver` option of `JSON.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse).\n\n```js\nimport ky from 'ky';\nimport bourne from '@hapijs/bourne';\n\nconst json = await ky('https://example.com', {\n\tparseJson: text => bourne(text)\n}).json();\n```\n\n##### stringifyJson\n\nType: `Function`\\\nDefault: `JSON.stringify()`\n\nUser-defined JSON-stringifying function.\n\nUse-cases:\n1. Stringify JSON with a custom `replacer` function.\n\n```js\nimport ky from 'ky';\nimport {DateTime} from 'luxon';\n\nconst json = await ky('https://example.com', {\n\tstringifyJson: data => JSON.stringify(data, (key, value) => {\n\t\tif (key.endsWith('_at')) {\n\t\t\treturn DateTime.fromISO(value).toSeconds();\n\t\t}\n\n\t\treturn value;\n\t})\n}).json();\n```\n\n##### fetch\n\nType: `Function`\\\nDefault: `fetch`\n\nUser-defined `fetch` function.\nHas to be fully compatible with the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) standard.\n\nUse-cases:\n1. Use custom `fetch` implementations like [`isomorphic-unfetch`](https://www.npmjs.com/package/isomorphic-unfetch).\n2. Use the `fetch` wrapper function provided by some frameworks that use server-side rendering (SSR).\n\n```js\nimport ky from 'ky';\nimport fetch from 'isomorphic-unfetch';\n\nconst json = await ky('https://example.com', {fetch}).json();\n```\n\n### ky.extend(defaultOptions)\n\nCreate a new `ky` instance with some defaults overridden with your own.\n\nIn contrast to `ky.create()`, `ky.extend()` inherits defaults from its parent.\n\nYou can pass headers as a `Headers` instance or a plain object.\n\nYou can remove a header with `.extend()` by passing the header with an `undefined` value.\nPassing `undefined` as a string removes the header only if it comes from a `Headers` instance.\n\nSimilarly, you can remove existing `hooks` entries by extending the hook with an explicit `undefined`.\n\n```js\nimport ky from 'ky';\n\nconst url = 'https://sindresorhus.com';\n\nconst original = ky.create({\n\theaders: {\n\t\trainbow: 'rainbow',\n\t\tunicorn: 'unicorn'\n\t},\n\thooks: {\n\t\tbeforeRequest: [ () => console.log('before 1') ],\n\t\tafterResponse: [ () => console.log('after 1') ],\n\t},\n});\n\nconst extended = original.extend({\n\theaders: {\n\t\trainbow: undefined\n\t},\n\thooks: {\n\t\tbeforeRequest: undefined,\n\t\tafterResponse: [ () => console.log('after 2') ],\n\t}\n});\n\nconst response = await extended(url).json();\n//=> after 1\n//=> after 2\n\nconsole.log('rainbow' in response);\n//=> false\n\nconsole.log('unicorn' in response);\n//=> true\n```\n\nYou can also refer to parent defaults by providing a function to `.extend()`.\n\n```js\nimport ky from 'ky';\n\nconst api = ky.create({prefixUrl: 'https://example.com/api'});\n\nconst usersApi = api.extend((options) => ({prefixUrl: `${options.prefixUrl}/users`}));\n\nconst response = await usersApi.get('123');\n//=> 'https://example.com/api/users/123'\n\nconst response = await api.get('version');\n//=> 'https://example.com/api/version'\n```\n\n### ky.create(defaultOptions)\n\nCreate a new Ky instance with complete new defaults.\n\n```js\nimport ky from 'ky';\n\n// On https://my-site.com\n\nconst api = ky.create({prefixUrl: 'https://example.com/api'});\n\nconst response = await api.get('users/123');\n//=> 'https://example.com/api/users/123'\n\nconst response = await api.get('/status', {prefixUrl: ''});\n//=> 'https://my-site.com/status'\n```\n\n#### defaultOptions\n\nType: `object`\n\n### ky.stop\n\nA `Symbol` that can be returned by a `beforeRetry` hook to stop the retry. This will also short circuit the remaining `beforeRetry` hooks.\n\nNote: Returning this symbol makes Ky abort and return with an `undefined` response. Be sure to check for a response before accessing any properties on it or use [optional chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining). It is also incompatible with body methods, such as `.json()` or `.text()`, because there is no response to parse. In general, we recommend throwing an error instead of returning this symbol, as that will cause Ky to abort and then throw, which avoids these limitations.\n\nA valid use-case for `ky.stop` is to prevent retries when making requests for side effects, where the returned data is not important. For example, logging client activity to the server.\n\n```js\nimport ky from 'ky';\n\nconst options = {\n\thooks: {\n\t\tbeforeRetry: [\n\t\t\tasync ({request, options, error, retryCount}) => {\n\t\t\t\tconst shouldStopRetry = await ky('https://example.com/api');\n\t\t\t\tif (shouldStopRetry) {\n\t\t\t\t\treturn ky.stop;\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n};\n\n// Note that response will be `undefined` in case `ky.stop` is returned.\nconst response = await ky.post('https://example.com', options);\n\n// Using `.text()` or other body methods is not supported.\nconst text = await ky('https://example.com', options).text();\n```\n\n### HTTPError\n\nExposed for `instanceof` checks. The error has a `response` property with the [`Response` object](https://developer.mozilla.org/en-US/docs/Web/API/Response), `request` property with the [`Request` object](https://developer.mozilla.org/en-US/docs/Web/API/Request), and `options` property with normalized options (either passed to `ky` when creating an instance with `ky.create()` or directly when performing the request).\n\nIf you need to read the actual response when an `HTTPError` has occurred, call the respective parser method on the response object. For example:\n\n```js\ntry {\n\tawait ky('https://example.com').json();\n} catch (error) {\n\tif (error.name === 'HTTPError') {\n\t\tconst errorJson = await error.response.json();\n\t}\n}\n```\n\n\u2328\ufe0f **TypeScript:** Accepts an optional [type parameter](https://www.typescriptlang.org/docs/handbook/2/generics.html), which defaults to [`unknown`](https://www.typescriptlang.org/docs/handbook/2/functions.html#unknown), and is passed through to the return type of `error.response.json()`.\n\n### TimeoutError\n\nThe error thrown when the request times out. It has a `request` property with the [`Request` object](https://developer.mozilla.org/en-US/docs/Web/API/Request).\n\n## Tips\n\n### Sending form data\n\nSending form data in Ky is identical to `fetch`. Just pass a [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) instance to the `body` option. The `Content-Type` header will be automatically set to `multipart/form-data`.\n\n```js\nimport ky from 'ky';\n\n// `multipart/form-data`\nconst formData = new FormData();\nformData.append('food', 'fries');\nformData.append('drink', 'icetea');\n\nconst response = await ky.post(url, {body: formData});\n```\n\nIf you want to send the data in `application/x-www-form-urlencoded` format, you will need to encode the data with [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams).\n\n```js\nimport ky from 'ky';\n\n// `application/x-www-form-urlencoded`\nconst searchParams = new URLSearchParams();\nsearchParams.set('food', 'fries');\nsearchParams.set('drink', 'icetea');\n\nconst response = await ky.post(url, {body: searchParams});\n```\n\n### Setting a custom `Content-Type`\n\nKy automatically sets an appropriate [`Content-Type`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type) header for each request based on the data in the request body. However, some APIs require custom, non-standard content types, such as `application/x-amz-json-1.1`. Using the `headers` option, you can manually override the content type.\n\n```js\nimport ky from 'ky';\n\nconst json = await ky.post('https://example.com', {\n\theaders: {\n\t\t'content-type': 'application/json'\n\t},\n\tjson: {\n\t\tfoo: true\n\t},\n}).json();\n\nconsole.log(json);\n//=> `{data: '\ud83e\udd84'}`\n```\n\n### Cancellation\n\nFetch (and hence Ky) has built-in support for request cancellation through the [`AbortController` API](https://developer.mozilla.org/en-US/docs/Web/API/AbortController). [Read more.](https://developers.google.com/web/updates/2017/09/abortable-fetch)\n\nExample:\n\n```js\nimport ky from 'ky';\n\nconst controller = new AbortController();\nconst {signal} = controller;\n\nsetTimeout(() => {\n\tcontroller.abort();\n}, 5000);\n\ntry {\n\tconsole.log(await ky(url, {signal}).text());\n} catch (error) {\n\tif (error.name === 'AbortError') {\n\t\tconsole.log('Fetch aborted');\n\t} else {\n\t\tconsole.error('Fetch error:', error);\n\t}\n}\n```\n\n## FAQ\n\n#### How do I use this in Node.js?\n\nNode.js 18 and later supports `fetch` natively, so you can just use this package directly.\n\n#### How do I use this with a web app (React, Vue.js, etc.) that uses server-side rendering (SSR)?\n\nSame as above.\n\n#### How do I test a browser library that uses this?\n\nEither use a test runner that can run in the browser, like Mocha, or use [AVA](https://avajs.dev) with `ky-universal`. [Read more.](https://github.com/sindresorhus/ky-universal#faq)\n\n#### How do I use this without a bundler like Webpack?\n\nMake sure your code is running as a JavaScript module (ESM), for example by using a `<script type=\"module\">` tag in your HTML document. Then Ky can be imported directly by that module without a bundler or other tools.\n\n```html\n<script type=\"module\">\nimport ky from 'https://unpkg.com/ky/distribution/index.js';\n\nconst json = await ky('https://jsonplaceholder.typicode.com/todos/1').json();\n\nconsole.log(json.title);\n//=> 'delectus aut autem'\n</script>\n```\n\n#### How is it different from [`got`](https://github.com/sindresorhus/got)\n\nSee my answer [here](https://twitter.com/sindresorhus/status/1037406558945042432). Got is maintained by the same people as Ky.\n\n#### How is it different from [`axios`](https://github.com/axios/axios)?\n\nSee my answer [here](https://twitter.com/sindresorhus/status/1037763588826398720).\n\n#### How is it different from [`r2`](https://github.com/mikeal/r2)?\n\nSee my answer in [#10](https://github.com/sindresorhus/ky/issues/10).\n\n#### What does `ky` mean?\n\nIt's just a random short npm package name I managed to get. It does, however, have a meaning in Japanese:\n\n> A form of text-able slang, KY is an abbreviation for \u7a7a\u6c17\u8aad\u3081\u306a\u3044 (kuuki yomenai), which literally translates into \u201ccannot read the air.\u201d It's a phrase applied to someone who misses the implied meaning.\n\n## Browser support\n\nThe latest version of Chrome, Firefox, and Safari.\n\n## Node.js support\n\nNode.js 18 and later.\n\n## Related\n\n- [fetch-extras](https://github.com/sindresorhus/fetch-extras) - Useful utilities for working with Fetch\n- [got](https://github.com/sindresorhus/got) - Simplified HTTP requests for Node.js\n- [ky-hooks-change-case](https://github.com/alice-health/ky-hooks-change-case) - Ky hooks to modify cases on requests and responses of objects\n\n## Maintainers\n\n- [Sindre Sorhus](https://github.com/sindresorhus)\n- [Szymon Marczak](https://github.com/szmarczak)\n- [Seth Holladay](https://github.com/sholladay)\n",
        "releases": [
            {
                "name": "",
                "date": "2024-12-18T15:07:55Z"
            },
            {
                "name": "",
                "date": "2024-12-10T21:44:32Z"
            },
            {
                "name": "",
                "date": "2024-09-02T19:47:21Z"
            },
            {
                "name": "",
                "date": "2024-08-21T19:26:17Z"
            },
            {
                "name": "",
                "date": "2024-08-17T11:52:02Z"
            },
            {
                "name": "",
                "date": "2024-08-13T09:22:38Z"
            },
            {
                "name": "",
                "date": "2024-07-25T19:18:08Z"
            },
            {
                "name": "",
                "date": "2024-06-26T13:22:58Z"
            },
            {
                "name": "",
                "date": "2024-05-31T17:21:00Z"
            },
            {
                "name": "",
                "date": "2024-04-22T07:35:52Z"
            },
            {
                "name": "",
                "date": "2024-03-24T06:54:47Z"
            },
            {
                "name": "",
                "date": "2024-02-29T17:13:40Z"
            },
            {
                "name": "",
                "date": "2024-02-25T16:12:38Z"
            },
            {
                "name": "",
                "date": "2024-01-07T12:46:49Z"
            },
            {
                "name": "",
                "date": "2023-11-01T19:44:02Z"
            },
            {
                "name": "",
                "date": "2023-10-29T08:50:28Z"
            },
            {
                "name": "",
                "date": "2023-10-24T15:08:18Z"
            },
            {
                "name": "",
                "date": "2023-10-17T08:31:29Z"
            },
            {
                "name": "",
                "date": "2023-09-05T20:12:24Z"
            },
            {
                "name": "",
                "date": "2023-09-01T12:11:14Z"
            },
            {
                "name": "",
                "date": "2023-03-16T18:34:49Z"
            },
            {
                "name": "",
                "date": "2023-01-13T09:29:28Z"
            },
            {
                "name": "",
                "date": "2022-12-29T13:14:38Z"
            },
            {
                "name": "",
                "date": "2022-12-12T22:37:36Z"
            },
            {
                "name": "",
                "date": "2022-11-01T10:44:18Z"
            },
            {
                "name": "",
                "date": "2022-10-31T14:18:47Z"
            },
            {
                "name": "",
                "date": "2022-10-31T04:06:52Z"
            },
            {
                "name": "",
                "date": "2022-10-12T10:26:17Z"
            },
            {
                "name": "",
                "date": "2022-09-03T17:34:34Z"
            },
            {
                "name": "",
                "date": "2022-09-02T14:29:18Z"
            },
            {
                "name": "",
                "date": "2022-07-21T08:46:43Z"
            },
            {
                "name": "",
                "date": "2022-06-23T22:25:46Z"
            },
            {
                "name": "",
                "date": "2022-03-02T09:12:07Z"
            },
            {
                "name": "",
                "date": "2022-02-15T11:11:30Z"
            },
            {
                "name": "",
                "date": "2021-11-08T12:12:27Z"
            },
            {
                "name": "",
                "date": "2021-10-13T08:39:55Z"
            },
            {
                "name": "",
                "date": "2021-05-31T13:51:48Z"
            },
            {
                "name": "",
                "date": "2021-05-31T12:01:59Z"
            },
            {
                "name": "",
                "date": "2021-05-28T16:39:02Z"
            },
            {
                "name": "",
                "date": "2021-05-25T13:40:35Z"
            },
            {
                "name": "",
                "date": "2021-05-14T13:35:01Z"
            },
            {
                "name": "",
                "date": "2021-05-04T06:51:36Z"
            },
            {
                "name": "",
                "date": "2021-02-20T12:55:28Z"
            },
            {
                "name": "",
                "date": "2021-01-08T08:23:51Z"
            },
            {
                "name": "",
                "date": "2020-12-08T05:10:52Z"
            },
            {
                "name": "",
                "date": "2020-11-14T23:40:54Z"
            },
            {
                "name": "",
                "date": "2020-09-28T19:45:06Z"
            },
            {
                "name": "",
                "date": "2020-07-21T07:23:13Z"
            },
            {
                "name": "",
                "date": "2020-07-17T13:45:56Z"
            },
            {
                "name": "",
                "date": "2020-07-12T13:45:05Z"
            },
            {
                "name": "",
                "date": "2020-05-16T10:48:54Z"
            },
            {
                "name": "",
                "date": "2020-04-17T13:06:56Z"
            },
            {
                "name": "",
                "date": "2020-03-06T15:28:39Z"
            },
            {
                "name": "",
                "date": "2020-02-27T18:30:23Z"
            },
            {
                "name": "",
                "date": "2020-02-02T19:23:24Z"
            },
            {
                "name": "",
                "date": "2020-01-19T07:33:29Z"
            },
            {
                "name": "",
                "date": "2019-11-26T06:24:06Z"
            },
            {
                "name": "",
                "date": "2019-11-15T08:51:51Z"
            },
            {
                "name": "",
                "date": "2019-10-03T06:33:21Z"
            },
            {
                "name": "",
                "date": "2019-09-09T16:38:18Z"
            },
            {
                "name": "",
                "date": "2019-09-03T17:51:31Z"
            },
            {
                "name": "",
                "date": "2019-08-12T21:04:46Z"
            },
            {
                "name": "",
                "date": "2019-07-26T23:58:28Z"
            },
            {
                "name": "",
                "date": "2019-06-07T07:26:27Z"
            },
            {
                "name": "",
                "date": "2019-05-10T15:35:44Z"
            },
            {
                "name": "",
                "date": "2019-04-19T04:11:55Z"
            },
            {
                "name": "",
                "date": "2019-04-09T19:07:22Z"
            },
            {
                "name": "",
                "date": "2019-02-22T04:35:44Z"
            },
            {
                "name": "",
                "date": "2019-02-09T04:00:57Z"
            },
            {
                "name": "",
                "date": "2019-01-28T18:09:35Z"
            },
            {
                "name": "",
                "date": "2019-01-20T08:06:55Z"
            },
            {
                "name": "",
                "date": "2019-01-08T06:59:00Z"
            },
            {
                "name": "",
                "date": "2018-12-29T15:08:42Z"
            },
            {
                "name": "",
                "date": "2018-11-06T05:24:58Z"
            },
            {
                "name": "",
                "date": "2018-11-02T04:50:44Z"
            },
            {
                "name": "",
                "date": "2018-10-10T03:57:11Z"
            },
            {
                "name": "",
                "date": "2018-09-29T18:39:38Z"
            },
            {
                "name": "",
                "date": "2018-09-17T05:15:39Z"
            }
        ]
    }
}