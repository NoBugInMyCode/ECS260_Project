{
    "https://api.github.com/repos/kornia/kornia": {
        "forks": 983,
        "watchers": 10155,
        "stars": 10155,
        "languages": {
            "Python": 5592235,
            "Dockerfile": 4186,
            "Shell": 3032,
            "Makefile": 1989,
            "Jsonnet": 984,
            "BitBake": 751
        },
        "commits": [
            "2025-01-20T22:51:17Z",
            "2025-01-18T07:31:09Z",
            "2025-01-13T22:15:24Z",
            "2025-01-11T05:09:55Z",
            "2025-01-06T23:30:25Z",
            "2025-01-02T13:10:30Z",
            "2024-12-31T10:24:14Z",
            "2024-12-25T18:31:19Z",
            "2024-12-23T12:52:15Z",
            "2024-12-18T17:33:45Z",
            "2024-12-18T16:42:21Z",
            "2024-12-18T13:20:33Z",
            "2024-12-13T09:35:55Z",
            "2024-12-12T21:19:10Z",
            "2024-12-09T21:57:39Z",
            "2024-12-08T19:16:12Z",
            "2024-12-08T07:43:38Z",
            "2024-12-08T07:41:43Z",
            "2024-12-08T07:40:13Z",
            "2024-12-06T09:15:07Z",
            "2024-12-04T07:18:18Z",
            "2024-12-04T07:11:40Z",
            "2024-11-27T07:41:22Z",
            "2024-11-05T09:26:35Z",
            "2024-11-05T07:33:49Z",
            "2024-11-04T09:13:12Z",
            "2024-11-04T08:56:36Z",
            "2024-11-02T09:26:51Z",
            "2024-11-02T06:22:04Z",
            "2024-10-31T16:16:00Z"
        ],
        "creation_date": "2018-08-22T10:31:37Z",
        "contributors": 30,
        "topics": [
            "artificial-intelligence",
            "computer-vision",
            "deep-learning",
            "image-processing",
            "machine-learning",
            "neural-network",
            "python",
            "pytorch",
            "robotics",
            "spatial-ai"
        ],
        "subscribers": 129,
        "readme": "<div align=\"center\">\n<p align=\"center\">\n  <img width=\"55%\" src=\"https://github.com/kornia/data/raw/main/kornia_banner_pixie.png\" />\n</p>\n\n---\n\nEnglish | [\u7b80\u4f53\u4e2d\u6587](README_zh-CN.md)\n\n<!-- prettier-ignore -->\n<a href=\"https://kornia.readthedocs.io\">Docs</a> \u2022\n<a href=\"https://colab.sandbox.google.com/github/kornia/tutorials/blob/master/nbs/hello_world_tutorial.ipynb\">Try it Now</a> \u2022\n<a href=\"https://kornia.github.io/tutorials/\">Tutorials</a> \u2022\n<a href=\"https://github.com/kornia/kornia-examples\">Examples</a> \u2022\n<a href=\"https://kornia.github.io//kornia-blog\">Blog</a> \u2022\n<a href=\"https://discord.gg/HfnywwpBnD\">Community</a>\n\n[![PyPI version](https://badge.fury.io/py/kornia.svg)](https://pypi.org/project/kornia)\n[![Downloads](https://static.pepy.tech/badge/kornia)](https://pepy.tech/project/kornia)\n[![Discord](https://img.shields.io/badge/Discord-5865F2?logo=discord&logoColor=white)](https://discord.gg/HfnywwpBnD)\n[![Twitter](https://img.shields.io/twitter/follow/kornia_foss?style=social)](https://twitter.com/kornia_foss)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](LICENCE)\n\n</p>\n</div>\n\n**Kornia** is a differentiable computer vision library that provides a rich set of differentiable image processing and geometric vision algorithms. Built on top of [PyTorch](https://pytorch.org), Kornia integrates seamlessly into existing AI workflows, allowing you to leverage powerful [batch transformations](), [auto-differentiation]() and [GPU acceleration](). Whether you\u2019re working on image transformations, augmentations, or AI-driven image processing, Kornia equips you with the tools you need to bring your ideas to life.\n\n## Key Components\n1. **Differentiable Image Processing**<br>\n  Kornia provides a comprehensive suite of image processing operators, all differentiable and ready to integrate into deep learning pipelines.\n    - **Filters**: Gaussian, Sobel, Median, Box Blur, etc.\n    - **Transformations**: Affine, Homography, Perspective, etc.\n    - **Enhancements**: Histogram Equalization, CLAHE, Gamma Correction, etc.\n    - **Edge Detection**: Canny, Laplacian, Sobel, etc.\n    - ... check our [docs](https://kornia.readthedocs.io) for more.\n2. **Advanced Augmentations**<br>\nPerform powerful data augmentation with Kornia\u2019s built-in functions, ideal for training AI models with complex augmentation pipelines.\n    - **Augmentation Pipeline**: AugmentationSequential, PatchSequential, VideoSequential, etc.\n    - **Automatic Augmentation**: AutoAugment, RandAugment, TrivialAugment.\n3. **AI Models**<br>\nLeverage pre-trained AI models optimized for a variety of vision tasks, all within the Kornia ecosystem.\n    - **Face Detection**: YuNet\n    - **Feature Matching**: LoFTR, LightGlue\n    - **Feature Descriptor**: DISK, DeDoDe, SOLD2\n    - **Segmentation**: SAM\n    - **Classification**: MobileViT, VisionTransformer.\n\n<details>\n<summary>See here for some of the methods that we support! (>500 ops in total !)</summary>\n\n| **Category**               | **Methods/Models**                                                                                                   |\n|----------------------------|---------------------------------------------------------------------------------------------------------------------|\n| **Image Processing**        | - Color conversions (RGB, Grayscale, HSV, etc.)<br>- Geometric transformations (Affine, Homography, Resizing, etc.)<br>- Filtering (Gaussian blur, Median blur, etc.)<br>- Edge detection (Sobel, Canny, etc.)<br>- Morphological operations (Erosion, Dilation, etc.)                                 |\n| **Augmentation**            | - Random cropping, Erasing<br> - Random geometric transformations (Affine, flipping, Fish Eye, Perspecive, Thin plate spline, Elastic)<br>- Random noises (Gaussian, Median, Motion, Box, Rain, Snow, Salt and Pepper)<br>- Random color jittering (Contrast, Brightness, CLAHE, Equalize, Gamma, Hue, Invert, JPEG, Plasma, Posterize, Saturation, Sharpness, Solarize)<br> - Random MixUp, CutMix, Mosaic, Transplantation, etc.                  |\n| **Feature Detection**       | - Detector (Harris, GFTT, Hessian, DoG, KeyNet, DISK and DeDoDe)<br> - Descriptor (SIFT, HardNet, TFeat, HyNet, SOSNet, and LAFDescriptor)<br>- Matching (nearest neighbor, mutual nearest neighbor, geometrically aware matching, AdaLAM LightGlue, and LoFTR)                    |\n| **Geometry**                | - Camera models and calibration<br>- Stereo vision (epipolar geometry, disparity, etc.)<br>- Homography estimation<br>- Depth estimation from disparity<br>- 3D transformations                |\n| **Deep Learning Layers**    | - Custom convolution layers<br>- Recurrent layers for vision tasks<br>- Loss functions (e.g., SSIM, PSNR, etc.)<br>- Vision-specific optimizers                                        |\n| **Photometric Functions**   | - Photometric loss functions<br>- Photometric augmentations                                                                                           |\n| **Filtering**               | - Bilateral filtering<br>- DexiNed<br>- Dissolving<br>- Guided Blur<br>- Laplacian<br>- Gaussian<br>- Non-local means<br>- Sobel<br>- Unsharp masking                                                                                            |\n| **Color**                   | - Color space conversions<br>- Brightness/contrast adjustment<br>- Gamma correction                                                                       |\n| **Stereo Vision**           | - Disparity estimation<br>- Depth estimation<br>- Rectification                                                                                           |\n| **Image Registration**      | - Affine and homography-based registration<br>- Image alignment using feature matching                                                                     |\n| **Pose Estimation**         | - Essential and Fundamental matrix estimation<br>- PnP problem solvers<br>- Pose refinement                                                                |\n| **Optical Flow**            | - Farneback optical flow<br>- Dense optical flow<br>- Sparse optical flow                                                                                  |\n| **3D Vision**               | - Depth estimation<br>- Point cloud operations<br>- Nerf<br>                                                                |\n| **Image Denoising**         | - Gaussian noise removal<br>- Poisson noise removal                                                                                                        |\n| **Edge Detection**          | - Sobel operator<br>- Canny edge detection                                                                                                                 |                                               |\n| **Transformations**         | - Rotation<br>- Translation<br>- Scaling<br>- Shearing                                                                                                     |\n| **Loss Functions**          | - SSIM (Structural Similarity Index Measure)<br>- PSNR (Peak Signal-to-Noise Ratio)<br>- Cauchy<br>- Charbonnier<br>- Depth Smooth<br>- Dice<br>- Hausdorff<br>- Tversky<br>- Welsch<br>                                   |                                                                                             |\n| **Morphological Operations**| - Dilation<br>- Erosion<br>- Opening<br>- Closing                                                                                                          |\n\n</details>\n\n## Sponsorship\n\nKornia is an open-source project that is developed and maintained by volunteers. Whether you're using it for research or commercial purposes, consider sponsoring or collaborating with us. Your support will help ensure Kornia's growth and ongoing innovation. Reach out to us today and be a part of shaping the future of this exciting initiative!\n\n<a href=\"https://opencollective.com/kornia/donate\" target=\"_blank\">\n  <img src=\"https://opencollective.com/webpack/donate/button@2x.png?color=blue\" width=300 />\n</a>\n\n## Installation\n\n[![PyPI python](https://img.shields.io/pypi/pyversions/kornia)](https://pypi.org/project/kornia)\n[![pytorch](https://img.shields.io/badge/PyTorch_1.9.1+-ee4c2c?logo=pytorch&logoColor=white)](https://pytorch.org/get-started/locally/)\n\n### From pip\n\n  ```bash\n  pip install kornia\n  ```\n\n<details>\n  <summary>Other installation options</summary>\n\n#### From source with editable mode\n\n  ```bash\n  pip install -e .\n  ```\n\n#### From Github url (latest version)\n\n  ```bash\n  pip install git+https://github.com/kornia/kornia\n  ```\n\n</details>\n\n## Quick Start\n\nKornia is not just another computer vision library \u2014 it's your gateway to effortless Computer Vision and AI.\n\n<details>\n<summary>Get started with Kornia image transformation and augmentation!</summary>\n\n```python\nimport numpy as np\nimport kornia_rs as kr\n\nfrom kornia.augmentation import AugmentationSequential, RandomAffine, RandomBrightness\nfrom kornia.filters import StableDiffusionDissolving\n\n# Load and prepare your image\nimg: np.ndarray = kr.read_image_any(\"img.jpeg\")\nimg = kr.resize(img, (256, 256), interpolation=\"bilinear\")\n\n# alternatively, load image with PIL\n# img = Image.open(\"img.jpeg\").resize((256, 256))\n# img = np.array(img)\n\nimg = np.stack([img] * 2)  # batch images\n\n# Define an augmentation pipeline\naugmentation_pipeline = AugmentationSequential(\n    RandomAffine((-45., 45.), p=1.),\n    RandomBrightness((0.,1.), p=1.)\n)\n\n# Leveraging StableDiffusion models\ndslv_op = StableDiffusionDissolving()\n\nimg = augmentation_pipeline(img)\ndslv_op(img, step_number=500)\n\ndslv_op.save(\"Kornia-enhanced.jpg\")\n```\n\n</details>\n\n<details>\n<summary>Find out Kornia ONNX models with ONNXSequential!</summary>\n\n```python\nimport numpy as np\nfrom kornia.onnx import ONNXSequential\n# Chain ONNX models from HuggingFace repo and your own local model together\nonnx_seq = ONNXSequential(\n    \"hf://operators/kornia.geometry.transform.flips.Hflip\",\n    \"hf://models/kornia.models.detection.rtdetr_r18vd_640x640\",  # Or you may use \"YOUR_OWN_MODEL.onnx\"\n)\n# Prepare some input data\ninput_data = np.random.randn(1, 3, 384, 512).astype(np.float32)\n# Perform inference\noutputs = onnx_seq(input_data)\n# Print the model outputs\nprint(outputs)\n\n# Export a new ONNX model that chains up all three models together!\nonnx_seq.export(\"chained_model.onnx\")\n```\n</details>\n\n## Multi-framework support\n\nYou can now use Kornia with [TensorFlow](https://www.tensorflow.org/), [JAX](https://jax.readthedocs.io/en/latest/index.html), and [NumPy](https://numpy.org/). See [Multi-Framework Support](docs/source/get-started/multi-framework-support.rst) for more details.\n\n```python\nimport kornia\ntf_kornia = kornia.to_tensorflow()\n```\n\n<p align=\"center\">\n  Powered by\n  <a href=\"https://github.com/ivy-llc/ivy\" target=\"_blank\">\n    <div class=\"dark-light\" style=\"display: block;\" align=\"center\">\n      <img class=\"dark-light\" width=\"15%\" src=\"https://raw.githubusercontent.com/ivy-llc/assets/refs/heads/main/assets/logos/ivy-long.svg\"/>\n    </div>\n  </a>\n</p>\n\n## Call For Contributors\n\nAre you passionate about computer vision, AI, and open-source development? Join us in shaping the future of Kornia! We are actively seeking contributors to help expand and enhance our library, making it even more powerful, accessible, and versatile. Whether you're an experienced developer or just starting, there's a place for you in our community.\n\n### Accessible AI Models\n\nWe are excited to announce our latest advancement: a new initiative designed to seamlessly integrate lightweight AI models into Kornia.\nWe aim to run any models as smooth as big models such as StableDiffusion, to support them well in many perspectives.\nWe have already included a selection of lightweight AI models like [YuNet (Face Detection)](), [Loftr (Feature Matching)](), and [SAM (Segmentation)](). Now, we're looking for contributors to help us:\n\n- Expand the Model Selection: Import decent models into our library. If you are a researcher, Kornia is an excellent place for you to promote your model!\n- Model Optimization: Work on optimizing models to reduce their computational footprint while maintaining accuracy and performance. You may start from offering ONNX support!\n- Model Documentation: Create detailed guides and examples to help users get the most out of these models in their projects.\n\n\n### Documentation And Tutorial Optimization\n\nKornia's foundation lies in its extensive collection of classic computer vision operators, providing robust tools for image processing, feature extraction, and geometric transformations. We continuously seek for contributors to help us improve our documentation and present nice tutorials to our users.\n\n\n## Cite\n\nIf you are using kornia in your research-related documents, it is recommended that you cite the paper. See more in [CITATION](./CITATION.md).\n\n  ```bibtex\n  @inproceedings{eriba2019kornia,\n    author    = {E. Riba, D. Mishkin, D. Ponsa, E. Rublee and G. Bradski},\n    title     = {Kornia: an Open Source Differentiable Computer Vision Library for PyTorch},\n    booktitle = {Winter Conference on Applications of Computer Vision},\n    year      = {2020},\n    url       = {https://arxiv.org/pdf/1910.02190.pdf}\n  }\n  ```\n\n## Contributing\n\nWe appreciate all contributions. If you are planning to contribute back bug-fixes, please do so without any further discussion. If you plan to contribute new features, utility functions or extensions, please first open an issue and discuss the feature with us. Please, consider reading the [CONTRIBUTING](./CONTRIBUTING.md) notes. The participation in this open source project is subject to [Code of Conduct](./CODE_OF_CONDUCT.md).\n\n## Community\n- **Discord:** Join our workspace to keep in touch with our core contributors, get latest updates on the industry and  be part of our community. [JOIN HERE](https://discord.gg/HfnywwpBnD)\n- **GitHub Issues:** bug reports, feature requests, install issues, RFCs, thoughts, etc. [OPEN](https://github.com/kornia/kornia/issues/new/choose)\n- **Forums:** discuss implementations, research, etc. [GitHub Forums](https://github.com/kornia/kornia/discussions)\n\n<a href=\"https://github.com/Kornia/kornia/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=Kornia/kornia\" width=\"60%\" />\n</a>\n\nMade with [contrib.rocks](https://contrib.rocks).\n\n## License\n\nKornia is released under the Apache 2.0 license. See the [LICENSE](./LICENSE) file for more information.\n",
        "releases": [
            {
                "name": "v0.8.0",
                "date": "2025-01-11T05:12:17Z"
            },
            {
                "name": "v0.7.4",
                "date": "2024-11-05T09:27:33Z"
            },
            {
                "name": "v0.7.3",
                "date": "2024-06-28T15:15:38Z"
            },
            {
                "name": "v0.7.2",
                "date": "2024-03-14T09:13:46Z"
            },
            {
                "name": "v0.7.1",
                "date": "2023-12-27T10:47:21Z"
            },
            {
                "name": "v0.7.0 Image API, RT-DETR and Object Detection API, LightGlue Matcher, MobileSam, new Sensors API and many more",
                "date": "2023-08-02T09:57:58Z"
            },
            {
                "name": "v0.6.12 ImagePrompter API (SAM), Guided Filter and bugfixes",
                "date": "2023-04-20T21:02:06Z"
            },
            {
                "name": "v0.6.11 DISK local features, new augmentations and bugfixes ",
                "date": "2023-03-28T23:00:00Z"
            },
            {
                "name": "v0.6.10 Auto Augmentations module, apply_colormap, disparity utitlities, start to support torchdynamo and MUCH more",
                "date": "2023-02-17T20:15:18Z"
            },
            {
                "name": "v0.6.9 Revamp kornia.geometry: Hyperplane, Ray, Quaternion, liegroup; restructure CI and typing robustness",
                "date": "2022-12-21T20:03:16Z"
            },
            {
                "name": "v0.6.8 Experimental Nerf, Deep Edge Detection, community demos, Quaternion slerp, augmentations dispatcher, image matching and other bug fixes",
                "date": "2022-10-13T09:21:21Z"
            },
            {
                "name": "v0.6.7 SOLD2, AdaLAM, Quaternion, Mosaic Aug and Edge-aware Blur",
                "date": "2022-08-30T12:52:09Z"
            },
            {
                "name": "v0.6.6 ParametrizedLine API and load_image macos and windows ",
                "date": "2022-07-16T09:16:59Z"
            },
            {
                "name": "Kornia 0.6.5: Image i/o module with Rust, diamond_square and plasma augmentations, new geometric metrics and gradients estimators for differentiable augmentations.",
                "date": "2022-05-17T09:25:28Z"
            },
            {
                "name": "Kornia 0.6.4: RandomPlanckianJitter, KeyNet detector, HyNet descriptor, MS-SSIMLoss and draw_convex_polygon",
                "date": "2022-03-21T14:48:22Z"
            },
            {
                "name": "Kornia 0.6.3: Distance Transform, Pytorch 1.10.1, support, Hanning kernel, Resize augmentations and bug fixes",
                "date": "2022-01-31T15:09:00Z"
            },
            {
                "name": "Kornia 0.6.2: Face Detection, Bounding Box API, histogram matching, drawing and more.",
                "date": "2021-12-03T21:27:30Z"
            },
            {
                "name": "Kornia 0.6.1 - Packaging hotfix",
                "date": "2021-10-22T21:47:19Z"
            },
            {
                "name": "Kornia 0.6.0 - High Level and experimental training APIs, bug fixes and much more",
                "date": "2021-10-22T13:34:15Z"
            },
            {
                "name": "Vision Transformer (ViT), Image Registration, Image Matching APIs and  Hausdorff Distance loss",
                "date": "2021-09-19T21:40:37Z"
            },
            {
                "name": "Connected Components Labelling algorithm, Differentiable image histogram, and bug fixes",
                "date": "2021-08-06T17:47:07Z"
            },
            {
                "name": "Grayscale to RGB image conversion. Add keepdim param to tensor_to_image function. ",
                "date": "2021-07-26T17:42:02Z"
            },
            {
                "name": "Add Bounding Boxes module, remove Numpy from core and RGB to HLS optimisations",
                "date": "2021-07-12T10:03:43Z"
            },
            {
                "name": "PyTorch 1.9.0, Stereo Camera and auto-images in documentation",
                "date": "2021-06-27T20:53:53Z"
            },
            {
                "name": "Camera Calibration, Canny edge detection and more adavanced augmentation containers",
                "date": "2021-06-11T21:57:47Z"
            },
            {
                "name": "More augmentations, inverse augmentations and optimised CLAHE",
                "date": "2021-05-30T08:40:56Z"
            },
            {
                "name": "Angle axis and Quaternion fixes, added Unsharped Mask",
                "date": "2021-05-14T15:24:40Z"
            },
            {
                "name": "Bug fixes, augmentations, fp16 and more",
                "date": "2021-04-30T12:07:47Z"
            },
            {
                "name": "Morphological operators, Deep descriptors, Video Augmentations and more",
                "date": "2021-03-17T09:09:56Z"
            },
            {
                "name": "Improve 3D augmentations and 3D transforms low level API",
                "date": "2020-10-20T19:22:02Z"
            },
            {
                "name": "3D augmentations, local features matching, homographies and epipolar geometry",
                "date": "2020-08-06T23:44:20Z"
            },
            {
                "name": "Kornia 0.3.2 release",
                "date": "2020-08-06T23:12:32Z"
            },
            {
                "name": "Expose align corners, add support to Python 3.8 and more fixes",
                "date": "2020-05-10T13:14:02Z"
            },
            {
                "name": "PyTorch 1.5 support, accelerated Data Augmentation, stable GPU testing and easy ecosystem integration",
                "date": "2020-04-27T09:25:45Z"
            },
            {
                "name": "Data augmentation and GPU tests checkpoint before PyTorch v1.5.0",
                "date": "2020-04-26T14:35:55Z"
            },
            {
                "name": "Data augmentation framework, deep descriptors and more.",
                "date": "2020-04-21T08:24:44Z"
            },
            {
                "name": "Data augmentation API, color conversion improvements, GPU tests and more",
                "date": "2020-01-27T18:23:47Z"
            },
            {
                "name": "Kornia: Open Source Differentiable Computer Vision Library for PyTorch",
                "date": "2019-10-05T10:57:00Z"
            },
            {
                "name": "support for PyTorch v1.0.1, PinholeCamera API, losses collections: FocalLoss, DiceLoss, SpatialSoftArgmax2d, MyPy static analysis and Homogeneous transforms module.",
                "date": "2019-03-14T11:50:57Z"
            },
            {
                "name": "warp_perspective, get_perspective_transform, get_rotation_matrix2d, update to PyTorch v1.0.0, update test with pytest and pip package release",
                "date": "2019-01-08T15:47:39Z"
            },
            {
                "name": "v0.1.0 Package initial release",
                "date": "2018-10-03T15:24:35Z"
            }
        ]
    }
}