{
    "https://api.github.com/repos/pointfreeco/swift-composable-architecture": {
        "forks": 1476,
        "watchers": 12752,
        "stars": 12752,
        "languages": {
            "Swift": 1718713,
            "Makefile": 2078
        },
        "commits": [
            "2025-01-09T18:33:47Z",
            "2025-01-09T17:58:34Z",
            "2025-01-09T00:38:17Z",
            "2025-01-07T17:25:12Z",
            "2025-01-07T17:23:11Z",
            "2025-01-07T17:20:31Z",
            "2025-01-07T17:20:15Z",
            "2025-01-07T04:58:33Z",
            "2025-01-07T04:57:40Z",
            "2024-12-22T17:06:10Z",
            "2024-12-03T19:10:34Z",
            "2024-12-03T19:09:37Z",
            "2024-12-03T19:09:10Z",
            "2024-12-03T19:08:02Z",
            "2024-11-19T16:11:53Z",
            "2024-11-19T16:04:44Z",
            "2024-11-19T16:04:35Z",
            "2024-11-14T19:14:20Z",
            "2024-11-14T05:50:00Z",
            "2024-11-12T23:38:35Z",
            "2024-11-12T05:23:07Z",
            "2024-11-12T04:35:22Z",
            "2024-11-12T04:35:07Z",
            "2024-11-12T00:47:51Z",
            "2024-10-23T18:16:34Z",
            "2024-10-22T20:50:26Z",
            "2024-10-22T16:56:43Z",
            "2024-10-21T19:54:30Z",
            "2024-10-15T17:03:23Z",
            "2024-10-15T17:03:03Z"
        ],
        "creation_date": "2020-05-03T23:18:40Z",
        "contributors": 30,
        "topics": [
            "architecture",
            "composition",
            "modularity",
            "swiftui",
            "testability",
            "uikit"
        ],
        "subscribers": 216,
        "readme": "# The Composable Architecture\n\n[![CI](https://github.com/pointfreeco/swift-composable-architecture/workflows/CI/badge.svg)](https://github.com/pointfreeco/swift-composable-architecture/actions?query=workflow%3ACI)\n[![Slack](https://img.shields.io/badge/slack-chat-informational.svg?label=Slack&logo=slack)](https://www.pointfree.co/slack-invite)\n[![](https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-composable-architecture%2Fbadge%3Ftype%3Dswift-versions)](https://swiftpackageindex.com/pointfreeco/swift-composable-architecture)\n[![](https://img.shields.io/endpoint?url=https%3A%2F%2Fswiftpackageindex.com%2Fapi%2Fpackages%2Fpointfreeco%2Fswift-composable-architecture%2Fbadge%3Ftype%3Dplatforms)](https://swiftpackageindex.com/pointfreeco/swift-composable-architecture)\n\nThe Composable Architecture (TCA, for short) is a library for building applications in a consistent \nand understandable way, with composition, testing, and ergonomics in mind. It can be used in \nSwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, visionOS, tvOS, and watchOS).\n\n* [What is the Composable Architecture?](#what-is-the-composable-architecture)\n* [Learn more](#learn-more)\n* [Examples](#examples)\n* [Basic usage](#basic-usage)\n* [Documentation](#documentation)\n* [Community](#community)\n* [Installation](#installation)\n* [Translations](#translations)\n\n## What is the Composable Architecture?\n\nThis library provides a few core tools that can be used to build applications of varying purpose and \ncomplexity. It provides compelling stories that you can follow to solve many problems you encounter \nday-to-day when building applications, such as:\n\n* **State management**\n  <br> How to manage the state of your application using simple value types, and share state across \n  many screens so that mutations in one screen can be immediately observed in another screen.\n\n* **Composition**\n  <br> How to break down large features into smaller components that can be extracted to their own, \n  isolated modules and be easily glued back together to form the feature.\n\n* **Side effects**\n  <br> How to let certain parts of the application talk to the outside world in the most testable \n  and understandable way possible.\n\n* **Testing**\n  <br> How to not only test a feature built in the architecture, but also write integration tests \n  for features that have been composed of many parts, and write end-to-end tests to understand how \n  side effects influence your application. This allows you to make strong guarantees that your \n  business logic is running in the way you expect.\n\n* **Ergonomics**\n  <br> How to accomplish all of the above in a simple API with as few concepts and moving parts as \n  possible.\n\n## Learn More\n\nThe Composable Architecture was designed over the course of many episodes on \n[Point-Free][pointfreeco], a video series exploring functional programming and the Swift language, \nhosted by [Brandon Williams][mbrandonw] and [Stephen Celis][stephencelis].\n\nYou can watch all of the episodes [here][tca-episode-collection], as well as a dedicated, [multipart\ntour][tca-tour] of the architecture from scratch.\n\n<a href=\"https://www.pointfree.co/collections/tours/composable-architecture-1-0\">\n  <img alt=\"video poster image\" src=\"https://d3rccdn33rt8ze.cloudfront.net/episodes/0243.jpeg\" width=\"600\">\n</a>\n\n## Examples\n\n[![Screen shots of example applications](https://d3rccdn33rt8ze.cloudfront.net/composable-architecture/demos.png)](./Examples)\n\nThis repo comes with _lots_ of examples to demonstrate how to solve common and complex problems with \nthe Composable Architecture. Check out [this](./Examples) directory to see them all, including:\n\n* [Case Studies](./Examples/CaseStudies)\n  * Getting started\n  * Effects\n  * Navigation\n  * Higher-order reducers\n  * Reusable components\n* [Location manager](https://github.com/pointfreeco/composable-core-location/tree/main/Examples/LocationManager)\n* [Motion manager](https://github.com/pointfreeco/composable-core-motion/tree/main/Examples/MotionManager)\n* [Search](./Examples/Search)\n* [Speech Recognition](./Examples/SpeechRecognition)\n* [SyncUps app](./Examples/SyncUps)\n* [Tic-Tac-Toe](./Examples/TicTacToe)\n* [Todos](./Examples/Todos)\n* [Voice memos](./Examples/VoiceMemos)\n\nLooking for something more substantial? Check out the source code for [isowords][gh-isowords], an \niOS word search game built in SwiftUI and the Composable Architecture.\n\n## Basic Usage\n\n> [!Note] \n> For a step-by-step interactive tutorial, be sure to check out [Meet the Composable\n> Architecture][meet-tca].\n\nTo build a feature using the Composable Architecture you define some types and values that model \nyour domain:\n\n* **State**: A type that describes the data your feature needs to perform its logic and render its \nUI.\n* **Action**: A type that represents all of the actions that can happen in your feature, such as \nuser actions, notifications, event sources and more.\n* **Reducer**: A function that describes how to evolve the current state of the app to the next \nstate given an action. The reducer is also responsible for returning any effects that should be \nrun, such as API requests, which can be done by returning an `Effect` value.\n* **Store**: The runtime that actually drives your feature. You send all user actions to the store \nso that the store can run the reducer and effects, and you can observe state changes in the store \nso that you can update UI.\n\nThe benefits of doing this are that you will instantly unlock testability of your feature, and you \nwill be able to break large, complex features into smaller domains that can be glued together.\n\nAs a basic example, consider a UI that shows a number along with \"+\" and \"\u2212\" buttons that increment \nand decrement the number. To make things interesting, suppose there is also a button that when \ntapped makes an API request to fetch a random fact about that number and displays it in the view.\n\nTo implement this feature we create a new type that will house the domain and behavior of the \nfeature, and it will be annotated with the `@Reducer` macro:\n\n```swift\nimport ComposableArchitecture\n\n@Reducer\nstruct Feature {\n}\n```\n\nIn here we need to define a type for the feature's state, which consists of an integer for the \ncurrent count, as well as an optional string that represents the fact being presented:\n\n```swift\n@Reducer\nstruct Feature {\n  @ObservableState\n  struct State: Equatable {\n    var count = 0\n    var numberFact: String?\n  }\n}\n```\n\n> [!Note] \n> We've applied the `@ObservableState` macro to `State` in order to take advantage of the\n> observation tools in the library.\n\nWe also need to define a type for the feature's actions. There are the obvious actions, such as \ntapping the decrement button, increment button, or fact button. But there are also some slightly \nnon-obvious ones, such as the action that occurs when we receive a response from the fact API \nrequest:\n\n```swift\n@Reducer\nstruct Feature {\n  @ObservableState\n  struct State: Equatable { /* ... */ }\n  enum Action {\n    case decrementButtonTapped\n    case incrementButtonTapped\n    case numberFactButtonTapped\n    case numberFactResponse(String)\n  }\n}\n```\n\nAnd then we implement the `body` property, which is responsible for composing the actual logic and \nbehavior for the feature. In it we can use the `Reduce` reducer to describe how to change the\ncurrent state to the next state, and what effects need to be executed. Some actions don't need to\nexecute effects, and they can return `.none` to represent that:\n\n```swift\n@Reducer\nstruct Feature {\n  @ObservableState\n  struct State: Equatable { /* ... */ }\n  enum Action { /* ... */ }\n\n  var body: some Reducer<State, Action> {\n    Reduce { state, action in\n      switch action {\n      case .decrementButtonTapped:\n        state.count -= 1\n        return .none\n\n      case .incrementButtonTapped:\n        state.count += 1\n        return .none\n\n      case .numberFactButtonTapped:\n        return .run { [count = state.count] send in\n          let (data, _) = try await URLSession.shared.data(\n            from: URL(string: \"http://numbersapi.com/\\(count)/trivia\")!\n          )\n          await send(\n            .numberFactResponse(String(decoding: data, as: UTF8.self))\n          )\n        }\n\n      case let .numberFactResponse(fact):\n        state.numberFact = fact\n        return .none\n      }\n    }\n  }\n}\n```\n\nAnd then finally we define the view that displays the feature. It holds onto a `StoreOf<Feature>` \nso that it can observe all changes to the state and re-render, and we can send all user actions to \nthe store so that state changes:\n\n```swift\nstruct FeatureView: View {\n  let store: StoreOf<Feature>\n\n  var body: some View {\n    Form {\n      Section {\n        Text(\"\\(store.count)\")\n        Button(\"Decrement\") { store.send(.decrementButtonTapped) }\n        Button(\"Increment\") { store.send(.incrementButtonTapped) }\n      }\n\n      Section {\n        Button(\"Number fact\") { store.send(.numberFactButtonTapped) }\n      }\n      \n      if let fact = store.numberFact {\n        Text(fact)\n      }\n    }\n  }\n}\n```\n\nIt is also straightforward to have a UIKit controller driven off of this store. You can observe\nstate changes in the store in `viewDidLoad`, and then populate the UI components with data from\nthe store. The code is a bit longer than the SwiftUI version, so we have collapsed it here:\n\n<details>\n  <summary>Click to expand!</summary>\n\n  ```swift\n  class FeatureViewController: UIViewController {\n    let store: StoreOf<Feature>\n\n    init(store: StoreOf<Feature>) {\n      self.store = store\n      super.init(nibName: nil, bundle: nil)\n    }\n\n    required init?(coder: NSCoder) {\n      fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func viewDidLoad() {\n      super.viewDidLoad()\n\n      let countLabel = UILabel()\n      let decrementButton = UIButton()\n      let incrementButton = UIButton()\n      let factLabel = UILabel()\n      \n      // Omitted: Add subviews and set up constraints...\n      \n      observe { [weak self] in\n        guard let self \n        else { return }\n        \n        countLabel.text = \"\\(self.store.text)\"\n        factLabel.text = self.store.numberFact\n      }\n    }\n\n    @objc private func incrementButtonTapped() {\n      self.store.send(.incrementButtonTapped)\n    }\n    @objc private func decrementButtonTapped() {\n      self.store.send(.decrementButtonTapped)\n    }\n    @objc private func factButtonTapped() {\n      self.store.send(.numberFactButtonTapped)\n    }\n  }\n  ```\n</details>\n\nOnce we are ready to display this view, for example in the app's entry point, we can construct a \nstore. This can be done by specifying the initial state to start the application in, as well as \nthe reducer that will power the application:\n\n```swift\nimport ComposableArchitecture\n\n@main\nstruct MyApp: App {\n  var body: some Scene {\n    WindowGroup {\n      FeatureView(\n        store: Store(initialState: Feature.State()) {\n          Feature()\n        }\n      )\n    }\n  }\n}\n```\n\nAnd that is enough to get something on the screen to play around with. It's definitely a few more \nsteps than if you were to do this in a vanilla SwiftUI way, but there are a few benefits. It gives \nus a consistent manner to apply state mutations, instead of scattering logic in some observable \nobjects and in various action closures of UI components. It also gives us a concise way of \nexpressing side effects. And we can immediately test this logic, including the effects, without \ndoing much additional work.\n\n### Testing\n\n> [!Note] \n> For more in-depth information on testing, see the dedicated [testing][testing-article] article. \n\nTo test use a `TestStore`, which can be created with the same information as the `Store`, but it \ndoes extra work to allow you to assert how your feature evolves as actions are sent:\n\n```swift\n@Test\nfunc basics() async {\n  let store = TestStore(initialState: Feature.State()) {\n    Feature()\n  }\n}\n```\n\nOnce the test store is created we can use it to make an assertion of an entire user flow of steps. \nEach step of the way we need to prove that state changed how we expect. For example, we can \nsimulate the user flow of tapping on the increment and decrement buttons:\n\n```swift\n// Test that tapping on the increment/decrement buttons changes the count\nawait store.send(.incrementButtonTapped) {\n  $0.count = 1\n}\nawait store.send(.decrementButtonTapped) {\n  $0.count = 0\n}\n```\n\nFurther, if a step causes an effect to be executed, which feeds data back into the store, we must \nassert on that. For example, if we simulate the user tapping on the fact button we expect to \nreceive a fact response back with the fact, which then causes the `numberFact` state to be \npopulated:\n\n```swift\nawait store.send(.numberFactButtonTapped)\n\nawait store.receive(\\.numberFactResponse) {\n  $0.numberFact = ???\n}\n```\n\nHowever, how do we know what fact is going to be sent back to us?\n\nCurrently our reducer is using an effect that reaches out into the real world to hit an API server, \nand that means we have no way to control its behavior. We are at the whims of our internet \nconnectivity and the availability of the API server in order to write this test.\n\nIt would be better for this dependency to be passed to the reducer so that we can use a live \ndependency when running the application on a device, but use a mocked dependency for tests. We can \ndo this by adding a property to the `Feature` reducer:\n\n```swift\n@Reducer\nstruct Feature {\n  let numberFact: (Int) async throws -> String\n  // ...\n}\n```\n\nThen we can use it in the `reduce` implementation:\n\n```swift\ncase .numberFactButtonTapped:\n  return .run { [count = state.count] send in \n    let fact = try await self.numberFact(count)\n    await send(.numberFactResponse(fact))\n  }\n```\n\nAnd in the entry point of the application we can provide a version of the dependency that actually \ninteracts with the real world API server:\n\n```swift\n@main\nstruct MyApp: App {\n  var body: some Scene {\n    WindowGroup {\n      FeatureView(\n        store: Store(initialState: Feature.State()) {\n          Feature(\n            numberFact: { number in\n              let (data, _) = try await URLSession.shared.data(\n                from: URL(string: \"http://numbersapi.com/\\(number)\")!\n              )\n              return String(decoding: data, as: UTF8.self)\n            }\n          )\n        }\n      )\n    }\n  }\n}\n```\n\nBut in tests we can use a mock dependency that immediately returns a deterministic, predictable \nfact: \n\n```swift\n@Test\nfunc basics() async {\n  let store = TestStore(initialState: Feature.State()) {\n    Feature(numberFact: { \"\\($0) is a good number Brent\" })\n  }\n}\n```\n\nWith that little bit of upfront work we can finish the test by simulating the user tapping on the \nfact button, and then receiving the response from the dependency to present the fact:\n\n```swift\nawait store.send(.numberFactButtonTapped)\n\nawait store.receive(\\.numberFactResponse) {\n  $0.numberFact = \"0 is a good number Brent\"\n}\n```\n\nWe can also improve the ergonomics of using the `numberFact` dependency in our application. Over \ntime the application may evolve into many features, and some of those features may also want access \nto `numberFact`, and explicitly passing it through all layers can get annoying. There is a process \nyou can follow to \u201cregister\u201d dependencies with the library, making them instantly available to any \nlayer in the application.\n\n> [!Note] \n> For more in-depth information on dependency management, see the dedicated\n> [dependencies][dependencies-article] article. \n\nWe can start by wrapping the number fact functionality in a new type:\n\n```swift\nstruct NumberFactClient {\n  var fetch: (Int) async throws -> String\n}\n```\n\nAnd then registering that type with the dependency management system by conforming the client to\nthe `DependencyKey` protocol, which requires you to specify the live value to use when running the\napplication in simulators or devices:\n\n```swift\nextension NumberFactClient: DependencyKey {\n  static let liveValue = Self(\n    fetch: { number in\n      let (data, _) = try await URLSession.shared\n        .data(from: URL(string: \"http://numbersapi.com/\\(number)\")!\n      )\n      return String(decoding: data, as: UTF8.self)\n    }\n  )\n}\n\nextension DependencyValues {\n  var numberFact: NumberFactClient {\n    get { self[NumberFactClient.self] }\n    set { self[NumberFactClient.self] = newValue }\n  }\n}\n```\n\nWith that little bit of upfront work done you can instantly start making use of the dependency in \nany feature by using the `@Dependency` property wrapper:\n\n```diff\n @Reducer\n struct Feature {\n-  let numberFact: (Int) async throws -> String\n+  @Dependency(\\.numberFact) var numberFact\n   \n   \u2026\n\n-  try await self.numberFact(count)\n+  try await self.numberFact.fetch(count)\n }\n```\n\nThis code works exactly as it did before, but you no longer have to explicitly pass the dependency \nwhen constructing the feature's reducer. When running the app in previews, the simulator or on a \ndevice, the live dependency will be provided to the reducer, and in tests the test dependency will \nbe provided.\n\nThis means the entry point to the application no longer needs to construct dependencies:\n\n```swift\n@main\nstruct MyApp: App {\n  var body: some Scene {\n    WindowGroup {\n      FeatureView(\n        store: Store(initialState: Feature.State()) {\n          Feature()\n        }\n      )\n    }\n  }\n}\n```\n\nAnd the test store can be constructed without specifying any dependencies, but you can still \noverride any dependency you need to for the purpose of the test:\n\n```swift\nlet store = TestStore(initialState: Feature.State()) {\n  Feature()\n} withDependencies: {\n  $0.numberFact.fetch = { \"\\($0) is a good number Brent\" }\n}\n\n// ...\n```\n\nThat is the basics of building and testing a feature in the Composable Architecture. There are \n_a lot_ more things to be explored, such as composition, modularity, adaptability, and complex \neffects. The [Examples](./Examples) directory has a bunch of projects to explore to see more \nadvanced usages.\n\n## Documentation\n\nThe documentation for releases and `main` are available here:\n\n* [`main`](https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/)\n* [1.17.0](https://pointfreeco.github.io/swift-composable-architecture/1.17.0/documentation/composablearchitecture/) ([migration guide](https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.17))\n\n<details>\n  <summary>\n  Other versions\n  </summary>\n\n  * [1.16.0](https://pointfreeco.github.io/swift-composable-architecture/1.16.0/documentation/composablearchitecture/) ([migration guide](https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.16))\n  * [1.15.0](https://pointfreeco.github.io/swift-composable-architecture/1.15.0/documentation/composablearchitecture/) ([migration guide](https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.15))\n  * [1.14.0](https://pointfreeco.github.io/swift-composable-architecture/1.14.0/documentation/composablearchitecture/) ([migration guide](https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.14))\n  * [1.13.0](https://pointfreeco.github.io/swift-composable-architecture/1.13.0/documentation/composablearchitecture/) ([migration guide](https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.13))\n  * [1.12.0](https://pointfreeco.github.io/swift-composable-architecture/1.12.0/documentation/composablearchitecture/) ([migration guide](https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.12))\n  * [1.11.0](https://pointfreeco.github.io/swift-composable-architecture/1.11.0/documentation/composablearchitecture/) ([migration guide](https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.11))\n  * [1.10.0](https://pointfreeco.github.io/swift-composable-architecture/1.10.0/documentation/composablearchitecture/) ([migration guide](https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.10))\n  * [1.9.0](https://pointfreeco.github.io/swift-composable-architecture/1.9.0/documentation/composablearchitecture/) ([migration guide](https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.9))\n  * [1.8.0](https://pointfreeco.github.io/swift-composable-architecture/1.8.0/documentation/composablearchitecture/) ([migration guide](https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.8))\n  * [1.7.0](https://pointfreeco.github.io/swift-composable-architecture/1.7.0/documentation/composablearchitecture/) ([migration guide](https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.7))\n  * [1.6.0](https://pointfreeco.github.io/swift-composable-architecture/1.6.0/documentation/composablearchitecture/) ([migration guide](https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.6))\n  * [1.5.0](https://pointfreeco.github.io/swift-composable-architecture/1.5.0/documentation/composablearchitecture/) ([migration guide](https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.5))\n  * [1.4.0](https://pointfreeco.github.io/swift-composable-architecture/1.4.0/documentation/composablearchitecture/) ([migration guide](https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/migratingto1.4))\n  * [1.3.0](https://pointfreeco.github.io/swift-composable-architecture/1.3.0/documentation/composablearchitecture/)\n  * [1.2.0](https://pointfreeco.github.io/swift-composable-architecture/1.2.0/documentation/composablearchitecture/)\n  * [1.1.0](https://pointfreeco.github.io/swift-composable-architecture/1.1.0/documentation/composablearchitecture/)\n  * [1.0.0](https://pointfreeco.github.io/swift-composable-architecture/1.0.0/documentation/composablearchitecture/)\n  * [0.59.0](https://pointfreeco.github.io/swift-composable-architecture/0.59.0/documentation/composablearchitecture/)\n  * [0.58.0](https://pointfreeco.github.io/swift-composable-architecture/0.58.0/documentation/composablearchitecture/)\n  * [0.57.0](https://pointfreeco.github.io/swift-composable-architecture/0.57.0/documentation/composablearchitecture/)\n</details>\n\n<br>\n\nThere are a number of articles in the documentation that you may find helpful as you become more \ncomfortable with the library:\n\n* [Getting started][getting-started-article]\n* [Dependencies][dependencies-article]\n* [Testing][testing-article]\n* [Navigation][navigation-article]\n* [Sharing state][sharing-state-article]\n* [Performance][performance-article]\n* [Concurrency][concurrency-article]\n* [Bindings][bindings-article]\n\n## Community\n\nIf you want to discuss the Composable Architecture or have a question about how to use it to solve \na particular problem, there are a number of places you can discuss with fellow \n[Point-Free](http://www.pointfree.co) enthusiasts:\n\n* For long-form discussions, we recommend the [discussions][gh-discussions] tab of this repo.\n* For casual chat, we recommend the [Point-Free Community slack](http://pointfree.co/slack-invite).\n\n## Installation\n\nYou can add ComposableArchitecture to an Xcode project by adding it as a package dependency.\n\n  1. From the **File** menu, select **Add Package Dependencies...**\n  2. Enter \"https://github.com/pointfreeco/swift-composable-architecture\" into the package \n     repository URL text field\n  3. Depending on how your project is structured:\n      - If you have a single application target that needs access to the library, then add \n        **ComposableArchitecture** directly to your application.\n      - If you want to use this library from multiple Xcode targets, or mix Xcode targets and SPM \n        targets, you must create a shared framework that depends on **ComposableArchitecture** and \n        then depend on that framework in all of your targets. For an example of this, check out the \n        [Tic-Tac-Toe](./Examples/TicTacToe) demo application, which splits lots of features into \n        modules and consumes the static library in this fashion using the **tic-tac-toe** Swift \n        package.\n\n## Companion libraries\n\nThe Composable Architecture is built with extensibility in mind, and there are a number of\ncommunity-supported libraries available to enhance your applications:\n\n* [Composable Architecture Extras](https://github.com/Ryu0118/swift-composable-architecture-extras):\n  A companion library to the Composable Architecture.\n* [TCAComposer](https://github.com/mentalflux/tca-composer): A macro framework for generating\n  boiler-plate code in the Composable Architecture.\n* [TCACoordinators](https://github.com/johnpatrickmorgan/TCACoordinators): The coordinator pattern\n  in the Composable Architecture.\n\nIf you'd like to contribute a library, please [open a\nPR](https://github.com/pointfreeco/swift-composable-architecture/edit/main/README.md) with a link\nto it!\n\n## Translations\n\nThe following translations of this README have been contributed by members of the community:\n\n* [Arabic](https://gist.github.com/NorhanBoghdadi/1b98d55c02b683ddef7e05c2ebcccd47)\n* [French](https://gist.github.com/nikitamounier/0e93eb832cf389db12f9a69da030a2dc)\n* [Hindi](https://gist.github.com/akashsoni01/b358ee0b3b747167964ef6946123c88d)\n* [Indonesian](https://gist.github.com/wendyliga/792ea9ac5cc887f59de70a9e39cc7343)\n* [Italian](https://gist.github.com/Bellaposa/5114e6d4d55fdb1388e8186886d48958)\n* [Japanese](https://gist.github.com/Achoo-kr/2d0712deb77f78b3379551ac7baea3e4)\n* [Korean](https://gist.github.com/Achoo-kr/5d8936d12e71028fcc4a7c5e078ca038)\n* [Polish](https://gist.github.com/MarcelStarczyk/6b6153051f46912a665c32199f0d1d54)\n* [Portuguese](https://gist.github.com/SevioCorrea/2bbf337cd084a58c89f2f7f370626dc8)\n* [Russian](https://gist.github.com/SubvertDev/3317d0c3b35ed601be330d6fc0df5aba)\n* [Simplified Chinese](https://gist.github.com/sh3l6orrr/10c8f7c634a892a9c37214f3211242ad)\n* [Spanish](https://gist.github.com/pitt500/f5e32fccb575ce112ffea2827c7bf942)\n* [Ukrainian](https://gist.github.com/barabashd/33b64676195ce41f4bb73c327ea512a8)\n\nIf you'd like to contribute a translation, please [open a\nPR](https://github.com/pointfreeco/swift-composable-architecture/edit/main/README.md) with a link \nto a [Gist](https://gist.github.com)!\n\n## FAQ\n\nWe have a [dedicated article][faq-article] for all of the most frequently asked questions and \ncomments people have concerning the library.\n\n## Credits and thanks\n\nThe following people gave feedback on the library at its early stages and helped make the library \nwhat it is today:\n\nPaul Colton, Kaan Dedeoglu, Matt Diephouse, Josef Dole\u017eal, Eimantas, Matthew Johnson, George \nKaimakas, Nikita Leonov, Christopher Liscio, Jeffrey Macko, Alejandro Martinez, Shai Mishali, Willis \nPlummer, Simon-Pierre Roy, Justin Price, Sven A. Schmidt, Kyle Sherman, Petr \u0160\u00edma, Jasdev Singh, \nMaxim Smirnov, Ryan Stone, Daniel Hollis Tavares, and all of the [Point-Free][pointfreeco] \nsubscribers \ud83d\ude01.\n\nSpecial thanks to [Chris Liscio](https://twitter.com/liscio) who helped us work through many strange \nSwiftUI quirks and helped refine the final API.\n\nAnd thanks to [Shai Mishali](https://github.com/freak4pc) and the\n[CombineCommunity](https://github.com/CombineCommunity/CombineExt/) project, from which we took \ntheir implementation of `Publishers.Create`, which we use in `Effect` to help bridge delegate and \ncallback-based APIs, making it much easier to interface with 3rd party frameworks.\n\n## Other libraries\n\nThe Composable Architecture was built on a foundation of ideas started by other libraries, in \nparticular [Elm](https://elm-lang.org) and [Redux](https://redux.js.org/).\n\nThere are also many architecture libraries in the Swift and iOS community. Each one of these has \ntheir own set of priorities and trade-offs that differ from the Composable Architecture.\n\n* [RIBs](https://github.com/uber/RIBs)\n* [Loop](https://github.com/ReactiveCocoa/Loop)\n* [ReSwift](https://github.com/ReSwift/ReSwift)\n* [Workflow](https://github.com/square/workflow)\n* [ReactorKit](https://github.com/ReactorKit/ReactorKit)\n* [RxFeedback](https://github.com/NoTests/RxFeedback.swift)\n* [Mobius.swift](https://github.com/spotify/mobius.swift)\n* <details>\n  <summary>And more</summary>\n\n  * [Fluxor](https://github.com/FluxorOrg/Fluxor)\n  * [PromisedArchitectureKit](https://github.com/RPallas92/PromisedArchitectureKit)\n  </details>\n\n## License\n\nThis library is released under the MIT license. See [LICENSE](LICENSE) for details.\n\n[pointfreeco]: https://www.pointfree.co\n[mbrandonw]: https://twitter.com/mbrandonw\n[stephencelis]: https://twitter.com/stephencelis\n[tca-episode-collection]: https://www.pointfree.co/collections/composable-architecture\n[tca-tour]: https://www.pointfree.co/collections/tours/composable-architecture-1-0\n[gh-isowords]: https://github.com/pointfreeco/isowords\n[gh-discussions]: https://github.com/pointfreeco/swift-composable-architecture/discussions\n[swift-forum]: https://forums.swift.org/c/related-projects/swift-composable-architecture\n[testing-article]: https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/testing\n[faq-article]: https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/faq\n[dependencies-article]: https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/dependencymanagement\n[getting-started-article]: https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/gettingstarted\n[navigation-article]: https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/navigation\n[performance-article]: https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/performance\n[concurrency-article]: https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/swiftconcurrency\n[bindings-article]: https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/bindings\n[sharing-state-article]: https://pointfreeco.github.io/swift-composable-architecture/main/documentation/composablearchitecture/sharingstate\n[meet-tca]: https://pointfreeco.github.io/swift-composable-architecture/main/tutorials/meetcomposablearchitecture\n",
        "releases": [
            {
                "name": "1.17.1",
                "date": "2025-01-07T19:16:12Z"
            },
            {
                "name": "1.17.0",
                "date": "2024-12-03T19:30:37Z"
            },
            {
                "name": "1.16.1",
                "date": "2024-11-14T19:16:07Z"
            },
            {
                "name": "1.16.0",
                "date": "2024-11-12T17:57:20Z"
            },
            {
                "name": "1.15.2",
                "date": "2024-10-22T16:57:58Z"
            },
            {
                "name": "1.15.1",
                "date": "2024-10-15T17:09:22Z"
            },
            {
                "name": "1.15.0",
                "date": "2024-09-12T18:08:20Z"
            },
            {
                "name": "1.14.0",
                "date": "2024-08-27T19:36:14Z"
            },
            {
                "name": "1.13.1",
                "date": "2024-08-22T16:36:49Z"
            },
            {
                "name": "1.13.0",
                "date": "2024-08-15T18:17:21Z"
            },
            {
                "name": "1.12.1",
                "date": "2024-07-24T19:53:37Z"
            },
            {
                "name": "1.12.0",
                "date": "2024-07-23T01:32:55Z"
            },
            {
                "name": "1.11.2",
                "date": "2024-06-19T21:54:09Z"
            },
            {
                "name": "1.11.1",
                "date": "2024-06-12T23:04:13Z"
            },
            {
                "name": "1.11.0",
                "date": "2024-06-06T22:29:30Z"
            },
            {
                "name": "1.10.4",
                "date": "2024-05-11T22:02:32Z"
            },
            {
                "name": "1.10.3",
                "date": "2024-05-08T18:22:13Z"
            },
            {
                "name": "1.10.2",
                "date": "2024-04-30T18:45:32Z"
            },
            {
                "name": "1.10.1",
                "date": "2024-04-29T20:14:54Z"
            },
            {
                "name": "1.10.0",
                "date": "2024-04-29T00:58:25Z"
            },
            {
                "name": "1.9.3",
                "date": "2024-04-18T00:06:07Z"
            },
            {
                "name": "1.9.2",
                "date": "2024-03-05T06:20:38Z"
            },
            {
                "name": "1.9.1",
                "date": "2024-03-01T17:43:19Z"
            },
            {
                "name": "1.9.0",
                "date": "2024-02-29T04:30:47Z"
            },
            {
                "name": "1.8.2",
                "date": "2024-02-19T18:30:13Z"
            },
            {
                "name": "1.8.1",
                "date": "2024-02-19T01:09:04Z"
            },
            {
                "name": "1.8.0",
                "date": "2024-02-12T17:55:21Z"
            },
            {
                "name": "1.7.3",
                "date": "2024-02-05T20:33:51Z"
            },
            {
                "name": "1.7.2",
                "date": "2024-01-31T20:09:09Z"
            },
            {
                "name": "1.7.1",
                "date": "2024-01-30T19:54:24Z"
            },
            {
                "name": "1.7.0",
                "date": "2024-01-28T21:08:22Z"
            },
            {
                "name": "1.6.0",
                "date": "2024-01-08T18:43:34Z"
            },
            {
                "name": "1.5.6",
                "date": "2023-12-20T16:58:34Z"
            },
            {
                "name": "1.5.5",
                "date": "2023-12-12T22:10:16Z"
            },
            {
                "name": "1.5.4",
                "date": "2023-12-12T08:44:02Z"
            },
            {
                "name": "1.5.3",
                "date": "2023-12-08T17:12:54Z"
            },
            {
                "name": "1.5.2",
                "date": "2023-12-07T22:56:43Z"
            },
            {
                "name": "1.5.1",
                "date": "2023-12-04T18:32:15Z"
            },
            {
                "name": "1.5.0",
                "date": "2023-11-26T20:09:36Z"
            },
            {
                "name": "1.4.2",
                "date": "2023-11-15T21:00:59Z"
            },
            {
                "name": "1.4.1",
                "date": "2023-11-15T18:23:04Z"
            },
            {
                "name": "1.4.0",
                "date": "2023-11-13T21:07:03Z"
            },
            {
                "name": "1.3.0",
                "date": "2023-10-25T16:52:43Z"
            },
            {
                "name": "1.2.0",
                "date": "2023-08-22T21:51:00Z"
            },
            {
                "name": "0.59.0",
                "date": "2023-08-22T21:46:32Z"
            },
            {
                "name": "0.58.2",
                "date": "2023-08-16T17:10:58Z"
            },
            {
                "name": "0.58.1",
                "date": "2023-08-15T20:22:16Z"
            },
            {
                "name": "1.1.0",
                "date": "2023-08-14T20:04:22Z"
            },
            {
                "name": "1.0.0",
                "date": "2023-07-30T22:01:50Z"
            },
            {
                "name": "0.58.0",
                "date": "2023-07-30T21:27:18Z"
            },
            {
                "name": "0.57.0",
                "date": "2023-07-28T17:07:33Z"
            },
            {
                "name": "0.56.0",
                "date": "2023-07-18T00:23:37Z"
            },
            {
                "name": "0.55.1",
                "date": "2023-07-13T00:16:43Z"
            },
            {
                "name": "0.55.0",
                "date": "2023-06-28T19:39:33Z"
            },
            {
                "name": "0.54.1",
                "date": "2023-06-14T20:00:06Z"
            },
            {
                "name": "0.54.0",
                "date": "2023-05-30T16:38:32Z"
            },
            {
                "name": "0.53.2",
                "date": "2023-05-17T13:17:02Z"
            },
            {
                "name": "0.53.1",
                "date": "2023-05-16T16:30:38Z"
            },
            {
                "name": "0.53.0",
                "date": "2023-05-12T17:19:00Z"
            },
            {
                "name": "0.52.0",
                "date": "2023-03-08T05:56:50Z"
            },
            {
                "name": "0.51.0",
                "date": "2023-02-17T19:36:02Z"
            },
            {
                "name": "0.50.3",
                "date": "2023-02-14T17:19:25Z"
            },
            {
                "name": "0.50.2",
                "date": "2023-02-10T21:01:17Z"
            },
            {
                "name": "0.50.1",
                "date": "2023-01-30T20:38:04Z"
            },
            {
                "name": "0.50.0",
                "date": "2023-01-25T19:52:40Z"
            },
            {
                "name": "0.49.2",
                "date": "2023-01-10T20:42:43Z"
            },
            {
                "name": "0.49.1",
                "date": "2023-01-09T19:12:14Z"
            },
            {
                "name": "0.49.0",
                "date": "2023-01-09T16:09:54Z"
            },
            {
                "name": "0.48.1",
                "date": "2023-01-06T16:23:42Z"
            },
            {
                "name": "0.48.0",
                "date": "2023-01-06T01:21:38Z"
            },
            {
                "name": "0.47.2",
                "date": "2022-11-28T16:38:29Z"
            },
            {
                "name": "0.47.1",
                "date": "2022-11-22T13:20:24Z"
            },
            {
                "name": "0.47.0",
                "date": "2022-11-21T22:55:22Z"
            },
            {
                "name": "0.46.0",
                "date": "2022-11-16T23:21:55Z"
            },
            {
                "name": "0.45.0",
                "date": "2022-10-31T18:56:23Z"
            },
            {
                "name": "0.44.1",
                "date": "2022-10-24T23:58:22Z"
            },
            {
                "name": "0.44.0",
                "date": "2022-10-24T05:57:56Z"
            },
            {
                "name": "0.43.0",
                "date": "2022-10-18T04:00:26Z"
            },
            {
                "name": "0.42.0",
                "date": "2022-10-12T00:08:38Z"
            },
            {
                "name": "0.41.2",
                "date": "2022-10-10T16:09:08Z"
            },
            {
                "name": "0.41.0",
                "date": "2022-10-10T15:42:34Z"
            },
            {
                "name": "0.40.2",
                "date": "2022-09-13T04:42:42Z"
            },
            {
                "name": "0.40.1",
                "date": "2022-09-08T23:21:25Z"
            },
            {
                "name": "0.40.0",
                "date": "2022-09-08T15:50:45Z"
            },
            {
                "name": "0.39.1",
                "date": "2022-08-25T16:05:36Z"
            },
            {
                "name": "0.39.0",
                "date": "2022-08-08T05:04:27Z"
            },
            {
                "name": "0.38.3",
                "date": "2022-07-15T16:24:19Z"
            },
            {
                "name": "0.38.2",
                "date": "2022-06-30T14:05:29Z"
            },
            {
                "name": "0.38.1",
                "date": "2022-06-24T21:46:42Z"
            },
            {
                "name": "0.38.0",
                "date": "2022-06-24T14:12:39Z"
            },
            {
                "name": "0.37.0",
                "date": "2022-06-20T17:56:27Z"
            },
            {
                "name": "0.36.0",
                "date": "2022-06-04T01:49:50Z"
            },
            {
                "name": "0.35.0",
                "date": "2022-05-16T16:41:17Z"
            },
            {
                "name": "0.34.0",
                "date": "2022-03-15T20:32:15Z"
            },
            {
                "name": "0.33.1",
                "date": "2022-01-11T15:35:42Z"
            },
            {
                "name": "0.33.0",
                "date": "2022-01-07T21:13:09Z"
            },
            {
                "name": "0.32.0",
                "date": "2022-01-03T16:57:45Z"
            },
            {
                "name": "0.31.0",
                "date": "2021-12-20T21:42:09Z"
            },
            {
                "name": "0.30.0",
                "date": "2021-12-13T19:08:10Z"
            },
            {
                "name": "0.29.0",
                "date": "2021-12-03T21:10:41Z"
            },
            {
                "name": "0.28.1",
                "date": "2021-09-23T14:27:44Z"
            },
            {
                "name": "0.28.0",
                "date": "2021-09-20T17:32:11Z"
            },
            {
                "name": "0.27.1",
                "date": "2021-09-15T01:18:53Z"
            },
            {
                "name": "0.27.0",
                "date": "2021-09-07T16:30:13Z"
            },
            {
                "name": "0.26.0",
                "date": "2021-09-06T15:20:02Z"
            },
            {
                "name": "0.25.1",
                "date": "2021-08-24T21:24:10Z"
            },
            {
                "name": "0.25.0",
                "date": "2021-08-23T02:50:53Z"
            },
            {
                "name": "0.24.0",
                "date": "2021-08-16T13:56:50Z"
            },
            {
                "name": "0.23.0",
                "date": "2021-07-26T19:27:53Z"
            },
            {
                "name": "0.22.0",
                "date": "2021-07-16T19:26:42Z"
            },
            {
                "name": "0.21.0",
                "date": "2021-07-12T03:10:29Z"
            },
            {
                "name": "0.20.0",
                "date": "2021-06-28T11:58:39Z"
            },
            {
                "name": "0.19.0",
                "date": "2021-06-14T14:57:17Z"
            },
            {
                "name": "0.18.0",
                "date": "2021-04-20T17:08:41Z"
            },
            {
                "name": "0.17.0",
                "date": "2021-03-22T18:01:33Z"
            },
            {
                "name": "0.16.0",
                "date": "2021-03-08T16:12:39Z"
            },
            {
                "name": "0.15.0",
                "date": "2021-02-22T20:39:38Z"
            },
            {
                "name": "0.14.0",
                "date": "2021-02-05T19:09:45Z"
            },
            {
                "name": "0.13.0",
                "date": "2021-02-01T20:01:10Z"
            },
            {
                "name": "0.12.0",
                "date": "2021-02-01T18:43:16Z"
            },
            {
                "name": "0.11.0",
                "date": "2021-01-21T23:13:05Z"
            },
            {
                "name": "0.10.0",
                "date": "2021-01-12T15:20:13Z"
            },
            {
                "name": "0.9.0",
                "date": "2020-10-29T20:18:05Z"
            },
            {
                "name": "0.8.0",
                "date": "2020-09-04T16:49:57Z"
            },
            {
                "name": "0.7.0",
                "date": "2020-08-10T18:06:16Z"
            },
            {
                "name": "0.6.0",
                "date": "2020-06-30T15:00:19Z"
            },
            {
                "name": "0.5.0",
                "date": "2020-06-22T15:33:32Z"
            },
            {
                "name": "0.4.0",
                "date": "2020-06-15T17:43:58Z"
            },
            {
                "name": "0.3.0",
                "date": "2020-05-27T17:29:51Z"
            },
            {
                "name": "0.2.0",
                "date": "2020-05-20T18:32:29Z"
            },
            {
                "name": "0.1.5",
                "date": "2020-05-19T21:34:16Z"
            },
            {
                "name": "0.1.4",
                "date": "2020-05-14T19:13:42Z"
            },
            {
                "name": "0.1.3",
                "date": "2020-05-11T22:53:29Z"
            },
            {
                "name": "0.1.2",
                "date": "2020-05-07T13:39:47Z"
            },
            {
                "name": "0.1.1",
                "date": "2020-05-06T16:15:00Z"
            },
            {
                "name": "0.1.0",
                "date": "2023-01-09T19:10:42Z"
            }
        ]
    }
}