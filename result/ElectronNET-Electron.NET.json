{
    "https://api.github.com/repos/ElectronNET/Electron.NET": {
        "forks": 732,
        "watchers": 7355,
        "stars": 7355,
        "languages": {
            "C#": 629731,
            "HTML": 107263,
            "TypeScript": 85518,
            "JavaScript": 17367,
            "CSS": 16427,
            "PowerShell": 2952,
            "Shell": 2354,
            "Batchfile": 431
        },
        "commits": [
            "2024-04-27T18:11:37Z",
            "2024-04-26T10:42:32Z",
            "2024-04-25T08:27:45Z",
            "2024-04-24T16:01:22Z",
            "2024-04-24T15:58:50Z",
            "2024-04-24T15:58:27Z",
            "2024-04-24T15:34:38Z",
            "2024-04-24T14:44:10Z",
            "2024-02-15T00:12:33Z",
            "2024-02-15T00:10:48Z",
            "2024-02-15T00:04:11Z",
            "2024-02-15T00:01:59Z",
            "2024-02-15T00:01:38Z",
            "2024-02-14T23:59:08Z",
            "2024-02-14T23:55:40Z",
            "2024-02-14T23:55:33Z",
            "2024-02-14T23:55:13Z",
            "2024-02-14T23:55:05Z",
            "2024-02-14T23:54:42Z",
            "2024-02-14T23:06:08Z",
            "2024-01-10T09:10:49Z",
            "2023-11-13T00:29:17Z",
            "2023-11-04T18:09:07Z",
            "2023-11-02T23:23:37Z",
            "2023-09-24T14:36:49Z",
            "2023-09-24T14:36:41Z",
            "2023-08-24T16:24:15Z",
            "2023-08-23T23:39:37Z",
            "2023-04-03T12:17:32Z",
            "2023-04-03T12:02:35Z"
        ],
        "creation_date": "2017-10-03T12:30:29Z",
        "contributors": 30,
        "topics": [
            "asp-net-core",
            "asp-net-core-mvc",
            "aspnet",
            "blazor",
            "blazor-server",
            "blazor-webassembly",
            "cross-platform",
            "dotnet",
            "dotnet-core",
            "dotnet-standard",
            "dotnetcore",
            "electron",
            "electron-net"
        ],
        "subscribers": 230,
        "readme": "[![Electron.NET Logo](https://github.com/ElectronNET/Electron.NET/raw/main/assets/images/electron.net-logo.png)](https://github.com/ElectronNET/Electron.NET)\n\n[![donate](https://img.shields.io/badge/Donate-Donorbox-green.svg)](https://donorbox.org/electron-net) [![Gitter](https://badges.gitter.im/ElectronNET/community.svg)](https://gitter.im/ElectronNET/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge) [![Build status](https://github.com/ElectronNET/Electron.NET/actions/workflows/ci.yml/badge.svg)](https://github.com/ElectronNET/Electron.NET/actions/workflows/ci.yml)\n\nBuild cross platform desktop apps with .NET 8 and Blazor, ASP.NET Core (Razor Pages, MVC). \n\nElectron.NET is a __wrapper__ around a native Electron application with an embedded ASP.NET Core application. Via our Electron.NET IPC bridge we can invoke Electron APIs from .NET.\n\nThe CLI extensions hosts our toolset to build and start Electron.NET applications.\n\n## Wait - you host a .NET Core app inside Electron? Why?\n\nWell... there are lots of different approaches how to get a X-plat desktop app running. We thought it would be nice for .NET devs to use the ASP.NET Core environment and just embed it inside a pretty robust X-plat enviroment called Electron. Porting Electron to .NET is not a goal of this project, at least we don't have any clue how to do it. We just combine ASP.NET Core & Electron. \n\n## \ud83d\udce6 NuGet\n\n[![NuGet](https://img.shields.io/nuget/v/ElectronNET.API.svg?style=flat-square) ElectronNET.API ](https://www.nuget.org/packages/ElectronNET.API/) | [![NuGet](https://img.shields.io/nuget/v/ElectronNET.CLI.svg?style=flat-square) ElectronNET.CLI](https://www.nuget.org/packages/ElectronNET.CLI/)\n\n## \ud83d\udee0 Requirements to Run\n\nThe current Electron.NET CLI builds Windows/macOS/Linux binaries. Our API uses .NET 8, so our minimum base OS is the same as [.NET 8](https://github.com/dotnet/core/blob/main/release-notes/8.0/supported-os.md).\n\nAlso you should have installed:\n\n* npm [contained in nodejs (at least Version 16.17.1)](https://nodejs.org)\n\n## \ud83d\udcac Community\n\n[![Gitter](https://badges.gitter.im/ElectronNET/community.svg)](https://gitter.im/ElectronNET/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\nBesides the chat on Gitter and the issues [discussed here](https://github.com/ElectronNET/Electron.NET/issues) you can also use [StackOverflow](https://stackoverflow.com/questions/tagged/electron.net) with the tag `electron.net`.\n\nIf you want to sponsor the further maintenance and development of this project [see the donate section](#\ud83d\ude4f-donate).\n\n## \ud83d\udc69\u200d\ud83c\udfeb Usage\n\nTo activate and communicate with the \"native\" (sort of native...) Electron API include the [ElectronNET.API NuGet package](https://www.nuget.org/packages/ElectronNET.API/) in your ASP.NET Core app.\n\n```ps1\nPM> Install-Package ElectronNET.API\n```\n\n## Setup Using Minimal-API\n\nYou start Electron.NET up with an `UseElectron` WebHostBuilder-Extension and open the Electron Window:\n\n### Program.cs\n\n```csharp\t\nusing ElectronNET.API;\nusing ElectronNET.API.Entities;\n\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.WebHost.UseElectron(args);\n\n// Is optional, but you can use the Electron.NET API-Classes directly with DI (relevant if you want more encoupled code)\nbuilder.Services.AddElectron();\n\nvar app = builder.Build();\n\n...\n\nawait app.StartAsync();\n\n// Open the Electron-Window here\nawait Electron.WindowManager.CreateWindowAsync();\n\napp.WaitForShutdown();\n```\n\n## Setup using Normal-API\n\n### Program.cs\n\nYou start Electron.NET up with an `UseElectron` WebHostBuilder-Extension. \n\n```csharp\npublic static IHostBuilder CreateHostBuilder(string[] args) =>\n    Host.CreateDefaultBuilder(args)\n        .ConfigureWebHostDefaults(webBuilder =>\n        {\n            webBuilder.UseElectron(args);\n            webBuilder.UseStartup<Startup>();\n        });\n```\n\n### Startup.cs\n\nOpen the Electron Window in the *Startup.cs* file: \n\n```csharp\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    //...\n\n    Electron.WindowManager.CreateWindowAsync();\n}\n```\n\n## \ud83d\ude80 Starting the Application\n\nTo start the application make sure you have installed the \"[ElectronNET.CLI](https://www.nuget.org/packages/ElectronNET.CLI/)\" packages as global tool:\n\n```sh\ndotnet tool install ElectronNET.CLI -g\n```\n\nAt the first time, you need an Electron.NET project initialization. Type the following command in your ASP.NET Core folder:\n\n```sh\nelectronize init\n```\n\n* Now a electronnet.manifest.json should appear in your ASP.NET Core project\n* Now run the following:\n\n```sh\nelectronize start\n```\n\n### Note\n\n> Only the first `electronize start` is slow. The next will go on faster.\n\n## \ud83d\udd2d Develop Electron.NET apps using a file watcher\n\nThe file watcher is included with version 8.31.1 of Electron.NET. For example, a file change can trigger compilation, test execution, or deployment. The Electron.NET window will automatically refresh and new code changes will be visible more quickly. The following Electron.NET CLI command is required:\n\n```sh\nelectronize start /watch\n```\n\n### Note\n\n> Only the first `electronize start` is slow. The next will go on faster.\n\n## \ud83d\udc1e Debugging the Application\n\nStart your Electron.NET application with the Electron.NET CLI command. In Visual Studio attach to your running application instance. Go in the __Debug__ Menu and click on __Attach to Process...__. Sort by your projectname on the right and select it on the list.\n\n## \ud83d\udcd4 Usage of the Electron API\n\nA complete documentation will follow. Until then take a look in the source code of the sample application:  \n[Electron.NET API Demos](https://github.com/ElectronNET/electron.net-api-demos)  \n\nIn this YouTube video, we show you how you can create a new project, use the Electron.NET API, debug a application and build an executable desktop app for Windows: [Electron.NET - Getting Started](https://www.youtube.com/watch?v=nuM6AojRFHk)  \n  \n## \u26cf Building Release Artifacts\n\nHere you need the Electron.NET CLI as well. Type the following command in your ASP.NET Core folder:\n\n```sh\nelectronize build /target win\n```\n\nThere are additional platforms available:\n\n```sh\nelectronize build /target win\nelectronize build /target osx\nelectronize build /target linux\n```\n\nThose three \"default\" targets will produce x64 packages for those platforms.\n\nFor certain NuGet packages or certain scenarios you may want to build a pure x86 application. To support those things you can define the desired [.NET Core runtime](https://docs.microsoft.com/en-us/dotnet/core/rid-catalog), the [electron platform](https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#platform) and [electron architecture](https://github.com/electron-userland/electron-packager/blob/master/docs/api.md#arch) like this:\n\n```sh\nelectronize build /target custom \"win7-x86;win32\" /electron-arch ia32 \n```\n\nThe end result should be an electron app under your __/bin/desktop__ folder.\n\n### Note\n\n> macOS builds can't be created on Windows machines because they require symlinks that aren't supported on Windows (per [this Electron issue](https://github.com/electron-userland/electron-packager/issues/71)). macOS builds can be produced on either Linux or macOS machines.\n  \n## \ud83d\udd04 Update\n\nAfter an update to the latest Electron.API package, an update to the latest Electron.CLI is always required. In addition, always update the CLI via NuGet:\n\n```sh\ndotnet tool update ElectronNET.CLI -g\n```\n\n## \ud83d\udc68\u200d\ud83d\udcbb Authors\n\n* **[Gregor Biswanger](https://github.com/GregorBiswanger)** - (Microsoft MVP, Intel Black Belt and Intel Software Innovator) is a freelance lecturer, consultant, trainer, author and speaker. He is a consultant for large and medium-sized companies, organizations and agencies for software architecture, web- and cross-platform development. You can find Gregor often on the road attending or speaking at international conferences. - [Cross-Platform-Blog](http://www.cross-platform-blog.com) - Twitter [@BFreakout](https://www.twitter.com/BFreakout)  \n* **[Dr. Florian Rappl](https://github.com/FlorianRappl)** - Software Developer - from Munich, Germany. Microsoft MVP & Web Geek. - [The Art of Micro Frontends](https://microfrontends.art) - [Homepage](https://florian-rappl.de) - Twitter [@florianrappl](https://twitter.com/florianrappl)\n* **[Robert Muehsig](https://github.com/robertmuehsig)** - Software Developer - from Dresden, Germany, now living & working in Switzerland. Microsoft MVP & Web Geek. - [codeinside Blog](https://blog.codeinside.eu) - Twitter [@robert0muehsig](https://twitter.com/robert0muehsig)  \n  \nSee also the list of [contributors](https://github.com/ElectronNET/Electron.NET/graphs/contributors) who participated in this project.\n  \n## \ud83d\ude4b\u200d\u2640\ufe0f\ud83d\ude4b\u200d\u2642 Contributing\n\nFeel free to submit a pull request if you find any bugs (to see a list of active issues, visit the [Issues section](https://github.com/ElectronNET/Electron.NET/issues).\nPlease make sure all commits are properly documented.\n\n## \ud83e\uddea Working with this Repo\n\nThis video provides an introduction to development for Electron.NET: [Electron.NET - Contributing Getting Started](https://youtu.be/Po-saU_Z6Ws)  \n  \nThis repository consists of the main parts (API & CLI) and it's own \"playground\" ASP.NET Core application. Both main parts produce local NuGet packages, that are versioned with 99.0.0. The first thing you will need is to run one of the build scripts (.cmd or .ps1 for Windows, the .sh for macOS/Linux).\n\nIf you look for pure __[demo projects](https://github.com/ElectronNET)__ checkout the other repositories. \n\nThe problem working with this repository is, that NuGet has a pretty aggressive cache, see [here for further information](https://github.com/ElectronNET/Electron.NET/wiki).\n\n## \ud83d\ude4f Donate\n\nWe do this open source work in our free time. If you'd like us to invest more time on it, please [donate](https://donorbox.org/electron-net). Donation can be used to increase some issue priority. Thank you!\n\n[![donate](https://img.shields.io/badge/Donate-Donorbox-green.svg)](https://donorbox.org/electron-net)\n\nAlternatively, consider using a GitHub sponsorship for the core maintainers:\n\n- [Gregor Biswanger](https://github.com/sponsors/GregorBiswanger)\n- [Florian Rappl](https://github.com/sponsors/FlorianRappl)\n\nAny support appreciated! \ud83c\udf7b\n\n## \ud83c\udf89 License\n\nMIT-licensed. See [LICENSE](./LICENSE) for details.\n\n**Enjoy!**\n    \n## \ud83d\udcdd Important notes\n\n### ElectronNET.API & ElectronNET.CLI Version 9.31.2\n\nMake sure you also have the new Electron.NET API & CLI 9.31.2 version.\n\n```sh\ndotnet tool update ElectronNET.CLI -g\n```\n\nThis now uses [electron-builder](https://www.electron.build/configuration/configuration) and the necessary configuration to build is made in the **electron.manifest.json** file (on the build part). In addition, own Electron.NET configurations are stored (on the root).\n\nPlease make sure that your **electron.manifest.json** file has the following new structure:\n\n```json\n{\n  \"executable\": \"{{executable}}\",\n  \"splashscreen\": {\n    \"imageFile\": \"\"\n  },\n  \"name\": \"{{executable}}\",\n  \"author\": \"\",\n  \"singleInstance\": false,\n  \"build\": {\n    \"appId\": \"com.{{executable}}.app\",\n    \"productName\": \"{{executable}}\",\n    \"copyright\": \"Copyright \u00a9 2020\",\n    \"buildVersion\": \"1.0.0\",\n    \"compression\": \"maximum\",\n    \"directories\": {\n      \"output\": \"../../../bin/Desktop\"\n    },\n    \"extraResources\": [\n      {\n        \"from\": \"./bin\",\n        \"to\": \"bin\",\n        \"filter\": [\"**/*\"]\n      }\n    ],\n    \"files\": [\n      {\n        \"from\": \"./ElectronHostHook/node_modules\",\n        \"to\": \"ElectronHostHook/node_modules\",\n        \"filter\": [\"**/*\"]\n      },\n      \"**/*\"\n    ]\n  }\n}\n```\n\n### ElectronNET.CLI Version 0.0.9\n\nIn the Version 0.0.9 the CLI was not a global tool and needed to be registered like this in the *.csproj*:\n\n```xml\n<ItemGroup>\n  <DotNetCliToolReference Include=\"ElectronNET.CLI\" Version=\"0.0.9\" />\n</ItemGroup>\n```\n\nAfter you edited the *.csproj* file, you need to restore your NuGet packages within your Project. Run the following command in your ASP.NET Core folder:\n\n```sh\ndotnet restore\n```\n\nIf you still use this version you will need to invoke it like this:\n\n```sh\nelectronize ...\n```\n\n### Node.js Integration\n\nElectron.NET requires Node.js integration to be enabled for IPC to function. If you are not using the IPC functionality you can disable Node.js integration like so:\n\n```csharp\nWebPreferences wp = new WebPreferences();\nwp.NodeIntegration = false;\nBrowserWindowOptions browserWindowOptions = new BrowserWindowOptions\n{\n    WebPreferences = wp\n};\n\n```\n\n### Dependency Injection\n\nElectronNET.API can be added to your DI container within the `Startup` class. All of the modules available in Electron will be added as Singletons.\n\n```csharp\nusing ElectronNET.API;\n\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddElectron();\n}\n```\n",
        "releases": [
            {
                "name": "23.6.2",
                "date": "2024-02-15T00:15:26Z"
            },
            {
                "name": "23.6.2-alpha.71",
                "date": "2024-02-15T00:15:51Z"
            },
            {
                "name": "23.6.2-alpha.14",
                "date": "2023-04-03T12:22:18Z"
            },
            {
                "name": "23.6.1",
                "date": "2023-03-28T06:15:38Z"
            },
            {
                "name": "13.5.1",
                "date": "2021-07-08T12:10:28Z"
            },
            {
                "name": "11.5.1",
                "date": "2021-01-21T22:56:36Z"
            },
            {
                "name": "9.31.2",
                "date": "2020-07-06T17:01:08Z"
            },
            {
                "name": "9.31.1",
                "date": "2020-06-12T22:02:08Z"
            },
            {
                "name": "8.31.2",
                "date": "2020-05-11T23:00:57Z"
            },
            {
                "name": "8.31.1",
                "date": "2020-05-01T20:51:50Z"
            },
            {
                "name": "7.30.2",
                "date": "2019-12-01T23:04:42Z"
            },
            {
                "name": "5.30.1",
                "date": "2019-10-28T23:33:29Z"
            },
            {
                "name": "5.22.14",
                "date": "2019-07-29T20:04:54Z"
            },
            {
                "name": "5.22.13",
                "date": "2019-07-01T21:16:16Z"
            },
            {
                "name": "0.0.11",
                "date": "2018-12-30T22:26:15Z"
            },
            {
                "name": "",
                "date": "2018-12-05T21:40:31Z"
            },
            {
                "name": "0.0.9",
                "date": "2018-02-19T21:59:50Z"
            },
            {
                "name": "v0.0.7",
                "date": "2017-11-09T21:43:12Z"
            }
        ]
    }
}