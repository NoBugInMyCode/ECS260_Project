{
    "https://api.github.com/repos/arut/nginx-rtmp-module": {
        "forks": 3533,
        "watchers": 13582,
        "stars": 13582,
        "languages": {
            "C": 852375,
            "XSLT": 11765,
            "HTML": 3078,
            "Shell": 192
        },
        "commits": [
            "2024-12-24T10:27:05Z",
            "2024-04-03T07:24:47Z",
            "2024-04-03T07:09:46Z",
            "2024-04-03T06:22:00Z",
            "2021-05-25T07:42:16Z",
            "2021-05-24T10:08:45Z",
            "2020-12-02T13:42:40Z",
            "2017-11-29T10:47:32Z",
            "2017-09-28T17:05:21Z",
            "2017-07-10T15:26:17Z",
            "2017-06-10T17:37:56Z",
            "2017-06-10T17:21:49Z",
            "2017-06-01T11:13:12Z",
            "2017-02-13T13:28:31Z",
            "2016-10-07T10:15:50Z",
            "2016-08-09T12:45:06Z",
            "2016-07-05T17:23:44Z",
            "2016-03-07T05:44:44Z",
            "2015-03-23T19:30:37Z",
            "2014-09-23T19:39:09Z",
            "2014-09-21T06:17:58Z",
            "2014-09-17T05:42:25Z",
            "2014-09-17T03:10:38Z",
            "2014-09-13T20:48:03Z",
            "2014-09-09T16:45:57Z",
            "2014-09-09T16:45:06Z",
            "2014-09-01T18:44:12Z",
            "2014-09-01T14:30:41Z",
            "2014-09-01T14:01:28Z",
            "2014-09-01T13:21:13Z"
        ],
        "creation_date": "2012-03-14T05:37:38Z",
        "contributors": 10,
        "topics": [],
        "subscribers": 655,
        "readme": "# NGINX-based Media Streaming Server\n## nginx-rtmp-module\n\n\n### Project blog\n\n  http://nginx-rtmp.blogspot.com\n\n### Wiki manual\n\n  https://github.com/arut/nginx-rtmp-module/wiki/Directives\n\n### Google group\n\n  https://groups.google.com/group/nginx-rtmp\n\n  https://groups.google.com/group/nginx-rtmp-ru (Russian)\n\n### Donation page (Paypal etc)\n\n  http://arut.github.com/nginx-rtmp-module/\n\n### Features\n\n* RTMP/HLS/MPEG-DASH live streaming\n\n* RTMP Video on demand FLV/MP4,\n  playing from local filesystem or HTTP\n\n* Stream relay support for distributed\n  streaming: push & pull models\n\n* Recording streams in multiple FLVs\n\n* H264/AAC support\n\n* Online transcoding with FFmpeg\n\n* HTTP callbacks (publish/play/record/update etc)\n\n* Running external programs on certain events (exec)\n\n* HTTP control module for recording audio/video and dropping clients\n\n* Advanced buffering techniques\n  to keep memory allocations at a minimum\n  level for faster streaming and low\n  memory footprint\n\n* Proved to work with Wirecast, FMS, Wowza,\n  JWPlayer, FlowPlayer, StrobeMediaPlayback,\n  ffmpeg, avconv, rtmpdump, flvstreamer\n  and many more\n\n* Statistics in XML/XSL in machine- & human-\n  readable form\n\n* Linux/FreeBSD/MacOS/Windows\n\n### Build\n\ncd to NGINX source directory & run this:\n\n    ./configure --add-module=/path/to/nginx-rtmp-module\n    make\n    make install\n\nSeveral versions of nginx (1.3.14 - 1.5.0) require http_ssl_module to be\nadded as well:\n\n    ./configure --add-module=/path/to/nginx-rtmp-module --with-http_ssl_module\n\nFor building debug version of nginx add `--with-debug`\n\n    ./configure --add-module=/path/to-nginx/rtmp-module --with-debug\n\n[Read more about debug log](https://github.com/arut/nginx-rtmp-module/wiki/Debug-log)\n\n### Windows limitations\n\nWindows support is limited. These features are not supported\n\n* execs\n* static pulls\n* auto_push\n\n### RTMP URL format\n\n    rtmp://rtmp.example.com/app[/name]\n\napp -  should match one of application {}\n         blocks in config\n\nname - interpreted by each application\n         can be empty\n\n\n### Multi-worker live streaming\n\nModule supports multi-worker live\nstreaming through automatic stream pushing\nto nginx workers. This option is toggled with\nrtmp_auto_push directive.\n\n\n### Example nginx.conf\n\n    rtmp {\n\n        server {\n\n            listen 1935;\n\n            chunk_size 4000;\n\n            # TV mode: one publisher, many subscribers\n            application mytv {\n\n                # enable live streaming\n                live on;\n\n                # record first 1K of stream\n                record all;\n                record_path /tmp/av;\n                record_max_size 1K;\n\n                # append current timestamp to each flv\n                record_unique on;\n\n                # publish only from localhost\n                allow publish 127.0.0.1;\n                deny publish all;\n\n                #allow play all;\n            }\n\n            # Transcoding (ffmpeg needed)\n            application big {\n                live on;\n\n                # On every pusblished stream run this command (ffmpeg)\n                # with substitutions: $app/${app}, $name/${name} for application & stream name.\n                #\n                # This ffmpeg call receives stream from this application &\n                # reduces the resolution down to 32x32. The stream is the published to\n                # 'small' application (see below) under the same name.\n                #\n                # ffmpeg can do anything with the stream like video/audio\n                # transcoding, resizing, altering container/codec params etc\n                #\n                # Multiple exec lines can be specified.\n\n                exec ffmpeg -re -i rtmp://localhost:1935/$app/$name -vcodec flv -acodec copy -s 32x32\n                            -f flv rtmp://localhost:1935/small/${name};\n            }\n\n            application small {\n                live on;\n                # Video with reduced resolution comes here from ffmpeg\n            }\n\n            application webcam {\n                live on;\n\n                # Stream from local webcam\n                exec_static ffmpeg -f video4linux2 -i /dev/video0 -c:v libx264 -an\n                                   -f flv rtmp://localhost:1935/webcam/mystream;\n            }\n\n            application mypush {\n                live on;\n\n                # Every stream published here\n                # is automatically pushed to\n                # these two machines\n                push rtmp1.example.com;\n                push rtmp2.example.com:1934;\n            }\n\n            application mypull {\n                live on;\n\n                # Pull all streams from remote machine\n                # and play locally\n                pull rtmp://rtmp3.example.com pageUrl=www.example.com/index.html;\n            }\n\n            application mystaticpull {\n                live on;\n\n                # Static pull is started at nginx start\n                pull rtmp://rtmp4.example.com pageUrl=www.example.com/index.html name=mystream static;\n            }\n\n            # video on demand\n            application vod {\n                play /var/flvs;\n            }\n\n            application vod2 {\n                play /var/mp4s;\n            }\n\n            # Many publishers, many subscribers\n            # no checks, no recording\n            application videochat {\n\n                live on;\n\n                # The following notifications receive all\n                # the session variables as well as\n                # particular call arguments in HTTP POST\n                # request\n\n                # Make HTTP request & use HTTP retcode\n                # to decide whether to allow publishing\n                # from this connection or not\n                on_publish http://localhost:8080/publish;\n\n                # Same with playing\n                on_play http://localhost:8080/play;\n\n                # Publish/play end (repeats on disconnect)\n                on_done http://localhost:8080/done;\n\n                # All above mentioned notifications receive\n                # standard connect() arguments as well as\n                # play/publish ones. If any arguments are sent\n                # with GET-style syntax to play & publish\n                # these are also included.\n                # Example URL:\n                #   rtmp://localhost/myapp/mystream?a=b&c=d\n\n                # record 10 video keyframes (no audio) every 2 minutes\n                record keyframes;\n                record_path /tmp/vc;\n                record_max_frames 10;\n                record_interval 2m;\n\n                # Async notify about an flv recorded\n                on_record_done http://localhost:8080/record_done;\n\n            }\n\n\n            # HLS\n\n            # For HLS to work please create a directory in tmpfs (/tmp/hls here)\n            # for the fragments. The directory contents is served via HTTP (see\n            # http{} section in config)\n            #\n            # Incoming stream must be in H264/AAC. For iPhones use baseline H264\n            # profile (see ffmpeg example).\n            # This example creates RTMP stream from movie ready for HLS:\n            #\n            # ffmpeg -loglevel verbose -re -i movie.avi  -vcodec libx264\n            #    -vprofile baseline -acodec libmp3lame -ar 44100 -ac 1\n            #    -f flv rtmp://localhost:1935/hls/movie\n            #\n            # If you need to transcode live stream use 'exec' feature.\n            #\n            application hls {\n                live on;\n                hls on;\n                hls_path /tmp/hls;\n            }\n\n            # MPEG-DASH is similar to HLS\n\n            application dash {\n                live on;\n                dash on;\n                dash_path /tmp/dash;\n            }\n        }\n    }\n\n    # HTTP can be used for accessing RTMP stats\n    http {\n\n        server {\n\n            listen      8080;\n\n            # This URL provides RTMP statistics in XML\n            location /stat {\n                rtmp_stat all;\n\n                # Use this stylesheet to view XML as web page\n                # in browser\n                rtmp_stat_stylesheet stat.xsl;\n            }\n\n            location /stat.xsl {\n                # XML stylesheet to view RTMP stats.\n                # Copy stat.xsl wherever you want\n                # and put the full directory path here\n                root /path/to/stat.xsl/;\n            }\n\n            location /hls {\n                # Serve HLS fragments\n                types {\n                    application/vnd.apple.mpegurl m3u8;\n                    video/mp2t ts;\n                }\n                root /tmp;\n                add_header Cache-Control no-cache;\n            }\n\n            location /dash {\n                # Serve DASH fragments\n                root /tmp;\n                add_header Cache-Control no-cache;\n            }\n        }\n    }\n\n\n### Multi-worker streaming example\n\n    rtmp_auto_push on;\n\n    rtmp {\n        server {\n            listen 1935;\n\n            application mytv {\n                live on;\n            }\n        }\n    }\n",
        "releases": []
    }
}