{
    "https://api.github.com/repos/omniauth/omniauth": {
        "forks": 983,
        "watchers": 7926,
        "stars": 7926,
        "languages": {
            "Ruby": 102849,
            "CSS": 1591
        },
        "commits": [
            "2024-08-06T13:43:54Z",
            "2024-08-06T13:31:41Z",
            "2024-08-06T13:29:05Z",
            "2024-08-06T09:28:26Z",
            "2024-08-05T05:34:10Z",
            "2024-07-22T11:08:34Z",
            "2024-07-19T15:32:24Z",
            "2023-12-29T14:46:44Z",
            "2023-12-29T14:02:36Z",
            "2023-12-19T21:36:33Z",
            "2023-05-31T05:33:49Z",
            "2023-05-31T05:16:55Z",
            "2023-05-30T18:08:25Z",
            "2023-05-30T18:04:51Z",
            "2023-05-30T16:57:50Z",
            "2023-05-30T16:39:04Z",
            "2023-05-30T16:36:08Z",
            "2023-05-30T16:35:06Z",
            "2023-03-11T03:06:06Z",
            "2023-05-30T15:57:29Z",
            "2023-05-24T12:47:22Z",
            "2023-05-07T15:12:38Z",
            "2023-04-30T14:06:30Z",
            "2023-03-11T03:24:23Z",
            "2023-03-11T02:59:11Z",
            "2023-03-03T07:39:17Z",
            "2023-03-03T07:36:13Z",
            "2023-03-03T07:20:40Z",
            "2023-02-17T17:19:24Z",
            "2023-02-17T15:49:58Z"
        ],
        "creation_date": "2010-03-30T20:34:32Z",
        "contributors": 30,
        "topics": [
            "authentication",
            "hacktoberfest",
            "omniauth",
            "ruby"
        ],
        "subscribers": 126,
        "readme": "# OmniAuth: Standardized Multi-Provider Authentication\n\n[![Gem Version](http://img.shields.io/gem/v/omniauth.svg)][gem]\n[![Ruby](https://github.com/omniauth/omniauth/actions/workflows/main.yml/badge.svg)][githubactions]\n[![TruffleRuby](https://github.com/omniauth/omniauth/actions/workflows/truffle_ruby.yml/badge.svg)][githubactionstruffle]\n[![JRuby](https://github.com/omniauth/omniauth/actions/workflows/jruby.yml/badge.svg)][githubactionsjruby]\n[![Code Climate](https://api.codeclimate.com/v1/badges/ffd33970723587806744/maintainability)][codeclimate]\n[![Coverage Status](http://img.shields.io/coveralls/omniauth/omniauth.svg)][coveralls]\n\n[gem]: https://rubygems.org/gems/omniauth\n[githubactions]: https://github.com/omniauth/omniauth/actions/workflows/main.yml\n[githubactionstruffle]: https://github.com/omniauth/omniauth/actions/workflows/truffle_ruby.yml\n[githubactionsjruby]: https://github.com/omniauth/omniauth/actions/workflows/jruby.yml\n[codeclimate]: https://codeclimate.com/github/omniauth/omniauth\n[coveralls]: https://coveralls.io/r/omniauth/omniauth\n\nThis is the documentation for the in-development branch of OmniAuth.\nYou can find the documentation for the latest stable release [here](https://github.com/omniauth/omniauth/tree/v2.1.2)\n\n## An Introduction\nOmniAuth is a library that standardizes multi-provider authentication for\nweb applications. It was created to be powerful, flexible, and do as\nlittle as possible. Any developer can create **strategies** for OmniAuth\nthat can authenticate users via disparate systems. OmniAuth strategies\nhave been created for everything from Facebook to LDAP.\n\nIn order to use OmniAuth in your applications, you will need to leverage\none or more strategies. These strategies are generally released\nindividually as RubyGems, and you can see a [community maintained list](https://github.com/omniauth/omniauth/wiki/List-of-Strategies)\non the wiki for this project.\n\nOne strategy, called `Developer`, is included with OmniAuth and provides\na completely insecure, non-production-usable strategy that directly\nprompts a user for authentication information and then passes it\nstraight through. You can use it as a placeholder when you start\ndevelopment and easily swap in other strategies later.\n\n## Getting Started\nEach OmniAuth strategy is a Rack Middleware. That means that you can use\nit the same way that you use any other Rack middleware. For example, to\nuse the built-in Developer strategy in a Sinatra application you might\ndo this:\n\n```ruby\nrequire 'sinatra'\nrequire 'omniauth'\n\nclass MyApplication < Sinatra::Base\n  use Rack::Session::Cookie\n  use OmniAuth::Strategies::Developer\nend\n```\n\nBecause OmniAuth is built for *multi-provider* authentication, you may\nwant to leave room to run multiple strategies. For this, the built-in\n`OmniAuth::Builder` class gives you an easy way to specify multiple\nstrategies. Note that there is **no difference** between the following\ncode and using each strategy individually as middleware. This is an\nexample that you might put into a Rails initializer at\n`config/initializers/omniauth.rb`:\n\n```ruby\nRails.application.config.middleware.use OmniAuth::Builder do\n  provider :developer unless Rails.env.production?\n  provider :twitter, ENV['TWITTER_KEY'], ENV['TWITTER_SECRET']\nend\n```\n\nYou should look to the documentation for each provider you use for\nspecific initialization requirements.\n\n## Integrating OmniAuth Into Your Application\nOmniAuth is an extremely low-touch library. It is designed to be a\nblack box that you can send your application's users into when you need\nauthentication and then get information back. OmniAuth was intentionally\nbuilt not to automatically associate with a User model or make\nassumptions about how many authentication methods you might want to use\nor what you might want to do with the data once a user has\nauthenticated. This makes OmniAuth incredibly flexible. To use OmniAuth,\nyou need only to redirect users to `/auth/:provider`, where `:provider`\nis the name of the strategy (for example, `developer` or `twitter`).\nFrom there, OmniAuth will take over and take the user through the\nnecessary steps to authenticate them with the chosen strategy.\n\nOnce the user has authenticated, what do you do next? OmniAuth simply\nsets a special hash called the Authentication Hash on the Rack\nenvironment of a request to `/auth/:provider/callback`. This hash\ncontains as much information about the user as OmniAuth was able to\nglean from the utilized strategy. You should set up an endpoint in your\napplication that matches to the callback URL and then performs whatever\nsteps are necessary for your application. \n\nThe `omniauth.auth` key in the environment hash provides an\nAuthentication Hash which will contain information about the just\nauthenticated user including a unique id, the strategy they just used\nfor authentication, and personal details such as name and email address\nas available. For an in-depth description of what the authentication\nhash might contain, see the [Auth Hash Schema wiki page](https://github.com/omniauth/omniauth/wiki/Auth-Hash-Schema).\n\nNote that OmniAuth does not perform any actions beyond setting some\nenvironment information on the callback request. It is entirely up to\nyou how you want to implement the particulars of your application's\nauthentication flow.\n\n## rack_csrf\n\n`omniauth` is not OOTB-compatible with [rack_csrf](https://github.com/baldowl/rack_csrf). In order to do so, the following code needs to be added to the application bootstrapping code:\n\n```ruby\nOmniAuth::AuthenticityTokenProtection.default_options(key: \"csrf.token\", authenticity_param: \"_csrf\")\n```\n\n## Rails (without Devise)\nTo get started, add the following gems\n\n**Gemfile**:\n```ruby\ngem 'omniauth'\ngem \"omniauth-rails_csrf_protection\"\n```\n\nThen insert OmniAuth as a middleware\n\n**config/initializers/omniauth.rb**:\n```ruby\nRails.application.config.middleware.use OmniAuth::Builder do\n  provider :developer if Rails.env.development?\nend\n```\n\nAdditional providers can be added here in the future. Next we wire it\nall up using routes, a controller and a login view.\n\n**config/routes.rb**:\n\n```ruby\n  get 'auth/:provider/callback', to: 'sessions#create'\n  get '/login', to: 'sessions#new'\n```\n\n**app/controllers/sessions_controller.rb**:\n```ruby\nclass SessionsController < ApplicationController\n  def new\n    render :new\n  end\n\n  def create\n    user_info = request.env['omniauth.auth']\n    raise user_info # Your own session management should be placed here.\n  end\nend\n```\n\n**app/views/sessions/new.html.erb**:\n```erb\n<%= form_tag('/auth/developer', method: 'post', data: {turbo: false}) do %>\n  <button type='submit'>Login with Developer</button>\n<% end %>\n```\n\nNow if you visit `/login` and click the Login button, you should see the\nOmniAuth developer login screen. After submitting it, you are returned to your\napplication at `Sessions#create`. The raise should now display all the Omniauth\ndetails you have available to integrate it into your own user management.\n\nIf you want out of the box usermanagement, you should consider using Omniauth\nthrough Devise. Please visit the [Devise Github page](https://github.com/heartcombo/devise#omniauth)\nfor more information.\n\n\n## Rails API\nThe following middleware are (by default) included for session management in\nRails applications. When using OmniAuth with a Rails API, you'll need to add\none of these required middleware back in:\n\n- `ActionDispatch::Session::CacheStore`\n- `ActionDispatch::Session::CookieStore`\n- `ActionDispatch::Session::MemCacheStore`\n\nThe trick to adding these back in is that, by default, they are passed\n`session_options` when added (including the session key), so you can't just add\na `session_store.rb` initializer, add `use ActionDispatch::Session::CookieStore`\nand have sessions functioning as normal.\n\nTo be clear: sessions may work, but your session options will be ignored\n(i.e. the session key will default to `_session_id`).  Instead of the\ninitializer, you'll have to set the relevant options somewhere\nbefore your middleware is built (like `application.rb`) and pass them to your\npreferred middleware, like this:\n\n**application.rb:**\n\n```ruby\nconfig.session_store :cookie_store, key: '_interslice_session'\nconfig.middleware.use ActionDispatch::Cookies # Required for all session management\nconfig.middleware.use ActionDispatch::Session::CookieStore, config.session_options\n```\n\n(Thanks @mltsy)\n\n## Logging\nOmniAuth supports a configurable logger. By default, OmniAuth will log\nto `STDOUT` but you can configure this using `OmniAuth.config.logger`:\n\n```ruby\n# Rails application example\nOmniAuth.config.logger = Rails.logger\n```\n\n## Origin Param\nThe `origin` url parameter is typically used to inform where a user came from\nand where, should you choose to use it, they'd want to return to.\nOmniauth supports the following settings which can be configured on a provider level:\n\n**Default**:\n```ruby\nprovider :twitter, ENV['KEY'], ENV['SECRET']\nPOST /auth/twitter/?origin=[URL]\n# If the `origin` parameter is blank, `omniauth.origin` is set to HTTP_REFERER\n```\n\n**Using a differently named origin parameter**:\n```ruby\nprovider :twitter, ENV['KEY'], ENV['SECRET'], origin_param: 'return_to'\nPOST /auth/twitter/?return_to=[URL]\n# If the `return_to` parameter is blank, `omniauth.origin` is set to HTTP_REFERER\n```\n\n**Disabled**:\n```ruby\nprovider :twitter, ENV['KEY'], ENV['SECRET'], origin_param: false\nPOST /auth/twitter\n# This means the origin should be handled by your own application. \n# Note that `omniauth.origin` will always be blank.\n```\n\n## Resources\nThe [OmniAuth Wiki](https://github.com/omniauth/omniauth/wiki) has\nactively maintained in-depth documentation for OmniAuth. It should be\nyour first stop if you are wondering about a more in-depth look at\nOmniAuth, how it works, and how to use it.\n\n## OmniAuth for Enterprise\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of OmniAuth and thousands of other packages are working with\nTidelift to deliver commercial support and maintenance for the open source\npackages you use to build your applications. Save time, reduce risk, and\nimprove code health, while paying the maintainers of the exact packages you use.\n[Learn more.](https://tidelift.com/subscription/pkg/rubygems-omniauth?utm_source=undefined&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n## Supported Ruby Versions\nOmniAuth is tested under 2.5, 2.6, 2.7, 3.0, 3.1, 3.2, truffleruby, and JRuby.\n\n## Versioning\nThis library aims to adhere to [Semantic Versioning 2.0.0][semver]. Violations\nof this scheme should be reported as bugs. Specifically, if a minor or patch\nversion is released that breaks backward compatibility, that version should be\nimmediately yanked and/or a new version should be immediately released that\nrestores compatibility. Breaking changes to the public API will only be\nintroduced with new major versions. As a result of this policy, you can (and\nshould) specify a dependency on this gem using the [Pessimistic Version\nConstraint][pvc] with two digits of precision. For example:\n\n    spec.add_dependency 'omniauth', '~> 1.0'\n\n[semver]: http://semver.org/\n[pvc]: http://guides.rubygems.org/patterns/#pessimistic-version-constraint\n\n## License\nCopyright (c) 2010-2017 Michael Bleigh and Intridea, Inc. See [LICENSE][] for\ndetails.\n\n[license]: LICENSE.md\n",
        "releases": [
            {
                "name": "v1.9.2",
                "date": "2022-08-19T14:27:07Z"
            },
            {
                "name": "v2.1.0",
                "date": "2022-04-13T18:35:56Z"
            },
            {
                "name": "v2.0.4",
                "date": "2021-04-07T20:23:35Z"
            },
            {
                "name": "Fix rescuing of application errors when call_app! is used.",
                "date": "2021-02-18T18:01:10Z"
            },
            {
                "name": "Fix for incorrect order of request_validation_phase in test_mode.",
                "date": "2021-02-02T15:59:30Z"
            },
            {
                "name": "Allow passing rack-protection configuration to default request_validation_phase",
                "date": "2021-01-16T21:23:58Z"
            },
            {
                "name": "v2.0.0",
                "date": "2021-01-11T19:43:56Z"
            },
            {
                "name": "v2.0.0 Release Candidate 1",
                "date": "2020-12-11T06:38:44Z"
            },
            {
                "name": "v1.9.1",
                "date": "2020-03-02T17:51:36Z"
            },
            {
                "name": "v1.9.0",
                "date": "2018-12-14T17:39:34Z"
            },
            {
                "name": "v1.8.1",
                "date": "2017-12-28T04:44:26Z"
            },
            {
                "name": "v1.8.0",
                "date": "2017-12-27T18:52:40Z"
            },
            {
                "name": "v1.7.1",
                "date": "2017-10-02T17:19:02Z"
            },
            {
                "name": "v1.7.0",
                "date": "2017-09-28T19:15:44Z"
            },
            {
                "name": "v1.6.1",
                "date": "2017-02-18T20:59:56Z"
            },
            {
                "name": "v1.6.0",
                "date": "2017-02-17T23:15:03Z"
            },
            {
                "name": "v1.5.0",
                "date": "2017-02-11T21:42:25Z"
            },
            {
                "name": "v1.4.3",
                "date": "2017-02-11T18:54:36Z"
            },
            {
                "name": "v1.4.2",
                "date": "2017-02-11T18:32:50Z"
            },
            {
                "name": "v1.4.1",
                "date": "2017-02-08T17:21:30Z"
            },
            {
                "name": "v1.4.0",
                "date": "2017-02-06T01:13:04Z"
            }
        ]
    }
}