{
    "https://api.github.com/repos/rust-embedded/rust-raspberrypi-OS-tutorials": {
        "forks": 813,
        "watchers": 13887,
        "stars": 13887,
        "languages": {
            "Rust": 2586259,
            "Makefile": 265998,
            "Ruby": 184647,
            "Assembly": 99867,
            "Dockerfile": 4660,
            "Shell": 2086
        },
        "commits": [
            "2023-12-14T11:22:23Z",
            "2023-12-14T08:43:46Z",
            "2023-12-14T08:26:17Z",
            "2023-11-14T08:33:12Z",
            "2023-10-02T10:14:10Z",
            "2023-09-25T13:35:15Z",
            "2023-09-25T12:25:58Z",
            "2023-09-25T12:25:30Z",
            "2023-09-25T12:23:39Z",
            "2023-09-25T12:23:11Z",
            "2023-09-25T12:22:34Z",
            "2023-09-15T12:22:15Z",
            "2023-03-09T11:19:03Z",
            "2022-12-30T20:30:34Z",
            "2022-11-19T22:47:11Z",
            "2022-11-06T21:21:05Z",
            "2022-11-06T21:02:03Z",
            "2022-10-26T20:36:35Z",
            "2022-10-26T20:02:12Z",
            "2022-10-26T19:48:14Z",
            "2022-10-25T06:46:05Z",
            "2022-10-25T06:37:35Z",
            "2022-10-24T20:15:48Z",
            "2022-10-23T15:34:28Z",
            "2022-09-26T21:15:07Z",
            "2022-09-26T20:38:55Z",
            "2022-09-23T20:56:32Z",
            "2022-09-23T20:54:40Z",
            "2022-09-23T20:38:10Z",
            "2022-09-22T07:37:26Z"
        ],
        "creation_date": "2018-03-31T17:08:56Z",
        "contributors": 30,
        "topics": [
            "aarch64",
            "arm64",
            "armv8",
            "bare-metal",
            "embedded-rust",
            "kernel",
            "operating-system",
            "os",
            "raspberry",
            "raspberry-pi",
            "raspberry-pi-3",
            "raspberry-pi-4",
            "rpi3",
            "rpi4",
            "rust",
            "tutorial"
        ],
        "subscribers": 238,
        "readme": "# Operating System development tutorials in Rust on the Raspberry Pi\n\n![](https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/workflows/BSP-RPi3/badge.svg) ![](https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/workflows/BSP-RPi4/badge.svg) ![](https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/workflows/Unit-Tests/badge.svg) ![](https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/workflows/Integration-Tests/badge.svg) ![](https://img.shields.io/badge/License-MIT%20OR%20Apache--2.0-blue)\n\n<br/>\n\n<img src=\"doc/header.jpg\" height=\"372\"> <img src=\"doc/minipush_demo_frontpage.gif\" height=\"372\">\n\n## \u2139\ufe0f Introduction\n\nThis is a tutorial series for hobby OS developers who are new to ARM's 64 bit [ARMv8-A\narchitecture]. The tutorials will give a guided, step-by-step tour of how to write a [monolithic]\nOperating System `kernel` for an `embedded system` from scratch. They cover implementation of common\nOperating Systems tasks, like writing to the serial console, setting up virtual memory and handling\nHW exceptions. All while leveraging `Rust`'s unique features to provide for safety and speed.\n\nHave fun!\n\n_Best regards,<br>Andre ([@andre-richter])_\n\nP.S.: For other languages, please look out for alternative README files. For example,\n[`README.CN.md`](README.CN.md) or [`README.ES.md`](README.ES.md). Many thanks to our\n[translators](#translations-of-this-repository) \ud83d\ude4c.\n\n[ARMv8-A architecture]: https://developer.arm.com/products/architecture/cpu-architecture/a-profile/docs\n[monolithic]: https://en.wikipedia.org/wiki/Monolithic_kernel\n[@andre-richter]: https://github.com/andre-richter\n\n## \ud83d\udcd1 Organization\n\n- Each tutorial contains a stand-alone, bootable `kernel` binary.\n- Each new tutorial extends the previous one.\n- Each tutorial `README` will have a short `tl;dr` section giving a brief overview of the additions,\n  and show the source code `diff` to the previous tutorial, so that you can conveniently inspect the\n  changes/additions.\n    - Some tutorials have a full-fledged, detailed text in addition to the `tl;dr` section. The\n      long-term plan is that all tutorials get a full text, but for now this is exclusive to\n      tutorials where I think that `tl;dr` and `diff` are not enough to get the idea.\n- The code written in these tutorials supports and runs on the **Raspberry Pi 3** and the\n  **Raspberry Pi 4**.\n  - Tutorials 1 till 5 are groundwork code which only makes sense to run in `QEMU`.\n  - Starting with [tutorial 5](05_drivers_gpio_uart), you can load and run the kernel on the real\n    Raspberrys and observe output over `UART`.\n- Although the Raspberry Pi 3 and 4 are the main target boards, the code is written in a modular\n  fashion which allows for easy porting to other CPU architectures and/or boards.\n  - I would really love if someone takes a shot at a **RISC-V** implementation!\n- For editing, I recommend [Visual Studio Code] with [Rust Analyzer].\n- In addition to the tutorial text, also check out the `make doc` command in each tutorial. It lets\n  you browse the extensively documented code in a convenient way.\n\n### Output of `make doc`\n\n![make doc](doc/make_doc.png)\n\n[Visual Studio Code]: https://code.visualstudio.com\n[Rust Analyzer]: https://rust-analyzer.github.io\n\n## \ud83d\udee0 System Requirements\n\nThe tutorials are primarily targeted at **Linux**-based distributions. Most stuff will also work on **macOS**, but this is only _experimental_.\n\n### \ud83d\ude80 The tl;dr Version\n\n1. [Install Docker Engine][install_docker].\n1. (**Linux only**) Ensure your user account is in the [docker group].\n1. Prepare the `Rust` toolchain. Most of it will be handled on first use through the\n   [rust-toolchain.toml](rust-toolchain.toml) file. What's left for us to do is:\n   1. If you already have a version of Rust installed:\n      ```bash\n      cargo install cargo-binutils rustfilt\n      ```\n\n   1. If you need to install Rust from scratch:\n      ```bash\n      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n      source $HOME/.cargo/env\n      cargo install cargo-binutils rustfilt\n      ```\n\n1. In case you use `Visual Studio Code`, I strongly recommend installing the [Rust Analyzer extension].\n1. (**macOS only**) Install a few `Ruby` gems.\n\n  This was last tested by the author with Ruby version `3.0.2` on `macOS Monterey`. If you are using\n  `rbenv`, the respective `.ruby-version` file is already in place. If you never heard of `rbenv`,\n  try using [this little guide](https://stackoverflow.com/a/68118750).\n\n   Run this in the repository root folder:\n\n   ```bash\n   bundle config set --local path '.vendor/bundle'\n   bundle config set --local without 'development'\n   bundle install\n   ```\n\n[docker group]: https://docs.docker.com/engine/install/linux-postinstall/\n[Rust Analyzer extension]: https://marketplace.visualstudio.com/items?itemName=matklad.rust-analyzer\n\n### \ud83e\uddf0 More Details: Eliminating Toolchain Hassle\n\nThis series tries to put a strong focus on user friendliness. Therefore, efforts were made to\neliminate the biggest painpoint in embedded development as much as possible: `Toolchain hassle`.\n\nRust itself is already helping a lot in that regard, because it has built-in support for\ncross-compilation. All that we need for cross-compiling from an `x86` host to the Raspberry Pi's\n`AArch64` architecture will be automatically installed by `rustup`. However, besides the Rust\ncompiler, we will use some more tools. Among others:\n\n- `QEMU` to emulate our kernel on the host system.\n- A self-made tool called `Minipush` to load a kernel onto the Raspberry Pi on-demand over `UART`.\n- `OpenOCD` and `GDB` for debugging on the target.\n\nThere is a lot that can go wrong while installing and/or compiling the correct version of each tool\non your host machine. For example, your distribution might not provide the latest version that is\nneeded. Or you are missing some hard-to-get dependencies for the compilation of one of these tools.\n\nThis is why we will make use of [Docker][install_docker] whenever possible. We are providing an\naccompanying container that has all the needed tools or dependencies pre-installed, and it gets\npulled in automagically once it is needed. If you want to know more about Docker and peek at the\nprovided container, please refer to the repository's [docker](docker) folder.\n\n[install_docker]: https://docs.docker.com/engine/install/#server\n\n## \ud83d\udcdf USB Serial Output\n\nSince the kernel developed in the tutorials runs on the real hardware, it is highly recommended to\nget a USB serial cable to get the full experience.\n\n- You can find USB-to-serial cables that should work right away at [\\[1\\]] [\\[2\\]], but many others\n  will work too. Ideally, your cable is based on the `CP2102` chip.\n- You connect it to `GND` and GPIO pins `14/15` as shown below.\n- [Tutorial 5](05_drivers_gpio_uart) is the first where you can use it. Check it out for\n  instructions on how to prepare the SD card to boot your self-made kernel from it.\n- Starting with [tutorial 6](06_uart_chainloader), booting kernels on your Raspberry is getting\n  _really_ comfortable. In this tutorial, a so-called `chainloader` is developed, which will be the\n  last file you need to manually copy on the SD card for a while. It will enable you to load the\n  tutorial kernels during boot on demand over `UART`.\n\n![UART wiring diagram](doc/wiring.png)\n\n[\\[1\\]]: https://www.amazon.de/dp/B0757FQ5CX/ref=cm_sw_r_tw_dp_U_x_ozGRDbVTJAG4Q\n[\\[2\\]]: https://www.adafruit.com/product/954\n\n## \ud83d\ude4c Acknowledgements\n\nThe original version of the tutorials started out as a fork of [Zoltan\nBaldaszti](https://github.com/bztsrc)'s awesome [tutorials on bare metal programming on\nRPi3](https://github.com/bztsrc/raspi3-tutorial) in `C`. Thanks for giving me a head start!\n\n### Translations of this repository\n\n - **Chinese**\n   - [@colachg] and [@readlnh].\n   - Need updating.\n - **Spanish**\n   -  [@zanezhub].\n   -  In the future there'll be tutorials translated to spanish.\n\n[@colachg]: https://github.com/colachg\n[@readlnh]: https://github.com/readlnh\n[@zanezhub]: https://github.com/zanezhub\n\n## License\n\nLicensed under either of\n\n- Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or <https://www.apache.org/licenses/LICENSE-2.0>)\n- MIT license ([LICENSE-MIT](LICENSE-MIT) or <https://opensource.org/licenses/MIT>)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the\nwork by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any\nadditional terms or conditions.\n",
        "releases": []
    }
}