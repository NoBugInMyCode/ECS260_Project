{
    "https://api.github.com/repos/sql-js/sql.js": {
        "forks": 1064,
        "watchers": 12945,
        "stars": 12945,
        "languages": {
            "JavaScript": 113890,
            "Makefile": 8344,
            "Dockerfile": 6075,
            "HTML": 1778,
            "Shell": 449
        },
        "commits": [
            "2024-10-29T20:47:43Z",
            "2024-10-29T20:34:03Z",
            "2024-10-29T19:46:25Z",
            "2024-07-30T15:53:43Z",
            "2024-07-29T19:33:40Z",
            "2024-04-14T08:41:46Z",
            "2024-04-14T07:30:04Z",
            "2024-02-09T07:24:29Z",
            "2024-01-20T23:36:17Z",
            "2024-01-20T23:08:13Z",
            "2024-01-20T22:55:23Z",
            "2024-01-20T23:05:35Z",
            "2024-01-16T17:09:58Z",
            "2024-01-16T13:04:08Z",
            "2023-12-15T16:44:36Z",
            "2024-01-12T22:50:28Z",
            "2023-11-28T20:17:43Z",
            "2023-11-28T20:10:43Z",
            "2023-11-28T20:04:57Z",
            "2023-11-28T19:00:32Z",
            "2023-10-18T22:07:49Z",
            "2023-02-09T16:33:27Z",
            "2022-09-08T01:26:28Z",
            "2022-09-08T01:13:12Z",
            "2022-09-08T00:46:35Z",
            "2022-06-27T15:47:33Z",
            "2022-06-02T08:31:09Z",
            "2022-06-01T08:25:54Z",
            "2022-06-01T07:54:27Z",
            "2022-06-01T07:52:42Z"
        ],
        "creation_date": "2012-02-27T03:05:49Z",
        "contributors": 30,
        "topics": [
            "database",
            "emscripten",
            "javascript",
            "sql",
            "sqlite",
            "wasm"
        ],
        "subscribers": 240,
        "readme": "<img src=\"https://user-images.githubusercontent.com/552629/76405509-87025300-6388-11ea-86c9-af882abb00bd.png\" width=\"40\" height=\"40\" />\n\n# SQLite compiled to JavaScript\n\n[![CI status](https://github.com/sql-js/sql.js/workflows/CI/badge.svg)](https://github.com/sql-js/sql.js/actions)\n[![npm](https://img.shields.io/npm/v/sql.js)](https://www.npmjs.com/package/sql.js)\n[![CDNJS version](https://img.shields.io/cdnjs/v/sql.js.svg)](https://cdnjs.com/libraries/sql.js)\n\n*sql.js* is a javascript SQL database. It allows you to create a relational database and query it entirely in the browser. You can try it in [this online demo](https://sql.js.org/examples/GUI/). It uses a [virtual database file stored in memory](https://emscripten.org/docs/porting/files/file_systems_overview.html), and thus **doesn't persist the changes** made to the database. However, it allows you to **import** any existing sqlite file, and to **export** the created database as a [JavaScript typed array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays).\n\n*sql.js* uses [emscripten](https://emscripten.org/docs/introducing_emscripten/about_emscripten.html) to compile [SQLite](http://sqlite.org/about.html) to webassembly (or to javascript code for compatibility with older browsers). It includes [contributed math and string extension functions](https://www.sqlite.org/contrib?orderby=date).\n\nsql.js can be used like any traditional JavaScript library. If you are building a native application in JavaScript (using Electron for instance), or are working in node.js, you will likely prefer to use [a native binding of SQLite to JavaScript](https://www.npmjs.com/package/sqlite3). A native binding will not only be faster because it will run native code, but it will also be able to work on database files directly instead of having to load the entire database in memory, avoiding out of memory errors and further improving performances.\n\nSQLite is public domain, sql.js is MIT licensed.\n\n## API documentation\nA [full API documentation](https://sql.js.org/documentation/) for all the available classes and methods is available.\nIt is generated from comments inside the source code, and is thus always up to date.\n\n## Usage\n\nBy default, *sql.js* uses [wasm](https://developer.mozilla.org/en-US/docs/WebAssembly), and thus needs to load a `.wasm` file in addition to the javascript library. You can find this file in `./node_modules/sql.js/dist/sql-wasm.wasm` after installing sql.js from npm, and instruct your bundler to add it to your static assets or load it from [a CDN](https://cdnjs.com/libraries/sql.js). Then use the [`locateFile`](https://emscripten.org/docs/api_reference/module.html#Module.locateFile) property of the configuration object passed to `initSqlJs` to indicate where the file is. If you use an asset builder such as webpack, you can automate this. See [this demo of how to integrate sql.js with webpack (and react)](https://github.com/sql-js/react-sqljs-demo).\n\n```javascript\nconst initSqlJs = require('sql.js');\n// or if you are in a browser:\n// const initSqlJs = window.initSqlJs;\n\nconst SQL = await initSqlJs({\n  // Required to load the wasm binary asynchronously. Of course, you can host it wherever you want\n  // You can omit locateFile completely when running in node\n  locateFile: file => `https://sql.js.org/dist/${file}`\n});\n\n// Create a database\nconst db = new SQL.Database();\n// NOTE: You can also use new SQL.Database(data) where\n// data is an Uint8Array representing an SQLite database file\n\n\n// Execute a single SQL string that contains multiple statements\nlet sqlstr = \"CREATE TABLE hello (a int, b char); \\\nINSERT INTO hello VALUES (0, 'hello'); \\\nINSERT INTO hello VALUES (1, 'world');\";\ndb.run(sqlstr); // Run the query without returning anything\n\n// Prepare an sql statement\nconst stmt = db.prepare(\"SELECT * FROM hello WHERE a=:aval AND b=:bval\");\n\n// Bind values to the parameters and fetch the results of the query\nconst result = stmt.getAsObject({':aval' : 1, ':bval' : 'world'});\nconsole.log(result); // Will print {a:1, b:'world'}\n\n// Bind other values\nstmt.bind([0, 'hello']);\nwhile (stmt.step()) console.log(stmt.get()); // Will print [0, 'hello']\n// free the memory used by the statement\nstmt.free();\n// You can not use your statement anymore once it has been freed.\n// But not freeing your statements causes memory leaks. You don't want that.\n\nconst res = db.exec(\"SELECT * FROM hello\");\n/*\n[\n  {columns:['a','b'], values:[[0,'hello'],[1,'world']]}\n]\n*/\n\n// You can also use JavaScript functions inside your SQL code\n// Create the js function you need\nfunction add(a, b) {return a+b;}\n// Specifies the SQL function's name, the number of it's arguments, and the js function to use\ndb.create_function(\"add_js\", add);\n// Run a query in which the function is used\ndb.run(\"INSERT INTO hello VALUES (add_js(7, 3), add_js('Hello ', 'world'));\"); // Inserts 10 and 'Hello world'\n\n// You can create custom aggregation functions, by passing a name\n// and a set of functions to `db.create_aggregate`:\n//\n// - an `init` function. This function receives no argument and returns\n//   the initial value for the state of the aggregate function.\n// - a `step` function. This function takes two arguments\n//    - the current state of the aggregation\n//    - a new value to aggregate to the state\n//  It should return a new value for the state.\n// - a `finalize` function. This function receives a state object, and\n//   returns the final value of the aggregate. It can be omitted, in which case\n//   the final value of the state will be returned directly by the aggregate function.\n//\n// Here is an example aggregation function, `json_agg`, which will collect all\n// input values and return them as a JSON array:\ndb.create_aggregate(\n  \"json_agg\",\n  {\n    init: () => [],\n    step: (state, val) => [...state, val],\n    finalize: (state) => JSON.stringify(state),\n  }\n);\n\ndb.exec(\"SELECT json_agg(column1) FROM (VALUES ('hello'), ('world'))\");\n// -> The result of the query is the string '[\"hello\",\"world\"]'\n\n// Export the database to an Uint8Array containing the SQLite database file\nconst binaryArray = db.export();\n```\n\n## Demo\nThere are a few examples [available here](https://sql-js.github.io/sql.js/index.html). The most full-featured is the [Sqlite Interpreter](https://sql-js.github.io/sql.js/examples/GUI/index.html).\n\n## Examples\nThe test files provide up to date example of the use of the api.\n### Inside the browser\n#### Example **HTML** file:\n```html\n<meta charset=\"utf8\" />\n<html>\n  <script src='/dist/sql-wasm.js'></script>\n  <script>\n    config = {\n      locateFile: filename => `/dist/${filename}`\n    }\n    // The `initSqlJs` function is globally provided by all of the main dist files if loaded in the browser.\n    // We must specify this locateFile function if we are loading a wasm file from anywhere other than the current html page's folder.\n    initSqlJs(config).then(function(SQL){\n      //Create the database\n      const db = new SQL.Database();\n      // Run a query without reading the results\n      db.run(\"CREATE TABLE test (col1, col2);\");\n      // Insert two rows: (1,111) and (2,222)\n      db.run(\"INSERT INTO test VALUES (?,?), (?,?)\", [1,111,2,222]);\n\n      // Prepare a statement\n      const stmt = db.prepare(\"SELECT * FROM test WHERE col1 BETWEEN $start AND $end\");\n      stmt.getAsObject({$start:1, $end:1}); // {col1:1, col2:111}\n\n      // Bind new values\n      stmt.bind({$start:1, $end:2});\n      while(stmt.step()) { //\n        const row = stmt.getAsObject();\n        console.log('Here is a row: ' + JSON.stringify(row));\n      }\n    });\n  </script>\n  <body>\n    Output is in Javascript console\n  </body>\n</html>\n```\n\n#### Creating a database from a file chosen by the user\n`SQL.Database` constructor takes an array of integer representing a database file as an optional parameter.\nThe following code uses an HTML input as the source for loading a database:\n```javascript\ndbFileElm.onchange = () => {\n  const f = dbFileElm.files[0];\n  const r = new FileReader();\n  r.onload = function() {\n    const Uints = new Uint8Array(r.result);\n    db = new SQL.Database(Uints);\n  }\n  r.readAsArrayBuffer(f);\n}\n```\nSee : https://sql-js.github.io/sql.js/examples/GUI/gui.js\n\n#### Loading a database from a server\n\n##### using fetch\n\n```javascript\nconst sqlPromise = initSqlJs({\n  locateFile: file => `https://path/to/your/dist/folder/dist/${file}`\n});\nconst dataPromise = fetch(\"/path/to/database.sqlite\").then(res => res.arrayBuffer());\nconst [SQL, buf] = await Promise.all([sqlPromise, dataPromise])\nconst db = new SQL.Database(new Uint8Array(buf));\n```\n\n##### using XMLHttpRequest\n\n```javascript\nconst xhr = new XMLHttpRequest();\n// For example: https://github.com/lerocha/chinook-database/raw/master/ChinookDatabase/DataSources/Chinook_Sqlite.sqlite\nxhr.open('GET', '/path/to/database.sqlite', true);\nxhr.responseType = 'arraybuffer';\n\nxhr.onload = e => {\n  const uInt8Array = new Uint8Array(xhr.response);\n  const db = new SQL.Database(uInt8Array);\n  const contents = db.exec(\"SELECT * FROM my_table\");\n  // contents is now [{columns:['col1','col2',...], values:[[first row], [second row], ...]}]\n};\nxhr.send();\n```\nSee: https://github.com/sql-js/sql.js/wiki/Load-a-database-from-the-server\n\n\n### Use from node.js\n\n`sql.js` is [hosted on npm](https://www.npmjs.org/package/sql.js). To install it, you can simply run `npm install sql.js`.\nAlternatively, you can simply download `sql-wasm.js` and `sql-wasm.wasm`, from the download link below.\n\n#### read a database from the disk:\n```javascript\nconst fs = require('fs');\nconst initSqlJs = require('sql-wasm.js');\nconst filebuffer = fs.readFileSync('test.sqlite');\n\ninitSqlJs().then(function(SQL){\n  // Load the db\n  const db = new SQL.Database(filebuffer);\n});\n\n```\n\n#### write a database to the disk\nYou need to convert the result of `db.export` to a buffer\n```javascript\nconst fs = require(\"fs\");\n// [...] (create the database)\nconst data = db.export();\nconst buffer = Buffer.from(data);\nfs.writeFileSync(\"filename.sqlite\", buffer);\n```\n\nSee : https://github.com/sql-js/sql.js/blob/master/test/test_node_file.js\n\n### Use as web worker\nIf you don't want to run CPU-intensive SQL queries in your main application thread,\nyou can use the *more limited* WebWorker API.\n\nYou will need to download `worker.sql-wasm.js` and `worker.sql-wasm.wasm` from the [release page](https://github.com/sql-js/sql.js/releases).\n\nExample:\n```html\n<script>\n  const worker = new Worker(\"/dist/worker.sql-wasm.js\");\n  worker.onmessage = () => {\n    console.log(\"Database opened\");\n    worker.onmessage = event => {\n      console.log(event.data); // The result of the query\n    };\n\n    worker.postMessage({\n      id: 2,\n      action: \"exec\",\n      sql: \"SELECT age,name FROM test WHERE id=$id\",\n      params: { \"$id\": 1 }\n    });\n  };\n\n  worker.onerror = e => console.log(\"Worker error: \", e);\n  worker.postMessage({\n    id:1,\n    action:\"open\",\n    buffer:buf, /*Optional. An ArrayBuffer representing an SQLite Database file*/\n  });\n</script>\n```\n### Enabling BigInt support\nIf you need ```BigInt``` support, it is partially supported since most browsers now supports it including Safari.Binding ```BigInt``` is still not supported, only getting ```BigInt``` from the database is supported for now.\n\n```html\n<script>\n  const stmt = db.prepare(\"SELECT * FROM test\");\n  const config = {useBigInt: true};\n  /*Pass optional config param to the get function*/\n  while (stmt.step()) console.log(stmt.get(null, config));\n\n  /*OR*/\n  const results = db.exec(\"SELECT * FROM test\", config);\n  console.log(results[0].values)\n</script>\n```\nOn WebWorker, you can just add ```config``` param before posting a message. With this, you wont have to pass config param on ```get``` function.\n\n```html\n<script>\n  worker.postMessage({\n    id:1,\n    action:\"exec\",\n    sql: \"SELECT * FROM test\",\n    config: {useBigInt: true}, /*Optional param*/\n  });\n</script>\n```\n\nSee [examples/GUI/gui.js](examples/GUI/gui.js) for a full working example.\n\n## Flavors/versions Targets/Downloads\n\nThis library includes both WebAssembly and asm.js versions of Sqlite. (WebAssembly is the newer, preferred way to compile to JavaScript, and has superceded asm.js. It produces smaller, faster code.) Asm.js versions are included for compatibility.\n\n## Upgrading from 0.x to 1.x\n\nVersion 1.0 of sql.js must be loaded asynchronously, whereas asm.js was able to be loaded synchronously.\n\nSo in the past, you would:\n```html\n<script src='js/sql.js'></script>\n<script>\n  const db = new SQL.Database();\n  //...\n</script>\n```\nor:\n```javascript\nconst SQL = require('sql.js');\nconst db = new SQL.Database();\n//...\n```\n\nVersion 1.x:\n```html\n<script src='dist/sql-wasm.js'></script>\n<script>\n  initSqlJs({ locateFile: filename => `/dist/${filename}` }).then(function(SQL){\n    const db = new SQL.Database();\n    //...\n  });\n</script>\n```\nor:\n```javascript\nconst initSqlJs = require('sql-wasm.js');\ninitSqlJs().then(function(SQL){\n  const db = new SQL.Database();\n  //...\n});\n```\n\n`NOTHING` is now a reserved word in SQLite, whereas previously it was not. This could cause errors like `Error: near \"nothing\": syntax error`\n\n### Downloading/Using: ###\nAlthough asm.js files were distributed as a single Javascript file, WebAssembly libraries are most efficiently distributed as a pair of files, the `.js`  loader and the `.wasm` file, like `sql-wasm.js` and `sql-wasm.wasm`. The `.js` file is responsible for loading the `.wasm` file. You can find these files on our [release page](https://github.com/sql-js/sql.js/releases)\n\n\n\n\n## Versions of sql.js included in the distributed artifacts\nYou can always find the latest published artifacts on https://github.com/sql-js/sql.js/releases/latest.\n\nFor each [release](https://github.com/sql-js/sql.js/releases/), you will find a file called `sqljs.zip` in the *release assets*. It will contain:\n - `sql-wasm.js` : The Web Assembly version of Sql.js. Minified and suitable for production. Use this. If you use this, you will need to include/ship `sql-wasm.wasm` as well.\n - `sql-wasm-debug.js` : The Web Assembly, Debug version of Sql.js. Larger, with assertions turned on. Useful for local development. You will need to include/ship `sql-wasm-debug.wasm` if you use this.\n - `sql-asm.js` : The older asm.js version of Sql.js. Slower and larger. Provided for compatibility reasons.\n - `sql-asm-memory-growth.js` : Asm.js doesn't allow for memory to grow by default, because it is slower and de-optimizes. If you are using sql-asm.js and you see this error (`Cannot enlarge memory arrays`), use this file.\n - `sql-asm-debug.js` : The _Debug_ asm.js version of Sql.js. Use this for local development.\n - `worker.*` - Web Worker versions of the above libraries. More limited API. See [examples/GUI/gui.js](examples/GUI/gui.js) for a good example of this.\n\n## Compiling/Contributing\n\nGeneral consumers of this library don't need to read any further. (The compiled files are available via the [release page](https://github.com/sql-js/sql.js/releases).)\n\nIf you want to compile your own version of SQLite for WebAssembly, or want to contribute to this project, see [CONTRIBUTING.md](CONTRIBUTING.md).\n",
        "releases": [
            {
                "name": "Release v1.12.0",
                "date": "2024-10-29T20:51:53Z"
            },
            {
                "name": "Release v1.11.0",
                "date": "2024-07-30T16:42:08Z"
            },
            {
                "name": "Release v1.10.3",
                "date": "2024-04-14T08:49:50Z"
            },
            {
                "name": "Release v1.10.2",
                "date": "2024-01-20T23:12:04Z"
            },
            {
                "name": "Release v1.10.1",
                "date": "2024-01-16T17:13:40Z"
            },
            {
                "name": "Release v1.10.0",
                "date": "2024-01-16T13:14:39Z"
            },
            {
                "name": "Release v1.9.0",
                "date": "2023-11-28T20:21:28Z"
            },
            {
                "name": "Release v1.8.0",
                "date": "2022-09-08T01:41:18Z"
            },
            {
                "name": "Release v1.7.0",
                "date": "2022-06-01T08:42:44Z"
            },
            {
                "name": "Release v1.6.2",
                "date": "2021-09-30T15:31:17Z"
            },
            {
                "name": "Release v1.6.1",
                "date": "2021-08-12T13:00:58Z"
            },
            {
                "name": "Release v1.6.0",
                "date": "2021-08-12T12:53:08Z"
            },
            {
                "name": "Release v1.5.0",
                "date": "2021-03-15T10:04:44Z"
            },
            {
                "name": "Release v1.4.0",
                "date": "2020-10-19T19:34:46Z"
            },
            {
                "name": "Release v1.3.2",
                "date": "2020-10-03T21:43:32Z"
            },
            {
                "name": "Release v1.3.1",
                "date": "2020-10-03T21:14:10Z"
            },
            {
                "name": "Release v1.3.0",
                "date": "2020-05-23T20:45:57Z"
            },
            {
                "name": "Release v1.2.2",
                "date": "2020-04-04T20:41:43Z"
            },
            {
                "name": "Release v1.2.1",
                "date": "2020-03-11T11:40:06Z"
            },
            {
                "name": "Release v1.1.0",
                "date": "2019-12-15T22:00:59Z"
            },
            {
                "name": "Release v1.0.1",
                "date": "2019-11-05T18:23:50Z"
            }
        ]
    }
}