{
    "https://api.github.com/repos/Lightning-AI/lightning": {
        "forks": 3418,
        "watchers": 28830,
        "stars": 28830,
        "languages": {
            "Python": 4728502,
            "Shell": 15410,
            "Dockerfile": 10876,
            "Makefile": 1858
        },
        "commits": [
            "2025-01-09T11:28:08Z",
            "2025-01-07T13:06:51Z",
            "2025-01-07T12:44:19Z",
            "2025-01-06T17:51:10Z",
            "2025-01-06T17:50:51Z",
            "2025-01-06T16:34:53Z",
            "2025-01-06T10:14:52Z",
            "2024-12-21T00:55:01Z",
            "2024-12-21T00:51:06Z",
            "2024-12-21T00:25:27Z",
            "2024-12-20T22:53:28Z",
            "2024-12-20T09:05:50Z",
            "2024-12-19T17:02:13Z",
            "2024-12-19T16:56:32Z",
            "2024-12-19T15:58:31Z",
            "2024-12-17T13:08:00Z",
            "2024-12-12T15:17:19Z",
            "2024-12-11T12:09:05Z",
            "2024-12-11T11:55:50Z",
            "2024-12-11T11:17:08Z",
            "2024-12-11T00:39:25Z",
            "2024-12-11T00:26:30Z",
            "2024-12-10T23:20:23Z",
            "2024-12-10T22:56:29Z",
            "2024-12-10T22:31:31Z",
            "2024-12-10T16:55:26Z",
            "2024-12-10T14:40:40Z",
            "2024-12-10T10:15:21Z",
            "2024-12-10T10:06:59Z",
            "2024-12-10T09:46:15Z"
        ],
        "creation_date": "2019-03-31T00:45:57Z",
        "contributors": 30,
        "topics": [
            "ai",
            "artificial-intelligence",
            "data-science",
            "deep-learning",
            "machine-learning",
            "python",
            "pytorch"
        ],
        "subscribers": 253,
        "readme": "<div align=\"center\">\n\n<img alt=\"Lightning\" src=\"https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/app-2/ptl_banner.png\" width=\"800px\" style=\"max-width: 100%;\">\n\n<br/>\n<br/>\n\n**The deep learning framework to pretrain, finetune and deploy AI models.**\n\n**NEW- Deploying models? Check out [LitServe](https://github.com/Lightning-AI/litserve), the PyTorch Lightning for model serving**\n\n______________________________________________________________________\n\n<p align=\"center\">\n    <a href=\"#quick-start\" style=\"margin: 0 10px;\">Quick start</a> \u2022\n  <a href=\"#examples\">Examples</a> \u2022\n  <a href=\"#why-pytorch-lightning\">PyTorch Lightning</a> \u2022\n  <a href=\"#lightning-fabric-expert-control\">Fabric</a> \u2022\n  <a href=\"https://lightning.ai/\">Lightning AI</a> \u2022   \n  <a href=\"#community\">Community</a> \u2022\n  <a href=\"https://pytorch-lightning.readthedocs.io/en/stable/\">Docs</a>\n</p>\n\n<!-- DO NOT ADD CONDA DOWNLOADS... README CHANGES MUST BE APPROVED BY EDEN OR WILL -->\n\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pytorch-lightning)](https://pypi.org/project/pytorch-lightning/)\n[![PyPI Status](https://badge.fury.io/py/pytorch-lightning.svg)](https://badge.fury.io/py/pytorch-lightning)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/pytorch-lightning)](https://pepy.tech/project/pytorch-lightning)\n[![Conda](https://img.shields.io/conda/v/conda-forge/lightning?label=conda&color=success)](https://anaconda.org/conda-forge/lightning)\n[![codecov](https://codecov.io/gh/Lightning-AI/pytorch-lightning/graph/badge.svg?token=SmzX8mnKlA)](https://codecov.io/gh/Lightning-AI/pytorch-lightning)\n\n[![Discord](https://img.shields.io/discord/1077906959069626439?style=plastic)](https://discord.gg/VptPCZkGNa)\n![GitHub commit activity](https://img.shields.io/github/commit-activity/w/lightning-ai/lightning)\n[![license](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/Lightning-AI/lightning/blob/master/LICENSE)\n\n<!--\n[![CodeFactor](https://www.codefactor.io/repository/github/Lightning-AI/lightning/badge)](https://www.codefactor.io/repository/github/Lightning-AI/lightning)\n-->\n\n</div>\n\n<div align=\"center\">\n  \n<p align=\"center\">\n\n&nbsp;\n  \n<a target=\"_blank\" href=\"https://lightning.ai/docs/pytorch/latest/starter/introduction.html#define-a-lightningmodule\">\n  <img src=\"https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/app-2/get-started-badge.svg\" height=\"36px\" alt=\"Get started\"/>\n</a>\n\n</p>\n\n</div>\n\n&nbsp;\n\n# Lightning has 2 core packages\n\n[PyTorch Lightning: Train and deploy PyTorch at scale](#why-pytorch-lightning).\n<br/>\n[Lightning Fabric: Expert control](#lightning-fabric-expert-control).\n\nLightning gives you granular control over how much abstraction you want to add over PyTorch.\n\n<div align=\"center\">\n    <img src=\"https://pl-public-data.s3.amazonaws.com/assets_lightning/continuum.png\" width=\"80%\">\n</div>\n\n&nbsp;\n\n# Quick start\nInstall Lightning:\n\n```bash\npip install lightning\n```\n\n<!-- following section will be skipped from PyPI description -->\n\n<details>\n  <summary>Advanced install options</summary>\n    <!-- following section will be skipped from PyPI description -->\n\n#### Install with optional dependencies\n\n```bash\npip install lightning['extra']\n```\n\n#### Conda\n\n```bash\nconda install lightning -c conda-forge\n```\n\n#### Install stable version\n\nInstall future release from the source\n\n```bash\npip install https://github.com/Lightning-AI/lightning/archive/refs/heads/release/stable.zip -U\n```\n\n#### Install bleeding-edge\n\nInstall nightly from the source (no guarantees)\n\n```bash\npip install https://github.com/Lightning-AI/lightning/archive/refs/heads/master.zip -U\n```\n\nor from testing PyPI\n\n```bash\npip install -iU https://test.pypi.org/simple/ pytorch-lightning\n```\n\n</details>\n<!-- end skipping PyPI description -->\n\n### PyTorch Lightning example\nDefine the training workflow. Here's a toy example ([explore real examples](https://lightning.ai/lightning-ai/studios?view=public&section=featured&query=pytorch+lightning)):\n\n```python\n# main.py\n# ! pip install torchvision\nimport torch, torch.nn as nn, torch.utils.data as data, torchvision as tv, torch.nn.functional as F\nimport lightning as L\n\n# --------------------------------\n# Step 1: Define a LightningModule\n# --------------------------------\n# A LightningModule (nn.Module subclass) defines a full *system*\n# (ie: an LLM, diffusion model, autoencoder, or simple image classifier).\n\n\nclass LitAutoEncoder(L.LightningModule):\n    def __init__(self):\n        super().__init__()\n        self.encoder = nn.Sequential(nn.Linear(28 * 28, 128), nn.ReLU(), nn.Linear(128, 3))\n        self.decoder = nn.Sequential(nn.Linear(3, 128), nn.ReLU(), nn.Linear(128, 28 * 28))\n\n    def forward(self, x):\n        # in lightning, forward defines the prediction/inference actions\n        embedding = self.encoder(x)\n        return embedding\n\n    def training_step(self, batch, batch_idx):\n        # training_step defines the train loop. It is independent of forward\n        x, _ = batch\n        x = x.view(x.size(0), -1)\n        z = self.encoder(x)\n        x_hat = self.decoder(z)\n        loss = F.mse_loss(x_hat, x)\n        self.log(\"train_loss\", loss)\n        return loss\n\n    def configure_optimizers(self):\n        optimizer = torch.optim.Adam(self.parameters(), lr=1e-3)\n        return optimizer\n\n\n# -------------------\n# Step 2: Define data\n# -------------------\ndataset = tv.datasets.MNIST(\".\", download=True, transform=tv.transforms.ToTensor())\ntrain, val = data.random_split(dataset, [55000, 5000])\n\n# -------------------\n# Step 3: Train\n# -------------------\nautoencoder = LitAutoEncoder()\ntrainer = L.Trainer()\ntrainer.fit(autoencoder, data.DataLoader(train), data.DataLoader(val))\n```\n\nRun the model on your terminal\n\n```bash\npip install torchvision\npython main.py\n```\n\n&nbsp;\n\n\n# Why PyTorch Lightning?\n\nPyTorch Lightning is just organized PyTorch - Lightning disentangles PyTorch code to decouple the science from the engineering.\n\n![PT to PL](docs/source-pytorch/_static/images/general/pl_quick_start_full_compressed.gif)\n\n&nbsp;\n\n----\n\n### Examples\nExplore various types of training possible with PyTorch Lightning. Pretrain and finetune ANY kind of model to perform ANY task like classification, segmentation, summarization and more:    \n\n| Task                                                                                                        | Description                                                    | Run |\n|-------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------|---|\n| [Hello world](#hello-simple-model)                                                                          | Pretrain - Hello world example                                 | <a target=\"_blank\" href=\"https://lightning.ai/lightning-ai/studios/pytorch-lightning-hello-world\"><img src=\"https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/app-2/studio-badge.svg\" alt=\"Open In Studio\"/></a> |\n| [Image classification](https://lightning.ai/lightning-ai/studios/image-classification-with-pytorch-lightning) | Finetune - ResNet-34 model to classify images of cars          | <a target=\"_blank\" href=\"https://lightning.ai/lightning-ai/studios/image-classification-with-pytorch-lightning\"><img src=\"https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/app-2/studio-badge.svg\" alt=\"Open In Studio\"/></a> |   \n| [Image segmentation](https://lightning.ai/lightning-ai/studios/image-segmentation-with-pytorch-lightning)   | Finetune - ResNet-50 model to segment images                   | <a target=\"_blank\" href=\"https://lightning.ai/lightning-ai/studios/image-segmentation-with-pytorch-lightning\"><img src=\"https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/app-2/studio-badge.svg\" alt=\"Open In Studio\"/></a> |   \n| [Object detection](https://lightning.ai/lightning-ai/studios/object-detection-with-pytorch-lightning)       | Finetune - Faster R-CNN model to detect objects                   | <a target=\"_blank\" href=\"https://lightning.ai/lightning-ai/studios/object-detection-with-pytorch-lightning\"><img src=\"https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/app-2/studio-badge.svg\" alt=\"Open In Studio\"/></a> |\n| [Text classification](https://lightning.ai/lightning-ai/studios/text-classification-with-pytorch-lightning) | Finetune - text classifier (BERT model)                        | <a target=\"_blank\" href=\"https://lightning.ai/lightning-ai/studios/text-classification-with-pytorch-lightning\"><img src=\"https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/app-2/studio-badge.svg\" alt=\"Open In Studio\"/></a> |   \n| [Text summarization](https://lightning.ai/lightning-ai/studios/text-summarization-with-pytorch-lightning)   | Finetune - text summarization (Hugging Face transformer model) | <a target=\"_blank\" href=\"https://lightning.ai/lightning-ai/studios/text-summarization-with-pytorch-lightning\"><img src=\"https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/app-2/studio-badge.svg\" alt=\"Open In Studio\"/></a> |   \n| [Audio generation](https://lightning.ai/lightning-ai/studios/finetune-a-personal-ai-music-generator)        | Finetune - audio generator (transformer model)                 | <a target=\"_blank\" href=\"https://lightning.ai/lightning-ai/studios/finetune-a-personal-ai-music-generator\"><img src=\"https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/app-2/studio-badge.svg\" alt=\"Open In Studio\"/></a> |   \n| [LLM finetuning](https://lightning.ai/lightning-ai/studios/finetune-an-llm-with-pytorch-lightning)          | Finetune - LLM (Meta Llama 3.1 8B)                | <a target=\"_blank\" href=\"https://lightning.ai/lightning-ai/studios/finetune-an-llm-with-pytorch-lightning\"><img src=\"https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/app-2/studio-badge.svg\" alt=\"Open In Studio\"/></a> | \n| [Image generation](https://lightning.ai/lightning-ai/studios/train-a-diffusion-model-with-pytorch-lightning)          | Pretrain - Image generator (diffusion model)                | <a target=\"_blank\" href=\"https://lightning.ai/lightning-ai/studios/train-a-diffusion-model-with-pytorch-lightning\"><img src=\"https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/app-2/studio-badge.svg\" alt=\"Open In Studio\"/></a> | \n| [Recommendation system](https://lightning.ai/lightning-ai/studios/recommendation-system-with-pytorch-lightning)  | Train - recommendation system (factorization and embedding)    | <a target=\"_blank\" href=\"https://lightning.ai/lightning-ai/studios/recommendation-system-with-pytorch-lightning\"><img src=\"https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/app-2/studio-badge.svg\" alt=\"Open In Studio\"/></a> | \n| [Time-series forecasting](https://lightning.ai/lightning-ai/studios/time-series-forecasting-with-pytorch-lightning) | Train - Time-series forecasting with LSTM               | <a target=\"_blank\" href=\"https://lightning.ai/lightning-ai/studios/time-series-forecasting-with-pytorch-lightning\"><img src=\"https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/app-2/studio-badge.svg\" alt=\"Open In Studio\"/></a> | \n\n______________________________________________________________________\n\n## Advanced features\n\nLightning has over [40+ advanced features](https://lightning.ai/docs/pytorch/stable/common/trainer.html#trainer-flags) designed for professional AI research at scale.\n\nHere are some examples:\n\n<div align=\"center\">\n    <img src=\"https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/features_2.jpg\" max-height=\"600px\">\n  </div>\n\n<details>\n  <summary>Train on 1000s of GPUs without code changes</summary>\n\n```python\n# 8 GPUs\n# no code changes needed\ntrainer = Trainer(accelerator=\"gpu\", devices=8)\n\n# 256 GPUs\ntrainer = Trainer(accelerator=\"gpu\", devices=8, num_nodes=32)\n```\n\n</details>\n\n<details>\n  <summary>Train on other accelerators like TPUs without code changes</summary>\n\n```python\n# no code changes needed\ntrainer = Trainer(accelerator=\"tpu\", devices=8)\n```\n\n</details>\n\n<details>\n  <summary>16-bit precision</summary>\n\n```python\n# no code changes needed\ntrainer = Trainer(precision=16)\n```\n\n</details>\n\n<details>\n  <summary>Experiment managers</summary>\n\n```python\nfrom lightning import loggers\n\n# tensorboard\ntrainer = Trainer(logger=TensorBoardLogger(\"logs/\"))\n\n# weights and biases\ntrainer = Trainer(logger=loggers.WandbLogger())\n\n# comet\ntrainer = Trainer(logger=loggers.CometLogger())\n\n# mlflow\ntrainer = Trainer(logger=loggers.MLFlowLogger())\n\n# neptune\ntrainer = Trainer(logger=loggers.NeptuneLogger())\n\n# ... and dozens more\n```\n\n</details>\n\n<details>\n\n<summary>Early Stopping</summary>\n\n```python\nes = EarlyStopping(monitor=\"val_loss\")\ntrainer = Trainer(callbacks=[es])\n```\n\n</details>\n\n<details>\n  <summary>Checkpointing</summary>\n\n```python\ncheckpointing = ModelCheckpoint(monitor=\"val_loss\")\ntrainer = Trainer(callbacks=[checkpointing])\n```\n\n</details>\n\n<details>\n  <summary>Export to torchscript (JIT) (production use)</summary>\n\n```python\n# torchscript\nautoencoder = LitAutoEncoder()\ntorch.jit.save(autoencoder.to_torchscript(), \"model.pt\")\n```\n\n</details>\n\n<details>\n  <summary>Export to ONNX (production use)</summary>\n\n```python\n# onnx\nwith tempfile.NamedTemporaryFile(suffix=\".onnx\", delete=False) as tmpfile:\n    autoencoder = LitAutoEncoder()\n    input_sample = torch.randn((1, 64))\n    autoencoder.to_onnx(tmpfile.name, input_sample, export_params=True)\n    os.path.isfile(tmpfile.name)\n```\n\n</details>\n\n______________________________________________________________________\n\n## Advantages over unstructured PyTorch\n\n- Models become hardware agnostic\n- Code is clear to read because engineering code is abstracted away\n- Easier to reproduce\n- Make fewer mistakes because lightning handles the tricky engineering\n- Keeps all the flexibility (LightningModules are still PyTorch modules), but removes a ton of boilerplate\n- Lightning has dozens of integrations with popular machine learning tools.\n- [Tested rigorously with every new PR](https://github.com/Lightning-AI/lightning/tree/master/tests). We test every combination of PyTorch and Python supported versions, every OS, multi GPUs and even TPUs.\n- Minimal running speed overhead (about 300 ms per epoch compared with pure PyTorch).\n\n______________________________________________________________________\n\n<div align=\"center\">\n    <a href=\"https://lightning.ai/docs/pytorch/stable/\">Read the PyTorch Lightning docs</a>\n</div>\n\n______________________________________________________________________\n\n&nbsp;\n&nbsp;\n\n# Lightning Fabric: Expert control\n\nRun on any device at any scale with expert-level control over PyTorch training loop and scaling strategy. You can even write your own Trainer.\n\nFabric is designed for the most complex models like foundation model scaling, LLMs, diffusion, transformers, reinforcement learning, active learning. Of any size.\n\n<table>\n<tr>\n<th>What to change</th>\n<th>Resulting Fabric Code (copy me!)</th>\n</tr>\n<tr>\n<td>\n<sub>\n\n```diff\n+ import lightning as L\n  import torch; import torchvision as tv\n\n dataset = tv.datasets.CIFAR10(\"data\", download=True,\n                               train=True,\n                               transform=tv.transforms.ToTensor())\n\n+ fabric = L.Fabric()\n+ fabric.launch()\n\n  model = tv.models.resnet18()\n  optimizer = torch.optim.SGD(model.parameters(), lr=0.001)\n- device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n- model.to(device)\n+ model, optimizer = fabric.setup(model, optimizer)\n\n  dataloader = torch.utils.data.DataLoader(dataset, batch_size=8)\n+ dataloader = fabric.setup_dataloaders(dataloader)\n\n  model.train()\n  num_epochs = 10\n  for epoch in range(num_epochs):\n      for batch in dataloader:\n          inputs, labels = batch\n-         inputs, labels = inputs.to(device), labels.to(device)\n          optimizer.zero_grad()\n          outputs = model(inputs)\n          loss = torch.nn.functional.cross_entropy(outputs, labels)\n-         loss.backward()\n+         fabric.backward(loss)\n          optimizer.step()\n          print(loss.data)\n```\n\n</sub>\n<td>\n<sub>\n\n```Python\nimport lightning as L\nimport torch; import torchvision as tv\n\ndataset = tv.datasets.CIFAR10(\"data\", download=True,\n                              train=True,\n                              transform=tv.transforms.ToTensor())\n\nfabric = L.Fabric()\nfabric.launch()\n\nmodel = tv.models.resnet18()\noptimizer = torch.optim.SGD(model.parameters(), lr=0.001)\nmodel, optimizer = fabric.setup(model, optimizer)\n\ndataloader = torch.utils.data.DataLoader(dataset, batch_size=8)\ndataloader = fabric.setup_dataloaders(dataloader)\n\nmodel.train()\nnum_epochs = 10\nfor epoch in range(num_epochs):\n    for batch in dataloader:\n        inputs, labels = batch\n        optimizer.zero_grad()\n        outputs = model(inputs)\n        loss = torch.nn.functional.cross_entropy(outputs, labels)\n        fabric.backward(loss)\n        optimizer.step()\n        print(loss.data)\n```\n\n</sub>\n</td>\n</tr>\n</table>\n\n## Key features\n\n<details>\n  <summary>Easily switch from running on CPU to GPU (Apple Silicon, CUDA, \u2026), TPU, multi-GPU or even multi-node training</summary>\n\n```python\n# Use your available hardware\n# no code changes needed\nfabric = Fabric()\n\n# Run on GPUs (CUDA or MPS)\nfabric = Fabric(accelerator=\"gpu\")\n\n# 8 GPUs\nfabric = Fabric(accelerator=\"gpu\", devices=8)\n\n# 256 GPUs, multi-node\nfabric = Fabric(accelerator=\"gpu\", devices=8, num_nodes=32)\n\n# Run on TPUs\nfabric = Fabric(accelerator=\"tpu\")\n```\n\n</details>\n\n<details>\n  <summary>Use state-of-the-art distributed training strategies (DDP, FSDP, DeepSpeed) and mixed precision out of the box</summary>\n\n```python\n# Use state-of-the-art distributed training techniques\nfabric = Fabric(strategy=\"ddp\")\nfabric = Fabric(strategy=\"deepspeed\")\nfabric = Fabric(strategy=\"fsdp\")\n\n# Switch the precision\nfabric = Fabric(precision=\"16-mixed\")\nfabric = Fabric(precision=\"64\")\n```\n\n</details>\n\n<details>\n  <summary>All the device logic boilerplate is handled for you</summary>\n\n```diff\n  # no more of this!\n- model.to(device)\n- batch.to(device)\n```\n\n</details>\n\n<details>\n  <summary>Build your own custom Trainer using Fabric primitives for training checkpointing, logging, and more</summary>\n\n```python\nimport lightning as L\n\n\nclass MyCustomTrainer:\n    def __init__(self, accelerator=\"auto\", strategy=\"auto\", devices=\"auto\", precision=\"32-true\"):\n        self.fabric = L.Fabric(accelerator=accelerator, strategy=strategy, devices=devices, precision=precision)\n\n    def fit(self, model, optimizer, dataloader, max_epochs):\n        self.fabric.launch()\n\n        model, optimizer = self.fabric.setup(model, optimizer)\n        dataloader = self.fabric.setup_dataloaders(dataloader)\n        model.train()\n\n        for epoch in range(max_epochs):\n            for batch in dataloader:\n                input, target = batch\n                optimizer.zero_grad()\n                output = model(input)\n                loss = loss_fn(output, target)\n                self.fabric.backward(loss)\n                optimizer.step()\n```\n\nYou can find a more extensive example in our [examples](examples/fabric/build_your_own_trainer)\n\n</details>\n\n______________________________________________________________________\n\n<div align=\"center\">\n    <a href=\"https://lightning.ai/docs/fabric/stable/\">Read the Lightning Fabric docs</a>\n</div>\n\n______________________________________________________________________\n\n&nbsp;\n&nbsp;\n\n## Examples\n\n###### Self-supervised Learning\n\n- [CPC transforms](https://lightning-bolts.readthedocs.io/en/stable/transforms/self_supervised.html#cpc-transforms)\n- [Moco v2 transforms](https://lightning-bolts.readthedocs.io/en/stable/transforms/self_supervised.html#moco-v2-transforms)\n- [SimCLR transforms](https://lightning-bolts.readthedocs.io/en/stable/transforms/self_supervised.html#simclr-transforms)\n\n###### Convolutional Architectures\n\n- [GPT-2](https://lightning-bolts.readthedocs.io/en/stable/models/convolutional.html#gpt-2)\n- [UNet](https://lightning-bolts.readthedocs.io/en/stable/models/convolutional.html#unet)\n\n###### Reinforcement Learning\n\n- [DQN Loss](https://lightning-bolts.readthedocs.io/en/stable/losses.html#dqn-loss)\n- [Double DQN Loss](https://lightning-bolts.readthedocs.io/en/stable/losses.html#double-dqn-loss)\n- [Per DQN Loss](https://lightning-bolts.readthedocs.io/en/stable/losses.html#per-dqn-loss)\n\n###### GANs\n\n- [Basic GAN](https://lightning-bolts.readthedocs.io/en/stable/models/gans.html#basic-gan)\n- [DCGAN](https://lightning-bolts.readthedocs.io/en/stable/models/gans.html#dcgan)\n\n###### Classic ML\n\n- [Logistic Regression](https://lightning-bolts.readthedocs.io/en/stable/models/classic_ml.html#logistic-regression)\n- [Linear Regression](https://lightning-bolts.readthedocs.io/en/stable/models/classic_ml.html#linear-regression)\n\n&nbsp;\n&nbsp;\n\n## Continuous Integration\n\nLightning is rigorously tested across multiple CPUs, GPUs and TPUs and against major Python and PyTorch versions.\n\n###### \\*Codecov is > 90%+ but build delays may show less\n\n<details>\n  <summary>Current build statuses</summary>\n\n<center>\n\n|       System / PyTorch ver.        | 1.13                                                                                                                                                                                                                            | 2.0                                                                                                                                                                                                                             |                                                                                                               2.1                                                                                                               |\n| :--------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|\n|        Linux py3.9 \\[GPUs\\]        |  |  | [![Build Status](https://dev.azure.com/Lightning-AI/lightning/_apis/build/status%2Fpytorch-lightning%20%28GPUs%29?branchName=master)](https://dev.azure.com/Lightning-AI/lightning/_build/latest?definitionId=24&branchName=master) |\n|  Linux (multiple Python versions)  | [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml)                                 | [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml)                                 |                 [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml)                 |\n|   OSX (multiple Python versions)   | [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml)                                 | [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml)                                 |                 [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml)                 |\n| Windows (multiple Python versions) | [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml)                                 | [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml)                                 |                 [![Test PyTorch](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml/badge.svg)](https://github.com/Lightning-AI/lightning/actions/workflows/ci-tests-pytorch.yml)                 |\n\n</center>\n</details>\n\n&nbsp;\n&nbsp;\n\n## Community\n\nThe lightning community is maintained by\n\n- [10+ core contributors](https://lightning.ai/docs/pytorch/latest/community/governance.html) who are all a mix of professional engineers, Research Scientists, and Ph.D. students from top AI labs.\n- 800+ community contributors.\n\nWant to help us build Lightning and reduce boilerplate for thousands of researchers? [Learn how to make your first contribution here](https://lightning.ai/docs/pytorch/stable/generated/CONTRIBUTING.html)\n\nLightning is also part of the [PyTorch ecosystem](https://pytorch.org/ecosystem/) which requires projects to have solid testing, documentation and support.\n\n### Asking for help\n\nIf you have any questions please:\n\n1. [Read the docs](https://lightning.ai/docs).\n1. [Search through existing Discussions](https://github.com/Lightning-AI/lightning/discussions), or [add a new question](https://github.com/Lightning-AI/lightning/discussions/new)\n1. [Join our discord](https://discord.com/invite/tfXFetEZxv).\n",
        "releases": [
            {
                "name": "Lightning v2.5 post0",
                "date": "2024-12-21T01:35:39Z"
            },
            {
                "name": "Lightning v2.5",
                "date": "2024-12-20T14:20:38Z"
            },
            {
                "name": "Lightning 2.5 RC",
                "date": "2024-12-12T15:22:15Z"
            },
            {
                "name": "Lightning v2.4",
                "date": "2024-08-07T09:44:30Z"
            },
            {
                "name": "Patch release v2.3.3",
                "date": "2024-07-08T20:42:09Z"
            },
            {
                "name": "Patch release v2.3.2",
                "date": "2024-07-04T09:06:51Z"
            },
            {
                "name": "Patch release v2.3.1",
                "date": "2024-06-27T17:47:24Z"
            },
            {
                "name": "Lightning v2.3: Tensor Parallelism and 2D Parallelism",
                "date": "2024-06-13T21:30:21Z"
            },
            {
                "name": "Patch release v2.2.5",
                "date": "2024-05-22T17:28:47Z"
            },
            {
                "name": "Patch release v2.2.4",
                "date": "2024-05-01T22:50:46Z"
            },
            {
                "name": "Patch release v2.2.3",
                "date": "2024-04-23T18:44:46Z"
            },
            {
                "name": "Patch release v2.2.2",
                "date": "2024-04-11T13:27:17Z"
            },
            {
                "name": "Patch release v2.2.1",
                "date": "2024-03-04T17:21:52Z"
            },
            {
                "name": "Minor release correction",
                "date": "2024-02-12T19:43:45Z"
            },
            {
                "name": "Lightning v2.2",
                "date": "2024-02-07T22:06:52Z"
            },
            {
                "name": "Lightning 2.2 Release Candidate",
                "date": "2024-02-01T15:41:23Z"
            },
            {
                "name": "Minor patch release v2.1.4",
                "date": "2024-02-01T15:10:35Z"
            },
            {
                "name": "Minor patch release v2.1.3",
                "date": "2023-12-21T15:14:18Z"
            },
            {
                "name": "Minor patch release v2.1.2",
                "date": "2023-11-15T20:56:33Z"
            },
            {
                "name": "Minor patch release v2.1.1",
                "date": "2023-11-06T18:19:51Z"
            },
            {
                "name": "Lightning 2.1: Train Bigger, Better, Faster",
                "date": "2023-10-12T13:10:13Z"
            },
            {
                "name": "Feature teaser",
                "date": "2023-10-10T08:15:49Z"
            },
            {
                "name": "Hotfix for Conda package",
                "date": "2023-09-28T18:47:58Z"
            },
            {
                "name": "Weekly patch release",
                "date": "2023-09-14T19:22:12Z"
            },
            {
                "name": "Weekly patch release",
                "date": "2023-08-30T12:29:17Z"
            },
            {
                "name": "Weekly patch release",
                "date": "2023-08-16T07:30:01Z"
            },
            {
                "name": "Minor patch release",
                "date": "2023-07-24T21:36:45Z"
            },
            {
                "name": "Minor patch release",
                "date": "2023-07-10T16:09:37Z"
            },
            {
                "name": "Minor patch release",
                "date": "2023-06-22T18:23:35Z"
            },
            {
                "name": "Minor patch release",
                "date": "2023-06-07T17:09:43Z"
            },
            {
                "name": "Minor patch release: App jobs",
                "date": "2023-04-24T13:56:07Z"
            },
            {
                "name": "Minor patch release",
                "date": "2023-04-12T15:31:30Z"
            },
            {
                "name": "2.0.1 appendix",
                "date": "2023-04-11T18:43:08Z"
            },
            {
                "name": "2.0.1 patch release",
                "date": "2023-03-30T14:45:19Z"
            },
            {
                "name": "Lightning 2.0: Fast, Flexible, Stable",
                "date": "2023-03-15T12:58:03Z"
            },
            {
                "name": "Weekly patch release",
                "date": "2023-03-01T13:54:24Z"
            },
            {
                "name": "Lightning 2.0 Release Candidate",
                "date": "2023-02-23T18:56:54Z"
            },
            {
                "name": "Weekly patch release",
                "date": "2023-02-21T20:39:58Z"
            },
            {
                "name": "Weekly patch release",
                "date": "2023-02-15T15:23:45Z"
            },
            {
                "name": "Weekly patch release",
                "date": "2023-02-10T16:57:09Z"
            },
            {
                "name": "Stability and additional improvements",
                "date": "2023-01-17T17:26:39Z"
            },
            {
                "name": "Weekly patch release",
                "date": "2022-12-21T18:35:50Z"
            },
            {
                "name": "Minor patch release",
                "date": "2022-12-16T14:12:38Z"
            },
            {
                "name": "Weekly patch release",
                "date": "2022-12-15T17:19:20Z"
            },
            {
                "name": "Minor patch release",
                "date": "2022-12-09T23:43:05Z"
            },
            {
                "name": "Dependency hotfix",
                "date": "2022-12-09T05:02:16Z"
            },
            {
                "name": "Weekly patch release",
                "date": "2022-12-08T18:52:18Z"
            },
            {
                "name": "Hotfix for Python Server",
                "date": "2022-11-25T19:20:31Z"
            },
            {
                "name": "Hotfix for requirements",
                "date": "2022-11-23T15:03:48Z"
            },
            {
                "name": "Weekly patch release",
                "date": "2022-11-23T10:11:23Z"
            },
            {
                "name": "Weekly patch release",
                "date": "2022-11-18T00:44:27Z"
            },
            {
                "name": "Weekly patch release",
                "date": "2022-11-10T20:25:52Z"
            },
            {
                "name": "Minor pkg stability fix",
                "date": "2022-11-02T16:31:47Z"
            },
            {
                "name": " Lightning 1.8: Colossal-AI Strategy, Commands and Secrets for Apps, FSDP Improvements and More!",
                "date": "2022-11-01T11:13:54Z"
            },
            {
                "name": "Apps's secrets & meta tags",
                "date": "2022-10-20T15:07:31Z"
            },
            {
                "name": "App with meta tags",
                "date": "2022-10-07T20:45:08Z"
            },
            {
                "name": "PyTorch Lightning 1.7.7: Standard patch release",
                "date": "2022-09-22T13:43:43Z"
            },
            {
                "name": "Minor patch release",
                "date": "2022-09-22T15:55:30Z"
            },
            {
                "name": "Memory fixes inbound!",
                "date": "2022-09-19T16:26:59Z"
            },
            {
                "name": "PyTorch Lightning 1.7.6: Standard patch release",
                "date": "2022-09-13T19:19:08Z"
            },
            {
                "name": "BYOC cluster management",
                "date": "2022-09-08T12:44:57Z"
            },
            {
                "name": "PyTorch Lightning 1.7.5: Standard patch release",
                "date": "2022-09-07T04:08:56Z"
            },
            {
                "name": "PyTorch Lightning 1.7.4: Standard patch release",
                "date": "2022-08-31T17:21:18Z"
            },
            {
                "name": "PyTorch Lightning 1.7.3: Standard patch release",
                "date": "2022-08-25T19:06:42Z"
            },
            {
                "name": "Dependency hotfix",
                "date": "2022-08-22T15:57:31Z"
            },
            {
                "name": "Minor patch release",
                "date": "2022-08-18T13:20:42Z"
            },
            {
                "name": "PyTorch Lightning 1.7.2: Standard patch release",
                "date": "2022-08-17T20:25:36Z"
            },
            {
                "name": "PyTorch Lightning 1.7.1: Standard patch release",
                "date": "2022-08-09T19:41:28Z"
            },
            {
                "name": "Week bugfix release",
                "date": "2022-08-09T13:36:36Z"
            },
            {
                "name": "PyTorch Lightning 1.7: Apple Silicon support, Native FSDP, Collaborative training, and multi-GPU support with Jupyter notebooks",
                "date": "2022-08-02T16:21:13Z"
            },
            {
                "name": "Build-in templates",
                "date": "2022-08-01T14:39:20Z"
            },
            {
                "name": "Minor bug-fix release",
                "date": "2022-07-26T17:11:35Z"
            },
            {
                "name": "Lightning App 0.5.2",
                "date": "2022-07-18T16:36:46Z"
            },
            {
                "name": "PyTorch Lightning 1.6.5: Standard patch release",
                "date": "2022-07-13T00:26:19Z"
            },
            {
                "name": "PyTorch Lightning 1.6.4: Standard patch release",
                "date": "2022-06-01T14:32:40Z"
            },
            {
                "name": "PyTorch Lightning 1.6.3: Standard patch release",
                "date": "2022-05-03T20:36:12Z"
            },
            {
                "name": "PyTorch Lightning 1.6.2: Standard patch release",
                "date": "2022-04-27T17:04:00Z"
            },
            {
                "name": "PyTorch Lightning 1.6.1: Standard weekly patch release",
                "date": "2022-04-13T18:30:15Z"
            },
            {
                "name": "PyTorch Lightning 1.6: Support Intel's Habana Accelerator, New efficient DDP strategy (Bagua), Manual Fault-tolerance, Stability and Reliability.",
                "date": "2022-03-29T19:35:14Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2022-02-09T20:42:30Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2022-01-20T19:48:38Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2022-01-05T15:23:44Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-12-21T18:33:35Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-12-15T23:06:40Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-12-07T15:35:24Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-11-30T14:41:02Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-11-24T15:40:19Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-11-16T19:20:16Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-11-09T19:57:50Z"
            },
            {
                "name": "PyTorch Lightning 1.5: LightningLite, Fault-Tolerant Training, Loop Customization, Lightning Tutorials, LightningCLI v2, RichProgressBar, CheckpointIO Plugin, and Trainer Strategy\u00a0Flag",
                "date": "2021-11-02T18:58:26Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-09-30T13:43:18Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-09-22T19:15:55Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-09-15T09:28:47Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-09-10T16:24:21Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-09-01T13:27:54Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-08-24T15:10:09Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-08-23T15:55:02Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-08-11T13:51:58Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-08-03T14:14:52Z"
            },
            {
                "name": "TPU Pod Training, IPU Accelerator, DeepSpeed Infinity, Fully Sharded Data Parallel",
                "date": "2021-07-27T15:30:52Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-07-01T13:55:51Z"
            },
            {
                "name": "Hotfix Patch Release",
                "date": "2021-06-23T13:03:11Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-06-22T14:08:05Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-06-17T16:15:58Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-06-09T08:53:23Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-06-03T14:57:42Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-05-26T14:59:52Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-05-19T20:23:29Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-05-11T09:29:16Z"
            },
            {
                "name": "Lightning CLI, PyTorch Profiler, Improved Early Stopping",
                "date": "2021-05-06T21:23:35Z"
            },
            {
                "name": "Quick patch release",
                "date": "2021-04-23T09:09:15Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-04-22T20:56:53Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-04-14T19:56:47Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-04-07T17:58:45Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-03-30T14:46:01Z"
            },
            {
                "name": "Weekly patch release - torchmetrics compatibility",
                "date": "2021-03-24T15:17:58Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-03-16T20:29:29Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-03-09T17:28:37Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-03-05T15:12:24Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-02-24T17:13:36Z"
            },
            {
                "name": "Pruning & Quantization & SWA",
                "date": "2021-02-18T23:04:31Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-02-08T08:49:21Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-02-03T18:10:55Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-01-26T20:49:07Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-01-21T16:21:12Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-01-12T20:34:37Z"
            },
            {
                "name": "Standard weekly patch release",
                "date": "2021-01-06T10:17:12Z"
            },
            {
                "name": "standard weekly patch release",
                "date": "2020-12-23T09:38:49Z"
            },
            {
                "name": "standard weekly patch release",
                "date": "2020-12-15T23:32:53Z"
            },
            {
                "name": "Model Parallelism Training and More Logging Options",
                "date": "2020-12-10T01:05:42Z"
            },
            {
                "name": "standard weekly patch release",
                "date": "2020-11-24T16:55:10Z"
            },
            {
                "name": "standard weekly patch release",
                "date": "2020-11-17T21:57:18Z"
            },
            {
                "name": "standard weekly patch release",
                "date": "2020-11-11T13:16:13Z"
            },
            {
                "name": "standard weekly patch release",
                "date": "2020-11-04T02:00:43Z"
            },
            {
                "name": "standard weekly patch release",
                "date": "2020-10-27T22:15:49Z"
            },
            {
                "name": "standard weekly patch release",
                "date": "2020-10-20T23:12:20Z"
            },
            {
                "name": "fixes a major logging bug for val in 1.0",
                "date": "2020-10-15T14:59:50Z"
            },
            {
                "name": "minor jit fixes",
                "date": "2020-10-14T00:47:14Z"
            },
            {
                "name": "1.0.0 - General availability",
                "date": "2020-10-13T12:12:32Z"
            },
            {
                "name": "Buffer release before 1.0",
                "date": "2020-10-07T21:16:32Z"
            },
            {
                "name": "synced BatchNorm, DataModules and final API",
                "date": "2020-08-20T19:25:25Z"
            },
            {
                "name": "Bug fixes and .test() fix + TPU tests",
                "date": "2020-07-10T02:01:01Z"
            },
            {
                "name": "More bug fixing!",
                "date": "2020-07-01T11:56:44Z"
            },
            {
                "name": "Bug fixing",
                "date": "2020-06-29T11:38:41Z"
            },
            {
                "name": "DDP and Checkpoint bug fixes",
                "date": "2020-06-29T02:09:23Z"
            },
            {
                "name": "Fixing hooks & hparams",
                "date": "2020-06-19T06:44:19Z"
            },
            {
                "name": "Metrics, speed improvements, new hooks and flags",
                "date": "2020-06-19T07:02:38Z"
            },
            {
                "name": "Transfer learning, tuning batch size, torchelastic support",
                "date": "2020-05-15T12:37:13Z"
            },
            {
                "name": "Critical DDP bug fixes",
                "date": "2020-04-27T13:06:06Z"
            },
            {
                "name": "PyTorch 1.5 support, native PyTorch AMP, speed/memory optimizations and many bug fixes",
                "date": "2020-04-26T15:08:57Z"
            },
            {
                "name": "DDP bug fixes",
                "date": "2020-04-10T12:44:09Z"
            },
            {
                "name": "Many bug fixes, added flexibility, parity tests with pytorch and more",
                "date": "2020-04-08T18:46:29Z"
            },
            {
                "name": "Minor deprecation fix",
                "date": "2020-03-13T14:14:26Z"
            },
            {
                "name": "TPU support & profiling",
                "date": "2020-03-10T23:13:44Z"
            },
            {
                "name": "Simplifications & new docs",
                "date": "2020-01-21T22:51:10Z"
            },
            {
                "name": "Generalization!",
                "date": "2019-11-06T20:04:32Z"
            },
            {
                "name": "Simpler interface, new features",
                "date": "2019-10-05T21:10:04Z"
            },
            {
                "name": "API clean up",
                "date": "2019-09-26T14:47:58Z"
            },
            {
                "name": "Various ddt improvements",
                "date": "2019-09-16T14:54:49Z"
            },
            {
                "name": "New features",
                "date": "2019-08-12T20:11:24Z"
            },
            {
                "name": "Stable fully-featured release",
                "date": "2019-08-08T16:39:45Z"
            },
            {
                "name": "Simple data loader",
                "date": "2019-07-25T17:28:42Z"
            },
            {
                "name": "Tests!",
                "date": "2019-07-25T02:09:41Z"
            }
        ]
    }
}