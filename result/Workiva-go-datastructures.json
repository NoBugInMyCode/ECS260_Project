{
    "https://api.github.com/repos/Workiva/go-datastructures": {
        "forks": 841,
        "watchers": 7726,
        "stars": 7726,
        "languages": {
            "Go": 784073,
            "Python": 3331,
            "Dockerfile": 434
        },
        "commits": [
            "2024-05-16T15:28:26Z",
            "2024-05-16T14:58:11Z",
            "2024-05-16T14:47:25Z",
            "2024-04-25T17:42:20Z",
            "2024-04-24T13:55:31Z",
            "2024-03-22T18:39:19Z",
            "2024-03-22T18:30:42Z",
            "2024-03-22T18:19:27Z",
            "2024-03-22T17:59:14Z",
            "2024-03-22T16:00:22Z",
            "2024-03-22T15:32:51Z",
            "2024-03-21T18:25:50Z",
            "2024-03-21T18:22:37Z",
            "2024-03-21T18:20:30Z",
            "2024-03-21T18:15:49Z",
            "2024-03-21T18:12:28Z",
            "2024-03-21T17:44:03Z",
            "2024-03-21T13:42:38Z",
            "2024-03-21T13:41:21Z",
            "2024-03-21T13:20:32Z",
            "2024-03-21T13:19:17Z",
            "2024-03-20T16:26:37Z",
            "2024-03-20T16:09:51Z",
            "2024-03-20T16:07:08Z",
            "2024-03-20T15:00:07Z",
            "2023-09-13T13:06:12Z",
            "2023-09-13T13:01:52Z",
            "2023-09-13T13:00:49Z",
            "2023-09-13T12:55:55Z",
            "2023-09-13T12:53:48Z"
        ],
        "creation_date": "2014-10-29T13:55:17Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 324,
        "readme": "go-datastructures\n=================\n\nGo-datastructures is a collection of useful, performant, and threadsafe Go\ndatastructures.\n\n### NOTE: only tested with Go 1.3+.\n\n#### Augmented Tree\n\nInterval tree for collision in n-dimensional ranges.  Implemented via a\nred-black augmented tree.  Extra dimensions are handled in simultaneous\ninserts/queries to save space although this may result in suboptimal time\ncomplexity.  Intersection determined using bit arrays.  In a single dimension,\ninserts, deletes, and queries should be in O(log n) time.\n\n#### Bitarray\n\nBitarray used to detect existence without having to resort to hashing with\nhashmaps.  Requires entities have a uint64 unique identifier.  Two\nimplementations exist, regular and sparse.  Sparse saves a great deal of space\nbut insertions are O(log n).  There are some useful functions on the BitArray\ninterface to detect intersection between two bitarrays. This package also\nincludes bitmaps of length 32 and 64 that provide increased speed and O(1) for\nall operations by storing the bitmaps in unsigned integers rather than arrays.\n\n#### Futures\n\nA helpful tool to send a \"broadcast\" message to listeners.  Channels have the\nissue that once one listener takes a message from a channel the other listeners\naren't notified.  There were many cases when I wanted to notify many listeners\nof a single event and this package helps.\n\n#### Queue\n\nPackage contains both a normal and priority queue.  Both implementations never\nblock on send and grow as much as necessary.  Both also only return errors if\nyou attempt to push to a disposed queue and will not panic like sending a\nmessage on a closed channel.  The priority queue also allows you to place items\nin priority order inside the queue.  If you give a useful hint to the regular\nqueue, it is actually faster than a channel.  The priority queue is somewhat\nslow currently and targeted for an update to a Fibonacci heap.\n\nAlso included in the queue package is a MPMC threadsafe ring buffer. This is a\nblock full/empty queue, but will return a blocked thread if the queue is\ndisposed while a thread is blocked.  This can be used to synchronize goroutines\nand ensure goroutines quit so objects can be GC'd.  Threadsafety is achieved\nusing only CAS operations making this queue quite fast.  Benchmarks can be found\nin that package.\n\n#### Fibonacci Heap\n\nA standard Fibonacci heap providing the usual operations. Can be useful in executing Dijkstra or Prim's algorithms in the theoretically minimal time. Also useful as a general-purpose priority queue. The special thing about Fibonacci heaps versus other heap variants is the cheap decrease-key operation. This heap has a constant complexity for find minimum, insert and merge of two heaps, an amortized constant complexity for decrease key and O(log(n)) complexity for a deletion or dequeue minimum. In practice the constant factors are large, so Fibonacci heaps could be slower than Pairing heaps, depending on usage. Benchmarks - in the project subfolder. The heap has not been designed for thread-safety.\n\n#### Range Tree\n\nUseful to determine if n-dimensional points fall within an n-dimensional range.\nNot a typical range tree however, as we are actually using an n-dimensional\nsorted list of points as this proved to be simpler and faster than attempting a\ntraditional range tree while saving space on any dimension greater than one.\nInserts are typical BBST times at O(log n^d) where d is the number of\ndimensions.\n\n#### Set\nOur Set implementation is very simple, accepts items of type `interface{}` and\nincludes only a few methods. If your application requires a richer Set\nimplementation over lists of type `sort.Interface`, see\n[xtgo/set](https://github.com/xtgo/set) and\n[goware/set](https://github.com/goware/set).\n\n#### Threadsafe\nA package that is meant to contain some commonly used items but in a threadsafe\nway.  Example: there's a threadsafe error in there as I commonly found myself\nwanting to set an error in many threads at the same time (yes, I know, but\nchannels are slow).\n\n#### AVL Tree\n\nThis is an example of a branch copy immutable AVL BBST.  Any operation on a node\nmakes a copy of that node's branch.  Because of this, this tree is inherently\nthreadsafe although the writes will likely still need to be serialized.  This\nstructure is good if your use case is a large number of reads and infrequent\nwrites as reads will be highly available but writes somewhat slow due to the\ncopying.  This structure serves as a basis for a large number of functional data\nstructures.\n\n#### X-Fast Trie\n\nAn interesting design that treats integers as words and uses a trie structure to\nreduce time complexities by matching prefixes.  This structure is really fast\nfor finding values or making predecessor/successor types of queries, but also\nresults in greater than linear space consumption.  The exact time complexities\ncan be found in that package.\n\n#### Y-Fast Trie\n\nAn extension of the X-Fast trie in which an X-Fast trie is combined with some\nother ordered data structure to reduce space consumption and improve CRUD types\nof operations.  These secondary structures are often BSTs, but our implementation\nuses a simple ordered list as I believe this improves cache locality.  We also\nuse fixed size buckets to aid in parallelization of operations.  Exact time\ncomplexities are in that package.\n\n#### Fast integer hashmap\n\nA datastructure used for checking existence but without knowing the bounds of\nyour data.  If you have a limited small bounds, the bitarray package might be a\nbetter choice.  This implementation uses a fairly simple hashing algorithm\ncombined with linear probing and a flat datastructure to provide optimal\nperformance up to a few million integers (faster than the native Golang\nimplementation).  Beyond that, the native implementation is faster (I believe\nthey are using a large -ary B-tree).  In the future, this will be implemented\nwith a B-tree for scale.\n\n#### Skiplist\n\nAn ordered structure that provides amortized logarithmic operations but without\nthe complication of rotations that are required by BSTs.  In testing, however,\nthe performance of the skip list is often far worse than the guaranteed log n\ntime of a BBST.  Tall nodes tend to \"cast shadows\", especially when large\nbitsizes are required as the optimum maximum height for a node is often based on\nthis.  More detailed performance characteristics are provided in that package.\n\n#### Sort\n\nThe sort package implements a multithreaded bucket sort that can be up to 3x\nfaster than the native Golang sort package.  These buckets are then merged using\na symmetrical merge, similar to the stable sort in the Golang package.  However,\nour algorithm is modified so that two sorted lists can be merged by using\nsymmetrical decomposition.\n\n#### Numerics\n\nEarly work on some nonlinear optimization problems.  The initial implementation\nallows a simple use case with either linear or nonlinear constraints.  You can\nfind min/max or target an optimal value.  The package currently employs a\nprobabilistic global restart system in an attempt to avoid local critical points.\nMore details can be found in that package.\n\n#### B+ Tree\n\nInitial implementation of a B+ tree.  Delete method still needs added as well as\nsome performance optimization.  Specific performance characteristics can be\nfound in that package.  Despite the theoretical superiority of BSTs, the B-tree\noften has better all around performance due to cache locality.  The current\nimplementation is mutable, but the immutable AVL tree can be used to build an\nimmutable version.  Unfortunately, to make the B-tree generic we require an\ninterface and the most expensive operation in CPU profiling is the interface\nmethod which in turn calls into runtime.assertI2T.  We need generics.\n\n#### Immutable B Tree\nA btree based on two principles, immutability and concurrency. \nSomewhat slow for single value lookups and puts, it is very fast for bulk operations.\nA persister can be injected to make this index persistent.\n\n#### Ctrie\n\nA concurrent, lock-free hash array mapped trie with efficient non-blocking\nsnapshots. For lookups, Ctries have comparable performance to concurrent skip\nlists and concurrent hashmaps. One key advantage of Ctries is they are\ndynamically allocated. Memory consumption is always proportional to the number\nof keys in the Ctrie, while hashmaps typically have to grow and shrink. Lookups,\ninserts, and removes are O(logn).\n\nOne interesting advantage Ctries have over traditional concurrent data\nstructures is support for lock-free, linearizable, constant-time snapshots.\nMost concurrent data structures do not support snapshots, instead opting for\nlocks or requiring a quiescent state. This allows Ctries to have O(1) iterator\ncreation and clear operations and O(logn) size retrieval.\n\n#### Dtrie\n\nA persistent hash trie that dynamically expands or shrinks to provide efficient\nmemory allocation. Being persistent, the Dtrie is immutable and any modification\nyields a new version of the Dtrie rather than changing the original. Bitmapped\nnodes allow for O(log32(n)) get, remove, and update operations. Insertions are\nO(n) and iteration is O(1).\n\n#### Persistent List\n\nA persistent, immutable linked list. All write operations yield a new, updated\nstructure which preserve and reuse previous versions. This uses a very\nfunctional, cons-style of list manipulation. Insert, get, remove, and size\noperations are O(n) as you would expect.\n\n#### Simple Graph\n\nA mutable, non-persistent undirected graph where parallel edges and self-loops are \nnot permitted. Operations to add an edge as well as retrieve the total number of \nvertices/edges are O(1) while the operation to retrieve the vertices adjacent to a\ntarget is O(n). For more details see [wikipedia](https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)#Simple_graph)\n\n### Installation\n\n 1. Install Go 1.3 or higher.\n 2. Run `go get github.com/Workiva/go-datastructures/...`\n\n### Updating\n\nWhen new code is merged to master, you can use\n\n\tgo get -u github.com/Workiva/go-datastructures/...\n\nTo retrieve the latest version of go-datastructures.\n\n### Testing\n\nTo run all the unit tests use these commands:\n\n\tcd $GOPATH/src/github.com/Workiva/go-datastructures\n\tgo get -t -u ./...\n\tgo test ./...\n\nOnce you've done this once, you can simply use this command to run all unit tests:\n\n\tgo test ./...\n\n\n### Contributing\n\nRequirements to commit here:\n\n - Branch off master, PR back to master.\n - `gofmt`'d code.\n - Compliance with [these guidelines](https://code.google.com/p/go-wiki/wiki/CodeReviewComments)\n - Unit test coverage\n - [Good commit messages](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)\n\n\n### Maintainers\n - Alexander Campbell <[alexander.campbell@workiva.com](mailto:alexander.campbell@workiva.com)>\n - Dustin Hiatt <[dustin.hiatt@workiva.com](mailto:dustin.hiatt@workiva.com)>\n - Ryan Jackson <[ryan.jackson@workiva.com](mailto:ryan.jackson@workiva.com)>\n",
        "releases": [
            {
                "name": "v1.1.5",
                "date": "2024-05-16T15:28:49Z"
            },
            {
                "name": "v1.1.4",
                "date": "2024-04-25T17:42:29Z"
            },
            {
                "name": "v1.1.3",
                "date": "2024-03-22T18:39:40Z"
            },
            {
                "name": "v1.1.2",
                "date": "2024-03-22T17:59:35Z"
            },
            {
                "name": "v1.1.1",
                "date": "2023-09-13T13:06:22Z"
            },
            {
                "name": "v1.1.0",
                "date": "2023-05-18T14:26:57Z"
            },
            {
                "name": "v1.0.53",
                "date": "2021-03-29T15:14:25Z"
            },
            {
                "name": "v1.0.52",
                "date": "2020-03-09T14:29:24Z"
            },
            {
                "name": "v1.0.51",
                "date": "2020-03-02T19:31:55Z"
            },
            {
                "name": "v1.0.50",
                "date": "2018-08-29T20:59:55Z"
            },
            {
                "name": "v1.0.49",
                "date": "2018-08-29T20:16:16Z"
            },
            {
                "name": "v1.0.48",
                "date": "2018-06-12T15:50:24Z"
            },
            {
                "name": "v1.0.47",
                "date": "2018-05-25T13:32:56Z"
            },
            {
                "name": "v1.0.46",
                "date": "2018-04-12T13:39:43Z"
            },
            {
                "name": "v1.0.45",
                "date": "2018-04-12T13:26:51Z"
            },
            {
                "name": "v1.0.44",
                "date": "2018-02-13T18:36:25Z"
            },
            {
                "name": "v1.0.43",
                "date": "2017-12-01T19:11:58Z"
            },
            {
                "name": "v1.0.42",
                "date": "2017-11-07T15:14:17Z"
            },
            {
                "name": "v1.0.41",
                "date": "2017-10-26T14:05:03Z"
            },
            {
                "name": "v1.0.40",
                "date": "2017-09-08T14:47:43Z"
            },
            {
                "name": "v1.0.39",
                "date": "2017-08-10T20:46:19Z"
            },
            {
                "name": "v1.0.38",
                "date": "2017-07-19T14:56:46Z"
            },
            {
                "name": "v1.0.37",
                "date": "2017-07-10T21:12:40Z"
            },
            {
                "name": "v1.0.36",
                "date": "2017-05-03T15:55:41Z"
            },
            {
                "name": "v1.0.35",
                "date": "2017-05-03T15:55:07Z"
            },
            {
                "name": "v1.0.34",
                "date": "2017-03-31T17:22:37Z"
            },
            {
                "name": "v1.0.33",
                "date": "2017-03-02T20:14:27Z"
            },
            {
                "name": "v1.0.32",
                "date": "2017-01-19T19:47:59Z"
            },
            {
                "name": "v1.0.31",
                "date": "2016-12-06T15:12:56Z"
            },
            {
                "name": "v1.0.30",
                "date": "2016-10-27T19:53:24Z"
            },
            {
                "name": "v1.0.29",
                "date": "2016-10-27T16:11:09Z"
            },
            {
                "name": "v1.0.28",
                "date": "2016-08-25T20:40:12Z"
            },
            {
                "name": "v1.0.27",
                "date": "2016-08-18T16:20:58Z"
            },
            {
                "name": "v1.0.26",
                "date": "2016-08-02T15:45:48Z"
            },
            {
                "name": "v1.0.25",
                "date": "2016-07-06T14:34:19Z"
            },
            {
                "name": "v1.0.24",
                "date": "2016-06-27T13:31:51Z"
            },
            {
                "name": "v1.0.23",
                "date": "2016-06-13T21:16:59Z"
            },
            {
                "name": "v1.0.22",
                "date": "2016-06-06T14:32:49Z"
            },
            {
                "name": "v1.0.21",
                "date": "2016-05-13T15:18:29Z"
            },
            {
                "name": "v1.0.20",
                "date": "2016-05-05T20:44:36Z"
            },
            {
                "name": "v1.0.19",
                "date": "2016-05-05T20:43:44Z"
            },
            {
                "name": "v1.0.18",
                "date": "2016-05-05T20:43:09Z"
            },
            {
                "name": "v1.0.17",
                "date": "2016-04-04T20:00:57Z"
            },
            {
                "name": "v1.0.16",
                "date": "2016-03-29T17:37:23Z"
            },
            {
                "name": "v1.0.15",
                "date": "2016-03-28T16:32:25Z"
            },
            {
                "name": "v1.0.14",
                "date": "2016-01-05T16:30:17Z"
            },
            {
                "name": "v1.0.13",
                "date": "2016-01-05T15:39:05Z"
            },
            {
                "name": "v1.0.12",
                "date": "2016-01-04T15:39:00Z"
            },
            {
                "name": "v1.0.11",
                "date": "2016-01-04T13:59:33Z"
            },
            {
                "name": "v1.0.10",
                "date": "2015-12-21T15:17:49Z"
            },
            {
                "name": "v1.0.9",
                "date": "2015-12-16T16:04:46Z"
            },
            {
                "name": "v1.0.8",
                "date": "2015-12-16T14:19:58Z"
            },
            {
                "name": "v1.0.7",
                "date": "2015-12-10T22:55:48Z"
            },
            {
                "name": "v1.0.6",
                "date": "2015-10-26T17:46:43Z"
            },
            {
                "name": "v1.0.5",
                "date": "2015-10-12T22:23:13Z"
            },
            {
                "name": "v1.0.4",
                "date": "2015-10-12T22:22:46Z"
            },
            {
                "name": "v1.0.3",
                "date": "2015-10-12T22:21:52Z"
            },
            {
                "name": "v1.0.2",
                "date": "2015-10-06T16:01:25Z"
            },
            {
                "name": "v1.0.1",
                "date": "2015-09-24T17:36:32Z"
            },
            {
                "name": "v1.0.0",
                "date": "2015-09-24T17:35:49Z"
            }
        ]
    }
}