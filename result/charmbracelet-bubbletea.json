{
    "https://api.github.com/repos/charmbracelet/bubbletea": {
        "forks": 843,
        "watchers": 29159,
        "stars": 29159,
        "languages": {
            "Go": 178556
        },
        "commits": [
            "2025-01-17T07:53:34Z",
            "2025-01-14T17:38:13Z",
            "2025-01-13T13:46:09Z",
            "2025-01-06T17:18:34Z",
            "2024-12-17T14:12:28Z",
            "2024-12-17T14:03:33Z",
            "2024-12-17T13:52:24Z",
            "2024-12-16T16:27:00Z",
            "2024-12-12T02:55:41Z",
            "2024-12-10T17:30:22Z",
            "2024-12-10T17:23:22Z",
            "2024-12-07T14:29:16Z",
            "2024-12-05T21:42:44Z",
            "2024-12-05T15:34:42Z",
            "2024-12-04T20:51:28Z",
            "2024-12-04T17:55:28Z",
            "2024-12-04T17:54:20Z",
            "2024-12-02T12:14:20Z",
            "2024-11-22T20:02:45Z",
            "2024-11-22T19:38:11Z",
            "2024-11-22T19:21:05Z",
            "2024-11-19T15:32:53Z",
            "2024-11-13T15:09:09Z",
            "2024-11-12T18:54:54Z",
            "2024-11-08T17:24:12Z",
            "2024-11-08T17:23:32Z",
            "2024-11-08T17:22:18Z",
            "2024-11-08T16:36:57Z",
            "2024-11-08T16:27:36Z",
            "2024-11-08T16:23:23Z"
        ],
        "creation_date": "2020-01-10T21:04:03Z",
        "contributors": 30,
        "topics": [
            "cli",
            "elm-architecture",
            "framework",
            "functional",
            "go",
            "golang",
            "hacktoberfest",
            "tui"
        ],
        "subscribers": 111,
        "readme": "# Bubble Tea\n\n<p>\n    <a href=\"https://stuff.charm.sh/bubbletea/bubbletea-4k.png\"><img src=\"https://github.com/charmbracelet/bubbletea/assets/25087/108d4fdb-d554-4910-abed-2a5f5586a60e\" width=\"313\" alt=\"Bubble Tea Title Treatment\"></a><br>\n    <a href=\"https://github.com/charmbracelet/bubbletea/releases\"><img src=\"https://img.shields.io/github/release/charmbracelet/bubbletea.svg\" alt=\"Latest Release\"></a>\n    <a href=\"https://pkg.go.dev/github.com/charmbracelet/bubbletea?tab=doc\"><img src=\"https://godoc.org/github.com/charmbracelet/bubbletea?status.svg\" alt=\"GoDoc\"></a>\n    <a href=\"https://github.com/charmbracelet/bubbletea/actions\"><img src=\"https://github.com/charmbracelet/bubbletea/actions/workflows/build.yml/badge.svg\" alt=\"Build Status\"></a>\n    <a href=\"https://www.phorm.ai/query?projectId=a0e324b6-b706-4546-b951-6671ea60c13f\"><img src=\"https://stuff.charm.sh/misc/phorm-badge.svg\" alt=\"phorm.ai\"></a>\n</p>\n\nThe fun, functional and stateful way to build terminal apps. A Go framework\nbased on [The Elm Architecture][elm]. Bubble Tea is well-suited for simple and\ncomplex terminal applications, either inline, full-window, or a mix of both.\n\n<p>\n    <img src=\"https://stuff.charm.sh/bubbletea/bubbletea-example.gif\" width=\"100%\" alt=\"Bubble Tea Example\">\n</p>\n\nBubble Tea is in use in production and includes a number of features and\nperformance optimizations we\u2019ve added along the way. Among those is\na framerate-based renderer, mouse support, focus reporting and more.\n\nTo get started, see the tutorial below, the [examples][examples], the\n[docs][docs], the [video tutorials][youtube] and some common [resources](#libraries-we-use-with-bubble-tea).\n\n[youtube]: https://charm.sh/yt\n\n## By the way\n\nBe sure to check out [Bubbles][bubbles], a library of common UI components for Bubble Tea.\n\n<p>\n    <a href=\"https://github.com/charmbracelet/bubbles\"><img src=\"https://stuff.charm.sh/bubbles/bubbles-badge.png\" width=\"174\" alt=\"Bubbles Badge\"></a>&nbsp;&nbsp;\n    <a href=\"https://github.com/charmbracelet/bubbles\"><img src=\"https://stuff.charm.sh/bubbles-examples/textinput.gif\" width=\"400\" alt=\"Text Input Example from Bubbles\"></a>\n</p>\n\n---\n\n## Tutorial\n\nBubble Tea is based on the functional design paradigms of [The Elm\nArchitecture][elm], which happens to work nicely with Go. It's a delightful way\nto build applications.\n\nThis tutorial assumes you have a working knowledge of Go.\n\nBy the way, the non-annotated source code for this program is available\n[on GitHub][tut-source].\n\n[elm]: https://guide.elm-lang.org/architecture/\n[tut-source]: https://github.com/charmbracelet/bubbletea/tree/main/tutorials/basics\n\n### Enough! Let's get to it.\n\nFor this tutorial, we're making a shopping list.\n\nTo start we'll define our package and import some libraries. Our only external\nimport will be the Bubble Tea library, which we'll call `tea` for short.\n\n```go\npackage main\n\n// These imports will be used later on the tutorial. If you save the file\n// now, Go might complain they are unused, but that's fine.\n// You may also need to run `go mod tidy` to download bubbletea and its\n// dependencies.\nimport (\n    \"fmt\"\n    \"os\"\n\n    tea \"github.com/charmbracelet/bubbletea\"\n)\n```\n\nBubble Tea programs are comprised of a **model** that describes the application\nstate and three simple methods on that model:\n\n- **Init**, a function that returns an initial command for the application to run.\n- **Update**, a function that handles incoming events and updates the model accordingly.\n- **View**, a function that renders the UI based on the data in the model.\n\n### The Model\n\nSo let's start by defining our model which will store our application's state.\nIt can be any type, but a `struct` usually makes the most sense.\n\n```go\ntype model struct {\n    choices  []string           // items on the to-do list\n    cursor   int                // which to-do list item our cursor is pointing at\n    selected map[int]struct{}   // which to-do items are selected\n}\n```\n\n### Initialization\n\nNext, we\u2019ll define our application\u2019s initial state. In this case, we\u2019re defining\na function to return our initial model, however, we could just as easily define\nthe initial model as a variable elsewhere, too.\n\n```go\nfunc initialModel() model {\n\treturn model{\n\t\t// Our to-do list is a grocery list\n\t\tchoices:  []string{\"Buy carrots\", \"Buy celery\", \"Buy kohlrabi\"},\n\n\t\t// A map which indicates which choices are selected. We're using\n\t\t// the  map like a mathematical set. The keys refer to the indexes\n\t\t// of the `choices` slice, above.\n\t\tselected: make(map[int]struct{}),\n\t}\n}\n```\n\nNext, we define the `Init` method. `Init` can return a `Cmd` that could perform\nsome initial I/O. For now, we don't need to do any I/O, so for the command,\nwe'll just return `nil`, which translates to \"no command.\"\n\n```go\nfunc (m model) Init() tea.Cmd {\n    // Just return `nil`, which means \"no I/O right now, please.\"\n    return nil\n}\n```\n\n### The Update Method\n\nNext up is the update method. The update function is called when \u201dthings\nhappen.\u201d Its job is to look at what has happened and return an updated model in\nresponse. It can also return a `Cmd` to make more things happen, but for now\ndon't worry about that part.\n\nIn our case, when a user presses the down arrow, `Update`\u2019s job is to notice\nthat the down arrow was pressed and move the cursor accordingly (or not).\n\nThe \u201csomething happened\u201d comes in the form of a `Msg`, which can be any type.\nMessages are the result of some I/O that took place, such as a keypress, timer\ntick, or a response from a server.\n\nWe usually figure out which type of `Msg` we received with a type switch, but\nyou could also use a type assertion.\n\nFor now, we'll just deal with `tea.KeyMsg` messages, which are automatically\nsent to the update function when keys are pressed.\n\n```go\nfunc (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {\n    switch msg := msg.(type) {\n\n    // Is it a key press?\n    case tea.KeyMsg:\n\n        // Cool, what was the actual key pressed?\n        switch msg.String() {\n\n        // These keys should exit the program.\n        case \"ctrl+c\", \"q\":\n            return m, tea.Quit\n\n        // The \"up\" and \"k\" keys move the cursor up\n        case \"up\", \"k\":\n            if m.cursor > 0 {\n                m.cursor--\n            }\n\n        // The \"down\" and \"j\" keys move the cursor down\n        case \"down\", \"j\":\n            if m.cursor < len(m.choices)-1 {\n                m.cursor++\n            }\n\n        // The \"enter\" key and the spacebar (a literal space) toggle\n        // the selected state for the item that the cursor is pointing at.\n        case \"enter\", \" \":\n            _, ok := m.selected[m.cursor]\n            if ok {\n                delete(m.selected, m.cursor)\n            } else {\n                m.selected[m.cursor] = struct{}{}\n            }\n        }\n    }\n\n    // Return the updated model to the Bubble Tea runtime for processing.\n    // Note that we're not returning a command.\n    return m, nil\n}\n```\n\nYou may have noticed that <kbd>ctrl+c</kbd> and <kbd>q</kbd> above return\na `tea.Quit` command with the model. That\u2019s a special command which instructs\nthe Bubble Tea runtime to quit, exiting the program.\n\n### The View Method\n\nAt last, it\u2019s time to render our UI. Of all the methods, the view is the\nsimplest. We look at the model in its current state and use it to return\na `string`. That string is our UI!\n\nBecause the view describes the entire UI of your application, you don\u2019t have to\nworry about redrawing logic and stuff like that. Bubble Tea takes care of it\nfor you.\n\n```go\nfunc (m model) View() string {\n    // The header\n    s := \"What should we buy at the market?\\n\\n\"\n\n    // Iterate over our choices\n    for i, choice := range m.choices {\n\n        // Is the cursor pointing at this choice?\n        cursor := \" \" // no cursor\n        if m.cursor == i {\n            cursor = \">\" // cursor!\n        }\n\n        // Is this choice selected?\n        checked := \" \" // not selected\n        if _, ok := m.selected[i]; ok {\n            checked = \"x\" // selected!\n        }\n\n        // Render the row\n        s += fmt.Sprintf(\"%s [%s] %s\\n\", cursor, checked, choice)\n    }\n\n    // The footer\n    s += \"\\nPress q to quit.\\n\"\n\n    // Send the UI for rendering\n    return s\n}\n```\n\n### All Together Now\n\nThe last step is to simply run our program. We pass our initial model to\n`tea.NewProgram` and let it rip:\n\n```go\nfunc main() {\n    p := tea.NewProgram(initialModel())\n    if _, err := p.Run(); err != nil {\n        fmt.Printf(\"Alas, there's been an error: %v\", err)\n        os.Exit(1)\n    }\n}\n```\n\n## What\u2019s Next?\n\nThis tutorial covers the basics of building an interactive terminal UI, but\nin the real world you'll also need to perform I/O. To learn about that have a\nlook at the [Command Tutorial][cmd]. It's pretty simple.\n\nThere are also several [Bubble Tea examples][examples] available and, of course,\nthere are [Go Docs][docs].\n\n[cmd]: https://github.com/charmbracelet/bubbletea/tree/main/tutorials/commands/\n[examples]: https://github.com/charmbracelet/bubbletea/tree/main/examples\n[docs]: https://pkg.go.dev/github.com/charmbracelet/bubbletea?tab=doc\n\n## Debugging\n\n### Debugging with Delve\n\nSince Bubble Tea apps assume control of stdin and stdout, you\u2019ll need to run\ndelve in headless mode and then connect to it:\n\n```bash\n# Start the debugger\n$ dlv debug --headless --api-version=2 --listen=127.0.0.1:43000 .\nAPI server listening at: 127.0.0.1:43000\n\n# Connect to it from another terminal\n$ dlv connect 127.0.0.1:43000\n```\n\nIf you do not explicitly supply the `--listen` flag, the port used will vary\nper run, so passing this in makes the debugger easier to use from a script\nor your IDE of choice.\n\nAdditionally, we pass in `--api-version=2` because delve defaults to version 1\nfor backwards compatibility reasons. However, delve recommends using version 2\nfor all new development and some clients may no longer work with version 1.\nFor more information, see the [Delve documentation](https://github.com/go-delve/delve/tree/master/Documentation/api).\n\n### Logging Stuff\n\nYou can\u2019t really log to stdout with Bubble Tea because your TUI is busy\noccupying that! You can, however, log to a file by including something like\nthe following prior to starting your Bubble Tea program:\n\n```go\nif len(os.Getenv(\"DEBUG\")) > 0 {\n\tf, err := tea.LogToFile(\"debug.log\", \"debug\")\n\tif err != nil {\n\t\tfmt.Println(\"fatal:\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer f.Close()\n}\n```\n\nTo see what\u2019s being logged in real time, run `tail -f debug.log` while you run\nyour program in another window.\n\n## Libraries we use with Bubble Tea\n\n- [Bubbles][bubbles]: Common Bubble Tea components such as text inputs, viewports, spinners and so on\n- [Lip Gloss][lipgloss]: Style, format and layout tools for terminal applications\n- [Harmonica][harmonica]: A spring animation library for smooth, natural motion\n- [BubbleZone][bubblezone]: Easy mouse event tracking for Bubble Tea components\n- [ntcharts][ntcharts]: A terminal charting library built for Bubble Tea and [Lip Gloss][lipgloss]\n\n[bubbles]: https://github.com/charmbracelet/bubbles\n[lipgloss]: https://github.com/charmbracelet/lipgloss\n[harmonica]: https://github.com/charmbracelet/harmonica\n[bubblezone]: https://github.com/lrstanley/bubblezone\n[ntcharts]: https://github.com/NimbleMarkets/ntcharts\n\n## Bubble Tea in the Wild\n\nThere are over [10,000 applications](https://github.com/charmbracelet/bubbletea/network/dependents) built with Bubble Tea! Here are a handful of \u2019em.\n\n### Staff favourites\n\n- [chezmoi](https://github.com/twpayne/chezmoi): securely manage your dotfiles across multiple machines\n- [circumflex](https://github.com/bensadeh/circumflex): read Hacker News in the terminal\n- [gh-dash](https://www.github.com/dlvhdr/gh-dash): a GitHub CLI extension for PRs and issues\n- [Tetrigo](https://github.com/Broderick-Westrope/tetrigo): Tetris in the terminal\n- [Signls](https://github.com/emprcl/signls): a generative midi sequencer designed for composition and live performance\n- [Superfile](https://github.com/yorukot/superfile): a super file manager\n\n### In Industry\n\n- Microsoft Azure \u2013\u00a0[Aztify](https://github.com/Azure/aztfy): bring Microsoft Azure resources under Terraform\n- Daytona \u2013\u00a0[Daytona](https://github.com/daytonaio/daytona): open source dev environment manager\n- Cockroach Labs \u2013 [CockroachDB](https://github.com/cockroachdb/cockroach): a cloud-native, high-availability distributed SQL database\n- Truffle Security Co. \u2013\u00a0[Trufflehog](https://github.com/trufflesecurity/trufflehog): find leaked credentials\n- NVIDIA \u2013\u00a0[container-canary](https://github.com/NVIDIA/container-canary): a container validator\n- AWS \u2013\u00a0[eks-node-viewer](https://github.com/awslabs/eks-node-viewer): a tool for visualizing dynamic node usage within an EKS cluster\n- MinIO \u2013\u00a0[mc](https://github.com/minio/mc): the official [MinIO](https://min.io) client\n- Ubuntu \u2013\u00a0[Authd](https://github.com/ubuntu/authd): an authentication daemon for cloud-based identity providers\n\n### Charm stuff\n\n- [Glow](https://github.com/charmbracelet/glow): a markdown reader, browser, and online markdown stash\n- [Huh?](https://github.com/charmbracelet/huh): an interactive prompt and form toolkit\n- [Mods](https://github.com/charmbracelet/mods): AI on the CLI, built for pipelines\n- [Wishlist](https://github.com/charmbracelet/wishlist): an SSH directory (and bastion!)\n\n### There\u2019s so much more where that came from\n\nFor more applications built with Bubble Tea see [Charm & Friends][community].\nIs there something cool you made with Bubble Tea you want to share? [PRs][community] are\nwelcome!\n\n## Contributing\n\nSee [contributing][contribute].\n\n[contribute]: https://github.com/charmbracelet/bubbletea/contribute\n\n## Feedback\n\nWe\u2019d love to hear your thoughts on this project. Feel free to drop us a note!\n\n- [Twitter](https://twitter.com/charmcli)\n- [The Fediverse](https://mastodon.social/@charmcli)\n- [Discord](https://charm.sh/chat)\n\n## Acknowledgments\n\nBubble Tea is based on the paradigms of [The Elm Architecture][elm] by Evan\nCzaplicki et alia and the excellent [go-tea][gotea] by TJ Holowaychuk. It\u2019s\ninspired by the many great [_Zeichenorientierte Benutzerschnittstellen_][zb]\nof days past.\n\n[elm]: https://guide.elm-lang.org/architecture/\n[gotea]: https://github.com/tj/go-tea\n[zb]: https://de.wikipedia.org/wiki/Zeichenorientierte_Benutzerschnittstelle\n[community]: https://github.com/charm-and-friends/charm-in-the-wild\n\n## License\n\n[MIT](https://github.com/charmbracelet/bubbletea/raw/main/LICENSE)\n\n---\n\nPart of [Charm](https://charm.sh).\n\n<a href=\"https://charm.sh/\"><img alt=\"The Charm logo\" src=\"https://stuff.charm.sh/charm-badge.jpg\" width=\"400\"></a>\n\nCharm\u70ed\u7231\u5f00\u6e90 \u2022 Charm loves open source \u2022 \u0646\u062d\u0646\u064f \u0646\u062d\u0628 \u0627\u0644\u0645\u0635\u0627\u062f\u0631 \u0627\u0644\u0645\u0641\u062a\u0648\u062d\u0629\n",
        "releases": [
            {
                "name": "v1.2.4",
                "date": "2024-11-25T14:53:46Z"
            },
            {
                "name": "v1.2.3",
                "date": "2024-11-19T21:49:58Z"
            },
            {
                "name": "v2.0.0-alpha.2",
                "date": "2024-11-12T22:03:08Z"
            },
            {
                "name": "v1.2.2",
                "date": "2024-11-18T21:30:00Z"
            },
            {
                "name": "v1.2.0",
                "date": "2024-11-06T16:25:12Z"
            },
            {
                "name": "v1.1.2",
                "date": "2024-10-24T18:37:00Z"
            },
            {
                "name": "v2.0.0-alpha.1",
                "date": "2024-09-18T18:39:06Z"
            },
            {
                "name": "v1.1.1",
                "date": "2024-09-11T17:06:11Z"
            },
            {
                "name": "v1.1.0",
                "date": "2024-08-30T13:23:27Z"
            },
            {
                "name": "v1.0.1",
                "date": "2024-08-29T17:48:38Z"
            },
            {
                "name": "v1.0.0",
                "date": "2024-08-28T15:06:35Z"
            },
            {
                "name": "v0.27.1",
                "date": "2024-08-22T17:19:50Z"
            },
            {
                "name": "v0.27.0",
                "date": "2024-08-16T16:21:34Z"
            },
            {
                "name": "v0.26.6",
                "date": "2024-06-24T18:12:20Z"
            },
            {
                "name": "v0.26.5",
                "date": "2024-06-21T01:02:32Z"
            },
            {
                "name": "v0.26.4",
                "date": "2024-05-30T18:31:52Z"
            },
            {
                "name": "v0.26.3",
                "date": "2024-05-23T19:20:14Z"
            },
            {
                "name": "v0.26.2",
                "date": "2024-05-08T20:23:22Z"
            },
            {
                "name": "v0.26.1",
                "date": "2024-05-02T19:16:26Z"
            },
            {
                "name": "v0.26.0",
                "date": "2024-05-02T14:53:40Z"
            },
            {
                "name": "v0.25.0",
                "date": "2023-12-12T20:42:18Z"
            },
            {
                "name": "v0.24.2",
                "date": "2023-06-06T09:02:50Z"
            },
            {
                "name": "v0.24.1",
                "date": "2023-05-24T16:45:11Z"
            },
            {
                "name": "v0.24.0",
                "date": "2023-05-08T17:44:02Z"
            },
            {
                "name": "v0.23.2",
                "date": "2023-02-08T15:23:58Z"
            },
            {
                "name": "v0.23.1",
                "date": "2022-11-15T15:14:44Z"
            },
            {
                "name": "v0.23.0",
                "date": "2022-11-09T17:24:12Z"
            },
            {
                "name": "v0.22.1",
                "date": "2022-08-19T20:15:34Z"
            },
            {
                "name": "v0.22.0",
                "date": "2022-06-27T20:05:24Z"
            },
            {
                "name": "v0.21.0",
                "date": "2022-06-02T00:34:03Z"
            },
            {
                "name": "v0.20.0",
                "date": "2022-02-15T15:41:23Z"
            },
            {
                "name": "v0.19.3",
                "date": "2022-01-07T18:46:21Z"
            },
            {
                "name": "v0.19.2",
                "date": "2021-12-17T17:18:22Z"
            },
            {
                "name": "v0.19.1",
                "date": "2021-11-05T15:31:21Z"
            },
            {
                "name": "v0.19.0",
                "date": "2021-10-30T17:50:15Z"
            },
            {
                "name": "v0.18.0",
                "date": "2021-10-28T14:20:14Z"
            },
            {
                "name": "v0.17.0",
                "date": "2021-10-03T02:03:08Z"
            },
            {
                "name": "v0.16.0",
                "date": "2021-09-28T18:58:04Z"
            },
            {
                "name": "v0.15.0",
                "date": "2021-09-08T19:11:24Z"
            },
            {
                "name": "v0.14.1",
                "date": "2021-06-22T17:14:05Z"
            },
            {
                "name": "v0.14.0",
                "date": "2021-06-02T19:20:57Z"
            },
            {
                "name": "v0.13.4",
                "date": "2021-05-15T00:16:12Z"
            },
            {
                "name": "v0.13.3",
                "date": "2021-05-10T16:53:51Z"
            },
            {
                "name": "v0.13.2",
                "date": "2021-04-08T14:26:19Z"
            },
            {
                "name": "v0.13.1",
                "date": "2021-03-13T03:36:22Z"
            },
            {
                "name": "v0.13.0",
                "date": "2021-03-11T22:11:03Z"
            },
            {
                "name": "v0.12.5",
                "date": "2021-03-01T18:26:24Z"
            },
            {
                "name": "v0.12.4",
                "date": "2021-01-18T17:25:51Z"
            },
            {
                "name": "v0.12.3",
                "date": "2021-01-15T18:03:04Z"
            },
            {
                "name": "v0.12.2",
                "date": "2020-11-02T15:07:14Z"
            },
            {
                "name": "v0.12.1",
                "date": "2020-10-22T19:30:02Z"
            }
        ]
    }
}