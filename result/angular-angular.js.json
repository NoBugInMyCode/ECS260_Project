{
    "https://api.github.com/repos/angular/angular.js": {
        "forks": 27451,
        "watchers": 58770,
        "stars": 58770,
        "languages": {
            "JavaScript": 6812691,
            "HTML": 84393,
            "Shell": 31578,
            "BitBake": 7222,
            "CSS": 3638
        },
        "commits": [
            "2024-04-12T17:43:13Z",
            "2022-04-12T15:48:22Z",
            "2022-04-11T20:26:36Z",
            "2022-04-07T16:13:37Z",
            "2022-03-18T19:04:55Z",
            "2021-12-03T22:16:32Z",
            "2021-12-08T14:36:25Z",
            "2021-12-08T14:34:47Z",
            "2021-08-20T20:45:43Z",
            "2021-06-12T12:28:52Z",
            "2021-06-12T04:28:50Z",
            "2021-06-08T21:11:11Z",
            "2021-06-08T21:09:15Z",
            "2021-06-05T20:32:16Z",
            "2021-06-05T16:42:47Z",
            "2021-06-01T09:37:58Z",
            "2021-04-20T11:09:23Z",
            "2021-03-30T15:25:30Z",
            "2021-03-09T02:56:49Z",
            "2021-03-09T02:31:37Z",
            "2021-02-06T09:53:46Z",
            "2021-02-06T09:53:44Z",
            "2021-02-06T09:53:51Z",
            "2021-02-06T17:46:27Z",
            "2021-02-06T11:42:28Z",
            "2021-02-05T21:02:15Z",
            "2021-02-05T20:58:02Z",
            "2021-02-05T20:15:28Z",
            "2021-02-05T19:19:02Z",
            "2021-02-05T19:13:22Z"
        ],
        "creation_date": "2010-01-06T00:34:37Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 3771,
        "readme": "AngularJS [![CircleCI](https://circleci.com/gh/angular/angular.js/tree/master.svg?style=shield)](https://circleci.com/gh/angular/workflows/angular.js/tree/master)\n=========\n\nAngularJS lets you write client-side web applications as if you had a smarter browser.  It lets you\nuse good old HTML (or HAML, Jade/Pug and friends!) as your template language and lets you extend HTML\u2019s\nsyntax to express your application\u2019s components clearly and succinctly.  It automatically\nsynchronizes data from your UI (view) with your JavaScript objects (model) through 2-way data\nbinding. To help you structure your application better and make it easy to test, AngularJS teaches\nthe browser how to do dependency injection and inversion of control.\n\nIt also helps with server-side communication, taming async callbacks with promises and deferred objects,\nand it makes client-side navigation and deep linking with hashbang urls or HTML5 pushState a\npiece of cake. Best of all? It makes development fun!\n\n--------------------\n\n**AngularJS support has officially ended as of January 2022.\n[See what ending support means](https://docs.angularjs.org/misc/version-support-status)\nand [read the end of life announcement](https://goo.gle/angularjs-end-of-life).**\n\n**Visit [angular.io](https://angular.io) for the actively supported Angular.**\n\n--------------------\n\n* Web site: https://angularjs.org\n* Tutorial: https://docs.angularjs.org/tutorial\n* API Docs: https://docs.angularjs.org/api\n* Developer Guide: https://docs.angularjs.org/guide\n* Contribution guidelines: [CONTRIBUTING.md](CONTRIBUTING.md)\n* Core Development: [DEVELOPERS.md](DEVELOPERS.md)\n* Dashboard: https://dashboard.angularjs.org\n\n\nDocumentation\n--------------------\nGo to https://docs.angularjs.org\n\nContribute\n--------------------\n\nWe've set up a separate document for our\n[contribution guidelines](https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md).\n\nDevelop\n--------------------\n\nWe've set up a separate document for\n[developers](https://github.com/angular/angular.js/blob/master/DEVELOPERS.md).\n\n\n[![Analytics](https://ga-beacon.appspot.com/UA-8594346-11/angular.js/README.md?pixel)](https://github.com/igrigorik/ga-beacon)\n\nWhat to use AngularJS for and when to use it\n---------\nAngularJS is the next generation framework where each component is designed to work with every other\ncomponent in an interconnected way like a well-oiled machine. AngularJS is JavaScript MVC made easy\nand done right. (Well it is not really MVC, read on, to understand what this means.)\n\n#### MVC, no, MV* done the right way!\n[MVC](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller), short for\nModel-View-Controller, is a design pattern, i.e. how the code should be organized and how the\ndifferent parts of an application separated for proper readability and debugging. Model is the data\nand the database. View is the user interface and what the user sees. Controller is the main link\nbetween Model and View. These are the three pillars of major programming frameworks present on the\nmarket today. On the other hand AngularJS works on MV*, short for Model-View-_Whatever_. The\n_Whatever_ is AngularJS's way of telling that you may create any kind of linking between the Model\nand the View here.\n\nUnlike other frameworks in any programming language, where MVC, the three separate components, each\none has to be written and then connected by the programmer, AngularJS helps the programmer by asking\nhim/her to just create these and everything else will be taken care of by AngularJS.\n\n#### Interconnection with HTML at the root level\nAngularJS uses HTML to define the user's interface. AngularJS also enables the programmer to write\nnew HTML tags (AngularJS Directives) and increase the readability and understandability of the HTML\ncode. Directives are AngularJS\u2019s way of bringing additional functionality to HTML. Directives\nachieve this by enabling us to invent our own HTML elements. This also helps in making the code DRY\n(Don't Repeat Yourself), which means once created, a new directive can be used anywhere within the\napplication.\n\nHTML is also used to determine the wiring of the app. Special attributes in the HTML determine where\nto load the app, which components or controllers to use for each element, etc. We specify \"what\"\ngets loaded, but not \"how\". This declarative approach greatly simplifies app development in a sort\nof WYSIWYG way. Rather than spending time on how the program flows and orchestrating the various\nmoving parts, we simply define what we want and AngularJS will take care of the dependencies.\n\n#### Data Handling made simple\nData and Data Models in AngularJS are plain JavaScript objects and one can add and change properties\ndirectly on it and loop over objects and arrays at will.\n\n#### Two-way Data Binding\nOne of AngularJS's strongest features. Two-way Data Binding means that if something changes in the\nModel, the change gets reflected in the View instantaneously, and the same happens the other way\naround. This is also referred to as Reactive Programming, i.e. suppose `a = b + c` is being\nprogrammed and after this, if the value of `b` and/or `c` is changed then the value of `a` will be\nautomatically updated to reflect the change. AngularJS uses its \"scopes\" as a glue between the Model\nand View and makes these updates in one available for the other.\n\n#### Less Written Code and Easily Maintainable Code\nEverything in AngularJS is created to enable the programmer to end up writing less code that is\neasily maintainable and readable by any other new person on the team. Believe it or not, one can\nwrite a complete working two-way data binded application in less than 10 lines of code. Try and see\nfor yourself!\n\n#### Testing Ready\nAngularJS has Dependency Injection, i.e. it takes care of providing all the necessary dependencies\nto its controllers and services whenever required. This helps in making the AngularJS code ready for\nunit testing by making use of mock dependencies created and injected. This makes AngularJS more\nmodular and easily testable thus in turn helping a team create more robust applications.\n",
        "releases": []
    }
}