{
    "https://api.github.com/repos/marceloprates/prettymaps": {
        "forks": 540,
        "watchers": 11464,
        "stars": 11464,
        "languages": {
            "Jupyter Notebook": 34602447,
            "Python": 41499,
            "Shell": 144
        },
        "commits": [
            "2025-01-12T16:40:30Z",
            "2025-01-12T16:39:29Z",
            "2025-01-12T16:28:57Z",
            "2024-12-26T14:27:34Z",
            "2024-07-06T13:16:02Z",
            "2024-07-02T22:54:35Z",
            "2024-07-02T22:50:54Z",
            "2024-07-02T21:32:07Z",
            "2024-07-02T20:59:10Z",
            "2023-02-15T20:15:59Z",
            "2023-02-15T20:14:51Z",
            "2023-02-15T20:08:10Z",
            "2023-02-15T19:53:26Z",
            "2023-02-15T19:48:08Z",
            "2023-02-13T20:26:45Z",
            "2023-02-13T20:26:29Z",
            "2023-02-13T20:21:33Z",
            "2023-02-13T19:41:29Z",
            "2023-02-13T19:33:48Z",
            "2023-02-13T18:57:13Z",
            "2023-02-13T17:39:10Z",
            "2023-02-13T16:43:30Z",
            "2023-02-13T16:32:35Z",
            "2023-02-13T16:22:39Z",
            "2023-02-10T14:03:52Z",
            "2023-02-10T13:48:11Z",
            "2022-11-16T13:41:53Z",
            "2022-11-08T19:54:11Z",
            "2022-11-08T18:09:27Z",
            "2022-11-08T16:59:28Z"
        ],
        "creation_date": "2021-03-05T12:22:05Z",
        "contributors": 16,
        "topics": [
            "cartography",
            "generative-art",
            "jupyter-notebook",
            "maps",
            "matplotlib",
            "openstreetmap",
            "python"
        ],
        "subscribers": 80,
        "readme": "```python\n# Install prettymaps using pip:\n#!pip install prettymaps\n```\n\n# prettymaps\n\nA minimal Python library to draw customized maps from [OpenStreetMap](https://www.openstreetmap.org/#map=12/11.0733/106.3078) created using the [osmnx](https://github.com/gboeing/osmnx), [matplotlib](https://matplotlib.org/), [shapely](https://shapely.readthedocs.io/en/stable/index.html) and [vsketch](https://github.com/abey79/vsketch) packages.\n\n![](https://github.com/marceloprates/prettymaps/raw/main/prints/heerhugowaard.png)\n\n\nThis work is [licensed](LICENSE) under a GNU Affero General Public License v3.0 (you can make commercial use, distribute and modify this project, but must **disclose** the source code with the license and copyright notice)\n\n## Note about crediting and NFTs:\n- Please keep the printed message on the figures crediting my repository and OpenStreetMap ([mandatory by their license](https://www.openstreetmap.org/copyright)).\n- I am personally **against** NFTs for their [environmental impact](https://earth.org/nfts-environmental-impact/), the fact that they're a [giant money-laundering pyramid scheme](https://twitter.com/smdiehl/status/1445795667826208770) and the structural incentives they create for [theft](https://twitter.com/NFTtheft) in the open source and generative art communities.\n- **I do not authorize in any way this project to be used for selling NFTs**, although I cannot legally enforce it. **Respect the creator**.\n- The [AeternaCivitas](https://magiceden.io/marketplace/aeterna_civitas) and [geoartnft](https://www.geo-nft.com/) projects have used this work to sell NFTs and refused to credit it. See how they reacted after being exposed: [AeternaCivitas](etc/NFT_theft_AeternaCivitas.jpg), [geoartnft](etc/NFT_theft_geoart.jpg).\n- **I have closed my other generative art projects on Github and won't be sharing new ones as open source to protect me from the NFT community**.\n\n<a href='https://ko-fi.com/marceloprates_' target='_blank'><img height='36' style='border:0px;height:36px;' src='https://cdn.ko-fi.com/cdn/kofi1.png?v=3' border='0' alt='Buy Me a Coffee at ko-fi.com' /></a>\n\n## As seen on [Hacker News](https://web.archive.org/web/20210825160918/https://news.ycombinator.com/news):\n![](https://github.com/marceloprates/prettymaps/raw/main/prints/hackernews-prettymaps.png)\n\n## [prettymaps subreddit](https://www.reddit.com/r/prettymaps_/)\n## [Google Colaboratory Demo](https://colab.research.google.com/github/marceloprates/prettymaps/blob/master/notebooks/examples.ipynb)\n\n# Installation\n\nTo enable plotter mode:\n\n```\npip install git+https://github.com/abey79/vsketch@1.0.0\n```\n\n### Install locally:\nInstall prettymaps with:\n\n```\npip install prettymaps\n```\n\n### Install on Google Colaboratory:\n\nInstall prettymaps with:\n\n```\n!pip install -e \"git+https://github.com/marceloprates/prettymaps#egg=prettymaps\"\n```\n\nThen **restart the runtime** (Runtime -> Restart Runtime) before importing prettymaps\n\n# Tutorial\n\nPlotting with prettymaps is very simple. Run:\n```python\nprettymaps.plot(your_query)\n```\n\n**your_query** can be:\n1. An address (Example: \"Porto Alegre\"),\n2. Latitude / Longitude coordinates (Example: (-30.0324999, -51.2303767))\n3. A custom boundary in GeoDataFrame format\n\n\n```python\nimport prettymaps\n\nplot = prettymaps.plot('Stad van de Zon, Heerhugowaard, Netherlands')\n```\n\n\n    \n![png](README_files/README_8_0.png)\n    \n\n\nYou can also choose from different \"presets\" (parameter combinations saved in JSON files)\n\nSee below an example using the \"minimal\" preset\n\n\n```python\nimport prettymaps\n\nplot = prettymaps.plot(\n    'Stad van de Zon, Heerhugowaard, Netherlands',\n    preset = 'minimal'\n)\n```\n\n\n    \n![png](README_files/README_10_0.png)\n    \n\n\nRun\n\n```python\nprettymaps.presets()\n```\n\nto list all available presets:\n\n\n```python\nimport prettymaps\n\nprettymaps.presets()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>preset</th>\n      <th>params</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>abraca-redencao</td>\n      <td>{'layers': {'perimeter': {}, 'streets': {'widt...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>barcelona</td>\n      <td>{'layers': {'perimeter': {'circle': False}, 's...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>barcelona-plotter</td>\n      <td>{'layers': {'streets': {'width': {'primary': 5...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>cb-bf-f</td>\n      <td>{'layers': {'streets': {'width': {'trunk': 6, ...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>default</td>\n      <td>{'layers': {'perimeter': {}, 'streets': {'widt...</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>heerhugowaard</td>\n      <td>{'layers': {'perimeter': {}, 'streets': {'widt...</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>macao</td>\n      <td>{'layers': {'perimeter': {}, 'streets': {'cust...</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>minimal</td>\n      <td>{'layers': {'perimeter': {}, 'streets': {'widt...</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>plotter</td>\n      <td>{'layers': {'perimeter': {}, 'streets': {'widt...</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>tijuca</td>\n      <td>{'layers': {'perimeter': {}, 'streets': {'widt...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nTo examine a specific preset, run:\n\n\n```python\nimport prettymaps\n\nprettymaps.preset('default')\n```\n\n\n\n\n    Preset(params={'layers': {'perimeter': {}, 'streets': {'width': {'motorway': 5, 'trunk': 5, 'primary': 4.5, 'secondary': 4, 'tertiary': 3.5, 'cycleway': 3.5, 'residential': 3, 'service': 2, 'unclassified': 2, 'pedestrian': 2, 'footway': 1}}, 'building': {'tags': {'building': True, 'landuse': 'construction'}}, 'water': {'tags': {'natural': ['water', 'bay']}}, 'forest': {'tags': {'landuse': 'forest'}}, 'green': {'tags': {'landuse': ['grass', 'orchard'], 'natural': ['island', 'wood'], 'leisure': 'park'}}, 'beach': {'tags': {'natural': 'beach'}}, 'parking': {'tags': {'amenity': 'parking', 'highway': 'pedestrian', 'man_made': 'pier'}}}, 'style': {'perimeter': {'fill': False, 'lw': 0, 'zorder': 0}, 'background': {'fc': '#F2F4CB', 'zorder': -1}, 'green': {'fc': '#8BB174', 'ec': '#2F3737', 'hatch_c': '#A7C497', 'hatch': 'ooo...', 'lw': 1, 'zorder': 1}, 'forest': {'fc': '#64B96A', 'ec': '#2F3737', 'lw': 1, 'zorder': 2}, 'water': {'fc': '#a8e1e6', 'ec': '#2F3737', 'hatch_c': '#9bc3d4', 'hatch': 'ooo...', 'lw': 1, 'zorder': 3}, 'beach': {'fc': '#FCE19C', 'ec': '#2F3737', 'hatch_c': '#d4d196', 'hatch': 'ooo...', 'lw': 1, 'zorder': 3}, 'parking': {'fc': '#F2F4CB', 'ec': '#2F3737', 'lw': 1, 'zorder': 3}, 'streets': {'fc': '#2F3737', 'ec': '#475657', 'alpha': 1, 'lw': 0, 'zorder': 4}, 'building': {'palette': ['#433633', '#FF5E5B'], 'ec': '#2F3737', 'lw': 0.5, 'zorder': 5}}, 'circle': None, 'radius': 500})\n\n\n\n\nInsted of using the default configuration you can customize several parameters. The most important are:\n\n- layers: A dictionary of OpenStreetMap layers to fetch.\n    - Keys: layer names (arbitrary)\n    - Values: dicts representing OpenStreetMap queries\n- style: Matplotlib style parameters\n    - Keys: layer names (the same as before)\n    - Values: dicts representing Matplotlib style parameters\n\n```python\nplot = prettymaps.plot(\n    # Your query. Example: \"Porto Alegre\" or (-30.0324999, -51.2303767) (GPS coords)\n    your_query,\n    # Dict of OpenStreetMap Layers to plot. Example:\n    # {'building': {'tags': {'building': True}}, 'water': {'tags': {'natural': 'water'}}}\n    # Check the /presets folder for more examples\n    layers,\n    # Dict of style parameters for matplotlib. Example:\n    # {'building': {'palette': ['#f00','#0f0','#00f'], 'edge_color': '#333'}}\n    style,\n    # Preset to load. Options include:\n    # ['default', 'minimal', 'macao', 'tijuca']\n    preset,\n    # Save current parameters to a preset file.\n    # Example: \"my-preset\" will save to \"presets/my-preset.json\"\n    save_preset,\n    # Whether to update loaded preset with additional provided parameters. Boolean\n    update_preset,\n    # Plot with circular boundary. Boolean\n    circle,\n    # Plot area radius. Float\n    radius,\n    # Dilate the boundary by this amount. Float\n    dilate\n)\n```\n\n**plot** is a python dataclass containing:\n\n```python\n@dataclass\nclass Plot:\n    # A dictionary of GeoDataFrames (one for each plot layer)\n    geodataframes: Dict[str, gp.GeoDataFrame]\n    # A matplotlib figure\n    fig: matplotlib.figure.Figure\n    # A matplotlib axis object\n    ax: matplotlib.axes.Axes\n```\n\nHere's an example of running prettymaps.plot() with customized parameters:\n\n\n```python\nimport prettymaps\n\nplot = prettymaps.plot(\n    'Pra\u00e7a Ferreira do Amaral, Macau',\n    circle = True,\n    radius = 1100,\n    layers = {\n        \"green\": {\n            \"tags\": {\n                \"landuse\": \"grass\",\n                \"natural\": [\"island\", \"wood\"],\n                \"leisure\": \"park\"\n            }\n        },\n        \"forest\": {\n            \"tags\": {\n                \"landuse\": \"forest\"\n            }\n        },\n        \"water\": {\n            \"tags\": {\n                \"natural\": [\"water\", \"bay\"]\n            }\n        },\n        \"parking\": {\n            \"tags\": {\n                \"amenity\": \"parking\",\n                \"highway\": \"pedestrian\",\n                \"man_made\": \"pier\"\n            }\n        },\n        \"streets\": {\n            \"width\": {\n                \"motorway\": 5,\n                \"trunk\": 5,\n                \"primary\": 4.5,\n                \"secondary\": 4,\n                \"tertiary\": 3.5,\n                \"residential\": 3,\n            }\n        },\n        \"building\": {\n            \"tags\": {\"building\": True},\n        },\n    },\n    style = {\n        \"background\": {\n            \"fc\": \"#F2F4CB\",\n            \"ec\": \"#dadbc1\",\n            \"hatch\": \"ooo...\",\n        },\n        \"perimeter\": {\n            \"fc\": \"#F2F4CB\",\n            \"ec\": \"#dadbc1\",\n            \"lw\": 0,\n            \"hatch\": \"ooo...\",\n        },\n        \"green\": {\n            \"fc\": \"#D0F1BF\",\n            \"ec\": \"#2F3737\",\n            \"lw\": 1,\n        },\n        \"forest\": {\n            \"fc\": \"#64B96A\",\n            \"ec\": \"#2F3737\",\n            \"lw\": 1,\n        },\n        \"water\": {\n            \"fc\": \"#a1e3ff\",\n            \"ec\": \"#2F3737\",\n            \"hatch\": \"ooo...\",\n            \"hatch_c\": \"#85c9e6\",\n            \"lw\": 1,\n        },\n        \"parking\": {\n            \"fc\": \"#F2F4CB\",\n            \"ec\": \"#2F3737\",\n            \"lw\": 1,\n        },\n        \"streets\": {\n            \"fc\": \"#2F3737\",\n            \"ec\": \"#475657\",\n            \"alpha\": 1,\n            \"lw\": 0,\n        },\n        \"building\": {\n            \"palette\": [\n                \"#FFC857\",\n                \"#E9724C\",\n                \"#C5283D\"\n            ],\n            \"ec\": \"#2F3737\",\n            \"lw\": 0.5,\n        }\n    }\n)\n```\n\n\n    \n![png](README_files/README_16_0.png)\n    \n\n\nIn order to plot an entire region and not just a rectangular or circular area, set\n\n```python\nradius = False\n```\n\n\n```python\nimport prettymaps\n\nplot = prettymaps.plot(\n    'Bom Fim, Porto Alegre, Brasil', radius = False,\n)\n```\n\n\n    \n![png](README_files/README_18_0.png)\n    \n\n\nYou can access layers's GeoDataFrames directly like this:\n\n\n```python\nimport prettymaps\n\n# Run prettymaps in show = False mode (we're only interested in obtaining the GeoDataFrames)\nplot = prettymaps.plot('Centro Hist\u00f3rico, Porto Alegre', show = False)\nplot.geodataframes['building']\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>addr:housenumber</th>\n      <th>addr:street</th>\n      <th>amenity</th>\n      <th>operator</th>\n      <th>website</th>\n      <th>geometry</th>\n      <th>addr:postcode</th>\n      <th>name</th>\n      <th>office</th>\n      <th>opening_hours</th>\n      <th>...</th>\n      <th>contact:phone</th>\n      <th>bus</th>\n      <th>public_transport</th>\n      <th>source:name</th>\n      <th>government</th>\n      <th>ways</th>\n      <th>name:fr</th>\n      <th>type</th>\n      <th>building:part</th>\n      <th>architect</th>\n    </tr>\n    <tr>\n      <th>element_type</th>\n      <th>osmid</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>node</th>\n      <th>2407915698</th>\n      <td>820</td>\n      <td>Rua Washington Luiz</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>POINT (-51.23212 -30.0367)</td>\n      <td>90010-460</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">way</th>\n      <th>126665330</th>\n      <td>387</td>\n      <td>Rua dos Andradas</td>\n      <td>place_of_worship</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>POLYGON ((-51.23518 -30.03275, -51.23512 -30.0...</td>\n      <td>90020-002</td>\n      <td>Igreja Nossa Senhora das Dores</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>126665331</th>\n      <td>1001</td>\n      <td>Rua dos Andradas</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>http://www.ruadapraiashopping.com.br</td>\n      <td>POLYGON ((-51.23167 -30.03066, -51.2316 -30.03...</td>\n      <td>90020-015</td>\n      <td>Rua da Praia Shopping</td>\n      <td>NaN</td>\n      <td>Mo-Fr 09:00-21:00; Sa 08:00-20:00</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>129176990</th>\n      <td>1020</td>\n      <td>Rua 7 de Setembro</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>http://www.memorial.rs.gov.br</td>\n      <td>POLYGON ((-51.23117 -30.02891, -51.2312 -30.02...</td>\n      <td>90010-191</td>\n      <td>Memorial do Rio Grande do Sul</td>\n      <td>NaN</td>\n      <td>Tu-Sa 10:00-18:00</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>129176991</th>\n      <td>NaN</td>\n      <td>Pra\u00e7a da Alf\u00e2ndega</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>http://www.margs.rs.gov.br</td>\n      <td>POLYGON ((-51.23153 -30.02914, -51.23156 -30.0...</td>\n      <td>90010-150</td>\n      <td>Museu de Arte do Rio Grande do Sul</td>\n      <td>NaN</td>\n      <td>Tu-Su 10:00-19:00</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">relation</th>\n      <th>6760281</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>POLYGON ((-51.23238 -30.03337, -51.23223 -30.0...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>[457506887, 457506886]</td>\n      <td>NaN</td>\n      <td>multipolygon</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>6760282</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>POLYGON ((-51.23203 -30.0334, -51.23203 -30.03...</td>\n      <td>NaN</td>\n      <td>Atheneu Esp\u00edrita Cruzeiro do Sul</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>[457506875, 457506889, 457506888]</td>\n      <td>NaN</td>\n      <td>multipolygon</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>6760283</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>POLYGON ((-51.23284 -30.03367, -51.23288 -30.0...</td>\n      <td>NaN</td>\n      <td>Palacete Chaves</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>[457506897, 457506896]</td>\n      <td>NaN</td>\n      <td>multipolygon</td>\n      <td>NaN</td>\n      <td>Theodor Wiederspahn</td>\n    </tr>\n    <tr>\n      <th>6760284</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>POLYGON ((-51.23499 -30.03412, -51.23498 -30.0...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>[457506910, 457506913]</td>\n      <td>NaN</td>\n      <td>multipolygon</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>14393526</th>\n      <td>1044</td>\n      <td>Rua Siqueira Campos</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>https://www.sefaz.rs.gov.br</td>\n      <td>POLYGON ((-51.23125 -30.02813, -51.23128 -30.0...</td>\n      <td>NaN</td>\n      <td>Secretaria Estadual da Fazenda</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>[236213286, 1081974882]</td>\n      <td>NaN</td>\n      <td>multipolygon</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>2423 rows \u00d7 105 columns</p>\n</div>\n\n\n\nSearch a building by name and display it:\n\n\n```python\nplot.geodataframes['building'][\n        plot.geodataframes['building'].name == 'Catedral Metropolitana Nossa Senhora M\u00e3e de Deus'\n].geometry[0]\n```\n\n    /home/marcelo/anaconda3/envs/prettymaps/lib/python3.11/site-packages/geopandas/geoseries.py:720: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n      val = getattr(super(), mtd)(*args, **kwargs)\n\n\n\n\n\n    \n![svg](README_files/README_22_1.svg)\n    \n\n\n\nPlot mosaic of building footprints\n\n\n```python\nimport prettymaps\nimport numpy as np\nimport osmnx as ox\nfrom matplotlib import pyplot as plt\n\n# Run prettymaps in show = False mode (we're only interested in obtaining the GeoDataFrames)\nplot = prettymaps.plot('Porto Alegre', show = False)\n# Get list of buildings from plot's geodataframes dict\nbuildings = plot.geodataframes['building']\n# Project from lat / long\nbuildings = ox.project_gdf(buildings)\nbuildings = [b for b in buildings.geometry if b.area > 0]\n\n# Draw Matplotlib mosaic of n x n building footprints\nn = 6\nfig,axes = plt.subplots(n,n, figsize = (7,6))\n# Set background color\nfig.patch.set_facecolor('#5cc0eb')\n# Figure title\nfig.suptitle(\n    'Buildings of Porto Alegre',\n    size = 25,\n    color = '#fff'\n)\n# Draw each building footprint on a separate axis\nfor ax,building in zip(np.concatenate(axes),buildings):\n    ax.plot(*building.exterior.xy, c = '#ffffff')\n    ax.autoscale(); ax.axis('off'); ax.axis('equal')\n```\n\n\n    \n![png](README_files/README_24_0.png)\n    \n\n\nAccess plot.ax or plot.fig to add new elements to the matplotlib plot: \n\n\n```python\nimport prettymaps\n\nplot = prettymaps.plot(\n    (41.39491,2.17557),\n    preset = 'barcelona',\n)\n\n# Change background color\nplot.fig.patch.set_facecolor('#F2F4CB')\n# Add title\n_ = plot.ax.set_title(\n    'Barcelona',\n    font = 'serif',\n    size = 50\n)\n```\n\n\n    \n![png](README_files/README_26_0.png)\n    \n\n\nUse **plotter** mode to export a pen plotter-compatible SVG (thanks to abey79's amazing [vsketch](https://github.com/abey79/vsketch) library)\n\n\n```python\nimport prettymaps\n\nplot = prettymaps.plot(\n    (41.39491,2.17557),\n    mode = 'plotter',\n    layers = dict(perimeter = {}),\n    preset = 'barcelona-plotter',\n    scale_x = .6,\n    scale_y = -.6,\n)\n```\n\n\n    \n![png](README_files/README_28_0.png)\n    \n\n\nSome other examples\n\n\n```python\nimport prettymaps\n\nplot = prettymaps.plot(\n    # City name\n    'Barra da Tijuca',\n    dilate = 0,\n    figsize = (22,10),\n    preset = 'tijuca',\n)\n```\n\n\n```python\nimport prettymaps\n\nplot = prettymaps.plot(\n    'Stad van de Zon, Heerhugowaard, Netherlands',\n    preset = 'heerhugowaard',\n)\n```\n\n\n    \n![png](README_files/README_31_0.png)\n    \n\n\nUse prettymaps.create_preset() to create a preset:\n\n\n```python\nimport prettymaps\n\nprettymaps.create_preset(\n    \"my-preset\",\n    layers = {\n        \"building\": {\n            \"tags\": {\n                \"building\": True,\n                \"leisure\": [\n                    \"track\",\n                    \"pitch\"\n                ]\n            }\n        },\n        \"streets\": {\n            \"width\": {\n                \"trunk\": 6,\n                \"primary\": 6,\n                \"secondary\": 5,\n                \"tertiary\": 4,\n                \"residential\": 3.5,\n                \"pedestrian\": 3,\n                \"footway\": 3,\n                \"path\": 3\n            }\n        },\n    },\n    style = {\n        \"perimeter\": {\n            \"fill\": False,\n            \"lw\": 0,\n            \"zorder\": 0\n        },\n        \"streets\": {\n            \"fc\": \"#F1E6D0\",\n            \"ec\": \"#2F3737\",\n            \"lw\": 1.5,\n            \"zorder\": 3\n        },\n        \"building\": {\n            \"palette\": [\n                \"#fff\"\n            ],\n            \"ec\": \"#2F3737\",\n            \"lw\": 1,\n            \"zorder\": 4\n        }\n    }\n)\n\nprettymaps.preset('my-preset')\n```\n\n\n\n\n    Preset(params={'layers': {'building': {'tags': {'building': True, 'leisure': ['track', 'pitch']}}, 'streets': {'width': {'trunk': 6, 'primary': 6, 'secondary': 5, 'tertiary': 4, 'residential': 3.5, 'pedestrian': 3, 'footway': 3, 'path': 3}}}, 'style': {'perimeter': {'fill': False, 'lw': 0, 'zorder': 0}, 'streets': {'fc': '#F1E6D0', 'ec': '#2F3737', 'lw': 1.5, 'zorder': 3}, 'building': {'palette': ['#fff'], 'ec': '#2F3737', 'lw': 1, 'zorder': 4}}, 'circle': None, 'radius': None, 'dilate': None})\n\n\n\nUse prettymaps.delete_preset() to delete presets:\n\n\n```python\n# Show presets before deletion\nprint('Before deletion:')\ndisplay(prettymaps.presets())\n# Delete 'my-preset'\nprettymaps.delete_preset('my-preset')\n# Show presets after deletion\nprint('After deletion:')\ndisplay(prettymaps.presets())\n```\n\n    Before deletion:\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>preset</th>\n      <th>params</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>abraca-redencao</td>\n      <td>{'layers': {'perimeter': {}, 'streets': {'widt...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>barcelona</td>\n      <td>{'layers': {'perimeter': {'circle': False}, 's...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>barcelona-plotter</td>\n      <td>{'layers': {'streets': {'width': {'primary': 5...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>cb-bf-f</td>\n      <td>{'layers': {'streets': {'width': {'trunk': 6, ...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>default</td>\n      <td>{'layers': {'perimeter': {}, 'streets': {'widt...</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>heerhugowaard</td>\n      <td>{'layers': {'perimeter': {}, 'streets': {'widt...</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>macao</td>\n      <td>{'layers': {'perimeter': {}, 'streets': {'cust...</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>minimal</td>\n      <td>{'layers': {'perimeter': {}, 'streets': {'widt...</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>my-preset</td>\n      <td>{'layers': {'building': {'tags': {'building': ...</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>plotter</td>\n      <td>{'layers': {'perimeter': {}, 'streets': {'widt...</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>tijuca</td>\n      <td>{'layers': {'perimeter': {}, 'streets': {'widt...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n    After deletion:\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>preset</th>\n      <th>params</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>abraca-redencao</td>\n      <td>{'layers': {'perimeter': {}, 'streets': {'widt...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>barcelona</td>\n      <td>{'layers': {'perimeter': {'circle': False}, 's...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>barcelona-plotter</td>\n      <td>{'layers': {'streets': {'width': {'primary': 5...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>cb-bf-f</td>\n      <td>{'layers': {'streets': {'width': {'trunk': 6, ...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>default</td>\n      <td>{'layers': {'perimeter': {}, 'streets': {'widt...</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>heerhugowaard</td>\n      <td>{'layers': {'perimeter': {}, 'streets': {'widt...</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>macao</td>\n      <td>{'layers': {'perimeter': {}, 'streets': {'cust...</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>minimal</td>\n      <td>{'layers': {'perimeter': {}, 'streets': {'widt...</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>plotter</td>\n      <td>{'layers': {'perimeter': {}, 'streets': {'widt...</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>tijuca</td>\n      <td>{'layers': {'perimeter': {}, 'streets': {'widt...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\nUse **prettymaps.multiplot** and **prettymaps.Subplot** to draw multiple regions on the same canvas\n\n\n```python\nimport prettymaps\n\n# Draw several regions on the same canvas\nplot = prettymaps.multiplot(\n    prettymaps.Subplot(\n        'Cidade Baixa, Porto Alegre',\n        style={'building': {'palette': ['#49392C', '#E1F2FE', '#98D2EB']}}\n    ),\n    prettymaps.Subplot(\n        'Bom Fim, Porto Alegre',\n        style={'building': {'palette': ['#BA2D0B', '#D5F2E3', '#73BA9B', '#F79D5C']}}\n    ),\n    prettymaps.Subplot(\n        'Farroupilha, Porto Alegre',\n        style={'building': {'palette': ['#EEE4E1', '#E7D8C9', '#E6BEAE']}}\n    ),\n    # Load a global preset\n    preset='cb-bf-f',\n    # Figure size\n    figsize=(12, 12)\n)\n```\n\n\n    \n![png](README_files/README_37_0.png)\n    \n\n\n\n    <Figure size 3600x3600 with 0 Axes>\n\n\n\n    <Figure size 3600x3600 with 0 Axes>\n\n\n\n    <Figure size 3600x3600 with 0 Axes>\n\n\n\n```python\n\n```\n",
        "releases": [
            {
                "name": "1.3.2",
                "date": "2025-01-12T16:41:05Z"
            },
            {
                "name": "1.3.1",
                "date": "2025-01-12T16:29:57Z"
            },
            {
                "name": "v1.3.0",
                "date": "2024-07-02T22:55:50Z"
            },
            {
                "name": "v1.0.0",
                "date": "2023-02-15T20:16:12Z"
            },
            {
                "name": "v0.1.3",
                "date": "2021-10-19T13:32:34Z"
            },
            {
                "name": "",
                "date": "2021-10-01T21:13:52Z"
            },
            {
                "name": "",
                "date": "2021-10-01T21:11:24Z"
            },
            {
                "name": "",
                "date": "2021-10-01T21:10:14Z"
            }
        ]
    }
}