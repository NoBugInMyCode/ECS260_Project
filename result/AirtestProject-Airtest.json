{
    "https://api.github.com/repos/AirtestProject/Airtest": {
        "forks": 1316,
        "watchers": 8407,
        "stars": 8407,
        "languages": {
            "Python": 665375,
            "HTML": 506512,
            "JavaScript": 50931,
            "CSS": 17155,
            "Shell": 160
        },
        "commits": [
            "2024-09-26T06:55:23Z",
            "2024-09-24T09:26:44Z",
            "2024-09-24T09:26:00Z",
            "2024-06-25T08:24:18Z",
            "2024-08-09T10:25:41Z",
            "2024-06-27T06:53:47Z",
            "2024-07-23T11:54:54Z",
            "2024-07-23T11:30:48Z",
            "2024-07-23T11:29:17Z",
            "2024-06-21T07:46:06Z",
            "2024-06-20T12:33:52Z",
            "2024-06-20T06:51:29Z",
            "2024-06-19T07:14:27Z",
            "2024-05-31T09:27:46Z",
            "2024-05-27T07:17:56Z",
            "2024-04-16T07:28:57Z",
            "2024-04-10T10:29:37Z",
            "2024-04-26T08:00:35Z",
            "2024-04-24T03:35:19Z",
            "2024-01-20T09:02:49Z",
            "2024-01-20T08:53:28Z",
            "2024-01-20T08:50:30Z",
            "2024-01-08T03:57:35Z",
            "2024-01-08T03:50:33Z",
            "2024-01-08T03:46:04Z",
            "2024-01-08T03:37:57Z",
            "2024-01-08T03:23:14Z",
            "2024-01-08T03:11:02Z",
            "2024-01-06T09:05:06Z",
            "2024-01-05T09:20:09Z"
        ],
        "creation_date": "2018-01-24T04:00:35Z",
        "contributors": 30,
        "topics": [
            "android",
            "automated-testing",
            "automation",
            "game",
            "ios",
            "test-automation",
            "test-framework",
            "unity3d",
            "windows"
        ],
        "subscribers": 212,
        "readme": "# Airtest &middot; [![Build status](https://travis-ci.org/AirtestProject/Airtest.svg?branch=master)](https://travis-ci.org/AirtestProject/Airtest)\n\n**Cross-Platform UI Automation Framework for Games and Apps**\n\n**\u8de8\u5e73\u53f0\u7684UI\u81ea\u52a8\u5316\u6846\u67b6\uff0c\u9002\u7528\u4e8e\u6e38\u620f\u548cApp** \uff08[\u4e2d\u6587\u7248\u70b9\u8fd9\u91cc](./README_zh.md)\uff09\n\n\n![image](./demo.gif)\n\n\n## Features\n\n*   **Write Once, Run Anywhere:** Airtest provides cross-platform APIs, including app installation, simulated input, assertion and so forth. Airtest uses image recognition technology to locate UI elements so that you can automate games and apps without injecting any code. \n\n*   **Fully Scalable:** Airtest cases can be easily run on large device farms, using commandline or python API. HTML reports with detailed info and screen recording allow you to quickly locate failure points. NetEase builds [Airlab](https://airlab.163.com/) on top of the Airtest Project.\n\n*   **AirtestIDE:** AirtestIDE is an out of the box GUI tool that helps to create and run cases in a user-friendly way. AirtestIDE supports a complete automation workflow: ``create -> run -> report``.\n\n*   **Poco:** [Poco](https://github.com/AirtestProject/Poco) adds the ability to directly access object(UI widget) hierarchy across the major platforms and game engines. It allows writing instructions in Python, to achieve more advanced automation.\n\nGet started from [airtest homepage](http://airtest.netease.com/)\n\n#### [Supported Platforms](./docs/wiki/device/platforms.md)\n\n\n## Installation\n\nUse `pip` to install the Airtest python library. \n\n```Shell\npip install -U airtest\n```\n\nOn MacOS/Linux platform, you need to grant adb execute permission.\n\n```Shell\n# for mac\ncd {your_python_path}/site-packages/airtest/core/android/static/adb/mac\n# for linux\n# cd {your_python_path}/site-packages/airtest/core/android/static/adb/linux\nchmod +x adb\n```\n\nDownload AirtestIDE from our [homepage](http://airtest.netease.com/) if you need to use the GUI tool.\n\n\n## Documentation\n\nYou can find the complete Airtest documentation on [readthedocs](http://airtest.readthedocs.io/).\n\n\n## Examples\n\nAirtest aims at providing platform-independent API so that you can write automated cases once and run it on multiple devices and platforms.\n\n1. Using [connect_device](http://airtest.readthedocs.io/en/latest/README_MORE.html#connect-device) API you can connect to any android/iOS device or windows application.\n1. Then perform [simulated input](http://airtest.readthedocs.io/en/latest/README_MORE.html#simulate-input) to automate your game or app.\n1. **DO NOT** forget to [make assertions](http://airtest.readthedocs.io/en/latest/README_MORE.html#make-assertion) of the expected result. \n\n```Python\nfrom airtest.core.api import *\n\n# connect an android phone with adb\ninit_device(\"Android\")\n# or use connect_device api\n# connect_device(\"Android:///\")\n\ninstall(\"path/to/your/apk\")\nstart_app(\"package_name_of_your_apk\")\ntouch(Template(\"image_of_a_button.png\"))\nswipe(Template(\"slide_start.png\"), Template(\"slide_end.png\"))\nassert_exists(Template(\"success.png\"))\nkeyevent(\"BACK\")\nhome()\nuninstall(\"package_name_of_your_apk\")\n```\n\nFor more detailed info, please refer to [Airtest Python API reference](http://airtest.readthedocs.io/en/latest/all_module/airtest.core.api.html) or take a look at [API code](./airtest/core/api.py)\n\n\n## Running ``.air`` cases from CLI\n\nUsing AirtestIDE, you can easily create automated cases as ``.air`` directories.\nAirtest CLI provides the possibility to execute cases on different host machines and target device platforms without using AirtestIDE itself.\n\n```Shell\n# run cases targeting on Android phone connected to your host machine via ADB\nairtest run \"path to your .air dir\" --device Android:///\n\n# run cases targeting on Windows application whose title matches Unity.*\nairtest run \"path to your .air dir\" --device \"Windows:///?title_re=Unity.*\"\n\n# generate HTML report after running cases\nairtest report \"path to your .air dir\"\n\n# or use as a python module\npython -m airtest run \"path to your .air dir\" --device Android:///\n```\n\nTry running provided example case: [``airtest/playground/test_blackjack.air``](./playground/test_blackjack.air) and see [Usage of CLI](http://airtest.readthedocs.io/en/latest/README_MORE.html#running-air-from-cli). Here is a [multi-device runner sample](https://github.com/AirtestProject/multi-device-runner).\n\n\n## Contribution\n\nPull requests are very welcome. \n\n\n## Thanks\n\nThanks for all these great works that make this project better.\n\n- [stf](https://github.com/openstf)\n- [atx](https://github.com/NetEaseGame/ATX)\n- [pywinauto](https://github.com/pywinauto/pywinauto)\n",
        "releases": [
            {
                "name": "v1.3.5",
                "date": "2024-09-26T06:57:06Z"
            },
            {
                "name": "v1.3.4",
                "date": "2024-04-30T07:18:46Z"
            },
            {
                "name": "v1.3.3",
                "date": "2024-01-08T04:07:17Z"
            },
            {
                "name": "v1.3.2",
                "date": "2023-11-22T06:47:33Z"
            },
            {
                "name": "v1.3.1",
                "date": "2023-09-28T03:54:32Z"
            },
            {
                "name": "v1.3.0",
                "date": "2023-07-18T11:13:41Z"
            },
            {
                "name": "v1.2.10.2 ",
                "date": "2023-05-12T06:29:26Z"
            },
            {
                "name": "1.2.10 Compatible with the latest version of iOS-tagent. \u517c\u5bb9\u6700\u65b0\u7248\u672c\u7684iOS-Tagent",
                "date": "2023-03-29T07:56:44Z"
            },
            {
                "name": "v1.2.9 \u65b0\u7248\u672c\u5f55\u5c4f\u65b9\u6cd5\u548cwindows\u622a\u56fe\u4f18\u5316",
                "date": "2023-02-15T04:57:13Z"
            },
            {
                "name": "v1.2.7",
                "date": "2022-09-29T08:18:07Z"
            },
            {
                "name": "v1.2.5 - v1.2.6",
                "date": "2022-04-29T07:39:45Z"
            },
            {
                "name": "v1.2.4",
                "date": "2021-12-10T08:36:49Z"
            },
            {
                "name": "1.2.3",
                "date": "2021-09-29T06:30:11Z"
            },
            {
                "name": "1.2.1-1.2.2",
                "date": "2021-08-19T07:49:11Z"
            },
            {
                "name": "1.2.0",
                "date": "2021-06-18T03:05:40Z"
            },
            {
                "name": "1.1.10-1.1.11",
                "date": "2021-04-30T09:53:22Z"
            },
            {
                "name": "",
                "date": "2021-04-02T03:44:59Z"
            },
            {
                "name": "",
                "date": "2021-02-22T08:59:07Z"
            },
            {
                "name": "v1.1.7 update",
                "date": "2021-01-11T07:49:27Z"
            },
            {
                "name": "v1.1.5-1.1.6 update",
                "date": "2020-10-10T08:04:05Z"
            },
            {
                "name": "v1.1.4\u7248\u672c\u66f4\u65b0",
                "date": "2020-07-06T07:36:53Z"
            },
            {
                "name": "v1.1.3 \u7248\u672c\u53d1\u5e03\uff0c\u66f4\u65b0Android10\u652f\u6301",
                "date": "2020-01-21T09:00:38Z"
            },
            {
                "name": "v1.1.2",
                "date": "2020-01-17T10:21:56Z"
            }
        ]
    }
}