{
    "https://api.github.com/repos/bulletphysics/bullet3": {
        "forks": 2879,
        "watchers": 12914,
        "stars": 12914,
        "languages": {
            "C++": 10088115,
            "C": 1513986,
            "CMake": 141734,
            "Lua": 109663,
            "Python": 77635,
            "Batchfile": 15710,
            "Shell": 13267,
            "Makefile": 5001
        },
        "commits": [
            "2024-04-09T23:35:53Z",
            "2024-04-09T23:30:33Z",
            "2024-04-09T23:25:09Z",
            "2024-02-27T15:17:48Z",
            "2024-02-22T23:59:39Z",
            "2024-02-19T03:16:04Z",
            "2023-11-28T22:23:32Z",
            "2023-11-28T22:21:33Z",
            "2023-05-04T13:10:06Z",
            "2023-05-04T13:09:50Z",
            "2023-04-11T14:21:21Z",
            "2023-03-07T19:31:10Z",
            "2023-02-24T18:54:03Z",
            "2023-02-24T18:32:04Z",
            "2022-12-27T19:28:50Z",
            "2022-12-27T18:46:22Z",
            "2022-12-22T18:27:16Z",
            "2022-12-21T13:44:35Z",
            "2022-12-19T14:31:21Z",
            "2021-10-21T15:38:13Z",
            "2021-09-28T20:39:31Z",
            "2022-12-13T17:39:21Z",
            "2022-09-25T03:00:36Z",
            "2022-09-25T02:59:02Z",
            "2022-09-02T17:17:14Z",
            "2022-08-17T04:47:10Z",
            "2022-08-17T04:45:01Z",
            "2022-08-11T21:00:12Z",
            "2022-08-11T18:55:50Z",
            "2022-08-11T18:46:39Z"
        ],
        "creation_date": "2011-04-12T18:45:08Z",
        "contributors": 30,
        "topics": [
            "computer-animation",
            "game-development",
            "kinematics",
            "pybullet",
            "reinforcement-learning",
            "robotics",
            "simulation",
            "simulator",
            "virtual-reality"
        ],
        "subscribers": 409,
        "readme": "[![Travis Build Status](https://api.travis-ci.org/bulletphysics/bullet3.png?branch=master)](https://travis-ci.org/bulletphysics/bullet3)\n[![Appveyor Build status](https://ci.appveyor.com/api/projects/status/6sly9uxajr6xsstq)](https://ci.appveyor.com/project/erwincoumans/bullet3)\n\n# Bullet Physics SDK\n\nThis is the official C++ source code repository of the Bullet Physics SDK: real-time collision detection and multi-physics simulation for VR, games, visual effects, robotics, machine learning etc.\n\n![PyBullet](https://pybullet.org/wordpress/wp-content/uploads/2019/03/cropped-pybullet.png)\n\n## Issues ##\nThe Issue tracker was flooded with support questions and is closed until it is cleaned up. Use the [PyBullet forums](http://pybullet.org) to discuss with others.\n\n## PyBullet ##\nIt is highly recommended to use PyBullet Python bindings for improved support for robotics, reinforcement learning and VR. Use pip install pybullet and checkout the [PyBullet Quickstart Guide](https://docs.google.com/document/d/10sXEhzFRSnvFcl3XxNGhnD4N2SedqwdAvK3dsihxVUA/edit#heading=h.2ye70wns7io3).\n\nInstallation is simple:\n```\npip3 install pybullet --upgrade --user\npython3 -m pybullet_envs.examples.enjoy_TF_AntBulletEnv_v0_2017may\npython3 -m pybullet_envs.examples.enjoy_TF_HumanoidFlagrunHarderBulletEnv_v1_2017jul\npython3 -m pybullet_envs.deep_mimic.testrl --arg_file run_humanoid3d_backflip_args.txt\n```\n\nIf you use PyBullet in your research, please cite it like this:\n\n```\n@MISC{coumans2021,\nauthor =   {Erwin Coumans and Yunfei Bai},\ntitle =    {PyBullet, a Python module for physics simulation for games, robotics and machine learning},\nhowpublished = {\\url{http://pybullet.org}},\nyear = {2016--2021}\n}\n```\n\n## Requirements for Bullet Physics C++\n\nA C++ compiler for C++ 2003. The library is tested on Windows, Linux, Mac OSX, iOS, Android,\nbut should likely work on any platform with C++ compiler. \nSome optional demos require OpenGL 2 or OpenGL 3, there are some non-graphical demos and unit tests too.\n\n## Contributors and Coding Style information\n\nhttps://docs.google.com/document/d/1u9vyzPtrVoVhYqQOGNWUgjRbfwfCdIts_NzmvgiJ144/edit\n\n## Requirements for experimental OpenCL GPGPU support\n\nThe entire collision detection and rigid body dynamics can be executed on the GPU.\n\nA high-end desktop GPU, such as an AMD Radeon 7970 or NVIDIA GTX 680 or better.\nWe succesfully tested the software under Windows, Linux and Mac OSX.\nThe software currently doesn't work on OpenCL CPU devices. It might run\non a laptop GPU but performance will not likely be very good. Note that\noften an OpenCL drivers fails to compile a kernel. Some unit tests exist to\ntrack down the issue, but more work is required to cover all OpenCL kernels.\n\n## License\n\nAll source code files are licensed under the permissive zlib license\n(http://opensource.org/licenses/Zlib) unless marked differently in a particular folder/file.\n\n## Build instructions for Bullet using vcpkg\n\nYou can download and install Bullet using the [vcpkg](https://github.com/Microsoft/vcpkg/) dependency manager:\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    ./vcpkg install bullet3\n\nThe Bullet port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n## Build instructions for Bullet using premake. You can also use cmake instead.\n\n**Windows**\n\nClick on build_visual_studio_vr_pybullet_double.bat and open build3/vs2010/0_Bullet3Solution.sln\nWhen asked, convert the projects to a newer version of Visual Studio.\nIf you installed Python in the C:\\ root directory, the batch file should find it automatically.\nOtherwise, edit this batch file to choose where Python include/lib directories are located.\n\n**Windows Virtual Reality sandbox for HTC Vive and Oculus Rift**\n\nBuild and run the App_SharedMemoryPhysics_VR project, preferably in Release/optimized build.\nYou can connect from Python pybullet to the sandbox using:\n\n```\nimport pybullet as p\np.connect(p.SHARED_MEMORY) #or (p.TCP, \"localhost\", 6667) or (p.UDP, \"192.168.86.10\",1234)\n```\n\n**Linux and Mac OSX gnu make**\n\nMake sure gcc and cmake is installed (`sudo apt-get install build-essential` and `sudo apt-get install cmake` for Linux, `brew install cmake` for Mac, or https://cmake.org)\n\nIn a terminal type:\n```\n./build_cmake_pybullet_double.sh\n```\nThis script will invoke cmake and build in the build_cmake directory. You can find pybullet in Bullet/examples/pybullet.\nThe BulletExampleBrowser binary will be in Bullet/examples/ExampleBrowser.\n\nYou can also build Bullet using premake. There are premake executables in the build3 folder.\nDepending on your system (Linux 32bit, 64bit or Mac OSX) use one of the following lines\nUsing premake:\n```\ncd build3\n./premake4_linux --double gmake\n./premake4_linux64 --double gmake\n./premake4_osx --double --enable_pybullet gmake\n```\nThen\n```\ncd gmake\nmake\n```\n\nNote that on Linux, you need to use cmake to build pybullet, since the compiler has issues of mixing shared and static libraries.\n\n**Mac OSX Xcode**\n\t\nClick on build3/xcode4.command or in a terminal window execute\n```\t\n./premake_osx xcode4\n```\n## Usage\n\nThe App_ExampleBrowser executables will be located in the bin folder.\nYou can just run it though a terminal/command prompt, or by clicking it.\n\n\n```\n[--start_demo_name=\"Demo Name\"]     Start with a selected demo  \n[--mp4=moviename.mp4]               Create a mp4 movie of the window, requires ffmpeg installed\n[--mouse_move_multiplier=0.400000]  Set the mouse move sensitivity\n[--mouse_wheel_multiplier=0.01]     Set the mouse wheel sensitivity\n[--background_color_red= 0.9]       Set the red component for background color. Same for green and blue\n[--fixed_timestep= 0.0]             Use either a real-time delta time (0.0) or a fixed step size (0.016666)\n```\n\nYou can use mouse picking to grab objects. When holding the ALT or CONTROL key, you have Maya style camera mouse controls.\nPress F1 to create a series of screenshots. Hit ESCAPE to exit the demo app.\n\nCheck out the docs folder and the Bullet physics forums for further information.\n",
        "releases": [
            {
                "name": "PyBullet 3.2.5",
                "date": "2022-04-24T23:54:27Z"
            },
            {
                "name": "PyBullet 3.22",
                "date": "2022-03-26T02:31:09Z"
            },
            {
                "name": "PyBullet 3.21",
                "date": "2021-12-01T18:25:16Z"
            },
            {
                "name": "PyBullet 3.1.7 / Bullet Physics 3.17",
                "date": "2020-11-26T22:27:00Z"
            },
            {
                "name": "Quadruped Motion Imitation and MPC locomotion",
                "date": "2020-09-24T17:18:46Z"
            },
            {
                "name": "Bullet 2.89 with FEM deformables, PyBullet deep_mimic and Laikago",
                "date": "2019-12-21T00:46:19Z"
            },
            {
                "name": "Bullet Physics SDK 2.88 and PyBullet",
                "date": "2018-12-31T21:03:07Z"
            },
            {
                "name": "Bullet 2.87 with pybullet robotics Reinforcement Learning environments",
                "date": "2017-09-29T23:37:13Z"
            },
            {
                "name": "Bullet 2.86 with pybullet for robotics, deep learning and VR",
                "date": "2017-02-19T13:43:45Z"
            },
            {
                "name": "Bullet 2.85",
                "date": "2016-10-15T17:50:55Z"
            },
            {
                "name": "Bullet 2.83",
                "date": "2016-01-12T21:45:46Z"
            }
        ]
    }
}