{
    "https://api.github.com/repos/patrickmn/go-cache": {
        "forks": 879,
        "watchers": 8280,
        "stars": 8280,
        "languages": {
            "Go": 76573
        },
        "commits": [
            "2019-10-04T19:21:08Z",
            "2019-10-04T19:15:23Z",
            "2018-08-15T05:31:27Z",
            "2018-05-27T04:33:50Z",
            "2017-07-22T04:01:10Z",
            "2017-07-21T18:56:50Z",
            "2017-04-18T23:29:47Z",
            "2017-03-26T16:37:11Z",
            "2017-03-26T16:36:28Z",
            "2017-03-26T16:30:15Z",
            "2016-12-08T13:50:49Z",
            "2016-11-25T23:48:19Z",
            "2016-11-25T19:18:09Z",
            "2016-11-25T18:57:39Z",
            "2016-11-25T18:56:11Z",
            "2016-01-27T17:00:04Z",
            "2016-01-27T16:56:21Z",
            "2016-01-08T20:02:42Z",
            "2015-12-03T14:55:58Z",
            "2015-12-03T14:40:14Z",
            "2015-12-02T19:32:12Z",
            "2015-12-01T16:18:46Z",
            "2015-12-01T16:08:43Z",
            "2015-11-30T21:18:49Z",
            "2015-11-30T21:04:57Z",
            "2015-11-30T21:04:49Z",
            "2015-11-30T20:12:19Z",
            "2015-11-30T20:02:11Z",
            "2015-11-30T20:02:02Z",
            "2015-11-30T19:49:18Z"
        ],
        "creation_date": "2012-01-02T13:07:13Z",
        "contributors": 7,
        "topics": [
            "cache",
            "go",
            "library"
        ],
        "subscribers": 119,
        "readme": "# go-cache\n\ngo-cache is an in-memory key:value store/cache similar to memcached that is\nsuitable for applications running on a single machine. Its major advantage is\nthat, being essentially a thread-safe `map[string]interface{}` with expiration\ntimes, it doesn't need to serialize or transmit its contents over the network.\n\nAny object can be stored, for a given duration or forever, and the cache can be\nsafely used by multiple goroutines.\n\nAlthough go-cache isn't meant to be used as a persistent datastore, the entire\ncache can be saved to and loaded from a file (using `c.Items()` to retrieve the\nitems map to serialize, and `NewFrom()` to create a cache from a deserialized\none) to recover from downtime quickly. (See the docs for `NewFrom()` for caveats.)\n\n### Installation\n\n`go get github.com/patrickmn/go-cache`\n\n### Usage\n\n```go\nimport (\n\t\"fmt\"\n\t\"github.com/patrickmn/go-cache\"\n\t\"time\"\n)\n\nfunc main() {\n\t// Create a cache with a default expiration time of 5 minutes, and which\n\t// purges expired items every 10 minutes\n\tc := cache.New(5*time.Minute, 10*time.Minute)\n\n\t// Set the value of the key \"foo\" to \"bar\", with the default expiration time\n\tc.Set(\"foo\", \"bar\", cache.DefaultExpiration)\n\n\t// Set the value of the key \"baz\" to 42, with no expiration time\n\t// (the item won't be removed until it is re-set, or removed using\n\t// c.Delete(\"baz\")\n\tc.Set(\"baz\", 42, cache.NoExpiration)\n\n\t// Get the string associated with the key \"foo\" from the cache\n\tfoo, found := c.Get(\"foo\")\n\tif found {\n\t\tfmt.Println(foo)\n\t}\n\n\t// Since Go is statically typed, and cache values can be anything, type\n\t// assertion is needed when values are being passed to functions that don't\n\t// take arbitrary types, (i.e. interface{}). The simplest way to do this for\n\t// values which will only be used once--e.g. for passing to another\n\t// function--is:\n\tfoo, found := c.Get(\"foo\")\n\tif found {\n\t\tMyFunction(foo.(string))\n\t}\n\n\t// This gets tedious if the value is used several times in the same function.\n\t// You might do either of the following instead:\n\tif x, found := c.Get(\"foo\"); found {\n\t\tfoo := x.(string)\n\t\t// ...\n\t}\n\t// or\n\tvar foo string\n\tif x, found := c.Get(\"foo\"); found {\n\t\tfoo = x.(string)\n\t}\n\t// ...\n\t// foo can then be passed around freely as a string\n\n\t// Want performance? Store pointers!\n\tc.Set(\"foo\", &MyStruct, cache.DefaultExpiration)\n\tif x, found := c.Get(\"foo\"); found {\n\t\tfoo := x.(*MyStruct)\n\t\t\t// ...\n\t}\n}\n```\n\n### Reference\n\n`godoc` or [http://godoc.org/github.com/patrickmn/go-cache](http://godoc.org/github.com/patrickmn/go-cache)\n",
        "releases": [
            {
                "name": "2.1.0",
                "date": "2017-10-24T15:17:01Z"
            }
        ]
    }
}