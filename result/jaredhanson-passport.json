{
    "https://api.github.com/repos/jaredhanson/passport": {
        "forks": 1242,
        "watchers": 23115,
        "stars": 23115,
        "languages": {
            "JavaScript": 277039,
            "Makefile": 460
        },
        "commits": [
            "2024-08-16T21:56:08Z",
            "2024-08-16T21:54:35Z",
            "2024-08-16T21:52:02Z",
            "2024-08-16T21:49:14Z",
            "2024-08-16T21:40:38Z",
            "2024-08-16T21:37:59Z",
            "2024-08-16T21:36:18Z",
            "2024-08-16T21:35:46Z",
            "2024-08-16T21:33:21Z",
            "2024-08-16T21:31:16Z",
            "2024-08-16T21:29:44Z",
            "2024-08-16T21:28:34Z",
            "2024-08-16T21:27:13Z",
            "2024-08-16T21:25:32Z",
            "2024-08-16T21:24:46Z",
            "2024-08-16T21:23:57Z",
            "2024-08-16T21:22:55Z",
            "2024-08-16T21:22:13Z",
            "2024-08-16T20:46:28Z",
            "2024-08-16T20:45:48Z",
            "2024-01-26T23:38:34Z",
            "2023-11-27T22:57:28Z",
            "2023-11-27T22:55:48Z",
            "2023-11-27T22:49:25Z",
            "2023-11-27T22:44:46Z",
            "2023-11-27T22:17:59Z",
            "2023-11-27T18:10:12Z",
            "2023-03-10T17:27:55Z",
            "2023-03-10T17:21:30Z",
            "2023-03-10T17:20:40Z"
        ],
        "creation_date": "2011-10-08T22:38:32Z",
        "contributors": 30,
        "topics": [
            "express",
            "nodejs",
            "oauth",
            "oauth2",
            "openid",
            "openid-connect",
            "passport",
            "saml"
        ],
        "subscribers": 301,
        "readme": "[![passport banner](http://cdn.auth0.com/img/passport-banner-github.png)](http://passportjs.org)\n\n# Passport\n\nPassport is [Express](http://expressjs.com/)-compatible authentication\nmiddleware for [Node.js](http://nodejs.org/).\n\nPassport's sole purpose is to authenticate requests, which it does through an\nextensible set of plugins known as _strategies_.  Passport does not mount\nroutes or assume any particular database schema, which maximizes flexibility and\nallows application-level decisions to be made by the developer.  The API is\nsimple: you provide Passport a request to authenticate, and Passport provides\nhooks for controlling what occurs when authentication succeeds or fails.\n\n---\n\n<div align=\"center\">\n  <sup>Sponsors</sup>\n  <br>\n  <!-- Auth0 -->\n  <div>\n    <a href=\"https://auth0.com/\">\n      <picture>\n        <source srcset=\"https://raw.githubusercontent.com/jaredhanson/passport/master/sponsors/auth0.png\" media=\"(prefers-color-scheme: light)\">\n        <source srcset=\"https://raw.githubusercontent.com/jaredhanson/passport/master/sponsors/auth0-dark.png\" media=\"(prefers-color-scheme: dark)\">\n        <img src=\"https://raw.githubusercontent.com/jaredhanson/passport/master/sponsors/auth0.svg\" width=\"275\">\n      </picture>\n      <p>\n        <b>Simple Authentication</b>\n        <br>\n        Make login our problem. Not yours.\n      </p>\n    </a>\n    <p>Auth0 by Okta provides a simple and customizable login page to authenticate your users. You can dynamically add new capabilities to it - including social login, multi-factor authentication, or passkeys - without making changes to your app\u2019s code.</p>\n    <p>We help protect your app and your users from attacks - defending your application from bot attacks and detecting runtime anomalies based on suspicious IPs, breached credentials, user context, and more.</p>\n  </div>\n  <br>\n  <!-- WorkOS -->\n  <div>\n    <a href=\"https://workos.com/?utm_campaign=github_repo&utm_medium=referral&utm_content=passport_js&utm_source=github\">\n      <img src=\"https://raw.githubusercontent.com/jaredhanson/passport/master/sponsors/workos.png\">\n      <p>\n        <b>Your app, enterprise-ready.</b>\n        <br>\n        Start selling to enterprise customers with just a few lines of code. Add Single Sign-On (and more) in minutes instead of months.\n      </p>\n    </a>\n  </div>\n  <br>\n  <!-- Descope -->\n  <div>\n    <a href=\"https://www.descope.com/?utm_source=PassportJS&utm_medium=referral&utm_campaign=oss-sponsorship\">\n      <picture>\n        <source srcset=\"https://raw.githubusercontent.com/jaredhanson/passport/master/sponsors/descope.svg\" media=\"(prefers-color-scheme: light)\">\n        <source srcset=\"https://raw.githubusercontent.com/jaredhanson/passport/master/sponsors/descope-dark.svg\" media=\"(prefers-color-scheme: dark)\">\n        <img src=\"https://raw.githubusercontent.com/jaredhanson/passport/master/sponsors/descope.svg\" width=\"275\">\n      </picture>\n      <p>\n        <b>Drag and drop your auth</b>\n        <br>\n        Add authentication and user management to your consumer and business apps with a few lines of code.\n      </p>\n    </a>\n  </div>\n  <br>\n  <!-- FusionAuth -->\n  <div>\n    <a href=\"https://fusionauth.io/?utm_source=passportjs&utm_medium=referral&utm_campaign=sponsorship\">\n      <img src=\"https://raw.githubusercontent.com/jaredhanson/passport/master/sponsors/fusionauth.png\" width=\"275\">\n      <p>\n        <b>Auth. Built for Devs, by Devs</b>\n        <br>\n        Add login, registration, SSO, MFA, and a bazillion other features to your app in minutes. Integrates with any codebase and installs on any server, anywhere in the world.\n      </p>\n    </a>\n  </div>\n  <br>\n  <!-- Stytch -->\n  <div>\n    <a href=\"https://stytch.com?utm_source=oss-sponsorship&utm_medium=paid_sponsorship&utm_campaign=passportjs\">\n      <picture>\n        <source srcset=\"https://raw.githubusercontent.com/jaredhanson/passport/master/sponsors/stytch.png\" media=\"(prefers-color-scheme: light)\">\n        <source srcset=\"https://raw.githubusercontent.com/jaredhanson/passport/master/sponsors/stytch-dark.png\" media=\"(prefers-color-scheme: dark)\">\n        <img src=\"https://raw.githubusercontent.com/jaredhanson/passport/master/sponsors/stytch.png\" width=\"275\">\n      </picture>\n      <p>\n        <b>API-first AuthN, AuthZ, and Fraud Prevention</b>\n        <br>\n        The most powerful identity platform built for developers. Easily build and secure a modern auth flow with user & org management, multi-tenant SSO, MFA, RBAC, device fingerprinting, and more.\n      </p>\n    </a>\n  </div>\n</div>\n\n---\n\nStatus:\n[![Build](https://travis-ci.org/jaredhanson/passport.svg?branch=master)](https://travis-ci.org/jaredhanson/passport)\n[![Coverage](https://coveralls.io/repos/jaredhanson/passport/badge.svg?branch=master)](https://coveralls.io/r/jaredhanson/passport)\n[![Dependencies](https://david-dm.org/jaredhanson/passport.svg)](https://david-dm.org/jaredhanson/passport)\n\n\n## Install\n\n```\n$ npm install passport\n```\n\n## Usage\n\n#### Strategies\n\nPassport uses the concept of strategies to authenticate requests.  Strategies\ncan range from verifying username and password credentials, delegated\nauthentication using [OAuth](http://oauth.net/) (for example, via [Facebook](http://www.facebook.com/)\nor [Twitter](http://twitter.com/)), or federated authentication using [OpenID](http://openid.net/).\n\nBefore authenticating requests, the strategy (or strategies) used by an\napplication must be configured.\n\n```javascript\npassport.use(new LocalStrategy(\n  function(username, password, done) {\n    User.findOne({ username: username }, function (err, user) {\n      if (err) { return done(err); }\n      if (!user) { return done(null, false); }\n      if (!user.verifyPassword(password)) { return done(null, false); }\n      return done(null, user);\n    });\n  }\n));\n```\n\nThere are 480+ strategies. Find the ones you want at: [passportjs.org](http://passportjs.org)\n\n#### Sessions\n\nPassport will maintain persistent login sessions.  In order for persistent\nsessions to work, the authenticated user must be serialized to the session, and\ndeserialized when subsequent requests are made.\n\nPassport does not impose any restrictions on how your user records are stored.\nInstead, you provide functions to Passport which implements the necessary\nserialization and deserialization logic.  In a typical application, this will be\nas simple as serializing the user ID, and finding the user by ID when\ndeserializing.\n\n```javascript\npassport.serializeUser(function(user, done) {\n  done(null, user.id);\n});\n\npassport.deserializeUser(function(id, done) {\n  User.findById(id, function (err, user) {\n    done(err, user);\n  });\n});\n```\n\n#### Middleware\n\nTo use Passport in an [Express](http://expressjs.com/) or\n[Connect](http://senchalabs.github.com/connect/)-based application, configure it\nwith the required `passport.initialize()` middleware.  If your application uses\npersistent login sessions (recommended, but not required), `passport.session()`\nmiddleware must also be used.\n\n```javascript\nvar app = express();\napp.use(require('serve-static')(__dirname + '/../../public'));\napp.use(require('cookie-parser')());\napp.use(require('body-parser').urlencoded({ extended: true }));\napp.use(require('express-session')({ secret: 'keyboard cat', resave: true, saveUninitialized: true }));\napp.use(passport.initialize());\napp.use(passport.session());\n```\n\n#### Authenticate Requests\n\nPassport provides an `authenticate()` function, which is used as route\nmiddleware to authenticate requests.\n\n```javascript\napp.post('/login', \n  passport.authenticate('local', { failureRedirect: '/login' }),\n  function(req, res) {\n    res.redirect('/');\n  });\n```\n\n## Strategies\n\nPassport has a comprehensive set of **over 480** authentication strategies\ncovering social networking, enterprise integration, API services, and more.\n\n## Search all strategies\n\nThere is a **Strategy Search** at [passportjs.org](http://passportjs.org)\n\nThe following table lists commonly used strategies:\n\n|Strategy                                                       | Protocol                 |Developer                                       |\n|---------------------------------------------------------------|--------------------------|------------------------------------------------|\n|[Local](https://github.com/jaredhanson/passport-local)         | HTML form                |[Jared Hanson](https://github.com/jaredhanson)  |\n|[OpenID](https://github.com/jaredhanson/passport-openid)       | OpenID                   |[Jared Hanson](https://github.com/jaredhanson)  |\n|[BrowserID](https://github.com/jaredhanson/passport-browserid) | BrowserID                |[Jared Hanson](https://github.com/jaredhanson)  |\n|[Facebook](https://github.com/jaredhanson/passport-facebook)   | OAuth 2.0                |[Jared Hanson](https://github.com/jaredhanson)  |\n|[Google](https://github.com/jaredhanson/passport-google)       | OpenID                   |[Jared Hanson](https://github.com/jaredhanson)  |\n|[Google](https://github.com/jaredhanson/passport-google-oauth) | OAuth / OAuth 2.0        |[Jared Hanson](https://github.com/jaredhanson)  |\n|[Twitter](https://github.com/jaredhanson/passport-twitter)     | OAuth                    |[Jared Hanson](https://github.com/jaredhanson)  |\n|[Azure Active Directory](https://github.com/AzureAD/passport-azure-ad)     | OAuth 2.0 / OpenID / SAML  |[Azure](https://github.com/azuread)  |\n\n## Examples\n\n- For a complete, working example, refer to the [example](https://github.com/passport/express-4.x-local-example)\nthat uses [passport-local](https://github.com/jaredhanson/passport-local).\n- **Local Strategy**: Refer to the following tutorials for setting up user authentication via LocalStrategy (`passport-local`):\n    - Mongo\n      - Express v3x - [Tutorial](http://mherman.org/blog/2016/09/25/node-passport-and-postgres/#.V-govpMrJE5) / [working example](https://github.com/mjhea0/passport-local-knex)\n      - Express v4x - [Tutorial](http://mherman.org/blog/2015/01/31/local-authentication-with-passport-and-express-4/) / [working example](https://github.com/mjhea0/passport-local-express4)\n    - Postgres\n      - [Tutorial](http://mherman.org/blog/2015/01/31/local-authentication-with-passport-and-express-4/) / [working example](https://github.com/mjhea0/passport-local-express4)\n- **Social Authentication**: Refer to the following tutorials for setting up various social authentication strategies:\n    - Express v3x - [Tutorial](http://mherman.org/blog/2013/11/10/social-authentication-with-passport-dot-js/) / [working example](https://github.com/mjhea0/passport-examples)\n    - Express v4x - [Tutorial](http://mherman.org/blog/2015/09/26/social-authentication-in-node-dot-js-with-passport) / [working example](https://github.com/mjhea0/passport-social-auth)\n\n## Related Modules\n\n- [Locomotive](https://github.com/jaredhanson/locomotive) \u2014 Powerful MVC web framework\n- [OAuthorize](https://github.com/jaredhanson/oauthorize) \u2014 OAuth service provider toolkit\n- [OAuth2orize](https://github.com/jaredhanson/oauth2orize) \u2014 OAuth 2.0 authorization server toolkit\n- [connect-ensure-login](https://github.com/jaredhanson/connect-ensure-login)  \u2014 middleware to ensure login sessions\n\nThe [modules](https://github.com/jaredhanson/passport/wiki/Modules) page on the\n[wiki](https://github.com/jaredhanson/passport/wiki) lists other useful modules\nthat build upon or integrate with Passport.\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2011-2021 Jared Hanson <[https://www.jaredhanson.me/](https://www.jaredhanson.me/)>\n",
        "releases": []
    }
}