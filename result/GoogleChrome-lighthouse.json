{
    "https://api.github.com/repos/GoogleChrome/lighthouse": {
        "forks": 9422,
        "watchers": 28598,
        "stars": 28598,
        "languages": {
            "JavaScript": 4700182,
            "CSS": 90133,
            "TypeScript": 86479,
            "Shell": 46769,
            "HTML": 43092,
            "Handlebars": 1571,
            "Python": 1319
        },
        "commits": [
            "2025-01-14T23:10:29Z",
            "2025-01-07T18:21:20Z",
            "2025-01-07T17:22:49Z",
            "2025-01-06T19:45:10Z",
            "2025-01-06T16:55:06Z",
            "2024-12-12T23:50:15Z",
            "2024-12-12T22:26:01Z",
            "2024-12-12T22:23:00Z",
            "2024-12-12T22:22:40Z",
            "2024-12-12T22:22:26Z",
            "2024-12-12T00:56:14Z",
            "2024-12-12T00:14:07Z",
            "2024-12-04T04:53:39Z",
            "2024-12-03T23:42:25Z",
            "2024-12-03T23:21:19Z",
            "2024-12-03T19:08:01Z",
            "2024-12-02T19:25:01Z",
            "2024-12-02T17:57:13Z",
            "2024-11-26T19:01:30Z",
            "2024-11-14T22:11:31Z",
            "2024-11-14T20:21:26Z",
            "2024-11-14T02:11:00Z",
            "2024-11-13T18:55:12Z",
            "2024-11-13T00:11:11Z",
            "2024-11-12T20:52:38Z",
            "2024-11-05T18:36:36Z",
            "2024-11-05T02:21:34Z",
            "2024-11-04T22:20:05Z",
            "2024-11-04T19:54:43Z",
            "2024-10-29T22:21:11Z"
        ],
        "creation_date": "2016-03-08T01:03:11Z",
        "contributors": 30,
        "topics": [
            "audit",
            "best-practices",
            "chrome-devtools",
            "developer-tools",
            "performance-analysis",
            "performance-metrics",
            "pwa",
            "web"
        ],
        "subscribers": 600,
        "readme": "# Lighthouse  [![GitHub Actions Status Badge](https://github.com/GoogleChrome/lighthouse/workflows/CI/badge.svg)](https://github.com/GoogleChrome/lighthouse/actions/workflows/ci.yml) [![GitHub Actions Status Badge](https://github.com/GoogleChrome/lighthouse/workflows/unit/badge.svg)](https://github.com/GoogleChrome/lighthouse/actions/workflows/unit.yml) [![GitHub Actions Status Badge](https://github.com/GoogleChrome/lighthouse/workflows/smoke/badge.svg)](https://github.com/GoogleChrome/lighthouse/actions/workflows/smoke.yml) [![Coverage Status](https://codecov.io/gh/GoogleChrome/lighthouse/branch/main/graph/badge.svg)](https://codecov.io/gh/GoogleChrome/lighthouse) [![Build tracker for Lighthouse](https://img.shields.io/badge/buildtracker-ok-blue)](https://lh-build-tracker.herokuapp.com/) [![NPM lighthouse package](https://img.shields.io/npm/v/lighthouse.svg)](https://npmjs.org/package/lighthouse)\n\n> Lighthouse analyzes web apps and web pages, collecting modern performance metrics and insights on developer best practices.\n\n- Using Lighthouse\n  - [Using Lighthouse in Chrome DevTools](#using-lighthouse-in-chrome-devtools)\n  - [Using the Chrome extension](#using-the-chrome-extension)\n  - [Using the Node CLI](#using-the-node-cli)\n    * [CLI options](#cli-options)\n  - [Using the Node module](#using-the-node-module)\n  - [Viewing a report](#viewing-a-report)\n    * [Online Viewer](#online-viewer)\n  - [Docs & Recipes](#docs--recipes)\n  - [Developing Lighthouse](#develop)\n    * [Setup](#setup)\n    * [Run](#run)\n    * [Tests](#tests)\n    * [Docs](#docs)\n- Associated Products and Projects\n  - [Lighthouse Integrations in Web Perf services](#lighthouse-integrations-in-web-perf-services)\n  - [Lighthouse Integrations in non-Web Perf services](#lighthouse-integrations-in-non-web-perf-services)\n  - [Plugins](#plugins)\n  - [Related projects](#related-projects)\n- [FAQ](#faq)\n  * [How does Lighthouse work?](#how-does-lighthouse-work)\n  * [Can I configure the lighthouse run?](#can-i-configure-the-lighthouse-run)\n  * [How does Lighthouse use network throttling, and how can I make it better?](#how-does-lighthouse-use-network-throttling-and-how-can-i-make-it-better)\n  * [Are results sent to a remote server?](#are-results-sent-to-a-remote-server)\n  * [How do I get localized Lighthouse results?](#how-do-i-get-localized-lighthouse-results-via-the-cli)\n  * [How do I author custom audits to extend Lighthouse?](#how-do-i-author-custom-audits-to-extend-lighthouse)\n  * [How do I contribute?](#how-do-i-contribute)\n\n## Using Lighthouse in Chrome DevTools\n\nLighthouse is integrated directly into the Chrome DevTools, under the \"Lighthouse\" panel.\n\n**Installation**: install [Chrome](https://www.google.com/chrome/browser).\n\n**Run it**: open Chrome DevTools, select the Lighthouse panel, and hit \"Generate report\".\n\n<img width=\"550\" alt=\"Lighthouse integration in Chrome DevTools.\" src=\"https://user-images.githubusercontent.com/2766281/204185043-9c49abe5-baee-4b26-b5ce-ece410661213.png\">\n\n## Using the Chrome extension\n\nThe Chrome extension was available prior to Lighthouse being available in Chrome Developer Tools, and offers similar functionality.\n\n**Installation**: [install the extension](https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk) from the Chrome Web Store.\n\n**Run it**: follow the [extension quick-start guide](https://developers.google.com/web/tools/lighthouse/#extension).\n\n## Using the Node CLI\n\nThe Node CLI provides the most flexibility in how Lighthouse runs can be configured and reported. Users who want more advanced usage, or want to run Lighthouse in an automated fashion should use the Node CLI.\n\n> **Note**\n> Lighthouse requires Node 18 LTS (18.x) or later.\n\n**Installation**:\n\n```sh\nnpm install -g lighthouse\n# or use yarn:\n# yarn global add lighthouse\n```\n\n**Run it**: `lighthouse https://airhorner.com/`\n\nBy default, Lighthouse writes the report to an HTML file. You can control the output format by passing flags.\n\n### CLI options\n\n<!-- To update the help output:\n  node cli --help | pbcopy\n-->\n\n```\n$ lighthouse --help\n\nlighthouse <url> <options>\n\nLogging:\n  --verbose  Displays verbose logging  [boolean] [default: false]\n  --quiet    Displays no progress, debug logs, or errors  [boolean] [default: false]\n\nConfiguration:\n  --save-assets                  Save the trace contents & devtools logs to disk  [boolean] [default: false]\n  --list-all-audits              Prints a list of all available audits and exits  [boolean] [default: false]\n  --list-trace-categories        Prints a list of all required trace categories and exits  [boolean] [default: false]\n  --additional-trace-categories  Additional categories to capture with the trace (comma-delimited).  [string]\n  --config-path                  The path to the config JSON.\n                                 An example config file: core/config/lr-desktop-config.js  [string]\n  --preset                       Use a built-in configuration.\n                                 WARNING: If the --config-path flag is provided, this preset will be ignored.  [string] [choices: \"perf\", \"experimental\", \"desktop\"]\n  --chrome-flags                 Custom flags to pass to Chrome (space-delimited). For a full list of flags, see https://bit.ly/chrome-flags\n                                 Additionally, use the CHROME_PATH environment variable to use a specific Chrome binary. Requires Chromium version 66.0 or later. If omitted, any detected Chrome Canary or Chrome stable will be used.  [string] [default: \"\"]\n  --port                         The port to use for the debugging protocol. Use 0 for a random port  [number] [default: 0]\n  --hostname                     The hostname to use for the debugging protocol.  [string] [default: \"localhost\"]\n  --form-factor                  Determines how performance metrics are scored and if mobile-only audits are skipped. For desktop, --preset=desktop instead.  [string] [choices: \"mobile\", \"desktop\"]\n  --screenEmulation              Sets screen emulation parameters. See also --preset. Use --screenEmulation.disabled to disable. Otherwise set these 4 parameters individually: --screenEmulation.mobile --screenEmulation.width=360 --screenEmulation.height=640 --screenEmulation.deviceScaleFactor=2\n  --emulatedUserAgent            Sets useragent emulation  [string]\n  --max-wait-for-load            The timeout (in milliseconds) to wait before the page is considered done loading and the run should continue. WARNING: Very high values can lead to large traces and instability  [number]\n  --enable-error-reporting       Enables error reporting, overriding any saved preference. --no-enable-error-reporting will do the opposite. More: https://github.com/GoogleChrome/lighthouse/blob/main/docs/error-reporting.md  [boolean]\n  --gather-mode, -G              Collect artifacts from a connected browser and save to disk. (Artifacts folder path may optionally be provided). If audit-mode is not also enabled, the run will quit early.\n  --audit-mode, -A               Process saved artifacts from disk. (Artifacts folder path may be provided, otherwise defaults to ./latest-run/)\n  --only-audits                  Only run the specified audits  [array]\n  --only-categories              Only run the specified categories. Available categories: accessibility, best-practices, performance, seo  [array]\n  --skip-audits                  Run everything except these audits  [array]\n  --disable-full-page-screenshot Disables collection of the full page screenshot, which can be quite large  [boolean]\n\nOutput:\n  --output       Reporter for the results, supports multiple values. choices: \"json\", \"html\", \"csv\"  [array] [default: [\"html\"]]\n  --output-path  The file path to output the results. Use 'stdout' to write to stdout.\n                   If using JSON output, default is stdout.\n                   If using HTML or CSV output, default is a file in the working directory with a name based on the test URL and date.\n                   If using multiple outputs, --output-path is appended with the standard extension for each output type. \"reports/my-run\" -> \"reports/my-run.report.html\", \"reports/my-run.report.json\", etc.\n                   Example: --output-path=./lighthouse-results.html  [string]\n  --view         Open HTML report in your browser  [boolean] [default: false]\n\nOptions:\n  --version                            Show version number  [boolean]\n  --help                               Show help  [boolean]\n  --cli-flags-path                     The path to a JSON file that contains the desired CLI flags to apply. Flags specified at the command line will still override the file-based ones.\n  --locale                             The locale/language the report should be formatted in\n  --blocked-url-patterns               Block any network requests to the specified URL patterns  [array]\n  --disable-storage-reset              Disable clearing the browser cache and other storage APIs before a run  [boolean]\n  --throttling-method                  Controls throttling method  [string] [choices: \"devtools\", \"provided\", \"simulate\"]\n  --throttling\n  --throttling.rttMs                   Controls simulated network RTT (TCP layer)\n  --throttling.throughputKbps          Controls simulated network download throughput\n  --throttling.requestLatencyMs        Controls emulated network RTT (HTTP layer)\n  --throttling.downloadThroughputKbps  Controls emulated network download throughput\n  --throttling.uploadThroughputKbps    Controls emulated network upload throughput\n  --throttling.cpuSlowdownMultiplier   Controls simulated + emulated CPU throttling\n  --extra-headers                      Set extra HTTP Headers to pass with request\n  --precomputed-lantern-data-path      Path to the file where lantern simulation data should be read from, overwriting the lantern observed estimates for RTT and server latency.  [string]\n  --lantern-data-output-path           Path to the file where lantern simulation data should be written to, can be used in a future run with the `precomputed-lantern-data-path` flag.  [string]\n  --plugins                            Run the specified plugins  [array]\n  --channel  [string] [default: \"cli\"]\n  --chrome-ignore-default-flags  [boolean] [default: false]\n\nExamples:\n  lighthouse <url> --view                                                                          Opens the HTML report in a browser after the run completes\n  lighthouse <url> --config-path=./myconfig.js                                                     Runs Lighthouse with your own configuration: custom audits, report generation, etc.\n  lighthouse <url> --output=json --output-path=./report.json --save-assets                         Save trace, screenshots, and named JSON report.\n  lighthouse <url> --screenEmulation.disabled --throttling-method=provided --no-emulatedUserAgent  Disable device emulation and all throttling\n  lighthouse <url> --chrome-flags=\"--window-size=412,660\"                                          Launch Chrome with a specific window size\n  lighthouse <url> --quiet --chrome-flags=\"--headless\"                                             Launch Headless Chrome, turn off logging\n  lighthouse <url> --extra-headers \"{\\\"Cookie\\\":\\\"monster=blue\\\", \\\"x-men\\\":\\\"wolverine\\\"}\"        Stringify'd JSON HTTP Header key/value pairs to send in requests\n  lighthouse <url> --extra-headers=./path/to/file.json                                             Path to JSON file of HTTP Header key/value pairs to send in requests\n  lighthouse <url> --only-categories=performance,seo                                               Only run the specified categories. Available categories: accessibility, best-practices, performance, seo\n\nFor more information on Lighthouse, see https://developers.google.com/web/tools/lighthouse/.\n```\n\n##### Output Examples\n\n```sh\nlighthouse\n# saves `./<HOST>_<DATE>.report.html`\n\nlighthouse --output json\n# json output sent to stdout\n\nlighthouse --output html --output-path ./report.html\n# saves `./report.html`\n\n# NOTE: specifying an output path with multiple formats ignores your specified extension for *ALL* formats\nlighthouse --output json --output html --output-path ./myfile.json\n# saves `./myfile.report.json` and `./myfile.report.html`\n\nlighthouse --output json --output html\n# saves `./<HOST>_<DATE>.report.json` and `./<HOST>_<DATE>.report.html`\n\nlighthouse --output-path=~/mydir/foo.out --save-assets\n# saves `~/mydir/foo.report.html`\n# saves `~/mydir/foo-0.trace.json` and `~/mydir/foo-0.devtoolslog.json`\n\nlighthouse --output-path=./report.json --output json\n# saves `./report.json`\n```\n\n##### Lifecycle Examples\nYou can run a subset of Lighthouse's lifecycle if desired via the `--gather-mode` (`-G`) and  `--audit-mode` (`-A`) CLI flags.\n\n```sh\nlighthouse http://example.com -G\n# launches browser, collects artifacts, saves them to disk (in `./latest-run/`) and quits\n\nlighthouse http://example.com -A\n# skips browser interaction, loads artifacts from disk (in `./latest-run/`), runs audits on them, generates report\n\nlighthouse http://example.com -GA\n# Normal gather + audit run, but also saves collected artifacts to disk for subsequent -A runs.\n\n\n# You can optionally provide a custom folder destination to -G/-A/-GA. Without a value, the default will be `$PWD/latest-run`.\nlighthouse -GA=./gmailartifacts https://gmail.com\n```\n\n\n#### Notes on Error Reporting\n\nThe first time you run the CLI you will be prompted with a message asking you if Lighthouse can anonymously report runtime exceptions. The Lighthouse team uses this information to detect new bugs and avoid regressions. Opting out will not affect your ability to use Lighthouse in any way. [Learn more](https://github.com/GoogleChrome/lighthouse/blob/main/docs/error-reporting.md).\n\n## Using the Node module\nYou can also use Lighthouse programmatically with the Node module.\n\nRead [Using Lighthouse programmatically](./docs/readme.md#using-programmatically) for help getting started.\\\nRead [Lighthouse Configuration](./docs/configuration.md) to learn more about the configuration options available.\n\n## Viewing a report\n\nLighthouse can produce a report as JSON or HTML.\n\nHTML report:\n\n<img src=\"https://raw.githubusercontent.com/GoogleChrome/lighthouse/443ff2c8a297dfd2297dfaca86c4966a87c8574a/assets/example_audit.png\" alt=\"Lighthouse example audit\" width=\"500px\">\n\n### Online Viewer\n\nRunning Lighthouse with the `--output=json` flag generates a JSON dump of the run.\nYou can view this report online by visiting <https://googlechrome.github.io/lighthouse/viewer/>\nand dragging the file onto the app. You can also use the \"Export\" button from the\ntop of any Lighthouse HTML report and open the report in the\n[Lighthouse Viewer](https://googlechrome.github.io/lighthouse/viewer/).\n\nIn the Viewer, reports can be shared by clicking the share icon in the top\nright corner and signing in to GitHub.\n\n> **Note**: shared reports are stashed as a secret Gist in GitHub, under your account.\n\n## Docs & Recipes\n\nUseful documentation, examples, and recipes to get you started.\n\n**Docs**\n\n- [Dealing with variance](./docs/variability.md)\n- [Using Lighthouse programmatically](./docs/readme.md#using-programmatically)\n- [Testing a site with authentication](./docs/authenticated-pages.md)\n- [Developing Plugins](./docs/plugins.md)\n- [Making a New Audit](./docs/new-audits.md)\n- [Testing on a mobile device](./docs/readme.md#testing-on-a-mobile-device)\n- [Lighthouse Architecture](./docs/architecture.md)\n\n**Recipes**\n\n- [Plugin](./docs/recipes/lighthouse-plugin-example) - example Lighthouse plugin\n- [Custom Audit example](./docs/recipes/custom-audit) - extend Lighthouse, run your own audits\n\n**Videos**\n\nThe session from Google I/O 2018 covers the new performance engine, upcoming Lighthouse REST API, and using the Chrome UX report to evaluate real-user data.\n\n[![Watch the Lighthouse @ Google I/O 2018 session.](https://img.youtube.com/vi/UvK9zAsSM8Q/0.jpg)](https://www.youtube.com/watch?v=UvK9zAsSM8Q)\n\nThe session from Google I/O 2017 covers architecture, writing custom audits,\nGitHub/Travis/CI integration, headless Chrome, and more:\n\n[![Watch the Lighthouse @ Google I/O 2017 session.](https://img.youtube.com/vi/NoRYn6gOtVo/0.jpg)](https://www.youtube.com/watch?v=NoRYn6gOtVo)\n\n_Click the image to watch the video on YouTube._\n\n## Develop\n\nRead on for the basics of hacking on Lighthouse. Also, see [Contributing](./CONTRIBUTING.md)\nfor detailed information.\n\n### Setup\n\n```sh\n# yarn should be installed first\n\ngit clone https://github.com/GoogleChrome/lighthouse\n\ncd lighthouse\nyarn\nyarn build-all\n```\n\n### Run\n\n```sh\nnode cli http://example.com\n# append --chrome-flags=\"--no-sandbox --headless --disable-gpu\" if you run into problems connecting to Chrome\n```\n\n> **Getting started tip**: `node --inspect-brk cli http://example.com` to open up Chrome DevTools and step\nthrough the entire app. See [Debugging Node.js with Chrome\nDevTools](https://medium.com/@paul_irish/debugging-node-js-nightlies-with-chrome-devtools-7c4a1b95ae27#.59rma3ukm)\nfor more info.\n\n### Tests\n\n```sh\n# lint and test all files\nyarn test\n\n# run all unit tests\nyarn unit\n\n# run a given unit test (e.g. core/test/audits/byte-efficiency/uses-long-cache-ttl-test.js)\nyarn mocha uses-long-cache-ttl\n\n# watch for file changes and run tests\n#   Requires http://entrproject.org : brew install entr\nyarn watch\n\n## run linting, unit, and smoke tests separately\nyarn lint\nyarn unit\nyarn smoke\n\n## run tsc compiler\nyarn type-check\n```\n\n### Docs\n\nSome of our docs have tests that run only in CI by default. To modify our documentation, you'll need to run `yarn build-pack && yarn test-docs` locally to make sure they pass.\n\n**Additional Dependencies**\n- `brew install jq`\n\n## Lighthouse Integrations in Web Perf services\n\nThis section details services that have integrated Lighthouse data. If you're working on a cool project integrating Lighthouse and would like to be featured here, file an issue to this repo or tweet at us [@_____lighthouse](https://twitter.com/____lighthouse)!\n\n* **[Web Page Test](https://www.webpagetest.org)** \u2014 An [open source](https://github.com/WPO-Foundation/webpagetest) tool for measuring and analyzing the performance of web pages on real devices. Users can choose to produce a Lighthouse report alongside the analysis of WebPageTest results.\n\n* **[HTTPArchive](http://httparchive.org/)** - HTTPArchive tracks how the web is built by crawling 500k pages with Web Page Test, including Lighthouse results, and stores the information in BigQuery where it is [publicly available](https://discuss.httparchive.org/t/quickstart-guide-to-exploring-the-http-archive/682).\n\n* **[Calibre](https://calibreapp.com)** - Calibre is a comprehensive performance monitoring platform running on Lighthouse. See the performance impact of your work before it hits production with GitHub Pull Request Reviews. Track the impact of Third Party scripts. Automate your performance system with a developer-first Node.js API. Try Calibre with a free 15-day trial.\n\n* **[DebugBear](https://www.debugbear.com/)** - DebugBear is a website monitoring tool based on Lighthouse. See how your scores and metrics changed over time, with a focus on understanding what caused each change. DebugBear is a paid product with a free 30-day trial.\n\n* **[Treo](https://treo.sh)** - Treo is Lighthouse as a Service. It provides regression testing, geographical regions, custom networks, and integrations with GitHub & Slack. Treo is a paid product with plans for solo-developers and teams.\n\n* **[PageVitals](https://pagevitals.com)** - PageVitals combines Lighthouse, CrUX and field testing to monitor the performance of websites. See how your website performs over time and get alerted if it gets too slow. Drill down and find the real cause of any performance issue. PageVitals is a paid product with a free 14-day trial.\n\n* **[Screpy](https://screpy.com)** - Screpy is a web analysis tool that can analyze all pages of your websites in one dashboard and monitor them with your team. It's powered by Lighthouse and it also includes some different analysis tools (SERP, W3C, Uptime, etc). Screpy has free and paid plans.\n\n* **[Siteimprove Performance](https://siteimprove.com/en/performance/)** \u2014 Siteimprove Performance is a web Performance monitoring solution that enables a marketer, manager or decision maker to understand and optimize website load times. Get easy-to-use insights with a focus on quick and impactful wins. Siteimprove Performance is a paid product with a free 14-day trial.\n\n* **[SpeedCurve](https://speedcurve.com)** \u2014 SpeedCurve is a tool for continuously monitoring web performance across different browsers, devices, and regions. It can aggregate any metric including Lighthouse scores across multiple pages and sites, and allows you to set performance budgets with Slack or email alerts. SpeedCurve is a paid product with a free 30-day trial.\n\n* **[Foo](https://www.foo.software/lighthouse)** - Lighthouse-as-a-service offering free and premium plans. Provides monitoring and historical reporting of Lighthouse audits with CircleCI, GitHub, and other integrations. Features include Slack notifications, PR comment reporting and more.\n\n* **[Apdex](https://apdex.co)** - Apdex is a website performance service. The main features are historical Lighthouse report visualizations, mobile/desktop options, alerts, uptime monitoring, and more. There are flexible paid plans and a 30-day free trial.\n\n* **[Websu](https://websu.io)** - Websu is an open source project to provide Lighthouse-as-a-Service through a simple HTTP REST API. The main features are ability to host and deploy in your own environment and historical Lighthouse report summaries.\n\n* **[DTEKT.IO](https://dtekt.io)** - DTEKT is a website performance and uptime monitoring service. It uses lighthouse to provide visibility into the performance of websites from multiple locations on multiple devices. It offers three months free trial and paid plans.\n\n* **[SpeedVitals](https://speedvitals.com)** - SpeedVitals is a Lighthouse powered tool to measure web performance across multiple devices and locations. It has various features like Layout Shift Visualization, Waterfall Chart, Field Data and Resource Graphs. SpeedVitals offers both free and paid plans.\n\n* **[Lighthouse Metrics](https://lighthouse-metrics.com/)** - Lighthouse Metrics gives you global performance insights with a single test. You can also monitor your websites on a daily or hourly base. Lighthouse Metrics offers free global one-time tests and performance monitoring as a paid feature with a free 14-day trial.\n\n* **[Auditzy](https://auditzy.com)** - Auditzy\u2122 is a robust website auditing & monitoring tool which lets you analyze your web page(s) pre-user journey. Analyze the Competitor Health Metric, Core Web Vitals, and Technology. Compare your web pages with your competitors to understand where you are leading or lagging. Real-time notification with Slack. Have Seamless Collaboration with Multiple Teams. Automate your Audits hourly, daily, weekly, and so on. It has a free trial with pay as you go plans.\n\n* **[Lighthouse Metrics China](http://lighthousemetricschina.com)** - The first Lighthouse metrics tool specifically designed for China. Experience unparalleled website monitoring capabilities with Lighthouse. Gain insights into the fluctuations of your scores and metrics within the realm of the [Great Firewall of China](https://www.chinafirewalltest.co), enabling a comprehensive understanding of the factors influencing each change. Lighthouse Metrics China offers both free and paid plans.\n\n* **[DeploymentHawk](https://deploymenthawk.com)** - DeploymentHawk is an automated site auditing tool powered by Lighthouse. Effortlessly catch performance, accessibility, and SEO issues before they impact your users. DeploymentHawk is a paid product with a free 7-day trial.\n\n* **[Guardius](https://guardius.io)** - Guardius is a DevOps and DevSecOps SaaS platform that integrates Lighthouse to deliver automated web performance analysis. It not only provides metrics evaluation and automatic scanning but also enables performance comparisons across different periods and ongoing observation over time. Additionally, Guardius offers predefined and customized alerts tailored to your specific requirements. A free version of Guardius is available for users to explore its features.\n\n* **[Son\u0101](https://getsona.io)** - Powered by Lighthouse amongst others, Son\u0101 delivers in-depth insights into your website\u2019s health. Track changes over time, share reports, and receive actionable recommendations to improve performance, accessibility, SEO, best practices, and security. Son\u0101 is free during its beta period.\n\n## Lighthouse Integrations in non-Web Perf services\n\n* **[PageWatch](https://pagewatch.dev/)** \u2014 PageWatch is a tool to find problem pages on your website.  It provides insights into spelling errors, layout issues, slow pages (powered by Lighthouse) and more.  PageWatch is offered via free and paid plans.\n\n* **[Fluxguard](https://fluxguard.com/)** - Fluxguard provides website DOM change monitoring orchestrated with Google Puppeteer, and audited by Lighthouse. Fluxguard is a freemium product, with monthly monitoring of up to 75 pages for free.\n\n* **[Microlink](https://microlink.io)** \u2014 Microlink is a cloud browser as API. It offers Lighthouse reports on demand, making it easy to build any service on top. Similar functionality is available via the underlying open-source project named browserless.\n\n* **[Wattspeed](https://wattspeed.com/)** \u2014 Wattspeed is a free tool that generates snapshots - historical captures of your web pages that include Lighthouse scores, a list of technologies, W3C HTML validator results, DOM size, mixed content info, and more.\n\n## Plugins\n\n* **[lighthouse-plugin-field-performance](https://github.com/treosh/lighthouse-plugin-field-performance)** - a plugin that adds real-user performance metrics for the URL using the data from [Chrome UX Report](https://developers.google.com/web/tools/chrome-user-experience-report/).\n\n* **[lighthouse-plugin-publisher-ads](https://github.com/googleads/publisher-ads-lighthouse-plugin)** - a tool to improve ad speed and overall quality through a series of automated audits. At the moment, this is primarily targeted at sites using Google Ad Manager. This tool will aid in resolving discovered problems, providing a tool to be used to evaluate effectiveness of iterative changes while suggesting actionable feedback.\n\n* **[lighthouse-plugin-crux](https://github.com/dvelasquez/lighthouse-plugin-crux)** - a plugin that quickly gathers real-user-metrics data from the [Chrome UX Report API](https://developers.google.com/web/tools/chrome-user-experience-report/api/reference).\n\n## Related projects\n\nOther awesome open source projects that use Lighthouse.\n\n* **[auto-lighthouse](https://github.com/TGiles/auto-lighthouse)** - a CLI for crawling a domain and generating mobile and desktop reports for each page.\n* **[Exthouse](https://github.com/treosh/exthouse)** - Analyze the impact of a browser extension on web performance.\n* **[Gimbal](https://labs.moduscreate.com/gimbal-web-performance-audit-budgeting)** - An [open source (MIT licensed)](https://github.com/ModusCreateOrg/gimbal) tool used to measure, analyze, and budget aspects of a web application. Gimbal also integrates reports with GitHub pull requests.\n* **[Gradle Lighthouse Plugin](https://github.com/Cognifide/gradle-lighthouse-plugin)** - An open source Gradle plugin that runs Lighthouse tests on multiple URLs and asserts category score thresholds (useful in continuous integration).\n* **[lighthouse-badges](https://github.com/emazzotta/lighthouse-badges)** - Generate gh-badges (shields.io) based on Lighthouse performance.\n* **[lighthouse-batch](https://github.com/mikestead/lighthouse-batch)** - Run Lighthouse over a number of sites and generate a summary of their metrics/scores.\n* **[lighthouse-batch-parallel](https://github.com/Carr1005/lighthouse-batch-parallel)** - Run multiple Lighthouse runs in parallel to accelerate the data collecting process, get the result stream (csv, json, js object) in your own process (warning: performance results may be volatile).\n* **[lighthouse-check-action](https://github.com/foo-software/lighthouse-check-action)** - A GitHub Action to run Lighthouse in a workflow, featuring Slack notifications and report upload to S3.\n* **[lighthouse-check-orb](https://circleci.com/orbs/registry/orb/foo-software/lighthouse-check)** - A CircleCI Orb to run Lighthouse in a workflow, featuring Slack notifications and report upload to S3.\n* **[andreasonny83/lighthouse-ci](https://github.com/andreasonny83/lighthouse-ci)** - Run Lighthouse and assert scores satisfy your custom thresholds.\n* **[GoogleChrome/lighthouse-ci](https://github.com/GoogleChrome/lighthouse-ci)** - (**official**) Automate running Lighthouse for every commit, viewing the changes, and preventing regressions.\n* **[lighthouse-ci-action](https://github.com/treosh/lighthouse-ci-action)** - A GitHub Action that makes it easy to run Lighthouse in CI and keep your pages small using performance budgets.\n* **[lighthouse-gh-reporter](https://github.com/carlesnunez/lighthouse-gh-reporter)** - Run Lighthouse in CI and report back in a comment on your pull requests\n* **[lighthouse-jest-example](https://github.com/justinribeiro/lighthouse-jest-example)** - Gather performance metrics via Lighthouse and assert results with Jest; uses Puppeteer to start Chrome with network emulation settings defined by WebPageTest.\n* **[lighthouse-lambda](https://github.com/Otterseer/lighthouse-lambda)** - Run Lighthouse on AWS Lambda with prebuilt stable desktop Headless Chrome.\n* **[lighthouse-matchers](https://github.com/ackama/lighthouse-matchers)** - Provides RSpec matchers for executing and evaluating Google Chrome Lighthouse audit scores.\n* **[lighthouse-mocha-example](https://github.com/rishichawda/lighthouse-mocha-example)** - Run Lighthouse performance tests with Mocha and chrome-launcher.\n* **[lighthouse-monitor](https://github.com/verivox/lighthouse-monitor)** - Run Lighthouse against all your URLs. Send metrics to any backend you want, save all reports with automatic data retention, and compare any two results in a web UI.\n* **[lighthouse-persist](https://github.com/foo-software/lighthouse-persist)** - Run Lighthouse and upload HTML reports to an AWS S3 bucket.\n* **[lighthouse-viewer](https://github.com/dvelasquez/lighthouse-viewer/tree/main/packages/lighthouse-viewer)** - Render the Lighthouse JSON into a report, using the Lighthouse Report Renderer repackaged as UMD and ESM. Also available with React, Svelte and Vue wrappers.\n* **[lighthouse4u](https://github.com/godaddy/lighthouse4u)** - LH4U provides Google Lighthouse as a service, surfaced by both a friendly UI+API, and backed by Elastic Search for easy querying and visualization.\n* **[react-lighthouse-viewer](https://www.npmjs.com/package/react-lighthouse-viewer)** - Render a Lighthouse JSON report in a React Component.\n* **[site-audit-seo](https://github.com/viasite/site-audit-seo)** - CLI tool for SEO site audit, crawl site, lighthouse each page. Output to console and tables in csv, xlsx, json, web or Google Drive.\n* **[webpack-lighthouse-plugin](https://github.com/addyosmani/webpack-lighthouse-plugin)** - Run Lighthouse from a Webpack build.\n* **[cypress-audit](https://github.com/mfrachet/cypress-audit)** - Run Lighthouse and Pa11y audits directly in your E2E test suites.\n* **[laravel-lighthouse](https://github.com/adityadees/laravel-lighthouse)** - Google Lighthouse wrapper for laravel framework to run Google Lighthouse CLI with custom option and can automatically save result in your server directory.\n\n## FAQ\n\n### How does Lighthouse work?\n\nSee [Lighthouse Architecture](./docs/architecture.md).\n\n### Why is the performance score so low? It looks fine to me.\n\nLighthouse reports the performance metrics as they would be experienced by a typical mobile user on a 4G connection and a mid-tier ~$200 phone. Even if it loads quickly on your device and network, users in other environments will experience the site very differently.\n\nRead more in our [guide to throttling](./docs/throttling.md).\n\n### Why does the performance score change so much?\n\nLighthouse performance scores will change due to inherent variability in web and network technologies, even if there hasn't been a code change. Test in consistent environments, run Lighthouse multiple times, and beware of variability before drawing conclusions about a performance-impacting change.\n\nRead more in our [guide to reducing variability](./docs/variability.md).\n\n### Can I configure the lighthouse run?\n\nYes! Details in [Lighthouse configuration](./docs/configuration.md).\n\n### How does Lighthouse use network throttling, and how can I make it better?\n\nGood question. Network and CPU throttling are applied by default in a Lighthouse run. The network\nattempts to emulate slow 4G connectivity and the CPU is slowed down 4x from your machine's default speed. If you\nprefer to run Lighthouse without throttling, you'll have to use the CLI and disable it with the\n`--throttling.*` flags mentioned above.\n\nRead more in our [guide to network throttling](./docs/throttling.md).\n\n### Are results sent to a remote server?\n\nNope. Lighthouse runs locally, auditing a page using a local version of the Chrome browser installed on the\nmachine. Report results are never processed or beaconed to a remote server.\n\n### How do I get localized Lighthouse results via the CLI?\n\nStarting in Lighthouse 8.0, Lighthouse relies entirely on native `Intl` support and no longer uses an `Intl` polyfill. If you're using Node 14 or later, there should be no issue because Node is now [built with `full-icu` by default](https://nodejs.medium.com/node-js-12-to-lts-and-node-js-13-is-here-e28d6a4a2bd#9514).\n\nHowever, if you're using a `small-icu` Node build, you may see Lighthouse log messages about your locale not being available. To remedy this, you can manually install ICU data by using the [`full-icu`](https://www.npmjs.com/package/full-icu) module and the [`--icu-data-dir` node flag](https://nodejs.org/api/intl.html#intl_providing_icu_data_at_runtime) at launch.\n\n### How do I author custom audits to extend Lighthouse?\n\n> **Tip**: see [Lighthouse Architecture](./docs/architecture.md) for more information\non terminology and architecture.\n\nLighthouse can be extended to run custom audits and gatherers that you author.\nThis is great if you're already tracking performance metrics in your site and\nwant to surface those metrics within a Lighthouse report.\n\nIf you're interested in running your own custom audits, check out our\n[Custom Audit Example](./docs/recipes/custom-audit) over in recipes.\n\n### How do I contribute?\n\nWe'd love help writing audits, fixing bugs, and making the tool more useful!\nSee [Contributing](./CONTRIBUTING.md) to get started.\n\n---\n<p align=\"center\">\n  <img src=\"./assets/lighthouse-logo_512px.png\" alt=\"Lighthouse logo\" height=\"150\">\n  <br>\n  <b>Lighthouse</b>, \u02c8l\u012bt\u02cchous (n): a <s>tower or other structure</s> tool containing a beacon light\n  to warn or guide <s>ships at sea</s> developers.\n</p>\n",
        "releases": [
            {
                "name": "v12.3.0",
                "date": "2024-12-13T00:06:08Z"
            },
            {
                "name": "v12.2.3",
                "date": "2024-12-02T19:27:09Z"
            },
            {
                "name": "v12.2.2",
                "date": "2024-11-19T04:27:33Z"
            },
            {
                "name": "v12.2.1",
                "date": "2024-09-06T18:24:52Z"
            },
            {
                "name": "v12.2.0",
                "date": "2024-08-07T22:03:08Z"
            },
            {
                "name": "v12.1.0",
                "date": "2024-06-18T17:05:20Z"
            },
            {
                "name": "v12.0.0",
                "date": "2024-04-22T22:19:12Z"
            },
            {
                "name": "v11.7.1",
                "date": "2024-04-09T00:58:26Z"
            },
            {
                "name": "v11.7.0",
                "date": "2024-03-20T22:32:57Z"
            },
            {
                "name": "v11.6.0",
                "date": "2024-02-21T22:19:48Z"
            },
            {
                "name": "v11.5.0",
                "date": "2024-01-24T19:32:32Z"
            },
            {
                "name": "v11.4.0",
                "date": "2023-12-12T00:39:51Z"
            },
            {
                "name": "v11.3.0",
                "date": "2023-11-02T20:13:03Z"
            },
            {
                "name": "v11.2.0",
                "date": "2023-10-11T21:07:19Z"
            },
            {
                "name": "v11.1.0",
                "date": "2023-09-07T22:59:12Z"
            },
            {
                "name": "v11.0.0",
                "date": "2023-08-03T23:09:10Z"
            },
            {
                "name": "v10.4.0",
                "date": "2023-07-11T00:30:41Z"
            },
            {
                "name": "v10.3.0",
                "date": "2023-06-14T00:52:13Z"
            },
            {
                "name": "v10.2.0",
                "date": "2023-05-04T22:44:14Z"
            },
            {
                "name": "v10.1.0",
                "date": "2023-03-23T19:05:57Z"
            },
            {
                "name": "v10.0.2",
                "date": "2023-03-01T01:24:11Z"
            },
            {
                "name": "v10.0.1",
                "date": "2023-02-14T23:53:58Z"
            },
            {
                "name": "v10.0.0",
                "date": "2023-02-09T21:31:26Z"
            },
            {
                "name": "v9.6.8",
                "date": "2022-10-31T23:24:03Z"
            },
            {
                "name": "v9.6.7",
                "date": "2022-09-02T17:56:51Z"
            },
            {
                "name": "v9.6.6",
                "date": "2022-08-16T20:24:21Z"
            },
            {
                "name": "v9.6.5",
                "date": "2022-08-02T14:51:53Z"
            },
            {
                "name": "",
                "date": "2022-07-26T19:39:56Z"
            },
            {
                "name": "v9.6.3",
                "date": "2022-07-16T15:49:41Z"
            },
            {
                "name": "v9.6.2",
                "date": "2022-06-08T21:30:00Z"
            },
            {
                "name": "",
                "date": "2022-05-11T16:45:02Z"
            },
            {
                "name": "",
                "date": "2022-05-11T16:44:07Z"
            },
            {
                "name": "",
                "date": "2022-03-10T01:26:11Z"
            },
            {
                "name": "v9.4.0",
                "date": "2022-02-17T00:56:55Z"
            },
            {
                "name": "v9.3.1",
                "date": "2022-01-31T22:46:17Z"
            },
            {
                "name": "",
                "date": "2022-01-31T17:11:01Z"
            },
            {
                "name": "v9.2.0",
                "date": "2021-12-16T20:24:01Z"
            },
            {
                "name": "",
                "date": "2021-11-25T00:11:09Z"
            },
            {
                "name": "",
                "date": "2021-11-16T00:01:22Z"
            },
            {
                "name": "",
                "date": "2021-10-13T19:50:13Z"
            },
            {
                "name": "v8.5.1",
                "date": "2021-09-22T20:37:32Z"
            },
            {
                "name": "v8.5.0",
                "date": "2021-09-22T01:52:21Z"
            },
            {
                "name": "",
                "date": "2021-09-08T16:46:36Z"
            },
            {
                "name": "v8.3.0",
                "date": "2021-08-10T23:19:41Z"
            },
            {
                "name": "",
                "date": "2021-08-04T00:38:57Z"
            },
            {
                "name": "",
                "date": "2021-07-14T00:45:23Z"
            },
            {
                "name": "v8.0.0",
                "date": "2021-06-02T18:03:54Z"
            },
            {
                "name": "",
                "date": "2021-05-18T07:34:59Z"
            },
            {
                "name": "v7.4.0",
                "date": "2021-04-27T21:35:54Z"
            },
            {
                "name": "",
                "date": "2021-03-19T00:46:40Z"
            },
            {
                "name": "",
                "date": "2021-02-25T00:53:10Z"
            },
            {
                "name": "",
                "date": "2021-02-12T23:49:47Z"
            },
            {
                "name": "v7.0.1",
                "date": "2021-01-26T22:00:37Z"
            },
            {
                "name": "v7.0.0",
                "date": "2020-12-18T00:12:27Z"
            },
            {
                "name": "",
                "date": "2020-12-01T15:15:40Z"
            },
            {
                "name": "",
                "date": "2020-10-02T20:40:06Z"
            },
            {
                "name": "v6.4.0",
                "date": "2020-10-01T19:00:32Z"
            },
            {
                "name": "",
                "date": "2020-08-27T03:42:10Z"
            },
            {
                "name": "",
                "date": "2020-08-06T21:33:27Z"
            },
            {
                "name": "",
                "date": "2020-07-07T19:11:49Z"
            },
            {
                "name": "",
                "date": "2020-06-25T20:41:14Z"
            },
            {
                "name": "v6.0.0",
                "date": "2020-05-19T14:58:08Z"
            },
            {
                "name": "6.0.0-beta.0 (2020-03-11)",
                "date": "2020-03-16T20:46:15Z"
            },
            {
                "name": "",
                "date": "2019-10-17T21:56:17Z"
            },
            {
                "name": "v5.5.0",
                "date": "2019-10-02T17:53:05Z"
            },
            {
                "name": "v5.4.0",
                "date": "2019-09-19T02:59:42Z"
            },
            {
                "name": "v5.3.0",
                "date": "2019-09-16T23:12:14Z"
            },
            {
                "name": "v5.2.0",
                "date": "2019-07-24T21:27:24Z"
            },
            {
                "name": "",
                "date": "2019-05-31T01:29:40Z"
            },
            {
                "name": "",
                "date": "2019-05-08T01:50:24Z"
            },
            {
                "name": "",
                "date": "2019-05-02T18:45:40Z"
            },
            {
                "name": "",
                "date": "2019-04-09T03:45:45Z"
            },
            {
                "name": "",
                "date": "2019-03-14T16:52:07Z"
            },
            {
                "name": "4.1.0 (2019-01-28)",
                "date": "2019-01-28T20:49:12Z"
            },
            {
                "name": "4.0.0 (2019-01-16)",
                "date": "2019-01-16T22:05:44Z"
            },
            {
                "name": "4.0.0-beta (2018-11-29)",
                "date": "2018-12-11T22:20:24Z"
            },
            {
                "name": "v4.0.0-alpha.2-3.2.1",
                "date": "2018-11-16T00:08:41Z"
            },
            {
                "name": "4.0.0-alpha.1 (2018-11-15)",
                "date": "2018-11-16T00:06:25Z"
            },
            {
                "name": "4.0.0-alpha.0 (2018-10-31)",
                "date": "2018-11-01T19:47:57Z"
            },
            {
                "name": "3.2.1 (2018-10-01)",
                "date": "2018-10-01T17:46:53Z"
            },
            {
                "name": "3.2.0 (2018-09-26)",
                "date": "2018-09-27T01:34:31Z"
            },
            {
                "name": "",
                "date": "2018-09-07T18:14:37Z"
            },
            {
                "name": "v3.1.0",
                "date": "2018-09-06T22:42:55Z"
            },
            {
                "name": "v3.0.3",
                "date": "2018-07-18T00:07:06Z"
            },
            {
                "name": "v3.0.2",
                "date": "2018-07-11T20:46:15Z"
            },
            {
                "name": "v3.0.0",
                "date": "2018-07-11T20:46:07Z"
            },
            {
                "name": "2.9.3",
                "date": "2018-03-22T18:32:28Z"
            },
            {
                "name": "2.9.2",
                "date": "2018-03-15T21:54:20Z"
            },
            {
                "name": "2.9.1",
                "date": "2018-02-12T23:35:42Z"
            },
            {
                "name": "2.9.0",
                "date": "2018-02-08T02:41:15Z"
            },
            {
                "name": "2.8.0",
                "date": "2018-02-08T02:40:45Z"
            },
            {
                "name": "2.7.0",
                "date": "2017-12-15T00:22:31Z"
            },
            {
                "name": "2.6.0",
                "date": "2017-11-18T02:00:59Z"
            },
            {
                "name": "2.5.0",
                "date": "2017-11-18T00:29:33Z"
            },
            {
                "name": "2.4.0",
                "date": "2017-08-15T00:04:52Z"
            },
            {
                "name": "2.2.1",
                "date": "2017-06-30T23:00:47Z"
            },
            {
                "name": "",
                "date": "2017-08-05T00:49:59Z"
            },
            {
                "name": "1.6.5",
                "date": "2017-04-22T19:13:29Z"
            },
            {
                "name": "1.6.0",
                "date": "2017-03-04T02:16:28Z"
            },
            {
                "name": "1.5.2",
                "date": "2017-02-15T21:26:07Z"
            },
            {
                "name": "1.5.1",
                "date": "2017-02-10T21:23:02Z"
            },
            {
                "name": "1.5.0",
                "date": "2017-02-10T08:22:43Z"
            },
            {
                "name": "1.4.1",
                "date": "2017-01-05T03:10:49Z"
            },
            {
                "name": "1.4.0",
                "date": "2017-01-05T00:47:42Z"
            },
            {
                "name": "1.3.2",
                "date": "2016-12-23T20:30:49Z"
            },
            {
                "name": "1.3.1",
                "date": "2016-12-23T20:28:19Z"
            },
            {
                "name": "1.3.0",
                "date": "2016-12-20T00:51:57Z"
            },
            {
                "name": "1.2.2",
                "date": "2016-11-30T00:22:36Z"
            },
            {
                "name": "1.2.1",
                "date": "2016-11-23T02:38:28Z"
            },
            {
                "name": "1.2.0",
                "date": "2016-11-17T22:48:39Z"
            },
            {
                "name": "1.1.7",
                "date": "2016-11-01T00:01:20Z"
            },
            {
                "name": "1.1.5",
                "date": "2016-10-10T22:50:40Z"
            },
            {
                "name": "1.1.4",
                "date": "2016-09-19T21:54:56Z"
            },
            {
                "name": "1.1.3",
                "date": "2016-09-06T23:51:04Z"
            },
            {
                "name": "1.1.2",
                "date": "2016-08-06T06:06:37Z"
            },
            {
                "name": "1.1.1",
                "date": "2016-08-06T06:06:23Z"
            }
        ]
    }
}