{
    "https://api.github.com/repos/redis/redis": {
        "forks": 23876,
        "watchers": 67765,
        "stars": 67765,
        "languages": {
            "C": 6937367,
            "Tcl": 2354158,
            "Python": 40222,
            "Makefile": 26062,
            "Shell": 23597,
            "Ruby": 23260,
            "C++": 5987,
            "Smarty": 1047,
            "JavaScript": 953
        },
        "commits": [
            "2025-01-20T08:08:19Z",
            "2025-01-16T06:40:19Z",
            "2025-01-14T09:30:18Z",
            "2025-01-14T07:51:05Z",
            "2024-12-15T19:41:45Z",
            "2024-12-15T09:27:48Z",
            "2025-01-13T12:09:52Z",
            "2025-01-13T07:40:36Z",
            "2025-01-08T08:12:52Z",
            "2025-01-08T01:57:23Z",
            "2025-01-07T07:35:47Z",
            "2025-01-06T07:59:02Z",
            "2024-12-31T13:41:10Z",
            "2024-12-26T04:51:44Z",
            "2024-12-26T04:37:23Z",
            "2024-12-25T08:03:22Z",
            "2024-12-23T06:16:40Z",
            "2024-12-22T12:10:07Z",
            "2024-12-20T01:39:14Z",
            "2024-12-18T06:41:04Z",
            "2024-12-12T17:41:08Z",
            "2024-12-10T07:16:30Z",
            "2024-12-05T09:14:52Z",
            "2024-12-04T10:04:37Z",
            "2024-12-04T09:16:14Z",
            "2024-12-03T06:26:19Z",
            "2024-11-28T16:33:58Z",
            "2024-11-28T13:59:43Z",
            "2024-11-26T08:11:01Z",
            "2024-11-22T12:29:17Z"
        ],
        "creation_date": "2009-03-21T22:32:25Z",
        "contributors": 30,
        "topics": [
            "cache",
            "database",
            "key-value",
            "message-broker",
            "nosql",
            "redis"
        ],
        "subscribers": 2533,
        "readme": "This README is just a fast *quick start* document. You can find more detailed documentation at [redis.io](https://redis.io).\n\nWhat is Redis?\n---\n\nRedis is often referred to as a *data structures* server. What this means is that Redis provides access to mutable data structures via a set of commands, which are sent using a *server-client* model with TCP sockets and a simple protocol. So different processes can query and modify the same data structures in a shared way.\n\nData structures implemented into Redis have a few special properties:\n\n* Redis cares to store them on disk, even if they are always served and modified into the server memory. This means that Redis is fast, but that it is also non-volatile.\n* The implementation of data structures emphasizes memory efficiency, so data structures inside Redis will likely use less memory compared to the same data structure modelled using a high-level programming language.\n* Redis offers a number of features that are natural to find in a database, like replication, tunable levels of durability, clustering, and high availability.\n\nAnother good example is to think of Redis as a more complex version of memcached, where the operations are not just SETs and GETs, but operations that work with complex data types like Lists, Sets, ordered data structures, and so forth.\n\nIf you want to know more, this is a list of selected starting points:\n\n* Introduction to Redis data types. https://redis.io/docs/latest/develop/data-types/\n\n* The full list of Redis commands. https://redis.io/commands\n* There is much more inside the official Redis documentation. https://redis.io/documentation\n\nWhat is Redis Community Edition?\n---\n\nRedis OSS was renamed Redis Community Edition (CE) with the v7.4 release.\n\nRedis Ltd. also offers [Redis Software](https://redis.io/enterprise/), a self-managed software with additional compliance, reliability, and resiliency for enterprise scaling,\nand [Redis Cloud](https://redis.io/cloud/), a fully managed service integrated with Google Cloud, Azure, and AWS for production-ready apps.\n\nRead more about the differences between Redis Community Edition and Redis [here](https://redis.io/comparisons/oss-vs-enterprise/).\n\nBuilding Redis\n---\n\nRedis can be compiled and used on Linux, OSX, OpenBSD, NetBSD, FreeBSD.\nWe support big endian and little endian architectures, and both 32 bit\nand 64 bit systems.\n\nIt may compile on Solaris derived systems (for instance SmartOS) but our\nsupport for this platform is *best effort* and Redis is not guaranteed to\nwork as well as in Linux, OSX, and \\*BSD.\n\nIt is as simple as:\n\n    % make\n\nTo build with TLS support, you'll need OpenSSL development libraries (e.g.\nlibssl-dev on Debian/Ubuntu) and run:\n\n    % make BUILD_TLS=yes\n\nTo build with systemd support, you'll need systemd development libraries (such \nas libsystemd-dev on Debian/Ubuntu or systemd-devel on CentOS) and run:\n\n    % make USE_SYSTEMD=yes\n\nTo append a suffix to Redis program names, use:\n\n    % make PROG_SUFFIX=\"-alt\"\n\nYou can build a 32 bit Redis binary using:\n\n    % make 32bit\n\nAfter building Redis, it is a good idea to test it using:\n\n    % make test\n\nIf TLS is built, running the tests with TLS enabled (you will need `tcl-tls`\ninstalled):\n\n    % ./utils/gen-test-certs.sh\n    % ./runtest --tls\n\n\nFixing build problems with dependencies or cached build options\n---\n\nRedis has some dependencies which are included in the `deps` directory.\n`make` does not automatically rebuild dependencies even if something in\nthe source code of dependencies changes.\n\nWhen you update the source code with `git pull` or when code inside the\ndependencies tree is modified in any other way, make sure to use the following\ncommand in order to really clean everything and rebuild from scratch:\n\n    % make distclean\n\nThis will clean: jemalloc, lua, hiredis, linenoise and other dependencies.\n\nAlso if you force certain build options like 32bit target, no C compiler\noptimizations (for debugging purposes), and other similar build time options,\nthose options are cached indefinitely until you issue a `make distclean`\ncommand.\n\nFixing problems building 32 bit binaries\n---\n\nIf after building Redis with a 32 bit target you need to rebuild it\nwith a 64 bit target, or the other way around, you need to perform a\n`make distclean` in the root directory of the Redis distribution.\n\nIn case of build errors when trying to build a 32 bit binary of Redis, try\nthe following steps:\n\n* Install the package libc6-dev-i386 (also try g++-multilib).\n* Try using the following command line instead of `make 32bit`:\n  `make CFLAGS=\"-m32 -march=native\" LDFLAGS=\"-m32\"`\n\nAllocator\n---\n\nSelecting a non-default memory allocator when building Redis is done by setting\nthe `MALLOC` environment variable. Redis is compiled and linked against libc\nmalloc by default, with the exception of jemalloc being the default on Linux\nsystems. This default was picked because jemalloc has proven to have fewer\nfragmentation problems than libc malloc.\n\nTo force compiling against libc malloc, use:\n\n    % make MALLOC=libc\n\nTo compile against jemalloc on Mac OS X systems, use:\n\n    % make MALLOC=jemalloc\n\nMonotonic clock\n---\n\nBy default, Redis will build using the POSIX clock_gettime function as the\nmonotonic clock source.  On most modern systems, the internal processor clock\ncan be used to improve performance.  Cautions can be found here: \n    http://oliveryang.net/2015/09/pitfalls-of-TSC-usage/\n\nTo build with support for the processor's internal instruction clock, use:\n\n    % make CFLAGS=\"-DUSE_PROCESSOR_CLOCK\"\n\nVerbose build\n---\n\nRedis will build with a user-friendly colorized output by default.\nIf you want to see a more verbose output, use the following:\n\n    % make V=1\n\nRunning Redis\n---\n\nTo run Redis with the default configuration, just type:\n\n    % cd src\n    % ./redis-server\n\nIf you want to provide your redis.conf, you have to run it using an additional\nparameter (the path of the configuration file):\n\n    % cd src\n    % ./redis-server /path/to/redis.conf\n\nIt is possible to alter the Redis configuration by passing parameters directly\nas options using the command line. Examples:\n\n    % ./redis-server --port 9999 --replicaof 127.0.0.1 6379\n    % ./redis-server /etc/redis/6379.conf --loglevel debug\n\nAll the options in redis.conf are also supported as options using the command\nline, with exactly the same name.\n\nRunning Redis with TLS\n---\n\nPlease consult the [TLS.md](TLS.md) file for more information on\nhow to use Redis with TLS.\n\nPlaying with Redis\n---\n\nYou can use redis-cli to play with Redis. Start a redis-server instance,\nthen in another terminal try the following:\n\n    % cd src\n    % ./redis-cli\n    redis> ping\n    PONG\n    redis> set foo bar\n    OK\n    redis> get foo\n    \"bar\"\n    redis> incr mycounter\n    (integer) 1\n    redis> incr mycounter\n    (integer) 2\n    redis>\n\nYou can find the list of all the available commands at https://redis.io/commands.\n\nInstalling Redis\n---\n\nIn order to install Redis binaries into /usr/local/bin, just use:\n\n    % make install\n\nYou can use `make PREFIX=/some/other/directory install` if you wish to use a\ndifferent destination.\n\n`make install` will just install binaries in your system, but will not configure\ninit scripts and configuration files in the appropriate place. This is not\nneeded if you just want to play a bit with Redis, but if you are installing\nit the proper way for a production system, we have a script that does this\nfor Ubuntu and Debian systems:\n\n    % cd utils\n    % ./install_server.sh\n\n_Note_: `install_server.sh` will not work on Mac OSX; it is built for Linux only.\n\nThe script will ask you a few questions and will setup everything you need\nto run Redis properly as a background daemon that will start again on\nsystem reboots.\n\nYou'll be able to stop and start Redis using the script named\n`/etc/init.d/redis_<portnumber>`, for instance `/etc/init.d/redis_6379`.\n\nCode contributions\n---\n\nBy contributing code to the Redis project in any form, including sending a pull request via GitHub,\na code fragment or patch via private email or public discussion groups, you agree to release your\ncode under the terms of the [Redis Software Grant and Contributor License Agreement][1]. Redis software\ncontains contributions to the original Redis core project, which are owned by their contributors and\nlicensed under the 3BSD license. Any copy of that license in this repository applies only to those\ncontributions. Redis releases all Redis Community Edition versions from 7.4.x and thereafter under the\nRSALv2/SSPL dual-license as described in the [LICENSE.txt][2] file included in the Redis Community Edition source distribution.\n\nPlease see the [CONTRIBUTING.md][1] file in this source distribution for more information. For\nsecurity bugs and vulnerabilities, please see [SECURITY.md][3].\n\n[1]: https://github.com/redis/redis/blob/unstable/CONTRIBUTING.md\n[2]: https://github.com/redis/redis/blob/unstable/LICENSE.txt\n[3]: https://github.com/redis/redis/blob/unstable/SECURITY.md\n\nRedis Trademarks\n---\n\nThe purpose of a trademark is to identify the goods and services of a person or company without\ncausing confusion. As the registered owner of its name and logo, Redis accepts certain limited uses\nof its trademarks but it has requirements that must be followed as described in its Trademark\nGuidelines available at: https://redis.com/legal/trademark-guidelines/.\n\nRedis internals\n===\n\nIf you are reading this README you are likely in front of a GitHub page\nor you just untarred the Redis distribution tar ball. In both the cases\nyou are basically one step away from the source code, so here we explain\nthe Redis source code layout, what is in each file as a general idea, the\nmost important functions and structures inside the Redis server and so forth.\nWe keep all the discussion at a high level without digging into the details\nsince this document would be huge otherwise and our code base changes\ncontinuously, but a general idea should be a good starting point to\nunderstand more. Moreover most of the code is heavily commented and easy\nto follow.\n\nSource code layout\n---\n\nThe Redis root directory just contains this README, the Makefile which\ncalls the real Makefile inside the `src` directory and an example\nconfiguration for Redis and Redis Sentinel. You can find a few shell\nscripts that are used in order to execute the Redis, Redis Cluster and\nRedis Sentinel unit tests, which are implemented inside the `tests`\ndirectory.\n\nInside the root are the following important directories:\n\n* `src`: contains the Redis implementation, written in C.\n* `tests`: contains the unit tests, implemented in Tcl.\n* `deps`: contains libraries Redis uses. Everything needed to compile Redis is inside this directory; your system just needs to provide `libc`, a POSIX compatible interface and a C compiler. Notably `deps` contains a copy of `jemalloc`, which is the default allocator of Redis under Linux. Note that under `deps` there are also things which started with the Redis project, but for which the main repository is not `redis/redis`.\n\nThere are a few more directories but they are not very important for our goals\nhere. We'll focus mostly on `src`, where the Redis implementation is contained,\nexploring what there is inside each file. The order in which files are\nexposed is the logical one to follow in order to disclose different layers\nof complexity incrementally.\n\nNote: lately Redis was refactored quite a bit. Function names and file\nnames have been changed, so you may find that this documentation reflects the\n`unstable` branch more closely. For instance, in Redis 3.0 the `server.c`\nand `server.h` files were named `redis.c` and `redis.h`. However the overall\nstructure is the same. Keep in mind that all the new developments and pull\nrequests should be performed against the `unstable` branch.\n\nserver.h\n---\n\nThe simplest way to understand how a program works is to understand the\ndata structures it uses. So we'll start from the main header file of\nRedis, which is `server.h`.\n\nAll the server configuration and in general all the shared state is\ndefined in a global structure called `server`, of type `struct redisServer`.\nA few important fields in this structure are:\n\n* `server.db` is an array of Redis databases, where data is stored.\n* `server.commands` is the command table.\n* `server.clients` is a linked list of clients connected to the server.\n* `server.master` is a special client, the master, if the instance is a replica.\n\nThere are tons of other fields. Most fields are commented directly inside\nthe structure definition.\n\nAnother important Redis data structure is the one defining a client.\nIn the past it was called `redisClient`, now just `client`. The structure\nhas many fields, here we'll just show the main ones:\n```c\nstruct client {\n    int fd;\n    sds querybuf;\n    int argc;\n    robj **argv;\n    redisDb *db;\n    int flags;\n    list *reply;\n    // ... many other fields ...\n    char buf[PROTO_REPLY_CHUNK_BYTES];\n}\n```\nThe client structure defines a *connected client*:\n\n* The `fd` field is the client socket file descriptor.\n* `argc` and `argv` are populated with the command the client is executing, so that functions implementing a given Redis command can read the arguments.\n* `querybuf` accumulates the requests from the client, which are parsed by the Redis server according to the Redis protocol and executed by calling the implementations of the commands the client is executing.\n* `reply` and `buf` are dynamic and static buffers that accumulate the replies the server sends to the client. These buffers are incrementally written to the socket as soon as the file descriptor is writable.\n\nAs you can see in the client structure above, arguments in a command\nare described as `robj` structures. The following is the full `robj`\nstructure, which defines a *Redis object*:\n\n```c\nstruct redisObject {\n    unsigned type:4;\n    unsigned encoding:4;\n    unsigned lru:LRU_BITS; /* LRU time (relative to global lru_clock) or\n                            * LFU data (least significant 8 bits frequency\n                            * and most significant 16 bits access time). */\n    int refcount;\n    void *ptr;\n};\n```\n\nBasically this structure can represent all the basic Redis data types like\nstrings, lists, sets, sorted sets and so forth. The interesting thing is that\nit has a `type` field, so that it is possible to know what type a given\nobject has, and a `refcount`, so that the same object can be referenced\nin multiple places without allocating it multiple times. Finally the `ptr`\nfield points to the actual representation of the object, which might vary\neven for the same type, depending on the `encoding` used.\n\nRedis objects are used extensively in the Redis internals, however in order\nto avoid the overhead of indirect accesses, recently in many places\nwe just use plain dynamic strings not wrapped inside a Redis object.\n\nserver.c\n---\n\nThis is the entry point of the Redis server, where the `main()` function\nis defined. The following are the most important steps in order to startup\nthe Redis server.\n\n* `initServerConfig()` sets up the default values of the `server` structure.\n* `initServer()` allocates the data structures needed to operate, setup the listening socket, and so forth.\n* `aeMain()` starts the event loop which listens for new connections.\n\nThere are two special functions called periodically by the event loop:\n\n1. `serverCron()` is called periodically (according to `server.hz` frequency), and performs tasks that must be performed from time to time, like checking for timed out clients.\n2. `beforeSleep()` is called every time the event loop fired, Redis served a few requests, and is returning back into the event loop.\n\nInside server.c you can find code that handles other vital things of the Redis server:\n\n* `call()` is used in order to call a given command in the context of a given client.\n* `activeExpireCycle()` handles eviction of keys with a time to live set via the `EXPIRE` command.\n* `performEvictions()` is called when a new write command should be performed but Redis is out of memory according to the `maxmemory` directive.\n* The global variable `redisCommandTable` defines all the Redis commands, specifying the name of the command, the function implementing the command, the number of arguments required, and other properties of each command.\n\ncommands.c\n---\nThis file is auto generated by utils/generate-command-code.py, the content is based on the JSON files in the src/commands folder.\nThese are meant to be the single source of truth about the Redis commands, and all the metadata about them.\nThese JSON files are not meant to be used by anyone directly, instead that metadata can be obtained via the `COMMAND` command.\n\nnetworking.c\n---\n\nThis file defines all the I/O functions with clients, masters and replicas\n(which in Redis are just special clients):\n\n* `createClient()` allocates and initializes a new client.\n* The `addReply*()` family of functions are used by command implementations in order to append data to the client structure, that will be transmitted to the client as a reply for a given command executed.\n* `writeToClient()` transmits the data pending in the output buffers to the client and is called by the *writable event handler* `sendReplyToClient()`.\n* `readQueryFromClient()` is the *readable event handler* and accumulates data read from the client into the query buffer.\n* `processInputBuffer()` is the entry point in order to parse the client query buffer according to the Redis protocol. Once commands are ready to be processed, it calls `processCommand()` which is defined inside `server.c` in order to actually execute the command.\n* `freeClient()` deallocates, disconnects and removes a client.\n\naof.c and rdb.c\n---\n\nAs you can guess from the names, these files implement the RDB and AOF\npersistence for Redis. Redis uses a persistence model based on the `fork()`\nsystem call in order to create a process with the same (shared) memory\ncontent of the main Redis process. This secondary process dumps the content\nof the memory on disk. This is used by `rdb.c` to create the snapshots\non disk and by `aof.c` in order to perform the AOF rewrite when the\nappend only file gets too big.\n\nThe implementation inside `aof.c` has additional functions in order to\nimplement an API that allows commands to append new commands into the AOF\nfile as clients execute them.\n\nThe `call()` function defined inside `server.c` is responsible for calling\nthe functions that in turn will write the commands into the AOF.\n\ndb.c\n---\n\nCertain Redis commands operate on specific data types; others are general.\nExamples of generic commands are `DEL` and `EXPIRE`. They operate on keys\nand not on their values specifically. All those generic commands are\ndefined inside `db.c`.\n\nMoreover `db.c` implements an API in order to perform certain operations\non the Redis dataset without directly accessing the internal data structures.\n\nThe most important functions inside `db.c` which are used in many command\nimplementations are the following:\n\n* `lookupKeyRead()` and `lookupKeyWrite()` are used in order to get a pointer to the value associated to a given key, or `NULL` if the key does not exist.\n* `dbAdd()` and its higher level counterpart `setKey()` create a new key in a Redis database.\n* `dbDelete()` removes a key and its associated value.\n* `emptyData()` removes an entire single database or all the databases defined.\n\nThe rest of the file implements the generic commands exposed to the client.\n\nobject.c\n---\n\nThe `robj` structure defining Redis objects was already described. Inside\n`object.c` there are all the functions that operate with Redis objects at\na basic level, like functions to allocate new objects, handle the reference\ncounting and so forth. Notable functions inside this file:\n\n* `incrRefCount()` and `decrRefCount()` are used in order to increment or decrement an object reference count. When it drops to 0 the object is finally freed.\n* `createObject()` allocates a new object. There are also specialized functions to allocate string objects having a specific content, like `createStringObjectFromLongLong()` and similar functions.\n\nThis file also implements the `OBJECT` command.\n\nreplication.c\n---\n\nThis is one of the most complex files inside Redis, it is recommended to\napproach it only after getting a bit familiar with the rest of the code base.\nIn this file there is the implementation of both the master and replica role\nof Redis.\n\nOne of the most important functions inside this file is `replicationFeedSlaves()` that writes commands to the clients representing replica instances connected\nto our master, so that the replicas can get the writes performed by the clients:\nthis way their data set will remain synchronized with the one in the master.\n\nThis file also implements both the `SYNC` and `PSYNC` commands that are\nused in order to perform the first synchronization between masters and\nreplicas, or to continue the replication after a disconnection.\n\nScript\n---\n\nThe script unit is composed of 3 units:\n* `script.c` - integration of scripts with Redis (commands execution, set replication/resp, ...)\n* `script_lua.c` - responsible to execute Lua code, uses `script.c` to interact with Redis from within the Lua code.\n* `function_lua.c` - contains the Lua engine implementation, uses `script_lua.c` to execute the Lua code.\n* `functions.c` - contains Redis Functions implementation (`FUNCTION` command), uses `functions_lua.c` if the function it wants to invoke needs the Lua engine.\n* `eval.c` - contains the `eval` implementation using `script_lua.c` to invoke the Lua code.\n\n\nOther C files\n---\n\n* `t_hash.c`, `t_list.c`, `t_set.c`, `t_string.c`, `t_zset.c` and `t_stream.c` contains the implementation of the Redis data types. They implement both an API to access a given data type, and the client command implementations for these data types.\n* `ae.c` implements the Redis event loop, it's a self contained library which is simple to read and understand.\n* `sds.c` is the Redis string library, check https://github.com/antirez/sds for more information.\n* `anet.c` is a library to use POSIX networking in a simpler way compared to the raw interface exposed by the kernel.\n* `dict.c` is an implementation of a non-blocking hash table which rehashes incrementally.\n* `cluster.c` implements the Redis Cluster. Probably a good read only after being very familiar with the rest of the Redis code base. If you want to read `cluster.c` make sure to read the [Redis Cluster specification][4].\n\n[4]: https://redis.io/docs/latest/operate/oss_and_stack/reference/cluster-spec/\n\nAnatomy of a Redis command\n---\n\nAll the Redis commands are defined in the following way:\n\n```c\nvoid foobarCommand(client *c) {\n    printf(\"%s\",c->argv[1]->ptr); /* Do something with the argument. */\n    addReply(c,shared.ok); /* Reply something to the client. */\n}\n```\n\nThe command function is referenced by a JSON file, together with its metadata, see `commands.c` described above for details.\nThe command flags are documented in the comment above the `struct redisCommand` in `server.h`.\nFor other details, please refer to the `COMMAND` command. https://redis.io/commands/command/\n\nAfter the command operates in some way, it returns a reply to the client,\nusually using `addReply()` or a similar function defined inside `networking.c`.\n\nThere are tons of command implementations inside the Redis source code\nthat can serve as examples of actual commands implementations (e.g. pingCommand). Writing\na few toy commands can be a good exercise to get familiar with the code base.\n\nThere are also many other files not described here, but it is useless to\ncover everything. We just want to help you with the first steps.\nEventually you'll find your way inside the Redis code base :-)\n\nEnjoy!\n",
        "releases": [
            {
                "name": "7.4.2",
                "date": "2025-01-06T14:19:57Z"
            },
            {
                "name": "7.2.7",
                "date": "2025-01-06T14:16:08Z"
            },
            {
                "name": "6.2.17",
                "date": "2025-01-06T14:14:30Z"
            },
            {
                "name": "8.0-M02",
                "date": "2024-11-04T09:16:21Z"
            },
            {
                "name": "7.4.1",
                "date": "2024-10-02T19:07:35Z"
            },
            {
                "name": "7.2.6",
                "date": "2024-10-02T19:14:19Z"
            },
            {
                "name": "6.2.16",
                "date": "2024-10-02T20:14:20Z"
            },
            {
                "name": "8.0-M01",
                "date": "2024-09-12T10:11:25Z"
            },
            {
                "name": "7.4.0",
                "date": "2024-07-29T05:37:26Z"
            },
            {
                "name": "7.4-rc2",
                "date": "2024-06-27T07:42:30Z"
            },
            {
                "name": "7.4-rc1",
                "date": "2024-06-06T09:07:15Z"
            },
            {
                "name": "7.2.5",
                "date": "2024-05-19T06:15:08Z"
            },
            {
                "name": "7.2.4",
                "date": "2024-01-09T11:53:43Z"
            },
            {
                "name": "7.0.15",
                "date": "2024-01-09T11:52:48Z"
            },
            {
                "name": "7.2.3",
                "date": "2023-11-01T12:39:05Z"
            },
            {
                "name": "7.2.2",
                "date": "2023-10-18T07:49:30Z"
            },
            {
                "name": "7.0.14",
                "date": "2023-10-18T07:48:43Z"
            },
            {
                "name": "6.2.14",
                "date": "2023-10-18T07:47:49Z"
            },
            {
                "name": "7.2.1",
                "date": "2023-09-06T17:58:39Z"
            },
            {
                "name": "7.0.13",
                "date": "2023-09-06T17:57:44Z"
            },
            {
                "name": "7.2.0",
                "date": "2023-08-15T09:40:54Z"
            },
            {
                "name": "7.0.12",
                "date": "2023-07-10T11:43:57Z"
            },
            {
                "name": "7.2-rc3",
                "date": "2023-07-10T11:56:41Z"
            },
            {
                "name": "6.2.13",
                "date": "2023-07-10T11:43:13Z"
            },
            {
                "name": "6.0.20",
                "date": "2023-07-10T11:42:24Z"
            },
            {
                "name": "7.2-rc2",
                "date": "2023-05-15T10:09:48Z"
            },
            {
                "name": "7.0.11",
                "date": "2023-04-17T12:58:09Z"
            },
            {
                "name": "6.2.12",
                "date": "2023-04-17T12:56:16Z"
            },
            {
                "name": "6.0.19",
                "date": "2023-04-17T12:55:38Z"
            },
            {
                "name": "7.2-rc1",
                "date": "2023-03-22T15:20:33Z"
            },
            {
                "name": "7.0.10",
                "date": "2023-03-20T17:18:13Z"
            },
            {
                "name": "7.0.9",
                "date": "2023-02-28T16:35:46Z"
            },
            {
                "name": "6.2.11",
                "date": "2023-02-28T16:35:00Z"
            },
            {
                "name": "6.0.18",
                "date": "2023-02-28T16:33:48Z"
            },
            {
                "name": "6.2.10",
                "date": "2023-01-17T15:11:25Z"
            },
            {
                "name": "6.0.17",
                "date": "2023-01-17T13:01:14Z"
            },
            {
                "name": "7.0.8",
                "date": "2023-01-16T16:42:18Z"
            },
            {
                "name": "6.2.9",
                "date": "2023-01-16T16:43:23Z"
            },
            {
                "name": "7.0.7",
                "date": "2022-12-16T11:00:45Z"
            },
            {
                "name": "7.0.6",
                "date": "2022-12-12T15:41:00Z"
            },
            {
                "name": "6.2.8",
                "date": "2022-12-12T15:40:07Z"
            },
            {
                "name": "7.0.5",
                "date": "2022-09-21T19:43:38Z"
            },
            {
                "name": "7.0.4",
                "date": "2022-07-18T13:05:11Z"
            },
            {
                "name": "7.0.3",
                "date": "2022-07-11T14:46:59Z"
            },
            {
                "name": "7.0.2",
                "date": "2022-06-12T13:01:35Z"
            },
            {
                "name": "7.0.1",
                "date": "2022-06-08T09:58:48Z"
            },
            {
                "name": "7.0.0",
                "date": "2022-04-27T13:34:25Z"
            },
            {
                "name": "6.2.7",
                "date": "2022-04-27T13:33:37Z"
            },
            {
                "name": "7.0-rc3",
                "date": "2022-04-05T11:26:52Z"
            },
            {
                "name": "7.0-rc2",
                "date": "2022-02-28T13:37:45Z"
            },
            {
                "name": "7.0-rc1",
                "date": "2022-01-31T13:01:34Z"
            },
            {
                "name": "6.2.6",
                "date": "2021-10-04T11:04:03Z"
            },
            {
                "name": "6.0.16",
                "date": "2021-10-04T11:03:24Z"
            },
            {
                "name": "5.0.14",
                "date": "2021-10-04T11:02:27Z"
            },
            {
                "name": "6.2.5",
                "date": "2021-07-21T18:15:53Z"
            },
            {
                "name": "6.0.15",
                "date": "2021-07-21T18:10:11Z"
            },
            {
                "name": "5.0.13",
                "date": "2021-07-21T18:08:51Z"
            },
            {
                "name": "6.2.4",
                "date": "2021-06-01T14:07:04Z"
            },
            {
                "name": "6.0.14",
                "date": "2021-06-01T14:06:24Z"
            },
            {
                "name": "6.2.3",
                "date": "2021-05-03T20:01:58Z"
            },
            {
                "name": "6.0.13",
                "date": "2021-05-03T19:59:51Z"
            },
            {
                "name": "6.2.2",
                "date": "2021-04-20T05:05:25Z"
            },
            {
                "name": "6.2.1",
                "date": "2021-03-02T06:16:09Z"
            },
            {
                "name": "6.0.12",
                "date": "2021-03-02T06:13:48Z"
            },
            {
                "name": "5.0.12",
                "date": "2021-03-02T06:12:52Z"
            },
            {
                "name": "6.2.0",
                "date": "2021-02-22T21:35:15Z"
            },
            {
                "name": "6.0.11",
                "date": "2021-02-22T23:37:54Z"
            },
            {
                "name": "5.0.11",
                "date": "2021-02-22T21:34:09Z"
            },
            {
                "name": "6.2-rc3",
                "date": "2021-02-01T18:13:25Z"
            },
            {
                "name": "6.0.10",
                "date": "2021-01-12T14:32:27Z"
            },
            {
                "name": "6.2-rc2",
                "date": "2021-01-12T14:31:54Z"
            },
            {
                "name": "6.2-rc1",
                "date": "2020-12-14T19:04:43Z"
            },
            {
                "name": "6.0.9",
                "date": "2020-10-27T07:12:58Z"
            },
            {
                "name": "5.0.10",
                "date": "2020-10-27T06:55:35Z"
            },
            {
                "name": "6.0.8",
                "date": "2020-09-10T11:10:41Z"
            },
            {
                "name": "6.0.7",
                "date": "2020-09-01T06:29:15Z"
            },
            {
                "name": "6.0.6",
                "date": "2020-07-20T18:15:54Z"
            }
        ]
    }
}