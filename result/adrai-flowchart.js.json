{
    "https://api.github.com/repos/adrai/flowchart.js": {
        "forks": 1213,
        "watchers": 8590,
        "stars": 8590,
        "languages": {
            "JavaScript": 72088,
            "HTML": 6473
        },
        "commits": [
            "2023-12-08T21:27:37Z",
            "2023-12-08T21:27:01Z",
            "2023-12-08T21:26:53Z",
            "2023-12-08T21:26:10Z",
            "2023-12-08T21:11:59Z",
            "2023-06-27T10:46:17Z",
            "2022-03-01T20:28:35Z",
            "2022-02-02T18:32:01Z",
            "2022-01-31T19:07:40Z",
            "2022-01-31T19:03:35Z",
            "2021-11-08T07:03:39Z",
            "2021-10-28T06:35:17Z",
            "2021-10-28T06:33:14Z",
            "2021-10-18T21:39:58Z",
            "2021-10-18T21:36:34Z",
            "2021-05-14T05:33:43Z",
            "2021-04-05T06:49:29Z",
            "2021-01-22T15:51:29Z",
            "2021-01-22T14:30:33Z",
            "2020-10-14T12:46:11Z",
            "2020-10-14T12:46:08Z",
            "2020-10-14T12:44:35Z",
            "2020-10-12T07:47:56Z",
            "2020-10-12T07:45:40Z",
            "2020-10-12T07:43:59Z",
            "2020-10-11T13:50:38Z",
            "2020-10-11T13:50:36Z",
            "2020-10-11T13:48:27Z",
            "2020-09-06T13:49:44Z",
            "2020-09-06T13:47:03Z"
        ],
        "creation_date": "2013-07-17T11:25:29Z",
        "contributors": 30,
        "topics": [
            "diagram",
            "flowchart",
            "javascript",
            "svg"
        ],
        "subscribers": 270,
        "readme": "[![JS.ORG](https://img.shields.io/badge/js.org-flowchart-ffb400.svg?style=flat-square)](http://js.org)\n\n# [flowchart.js](http://flowchart.js.org)\n\nflowchart.js is a flowchart DSL and SVG render that runs in the browser and [terminal](https://github.com/francoislaberge/diagrams/#flowchart).\n\nNodes and connections are defined separately so that nodes can be reused and connections can be quickly changed.\nFine grain changes to node and connection style can also be made right in the DSL.\n\n## Example\n\n```flowchart\nst=>start: Start:>http://www.google.com[blank]\ne=>end:>http://www.google.com\ngetInfo=>input: Input Info\nop1=>operation: My Operation\nsub1=>subroutine: My Subroutine\ncond=>condition: Yes\nor No?:>http://www.google.com\nio=>inputoutput: catch something...\nprintInfo=>output: Print info\npara=>parallel: parallel tasks\n\nst->getInfo->op1->cond\ncond(yes)->io->printInfo->e\ncond(no)->para\npara(path1, bottom)->sub1(right)->op1\npara(path2, top)->op1\n```\n\n![Example Flowchart](/imgs/example.svg)\n\n## CLI\nSee [francoislaberge/diagrams](https://github.com/francoislaberge/diagrams/#flowchart) on how to flowchart.js in the terminal.\n\n## Browser Usage\n\nflowchart.js is on [CDNJS](https://cdnjs.com/libraries/flowchart), feel free to use it.\n\nYou will also need [Rapha\u00ebl](http://www.raphaeljs.com/), which is also on [CDNJS](https://cdnjs.cloudflare.com/ajax/libs/raphael/2.3.0/raphael.min.js).\n\nThe demo html page is at [example/index.html](example/index.html).\n\n## Node Syntax\n`nodeName=>nodeType: nodeText[|flowstate][:>urlLink]`\n\nItems in `[]` are optional.\n\n_nodeName_ defines the nodes variable name within the flowchart document.\n\n_nodeType_ defines what type the node is. See **Node Types** for more information.\n\n_nodeText_ is the text that will be inserted into the node. Newlines are allowed and will be reflected in the rendered node text.\n\n_flowstate_ is optional and uses the `|` operator that specifies extra styling for the node.\n\n_urlLink_ is optional and uses the `:>` operator to specify the url to link to.\n\n## Node Types\nDefines the shape that the node will take.\n\n### start\nUsed as the first node where flows start from.\nDefault text is `Start`.\n\n![start image](imgs/start.png \"start image\")\n\n```flowchart\nst=>start: start\n```\n\n### end\nUsed as the last node where a flow ends.\nDefault text is `End`.\n\n![end image](imgs/end.png \"end image\")\n\n```flowchart\ne=>end: end\n```\n\n### operation\nIndicates that an operation needs to happen in the flow.\n\n![operation image](imgs/operation.png \"operation image\")\n\n```flowchart\nop1=>operation: operation\n```\n\n### inputoutput\nIndicates that IO happens in a flow.\n\n![inputoutput image](imgs/inputoutput.png \"inputoutput image\")\n\n```flowchart\nio=>inputoutput: inputoutput\n```\n\n### input\nIndicates that Input happens in a flow.\n\n![input image](imgs/input.png \"input image\")\n\n```flowchart\ngetInfo=>input: Input info\n```\n\n### output\nIndicates that Output happens in a flow.\n\n![output image](imgs/output.png \"output image\")\n\n```flowchart\nprintInfo=>output: Print info\n```\n\n### subroutine\nIndicates that a subroutine happens in the flow and that there should be another flowchart that documents this subroutine.\n\n![subroutine image](imgs/subroutine.png \"subroutine image\")\n\n```flowchart\nsub1=>subroutine: subroutine\n```\n\n### condition\nAllows for a conditional or logical statement to direct the flow into one of two paths.\n\n![condition image](imgs/condition.png \"condition image\")\n\n```flowchart\ncond=>condition: condition\nYes or No?\n```\n\n### parallel\nAllows for multiple flows to happen simultaneously.\n\n![parallel image](imgs/parallel.png \"parallel image\")\n\n```flowchart\npara=>parallel: parallel\n```\n\n## Connections\nConnections are defined in their own section below the node definitions.\nThe `->` operator specifies a connection from one node to another like `nodeVar1->nodeVar2->nodeVar3`.\n\nNot all nodes need to be specified in one string and can be separaged like so\n\n```flowchart\nnodeVar1->nodeVar2\nnodeVar2->nodeVar3\n```\n\nConnection syntax is as follows:\n\n`<node variable name>[(<specification1>[, <specification2])]-><node variable name>[[(<specification1>[, <specification2])]-><node variable name>]`\n\nItems in `[]` are optional.\n\n### Directions\nThe following directions are available and define the direction the connection will leave the node from. If there are more than one specifiers, it is always the last. All nodes have a default direction making this an optional specification. `<direction>` will be used to indicate that one of the following should be used in its place.\n\n* left\n* right\n* top\n* bottom\n\n### Node Specific Specifiers by Type\nEach node variables has optional specifiers, like direction, and some have special specifiers depending on the node type that are defined below. Specifiers are added after the variable name in `()` and separated with `,` like `nodeVar(spec1, spec2)`.\n\n### start\nOptional direction\n\n`startVar(<direction>)->nextNode`\n\n### end\nNo specifications because connections only go to the end node and do not leave from it.\n\n`previousNode->endVar`\n\n### operation\nOptional direction\n\n`operationVar(<direction>)->nextNode`\n\n### inputoutput\nOptional direction\n\n`inputoutputVar(<direction>)->nextNode`\n\n### subroutine\nOptional direction\n\n`subroutineVar(<direction>)->nextNode`\n\n### condition\nRequired logical specification of `yes` or `no`\n\nOptional direction\n\n```flowchart\nconditionalVar(yes, <direction>)->nextNode1\nconditionalVar(no,  <direction>)->nextNode2\n```\n\n### parallel\nRequired path specification of `path1`, `path2`, or `path3`\n\nOptional direction\n\n```flowchart\nparallelVar(path1, <direction>)->nextNode1\nparallelVar(path2, <direction>)->nextNode2\nparallelVar(path3, <direction>)->nextNode3\n```\n\n## Links\nA external link can be added to a node with the `:>` operator.\n\nThe `st` node is linked to `http://www.google.com` and will open a new tab because `[blank]` is at the end of the URL.\n\nThe `e` node is linked to `http://www.yahoo.com` and will cause the page to navigate to that page instead of opening a new tab.\n\n```flowchart\nst=>start: Start:>http://www.google.com[blank]\ne=>end: End:>http://www.yahoo.com\n```\n\n## Advice\nSymbols that should possibly not be used in the text: `=>` and `->` and `:>` and `|` and `@>` and `:$`\n\nIf you want to emphasize a specific path in your flowchart, you can additionally define it like this:\n\n```\nst@>op1({\"stroke\":\"Red\"})@>cond({\"stroke\":\"Red\",\"stroke-width\":6,\"arrow-end\":\"classic-wide-long\"})@>c2({\"stroke\":\"Red\"})@>op2({\"stroke\":\"Red\"})@>e({\"stroke\":\"Red\"})\n```\n\n## Custom names for branches\n\n```\nst=>start: Start:>http://www.google.com[blank]\ne=>end:>http://www.google.com\nop1=>operation: My Operation\nsub1=>subroutine: My Subroutine\ncond=>condition: linear or polynomial :>http://www.google.com\nio=>inputoutput: catch something...\npara=>parallel: 3 possibilities\n\nst->op1->cond\ncond(true@linear)->io->e\ncond(false@polynomial)->sub1(right)\nsub1(right)->para\npara(path1@an1, top)->cond\npara(path2@an2, right)->op1\npara(path3@an3, bottom)->e\n```\n<details>\n  \n  <summary>Demonstration</summary>\n  \n ![img](https://user-images.githubusercontent.com/1086194/137810516-0d7d7307-fc55-466f-b06d-a6ca9f6b8785.png)\n \n</details>\n\n## Contributors\n\nvia [GitHub](https://github.com/adrai/flowchart.js/graphs/contributors)\n\n## Thanks\n\nMany thanks to [js-sequence-diagrams](http://bramp.github.io/js-sequence-diagrams/) which greatly inspired this project, and forms the basis for the syntax.\n",
        "releases": []
    }
}