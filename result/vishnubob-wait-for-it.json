{
    "https://api.github.com/repos/vishnubob/wait-for-it": {
        "forks": 2275,
        "watchers": 9496,
        "stars": 9496,
        "languages": {
            "Python": 6754,
            "Shell": 5227
        },
        "commits": [
            "2020-08-22T23:18:37Z",
            "2020-08-22T23:08:30Z",
            "2020-08-22T18:14:47Z",
            "2020-08-22T18:14:00Z",
            "2020-08-22T16:35:37Z",
            "2020-02-05T02:32:06Z",
            "2020-02-04T04:38:49Z",
            "2020-02-04T04:30:41Z",
            "2020-02-03T20:24:52Z",
            "2020-02-02T22:38:18Z",
            "2020-02-01T12:39:58Z",
            "2020-01-30T16:03:27Z",
            "2020-01-03T19:38:39Z",
            "2018-11-04T01:27:06Z",
            "2018-11-04T01:24:15Z",
            "2018-11-04T00:24:55Z",
            "2018-11-04T00:19:28Z",
            "2018-08-18T19:53:04Z",
            "2017-12-30T07:25:54Z",
            "2017-11-01T07:05:58Z",
            "2017-11-01T07:03:33Z",
            "2017-10-04T13:52:31Z",
            "2017-07-23T16:00:32Z",
            "2017-07-20T10:08:57Z",
            "2017-05-17T21:22:56Z",
            "2017-05-17T17:26:23Z",
            "2017-05-17T17:18:55Z",
            "2017-04-28T18:05:41Z",
            "2017-03-27T06:10:11Z",
            "2017-03-27T05:52:51Z"
        ],
        "creation_date": "2016-02-02T17:06:22Z",
        "contributors": 10,
        "topics": [],
        "subscribers": 90,
        "readme": "# wait-for-it\n\n`wait-for-it.sh` is a pure bash script that will wait on the availability of a\nhost and TCP port.  It is useful for synchronizing the spin-up of\ninterdependent services, such as linked docker containers.  Since it is a pure\nbash script, it does not have any external dependencies.\n\n## Usage\n\n```text\nwait-for-it.sh host:port [-s] [-t timeout] [-- command args]\n-h HOST | --host=HOST       Host or IP under test\n-p PORT | --port=PORT       TCP port under test\n                            Alternatively, you specify the host and port as host:port\n-s | --strict               Only execute subcommand if the test succeeds\n-q | --quiet                Don't output any status messages\n-t TIMEOUT | --timeout=TIMEOUT\n                            Timeout in seconds, zero for no timeout\n-- COMMAND ARGS             Execute command with args after the test finishes\n```\n\n## Examples\n\nFor example, let's test to see if we can access port 80 on `www.google.com`,\nand if it is available, echo the message `google is up`.\n\n```text\n$ ./wait-for-it.sh www.google.com:80 -- echo \"google is up\"\nwait-for-it.sh: waiting 15 seconds for www.google.com:80\nwait-for-it.sh: www.google.com:80 is available after 0 seconds\ngoogle is up\n```\n\nYou can set your own timeout with the `-t` or `--timeout=` option.  Setting\nthe timeout value to 0 will disable the timeout:\n\n```text\n$ ./wait-for-it.sh -t 0 www.google.com:80 -- echo \"google is up\"\nwait-for-it.sh: waiting for www.google.com:80 without a timeout\nwait-for-it.sh: www.google.com:80 is available after 0 seconds\ngoogle is up\n```\n\nThe subcommand will be executed regardless if the service is up or not.  If you\nwish to execute the subcommand only if the service is up, add the `--strict`\nargument. In this example, we will test port 81 on `www.google.com` which will\nfail:\n\n```text\n$ ./wait-for-it.sh www.google.com:81 --timeout=1 --strict -- echo \"google is up\"\nwait-for-it.sh: waiting 1 seconds for www.google.com:81\nwait-for-it.sh: timeout occurred after waiting 1 seconds for www.google.com:81\nwait-for-it.sh: strict mode, refusing to execute subprocess\n```\n\nIf you don't want to execute a subcommand, leave off the `--` argument.  This\nway, you can test the exit condition of `wait-for-it.sh` in your own scripts,\nand determine how to proceed:\n\n```text\n$ ./wait-for-it.sh www.google.com:80\nwait-for-it.sh: waiting 15 seconds for www.google.com:80\nwait-for-it.sh: www.google.com:80 is available after 0 seconds\n$ echo $?\n0\n$ ./wait-for-it.sh www.google.com:81\nwait-for-it.sh: waiting 15 seconds for www.google.com:81\nwait-for-it.sh: timeout occurred after waiting 15 seconds for www.google.com:81\n$ echo $?\n124\n```\n\n## Community\n\n*Debian*: There is a [Debian package](https://tracker.debian.org/pkg/wait-for-it).\n",
        "releases": []
    }
}