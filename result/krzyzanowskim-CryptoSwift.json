{
    "https://api.github.com/repos/krzyzanowskim/CryptoSwift": {
        "forks": 1672,
        "watchers": 10254,
        "stars": 10254,
        "languages": {
            "Swift": 1091257,
            "Shell": 5450,
            "Ruby": 1156,
            "Objective-C": 1025,
            "C": 374,
            "Makefile": 226
        },
        "commits": [
            "2025-01-20T13:03:06Z",
            "2025-01-20T13:01:53Z",
            "2025-01-20T08:12:04Z",
            "2025-01-13T13:17:13Z",
            "2025-01-05T22:30:38Z",
            "2025-01-05T02:42:28Z",
            "2025-01-02T03:24:38Z",
            "2024-12-23T12:24:28Z",
            "2024-12-23T12:20:39Z",
            "2024-12-23T12:17:58Z",
            "2024-12-23T12:16:46Z",
            "2024-12-09T22:23:55Z",
            "2024-12-09T18:58:34Z",
            "2024-12-06T11:32:04Z",
            "2024-12-05T18:09:53Z",
            "2024-12-05T03:59:39Z",
            "2024-12-01T05:13:09Z",
            "2024-11-29T17:28:14Z",
            "2024-10-15T15:47:53Z",
            "2024-06-13T02:52:10Z",
            "2024-08-24T11:43:50Z",
            "2024-08-24T11:40:55Z",
            "2024-08-24T11:27:20Z",
            "2024-08-05T18:24:49Z",
            "2024-08-05T17:12:32Z",
            "2024-07-24T18:46:09Z",
            "2024-07-24T15:35:22Z",
            "2024-07-24T15:18:24Z",
            "2024-06-13T13:20:45Z",
            "2024-05-09T11:56:50Z"
        ],
        "creation_date": "2014-07-06T07:31:39Z",
        "contributors": 30,
        "topics": [
            "aes",
            "aes-gcm",
            "cipher",
            "commoncrypto",
            "cryptography",
            "cryptoswift",
            "digest",
            "hmac",
            "hmac-authentication",
            "md5",
            "sha1",
            "sha3",
            "swift"
        ],
        "subscribers": 184,
        "readme": "[![Platform](https://img.shields.io/badge/Platforms-iOS%20%7C%20Android%20%7C%20macOS%20%7C%20watchOS%20%7C%20tvOS%20%7C%20Linux-4E4E4E.svg?colorA=28a745)](#installation)\n\n[![Swift support](https://img.shields.io/badge/Swift-3.1%20%7C%203.2%20%7C%204.0%20%7C%204.1%20%7C%204.2%20%7C%205.0-lightgrey.svg?colorA=28a745&colorB=4E4E4E)](#swift-versions-support)\n[![Swift Package Manager compatible](https://img.shields.io/badge/SPM-compatible-brightgreen.svg?style=flat&colorA=28a745&&colorB=4E4E4E)](https://github.com/swiftlang/swift-package-manager)\n[![CocoaPods Compatible](https://img.shields.io/cocoapods/v/CryptoSwift.svg?style=flat&label=CocoaPods&colorA=28a745&&colorB=4E4E4E)](https://cocoapods.org/pods/CryptoSwift)\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-brightgreen.svg?style=flat&colorA=28a745&&colorB=4E4E4E)](https://github.com/Carthage/Carthage)\n\n# CryptoSwift\n\nCrypto related functions and helpers for [Swift](https://swift.org) implemented in Swift. ([#PureSwift](https://twitter.com/hashtag/pureswift))\n\n**Note**: The `main` branch follows the latest currently released **version of Swift**. If you need an earlier version for an older version of Swift, specify its version in your `Podfile` or use the code on the branch for that version. Older branches are unsupported. Check [versions](#swift-versions-support) for details.\n\n---\n\n[Requirements](#requirements) | [Features](#features) | [Contribution](#contribution) | [Installation](#installation) | [Swift versions](#swift-versions-support) | [How-to](#how-to) | [Author](#author) | [License](#license) | [Changelog](#changelog)\n\n### Support & Sponsors\n\nThe financial sustainability of the project is possible thanks to the ongoing contributions from our [GitHub Sponsors](https://github.com/sponsors/krzyzanowskim)\n\n### Premium Sponsors\n\n  [Emerge Tools](https://www.emergetools.com/) is a suite of revolutionary products designed to supercharge mobile apps and the teams that build them.\n\n  [<img alt=\"www.emergetools.com/\" width=\"200\" src=\"https://github-production-user-asset-6210df.s3.amazonaws.com/758033/256565082-a21f5ac1-ef39-4b56-a8d2-575adeb7fe55.png\" />](https://www.emergetools.com)\n\n## Requirements\nGood mood\n\n## Features\n\n- Easy to use\n- Convenient extensions for String and Data\n- Support for incremental updates (stream, ...)\n- iOS, Android, macOS, AppleTV, watchOS, Linux support\n\n#### Hash (Digest)\n  [MD5](https://tools.ietf.org/html/rfc1321)\n| [SHA1](https://tools.ietf.org/html/rfc3174)\n| [SHA2-224](https://tools.ietf.org/html/rfc6234)\n| [SHA2-256](https://tools.ietf.org/html/rfc6234)\n| [SHA2-384](https://tools.ietf.org/html/rfc6234)\n| [SHA2-512](https://tools.ietf.org/html/rfc6234)\n| [SHA3](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf)\n\n#### Cyclic Redundancy Check (CRC)\n  [CRC32](https://en.wikipedia.org/wiki/Cyclic_redundancy_check)\n| [CRC32C](https://en.wikipedia.org/wiki/Cyclic_redundancy_check)\n| [CRC16](https://en.wikipedia.org/wiki/Cyclic_redundancy_check)\n\n#### Cipher\n  [AES-128, AES-192, AES-256](http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf)\n| [ChaCha20](http://cr.yp.to/chacha/chacha-20080128.pdf)\n| [XChaCha20](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha)\n| [Rabbit](https://tools.ietf.org/html/rfc4503)\n| [Blowfish](https://www.schneier.com/academic/blowfish/)\n\n#### RSA (public-key encryption algorithm)\n  [Encryption, Signature](https://github.com/krzyzanowskim/CryptoSwift#rsa)\n\n#### Message authenticators\n  [Poly1305](https://cr.yp.to/mac/poly1305-20050329.pdf)\n| [HMAC (MD5, SHA1, SHA256)](https://www.ietf.org/rfc/rfc2104.txt)\n| [CMAC](https://tools.ietf.org/html/rfc4493)\n| [CBC-MAC](https://en.wikipedia.org/wiki/CBC-MAC)\n\n#### Cipher mode of operation\n- Electronic codebook ([ECB](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_codebook_.28ECB.29))\n- Cipher-block chaining ([CBC](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher-block_chaining_.28CBC.29))\n- Propagating Cipher Block Chaining ([PCBC](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Propagating_Cipher_Block_Chaining_.28PCBC.29))\n- Cipher feedback ([CFB](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_feedback_.28CFB.29))\n- Output Feedback ([OFB](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Output_Feedback_.28OFB.29))\n- Counter Mode ([CTR](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Counter_.28CTR.29))\n- Galois/Counter Mode ([GCM](https://csrc.nist.gov/publications/detail/sp/800-38d/final))\n- Counter with Cipher Block Chaining-Message Authentication Code ([CCM](https://csrc.nist.gov/publications/detail/sp/800-38c/final))\n- OCB Authenticated-Encryption Algorithm ([OCB](https://tools.ietf.org/html/rfc7253))\n\n#### Password-Based Key Derivation Function\n- [PBKDF1](https://tools.ietf.org/html/rfc2898#section-5.1) (Password-Based Key Derivation Function 1)\n- [PBKDF2](https://tools.ietf.org/html/rfc2898#section-5.2) (Password-Based Key Derivation Function 2)\n- [HKDF](https://tools.ietf.org/html/rfc5869) (HMAC-based Extract-and-Expand Key Derivation Function)\n- [Scrypt](https://tools.ietf.org/html/rfc7914) (The scrypt Password-Based Key Derivation Function)\n\n#### Data padding\n- [PKCS#5](https://www.rfc-editor.org/rfc/rfc2898.html)\n- [EMSA-PKCS1-v1_5 (Encoding Method for Signature)](https://www.rfc-editor.org/rfc/rfc3447#section-9.2)\n- [EME-PCKS1-v1_5 (Encoding Method for Encryption)](https://www.rfc-editor.org/rfc/rfc3447)\n- [PKCS#7](https://tools.ietf.org/html/rfc5652#section-6.3)\n- [Zero padding](https://en.wikipedia.org/wiki/Padding_(cryptography)#Zero_padding)\n- [ISO78164](https://www.embedx.com/pdfs/ISO_STD_7816/info_isoiec7816-4%7Bed21.0%7Den.pdf)\n- [ISO10126](https://en.wikipedia.org/wiki/Padding_(cryptography)#ISO_10126)\n- No padding\n\n#### Authenticated Encryption with Associated Data (AEAD)\n- [AEAD\\_CHACHA20\\_POLY1305](https://tools.ietf.org/html/rfc7539#section-2.8)\n- [AEAD\\_XCHACHA20\\_POLY1305](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha#section-2)\n\n## Why\n[Why?](https://github.com/krzyzanowskim/CryptoSwift/discussions/982) [Because I can](https://github.com/krzyzanowskim/CryptoSwift/discussions/982#discussioncomment-3669415).\n\n## How do I get involved?\n\nYou want to help, great! Go ahead and fork our repo, make your changes and send us a pull request.\n\n## Contribution\n\nCheck out [CONTRIBUTING.md](CONTRIBUTING.md) for more information on how to help with CryptoSwift.\n\n- If you found a bug, [open a discussion](https://github.com/krzyzanowskim/CryptoSwift/discussions).\n- If you have a feature request, [open a discussion](https://github.com/krzyzanowskim/CryptoSwift/discussions).\n\n## Installation\n\n### Hardened Runtime (macOS) and Xcode\n\nBinary CryptoSwift.xcframework (Used by Swift Package Manager package integration) won't load properly in your app if the app uses **Sign to Run Locally**  Signing Certificate with Hardened Runtime enabled. It is possible to setup Xcode like this. To solve the problem you have two options:\n- Use proper Signing Certificate, eg. *Development* <- this is the proper action\n- Use `Disable Library Validation` aka `com.apple.security.cs.disable-library-validation` entitlement\n\n#### Xcode Project\n\nTo install CryptoSwift, add it as a submodule to your project (on the top level project directory):\n\n    git submodule add https://github.com/krzyzanowskim/CryptoSwift.git\n\nIt is recommended to enable [Whole-Module Optimization](https://swift.org/blog/whole-module-optimizations/) to gain better performance. Non-optimized build results in significantly worse performance.\n\n#### Swift Package Manager\n\nYou can use [Swift Package Manager](https://swift.org/package-manager/) and specify dependency in `Package.swift` by adding this:\n\n```swift\n.package(url: \"https://github.com/krzyzanowskim/CryptoSwift.git\", from: \"1.8.3\")\n```\n\nSee: [Package.swift - manual](https://blog.krzyzanowskim.com/2016/08/09/package-swift-manual/)\n\nNotice: Swift Package Manager uses debug configuration for debug Xcode build, that may result in significant (up to x10000) worse performance. Performance characteristic is different in Release build. To overcome this problem, consider embed `CryptoSwift.xcframework` described below.\n\n#### CocoaPods\n\nYou can use [CocoaPods](https://cocoapods.org/pods/CryptoSwift).\n\n```ruby\npod 'CryptoSwift', '~> 1.8.3'\n```\n\nBear in mind that CocoaPods will build CryptoSwift without [Whole-Module Optimization](https://swift.org/blog/whole-module-optimizations/) that may impact performance. You can change it manually after installation, or use [cocoapods-wholemodule](https://github.com/jedlewison/cocoapods-wholemodule) plugin.\n\n#### Carthage\n\nYou can use [Carthage](https://github.com/Carthage/Carthage).\nSpecify in Cartfile:\n\n```ruby\ngithub \"krzyzanowskim/CryptoSwift\"\n```\n\nRun `carthage` to build the framework and drag the built CryptoSwift.framework into your Xcode project. Follow [build instructions](https://github.com/Carthage/Carthage#getting-started). [Common issues](https://github.com/krzyzanowskim/CryptoSwift/discussions/983#discussioncomment-3669433).\n\n#### XCFramework\n\nXCFrameworks require Xcode 11 or later and they can be integrated similarly to how we\u2019re used to integrating the `.framework` format.\nPlease use script [scripts/build-framework.sh](scripts/build-framework.sh) to generate binary `CryptoSwift.xcframework` archive that you can use as a dependency in Xcode.\n\nCryptoSwift.xcframework is a Release (Optimized) binary that offer best available Swift code performance.\n\n<img width=\"320\" alt=\"Screen Shot 2020-10-27 at 00 06 32\" src=\"https://user-images.githubusercontent.com/758033/97240586-f0878280-17ee-11eb-9119-e5a960417d04.png\">\n\n#### Embedded Framework\n\nEmbedded frameworks require a minimum deployment target of iOS 11.0 or macOS Sierra (10.13). Drag the `CryptoSwift.xcodeproj` file into your Xcode project, and add appropriate framework as a dependency to your target. Now select your App and choose the General tab for the app target. Find *Embedded Binaries* and press \"+\", then select `CryptoSwift.framework` (iOS, macOS, watchOS or tvOS)\n\n![](https://cloud.githubusercontent.com/assets/758033/10834511/25a26852-7e9a-11e5-8c01-6cc8f1838459.png)\n\nSometimes \"embedded framework\" option is not available. In that case, you have to add new build phase for the target.\n\n![](https://cloud.githubusercontent.com/assets/758033/18415615/d5edabb0-77f8-11e6-8c94-f41d9fc2b8cb.png)\n\n##### iOS, macOS, watchOS, tvOS\n\nIn the project, you'll find [single scheme](https://mxcl.dev/PromiseKit/news/2016/08/Multiplatform-Single-Scheme-Xcode-Projects/) for all platforms:\n- CryptoSwift\n\n#### Swift versions support\n\n- Swift 1.2: branch [swift12](https://github.com/krzyzanowskim/CryptoSwift/tree/swift12) version <= 0.0.13\n- Swift 2.1: branch [swift21](https://github.com/krzyzanowskim/CryptoSwift/tree/swift21) version <= 0.2.3\n- Swift 2.2, 2.3: branch [swift2](https://github.com/krzyzanowskim/CryptoSwift/tree/swift2) version <= 0.5.2\n- Swift 3.1, branch [swift3](https://github.com/krzyzanowskim/CryptoSwift/tree/swift3) version <= 0.6.9\n- Swift 3.2, branch [swift32](https://github.com/krzyzanowskim/CryptoSwift/tree/swift32) version = 0.7.0\n- Swift 4.0, branch [swift4](https://github.com/krzyzanowskim/CryptoSwift/tree/swift4) version <= 0.12.0\n- Swift 4.2, branch [swift42](https://github.com/krzyzanowskim/CryptoSwift/tree/swift42) version <= 0.15.0\n- Swift 5.0, branch [swift5](https://github.com/krzyzanowskim/CryptoSwift/tree/swift5) version <= 1.2.0\n- Swift 5.1, branch [swift5](https://github.com/krzyzanowskim/CryptoSwift/tree/swift51) version <= 1.3.3\n- Swift 5.3 and newer, branch [main](https://github.com/krzyzanowskim/CryptoSwift/tree/main)\n\n## How-to\n\n* [Basics (data types, conversion, ...)](#basics)\n* [Digest (MD5, SHA...)](#calculate-digest)\n* [Message authenticators (HMAC, CMAC...)](#message-authenticators-1)\n* [Password-Based Key Derivation Function (PBKDF2, ...)](#password-based-key-derivation-functions)\n* [HMAC-based Key Derivation Function (HKDF)](#hmac-based-key-derivation-function)\n* [Data Padding](#data-padding)\n* [ChaCha20](#chacha20)\n* [Rabbit](#rabbit)\n* [Blowfish](#blowfish)\n* [AES - Advanced Encryption Standard](#aes)\n* [AES-GCM](#aes-gcm)\n* [Authenticated Encryption with Associated Data (AEAD)](#aead)\n\n##### Basics\n\n```swift\nimport CryptoSwift\n```\n\nCryptoSwift uses array of bytes aka `Array<UInt8>` as a base type for all operations. Every data may be converted to a stream of bytes. You will find convenience functions that accept `String` or `Data`, and it will be internally converted to the array of bytes.\n\n##### Data types conversion\n\nFor your convenience, **CryptoSwift** provides two functions to easily convert an array of bytes to `Data` or `Data` to an array of bytes:\n\nData from bytes:\n\n```swift\nlet data = Data([0x01, 0x02, 0x03])\n```\n\n`Data` to `Array<UInt8>`\n\n```swift\nlet bytes = data.bytes                     // [1,2,3]\n```\n\n[Hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal) encoding:\n\n```swift\nlet bytes = Array<UInt8>(hex: \"0x010203\")  // [1,2,3]\nlet hex   = bytes.toHexString()            // \"010203\"\n```\n\nBuild bytes out of `String`\n```swift\nlet bytes: Array<UInt8> = \"cipherkey\".bytes  // Array(\"cipherkey\".utf8)\n```\n\nAlso... check out helpers that work with **Base64** encoded data:\n```swift\n\"aPf/i9th9iX+vf49eR7PYk2q7S5xmm3jkRLejgzHNJs=\".decryptBase64ToString(cipher)\n\"aPf/i9th9iX+vf49eR7PYk2q7S5xmm3jkRLejgzHNJs=\".decryptBase64(cipher)\nbytes.toBase64()\n```\n\n##### Calculate Digest\n\nHashing a data or array of bytes (aka `Array<UInt8>`)\n```swift\n/* Hash struct usage */\nlet bytes: Array<UInt8> = [0x01, 0x02, 0x03]\nlet digest = input.md5()\nlet digest = Digest.md5(bytes)\n```\n\n```swift\nlet data = Data([0x01, 0x02, 0x03])\n\nlet hash = data.md5()\nlet hash = data.sha1()\nlet hash = data.sha224()\nlet hash = data.sha256()\nlet hash = data.sha384()\nlet hash = data.sha512()\n```\n```swift\ndo {\n    var digest = MD5()\n    let partial1 = try digest.update(withBytes: [0x31, 0x32])\n    let partial2 = try digest.update(withBytes: [0x33])\n    let result = try digest.finish()\n} catch { }\n```\n\nHashing a String and printing result\n\n```swift\nlet hash = \"123\".md5() // \"123\".bytes.md5()\n```\n\n##### Calculate CRC\n\n```swift\nbytes.crc16()\ndata.crc16()\n\nbytes.crc32()\ndata.crc32()\n```\n\n##### Message authenticators\n\n```swift\n// Calculate Message Authentication Code (MAC) for message\nlet key: Array<UInt8> = [1,2,3,4,5,6,7,8,9,10,...]\n\ntry Poly1305(key: key).authenticate(bytes)\ntry HMAC(key: key, variant: .sha256).authenticate(bytes)\ntry CMAC(key: key).authenticate(bytes)\n```\n\n##### Password-Based Key Derivation Functions\n\n```swift\nlet password: Array<UInt8> = Array(\"s33krit\".utf8)\nlet salt: Array<UInt8> = Array(\"nacllcan\".utf8)\n\nlet key = try PKCS5.PBKDF2(password: password, salt: salt, iterations: 4096, keyLength: 32, variant: .sha2(.sha256)).calculate()\n```\n\n```swift\nlet password: Array<UInt8> = Array(\"s33krit\".utf8)\nlet salt: Array<UInt8> = Array(\"nacllcan\".utf8)\n// Scrypt implementation does not implement work parallelization, so `p` parameter will\n// increase the work time even in multicore systems\nlet key = try Scrypt(password: password, salt: salt, dkLen: 64, N: 16384, r: 8, p: 1).calculate()\n```\n\n##### HMAC-based Key Derivation Function\n\n```swift\nlet password: Array<UInt8> = Array(\"s33krit\".utf8)\nlet salt: Array<UInt8> = Array(\"nacllcan\".utf8)\n\nlet key = try HKDF(password: password, salt: salt, variant: .sha256).calculate()\n```\n\n\n##### Data Padding\n\nSome content-encryption algorithms assume the input length is a multiple of `k` octets, where `k` is greater than one. For such algorithms, the input shall be padded.\n\n```swift\nPadding.pkcs7.add(to: bytes, blockSize: AES.blockSize)\n```\n\n#### Working with Ciphers\n##### ChaCha20\n\n```swift\nlet encrypted = try ChaCha20(key: key, iv: iv).encrypt(message)\nlet decrypted = try ChaCha20(key: key, iv: iv).decrypt(encrypted)\n```\n\n##### Rabbit\n\n```swift\nlet encrypted = try Rabbit(key: key, iv: iv).encrypt(message)\nlet decrypted = try Rabbit(key: key, iv: iv).decrypt(encrypted)\n```\n##### Blowfish\n\n```swift\nlet encrypted = try Blowfish(key: key, blockMode: CBC(iv: iv), padding: .pkcs7).encrypt(message)\nlet decrypted = try Blowfish(key: key, blockMode: CBC(iv: iv), padding: .pkcs7).decrypt(encrypted)\n```\n\n##### AES\n\nNotice regarding padding: *Manual padding of data is optional, and CryptoSwift is using PKCS7 padding by default. If you need to manually disable/enable padding, you can do this by setting parameter for __AES__ class*\n\nVariant of AES encryption (AES-128, AES-192, AES-256) depends on given key length:\n\n- AES-128 = 16 bytes\n- AES-192 = 24 bytes\n- AES-256 = 32 bytes\n\nAES-256 example\n\n```swift\nlet encryptedBytes = try AES(key: [1,2,3,...,32], blockMode: CBC(iv: [1,2,3,...,16]), padding: .pkcs7)\n```\n\nFull example:\n\n```swift\nlet password: [UInt8] = Array(\"s33krit\".utf8)\nlet salt: [UInt8] = Array(\"nacllcan\".utf8)\n\n/* Generate a key from a `password`. Optional if you already have a key */\nlet key = try PKCS5.PBKDF2(\n    password: password,\n    salt: salt,\n    iterations: 4096,\n    keyLength: 32, /* AES-256 */\n    variant: .sha256\n).calculate()\n\n/* Generate random IV value. IV is public value. Either need to generate, or get it from elsewhere */\nlet iv = AES.randomIV(AES.blockSize)\n\n/* AES cryptor instance */\nlet aes = try AES(key: key, blockMode: CBC(iv: iv), padding: .pkcs7)\n\n/* Encrypt Data */\nlet inputData = Data()\nlet encryptedBytes = try aes.encrypt(inputData.bytes)\nlet encryptedData = Data(encryptedBytes)\n\n/* Decrypt Data */\nlet decryptedBytes = try aes.decrypt(encryptedData.bytes)\nlet decryptedData = Data(decryptedBytes)\n```\n\n###### All at once\n```swift\ndo {\n    let aes = try AES(key: \"keykeykeykeykeyk\", iv: \"drowssapdrowssap\") // aes128\n    let ciphertext = try aes.encrypt(Array(\"Nullam quis risus eget urna mollis ornare vel eu leo.\".utf8))\n} catch { }\n```\n\n###### Incremental updates\n\nIncremental operations use instance of Cryptor and encrypt/decrypt one part at a time, this way you can save on memory for large files.\n\n```swift\ndo {\n    var encryptor = try AES(key: \"keykeykeykeykeyk\", iv: \"drowssapdrowssap\").makeEncryptor()\n\n    var ciphertext = Array<UInt8>()\n    // aggregate partial results\n    ciphertext += try encryptor.update(withBytes: Array(\"Nullam quis risus \".utf8))\n    ciphertext += try encryptor.update(withBytes: Array(\"eget urna mollis \".utf8))\n    ciphertext += try encryptor.update(withBytes: Array(\"ornare vel eu leo.\".utf8))\n    // finish at the end\n    ciphertext += try encryptor.finish()\n\n    print(ciphertext.toHexString())\n} catch {\n    print(error)\n}\n```\n\n###### AES Advanced usage\n```swift\nlet input: Array<UInt8> = [0,1,2,3,4,5,6,7,8,9]\n\nlet key: Array<UInt8> = [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]\nlet iv: Array<UInt8> = // Random bytes of `AES.blockSize` length\n\ndo {\n    let encrypted = try AES(key: key, blockMode: CBC(iv: iv), padding: .pkcs7).encrypt(input)\n    let decrypted = try AES(key: key, blockMode: CBC(iv: iv), padding: .pkcs7).decrypt(encrypted)\n} catch {\n    print(error)\n}\n```\n\nAES without data padding\n\n```swift\nlet input: Array<UInt8> = [0,1,2,3,4,5,6,7,8,9]\nlet encrypted: Array<UInt8> = try! AES(key: Array(\"secret0key000000\".utf8), blockMode: CBC(iv: Array(\"0123456789012345\".utf8)), padding: .noPadding).encrypt(input)\n```\n\nUsing convenience extensions\n\n```swift\nlet plain = Data([0x01, 0x02, 0x03])\nlet encrypted = try! plain.encrypt(ChaCha20(key: key, iv: iv))\nlet decrypted = try! encrypted.decrypt(ChaCha20(key: key, iv: iv))\n```\n\n##### AES-GCM\n\nThe result of Galois/Counter Mode (GCM) encryption is ciphertext and **authentication tag**, that is later used to decryption.\n\nencryption\n\n```swift\ndo {\n    // In combined mode, the authentication tag is directly appended to the encrypted message. This is usually what you want.\n    let gcm = GCM(iv: iv, mode: .combined)\n    let aes = try AES(key: key, blockMode: gcm, padding: .noPadding)\n    let encrypted = try aes.encrypt(plaintext)\n    let tag = gcm.authenticationTag\n} catch {\n    // failed\n}\n```\n\ndecryption\n\n```swift\ndo {\n    // In combined mode, the authentication tag is appended to the encrypted message. This is usually what you want.\n    let gcm = GCM(iv: iv, mode: .combined)\n    let aes = try AES(key: key, blockMode: gcm, padding: .noPadding)\n    return try aes.decrypt(encrypted)\n} catch {\n    // failed\n}\n```\n\n**Note**: GCM instance is not intended to be reused. So you can't use the same `GCM` instance from encoding to also perform decoding.\n\n##### AES-CCM\n\nThe result of Counter with Cipher Block Chaining-Message Authentication Code encryption is ciphertext and **authentication tag**, that is later used to decryption.\n\n```swift\ndo {\n    // The authentication tag is appended to the encrypted message.\n\tlet tagLength = 8\n\tlet ccm = CCM(iv: iv, tagLength: tagLength, messageLength: ciphertext.count - tagLength, additionalAuthenticatedData: data)\n    let aes = try AES(key: key, blockMode: ccm, padding: .noPadding)\n    return try aes.decrypt(encrypted)\n} catch {\n    // failed\n}\n```\n\nCheck documentation or CCM specification for valid parameters for CCM.\n\n##### AEAD\n\n```swift\nlet encrypt = try AEADChaCha20Poly1305.encrypt(plaintext, key: key, iv: nonce, authenticationHeader: header)\nlet decrypt = try AEADChaCha20Poly1305.decrypt(ciphertext, key: key, iv: nonce, authenticationHeader: header, authenticationTag: tagArr: tag)\n```\n\n##### RSA\n\nRSA initialization from parameters\n\n```swift\nlet input: Array<UInt8> = [0,1,2,3,4,5,6,7,8,9]\n\nlet n: Array<UInt8> = // RSA modulus\nlet e: Array<UInt8> = // RSA public exponent\nlet d: Array<UInt8> = // RSA private exponent\n\nlet rsa = RSA(n: n, e: e, d: d)\n\ndo {\n    let encrypted = try rsa.encrypt(input)\n    let decrypted = try rsa.decrypt(encrypted)\n} catch {\n    print(error)\n}\n```\n\nRSA key generation\n\n```swift\nlet rsa = try RSA(keySize: 2048) // This generates a modulus, public exponent and private exponent with the given size\n```\n\nRSA Encryption & Decryption Example\n``` swift\n// Alice Generates a Private Key\nlet alicesPrivateKey = try RSA(keySize: 1024)\n    \n// Alice shares her **public** key with Bob\nlet alicesPublicKeyData = try alicesPrivateKey.publicKeyExternalRepresentation()\n    \n// Bob receives the raw external representation of Alices public key and imports it\nlet bobsImportOfAlicesPublicKey = try RSA(rawRepresentation: alicesPublicKeyData)\n    \n// Bob can now encrypt a message for Alice using her public key\nlet message = \"Hi Alice! This is Bob!\"\nlet privateMessage = try bobsImportOfAlicesPublicKey.encrypt(message.bytes)\n    \n// This results in some encrypted output like this\n// URcRwG6LfH63zOQf2w+HIllPri9Rb6hFlXbi/bh03zPl2MIIiSTjbAPqbVFmoF3RmDzFjIarIS7ZpT57a1F+OFOJjx50WYlng7dioKFS/rsuGHYnMn4csjCRF6TAqvRQcRnBueeINRRA8SLaLHX6sZuQkjIE5AoHJwgavmiv8PY=\n      \n// Bob can now send this encrypted message to Alice without worrying about people being able to read the original contents\n    \n// Alice receives the encrypted message and uses her private key to decrypt the data and recover the original message\nlet originalDecryptedMessage = try alicesPrivateKey.decrypt(privateMessage)\n    \nprint(String(data: Data(originalDecryptedMessage), encoding: .utf8))\n// \"Hi Alice! This is Bob!\"\n```\n\nRSA Signature & Verification Example\n``` swift\n// Alice Generates a Private Key\nlet alicesPrivateKey = try RSA(keySize: 1024)\n    \n// Alice wants to sign a message that she agrees with\nlet messageAliceSupports = \"Hi my name is Alice!\"\nlet alicesSignature = try alicesPrivateKey.sign(messageAliceSupports.bytes)\n    \n// Alice shares her Public key and the signature with Bob\nlet alicesPublicKeyData = try alicesPrivateKey.publicKeyExternalRepresentation()\n    \n// Bob receives the raw external representation of Alices Public key and imports it!\nlet bobsImportOfAlicesPublicKey = try RSA(rawRepresentation: alicesPublicKeyData)\n        \n// Bob can now verify that Alice signed the message using the Private key associated with her shared Public key.\nlet verifiedSignature = try bobsImportOfAlicesPublicKey.verify(signature: alicesSignature, for: \"Hi my name is Alice!\".bytes)\n    \nif verifiedSignature == true {\n  // Bob knows that the signature Alice provided is valid for the message and was signed using the Private key associated with Alices shared Public key.\n} else {\n  // The signature was invalid, so either\n  // - the message Alice signed was different then what we expected.\n  // - or Alice used a Private key that isn't associated with the shared Public key that Bob has.\n}\n```\n\nCryptoSwift RSA Key -> Apple's Security Framework SecKey Example\n``` swift\n/// Starting with a CryptoSwift RSA Key\nlet rsaKey = try RSA(keySize: 1024)\n\n/// Define your Keys attributes\nlet attributes: [String:Any] = [\n  kSecAttrKeyType as String: kSecAttrKeyTypeRSA,\n  kSecAttrKeyClass as String: kSecAttrKeyClassPrivate, // or kSecAttrKeyClassPublic\n  kSecAttrKeySizeInBits as String: 1024, // The appropriate bits\n  kSecAttrIsPermanent as String: false\n]\nvar error:Unmanaged<CFError>? = nil\nguard let rsaSecKey = try SecKeyCreateWithData(rsaKey.externalRepresentation() as CFData, attributes as CFDictionary, &error) else {\n  /// Error constructing SecKey from raw key data\n  return\n}\n\n/// You now have an RSA SecKey for use with Apple's Security framework\n```\n\nApple's Security Framework SecKey -> CryptoSwift RSA Key Example\n``` swift\n/// Starting with a SecKey RSA Key\nlet rsaSecKey:SecKey\n\n/// Copy External Representation\nvar externalRepError:Unmanaged<CFError>?\nguard let cfdata = SecKeyCopyExternalRepresentation(rsaSecKey, &externalRepError) else {\n  /// Failed to copy external representation for RSA SecKey\n  return\n}\n\n/// Instantiate the RSA Key from the raw external representation\nlet rsaKey = try RSA(rawRepresentation: cfdata as Data)\n\n/// You now have a CryptoSwift RSA Key\n```\n\n\n## Author\n\nCryptoSwift is owned and maintained by [Marcin Krzy\u017canowski](https://www.krzyzanowskim.com)\n\nYou can follow me on Twitter at [@krzyzanowskim](https://x.com/krzyzanowskim) for project updates and releases.\n\n# Cryptography Notice\n\nThis distribution includes cryptographic software. The country in which you currently reside may have restrictions on the import, possession, use, and/or re-export to another country, of encryption software. BEFORE using any encryption software, please check your country's laws, regulations and policies concerning the import, possession, or use, and re-export of encryption software, to see if this is permitted. See https://www.wassenaar.org/ for more information.\n\n## License\n\nCopyright (C) 2014-2025 Marcin Krzy\u017canowski <marcin@krzyzanowskim.com>\nThis software is provided 'as-is', without any express or implied warranty.\n\nIn no event will the authors be held liable for any damages arising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:\n\n- The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, **an acknowledgment in the product documentation is required**.\n- Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.\n- This notice may not be removed or altered from any source or binary distribution.\n- Redistributions of any form whatsoever must retain the following acknowledgment: 'This product includes software developed by the \"Marcin Krzyzanowski\" (https://krzyzanowskim.com/).'\n\n## Changelog\n\nSee [CHANGELOG](./CHANGELOG) file.\n",
        "releases": [
            {
                "name": "1.8.4",
                "date": "2024-12-23T12:25:52Z"
            },
            {
                "name": "",
                "date": "2024-08-05T17:13:05Z"
            },
            {
                "name": "",
                "date": "2024-04-11T20:09:20Z"
            },
            {
                "name": "",
                "date": "2024-01-07T23:54:45Z"
            },
            {
                "name": "",
                "date": "2023-09-05T09:43:44Z"
            },
            {
                "name": "",
                "date": "2023-06-07T22:30:44Z"
            },
            {
                "name": "",
                "date": "2023-04-21T13:47:29Z"
            },
            {
                "name": "",
                "date": "2023-04-14T23:05:27Z"
            },
            {
                "name": "",
                "date": "2022-09-17T18:55:15Z"
            },
            {
                "name": "",
                "date": "2022-04-25T12:49:22Z"
            },
            {
                "name": "",
                "date": "2022-04-22T11:19:21Z"
            },
            {
                "name": "",
                "date": "2022-02-04T18:41:57Z"
            },
            {
                "name": "",
                "date": "2021-09-28T22:09:50Z"
            },
            {
                "name": "",
                "date": "2021-07-10T10:24:34Z"
            },
            {
                "name": "",
                "date": "2021-04-27T10:46:53Z"
            },
            {
                "name": "Back to Sources",
                "date": "2020-12-01T16:58:43Z"
            },
            {
                "name": "",
                "date": "2020-11-27T16:16:22Z"
            },
            {
                "name": "1.3.6",
                "date": "2020-11-22T16:09:14Z"
            },
            {
                "name": "",
                "date": "2020-11-15T22:18:28Z"
            },
            {
                "name": "1.3.4 - binary distribution",
                "date": "2020-11-15T02:22:20Z"
            },
            {
                "name": "",
                "date": "2020-11-14T00:06:10Z"
            },
            {
                "name": "",
                "date": "2020-09-17T23:21:16Z"
            },
            {
                "name": "",
                "date": "2020-04-08T16:32:57Z"
            },
            {
                "name": "",
                "date": "2019-12-16T10:38:49Z"
            },
            {
                "name": "",
                "date": "2019-11-18T13:24:02Z"
            },
            {
                "name": "",
                "date": "2019-10-22T08:48:10Z"
            },
            {
                "name": "",
                "date": "2019-10-15T16:47:06Z"
            },
            {
                "name": "",
                "date": "2019-10-14T09:15:54Z"
            },
            {
                "name": "",
                "date": "2019-10-13T17:42:19Z"
            },
            {
                "name": "",
                "date": "2019-03-28T20:16:46Z"
            },
            {
                "name": "",
                "date": "2019-03-23T11:01:54Z"
            },
            {
                "name": "",
                "date": "2019-02-07T10:31:05Z"
            },
            {
                "name": "",
                "date": "2018-12-02T11:36:12Z"
            },
            {
                "name": "",
                "date": "2018-10-23T13:02:08Z"
            },
            {
                "name": "",
                "date": "2018-09-15T10:09:11Z"
            },
            {
                "name": "",
                "date": "2018-07-31T23:29:16Z"
            },
            {
                "name": "",
                "date": "2018-05-29T20:30:58Z"
            },
            {
                "name": "CMAC, AEAD and Swift 4.1",
                "date": "2018-03-30T19:23:23Z"
            },
            {
                "name": "",
                "date": "2018-02-22T18:31:10Z"
            },
            {
                "name": "",
                "date": "2018-02-22T18:31:23Z"
            },
            {
                "name": "",
                "date": "2018-01-11T10:40:58Z"
            },
            {
                "name": "",
                "date": "2017-10-15T23:06:18Z"
            },
            {
                "name": "",
                "date": "2017-09-21T23:31:34Z"
            },
            {
                "name": "Swift 4.0",
                "date": "2017-09-21T07:42:33Z"
            },
            {
                "name": "Swift 3.2",
                "date": "2017-09-12T22:36:27Z"
            },
            {
                "name": "",
                "date": "2017-04-30T18:16:47Z"
            },
            {
                "name": "Faster & better",
                "date": "2017-03-20T21:48:27Z"
            },
            {
                "name": "Xcode 8.2",
                "date": "2016-12-15T23:07:22Z"
            },
            {
                "name": "Faster",
                "date": "2016-10-29T12:06:10Z"
            },
            {
                "name": "Blowfish",
                "date": "2016-10-27T00:29:59Z"
            },
            {
                "name": "Hotfix",
                "date": "2016-10-24T14:37:47Z"
            },
            {
                "name": "Digests \ud83d\ude80",
                "date": "2016-10-24T10:08:33Z"
            },
            {
                "name": "Swift Three",
                "date": "2016-09-13T09:08:40Z"
            }
        ]
    }
}