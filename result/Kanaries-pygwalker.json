{
    "https://api.github.com/repos/Kanaries/pygwalker": {
        "forks": 722,
        "watchers": 13755,
        "stars": 13755,
        "languages": {
            "Python": 223570,
            "TypeScript": 123552,
            "Jupyter Notebook": 30339,
            "HTML": 5405,
            "JavaScript": 2207,
            "CSS": 1515,
            "Shell": 1248
        },
        "commits": [
            "2025-01-07T05:59:59Z",
            "2024-12-30T13:34:04Z",
            "2024-12-21T03:25:32Z",
            "2024-12-06T20:58:15Z",
            "2024-11-27T12:57:10Z",
            "2024-11-23T16:15:45Z",
            "2024-11-23T16:14:52Z",
            "2024-11-23T16:14:15Z",
            "2024-11-23T16:13:36Z",
            "2024-11-23T16:12:58Z",
            "2024-11-23T16:12:21Z",
            "2024-11-23T16:11:42Z",
            "2024-11-23T16:06:26Z",
            "2024-11-13T02:06:00Z",
            "2024-11-13T01:58:17Z",
            "2024-11-13T01:57:17Z",
            "2024-11-08T08:59:49Z",
            "2024-11-08T08:57:41Z",
            "2024-11-08T08:54:20Z",
            "2024-11-06T17:17:37Z",
            "2024-11-06T11:17:36Z",
            "2024-11-06T11:13:17Z",
            "2024-11-06T08:55:24Z",
            "2024-11-06T03:54:55Z",
            "2024-11-05T07:27:59Z",
            "2024-10-31T02:39:41Z",
            "2024-10-29T05:21:11Z",
            "2024-10-26T14:42:13Z",
            "2024-10-15T10:43:37Z",
            "2024-10-15T10:25:34Z"
        ],
        "creation_date": "2023-02-16T05:17:24Z",
        "contributors": 22,
        "topics": [
            "data-analysis",
            "data-exploration",
            "dataframe",
            "matplotlib",
            "pandas",
            "plotly",
            "tableau",
            "tableau-alternative",
            "visualization"
        ],
        "subscribers": 82,
        "readme": "[English](README.md) | [Espa\u00f1ol](./docs/README.es.md) | [Fran\u00e7ais](./docs/README.fr.md) | [Deutsch](./docs/README.de.md) | [\u4e2d\u6587](./docs/README.zh.md) | [T\u00fcrk\u00e7e](./docs/README.tr.md) | [\u65e5\u672c\u8a9e](./docs/README.ja.md) | [\ud55c\uad6d\uc5b4](./docs/README.ko.md)\n\n\n<p align=\"center\"><a href=\"https://github.com/Kanaries/pygwalker\"><img width=100% alt=\"\" src=\"https://github.com/user-attachments/assets/f90db669-6e5a-45d3-942e-547c9d0471c9\" /></a></p>\n\n<h2 align=\"center\">PyGWalker: A Python Library for Exploratory Data Analysis with Visualization</h2>\n\n<p align=\"center\">\n    <a href=\"https://arxiv.org/abs/2406.11637\">\n      <img src=\"https://img.shields.io/badge/arXiv-2406.11637-b31b1b.svg\" height=\"18\" align=\"center\">\n    </a>\n    <a href=\"https://badge.fury.io/py/pygwalker\">\n        <img src=\"https://badge.fury.io/py/pygwalker.svg\" alt=\"PyPI version\" height=\"18\" align=\"center\" />\n    </a>\n    <a href=\"https://mybinder.org/v2/gh/Kanaries/pygwalker/main\">\n      <img src=\"https://mybinder.org/badge_logo.svg\" alt=\"binder\" height=\"18\" align=\"center\" />\n    </a>\n    <a href=\"https://pypi.org/project/pygwalker\">\n      <img src=\"https://img.shields.io/pypi/dm/pygwalker\" alt=\"PyPI downloads\" height=\"18\" align=\"center\" />\n    </a>\n    <a href=\"https://anaconda.org/conda-forge/pygwalker\"> <img src=\"https://anaconda.org/conda-forge/pygwalker/badges/version.svg\" alt=\"conda-forge\" height=\"18\" align=\"center\" /> </a>\n</p>\n\n<p align=\"center\">\n    <a href=\"https://discord.gg/Z4ngFWXz2U\">\n      <img alt=\"discord invitation link\" src=\"https://dcbadge.vercel.app/api/server/Z4ngFWXz2U?style=flat\" align=\"center\" />\n    </a>\n    <a href='https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fpublish.twitter.com%2F&ref_src=twsrc%5Etfw&screen_name=kanaries_data&tw_p=followbutton'>\n        <img alt=\"Twitter Follow\" src=\"https://img.shields.io/twitter/follow/kanaries_data?style=social\" alt='Twitter' align=\"center\" />\n    </a>\n    <a href=\"https://kanaries-community.slack.com/join/shared_invite/zt-20kpp56wl-ke9S0MxTcNQjUhKf6SOfvQ#/shared-invite/email\">\n      <img src=\"https://img.shields.io/badge/Slack-green?style=flat-square&logo=slack&logoColor=white\" alt=\"Join Kanaries on Slack\" align=\"center\" />\n    </a> \n</p>\n\n[**PyGWalker**](https://github.com/Kanaries/pygwalker) can simplify your Jupyter Notebook data analysis and data visualization workflow, by turning your pandas dataframe into an interactive user interface for visual exploration.\n\n**PyGWalker** (pronounced like \"Pig Walker\", just for fun) is named as an abbreviation of \"**Py**thon binding of **G**raphic **Walker**\". It integrates Jupyter Notebook with [Graphic Walker](https://github.com/Kanaries/graphic-walker), an open-source alternative to Tableau. It allows data scientists to visualize / clean / annotates the data with simple drag-and-drop operations and even natural language queries.\n     \nVisit [Google Colab](https://colab.research.google.com/drive/171QUQeq-uTLgSj1u-P9DQig7Md1kpXQ2?usp=sharing), [Kaggle Code](https://www.kaggle.com/code/lxy21495892/airbnb-eda-pygwalker-demo) or [Graphic Walker Online Demo](https://graphic-walker.kanaries.net/) to test it out!\n\n> If you prefer using R, check [GWalkR](https://github.com/Kanaries/GWalkR), the R wrapper of Graphic Walker.\n\n\n\nhttps://github.com/Kanaries/pygwalker/assets/22167673/2b940e11-cf8b-4cde-b7f6-190fb10ee44b\n\n\n\n# Getting Started\n> Check our video tutorial about using pygwalker, pygwalker + streamlit and pygwalker + snowflake, [How to explore data with PyGWalker in Python\n](https://youtu.be/rprn79wfB9E?si=lAsJn1cAQnb-EklD)\n\n| [Run in Kaggle](https://www.kaggle.com/code/lxy21495892/airbnb-eda-pygwalker-demo) | [Run in Colab](https://colab.research.google.com/drive/171QUQeq-uTLgSj1u-P9DQig7Md1kpXQ2?usp=sharing) |\n|--------------------------------------------------------------|--------------------------------------------------------|\n| [![Kaggle Code](https://docs-us.oss-us-west-1.aliyuncs.com/img/pygwalker/kaggle.png)](https://www.kaggle.com/code/lxy21495892/airbnb-eda-pygwalker-demo) | [![Google Colab](https://docs-us.oss-us-west-1.aliyuncs.com/img/pygwalker/colab.png)](https://colab.research.google.com/drive/171QUQeq-uTLgSj1u-P9DQig7Md1kpXQ2?usp=sharing) |\n\n## Setup pygwalker\n\nBefore using pygwalker, make sure to install the packages through the command line using pip or conda.\n\n### pip\n\n```bash\npip install pygwalker\n```\n> **Note**\n> \n> For an early trial, you can install with `pip install pygwalker --upgrade` to keep your version up to date with the latest release or even `pip install pygwalker --upgrade --pre` to obtain latest features and bug-fixes.\n\n### Conda-forge\n```bash\nconda install -c conda-forge pygwalker\n```\nor\n```bash\nmamba install -c conda-forge pygwalker\n```\nSee [conda-forge feedstock](https://github.com/conda-forge/pygwalker-feedstock) for more help.\n\n\n## Use pygwalker in Jupyter Notebook\n\n### Quick Start\n\nImport pygwalker and pandas to your Jupyter Notebook to get started.\n\n```python    \nimport pandas as pd\nimport pygwalker as pyg\n```\n\nYou can use pygwalker without breaking your existing workflow. For example, you can call up PyGWalker with the dataframe loaded in this way:\n\n```python\ndf = pd.read_csv('./bike_sharing_dc.csv')\nwalker = pyg.walk(df)\n```\n\n![](https://docs-us.oss-us-west-1.aliyuncs.com/img/pygwalker/travel-ani-0-light.gif)\n\nThat's it. Now you have an interactive UI to analyze and visualize data with simple drag-and-drop operations.\n\n![](https://docs-us.oss-us-west-1.aliyuncs.com/img/pygwalker/travel-ani-1-light.gif)\n\nCool things you can do with PyGwalker:\n\n+ You can change the mark type into others to make different charts, for example, a line chart:\n![graphic walker line chart](https://user-images.githubusercontent.com/8137814/221894699-b9623304-4eb1-4051-b29d-ca4a913fb7c7.png)\n\n+ To compare different measures, you can create a concat view by adding more than one measure into rows/columns.\n![graphic walker area chart](https://user-images.githubusercontent.com/8137814/224550839-7b8a2193-d3e9-4c11-a19e-ad8e5ec19539.png)\n\n+ To make a facet view of several subviews divided by the value in dimension, put dimensions into rows or columns to make a facets view.\n![graphic walker scatter chart](https://user-images.githubusercontent.com/8137814/221894480-b5ec5df2-d0bb-45bc-aa3d-6479920b6fe2.png)\n\n+ PyGWalker contains a powerful data table, which provides a quick view of data and its distribution, profiling. You can also add filters or change the data types in the table.\n<img width=\"1537\" alt=\"pygwalker-data-preview\" src=\"https://github.com/Kanaries/pygwalker/assets/22167673/e3239932-bc3c-4de3-8387-1eabf2ca3a3a\">\n\n+ You can save the data exploration result to a local file\n\n### Better Practices\n\nThere are some important parameters you should know when using pygwalker: \n\n+ `spec`: for save/load chart config (json string or file path)\n+ `kernel_computation`: for using duckdb as computing engine which allows you to handle larger dataset faster in your local machine.\n+ `use_kernel_calc`: Deprecated, use `kernel_computation` instead.\n\n```python\ndf = pd.read_csv('./bike_sharing_dc.csv')\nwalker = pyg.walk(\n    df,\n    spec=\"./chart_meta_0.json\",    # this json file will save your chart state, you need to click save button in ui mannual when you finish a chart, 'autosave' will be supported in the future.\n    kernel_computation=True,          # set `kernel_computation=True`, pygwalker will use duckdb as computing engine, it support you explore bigger dataset(<=100GB).\n)\n```\n\n### Example in local notebook\n\n* Notebook Code: [Click Here](https://github.com/Kanaries/pygwalker-offline-example)\n* Preview Notebook Html: [Click Here](https://pygwalker-public-bucket.s3.amazonaws.com/demo.html)\n\n### Example in cloud notebook\n\n* [Use PyGWalker in Kaggle](https://www.kaggle.com/code/lxy21495892/airbnb-eda-pygwalker-demo)\n* [Use PyGWalker in Google Colab](https://colab.research.google.com/drive/171QUQeq-uTLgSj1u-P9DQig7Md1kpXQ2?usp=sharing)\n\n## Use pygwalker in Streamlit\nStreamlit allows you to host a web version of pygwalker without figuring out details of how web application works.\n\nHere are some of the app examples build with pygwalker and streamlit:\n+ [PyGWalker + streamlit for Bike sharing dataset](https://pygwalkerdemo-cxz7f7pt5oc.streamlit.app/)\n+ [Earthquake Dashboard](https://earthquake-dashboard-pygwalker.streamlit.app/)\n\n[![](https://user-images.githubusercontent.com/22167673/271170853-5643c3b1-6216-4ade-87f4-41c6e6893eab.png)](https://earthquake-dashboard-pygwalker.streamlit.app/)\n\n```python\nfrom pygwalker.api.streamlit import StreamlitRenderer\nimport pandas as pd\nimport streamlit as st\n\n# Adjust the width of the Streamlit page\nst.set_page_config(\n    page_title=\"Use Pygwalker In Streamlit\",\n    layout=\"wide\"\n)\n\n# Add Title\nst.title(\"Use Pygwalker In Streamlit\")\n\n# You should cache your pygwalker renderer, if you don't want your memory to explode\n@st.cache_resource\ndef get_pyg_renderer() -> \"StreamlitRenderer\":\n    df = pd.read_csv(\"./bike_sharing_dc.csv\")\n    # If you want to use feature of saving chart config, set `spec_io_mode=\"rw\"`\n    return StreamlitRenderer(df, spec=\"./gw_config.json\", spec_io_mode=\"rw\")\n\n\nrenderer = get_pyg_renderer()\n\nrenderer.explorer()\n```\n\n## [API Reference](https://pygwalker-docs.vercel.app/api-reference/jupyter)\n\n### [pygwalker.walk](https://pygwalker-docs.vercel.app/api-reference/jupyter#walk)\n\n\n| Parameter              | Type                                                      | Default              | Description                                                                                                                                      |\n|------------------------|-----------------------------------------------------------|----------------------|--------------------------------------------------------------------------------------------------------------------------------------------------|\n| dataset                | Union[DataFrame, Connector]                               | -                    | The dataframe or connector to be used.                                                                                                           |\n| gid                    | Union[int, str]                                           | None                 | ID for the GraphicWalker container div, formatted as 'gwalker-{gid}'.                                                                            |\n| env                    | Literal['Jupyter', 'JupyterWidget']          | 'JupyterWidget'      | Environment using pygwalker.                                                                                                                     |\n| field_specs             | Optional[Dict[str, FieldSpec]]                            | None                 | Specifications of fields. Will be automatically inferred from `dataset` if not specified.                                                        |\n| hide_data_source_config   | bool                                                      | True                 | If True, hides DataSource import and export button.                                                                                              |\n| theme_key               | Literal['vega', 'g2']                                     | 'g2'                 | Theme type for the GraphicWalker.                                                                                                                |\n| appearance                   | Literal['media', 'light', 'dark']                         | 'media'              | Theme setting. 'media' will auto-detect the OS theme.                                                                                            |\n| spec                   | str                                                       | \"\"                   | Chart configuration data. Can be a configuration ID, JSON, or remote file URL.                                                                   |\n| use_preview            | bool                                                      | True                 | If True, uses the preview function.                                                                                                              |\n| kernel_computation        | bool                                                      | False                | If True, uses kernel computation for data.                                                                                                       |\n| **kwargs               | Any                                                       | -                    | Additional keyword arguments.                                                                                                                    |\n\n## Development\n\nRefer it: [local-development](https://docs.kanaries.net/pygwalker/installation#local-development)\n\n## Tested Environments\n\n- [x] Jupyter Notebook\n- [x] Google Colab\n- [x] Kaggle Code\n- [x] Jupyter Lab\n- [x] Jupyter Lite\n- [x] Databricks Notebook (Since version `0.1.4a0`)\n- [x] Jupyter Extension for Visual Studio Code (Since version `0.1.4a0`)\n- [x] Most web applications compatiable with IPython kernels. (Since version `0.1.4a0`)\n- [x] **Streamlit (Since version `0.1.4.9`)**, enabled with `pyg.walk(df, env='Streamlit')`\n- [x] DataCamp Workspace (Since version `0.1.4a0`)\n- [x] Panel. See [panel-graphic-walker](https://github.com/panel-extensions/panel-graphic-walker).\n- [x] marimo (Since version `0.4.9.11`)\n- [ ] Hex Projects \n- [ ] ...feel free to raise an issue for more environments.\n\n## Configuration And Privacy Policy(pygwalker >= 0.3.10)\n\nYou can use `pygwalker config` to set your privacy configuration.\n\n```bash\n$ pygwalker config --help\n\nusage: pygwalker config [-h] [--set [key=value ...]] [--reset [key ...]] [--reset-all] [--list]\n\nModify configuration file. (default: ~/Library/Application Support/pygwalker/config.json) \nAvailable configurations:\n\n- privacy  ['offline', 'update-only', 'events'] (default: events).\n    \"offline\": fully offline, no data is send or api is requested\n    \"update-only\": only check whether this is a new version of pygwalker to update\n    \"events\": share which events about which feature is used in pygwalker, it only contains events data about which feature you arrive for product optimization. No DATA YOU ANALYSIS IS SEND. Events data will bind with a unique id, which is generated by pygwalker when it is installed based on timestamp. We will not collect any other information about you.\n    \n- kanaries_token  ['your kanaries token'] (default: empty string).\n    your kanaries token, you can get it from https://kanaries.net.\n    refer: https://space.kanaries.net/t/how-to-get-api-key-of-kanaries.\n    by kanaries token, you can use kanaries service in pygwalker, such as share chart, share config.\n    \n\noptions:\n  -h, --help            show this help message and exit\n  --set [key=value ...]\n                        Set configuration. e.g. \"pygwalker config --set privacy=update-only\"\n  --reset [key ...]     Reset user configuration and use default values instead. e.g. \"pygwalker config --reset privacy\"\n  --reset-all           Reset all user configuration and use default values instead. e.g. \"pygwalker config --reset-all\"\n  --list                List current used configuration.\n```\n\nMore details, refer it: [How to set your privacy configuration?](https://github.com/Kanaries/pygwalker/wiki/How-to-set-your-privacy-configuration%3F)\n\n# License\n\n[Apache License 2.0](https://github.com/Kanaries/pygwalker/blob/main/LICENSE)\n\n# Resources\n\n> PyGWalker Cloud is released! You can now save your charts to cloud, publish the interactive cell as a web app and use advanced GPT-powered features. Check out the [PyGWalker Cloud](https://kanaries.net/pygwalker?from=gh_md) for more details.\n\n+ Check out more resources about PyGWalker on [Kanaries PyGWalker](https://kanaries.net/pygwalker)\n+ PyGWalker Paper [PyGWalker: On-the-fly Assistant for Exploratory Visual Data Analysis\n](https://arxiv.org/abs/2406.11637)\n+ We are also working on [RATH](https://kanaries.net): an Open Source, Automate exploratory data analysis software that redefines the workflow of data wrangling, exploration and visualization with AI-powered automation. Check out the [Kanaries website](https://kanaries.net) and [RATH GitHub](https://github.com/Kanaries/Rath) for more!\n+ [Youtube: How to explore data with PyGWalker in Python\n](https://youtu.be/rprn79wfB9E?si=lAsJn1cAQnb-EklD)\n+ [Use pygwalker to build visual analysis app in streamlit](https://docs.kanaries.net/pygwalker/use-pygwalker-with-streamlit)\n+ Use [panel-graphic-walker](https://github.com/panel-extensions/panel-graphic-walker) to build data visualization apps with Panel.\n+ If you encounter any issues and need support, please join our [Discord](https://discord.gg/Z4ngFWXz2U) channel or raise an issue on github.\n+ Share pygwalker on these social media platforms if you like it!\n[![Reddit](https://img.shields.io/badge/share%20on-reddit-red?style=flat-square&logo=reddit)](https://reddit.com/submit?url=https://github.com/Kanaries/pygwalker&title=Say%20Hello%20to%20pygwalker%3A%20Combining%20Jupyter%20Notebook%20with%20a%20Tableau-like%20UI)\n[![HackerNews](https://img.shields.io/badge/share%20on-hacker%20news-orange?style=flat-square&logo=ycombinator)](https://news.ycombinator.com/submitlink?u=https://github.com/Kanaries/pygwalker)\n[![Twitter](https://img.shields.io/badge/share%20on-twitter-03A9F4?style=flat-square&logo=twitter)](https://twitter.com/share?url=https://github.com/Kanaries/pygwalker&text=Say%20Hello%20to%20pygwalker%3A%20Combining%20Jupyter%20Notebook%20with%20a%20Tableau-alternative%20UI)\n[![Facebook](https://img.shields.io/badge/share%20on-facebook-1976D2?style=flat-square&logo=facebook)](https://www.facebook.com/sharer/sharer.php?u=https://github.com/Kanaries/pygwalker)\n[![LinkedIn](https://img.shields.io/badge/share%20on-linkedin-3949AB?style=flat-square&logo=linkedin)](https://www.linkedin.com/shareArticle?url=https://github.com/Kanaries/pygwalker&&title=Say%20Hello%20to%20pygwalker%3A%20Combining%20Jupyter%20Notebook%20with%20a%20Tableau-alternative%20UI)\n",
        "releases": [
            {
                "name": "0.4.9.9",
                "date": "2024-09-19T11:15:39Z"
            },
            {
                "name": "0.4.9.4",
                "date": "2024-08-01T06:17:26Z"
            },
            {
                "name": "0.4.9.3",
                "date": "2024-07-25T08:19:13Z"
            },
            {
                "name": "0.4.9",
                "date": "2024-06-27T05:02:00Z"
            },
            {
                "name": "0.4.8.10",
                "date": "2024-06-20T05:46:29Z"
            },
            {
                "name": "0.4.8.9",
                "date": "2024-06-05T02:58:02Z"
            },
            {
                "name": "0.4.8.7",
                "date": "2024-05-29T08:23:27Z"
            },
            {
                "name": "0.4.8.5",
                "date": "2024-05-19T13:34:24Z"
            },
            {
                "name": "0.4.8.4",
                "date": "2024-05-15T09:14:45Z"
            },
            {
                "name": "0.4.8",
                "date": "2024-04-12T14:06:05Z"
            },
            {
                "name": "0.4.7",
                "date": "2024-03-08T13:20:24Z"
            },
            {
                "name": "0.4.6",
                "date": "2024-02-08T06:16:56Z"
            },
            {
                "name": "0.4.5",
                "date": "2024-02-02T14:52:49Z"
            },
            {
                "name": "0.4.4",
                "date": "2024-01-25T09:16:24Z"
            },
            {
                "name": "0.4.3",
                "date": "2024-01-24T02:03:33Z"
            },
            {
                "name": "0.4.2",
                "date": "2024-01-17T10:11:19Z"
            },
            {
                "name": "0.4.1",
                "date": "2024-01-15T02:09:35Z"
            },
            {
                "name": "0.4.0",
                "date": "2024-01-09T05:47:36Z"
            },
            {
                "name": "0.3.20",
                "date": "2023-12-29T09:56:44Z"
            },
            {
                "name": "0.3.19",
                "date": "2023-12-22T11:37:13Z"
            },
            {
                "name": "0.3.18",
                "date": "2023-12-14T15:30:10Z"
            },
            {
                "name": "0.3.17",
                "date": "2023-12-06T12:13:47Z"
            },
            {
                "name": "0.3.16",
                "date": "2023-11-24T11:56:27Z"
            },
            {
                "name": "0.3.16a0",
                "date": "2023-11-16T08:43:08Z"
            },
            {
                "name": "0.3.15",
                "date": "2023-11-14T13:16:02Z"
            },
            {
                "name": "0.3.14",
                "date": "2023-11-14T07:44:54Z"
            },
            {
                "name": "0.3.13",
                "date": "2023-11-13T15:59:08Z"
            },
            {
                "name": "0.3.12",
                "date": "2023-11-11T02:45:38Z"
            },
            {
                "name": "0.3.12a0",
                "date": "2023-11-08T03:51:26Z"
            },
            {
                "name": "0.3.11",
                "date": "2023-11-07T09:21:04Z"
            },
            {
                "name": "0.3.10",
                "date": "2023-11-03T10:07:30Z"
            },
            {
                "name": "0.3.10a3",
                "date": "2023-10-30T20:13:24Z"
            },
            {
                "name": "0.3.9",
                "date": "2023-10-18T12:24:15Z"
            },
            {
                "name": "0.3.8",
                "date": "2023-10-17T10:25:17Z"
            },
            {
                "name": "0.3.8a7",
                "date": "2023-10-14T05:32:51Z"
            },
            {
                "name": "0.3.7",
                "date": "2023-09-22T09:15:16Z"
            },
            {
                "name": "0.3.6",
                "date": "2023-09-15T03:17:06Z"
            },
            {
                "name": "0.3.5",
                "date": "2023-09-01T09:02:30Z"
            },
            {
                "name": "0.3.4",
                "date": "2023-08-24T09:16:14Z"
            },
            {
                "name": "0.3.3",
                "date": "2023-08-17T12:28:52Z"
            },
            {
                "name": "0.3.2",
                "date": "2023-08-10T12:46:34Z"
            },
            {
                "name": "0.3.0",
                "date": "2023-08-08T11:09:54Z"
            },
            {
                "name": "0.2.0",
                "date": "2023-07-25T05:39:00Z"
            },
            {
                "name": "0.2.0a1",
                "date": "2023-07-12T12:50:00Z"
            },
            {
                "name": "0.1.11",
                "date": "2023-06-25T11:59:36Z"
            },
            {
                "name": "0.1.10",
                "date": "2023-06-20T07:48:25Z"
            },
            {
                "name": "[0.1.9.1] Fix some bugs",
                "date": "2023-05-31T12:54:46Z"
            },
            {
                "name": "[0.1.9] Adding multiple ways to export and import charts.",
                "date": "2023-05-26T02:23:55Z"
            },
            {
                "name": "[0.1.8] Allow larger data in browser",
                "date": "2023-05-15T03:14:56Z"
            },
            {
                "name": "[0.1.8.dev1] [Feat]: Tunnel with Jupyter Comms",
                "date": "2023-05-08T09:46:49Z"
            },
            {
                "name": "[0.1.8.dev0] [Feat]: Supports large DataFrames",
                "date": "2023-04-28T10:14:10Z"
            },
            {
                "name": "[0.1.7] Now you can specify field meta as an argument!",
                "date": "2023-04-23T06:11:40Z"
            },
            {
                "name": "0.1.6.1",
                "date": "2023-04-14T04:11:27Z"
            },
            {
                "name": "[0.1.5.0a3] [Feat] Export vis specifications (pre-release)",
                "date": "2023-03-09T03:41:42Z"
            },
            {
                "name": "0.1.4.8",
                "date": "2023-03-06T18:13:27Z"
            },
            {
                "name": "0.1.4.7",
                "date": "2023-03-03T18:11:06Z"
            },
            {
                "name": "0.1.4.3",
                "date": "2023-02-24T21:54:48Z"
            },
            {
                "name": "[0.1.4]: Support Most Envs and Fix Special-Character problems",
                "date": "2023-02-22T21:19:29Z"
            },
            {
                "name": "0.1.4-alpha",
                "date": "2023-02-21T21:12:52Z"
            },
            {
                "name": "[Fix]Codemap issue on Windows",
                "date": "2023-02-21T02:43:47Z"
            },
            {
                "name": "",
                "date": "2023-02-20T15:08:17Z"
            },
            {
                "name": "",
                "date": "2023-02-20T16:08:51Z"
            },
            {
                "name": "Version 0.1.0",
                "date": "2023-02-17T22:45:44Z"
            }
        ]
    }
}