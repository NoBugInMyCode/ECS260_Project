{
    "https://api.github.com/repos/gruns/icecream": {
        "forks": 197,
        "watchers": 9439,
        "stars": 9439,
        "languages": {
            "Python": 82589
        },
        "commits": [
            "2025-01-13T02:40:57Z",
            "2025-01-10T23:51:43Z",
            "2025-01-09T16:01:17Z",
            "2025-01-09T15:56:09Z",
            "2025-01-09T15:55:08Z",
            "2025-01-09T05:37:51Z",
            "2024-11-21T05:38:16Z",
            "2024-11-19T17:39:51Z",
            "2024-11-19T03:17:07Z",
            "2024-11-17T10:23:41Z",
            "2024-11-12T16:06:29Z",
            "2024-11-12T04:18:14Z",
            "2024-11-11T01:35:29Z",
            "2024-11-07T08:25:51Z",
            "2024-11-06T20:09:40Z",
            "2024-11-06T07:33:17Z",
            "2024-02-28T14:50:27Z",
            "2024-02-28T14:50:20Z",
            "2024-02-28T14:12:23Z",
            "2024-02-28T14:11:51Z",
            "2024-02-28T14:11:22Z",
            "2024-02-28T11:18:02Z",
            "2024-02-28T11:11:09Z",
            "2024-02-28T11:08:13Z",
            "2024-02-28T11:04:42Z",
            "2024-02-28T11:04:09Z",
            "2024-02-28T11:02:50Z",
            "2024-02-28T11:01:24Z",
            "2024-02-28T10:57:52Z",
            "2024-02-13T01:02:44Z"
        ],
        "creation_date": "2018-02-13T18:56:12Z",
        "contributors": 22,
        "topics": [
            "debug",
            "debugging",
            "debugging-tool",
            "inspects",
            "library",
            "print",
            "python",
            "python3"
        ],
        "subscribers": 53,
        "readme": "<h1 align=\"center\">\n  <img src=\"logo.svg\" width=\"220px\" height=\"370px\" alt=\"IceCream\">\n</h1>\n\n<p align=\"center\">\n  <a href=\"https://pypi.python.org/pypi/icecream\"><img src=\"https://badge.fury.io/py/icecream.svg\"></a>\n  <a href=\"https://github.com/gruns/icecream/actions/workflows/ci.yml\"><img src=\"https://github.com/gruns/icecream/actions/workflows/ci.yml/badge.svg\"></a>\n  <a href=\"http://unlicense.org/\"><img src=\"https://img.shields.io/pypi/l/icecream.svg\"></a>\n  <a href=\"https://pypi.python.org/pypi/icecream\"><img src=\"https://img.shields.io/pypi/pyversions/icecream.svg\"></a>\n</p>\n\n\n### IceCream \u2014 Never use print() to debug again\n\nDo you ever use `print()` or `log()` to debug your code? Of course you\ndo. IceCream, or `ic` for short, makes print debugging a little sweeter.\n\n`ic()` is like `print()`, but better:\n\n  1. It prints both variables and expressions along with their values.\n  2. It's 60% faster to type.\n  3. Data structures are formatted and pretty printed.\n  4. Output is syntax highlighted.\n  5. It optionally includes program context: filename, line number, and\n     parent function.\n\nIceCream is well tested, [permissively licensed](LICENSE.txt), and supports Python 3 and PyPy3.\n\n\ud83d\udc65 IceCream is looking for a lead contributor + maintainer. Would you\nlove to lead IceCream and improve debugging for everyone in Python?\nPlease [reach out](mailto:grunseid+icecream@gmail.com) and let me know! \ud83d\ude4c\n\n\n### Inspect Variables\n\nHave you ever printed variables or expressions to debug your program? If\nyou've ever typed something like\n\n```python\nprint(foo('123'))\n```\n\nor the more thorough\n\n```python\nprint(\"foo('123')\", foo('123'))\n```\n\nthen `ic()` will put a smile on your face. With arguments, `ic()`\ninspects itself and prints both its own arguments and the values of\nthose arguments.\n\n```python\nfrom icecream import ic\n\ndef foo(i):\n    return i + 333\n\nic(foo(123))\n```\n\nPrints\n\n```\nic| foo(123): 456\n```\n\nSimilarly,\n\n```python\nd = {'key': {1: 'one'}}\nic(d['key'][1])\n\nclass klass():\n    attr = 'yep'\nic(klass.attr)\n```\n\nPrints\n\n```\nic| d['key'][1]: 'one'\nic| klass.attr: 'yep'\n```\n\nJust give `ic()` a variable or expression and you're done. Easy.\n\n\n### Inspect Execution\n\nHave you ever used `print()` to determine which parts of your program are\nexecuted, and in which order they're executed? For example, if you've ever added\nprint statements to debug code like\n\n```python\ndef foo():\n    print(0)\n    first()\n\n    if expression:\n        print(1)\n        second()\n    else:\n        print(2)\n        third()\n```\n\nthen `ic()` helps here, too. Without arguments, `ic()` inspects itself and\nprints the calling filename, line number, and parent function.\n\n```python\nfrom icecream import ic\n\ndef foo():\n    ic()\n    first()\n\n    if expression:\n        ic()\n        second()\n    else:\n        ic()\n        third()\n```\n\nPrints\n\n```\nic| example.py:4 in foo()\nic| example.py:11 in foo()\n```\n\nJust call `ic()` and you're done. Simple.\n\n\n### Return Value\n\n`ic()` returns its argument(s), so `ic()` can easily be inserted into\npre-existing code.\n\n```pycon\n>>> a = 6\n>>> def half(i):\n>>>     return i / 2\n>>> b = half(ic(a))\nic| a: 6\n>>> ic(b)\nic| b: 3\n```\n\n\n### Miscellaneous\n\n`ic.format(*args)` is like `ic()` but the output is returned as a string instead\nof written to stderr.\n\n```pycon\n>>> from icecream import ic\n>>> s = 'sup'\n>>> out = ic.format(s)\n>>> print(out)\nic| s: 'sup'\n```\n\nAdditionally, `ic()`'s output can be entirely disabled, and later re-enabled, with\n`ic.disable()` and `ic.enable()` respectively.\n\n```python\nfrom icecream import ic\n\nic(1)\n\nic.disable()\nic(2)\n\nic.enable()\nic(3)\n```\n\nPrints\n\n```\nic| 1: 1\nic| 3: 3\n```\n\n`ic()` continues to return its arguments when disabled, of course; no existing\ncode with `ic()` breaks.\n\n\n### Import Tricks\n\nTo make `ic()` available in every file without needing to be imported in\nevery file, you can `install()` it. For example, in a root `A.py`:\n\n```python\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom icecream import install\ninstall()\n\nfrom B import foo\nfoo()\n```\n\nand then in `B.py`, which is imported by `A.py`, just call `ic()`:\n\n```python\n# -*- coding: utf-8 -*-\n\ndef foo():\n    x = 3\n    ic(x)\n```\n\n`install()` adds `ic()` to the\n[builtins](https://docs.python.org/3.8/library/builtins.html) module,\nwhich is shared amongst all files imported by the interpreter.\nSimilarly, `ic()` can later be `uninstall()`ed, too.\n\n`ic()` can also be imported in a manner that fails gracefully if\nIceCream isn't installed, like in production environments (i.e. not\ndevelopment). To that end, this fallback import snippet may prove\nuseful:\n\n```python\ntry:\n    from icecream import ic\nexcept ImportError:  # Graceful fallback if IceCream isn't installed.\n    ic = lambda *a: None if not a else (a[0] if len(a) == 1 else a)  # noqa\n```\n\n\n### Configuration\n\n`ic.configureOutput(prefix, outputFunction, argToStringFunction,\nincludeContext, contextAbsPath)` controls `ic()`'s output.\n\n`prefix`, if provided, adopts a custom output prefix. `prefix` can be a\nstring, like\n\n```pycon\n>>> from icecream import ic\n>>> ic.configureOutput(prefix='hello -> ')\n>>> ic('world')\nhello -> 'world'\n```\n\nor a function.\n\n```pycon\n>>> import time\n>>> from icecream import ic\n>>>  \n>>> def unixTimestamp():\n>>>     return '%i |> ' % int(time.time())\n>>>\n>>> ic.configureOutput(prefix=unixTimestamp)\n>>> ic('world')\n1519185860 |> 'world': 'world'\n```\n\n`prefix`'s default value is `ic| `.\n\n`outputFunction`, if provided, is called once for every `ic()` call with\n`ic()`'s output, as a string, instead of that string being written to\nstderr (the default).\n\n```pycon\n>>> import logging\n>>> from icecream import ic\n>>>\n>>> def warn(s):\n>>>     logging.warning(s)\n>>>\n>>> ic.configureOutput(outputFunction=warn)\n>>> ic('eep')\nWARNING:root:ic| 'eep': 'eep'\n```\n\n`argToStringFunction`, if provided, is called with argument values to be\nserialized to displayable strings. The default is PrettyPrint's\n[pprint.pformat()](https://docs.python.org/3/library/pprint.html#pprint.pformat),\nbut this can be changed to, for example, handle non-standard datatypes\nin a custom fashion.\n\n```pycon\n>>> from icecream import ic\n>>>\n>>> def toString(obj):\n>>>    if isinstance(obj, str):\n>>>        return '[!string %r with length %i!]' % (obj, len(obj))\n>>>    return repr(obj)\n>>>\n>>> ic.configureOutput(argToStringFunction=toString)\n>>> ic(7, 'hello')\nic| 7: 7, 'hello': [!string 'hello' with length 5!]\n```\n\nThe default `argToStringFunction` is `icecream.argumentToString`, and\nhas methods to `register` and `unregister` functions to be dispatched\nfor specific classes using `functools.singledispatch`. It also has a\n`registry` property to view registered functions.\n\n```pycon\n>>> from icecream import ic, argumentToString\n>>> import numpy as np\n>>>\n>>> # Register a function to summarize numpy array\n>>> @argumentToString.register(np.ndarray)\n>>> def _(obj):\n>>>     return f\"ndarray, shape={obj.shape}, dtype={obj.dtype}\"\n>>>\n>>> x = np.zeros((1, 2))\n>>> ic(x)\nic| x: ndarray, shape=(1, 2), dtype=float64\n>>>\n>>> # View registered functions\n>>> argumentToString.registry\nmappingproxy({object: <function icecream.icecream.argumentToString(obj)>,\n              numpy.ndarray: <function __main__._(obj)>})\n>>>\n>>> # Unregister a function and fallback to the default behavior\n>>> argumentToString.unregister(np.ndarray)\n>>> ic(x)\nic| x: array([[0., 0.]])\n```\n\n`includeContext`, if provided and True, adds the `ic()` call's filename,\nline number, and parent function to `ic()`'s output.\n\n```pycon\n>>> from icecream import ic\n>>> ic.configureOutput(includeContext=True)\n>>>\n>>> def foo():\n>>>   i = 3\n>>>   ic(i)\n>>> foo()\nic| example.py:12 in foo()- i: 3\n```\n\n`includeContext` is False by default.\n\n`contextAbsPath`, if provided and True, outputs absolute filepaths, like\n`/path/to/foo.py`, over just filenames, like `foo.py`, when `ic()` is\ncalled with `includeContext == True`. This is useful when debugging\nmultiple files that share the same filename(s). Moreover, some editors,\nlike VSCode, turn absolute filepaths into clickable links that open the\nfile where `ic()` was called.\n\n```pycon\n>>> from icecream import ic\n>>> ic.configureOutput(includeContext=True, contextAbsPath=True)\n>>>\n>>> i = 3\n>>>\n>>> def foo():\n>>>   ic(i)\n>>> foo()\nic| /absolute/path/to/example.py:12 in foo()- i: 3\n>>>\n>>> ic.configureOutput(includeContext=True, contextAbsPath=False)\n>>>\n>>> def foo():\n>>>   ic(i)\n>>> foo()\nic| example.py:18 in foo()- i: 3\n```\n\n`contextAbsPath` is False by default.\n\n### Installation\n\nInstalling IceCream with pip is easy.\n\n```\n$ pip install icecream\n```\n\n\n### Related Python libraries\n\n`ic()` uses [**`executing`**](https://github.com/alexmojaki/executing)\nby [**@alexmojaki**](https://github.com/alexmojaki) to reliably locate\n`ic()` calls in Python source. It's magic.\n\n\n### IceCream in Other Languages\n\nDelicious IceCream should be enjoyed in every language.\n\n- Dart: [icecream](https://github.com/HallerPatrick/icecream)\n- Rust: [icecream-rs](https://github.com/ericchang00/icecream-rs)\n- Node.js: [node-icecream](https://github.com/jmerle/node-icecream)\n- C++: [IceCream-Cpp](https://github.com/renatoGarcia/icecream-cpp)\n- C99: [icecream-c](https://github.com/chunqian/icecream-c)\n- PHP: [icecream-php](https://github.com/ntzm/icecream-php)\n- Go: [icecream-go](https://github.com/WAY29/icecream-go)\n- Ruby: [Ricecream](https://github.com/nodai2hITC/ricecream)\n- Java: [icecream-java](https://github.com/Akshay-Thakare/icecream-java)\n- R: [icecream](https://github.com/lewinfox/icecream)\n- Lua: [icecream-lua](https://github.com/wlingze/icecream-lua)\n- Clojure(Script): [icecream-cljc](https://github.com/Eigenbahn/icecream-cljc)\n- Bash: [IceCream-Bash](https://github.com/jtplaarj/IceCream-Bash)\n- SystemVerilog: [icecream_sv](https://github.com/xver/icecream_sv)\n\nIf you'd like a similar `ic()` function in your favorite language, please open a\npull request! IceCream's goal is to sweeten print debugging with a handy-dandy\n`ic()` function in every language.\n",
        "releases": [
            {
                "name": "icecream v2.1.4",
                "date": "2025-01-09T16:28:42Z"
            },
            {
                "name": "Icecream v2.1.3",
                "date": "2022-07-21T09:17:39Z"
            },
            {
                "name": "IceCream v2.1.2.",
                "date": "2022-02-15T23:36:40Z"
            },
            {
                "name": "IceCream v2.1.1.",
                "date": "2021-06-22T20:52:25Z"
            },
            {
                "name": "IceCream v2.1.0.",
                "date": "2021-04-16T18:37:56Z"
            },
            {
                "name": "IceCream v2.0.0.",
                "date": "2019-10-26T03:38:01Z"
            },
            {
                "name": "IceCream v1.3.1",
                "date": "2018-06-06T22:10:18Z"
            },
            {
                "name": "IceCream v1.3",
                "date": "2018-06-06T22:13:03Z"
            }
        ]
    }
}