{
    "https://api.github.com/repos/smallnest/rpcx": {
        "forks": 1175,
        "watchers": 8151,
        "stars": 8151,
        "languages": {
            "Go": 313269,
            "Makefile": 897,
            "Thrift": 88
        },
        "commits": [
            "2025-01-10T07:42:20Z",
            "2025-01-10T07:39:34Z",
            "2025-01-10T07:23:52Z",
            "2025-01-09T14:21:57Z",
            "2024-12-12T07:53:57Z",
            "2024-12-12T00:41:57Z",
            "2024-12-02T10:28:54Z",
            "2024-11-30T03:07:29Z",
            "2024-11-30T02:33:20Z",
            "2024-11-30T01:54:52Z",
            "2024-11-22T01:54:03Z",
            "2024-11-21T13:13:14Z",
            "2024-09-17T10:48:29Z",
            "2024-09-15T02:43:23Z",
            "2024-08-22T11:56:39Z",
            "2024-08-22T11:47:56Z",
            "2024-08-22T11:44:10Z",
            "2024-08-22T06:01:32Z",
            "2024-08-22T06:01:03Z",
            "2024-08-22T05:59:37Z",
            "2024-08-22T03:05:07Z",
            "2024-08-22T02:55:46Z",
            "2024-08-02T08:17:10Z",
            "2024-08-02T08:11:45Z",
            "2024-07-26T01:38:55Z",
            "2024-07-25T12:54:24Z",
            "2024-07-25T05:18:45Z",
            "2024-07-24T14:57:31Z",
            "2024-07-18T04:04:11Z",
            "2024-07-17T14:24:31Z"
        ],
        "creation_date": "2016-05-18T09:34:05Z",
        "contributors": 30,
        "topics": [
            "dubbo",
            "grpc",
            "microservice",
            "microservices",
            "rpc",
            "service-discovery"
        ],
        "subscribers": 349,
        "readme": "- **stable branch**: v1.7.x\n- **development branch**: master\n\n<a href=\"https://rpcx.io/\"><img height=\"160\" src=\"http://rpcx.io/logos/rpcx-logo-text.png\"></a>\n\nOfficial site: [http://rpcx.io](http://rpcx.io/)\n\n[![License](https://img.shields.io/:license-apache%202-blue.svg)](https://opensource.org/licenses/Apache-2.0) [![GoDoc](https://godoc.org/github.com/smallnest/rpcx?status.png)](http://godoc.org/github.com/smallnest/rpcx)  [![github actions](https://github.com/smallnest/rpcx/actions)](https://github.com/smallnest/rpcx/actions/workflows/go.yml/badge.svg) [![Go Report Card](https://goreportcard.com/badge/github.com/smallnest/rpcx)](https://goreportcard.com/report/github.com/smallnest/rpcx) [![coveralls](https://coveralls.io/repos/smallnest/rpcx/badge.svg?branch=master&service=github)](https://coveralls.io/github/smallnest/rpcx?branch=master) [![QQ3\u7fa4](https://img.shields.io/:QQ3\u7fa4-953962236-blue.svg)](_documents/rpcx_dev_qq3.jpg) \n\n**Notice: etcd**\n\nsince rpcx 1.7.6, some plugins have been moved to the independent project:\n\n- `etcd` plugin has been moved to [rpcx-etcd](https://github.com/rpcxio/rpcx-etcd)\n- `zookeeper` plugin has been moved to [rpcx-zookeeper](https://github.com/rpcxio/rpcx-zookeeper)\n- `consul` plugin has been moved to [rpcx-consul](https://github.com/rpcxio/rpcx-consul)\n- `redis` plugin has been moved to [rpcx-redis](https://github.com/rpcxio/rpcx-redis)\n- `influxdb` plugin has been moved to [rpcx-plugins](https://github.com/rpcxio/rpcx-plugins)\n- `opentelemetry` plugin has been moved to [rpcx-plugins](https://github.com/rpcxio/rpcx-plugins)\n\n## Announce\n\nA tcpdump-like tool added: [rpcxdump](https://github.com/smallnest/rpcxdump)\u3002 You can use it to debug communications between rpcx services and clients.\n\n![](https://github.com/smallnest/rpcxdump/blob/master/snapshoot.png)\n\n\n## Cross-Languages\nyou can use other programming languages besides Go to access rpcx services.\n\n- **rpcx-gateway**: You can write clients in any programming languages to call rpcx services via [rpcx-gateway](https://github.com/rpcxio/rpcx-gateway)\n- **http invoke**: you can use the same http requests to access rpcx gateway\n- **Java Services/Clients**: You can use [rpcx-java](https://github.com/smallnest/rpcx-java) to implement/access rpcx services via raw protocol.\n- **rust rpcx**: You can write rpcx services in rust by [rpcx-rs](https://github.com/smallnest/rpcx-rs)\n\n> If you can write Go methods, you can also write rpc services. It is so easy to write rpc applications with rpcx.\n\n## Installation\n\ninstall the basic features:\n\n`go get -v github.com/smallnest/rpcx/...`\n\n\nIf you want to use `quic`\u3001`kcp` registry, use those tags to `go get` \u3001 `go build` or `go run`. For example, if you want to use all features, you can:\n\n```sh\ngo get -v -tags \"quic kcp\" github.com/smallnest/rpcx/...\n```\n\n**_tags_**:\n- **quic**: support quic transport\n- **kcp**: support kcp transport\n\n## Which companies are using rpcx?\n\n<p float=\"left\">\n  <img style=\"padding-bottom: 20px;\" src=\"https://user-images.githubusercontent.com/865763/102993220-b967f000-4557-11eb-9747-703a6cbb9fb1.png\" width=\"200\" />\n  <img style=\"padding-bottom: 20px;\" src=\"https://user-images.githubusercontent.com/865763/113414067-a8e4d280-93ee-11eb-9f42-1373d7e766c1.png\" width=\"200\" />\n  <img style=\"padding-bottom: 20px;\" src=\"https://user-images.githubusercontent.com/865763/102993433-267b8580-4558-11eb-9e45-4e1a86d61688.png\" width=\"200\" /> \n  <img style=\"padding-bottom: 20px;\" src=\"https://user-images.githubusercontent.com/865763/102993530-4743db00-4558-11eb-9f76-1ee69e992b82.png\" width=\"200\" />\n  <img style=\"padding-bottom: 20px;\" src=\"https://user-images.githubusercontent.com/865763/102993612-722e2f00-4558-11eb-849a-3264c430aef9.png\" width=\"200\" />\n  <img style=\"padding-bottom: 20px;\" src=\"https://user-images.githubusercontent.com/865763/102993785-c20cf600-4558-11eb-82b9-27b801aca4ff.png\" width=\"200\" />\n</p>\n\n## Features\nrpcx is a RPC framework like [Alibaba Dubbo](http://dubbo.io/) and [Weibo Motan](https://github.com/weibocom/motan).\n\n**rpcx** is created for targets:\n1. **Simple**: easy to learn, easy to develop, easy to integrate and easy to deploy\n2. **Performance**: high performance (>= grpc-go)\n3. **Cross-platform**: support _raw slice of bytes_, _JSON_, _Protobuf_ and _MessagePack_. Theoretically it can be used with java, php, python, c/c++, node.js, c# and other platforms\n4. **Service discovery and service governance**: support zookeeper, etcd and consul.\n\n\nIt contains below features\n- Support raw Go functions. There's no need to define proto files.\n- Pluggable. Features can be extended such as service discovery, tracing.\n- Support TCP, HTTP, [QUIC](https://en.wikipedia.org/wiki/QUIC) and [KCP](https://github.com/skywind3000/kcp)\n- Support multiple codecs such as JSON, Protobuf, [MessagePack](https://msgpack.org/index.html) and raw bytes.\n- Service discovery. Support peer2peer, configured peers, [zookeeper](https://zookeeper.apache.org), [etcd](https://github.com/coreos/etcd), [consul](https://www.consul.io) and [mDNS](https://en.wikipedia.org/wiki/Multicast_DNS).\n- Fault tolerance\uff1aFailover, Failfast, Failtry.\n- Load banlancing\uff1asupport Random, RoundRobin, Consistent hashing, Weighted, network quality and Geography.\n- Support Compression.\n- Support passing metadata.\n- Support Authorization.\n- Support heartbeat and one-way request.\n- Other features: metrics, log, timeout, alias, circuit breaker.\n- Support bidirectional communication.\n- Support access via HTTP so you can write clients in any programming languages.\n- Support API gateway.\n- Support backup request, forking and broadcast.\n\n\nrpcx uses a binary protocol and platform-independent, which means you can develop services in other languages such as Java, python, nodejs, and you can use other prorgramming languages to invoke services developed in Go.\n\nThere is a UI manager: [rpcx-ui](https://github.com/smallnest/rpcx-ui).\n\n## Performance\n\nTest results show rpcx has better performance than other rpc framework except standard rpc lib.\n\n\nThe benchmark code is at [rpcx-benchmark](https://github.com/rpcx-ecosystem/rpcx-benchmark).\n\n**Listen to others, but test by yourself**.\n\n**_Test Environment_**\n\n- **CPU**: Intel(R) Xeon(R) CPU E5-2630 v3 @ 2.40GHz, 32 cores\n- **Memory**: 32G\n- **Go**: 1.9.0\n- **OS**: CentOS 7 / 3.10.0-229.el7.x86_64\n\n**_Use_**\n- protobuf\n- the client and the server on the same server\n- 581 bytes payload\n- 500/2000/5000 concurrent clients\n- mock processing time: 0ms, 10ms and 30ms\n\n**_Test Result_**\n\n### mock 0ms process time\n\n<table><tr><th>Throughputs</th><th>Mean Latency</th><th>P99 Latency</th></tr><tr><td width=\"30%\"><img src=\"http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p0-throughput.png\"></td><td width=\"30%\"><img src=\"http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p0-latency.png\"></td><td width=\"30%\"><img src=\"http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p0-p99.png\"></td></tr></table>\n\n\n### mock 10ms process time\n\n<table><tr><th>Throughputs</th><th>Mean Latency</th><th>P99 Latency</th></tr><tr><td width=\"30%\"><img src=\"http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p10-throughput.png\"></td><td width=\"30%\"><img src=\"http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p10-latency.png\"></td><td width=\"30%\"><img src=\"http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p10-p99.png\"></td></tr></table>\n\n\n### mock 30ms process time\n\n<table><tr><th>Throughputs</th><th>Mean Latency</th><th>P99 Latency</th></tr><tr><td width=\"30%\"><img src=\"http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p30-throughput.png\"></td><td width=\"30%\"><img src=\"http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p30-latency.png\"></td><td width=\"30%\"><img src=\"http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p30-p99.png\"></td></tr></table>\n\n\n## Examples\n\nYou can find all examples at [rpcxio/rpcx-examples](https://github.com/rpcxio/rpcx-examples).\n\nThe below is a simple example.\n\n\n**Server**\n\n```go\n    // define example.Arith\n    \u2026\u2026\n\n    s := server.NewServer()\n\ts.RegisterName(\"Arith\", new(example.Arith), \"\")\n\ts.Serve(\"tcp\", addr)\n\n```\n\n\n**Client**\n\n```go\n    // prepare requests\n    \u2026\u2026\n\n    d, err := client.NewPeer2PeerDiscovery(\"tcp@\"+addr, \"\")\n\txclient := client.NewXClient(\"Arith\", client.Failtry, client.RandomSelect, d, client.DefaultOption)\n\tdefer xclient.Close()\n\terr = xclient.Call(context.Background(), \"Mul\", args, reply, nil)\n```\n\n## Contributors\n\n<a href=\"https://github.com/smallnest/rpcx/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=smallnest/rpcx\" />\n</a>\n\n\n## Contribute\n\nsee [contributors](https://github.com/smallnest/rpcx/graphs/contributors).\n\nWelcome to contribute:\n- submit issues or requirements\n- send PRs\n- write projects to use rpcx\n- write tutorials or articles to introduce rpcx\n\n## License\n\nApache License, Version 2.0 \n",
        "releases": [
            {
                "name": "\u6cf0\u5c71\u7248: v1.8.0",
                "date": "2023-01-31T06:16:06Z"
            }
        ]
    }
}