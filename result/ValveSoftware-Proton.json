{
    "https://api.github.com/repos/ValveSoftware/Proton": {
        "forks": 1092,
        "watchers": 25148,
        "stars": 25148,
        "languages": {
            "C++": 49545068,
            "C": 18835048,
            "C#": 1082597,
            "Python": 338352,
            "Makefile": 101188,
            "Roff": 90540,
            "Shell": 10256,
            "Ruby": 2606
        },
        "commits": [
            "2024-12-23T09:59:41Z",
            "2024-12-20T17:32:36Z",
            "2024-12-19T14:41:11Z",
            "2024-12-19T02:07:38Z",
            "2024-12-04T15:46:05Z",
            "2024-11-27T19:34:22Z",
            "2024-11-27T18:37:47Z",
            "2024-11-27T14:51:17Z",
            "2024-06-28T02:19:39Z",
            "2024-08-14T18:42:33Z",
            "2024-11-26T18:13:49Z",
            "2024-11-18T19:41:17Z",
            "2024-11-28T16:33:58Z",
            "2024-11-19T15:46:55Z",
            "2024-05-03T09:47:48Z",
            "2024-05-03T09:54:37Z",
            "2024-11-13T05:27:52Z",
            "2024-11-06T16:16:54Z",
            "2024-10-24T14:30:58Z",
            "2024-11-11T19:26:55Z",
            "2024-11-06T15:20:28Z",
            "2024-09-10T00:12:05Z",
            "2024-09-04T16:49:10Z",
            "2024-11-13T02:22:43Z",
            "2024-11-06T01:33:31Z",
            "2024-11-04T19:19:56Z",
            "2024-10-23T03:59:56Z",
            "2024-09-29T00:25:22Z",
            "2024-10-02T01:13:55Z",
            "2024-09-11T20:53:33Z"
        ],
        "creation_date": "2018-03-13T18:45:27Z",
        "contributors": 30,
        "topics": [
            "proton"
        ],
        "subscribers": 374,
        "readme": "Introduction\n------------\n\n**Proton** is a tool for use with the Steam client which allows games which are\nexclusive to Windows to run on the Linux operating system. It uses Wine to\nfacilitate this.\n\n**Most users should use Proton provided by the Steam Client itself.** See\n[this Steam Community post][steam-play-introduction] for more details.\n\nThe source code is provided to enable advanced users the ability to alter\nProton. For example, some users may wish to use a different version of Wine\nwith a particular title.\n\n**The changelog** is available on [our wiki][changelog].\n\n[steam-play-introduction]: https://steamcommunity.com/games/221410/announcements/detail/1696055855739350561\n[changelog]: https://github.com/ValveSoftware/Proton/wiki/Changelog\n\n\nObtaining Proton sources\n------------------------\n\nAcquire Proton's source by cloning <https://github.com/ValveSoftware/Proton>\nand checking out the branch you desire.\n\nYou can clone the latest Proton to your system with this command:\n\n```bash\ngit clone --recurse-submodules https://github.com/ValveSoftware/Proton.git proton\n```\n\nBe sure to update submodules when switching between branches:\n\n```bash\ngit checkout experimental_6.3\ngit submodule update --init --recursive\n```\n\nIf you want to change any subcomponent, now is the time to do so. For\nexample, if you wish to make changes to Wine, you would apply them to the\n`wine/` directory.\n\n\nBuilding Proton\n---------------\n\nMost of Proton builds inside the Proton SDK container with very few\ndependencies on the host side.\n\n## Preparing the build environment\n\nYou need either a Docker or a Podman setup. We highly recommend [the rootless\nPodman setup][rootless-podman]. Please refer to your distribution's\ndocumentation for setup instructions (e.g. Arch [Podman][arch-podman] /\n[Docker][arch-docker], Debian [Podman][debian-podman] /\n[Docker][debian-docker]).\n\n[rootless-podman]: https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md\n[arch-podman]: https://wiki.archlinux.org/title/Podman\n[arch-docker]: https://wiki.archlinux.org/title/Docker\n[debian-podman]: https://wiki.debian.org/Podman\n[debian-docker]: https://wiki.debian.org/Docker\n\n\n## The Easy Way\n\nWe provide a top-level Makefile which will execute most of the build commands\nfor you.\n\nAfter checking out the repository and updating its submodules, assuming that\nyou have a working Docker or Podman setup, you can build and install Proton\nwith a simple:\n\n```bash\nmake install\n```\n\nIf your build system is missing dependencies, it will fail quickly with a clear\nerror message.\n\nAfter the build finishes, you may need to restart the Steam client to see the\nnew Proton tool. The tool's name in the Steam client will be based on the\ncurrently checked out branch of Proton. You can override this name using the\n`build_name` variable.\n\nSee `make help` for other build targets and options.\n\n\n\n## Manual building\n\n### Configuring the build\n\n```bash\nmkdir ../build && cd ../build\n../proton/configure.sh --enable-ccache --build-name=my_build\n```\n\nRunning `configure.sh` will create a `Makefile` allowing you to build Proton.\nThe scripts checks if containers are functional and prompt you if any\nhost-side dependencies are missing. You should run the command from a\ndirectory created specifically for your build.\n\nThe configuration script tries to discover a working Docker or Podman setup\nto use, but you can force a compatible engine with\n`--container-engine=<executable_name>`.\n\nYou can enable ccache with `--enable-cache` flag. This will mount your\n`$CCACHE_DIR` or `$HOME/.ccache` inside the container.\n\n`--proton-sdk-image=registry.gitlab.steamos.cloud/proton/soldier/sdk:<version>`\ncan be used to build with a custom version of the Proton SDK images.\n\nCheck `--help` for other configuration options.\n\nNOTE: If **SELinux** is in use, the Proton build container may fail to access\nyour user's files. This is caused by [SELinux's filesystem\nlabels][selinux-labels]. You may pass the `--relabel-volumes` switch to\nconfigure to cause the [container engine to relabel its\nbind-mounts][bind-mounts] and allow access to those files from within the\ncontainer. This can be dangerous when used with system directories. Proceed\nwith caution and refer your container engine's manual.\n\n[selinux-labels]: https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/security-enhanced_linux/sect-security-enhanced_linux-working_with_selinux-selinux_contexts_labeling_files\n[bind-mounts]: https://docs.docker.com/storage/bind-mounts/\n\n\n### Building\n\n```\nmake\n```\n\n**Important make targets:**\n\n`make install` - install Proton into your user's Steam directory, see the [install Proton\nlocally](#install-proton-locally) section for details.\n\n`make redist` - create a redistribute build (`redist/`) that can be copied to\n`~/.steam/root/compatibilitytools.d/`.\n\n`make deploy` - create a deployment build (`deploy/`). This is what we use to\ndeploy Proton to Steam users via Steamworks.\n\n`make module=<module> module` - build both 32- and 64-bit versions of the\nspecified wine module. This allows rapid iteration on one module. This target\nis only useful after building Proton.\n\n`make dxvk` / `make vkd3d-proton` - rebuild DXVK / vkd3d-proton.\n\n\n### Debug Builds\n\nTo prevent symbol stripping add `UNSTRIPPED_BUILD=1` to the `make`\ninvocation. This should be used only with a clean build directory.\n\nE.g.:\n\n```\nmkdir ../debug-proton-build && cd ../debug-proton-build\n../proton/configure.sh --enable-ccache --build-name=debug_build\nmake UNSTRIPPED_BUILD=1 install\n```\n\n\nInstall Proton locally\n----------------------\n\nSteam ships with several versions of Proton, which games will use by default or\nthat you can select in Steam Settings' Steam Play page. Steam also supports\nrunning games with local builds of Proton, which you can install on your\nmachine.\n\nTo install a local build of Proton into Steam, make a new directory in\n`~/.steam/root/compatibilitytools.d/` with a tool name of your choosing and\nplace the directory containing your redistributable build under that path.\n\nThe `make install` target will perform this task for you, installing the\nProton build into the Steam folder for the current user. You will have to\nrestart the Steam client for it to pick up on a new tool.\n\nA correct local tool installation should look similar to this:\n\n```\ncompatibilitytools.d/my_proton/\n\u251c\u2500\u2500 compatibilitytool.vdf\n\u251c\u2500\u2500 filelock.py\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 proton\n\u251c\u2500\u2500 proton_dist.tar\n\u251c\u2500\u2500 toolmanifest.vdf\n\u251c\u2500\u2500 user_settings.sample.py\n\u2514\u2500\u2500 version\n```\n\nTo enable your local build in Steam, go to the Steam Play section of the\nSettings window. If the build was correctly installed, you should see\n\"proton-localbuild\" in the drop-down list of compatibility tools.\n\nEach component of this software is used under the terms of their licenses.\nSee the `LICENSE` files here, as well as the `LICENSE`, `COPYING`, etc files\nin each submodule and directory for details. If you distribute a built\nversion of Proton to other users, you must adhere to the terms of these\nlicenses.\n\n\nDebugging\n---------\n\nProton builds have their symbols stripped by default. You can switch to\n\"debug\" beta branch in Steam (search for Proton in your library,\nProperties... -> BETAS -> select \"debug\") or build without stripping (see\n[Debug Builds section](#debug-builds)).\n\nThe symbols are provided through the accompanying `.debug` files which may\nneed to be explicitly loaded by the debugging tools. For GDB there's a helper\nscript `wine/tools/gdbinit.py` (source it) that provides `load-symbol-files`\n(or `lsf` for short) command which loads the symbols for all the mapped files.\n\nFor tips on debugging see [docs/DEBUGGING.md](docs/DEBUGGING.md).\n\n\n`compile_commands.json`\n-----------------------\n\nFor use with [clangd](https://clangd.llvm.org/) LSP server and similar tooling.\n\nProjects built using cmake or meson (e.g. vkd3d-proton) automatically come with\n`compile_commands.json`. For autotools (e.g. wine) you have to [configure the\nbuild](#configuring-the-build) with `--enable-bear` that uses\n[bear](https://github.com/rizsotto/Bear) to create the compilation database.\nIt's not on by default as it make the build slightly slower.\n\nThe build system collects all the created compile_commands.json files in a\nbuild subdirectory named `compile_commands/`.\n\nThe paths are translated to point to the real source (i.e. not the rsynced\ncopy). It still may depend on build directory for things like auto-generated\n`config.h` though and for wine it may be beneficial to run `tools/make_requests`\nin you source directories as those changes are not committed.\n\nYou can then configure your editor to use that file for clangd in a few ways:\n\n1) directly - some editors/plugins allow you to specify the path to `compile_commands.json`\n2) via `.clangd` file, e.g.\n```bash\ncd src/proton/wine/\ncat > .clangd <<EOF\nCompileFlags:\n  CompilationDatabase: ../build/current-dev/compile_commands/wine64/\nEOF\n```\n3) by symlinking:\n```bash\nln -s ../build/current-dev/compile_commands/wine64/compile_commands.json .\n```\n\n\nRuntime Config Options\n----------------------\n\nProton can be tuned at runtime to help certain games run. The Steam client sets\nsome options for known games using the `STEAM_COMPAT_CONFIG` variable.\nYou can override these options using the environment variables described below.\n\nThe best way to set these environment overrides for all games is by renaming\n`user_settings.sample.py` to `user_settings.py` and modifying it appropriately.\nThis file is located in the Proton installation directory in your Steam library\n(often `~/.steam/steam/steamapps/common/Proton #.#`).\n\nIf you want to change the runtime configuration for a specific game, you can\nuse the `Set Launch Options` setting in the game's `Properties` dialog in the\nSteam client. Set the variable, followed by `%command%`. For example, input\n\"`PROTON_USE_WINED3D=1 %command%`\" to use the OpenGL-based wined3d renderer\ninstead of the Vulkan-based DXVK renderer.\n\nTo enable an option, set the variable to a non-`0` value.  To disable an\noption, set the variable to `0`. To use Steam's default configuration, do\nnot specify the variable at all.\n\nAll of the below are runtime options. They do not effect permanent changes to\nthe Wine prefix. Removing the option will revert to the previous behavior.\n\n| Compat config string  | Environment Variable               | Description  |\n| :-------------------- | :--------------------------------- | :----------- |\n|                       | `PROTON_LOG`                       | Convenience method for dumping a useful debug log to `$PROTON_LOG_DIR/steam-$APPID.log`. Set to `1` to enable default logging, or set to a string to be appended to the default `WINEDEBUG` channels. |\n|                       | `PROTON_LOG_DIR`                   | Output log files into the directory specified. Defaults to your home directory. |\n|                       | `PROTON_WAIT_ATTACH`               | Wait for a debugger to attach to steam.exe before launching the game process. To attach to the game process at startup, debuggers should be set to follow child processes. |\n|                       | `PROTON_CRASH_REPORT_DIR`          | Write crash logs into this directory. Does not clean up old logs, so may eat all your disk space eventually. |\n| `wined3d`             | `PROTON_USE_WINED3D`               | Use OpenGL-based wined3d instead of Vulkan-based DXVK for d3d11, d3d10, and d3d9. |\n| `nod3d11`             | `PROTON_NO_D3D11`                  | Disable `d3d11.dll`, for d3d11 games which can fall back to and run better with d3d9. |\n| `nod3d10`             | `PROTON_NO_D3D10`                  | Disable `d3d10.dll` and `dxgi.dll`, for d3d10 games which can fall back to and run better with d3d9. |\n| `dxvkd3d8`            | `PROTON_DXVK_D3D8`                 | Use DXVK's `d3d8.dll`. |\n| `noesync`             | `PROTON_NO_ESYNC`                  | Do not use eventfd-based in-process synchronization primitives. |\n| `nofsync`             | `PROTON_NO_FSYNC`                  | Do not use futex-based in-process synchronization primitives. (Automatically disabled on systems with no `FUTEX_WAIT_MULTIPLE` support.) |\n| `noxim`               | `PROTON_NO_XIM`                    | Enabled by default. Do not attempt to use XIM (X Input Methods) support. XIM support is known to cause crashes with libx11 older than version 1.7. |\n| `disablenvapi`        | `PROTON_DISABLE_NVAPI`             | Disable NVIDIA's NVAPI GPU support library. |\n| `nativevulkanloader`  |                                    | Use the Vulkan loader shipped with the game instead of Proton's built-in Vulkan loader. This breaks VR support, but is required by a few games. |\n| `forcelgadd`          | `PROTON_FORCE_LARGE_ADDRESS_AWARE` | Force Wine to enable the LARGE_ADDRESS_AWARE flag for all executables. Enabled by default. |\n| `heapdelayfree`       | `PROTON_HEAP_DELAY_FREE`           | Delay freeing some memory, to work around application use-after-free bugs. |\n| `gamedrive`           | `PROTON_SET_GAME_DRIVE`            | Create an S: drive which points to the Steam Library which contains the game. |\n| `noforcelgadd`        |                                    | Disable forcelgadd. If both this and `forcelgadd` are set, enabled wins. |\n| `oldglstr`            | `PROTON_OLD_GL_STRING`             | Set some driver overrides to limit the length of the GL extension string, for old games that crash on very long extension strings. |\n| `vkd3dfl12`           |                                    | Force the Direct3D 12 feature level to 12, regardless of driver support. |\n| `vkd3dbindlesstb`     |                                    | Put `force_bindless_texel_buffer` into `VKD3D_CONFIG`. |\n| `nomfdxgiman`         | `WINE_DO_NOT_CREATE_DXGI_DEVICE_MANAGER` | Enable hack to work around video issues in some games due to incomplete IMFDXGIDeviceManager support. |\n| `noopwr`              | `WINE_DISABLE_VULKAN_OPWR`               | Enable hack to disable Vulkan other process window rendering which sometimes causes issues on Wayland due to blit being one frame behind. |\n| `hidenvgpu`           | `PROTON_HIDE_NVIDIA_GPU`           | Force Nvidia GPUs to always be reported as AMD GPUs. Some games require this if they depend on Windows-only Nvidia driver functionality. See also DXVK's nvapiHack config, which only affects reporting from Direct3D. |\n|                       | `WINE_FULLSCREEN_INTEGER_SCALING`  | Enable integer scaling mode, to give sharp pixels when upscaling. |\n| `cmdlineappend:`      |                                    | Append the string after the colon as an argument to the game command. May be specified more than once. Escape commas and backslashes with a backslash. |\n| `xalia`               | `PROTON_USE_XALIA`                 | Enable Xalia, a program that can add a gamepad UI for some keyboard/mouse interfaces. |\n| `seccomp`             | `PROTON_USE_SECCOMP`               | **Note: Obsoleted in Proton 5.13.** In older versions, enable seccomp-bpf filter to emulate native syscalls, required for some DRM protections to work. |\n| `d9vk`                | `PROTON_USE_D9VK`                  | **Note: Obsoleted in Proton 5.0.** In older versions, use Vulkan-based DXVK instead of OpenGL-based wined3d for d3d9. |\n\n<!-- Target:  GitHub Flavor Markdown.  To test locally:  pandoc -f markdown_github -t html README.md  -->\n",
        "releases": [
            {
                "name": "Proton 9.0-4",
                "date": "2024-12-11T21:00:20Z"
            },
            {
                "name": "Proton 9.0-3",
                "date": "2024-09-19T19:35:31Z"
            },
            {
                "name": "Proton 9.0-2",
                "date": "2024-06-12T18:15:52Z"
            },
            {
                "name": "Proton 9.0-1",
                "date": "2024-05-02T17:07:12Z"
            },
            {
                "name": "Proton 9.0 (Release Candidate 2)",
                "date": "2024-04-26T20:14:04Z"
            },
            {
                "name": "Proton 9.0 (Beta16)",
                "date": "2024-03-22T23:28:07Z"
            },
            {
                "name": "Proton 9.0 (Beta15)",
                "date": "2024-03-15T20:55:40Z"
            },
            {
                "name": "Proton 9.0 (Beta14)",
                "date": "2024-03-06T14:02:45Z"
            },
            {
                "name": "Proton 9.0 (Beta12)",
                "date": "2024-03-01T18:14:52Z"
            },
            {
                "name": "Proton 9.0 (Beta11)",
                "date": "2024-02-23T22:25:12Z"
            },
            {
                "name": "Proton 8.0-5",
                "date": "2024-01-22T22:22:43Z"
            },
            {
                "name": "Proton 8.0-4",
                "date": "2023-10-06T05:58:12Z"
            },
            {
                "name": "Proton 8.0-3",
                "date": "2023-07-21T19:55:33Z"
            },
            {
                "name": "Proton 8.0-2",
                "date": "2023-05-02T18:34:37Z"
            },
            {
                "name": "Proton 8.0-1",
                "date": "2023-04-17T18:31:50Z"
            },
            {
                "name": "Proton 7.0-6",
                "date": "2023-02-03T18:28:57Z"
            },
            {
                "name": "Proton 7.0-5",
                "date": "2022-11-23T11:01:31Z"
            },
            {
                "name": "Proton 7.0-4",
                "date": "2022-08-16T17:41:26Z"
            },
            {
                "name": "Proton 7.0-3",
                "date": "2022-06-14T20:01:51Z"
            },
            {
                "name": "Proton 7.0-2",
                "date": "2022-04-21T18:24:06Z"
            },
            {
                "name": "Proton 7.0-1",
                "date": "2022-02-16T09:17:03Z"
            },
            {
                "name": "Proton 6.3-8",
                "date": "2021-11-25T00:21:24Z"
            },
            {
                "name": "Proton 6.3-7",
                "date": "2021-10-01T06:53:57Z"
            },
            {
                "name": "Proton 6.3-6",
                "date": "2021-08-20T23:36:27Z"
            },
            {
                "name": "Proton 6.3-5",
                "date": "2021-06-25T18:35:13Z"
            },
            {
                "name": "Proton 6.3-4",
                "date": "2021-05-14T16:53:48Z"
            },
            {
                "name": "Proton 6.3-3",
                "date": "2021-05-04T14:09:11Z"
            },
            {
                "name": "Proton 6.3-2",
                "date": "2021-04-07T15:48:05Z"
            },
            {
                "name": "Proton 6.3-1",
                "date": "2021-04-01T19:06:32Z"
            },
            {
                "name": "Proton 5.13-6",
                "date": "2021-02-15T14:55:00Z"
            },
            {
                "name": "Proton 5.13-5",
                "date": "2021-01-15T13:17:15Z"
            },
            {
                "name": "Proton 5.13-4",
                "date": "2020-12-09T21:04:28Z"
            },
            {
                "name": "Proton 5.13-3",
                "date": "2020-12-07T22:15:25Z"
            },
            {
                "name": "Proton 5.13-2",
                "date": "2020-11-13T21:07:50Z"
            },
            {
                "name": "Proton 5.0-10",
                "date": "2020-11-05T20:28:22Z"
            },
            {
                "name": "Proton 5.13-1",
                "date": "2020-10-15T20:44:20Z"
            },
            {
                "name": "Proton 5.0-9",
                "date": "2020-06-11T17:12:02Z"
            },
            {
                "name": "Proton 5.0-8",
                "date": "2020-06-06T13:05:26Z"
            },
            {
                "name": "Proton 5.0-7",
                "date": "2020-05-01T17:58:26Z"
            },
            {
                "name": "Proton 5.0-6",
                "date": "2020-04-15T21:56:37Z"
            },
            {
                "name": "Proton 5.0-5",
                "date": "2020-03-21T12:18:09Z"
            },
            {
                "name": "Proton 5.0-4",
                "date": "2020-03-11T11:57:35Z"
            },
            {
                "name": "Proton 4.11-13",
                "date": "2020-03-05T19:36:07Z"
            },
            {
                "name": "Proton 5.0-3",
                "date": "2020-02-21T22:32:39Z"
            },
            {
                "name": "Proton 5.0-2",
                "date": "2020-02-13T18:42:48Z"
            },
            {
                "name": "Proton 5.0-1",
                "date": "2020-02-07T23:07:08Z"
            },
            {
                "name": "Proton 4.11-12",
                "date": "2020-01-14T21:30:23Z"
            },
            {
                "name": "Proton 4.11-11",
                "date": "2019-12-19T19:47:07Z"
            },
            {
                "name": "Proton 4.11-10",
                "date": "2019-12-13T17:26:12Z"
            },
            {
                "name": "Proton 4.11-9",
                "date": "2019-11-28T12:08:19Z"
            },
            {
                "name": "Proton 4.11-8",
                "date": "2019-11-08T21:29:05Z"
            },
            {
                "name": "Proton 4.11-7",
                "date": "2019-10-09T21:30:36Z"
            },
            {
                "name": "Proton 4.11-6",
                "date": "2019-10-09T21:30:19Z"
            },
            {
                "name": "Proton 4.11-5",
                "date": "2019-09-18T17:01:16Z"
            },
            {
                "name": "Proton 4.11-4",
                "date": "2019-09-13T22:27:12Z"
            },
            {
                "name": "Proton 4.11-3",
                "date": "2019-08-27T12:46:03Z"
            },
            {
                "name": "Proton 4.11-2",
                "date": "2019-08-08T18:56:50Z"
            },
            {
                "name": "Proton 4.11-1",
                "date": "2019-07-31T13:59:29Z"
            },
            {
                "name": "Proton 4.2-9",
                "date": "2019-06-27T20:12:45Z"
            },
            {
                "name": "Proton 4.2-8",
                "date": "2019-06-26T20:12:02Z"
            },
            {
                "name": "Proton 4.2-7",
                "date": "2019-06-26T20:11:38Z"
            },
            {
                "name": "Proton 4.2-6",
                "date": "2019-06-07T00:19:09Z"
            },
            {
                "name": "Proton 4.2-5",
                "date": "2019-05-24T16:04:22Z"
            },
            {
                "name": "Proton 4.2-4",
                "date": "2019-05-14T20:16:09Z"
            },
            {
                "name": "Proton 4.2-3",
                "date": "2019-04-18T20:16:41Z"
            },
            {
                "name": "Proton 3.16-9",
                "date": "2019-04-18T19:37:06Z"
            },
            {
                "name": "Proton 4.2-2",
                "date": "2019-04-03T14:51:27Z"
            },
            {
                "name": "Proton 4.2-1",
                "date": "2019-04-01T18:11:48Z"
            }
        ]
    }
}