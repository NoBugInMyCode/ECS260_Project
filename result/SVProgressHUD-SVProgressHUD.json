{
    "https://api.github.com/repos/SVProgressHUD/SVProgressHUD": {
        "forks": 2642,
        "watchers": 12447,
        "stars": 12447,
        "languages": {
            "Objective-C": 86127,
            "Ruby": 1440,
            "Swift": 673
        },
        "commits": [
            "2024-04-04T20:40:48Z",
            "2024-04-04T20:40:32Z",
            "2024-04-04T18:40:12Z",
            "2024-03-26T05:38:42Z",
            "2023-11-09T07:45:16Z",
            "2023-11-08T12:02:09Z",
            "2023-11-02T06:53:18Z",
            "2023-11-02T06:51:12Z",
            "2023-11-01T19:56:23Z",
            "2023-10-31T18:45:18Z",
            "2023-10-30T21:11:12Z",
            "2023-10-30T21:10:06Z",
            "2023-10-30T21:04:21Z",
            "2023-10-30T21:03:14Z",
            "2023-10-30T17:57:08Z",
            "2023-10-30T15:54:17Z",
            "2023-10-30T14:27:08Z",
            "2023-10-29T18:27:23Z",
            "2023-10-29T11:48:53Z",
            "2023-10-29T11:41:29Z",
            "2023-10-29T11:40:50Z",
            "2023-10-29T09:45:06Z",
            "2023-10-29T09:33:15Z",
            "2023-10-28T18:45:59Z",
            "2023-10-28T18:02:49Z",
            "2023-10-28T18:02:39Z",
            "2023-10-28T17:56:08Z",
            "2023-10-28T17:49:04Z",
            "2023-10-28T17:32:54Z",
            "2023-10-28T17:26:52Z"
        ],
        "creation_date": "2011-03-28T19:23:04Z",
        "contributors": 30,
        "topics": [
            "apple",
            "carthage",
            "cocoapods",
            "hud",
            "ios",
            "objective-c",
            "progress",
            "svprogresshud",
            "swift",
            "tvos"
        ],
        "subscribers": 324,
        "readme": "# SVProgressHUD\n\n![Pod Version](https://img.shields.io/cocoapods/v/SVProgressHUD.svg?style=flat)\n![Pod Platform](https://img.shields.io/cocoapods/p/SVProgressHUD.svg?style=flat)\n![Pod License](https://img.shields.io/cocoapods/l/SVProgressHUD.svg?style=flat)\n[![SwiftPM compatible](https://img.shields.io/badge/SwiftPM-compatible-brightgreen.svg)](https://swift.org/package-manager/)\n[![CocoaPods compatible](https://img.shields.io/badge/CocoaPods-compatible-green.svg?style=flat)](https://cocoapods.org)\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-green.svg?style=flat)](https://github.com/Carthage/Carthage)\n\n`SVProgressHUD` is a clean and easy-to-use HUD meant to display the progress of an ongoing task on iOS and tvOS.\n\n![SVProgressHUD](https://raw.githubusercontent.com/SVProgressHUD/SVProgressHUD/master/Images/SVProgressHUD.png)\n\n## Installation\n\n### Swift Package Manager\n\n[Swift Package Manager](https://swift.org/package-manager/) (SwiftPM) is a tool for managing the distribution of Swift code. It simplifies the process of managing Swift package dependencies.\n\nTo integrate `SVProgressHUD` into your project using SwiftPM:\n\n1. In Xcode, select **File > Add Package Dependency**.\n2. Enter the following package repository URL: https://github.com/SVProgressHUD/SVProgressHUD.git\n3. Choose the appropriate version (e.g. a specific version, branch, or commit).\n4. Add `SVProgressHUD` to your target dependencies.\n\n`SVProgressHUD` requires at least Swift tools version 5.3.\n\n### From CocoaPods\n\n[CocoaPods](http://cocoapods.org) is a dependency manager for Objective-C, which automates and simplifies the process of using 3rd-party libraries like `SVProgressHUD` in your projects. First, add the following line to your [Podfile](http://guides.cocoapods.org/using/using-cocoapods.html):\n\n```ruby\npod 'SVProgressHUD'\n```\n\nIf you want to use the latest features of `SVProgressHUD` use normal external source dependencies.\n\n```ruby\npod 'SVProgressHUD', :git => 'https://github.com/SVProgressHUD/SVProgressHUD.git'\n```\n\nThis pulls from the `master` branch directly.\n\nSecond, install `SVProgressHUD` into your project:\n\n```ruby\npod install\n```\n\n### Carthage\n\n[Carthage](https://github.com/Carthage/Carthage) is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks. To integrate `SVProgressHUD` into your Xcode project using Carthage, specify it in your `Cartfile`:\n\n```ogdl\ngithub \"SVProgressHUD/SVProgressHUD\"\n```\n\nRun `carthage bootstrap` to build the framework in your repository's Carthage directory. You can then include it in your target's `carthage copy-frameworks` build phase. For more information on this, please see [Carthage's documentation](https://github.com/carthage/carthage#if-youre-building-for-ios-tvos-or-watchos).\n\n### Manually\n\n* Drag the `SVProgressHUD/SVProgressHUD` folder into your project.\n* Take care that `SVProgressHUD.bundle` is added to `Targets->Build Phases->Copy Bundle Resources`.\n* Add the **QuartzCore** framework to your project.\n\n## Swift\n\nEven though `SVProgressHUD` is written in Objective-C, it can be used in Swift with no hassle.\n\nIf you use [CocoaPods](http://cocoapods.org) add the following line to your [Podfile](http://guides.cocoapods.org/using/using-cocoapods.html):\n\n```ruby\nuse_frameworks!\n```\n\nIf you added `SVProgressHUD` manually, just add a [bridging header](https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html) file to your project with the `SVProgressHUD` header included.\n\n## Usage\n\n(see sample Xcode project in `/Demo`)\n\n`SVProgressHUD` is created as a singleton (i.e. it doesn't need to be explicitly allocated and instantiated; you directly call `[SVProgressHUD method]` / `SVProgressHUD.method()`).\n\n**Use `SVProgressHUD` wisely! Only use it if you absolutely need to perform a task before taking the user forward. Bad use case examples: pull to refresh, infinite scrolling, sending message.**\n\nUsing `SVProgressHUD` in your app will usually look as simple as this.\n\n**Objective-C:**\n\n```objective-c\n[SVProgressHUD show];\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    // time-consuming task\n    dispatch_async(dispatch_get_main_queue(), ^{\n        [SVProgressHUD dismiss];\n    });\n});\n```\n\n**Swift:**\n\n```swift\nSVProgressHUD.show()\nDispatchQueue.global(qos: .default).async {\n    // time-consuming task\n    DispatchQueue.main.async {\n        SVProgressHUD.dismiss()\n    }\n}\n```\n\n### Showing the HUD\n\nYou can show the status of indeterminate tasks using one of the following:\n\n```objective-c\n+ (void)show;\n+ (void)showWithStatus:(NSString*)string;\n```\n\nIf you'd like the HUD to reflect the progress of a task, use one of these:\n\n```objective-c\n+ (void)showProgress:(CGFloat)progress;\n+ (void)showProgress:(CGFloat)progress status:(NSString*)status;\n```\n\n### Dismissing the HUD\n\nThe HUD can be dismissed using:\n\n```objective-c\n+ (void)dismiss;\n+ (void)dismissWithDelay:(NSTimeInterval)delay;\n```\n\nIf you'd like to stack HUDs, you can balance out every show call using:\n\n```\n+ (void)popActivity;\n```\n\nThe HUD will get dismissed once the `popActivity` calls will match the number of show calls.\n\nOr show an image with status before getting dismissed a little bit later. The display time depends on `minimumDismissTimeInterval` and the length of the given string.\n\n```objective-c\n+ (void)showInfoWithStatus:(NSString*)string;\n+ (void)showSuccessWithStatus:(NSString*)string;\n+ (void)showErrorWithStatus:(NSString*)string;\n+ (void)showImage:(UIImage*)image status:(NSString*)string;\n```\n\n## Customization\n\n`SVProgressHUD` is designed with flexibility in mind, providing a myriad of customization options to fit the look and feel of your application seamlessly.\n\n* Appearance: Make use of the `UI_APPEARANCE_SELECTOR` to adjust styles, colors, fonts, size, and images app-wide.\n* Behavior: Control visibility durations, display delays, and animation speeds.\n* Feedback: Enhance the user experience with options for haptic feedback and motion effects.\n\nFor a comprehensive list of properties and detailed explanations, refer to the `SVProgressHUD.h` file in the API documentation.\n\n### Hint\n\nAs standard `SVProgressHUD` offers three preconfigured styles:\n\n* `SVProgressHUDStyleAutomatic`: Automatically switch between the light and dark style\n* `SVProgressHUDStyleLight`: White background with black spinner and text\n* `SVProgressHUDStyleDark`: Black background with white spinner and text\n\nIf you want to use custom colors use `setForegroundColor:` and/or `setBackgroundColor:`. These implicitly set the HUD's style to `SVProgressHUDStyleCustom`.\n\n## Haptic Feedback\n\nAvailable on iPhone 7 and newer, `SVProgressHUD` can automatically trigger haptic feedback depending on which HUD is being displayed. The feedback maps as follows:\n\n* `showSuccessWithStatus:` <-> `UINotificationFeedbackTypeSuccess`\n* `showInfoWithStatus:` <-> `UINotificationFeedbackTypeWarning`\n* `showErrorWithStatus:` <-> `UINotificationFeedbackTypeError`\n\nTo enable this functionality, use `setHapticsEnabled:`.\n\n## Notifications\n\n`SVProgressHUD` posts four notifications via `NSNotificationCenter` in response to being shown/dismissed:\n\n* `SVProgressHUDWillAppearNotification` when the show animation starts\n* `SVProgressHUDDidAppearNotification` when the show animation completes\n* `SVProgressHUDWillDisappearNotification` when the dismiss animation starts\n* `SVProgressHUDDidDisappearNotification` when the dismiss animation completes\n\nEach notification passes a `userInfo` dictionary holding the HUD's status string (if any), retrievable via `SVProgressHUDStatusUserInfoKey`.\n\n`SVProgressHUD` also posts `SVProgressHUDDidReceiveTouchEventNotification` when users touch on the overall screen or `SVProgressHUDDidTouchDownInsideNotification` when a user touches on the HUD directly. For these notifications `userInfo` is not passed but the object parameter contains the `UIEvent` that related to the touch.\n\n## App Extensions\n\nWhen using `SVProgressHUD` in an App Extension, `#define SV_APP_EXTENSIONS` to avoid using unavailable APIs. This will be done automatically when using the `AppExtension` CocoaPods subspec. Additionally, call `setViewForExtension:` from your extensions view controller with `self.view`.\n\n## Contributing to this project\n\nIf you have feature requests or bug reports, feel free to help out by sending pull requests or by [creating new issues](https://github.com/SVProgressHUD/SVProgressHUD/issues/new). Please take a moment to\nreview the guidelines written by [Nicolas Gallagher](https://github.com/necolas):\n\n* [Bug reports](https://github.com/necolas/issue-guidelines/blob/master/CONTRIBUTING.md#bugs)\n* [Feature requests](https://github.com/necolas/issue-guidelines/blob/master/CONTRIBUTING.md#features)\n* [Pull requests](https://github.com/necolas/issue-guidelines/blob/master/CONTRIBUTING.md#pull-requests)\n\n## License\n\n`SVProgressHUD` is distributed under the terms and conditions of the [MIT license](https://github.com/SVProgressHUD/SVProgressHUD/blob/master/LICENSE). The success, error and info icons used on iOS 12 are made by [Freepik](http://www.freepik.com) from [Flaticon](https://www.flaticon.com) and are licensed under [Creative Commons BY 3.0](https://creativecommons.org/licenses/by/3.0/).\n\n## Privacy\n\n`SVProgressHUD` does not collect any data. A [privacy manifest file](https://developer.apple.com/documentation/bundleresources/privacy_manifest_files) is [provided](SVProgressHUD/PrivacyInfo.xcprivacy).\n\n## Credits\n\n`SVProgressHUD` is brought to you by Sam Vermette, [Tobias Totzek](https://totzek.me) and [contributors to the project](https://github.com/SVProgressHUD/SVProgressHUD/contributors). If you're using `SVProgressHUD` in your project, attribution would be very appreciated.\n",
        "releases": []
    }
}