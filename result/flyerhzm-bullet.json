{
    "https://api.github.com/repos/flyerhzm/bullet": {
        "forks": 438,
        "watchers": 7135,
        "stars": 7135,
        "languages": {
            "Ruby": 304583,
            "JavaScript": 2435,
            "Shell": 2388,
            "Roff": 1521
        },
        "commits": [
            "2024-11-10T10:36:21Z",
            "2024-11-10T10:23:56Z",
            "2024-11-01T17:22:54Z",
            "2024-11-01T15:58:43Z",
            "2024-11-01T15:58:28Z",
            "2024-11-01T02:43:03Z",
            "2024-11-01T02:21:51Z",
            "2024-10-23T09:49:04Z",
            "2024-10-23T07:02:18Z",
            "2024-10-07T11:01:08Z",
            "2024-10-06T22:29:53Z",
            "2024-09-30T02:02:32Z",
            "2024-09-29T23:46:34Z",
            "2024-08-11T23:31:26Z",
            "2024-07-17T15:55:11Z",
            "2024-07-17T15:45:42Z",
            "2024-08-11T08:54:51Z",
            "2024-08-11T08:51:46Z",
            "2024-08-11T08:51:37Z",
            "2024-08-11T08:24:40Z",
            "2024-08-11T05:08:45Z",
            "2024-08-11T04:34:57Z",
            "2024-08-10T17:21:51Z",
            "2024-08-11T03:08:28Z",
            "2024-08-10T17:04:36Z",
            "2024-08-10T11:34:03Z",
            "2024-08-10T11:00:11Z",
            "2024-08-10T09:11:30Z",
            "2024-08-10T08:50:33Z",
            "2024-08-10T08:04:45Z"
        ],
        "creation_date": "2009-08-13T15:47:31Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 75,
        "readme": "# Bullet\n\n![Main workflow](https://github.com/flyerhzm/bullet/actions/workflows/main.yml/badge.svg)\n[![Gem Version](https://badge.fury.io/rb/bullet.svg)](http://badge.fury.io/rb/bullet)\n[![AwesomeCode Status for flyerhzm/bullet](https://awesomecode.io/projects/6755235b-e2c1-459e-bf92-b8b13d0c0472/status)](https://awesomecode.io/repos/flyerhzm/bullet)\n[![Coderwall Endorse](https://coderwall.com/flyerhzm/endorsecount.png)](https://coderwall.com/flyerhzm)\n\nThe Bullet gem is designed to help you increase your application's performance by reducing the number of queries it makes. It will watch your queries while you develop your application and notify you when you should add eager loading (N+1 queries), when you're using eager loading that isn't necessary and when you should use counter cache.\n\nBest practice is to use Bullet in development mode or custom mode (staging, profile, etc.). The last thing you want is your clients getting alerts about how lazy you are.\n\nBullet gem now supports **activerecord** >= 4.0 and **mongoid** >= 4.0.\n\nIf you use activerecord 2.x, please use bullet <= 4.5.0\n\nIf you use activerecord 3.x, please use bullet < 5.5.0\n\n## External Introduction\n\n* [http://railscasts.com/episodes/372-bullet](http://railscasts.com/episodes/372-bullet)\n* [http://ruby5.envylabs.com/episodes/9-episode-8-september-8-2009](http://ruby5.envylabs.com/episodes/9-episode-8-september-8-2009)\n* [http://railslab.newrelic.com/2009/10/23/episode-19-on-the-edge-part-1](http://railslab.newrelic.com/2009/10/23/episode-19-on-the-edge-part-1)\n* [https://rubyonrails.org/2009/10/22/community-highlights](https://rubyonrails.org/2009/10/22/community-highlights)\n\n## Install\n\nYou can install it as a gem:\n\n```\ngem install bullet\n```\n\nor add it into a Gemfile (Bundler):\n\n\n```ruby\ngem 'bullet', group: 'development'\n```\n\nenable the Bullet gem with generate command\n\n```ruby\nbundle exec rails g bullet:install\n```\nThe generate command will auto generate the default configuration and may ask to include in the test environment as well. See below for custom configuration.\n\n**Note**: make sure `bullet` gem is added after activerecord (rails) and\nmongoid.\n\n## Configuration\n\nBullet won't enable any notification systems unless you tell it to explicitly. Append to\n`config/environments/development.rb` initializer with the following code:\n\n```ruby\nconfig.after_initialize do\n  Bullet.enable = true\n  Bullet.sentry = true\n  Bullet.alert = true\n  Bullet.bullet_logger = true\n  Bullet.console = true\n  Bullet.xmpp = { :account  => 'bullets_account@jabber.org',\n                  :password => 'bullets_password_for_jabber',\n                  :receiver => 'your_account@jabber.org',\n                  :show_online_status => true }\n  Bullet.rails_logger = true\n  Bullet.honeybadger = true\n  Bullet.bugsnag = true\n  Bullet.appsignal = true\n  Bullet.airbrake = true\n  Bullet.rollbar = true\n  Bullet.add_footer = true\n  Bullet.skip_html_injection = false\n  Bullet.stacktrace_includes = [ 'your_gem', 'your_middleware' ]\n  Bullet.stacktrace_excludes = [ 'their_gem', 'their_middleware', ['my_file.rb', 'my_method'], ['my_file.rb', 16..20] ]\n  Bullet.slack = { webhook_url: 'http://some.slack.url', channel: '#default', username: 'notifier' }\nend\n```\n\nThe notifier of Bullet is a wrap of [uniform_notifier](https://github.com/flyerhzm/uniform_notifier)\n\nThe code above will enable all of the Bullet notification systems:\n* `Bullet.enable`: enable Bullet gem, otherwise do nothing\n* `Bullet.alert`: pop up a JavaScript alert in the browser\n* `Bullet.bullet_logger`: log to the Bullet log file (Rails.root/log/bullet.log)\n* `Bullet.console`: log warnings to your browser's console.log (Safari/Webkit browsers or Firefox w/Firebug installed)\n* `Bullet.xmpp`: send XMPP/Jabber notifications to the receiver indicated. Note that the code will currently not handle the adding of contacts, so you will need to make both accounts indicated know each other manually before you will receive any notifications. If you restart the development server frequently, the 'coming online' sound for the Bullet account may start to annoy - in this case set :show_online_status to false; you will still get notifications, but the Bullet account won't announce it's online status anymore.\n* `Bullet.rails_logger`: add warnings directly to the Rails log\n* `Bullet.honeybadger`: add notifications to Honeybadger\n* `Bullet.bugsnag`: add notifications to bugsnag\n* `Bullet.airbrake`: add notifications to airbrake\n* `Bullet.appsignal`: add notifications to AppSignal\n* `Bullet.rollbar`: add notifications to rollbar\n* `Bullet.sentry`: add notifications to sentry\n* `Bullet.add_footer`: adds the details in the bottom left corner of the page. Double click the footer or use close button to hide footer.\n* `Bullet.skip_html_injection`: prevents Bullet from injecting code into the returned HTML. This must be false for receiving alerts, showing the footer or console logging.\n* `Bullet.skip_http_headers`: don't add headers to API requests, and remove the javascript that relies on them. Note that this prevents bullet from logging warnings to the browser console or updating the footer.\n* `Bullet.stacktrace_includes`: include paths with any of these substrings in the stack trace, even if they are not in your main app\n* `Bullet.stacktrace_excludes`: ignore paths with any of these substrings in the stack trace, even if they are not in your main app.\n   Each item can be a string (match substring), a regex, or an array where the first item is a path to match, and the second\n   item is a line number, a Range of line numbers, or a (bare) method name, to exclude only particular lines in a file.\n* `Bullet.slack`: add notifications to slack\n* `Bullet.raise`: raise errors, useful for making your specs fail unless they have optimized queries\n* `Bullet.always_append_html_body`: always append the html body even if no notifications are present. Note: `console` or `add_footer` must also be true. Useful for Single Page Applications where the initial page load might not have any notifications present.\n* `Bullet.skip_user_in_notification`: exclude the OS user (`whoami`) from notifications.\n\n\nBullet also allows you to disable any of its detectors.\n\n```ruby\n# Each of these settings defaults to true\n\n# Detect N+1 queries\nBullet.n_plus_one_query_enable     = false\n\n# Detect eager-loaded associations which are not used\nBullet.unused_eager_loading_enable = false\n\n# Detect unnecessary COUNT queries which could be avoided\n# with a counter_cache\nBullet.counter_cache_enable        = false\n```\n\nNote: When calling `Bullet.enable`, all other detectors are reset to their defaults (`true`) and need reconfiguring.\n\n## Safe list\n\nSometimes Bullet may notify you of query problems you don't care to fix, or\nwhich come from outside your code. You can add them to a safe list to ignore them:\n\n```ruby\nBullet.add_safelist :type => :n_plus_one_query, :class_name => \"Post\", :association => :comments\nBullet.add_safelist :type => :unused_eager_loading, :class_name => \"Post\", :association => :comments\nBullet.add_safelist :type => :counter_cache, :class_name => \"Country\", :association => :cities\n```\n\nIf you want to skip bullet in some specific controller actions, you can\ndo like\n\n```ruby\nclass ApplicationController < ActionController::Base\n  around_action :skip_bullet, if: -> { defined?(Bullet) }\n\n  def skip_bullet\n    previous_value = Bullet.enable?\n    Bullet.enable = false\n    yield\n  ensure\n    Bullet.enable = previous_value\n  end\nend\n```\n\n## Log\n\nThe Bullet log `log/bullet.log` will look something like this:\n\n* N+1 Query:\n\n```\n2009-08-25 20:40:17[INFO] USE eager loading detected:\n  Post => [:comments]\u00b7\n  Add to your query: .includes([:comments])\n2009-08-25 20:40:17[INFO] Call stack\n  /Users/richard/Downloads/test/app/views/posts/index.html.erb:8:in `each'\n  /Users/richard/Downloads/test/app/controllers/posts_controller.rb:7:in `index'\n```\n\nThe first log entry is a notification that N+1 queries have been encountered. The remaining entry is a stack trace so you can find exactly where the queries were invoked in your code, and fix them.\n\n* Unused eager loading:\n\n```\n2009-08-25 20:53:56[INFO] AVOID eager loading detected\n  Post => [:comments]\u00b7\n  Remove from your query: .includes([:comments])\n2009-08-25 20:53:56[INFO] Call stack\n```\n\nThese lines are notifications that unused eager loadings have been encountered.\n\n* Need counter cache:\n\n```\n2009-09-11 09:46:50[INFO] Need Counter Cache\n  Post => [:comments]\n```\n\n## XMPP/Jabber and Airbrake Support\n\nsee [https://github.com/flyerhzm/uniform_notifier](https://github.com/flyerhzm/uniform_notifier)\n\n## Growl Support\n\nGrowl support is dropped from uniform_notifier 1.16.0, if you still want it, please use uniform_notifier 1.15.0.\n\n## Important\n\nIf you find Bullet does not work for you, *please disable your browser's cache*.\n\n## Advanced\n\n### Work with ActiveJob\n\nInclude `Bullet::ActiveJob` in your `ApplicationJob`.\n\n```ruby\nclass ApplicationJob < ActiveJob::Base\n  include Bullet::ActiveJob if Rails.env.development?\nend\n```\n\n### Work with other background job solution\n\nUse the Bullet.profile method.\n\n```ruby\nclass ApplicationJob < ActiveJob::Base\n  around_perform do |_job, block|\n    Bullet.profile do\n      block.call\n    end\n  end\nend\n```\n\n### Work with sinatra\n\nConfigure and use `Bullet::Rack`.\n\n```ruby\nconfigure :development do\n  Bullet.enable = true\n  Bullet.bullet_logger = true\n  use Bullet::Rack\nend\n```\n\nIf your application generates a Content-Security-Policy via a separate middleware, ensure that `Bullet::Rack` is loaded _before_ that middleware.\n\n### Run in tests\n\nFirst you need to enable Bullet in test environment.\n\n```ruby\n# config/environments/test.rb\nconfig.after_initialize do\n  Bullet.enable = true\n  Bullet.bullet_logger = true\n  Bullet.raise = true # raise an error if n+1 query occurs\nend\n```\n\nThen wrap each test in Bullet api.\n\n```ruby\n# spec/rails_helper.rb\nif Bullet.enable?\n  config.before(:each) do\n    Bullet.start_request\n  end\n\n  config.after(:each) do\n    Bullet.perform_out_of_channel_notifications if Bullet.notification?\n    Bullet.end_request\n  end\nend\n```\n\n## Debug Mode\n\nBullet outputs some details info, to enable debug mode, set\n`BULLET_DEBUG=true` env.\n\n## Contributors\n\n[https://github.com/flyerhzm/bullet/contributors](https://github.com/flyerhzm/bullet/contributors)\n\n## Demo\n\nBullet is designed to function as you browse through your application in development. To see it in action,\nyou can follow these steps to create, detect, and fix example query problems.\n\n1\\. Create an example application\n\n```\n$ rails new test_bullet\n$ cd test_bullet\n$ rails g scaffold post name:string\n$ rails g scaffold comment name:string post_id:integer\n$ bundle exec rails db:migrate\n```\n\n2\\. Change `app/models/post.rb` and `app/models/comment.rb`\n\n```ruby\nclass Post < ApplicationRecord\n  has_many :comments\nend\n\nclass Comment < ApplicationRecord\n  belongs_to :post\nend\n```\n\n3\\. Go to `rails c` and execute\n\n```ruby\npost1 = Post.create(:name => 'first')\npost2 = Post.create(:name => 'second')\npost1.comments.create(:name => 'first')\npost1.comments.create(:name => 'second')\npost2.comments.create(:name => 'third')\npost2.comments.create(:name => 'fourth')\n```\n\n4\\. Change the `app/views/posts/index.html.erb` to produce a N+1 query\n\n```\n<% @posts.each do |post| %>\n  <tr>\n    <td><%= post.name %></td>\n    <td><%= post.comments.map(&:name) %></td>\n    <td><%= link_to 'Show', post %></td>\n    <td><%= link_to 'Edit', edit_post_path(post) %></td>\n    <td><%= link_to 'Destroy', post, :confirm => 'Are you sure?', :method => :delete %></td>\n  </tr>\n<% end %>\n```\n\n5\\. Add the `bullet` gem to the `Gemfile`\n\n```ruby\ngem \"bullet\"\n```\n\nAnd run\n\n```\nbundle install\n```\n\n6\\. enable the Bullet gem with generate command\n\n```\nbundle exec rails g bullet:install\n```\n\n7\\. Start the server\n\n```\n$ rails s\n```\n\n8\\. Visit `http://localhost:3000/posts` in browser, and you will see a popup alert box that says\n\n```\nThe request has unused preload associations as follows:\nNone\nThe request has N+1 queries as follows:\nmodel: Post => associations: [comment]\n```\n\nwhich means there is a N+1 query from the Post object to its Comment association.\n\nIn the meantime, there's a log appended into `log/bullet.log` file\n\n```\n2010-03-07 14:12:18[INFO] N+1 Query in /posts\n  Post => [:comments]\n  Add to your finder: :include => [:comments]\n2010-03-07 14:12:18[INFO] N+1 Query method call stack\n  /home/flyerhzm/Downloads/test_bullet/app/views/posts/index.html.erb:14:in `_render_template__600522146_80203160_0'\n  /home/flyerhzm/Downloads/test_bullet/app/views/posts/index.html.erb:11:in `each'\n  /home/flyerhzm/Downloads/test_bullet/app/views/posts/index.html.erb:11:in `_render_template__600522146_80203160_0'\n  /home/flyerhzm/Downloads/test_bullet/app/controllers/posts_controller.rb:7:in `index'\n```\n\nThe generated SQL is:\n\n```\nPost Load (1.0ms)   SELECT * FROM \"posts\"\nComment Load (0.4ms)   SELECT * FROM \"comments\" WHERE (\"comments\".post_id = 1)\nComment Load (0.3ms)   SELECT * FROM \"comments\" WHERE (\"comments\".post_id = 2)\n```\n\n9\\. To fix the N+1 query, change `app/controllers/posts_controller.rb` file\n\n```ruby\ndef index\n  @posts = Post.includes(:comments)\n\n  respond_to do |format|\n    format.html # index.html.erb\n    format.xml  { render :xml => @posts }\n  end\nend\n```\n\n10\\. Refresh `http://localhost:3000/posts`. Now there's no alert box and nothing new in the log.\n\nThe generated SQL is:\n\n```\nPost Load (0.5ms)   SELECT * FROM \"posts\"\nComment Load (0.5ms)   SELECT \"comments\".* FROM \"comments\" WHERE (\"comments\".post_id IN (1,2))\n```\n\nN+1 query fixed. Cool!\n\n11\\. Now simulate unused eager loading. Change\n`app/controllers/posts_controller.rb` and\n`app/views/posts/index.html.erb`\n\n```ruby\ndef index\n  @posts = Post.includes(:comments)\n\n  respond_to do |format|\n    format.html # index.html.erb\n    format.xml  { render :xml => @posts }\n  end\nend\n```\n\n```\n<% @posts.each do |post| %>\n  <tr>\n    <td><%= post.name %></td>\n    <td><%= link_to 'Show', post %></td>\n    <td><%= link_to 'Edit', edit_post_path(post) %></td>\n    <td><%= link_to 'Destroy', post, :confirm => 'Are you sure?', :method => :delete %></td>\n  </tr>\n<% end %>\n```\n\n12\\. Refresh `http://localhost:3000/posts`, and you will see a popup alert box that says\n\n```\nThe request has unused preload associations as follows:\nmodel: Post => associations: [comment]\nThe request has N+1 queries as follows:\nNone\n```\n\nMeanwhile, there's a line appended to `log/bullet.log`\n\n```\n2009-08-25 21:13:22[INFO] Unused preload associations: PATH_INFO: /posts;    model: Post => associations: [comments]\u00b7\nRemove from your finder: :include => [:comments]\n```\n\n13\\. Simulate counter_cache. Change `app/controllers/posts_controller.rb`\nand `app/views/posts/index.html.erb`\n\n```ruby\ndef index\n  @posts = Post.all\n\n  respond_to do |format|\n    format.html # index.html.erb\n    format.xml  { render :xml => @posts }\n  end\nend\n```\n\n```\n<% @posts.each do |post| %>\n  <tr>\n    <td><%= post.name %></td>\n    <td><%= post.comments.size %></td>\n    <td><%= link_to 'Show', post %></td>\n    <td><%= link_to 'Edit', edit_post_path(post) %></td>\n    <td><%= link_to 'Destroy', post, :confirm => 'Are you sure?', :method => :delete %></td>\n  </tr>\n<% end %>\n```\n\n14\\. Refresh `http://localhost:3000/posts`, then you will see a popup alert box that says\n\n```\nNeed counter cache\n  Post => [:comments]\n```\n\nMeanwhile, there's a line appended to `log/bullet.log`\n\n```\n2009-09-11 10:07:10[INFO] Need Counter Cache\n  Post => [:comments]\n```\n\nCopyright (c) 2009 - 2022 Richard Huang (flyerhzm@gmail.com), released under the MIT license\n",
        "releases": []
    }
}