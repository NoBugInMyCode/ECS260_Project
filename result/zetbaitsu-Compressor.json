{
    "https://api.github.com/repos/zetbaitsu/Compressor": {
        "forks": 963,
        "watchers": 7114,
        "stars": 7114,
        "languages": {
            "Kotlin": 44529,
            "Java": 3520
        },
        "commits": [
            "2021-03-22T14:46:24Z",
            "2021-03-22T14:19:33Z",
            "2021-03-21T13:19:39Z",
            "2020-02-25T07:40:40Z",
            "2020-02-25T07:39:58Z",
            "2020-01-26T02:53:32Z",
            "2020-01-26T02:10:10Z",
            "2020-01-26T02:05:12Z",
            "2020-01-26T02:04:43Z",
            "2020-01-26T01:59:58Z",
            "2020-01-26T01:51:04Z",
            "2020-01-26T01:49:02Z",
            "2020-01-26T01:42:02Z",
            "2020-01-26T01:31:04Z",
            "2020-01-26T01:22:16Z",
            "2020-01-26T01:16:51Z",
            "2020-01-26T01:08:26Z",
            "2020-01-26T01:03:05Z",
            "2020-01-25T08:00:36Z",
            "2020-01-25T07:58:06Z",
            "2020-01-25T07:42:06Z",
            "2020-01-22T09:08:42Z",
            "2019-01-09T06:05:18Z",
            "2019-01-09T06:00:22Z",
            "2019-01-09T06:00:11Z",
            "2019-01-09T05:55:38Z",
            "2019-01-09T05:55:17Z",
            "2019-01-09T05:54:08Z",
            "2019-01-09T05:53:50Z",
            "2019-01-09T05:48:03Z"
        ],
        "creation_date": "2016-06-18T13:54:59Z",
        "contributors": 10,
        "topics": [
            "android",
            "android-library",
            "compress-images",
            "compression",
            "compressor",
            "image-compression",
            "kotlin",
            "kotlin-android",
            "kotlin-coroutines",
            "kotlin-library",
            "photos"
        ],
        "subscribers": 144,
        "readme": "Compressor\n======\n[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-Compressor-blue.svg?style=flat)](http://android-arsenal.com/details/1/3758)\n[![Build Status](https://travis-ci.org/zetbaitsu/Compressor.svg?branch=master)](https://travis-ci.org/zetbaitsu/Compressor)\n[![codecov](https://codecov.io/gh/zetbaitsu/Compressor/branch/master/graph/badge.svg)](https://codecov.io/gh/zetbaitsu/Compressor)\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/zetbaitsu/Compressor/master/ss.png\" width=\"50%\" /></p>\nCompressor is a lightweight and powerful android image compression library. Compressor will allow you to compress large photos into smaller sized photos with very less or negligible loss in quality of the image.\n\n# Gradle\n```groovy\ndependencies {\n    implementation 'id.zelory:compressor:3.0.1'\n}\n```\n# Let's compress the image size!\n#### Compress Image File\n```kotlin\nval compressedImageFile = Compressor.compress(context, actualImageFile)\n```\n#### Compress Image File to specific destination\n```kotlin\nval compressedImageFile = Compressor.compress(context, actualImageFile) {\n    default()\n    destination(myFile)\n}\n```\n### I want custom Compressor!\n#### Using default constraint and custom partial of it\n```kotlin\nval compressedImageFile = Compressor.compress(context, actualImageFile) {\n    default(width = 640, format = Bitmap.CompressFormat.WEBP)\n}\n```\n#### Full custom constraint\n```kotlin\nval compressedImageFile = Compressor.compress(context, actualImageFile) {\n    resolution(1280, 720)\n    quality(80)\n    format(Bitmap.CompressFormat.WEBP)\n    size(2_097_152) // 2 MB\n}\n```\n#### Using your own custom constraint\n```kotlin\nclass MyLowerCaseNameConstraint: Constraint {\n    override fun isSatisfied(imageFile: File): Boolean {\n        return imageFile.name.all { it.isLowerCase() }\n    }\n\n    override fun satisfy(imageFile: File): File {\n        val destination = File(imageFile.parent, imageFile.name.toLowerCase())\n        imageFile.renameTo(destination)\n        return destination\n    }\n}\n\nval compressedImageFile = Compressor.compress(context, actualImageFile) {\n    constraint(MyLowerCaseNameConstraint()) // your own constraint\n    quality(80) // combine with compressor constraint\n    format(Bitmap.CompressFormat.WEBP)\n}\n```\n#### You can create your own extension too\n```kotlin\nfun Compression.lowerCaseName() {\n    constraint(MyLowerCaseNameConstraint())\n}\n\nval compressedImageFile = Compressor.compress(context, actualImageFile) {\n    lowerCaseName() // your own extension\n    quality(80) // combine with compressor constraint\n    format(Bitmap.CompressFormat.WEBP)\n}\n```\n\n### Compressor now is using Kotlin coroutines!\n#### Calling Compressor should be done from coroutines scope\n```kotlin\n// e.g calling from activity lifecycle scope\nlifecycleScope.launch {\n    val compressedImageFile = Compressor.compress(context, actualImageFile)\n}\n\n// calling from global scope\nGlobalScope.launch {\n    val compressedImageFile = Compressor.compress(context, actualImageFile)\n}\n```\n#### Run Compressor in main thread\n```kotlin\nval compressedImageFile = Compressor.compress(context, actualImageFile, Dispatchers.Main)\n```\n\n### Old version\nPlease read this [readme](https://github.com/zetbaitsu/Compressor/blob/master/README_v2.md)\n\nLicense\n-------\n    Copyright (c) 2016 Zetra.\n    \n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n",
        "releases": [
            {
                "name": "",
                "date": "2021-03-22T14:50:04Z"
            },
            {
                "name": "",
                "date": "2021-03-22T14:49:17Z"
            },
            {
                "name": "v3.00",
                "date": "2020-01-26T02:35:24Z"
            }
        ]
    }
}