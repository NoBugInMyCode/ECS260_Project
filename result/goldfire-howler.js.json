{
    "https://api.github.com/repos/goldfire/howler.js": {
        "forks": 2243,
        "watchers": 24252,
        "stars": 24252,
        "languages": {
            "JavaScript": 120538,
            "CSS": 8834,
            "HTML": 2104
        },
        "commits": [
            "2024-06-23T16:17:53Z",
            "2023-09-19T14:59:05Z",
            "2023-09-19T14:51:19Z",
            "2023-09-19T14:50:45Z",
            "2023-08-12T15:32:44Z",
            "2023-07-31T08:30:49Z",
            "2023-04-21T08:11:44Z",
            "2023-02-20T18:55:49Z",
            "2022-12-14T18:26:52Z",
            "2022-01-23T23:37:28Z",
            "2022-01-23T23:21:58Z",
            "2022-01-23T20:34:00Z",
            "2022-01-21T15:48:20Z",
            "2021-12-19T22:45:33Z",
            "2021-11-28T22:42:40Z",
            "2021-11-28T20:36:49Z",
            "2021-11-23T16:44:18Z",
            "2021-10-09T23:14:10Z",
            "2021-09-15T15:53:47Z",
            "2021-09-15T15:52:37Z",
            "2021-09-12T18:38:20Z",
            "2021-09-12T18:11:10Z",
            "2021-08-27T12:19:37Z",
            "2021-08-18T22:09:06Z",
            "2021-06-30T18:45:52Z",
            "2021-06-30T18:44:49Z",
            "2021-06-27T23:22:31Z",
            "2021-06-27T23:21:50Z",
            "2021-06-20T22:15:33Z",
            "2021-06-20T19:48:55Z"
        ],
        "creation_date": "2013-01-28T16:47:12Z",
        "contributors": 30,
        "topics": [
            "audio",
            "audio-library",
            "howler",
            "html5-audio",
            "javascript",
            "playback",
            "volume",
            "web-audio"
        ],
        "subscribers": 356,
        "readme": "[![howler.js](https://s3.amazonaws.com/howler.js/howler-logo.png \"howler.js\")](https://howlerjs.com)\n\n# Description\n[howler.js](https://howlerjs.com) is an audio library for the modern web. It defaults to [Web Audio API](http://webaudio.github.io/web-audio-api/) and falls back to [HTML5 Audio](https://html.spec.whatwg.org/multipage/embedded-content.html#the-audio-element). This makes working with audio in JavaScript easy and reliable across all platforms.\n\nAdditional information, live demos and a user showcase are available at [howlerjs.com](https://howlerjs.com).\n\nFollow on Twitter for howler.js and development-related discussion: [@GoldFireStudios](https://twitter.com/goldfirestudios).\n\n### Features\n* Single API for all audio needs\n* Defaults to Web Audio API and falls back to HTML5 Audio\n* Handles edge cases and bugs across environments\n* Supports all codecs for full cross-browser support\n* Automatic caching for improved performance\n* Control sounds individually, in groups or globally\n* Playback of multiple sounds at once\n* Easy sound sprite definition and playback\n* Full control for fading, rate, seek, volume, etc.\n* Easily add 3D spatial sound or stereo panning\n* Modular - use what you want and easy to extend\n* No outside dependencies, just pure JavaScript\n* As light as 7kb gzipped\n\n### Browser Compatibility\nTested in the following browsers/versions:\n* Google Chrome 7.0+\n* Internet Explorer 9.0+\n* Firefox 4.0+\n* Safari 5.1.4+\n* Mobile Safari 6.0+ (after user input)\n* Opera 12.0+\n* Microsoft Edge\n\n### Live Demos\n* [Audio Player](https://howlerjs.com/#player)\n* [Radio](https://howlerjs.com/#radio)\n* [Spatial Audio](https://howlerjs.com/#spatial)\n* [Audio Sprites](https://howlerjs.com/#sprite)\n\n# Documentation\n\n### Contents\n* [Quick Start](#quick-start)\n* [Examples](#examples)\n* [Core](#core)\n  * [Options](#options)\n  * [Methods](#methods)\n  * [Global Options](#global-options)\n  * [Global Methods](#global-methods)\n* [Plugin: Spatial](#plugin-spatial)\n  * [Options](#options-1)\n  * [Methods](#methods-1)\n  * [Global Methods](#global-methods-1)\n* [Group Playback](#group-playback)\n* [Mobile Playback](#mobilechrome-playback)\n* [Dolby Audio Playback](#dolby-audio-playback)\n* [Facebook Instant Games](#facebook-instant-games)\n* [Format Recommendations](#format-recommendations)\n* [License](#license)\n\n### Quick Start\n\nSeveral options to get up and running:\n\n* Clone the repo: `git clone https://github.com/goldfire/howler.js.git`\n* Install with [npm](https://www.npmjs.com/package/howler): `npm install howler`\n* Install with [Yarn](https://yarnpkg.com/en/package/howler): `yarn add howler`\n* Install with [Bower](http://bower.io/): `bower install howler`\n* Hosted CDN: [`cdnjs`](https://cdnjs.com/libraries/howler) [`jsDelivr`](https://www.jsdelivr.com/projects/howler.js)\n\nIn the browser:\n\n```html\n<script src=\"/path/to/howler.js\"></script>\n<script>\n    var sound = new Howl({\n      src: ['sound.webm', 'sound.mp3']\n    });\n</script>\n```\n\nAs a dependency:\n\n```javascript\nimport {Howl, Howler} from 'howler';\n```\n\n```javascript\nconst {Howl, Howler} = require('howler');\n```\n\nIncluded distribution files:\n\n* **howler**: This is the default and fully bundled source that includes `howler.core` and `howler.spatial`. It includes all functionality that howler comes with.\n* **howler.core**: This includes only the core functionality that aims to create parity between Web Audio and HTML5 Audio. It doesn't include any of the spatial/stereo audio functionality.\n* **howler.spatial**: This is a plugin that adds spatial/stereo audio functionality. It requires `howler.core` to operate as it is simply an add-on to the core.\n\n\n### Examples\n\n##### Most basic, play an MP3:\n```javascript\nvar sound = new Howl({\n  src: ['sound.mp3']\n});\n\nsound.play();\n```\n\n##### Streaming audio (for live audio or large files):\n```javascript\nvar sound = new Howl({\n  src: ['stream.mp3'],\n  html5: true\n});\n\nsound.play();\n```\n\n##### More playback options:\n```javascript\nvar sound = new Howl({\n  src: ['sound.webm', 'sound.mp3', 'sound.wav'],\n  autoplay: true,\n  loop: true,\n  volume: 0.5,\n  onend: function() {\n    console.log('Finished!');\n  }\n});\n```\n\n##### Define and play a sound sprite:\n```javascript\nvar sound = new Howl({\n  src: ['sounds.webm', 'sounds.mp3'],\n  sprite: {\n    blast: [0, 3000],\n    laser: [4000, 1000],\n    winner: [6000, 5000]\n  }\n});\n\n// Shoot the laser!\nsound.play('laser');\n```\n\n##### Listen for events:\n```javascript\nvar sound = new Howl({\n  src: ['sound.webm', 'sound.mp3']\n});\n\n// Clear listener after first call.\nsound.once('load', function(){\n  sound.play();\n});\n\n// Fires when the sound finishes playing.\nsound.on('end', function(){\n  console.log('Finished!');\n});\n```\n\n##### Control multiple sounds:\n```javascript\nvar sound = new Howl({\n  src: ['sound.webm', 'sound.mp3']\n});\n\n// Play returns a unique Sound ID that can be passed\n// into any method on Howl to control that specific sound.\nvar id1 = sound.play();\nvar id2 = sound.play();\n\n// Fade out the first sound and speed up the second.\nsound.fade(1, 0, 1000, id1);\nsound.rate(1.5, id2);\n```\n\n##### ES6:\n```javascript\nimport {Howl, Howler} from 'howler';\n\n// Setup the new Howl.\nconst sound = new Howl({\n  src: ['sound.webm', 'sound.mp3']\n});\n\n// Play the sound.\nsound.play();\n\n// Change global volume.\nHowler.volume(0.5);\n```\n\n\nMore in-depth examples (with accompanying live demos) can be found in the [examples directory](https://github.com/goldfire/howler.js/tree/master/examples).\n\n\n## Core\n\n### Options\n#### src `Array/String` `[]` *`required`*\nThe sources to the track(s) to be loaded for the sound (URLs or base64 data URIs). These should be in order of preference, howler.js will automatically load the first one that is compatible with the current browser. If your files have no extensions, you will need to explicitly specify the extension using the `format` property.\n#### volume `Number` `1.0`\nThe volume of the specific track, from `0.0` to `1.0`.\n#### html5 `Boolean` `false`\nSet to `true` to force HTML5 Audio. This should be used for large audio files so that you don't have to wait for the full file to be downloaded and decoded before playing.\n#### loop `Boolean` `false`\nSet to `true` to automatically loop the sound forever.\n#### preload `Boolean|String` `true`\nAutomatically begin downloading the audio file when the `Howl` is defined. If using HTML5 Audio, you can set this to `'metadata'` to only preload the file's metadata (to get its duration without download the entire file, for example). \n#### autoplay `Boolean` `false`\nSet to `true` to automatically start playback when sound is loaded.\n#### mute `Boolean` `false`\nSet to `true` to load the audio muted.\n#### sprite `Object` `{}`\nDefine a sound sprite for the sound. The offset and duration are defined in milliseconds. A third (optional) parameter is available to set a sprite as looping. An easy way to generate compatible sound sprites is with [audiosprite](https://github.com/tonistiigi/audiosprite).\n```javascript\nnew Howl({\n  sprite: {\n    key1: [offset, duration, (loop)]\n  },\n});\n```\n#### rate `Number` `1.0`\nThe rate of playback. 0.5 to 4.0, with 1.0 being normal speed.\n#### pool `Number` `5`\nThe size of the inactive sounds pool. Once sounds are stopped or finish playing, they are marked as ended and ready for cleanup. We keep a pool of these to recycle for improved performance. Generally this doesn't need to be changed. It is important to keep in mind that when a sound is paused, it won't be removed from the pool and will still be considered active so that it can be resumed later.\n#### format `Array` `[]`\nhowler.js automatically detects your file format from the extension, but you may also specify a format in situations where extraction won't work (such as with a SoundCloud stream).\n#### xhr `Object` `null`\nWhen using Web Audio, howler.js uses an XHR request to load the audio files. If you need to send custom headers, set the HTTP method or enable `withCredentials` ([see reference](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials)), include them with this parameter. Each is optional (method defaults to `GET`, headers default to `null` and withCredentials defaults to `false`). For example:\n```javascript\n// Using each of the properties.\nnew Howl({\n  xhr: {\n    method: 'POST',\n    headers: {\n      Authorization: 'Bearer:' + token,\n    },\n    withCredentials: true,\n  }\n});\n\n// Only changing the method.\nnew Howl({\n  xhr: {\n    method: 'POST',\n  }\n});\n```\n#### onload `Function`\nFires when the sound is loaded.\n#### onloaderror `Function`\nFires when the sound is unable to load. The first parameter is the ID of the sound (if it exists) and the second is the error message/code.\n\nThe load error codes are [defined in the spec](http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror):\n* **1** - The fetching process for the media resource was aborted by the user agent at the user's request.\n* **2** - A network error of some description caused the user agent to stop fetching the media resource, after the resource was established to be usable.\n* **3** - An error of some description occurred while decoding the media resource, after the resource was established to be usable.\n* **4** - The media resource indicated by the src attribute or assigned media provider object was not suitable.\n#### onplayerror `Function`\nFires when the sound is unable to play. The first parameter is the ID of the sound and the second is the error message/code.\n#### onplay `Function`\nFires when the sound begins playing. The first parameter is the ID of the sound.\n#### onend `Function`\nFires when the sound finishes playing (if it is looping, it'll fire at the end of each loop). The first parameter is the ID of the sound.\n#### onpause `Function`\nFires when the sound has been paused. The first parameter is the ID of the sound.\n#### onstop `Function`\nFires when the sound has been stopped. The first parameter is the ID of the sound.\n#### onmute `Function`\nFires when the sound has been muted/unmuted. The first parameter is the ID of the sound.\n#### onvolume `Function`\nFires when the sound's volume has changed. The first parameter is the ID of the sound.\n#### onrate `Function`\nFires when the sound's playback rate has changed. The first parameter is the ID of the sound.\n#### onseek `Function`\nFires when the sound has been seeked. The first parameter is the ID of the sound.\n#### onfade `Function`\nFires when the current sound finishes fading in/out. The first parameter is the ID of the sound.\n#### onunlock `Function`\nFires when audio has been automatically unlocked through a touch/click event.\n\n\n### Methods\n#### play([sprite/id])\nBegins playback of a sound. Returns the sound id to be used with other methods. Only method that can't be chained.\n* **sprite/id**: `String/Number` `optional` Takes one parameter that can either be a sprite or sound ID. If a sprite is passed, a new sound will play based on the sprite's definition. If a sound ID is passed, the previously played sound will be played (for example, after pausing it). However, if an ID of a sound that has been drained from the pool is passed, nothing will play.\n\n#### pause([id])\nPauses playback of sound or group, saving the `seek` of playback.\n* **id**: `Number` `optional` The sound ID. If none is passed, all sounds in group are paused.\n\n#### stop([id])\nStops playback of sound, resetting `seek` to `0`.\n* **id**: `Number` `optional` The sound ID. If none is passed, all sounds in group are stopped.\n\n#### mute([muted], [id])\nMutes the sound, but doesn't pause the playback.\n* **muted**: `Boolean` `optional` True to mute and false to unmute.\n* **id**: `Number` `optional` The sound ID. If none is passed, all sounds in group are stopped.\n\n#### volume([volume], [id])\nGet/set volume of this sound or the group. This method optionally takes 0, 1 or 2 arguments.\n* **volume**: `Number` `optional` Volume from `0.0` to `1.0`.\n* **id**: `Number` `optional` The sound ID. If none is passed, all sounds in group have volume altered relative to their own volume.\n\n#### fade(from, to, duration, [id])\nFade a currently playing sound between two volumes. Fires the `fade` event when complete.\n* **from**: `Number` Volume to fade from (`0.0` to `1.0`).\n* **to**: `Number` Volume to fade to (`0.0` to `1.0`).\n* **duration**: `Number` Time in milliseconds to fade.\n* **id**: `Number` `optional` The sound ID. If none is passed, all sounds in group will fade.\n\n#### rate([rate], [id])\nGet/set the rate of playback for a sound. This method optionally takes 0, 1 or 2 arguments.\n* **rate**: `Number` `optional` The rate of playback. 0.5 to 4.0, with 1.0 being normal speed.\n* **id**: `Number` `optional` The sound ID. If none is passed, playback rate of all sounds in group will change.\n\n#### seek([seek], [id])\nGet/set the position of playback for a sound. This method optionally takes 0, 1 or 2 arguments.\n* **seek**: `Number` `optional` The position to move current playback to (in seconds).\n* **id**: `Number` `optional` The sound ID. If none is passed, the first sound will seek.\n\n#### loop([loop], [id])\nGet/set whether to loop the sound or group. This method can optionally take 0, 1 or 2 arguments.\n* **loop**: `Boolean` `optional` To loop or not to loop, that is the question.\n* **id**: `Number` `optional` The sound ID. If none is passed, all sounds in group will have their `loop` property updated.\n\n#### state()\nCheck the load status of the `Howl`, returns a `unloaded`, `loading` or `loaded`.\n\n#### playing([id])\nCheck if a sound is currently playing or not, returns a `Boolean`. If no sound ID is passed, check if any sound in the `Howl` group is playing.\n* **id**: `Number` `optional` The sound ID to check.\n\n#### duration([id])\nGet the duration of the audio source (in seconds). Will return 0 until after the `load` event fires.\n* **id**: `Number` `optional` The sound ID to check. Passing an ID will return the duration of the sprite being played on this instance; otherwise, the full source duration is returned.\n\n#### on(event, function, [id])\nListen for events. Multiple events can be added by calling this multiple times.\n* **event**: `String` Name of event to fire/set (`load`, `loaderror`, `playerror`, `play`, `end`, `pause`, `stop`, `mute`, `volume`, `rate`, `seek`, `fade`, `unlock`).\n* **function**: `Function` Define function to fire on event.\n* **id**: `Number` `optional` Only listen to events for this sound id.\n\n#### once(event, function, [id])\nSame as `on`, but it removes itself after the callback is fired.\n* **event**: `String` Name of event to fire/set (`load`, `loaderror`, `playerror`, `play`, `end`, `pause`, `stop`, `mute`, `volume`, `rate`, `seek`, `fade`, `unlock`).\n* **function**: `Function` Define function to fire on event.\n* **id**: `Number` `optional` Only listen to events for this sound id.\n\n#### off(event, [function], [id])\nRemove event listener that you've set. Call without parameters to remove all events.\n* **event**: `String` Name of event (`load`, `loaderror`, `playerror`, `play`, `end`, `pause`, `stop`, `mute`, `volume`, `rate`, `seek`, `fade`, `unlock`).\n* **function**: `Function` `optional` The listener to remove. Omit this to remove all events of type.\n* **id**: `Number` `optional` Only remove events for this sound id.\n\n#### load()\nThis is called by default, but if you set `preload` to false, you must call `load` before you can play any sounds.\n\n#### unload()\nUnload and destroy a Howl object. This will immediately stop all sounds attached to this sound and remove it from the cache.\n\n\n### Global Options\n#### usingWebAudio `Boolean`\n`true` if the Web Audio API is available.\n#### noAudio `Boolean`\n`true` if no audio is available.\n#### autoUnlock `Boolean` `true`\nAutomatically attempts to enable audio on mobile (iOS, Android, etc) devices and desktop Chrome/Safari.\n#### html5PoolSize `Number` `10`\nEach HTML5 Audio object must be unlocked individually, so we keep a global pool of unlocked nodes to share between all `Howl` instances. This pool gets created on the first user interaction and is set to the size of this property.\n#### autoSuspend `Boolean` `true`\nAutomatically suspends the Web Audio AudioContext after 30 seconds of inactivity to decrease processing and energy usage. Automatically resumes upon new playback. Set this property to `false` to disable this behavior.\n#### ctx `Boolean` *`Web Audio Only`*\nExposes the `AudioContext` with Web Audio API.\n#### masterGain `Boolean` *`Web Audio Only`*\nExposes the master `GainNode` with Web Audio API. This can be useful for writing plugins or advanced usage.\n\n\n### Global Methods\nThe following methods are used to modify all sounds globally, and are called from the `Howler` object.\n#### mute(muted)\nMute or unmute all sounds.\n* **muted**: `Boolean` True to mute and false to unmute.\n\n#### volume([volume])\nGet/set the global volume for all sounds, relative to their own volume.\n* **volume**: `Number` `optional` Volume from `0.0` to `1.0`.\n\n#### stop()\nStop all sounds and reset their seek position to the beginning.\n\n#### codecs(ext)\nCheck supported audio codecs. Returns `true` if the codec is supported in the current browser.\n* **ext**: `String` File extension. One of: \"mp3\", \"mpeg\", \"opus\", \"ogg\", \"oga\", \"wav\", \"aac\", \"caf\", \"m4a\", \"m4b\", \"mp4\", \"weba\", \"webm\", \"dolby\", \"flac\".\n\n#### unload()\nUnload and destroy all currently loaded Howl objects. This will immediately stop all sounds and remove them from cache.\n\n\n## Plugin: Spatial\n\n### Options\n#### orientation `Array` `[1, 0, 0]`\nSets the direction the audio source is pointing in the 3D cartesian coordinate space. Depending on how directional the sound is, based on the `cone` attributes, a sound pointing away from the listener can be quiet or silent.\n#### stereo `Number` `null`\nSets the stereo panning value of the audio source for this sound or group. This makes it easy to setup left/right panning with a value of `-1.0` being far left and a value of `1.0` being far right.\n#### pos `Array` `null`\nSets the 3D spatial position of the audio source for this sound or group relative to the global listener.\n#### pannerAttr `Object`\nSets the panner node's attributes for a sound or group of sounds. See the `pannerAttr` method for all available options.\n#### onstereo `Function`\nFires when the current sound has the stereo panning changed. The first parameter is the ID of the sound.\n#### onpos `Function`\nFires when the current sound has the listener position changed. The first parameter is the ID of the sound.\n#### onorientation `Function`\nFires when the current sound has the direction of the listener changed. The first parameter is the ID of the sound.\n\n\n### Methods\n#### stereo(pan, [id])\nGet/set the stereo panning of the audio source for this sound or all in the group.\n* **pan**: `Number` A value of `-1.0` is all the way left and `1.0` is all the way right.\n* **id**: `Number` `optional` The sound ID. If none is passed, all in group will be updated.\n\n#### pos(x, y, z, [id])\nGet/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n* **x**: `Number` The x-position of the audio source.\n* **y**: `Number` The y-position of the audio source.\n* **z**: `Number` The z-position of the audio source.\n* **id**: `Number` `optional` The sound ID. If none is passed, all in group will be updated.\n\n#### orientation(x, y, z, [id])\nGet/set the direction the audio source is pointing in the 3D cartesian coordinate space. Depending on how directional the sound is, based on the `cone` attributes, a sound pointing away from the listener can be quiet or silent.\n* **x**: `Number` The x-orientation of the source.\n* **y**: `Number` The y-orientation of the source.\n* **z**: `Number` The z-orientation of the source.\n* **id**: `Number` `optional` The sound ID. If none is passed, all in group will be updated.\n\n#### pannerAttr(o, [id])\nGet/set the panner node's attributes for a sound or group of sounds.\n* **o**: `Object` All values to update.\n  * **coneInnerAngle** `360` A parameter for directional audio sources, this is an angle, in degrees, inside of which there will be no volume reduction.\n  * **coneOuterAngle** `360` A parameter for directional audio sources, this is an angle, in degrees, outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n  * **coneOuterGain** `0` A parameter for directional audio sources, this is the gain outside of the `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n  * **distanceModel** `inverse` Determines algorithm used to reduce volume as audio moves away from listener. Can be `linear`, `inverse` or `exponential`. You can find the implementations of each in the [spec](https://webaudio.github.io/web-audio-api/#idl-def-DistanceModelType).\n  * **maxDistance** `10000` The maximum distance between source and listener, after which the volume will not be reduced any further.\n  * **refDistance** `1` A reference distance for reducing volume as source moves further from the listener. This is simply a variable of the distance model and has a different effect depending on which model is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n  * **rolloffFactor** `1` How quickly the volume reduces as source moves from listener. This is simply a variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, \u221e]` with `inverse` and `exponential`.\n  * **panningModel** `HRTF` Determines which spatialization algorithm is used to position audio. Can be `HRTF` or `equalpower`.\n* **id**: `Number` `optional` The sound ID. If none is passed, all in group will be updated.\n\n\n### Global Methods\n#### stereo(pan)\nHelper method to update the stereo panning position of all current `Howls`. Future `Howls` will not use this value unless explicitly set.\n* **pan**: `Number` A value of -1.0 is all the way left and 1.0 is all the way right.\n\n#### pos(x, y, z)\nGet/set the position of the listener in 3D cartesian space. Sounds using 3D position will be relative to the listener's position.\n* **x**: `Number` The x-position of the listener.\n* **y**: `Number` The y-position of the listener.\n* **z**: `Number` The z-position of the listener.\n\n#### orientation(x, y, z, xUp, yUp, zUp)\nGet/set the direction the listener is pointing in the 3D cartesian space. A front and up vector must be provided. The front is the direction the face of the listener is pointing, and up is the direction the top of the listener is pointing. Thus, these values are expected to be at right angles from each other.\n* **x**: `Number` The x-orientation of listener.\n* **y**: `Number` The y-orientation of listener.\n* **z**: `Number` The z-orientation of listener.\n* **xUp**: `Number` The x-orientation of the top of the listener.\n* **yUp**: `Number` The y-orientation of the top of the listener.\n* **zUp**: `Number` The z-orientation of the top of the listener.\n\n\n### Group Playback\nEach `new Howl()` instance is also a group. You can play multiple sound instances from the `Howl` and control them individually or as a group (note: each `Howl` can only contain a single audio file). For example, the following plays two sounds from a sprite, changes their volume together and then pauses both of them at the same time.\n\n```javascript\nvar sound = new Howl({\n  src: ['sound.webm', 'sound.mp3'],\n  sprite: {\n    track01: [0, 20000],\n    track02: [21000, 41000]\n  }\n});\n\n// Play each of the track.s\nsound.play('track01');\nsound.play('track02');\n\n// Change the volume of both tracks.\nsound.volume(0.5);\n\n// After a second, pause both sounds in the group.\nsetTimeout(function() {\n  sound.pause();\n}, 1000);\n```\n\n\n### Mobile/Chrome Playback\nBy default, audio on mobile browsers and Chrome/Safari is locked until a sound is played within a user interaction, and then it plays normally the rest of the page session ([Apple documentation](https://developer.apple.com/library/safari/documentation/audiovideo/conceptual/using_html5_audio_video/PlayingandSynthesizingSounds/PlayingandSynthesizingSounds.html)). The default behavior of howler.js is to attempt to silently unlock audio playback by playing an empty buffer on the first `touchend` event. This behavior can be disabled by calling:\n\n```javascript\nHowler.autoUnlock = false;\n```\n\nIf you try to play audio automatically on page load, you can listen to a `playerror` event and then wait for the `unlock` event to try and play the audio again:\n\n```javascript\nvar sound = new Howl({\n  src: ['sound.webm', 'sound.mp3'],\n  onplayerror: function() {\n    sound.once('unlock', function() {\n      sound.play();\n    });\n  }\n});\n\nsound.play();\n```\n\n\n### Dolby Audio Playback\nFull support for playback of the Dolby Audio format (currently support in Edge and Safari) is included. However, you must specify that the file you are loading is `dolby` since it is in a `mp4` container.\n\n```javascript\nvar dolbySound = new Howl({\n  src: ['sound.mp4', 'sound.webm', 'sound.mp3'],\n  format: ['dolby', 'webm', 'mp3']\n});\n```\n\n### Facebook Instant Games\nHowler.js provides audio support for the new [Facebook Instant Games](https://developers.facebook.com/docs/games/instant-games/engine-recommendations) platform. If you encounter any issues while developing for Instant Games, open an issue with the tag `[IG]`.\n\n### Format Recommendations\nHowler.js supports a wide array of audio codecs that have varying browser support (\"mp3\", \"opus\", \"ogg\", \"wav\", \"aac\", \"m4a\", \"m4b\", \"mp4\", \"webm\", ...), but if you want full browser coverage you still need to use at least two of them. If your goal is to have the best balance of small filesize and high quality, based on extensive production testing, your best bet is to default to `webm` and fallback to `mp3`. `webm` has nearly full browser coverage with a great combination of compression and quality. You'll need the `mp3` fallback for Internet Explorer.\n\nIt is important to remember that howler.js selects the first compatible sound from your array of sources. So if you want `webm` to be used before `mp3`, you need to put the sources in that order.\n\nIf you want your `webm` files to be seekable in Firefox, be sure to encode them with the cues element. One way to do this is by using the `dash` flag in [ffmpeg](https://www.ffmpeg.org/):\n\n```\nffmpeg -i sound1.wav -dash 1 sound1.webm\n```\n\n### Sponsors\nSupport the ongoing development of howler.js and get your logo on our README with a link to your site [[become a sponsor](https://github.com/sponsors/goldfire)]. You can also become a backer at a lower tier and get your name in the [BACKERS](https://github.com/goldfire/howler.js/blob/master/BACKERS.md) list. All support is greatly appreciated!\n\n[![GoldFire Studios](https://s3.amazonaws.com/howler.js/sponsors/goldfire_studios.png \"GoldFire Studios\")](https://goldfirestudios.com)\n\n### License\n\nCopyright (c) 2013-2021 [James Simpson](https://twitter.com/GoldFireStudios) and [GoldFire Studios, Inc.](http://goldfirestudios.com)\n\nReleased under the [MIT License](https://github.com/goldfire/howler.js/blob/master/LICENSE.md).\n",
        "releases": [
            {
                "name": "v2.2.4",
                "date": "2023-09-19T15:00:30Z"
            },
            {
                "name": "v2.2.3",
                "date": "2021-06-30T18:46:41Z"
            },
            {
                "name": "v2.2.2",
                "date": "2021-06-27T23:22:54Z"
            },
            {
                "name": "v2.2.1",
                "date": "2020-10-25T15:13:06Z"
            },
            {
                "name": "v2.2.0",
                "date": "2020-05-17T20:26:14Z"
            },
            {
                "name": "v2.1.3",
                "date": "2019-12-24T22:37:34Z"
            },
            {
                "name": "v2.1.2",
                "date": "2019-04-19T20:16:57Z"
            },
            {
                "name": "v2.1.1",
                "date": "2018-12-21T14:33:49Z"
            },
            {
                "name": "v2.1.0",
                "date": "2018-12-12T15:57:00Z"
            },
            {
                "name": "v2.0.15",
                "date": "2018-08-25T02:18:55Z"
            },
            {
                "name": "v2.0.14",
                "date": "2018-07-12T21:36:08Z"
            },
            {
                "name": "v2.0.13",
                "date": "2018-06-22T23:04:04Z"
            },
            {
                "name": "v2.0.12",
                "date": "2018-05-09T10:54:11Z"
            },
            {
                "name": "v2.0.11",
                "date": "2018-05-09T10:51:52Z"
            },
            {
                "name": "v2.0.10",
                "date": "2018-05-05T14:34:57Z"
            },
            {
                "name": "v2.0.9",
                "date": "2018-02-10T15:40:44Z"
            },
            {
                "name": "v2.0.8",
                "date": "2018-01-20T02:47:01Z"
            },
            {
                "name": "v2.0.7",
                "date": "2017-12-18T13:52:47Z"
            },
            {
                "name": "v2.0.6",
                "date": "2017-12-15T22:51:27Z"
            },
            {
                "name": "v2.0.5",
                "date": "2017-10-07T01:14:12Z"
            },
            {
                "name": "v2.0.4",
                "date": "2017-06-09T22:31:09Z"
            },
            {
                "name": "v2.0.3",
                "date": "2017-03-11T17:46:15Z"
            },
            {
                "name": "v2.0.2",
                "date": "2016-12-04T17:18:41Z"
            },
            {
                "name": "v2.0.1",
                "date": "2016-10-14T20:59:39Z"
            },
            {
                "name": "",
                "date": "2016-07-19T14:13:39Z"
            }
        ]
    }
}