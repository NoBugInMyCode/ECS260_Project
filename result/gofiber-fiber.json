{
    "https://api.github.com/repos/gofiber/fiber": {
        "forks": 1704,
        "watchers": 34727,
        "stars": 34727,
        "languages": {
            "Go": 1564775,
            "Makefile": 1868
        },
        "commits": [
            "2025-01-20T07:22:51Z",
            "2025-01-19T07:39:19Z",
            "2025-01-19T07:38:34Z",
            "2025-01-19T00:53:12Z",
            "2025-01-18T14:41:54Z",
            "2025-01-18T11:31:55Z",
            "2025-01-16T10:54:46Z",
            "2025-01-14T02:37:29Z",
            "2025-01-13T13:18:03Z",
            "2025-01-10T12:46:21Z",
            "2025-01-08T07:19:20Z",
            "2025-01-07T18:20:53Z",
            "2025-01-06T07:36:06Z",
            "2025-01-03T07:36:58Z",
            "2025-01-02T07:42:25Z",
            "2024-12-31T16:00:40Z",
            "2024-12-31T15:34:28Z",
            "2024-12-31T14:58:07Z",
            "2024-12-30T13:18:54Z",
            "2024-12-29T18:34:34Z",
            "2024-12-28T13:29:31Z",
            "2024-12-25T11:53:14Z",
            "2024-12-23T07:20:41Z",
            "2024-12-19T13:01:36Z",
            "2024-12-19T13:00:17Z",
            "2024-12-19T12:33:45Z",
            "2024-12-19T07:30:13Z",
            "2024-12-16T13:25:15Z",
            "2024-12-16T08:07:41Z",
            "2024-12-16T08:03:57Z"
        ],
        "creation_date": "2020-01-16T03:59:20Z",
        "contributors": 30,
        "topics": [
            "express",
            "expressjs",
            "fast",
            "fiber",
            "flexible",
            "framework",
            "friendly",
            "go",
            "golang",
            "hacktoberfest",
            "hacktoberfest2020",
            "nodejs",
            "performance",
            "rest-api",
            "web"
        ],
        "subscribers": 276,
        "readme": "<h1 align=\"center\">\n  <a href=\"https://gofiber.io\">\n    <picture>\n      <source height=\"125\" media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/gofiber/docs/master/static/img/logo-dark.svg\">\n      <img height=\"125\" alt=\"Fiber\" src=\"https://raw.githubusercontent.com/gofiber/docs/master/static/img/logo.svg\">\n    </picture>\n  </a>\n  <br>\n  <a href=\"https://pkg.go.dev/github.com/gofiber/fiber/v3#pkg-overview\">\n    <img src=\"https://img.shields.io/badge/%F0%9F%93%9A%20godoc-pkg-00ACD7.svg?color=00ACD7&style=flat-square\">\n  </a>\n  <a href=\"https://goreportcard.com/report/github.com/gofiber/fiber/v3\">\n    <img src=\"https://img.shields.io/badge/%F0%9F%93%9D%20goreport-A%2B-75C46B?style=flat-square\">\n  </a>\n  <a href=\"https://codecov.io/gh/gofiber/fiber\" >\n   <img alt=\"Codecov\" src=\"https://img.shields.io/codecov/c/github/gofiber/fiber?token=3Cr92CwaPQ&style=flat-square&logo=codecov&label=codecov\">\n </a>\n  <a href=\"https://github.com/gofiber/fiber/actions?query=workflow%3ATest\">\n    <img src=\"https://img.shields.io/github/actions/workflow/status/gofiber/fiber/test.yml?branch=master&label=%F0%9F%A7%AA%20tests&style=flat-square&color=75C46B\">\n  </a>\n    <a href=\"https://docs.gofiber.io\">\n    <img src=\"https://img.shields.io/badge/%F0%9F%92%A1%20fiber-docs-00ACD7.svg?style=flat-square\">\n  </a>\n  <a href=\"https://gofiber.io/discord\">\n    <img src=\"https://img.shields.io/discord/704680098577514527?style=flat-square&label=%F0%9F%92%AC%20discord&color=00ACD7\">\n  </a>\n</h1>\n<p align=\"center\">\n  <em><b>Fiber</b> is an <a href=\"https://github.com/expressjs/express\">Express</a> inspired <b>web framework</b> built on top of <a href=\"https://github.com/valyala/fasthttp\">Fasthttp</a>, the <b>fastest</b> HTTP engine for <a href=\"https://go.dev/doc/\">Go</a>. Designed to <b>ease</b> things up for <b>fast</b> development with <a href=\"https://docs.gofiber.io/#zero-allocation\"><b>zero memory allocation</b></a> and <b>performance</b> in mind.</em>\n</p>\n\n---\n\n## \u26a0\ufe0f **Attention**\n\nFiber v3 is currently in beta and under active development. While it offers exciting new features, please note that it may not be stable for production use. We recommend sticking to the latest stable release (v2.x) for mission-critical applications. If you choose to use v3, be prepared for potential bugs and breaking changes. Always check the official documentation and release notes for updates and proceed with caution. Happy coding! \ud83d\ude80\n\n---\n\n## \u2699\ufe0f Installation\n\nFiber requires **Go version `1.23` or higher** to run. If you need to install or upgrade Go, visit the [official Go download page](https://go.dev/dl/). To start setting up your project, create a new directory for your project and navigate into it. Then, initialize your project with Go modules by executing the following command in your terminal:\n\n```bash\ngo mod init github.com/your/repo\n```\n\nTo learn more about Go modules and how they work, you can check out the [Using Go Modules](https://go.dev/blog/using-go-modules) blog post.\n\nAfter setting up your project, you can install Fiber with the `go get` command:\n\n```bash\ngo get -u github.com/gofiber/fiber/v3\n```\n\nThis command fetches the Fiber package and adds it to your project's dependencies, allowing you to start building your web applications with Fiber.\n\n## \u26a1\ufe0f Quickstart\n\nGetting started with Fiber is easy. Here's a basic example to create a simple web server that responds with \"Hello, World \ud83d\udc4b!\" on the root path. This example demonstrates initializing a new Fiber app, setting up a route, and starting the server.\n\n```go title=\"Example\"\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/gofiber/fiber/v3\"\n)\n\nfunc main() {\n    // Initialize a new Fiber app\n    app := fiber.New()\n\n    // Define a route for the GET method on the root path '/'\n    app.Get(\"/\", func(c fiber.Ctx) error {\n        // Send a string response to the client\n        return c.SendString(\"Hello, World \ud83d\udc4b!\")\n    })\n\n    // Start the server on port 3000\n    log.Fatal(app.Listen(\":3000\"))\n}\n```\n\nThis simple server is easy to set up and run. It introduces the core concepts of Fiber: app initialization, route definition, and starting the server. Just run this Go program, and visit `http://localhost:3000` in your browser to see the message.\n\n## Zero Allocation\n\nFiber is optimized for **high-performance**, meaning values returned from **fiber.Ctx** are **not** immutable by default and **will** be re-used across requests. As a rule of thumb, you **must** only use context values within the handler and **must not** keep any references. Once you return from the handler, any values obtained from the context will be re-used in future requests. Visit our [documentation](https://docs.gofiber.io/#zero-allocation) to learn more.\n\n## \ud83e\udd16 Benchmarks\n\nThese tests are performed by [TechEmpower](https://www.techempower.com/benchmarks/#section=data-r19&hw=ph&test=plaintext) and [Go Web](https://github.com/smallnest/go-web-framework-benchmark). If you want to see all the results, please visit our [Wiki](https://docs.gofiber.io/extra/benchmarks).\n\n<p float=\"left\" align=\"middle\">\n  <img src=\"https://raw.githubusercontent.com/gofiber/docs/master/static/img/benchmark-pipeline.png\" width=\"49%\">\n  <img src=\"https://raw.githubusercontent.com/gofiber/docs/master/static/img/benchmark_alloc.png\" width=\"49%\">\n</p>\n\n## \ud83c\udfaf Features\n\n- Robust [Routing](https://docs.gofiber.io/guide/routing)\n- Serve [Static Files](https://docs.gofiber.io/api/app#static)\n- Extreme [Performance](https://docs.gofiber.io/extra/benchmarks)\n- [Low Memory](https://docs.gofiber.io/extra/benchmarks) footprint\n- [API Endpoints](https://docs.gofiber.io/api/ctx)\n- [Middleware](https://docs.gofiber.io/category/-middleware) & [Next](https://docs.gofiber.io/api/ctx#next) support\n- [Rapid](https://dev.to/koddr/welcome-to-fiber-an-express-js-styled-fastest-web-framework-written-with-on-golang-497) server-side programming\n- [Template Engines](https://github.com/gofiber/template)\n- [WebSocket Support](https://github.com/gofiber/contrib/tree/main/websocket)\n- [Socket.io Support](https://github.com/gofiber/contrib/tree/main/socketio)\n- [Server-Sent Events](https://github.com/gofiber/recipes/tree/master/sse)\n- [Rate Limiter](https://docs.gofiber.io/api/middleware/limiter)\n- And much more, [explore Fiber](https://docs.gofiber.io/)\n\n## \ud83d\udca1 Philosophy\n\nNew gophers that make the switch from [Node.js](https://nodejs.org/en/about/) to [Go](https://go.dev/doc/) are dealing with a learning curve before they can start building their web applications or microservices. Fiber, as a **web framework**, was created with the idea of **minimalism** and follows the **UNIX way**, so that new gophers can quickly enter the world of Go with a warm and trusted welcome.\n\nFiber is **inspired** by Express, the most popular web framework on the Internet. We combined the **ease** of Express and **raw performance** of Go. If you have ever implemented a web application in Node.js (_using Express or similar_), then many methods and principles will seem **very common** to you.\n\nWe **listen** to our users in [issues](https://github.com/gofiber/fiber/issues), Discord [channel](https://gofiber.io/discord) _and all over the Internet_ to create a **fast**, **flexible** and **friendly** Go web framework for **any** task, **deadline** and developer **skill**! Just like Express does in the JavaScript world.\n\n## \u26a0\ufe0f Limitations\n\n- Due to Fiber's usage of unsafe, the library may not always be compatible with the latest Go version. Fiber v3 has been tested with Go version 1.23.\n- Fiber is not compatible with net/http interfaces. This means you will not be able to use projects like gqlgen, go-swagger, or any others which are part of the net/http ecosystem.\n\n## \ud83d\udc40 Examples\n\nListed below are some of the common examples. If you want to see more code examples, please visit our [Recipes repository](https://github.com/gofiber/recipes) or visit our hosted [API documentation](https://docs.gofiber.io).\n\n### \ud83d\udcd6 [**Basic Routing**](https://docs.gofiber.io/#basic-routing)\n\n```go title=\"Example\"\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n\n    \"github.com/gofiber/fiber/v3\"\n)\n\nfunc main() {\n    app := fiber.New()\n\n    // GET /api/register\n    app.Get(\"/api/*\", func(c fiber.Ctx) error {\n        msg := fmt.Sprintf(\"\u270b %s\", c.Params(\"*\"))\n        return c.SendString(msg) // => \u270b register\n    })\n\n    // GET /flights/LAX-SFO\n    app.Get(\"/flights/:from-:to\", func(c fiber.Ctx) error {\n        msg := fmt.Sprintf(\"\ud83d\udcb8 From: %s, To: %s\", c.Params(\"from\"), c.Params(\"to\"))\n        return c.SendString(msg) // => \ud83d\udcb8 From: LAX, To: SFO\n    })\n\n    // GET /dictionary.txt\n    app.Get(\"/:file.:ext\", func(c fiber.Ctx) error {\n        msg := fmt.Sprintf(\"\ud83d\udcc3 %s.%s\", c.Params(\"file\"), c.Params(\"ext\"))\n        return c.SendString(msg) // => \ud83d\udcc3 dictionary.txt\n    })\n\n    // GET /john/75\n    app.Get(\"/:name/:age/:gender?\", func(c fiber.Ctx) error {\n        msg := fmt.Sprintf(\"\ud83d\udc74 %s is %s years old\", c.Params(\"name\"), c.Params(\"age\"))\n        return c.SendString(msg) // => \ud83d\udc74 john is 75 years old\n    })\n\n    // GET /john\n    app.Get(\"/:name\", func(c fiber.Ctx) error {\n        msg := fmt.Sprintf(\"Hello, %s \ud83d\udc4b!\", c.Params(\"name\"))\n        return c.SendString(msg) // => Hello john \ud83d\udc4b!\n    })\n\n    log.Fatal(app.Listen(\":3000\"))\n}\n```\n\n#### \ud83d\udcd6 [**Route Naming**](https://docs.gofiber.io/api/app#name)\n\n```go title=\"Example\"\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"log\"\n\n    \"github.com/gofiber/fiber/v3\"\n)\n\nfunc main() {\n    app := fiber.New()\n\n    app.Get(\"/api/*\", func(c fiber.Ctx) error {\n        msg := fmt.Sprintf(\"\u270b %s\", c.Params(\"*\"))\n        return c.SendString(msg) // => \u270b register\n    }).Name(\"api\")\n\n    route := app.GetRoute(\"api\")\n\n    data, _ := json.MarshalIndent(route, \"\", \"  \")\n    fmt.Println(string(data))\n    // Prints:\n    // {\n    //    \"method\": \"GET\",\n    //    \"name\": \"api\",\n    //    \"path\": \"/api/*\",\n    //    \"params\": [\n    //      \"*1\"\n    //    ]\n    // }\n\n    log.Fatal(app.Listen(\":3000\"))\n}\n```\n\n#### \ud83d\udcd6 [**Serving Static Files**](https://docs.gofiber.io/api/app#static)\n\n```go title=\"Example\"\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/gofiber/fiber/v3\"\n    \"github.com/gofiber/fiber/v3/middleware/static\"\n)\n\nfunc main() {\n    app := fiber.New()\n\n    // Serve static files from the \"./public\" directory\n    app.Get(\"/*\", static.New(\"./public\"))\n    // => http://localhost:3000/js/script.js\n    // => http://localhost:3000/css/style.css\n\n    app.Get(\"/prefix*\", static.New(\"./public\"))\n    // => http://localhost:3000/prefix/js/script.js\n    // => http://localhost:3000/prefix/css/style.css\n\n    // Serve a single file for any unmatched routes\n    app.Get(\"*\", static.New(\"./public/index.html\"))\n    // => http://localhost:3000/any/path/shows/index.html\n\n    log.Fatal(app.Listen(\":3000\"))\n}\n```\n\n#### \ud83d\udcd6 [**Middleware & Next**](https://docs.gofiber.io/api/ctx#next)\n\n```go title=\"Example\"\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n\n    \"github.com/gofiber/fiber/v3\"\n)\n\nfunc main() {\n    app := fiber.New()\n\n    // Middleware that matches any route\n    app.Use(func(c fiber.Ctx) error {\n        fmt.Println(\"\ud83e\udd47 First handler\")\n        return c.Next()\n    })\n\n    // Middleware that matches all routes starting with /api\n    app.Use(\"/api\", func(c fiber.Ctx) error {\n        fmt.Println(\"\ud83e\udd48 Second handler\")\n        return c.Next()\n    })\n\n    // GET /api/list\n    app.Get(\"/api/list\", func(c fiber.Ctx) error {\n        fmt.Println(\"\ud83e\udd49 Last handler\")\n        return c.SendString(\"Hello, World \ud83d\udc4b!\")\n    })\n\n    log.Fatal(app.Listen(\":3000\"))\n}\n```\n\n<details>\n  <summary>\ud83d\udcda Show more code examples</summary>\n\n### Views Engines\n\n\ud83d\udcd6 [Config](https://docs.gofiber.io/api/fiber#config)\n\ud83d\udcd6 [Engines](https://github.com/gofiber/template)\n\ud83d\udcd6 [Render](https://docs.gofiber.io/api/ctx#render)\n\nFiber defaults to the [html/template](https://pkg.go.dev/html/template/) when no view engine is set.\n\nIf you want to execute partials or use a different engine like [amber](https://github.com/eknkc/amber), [handlebars](https://github.com/aymerick/raymond), [mustache](https://github.com/cbroglie/mustache), or [pug](https://github.com/Joker/jade), etc., check out our [Template](https://github.com/gofiber/template) package that supports multiple view engines.\n\n```go title=\"Example\"\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/gofiber/fiber/v3\"\n    \"github.com/gofiber/template/pug\"\n)\n\nfunc main() {\n    // Initialize a new Fiber app with Pug template engine\n    app := fiber.New(fiber.Config{\n        Views: pug.New(\"./views\", \".pug\"),\n    })\n\n    // Define a route that renders the \"home.pug\" template\n    app.Get(\"/\", func(c fiber.Ctx) error {\n        return c.Render(\"home\", fiber.Map{\n            \"title\": \"Homepage\",\n            \"year\":  1999,\n        })\n    })\n\n    log.Fatal(app.Listen(\":3000\"))\n}\n```\n\n### Grouping Routes into Chains\n\n\ud83d\udcd6 [Group](https://docs.gofiber.io/api/app#group)\n\n```go title=\"Example\"\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/gofiber/fiber/v3\"\n)\n\nfunc middleware(c fiber.Ctx) error {\n    log.Println(\"Middleware executed\")\n    return c.Next()\n}\n\nfunc handler(c fiber.Ctx) error {\n    return c.SendString(\"Handler response\")\n}\n\nfunc main() {\n    app := fiber.New()\n\n    // Root API group with middleware\n    api := app.Group(\"/api\", middleware) // /api\n\n    // API v1 routes\n    v1 := api.Group(\"/v1\", middleware) // /api/v1\n    v1.Get(\"/list\", handler)           // /api/v1/list\n    v1.Get(\"/user\", handler)           // /api/v1/user\n\n    // API v2 routes\n    v2 := api.Group(\"/v2\", middleware) // /api/v2\n    v2.Get(\"/list\", handler)           // /api/v2/list\n    v2.Get(\"/user\", handler)           // /api/v2/user\n\n    log.Fatal(app.Listen(\":3000\"))\n}\n```\n\n### Middleware Logger\n\n\ud83d\udcd6 [Logger](https://docs.gofiber.io/api/middleware/logger)\n\n```go title=\"Example\"\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/gofiber/fiber/v3\"\n    \"github.com/gofiber/fiber/v3/middleware/logger\"\n)\n\nfunc main() {\n    app := fiber.New()\n\n    // Use Logger middleware\n    app.Use(logger.New())\n\n    // Define routes\n    app.Get(\"/\", func(c fiber.Ctx) error {\n        return c.SendString(\"Hello, Logger!\")\n    })\n\n    log.Fatal(app.Listen(\":3000\"))\n}\n```\n\n### Cross-Origin Resource Sharing (CORS)\n\n\ud83d\udcd6 [CORS](https://docs.gofiber.io/api/middleware/cors)\n\n```go title=\"Example\"\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/gofiber/fiber/v3\"\n    \"github.com/gofiber/fiber/v3/middleware/cors\"\n)\n\nfunc main() {\n    app := fiber.New()\n\n    // Use CORS middleware with default settings\n    app.Use(cors.New())\n\n    // Define routes\n    app.Get(\"/\", func(c fiber.Ctx) error {\n        return c.SendString(\"CORS enabled!\")\n    })\n\n    log.Fatal(app.Listen(\":3000\"))\n}\n```\n\nCheck CORS by passing any domain in `Origin` header:\n\n```bash\ncurl -H \"Origin: http://example.com\" --verbose http://localhost:3000\n```\n\n### Custom 404 Response\n\n\ud83d\udcd6 [HTTP Methods](https://docs.gofiber.io/api/ctx#status)\n\n```go title=\"Example\"\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/gofiber/fiber/v3\"\n)\n\nfunc main() {\n    app := fiber.New()\n\n    // Define routes\n    app.Get(\"/\", static.New(\"./public\"))\n\n    app.Get(\"/demo\", func(c fiber.Ctx) error {\n        return c.SendString(\"This is a demo page!\")\n    })\n\n    app.Post(\"/register\", func(c fiber.Ctx) error {\n        return c.SendString(\"Registration successful!\")\n    })\n\n    // Middleware to handle 404 Not Found\n    app.Use(func(c fiber.Ctx) error {\n        return c.SendStatus(fiber.StatusNotFound) // => 404 \"Not Found\"\n    })\n\n    log.Fatal(app.Listen(\":3000\"))\n}\n```\n\n### JSON Response\n\n\ud83d\udcd6 [JSON](https://docs.gofiber.io/api/ctx#json)\n\n```go title=\"Example\"\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/gofiber/fiber/v3\"\n)\n\ntype User struct {\n    Name string `json:\"name\"`\n    Age  int    `json:\"age\"`\n}\n\nfunc main() {\n    app := fiber.New()\n\n    // Route that returns a JSON object\n    app.Get(\"/user\", func(c fiber.Ctx) error {\n        return c.JSON(&User{\"John\", 20})\n        // => {\"name\":\"John\", \"age\":20}\n    })\n\n    // Route that returns a JSON map\n    app.Get(\"/json\", func(c fiber.Ctx) error {\n        return c.JSON(fiber.Map{\n            \"success\": true,\n            \"message\": \"Hi John!\",\n        })\n        // => {\"success\":true, \"message\":\"Hi John!\"}\n    })\n\n    log.Fatal(app.Listen(\":3000\"))\n}\n```\n\n### WebSocket Upgrade\n\n\ud83d\udcd6 [Websocket](https://github.com/gofiber/websocket)\n\n```go title=\"Example\"\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/gofiber/fiber/v3\"\n    \"github.com/gofiber/fiber/v3/middleware/websocket\"\n)\n\nfunc main() {\n    app := fiber.New()\n\n    // WebSocket route\n    app.Get(\"/ws\", websocket.New(func(c *websocket.Conn) {\n        defer c.Close()\n        for {\n            // Read message from client\n            mt, msg, err := c.ReadMessage()\n            if err != nil {\n                log.Println(\"read:\", err)\n                break\n            }\n            log.Printf(\"recv: %s\", msg)\n\n            // Write message back to client\n            err = c.WriteMessage(mt, msg)\n            if err != nil {\n                log.Println(\"write:\", err)\n                break\n            }\n        }\n    }))\n\n    log.Fatal(app.Listen(\":3000\"))\n    // Connect via WebSocket at ws://localhost:3000/ws\n}\n```\n\n### Server-Sent Events\n\n\ud83d\udcd6 [More Info](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events)\n\n```go title=\"Example\"\npackage main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"log\"\n    \"time\"\n\n    \"github.com/gofiber/fiber/v3\"\n    \"github.com/valyala/fasthttp\"\n)\n\nfunc main() {\n    app := fiber.New()\n\n    // Server-Sent Events route\n    app.Get(\"/sse\", func(c fiber.Ctx) error {\n        c.Set(\"Content-Type\", \"text/event-stream\")\n        c.Set(\"Cache-Control\", \"no-cache\")\n        c.Set(\"Connection\", \"keep-alive\")\n        c.Set(\"Transfer-Encoding\", \"chunked\")\n\n        c.Context().SetBodyStreamWriter(func(w *bufio.Writer) {\n            var i int\n            for {\n                i++\n                msg := fmt.Sprintf(\"%d - the time is %v\", i, time.Now())\n                fmt.Fprintf(w, \"data: Message: %s\\n\\n\", msg)\n                fmt.Println(msg)\n\n                w.Flush()\n                time.Sleep(5 * time.Second)\n            }\n        })\n\n        return nil\n    })\n\n    log.Fatal(app.Listen(\":3000\"))\n}\n```\n\n### Recover Middleware\n\n\ud83d\udcd6 [Recover](https://docs.gofiber.io/api/middleware/recover)\n\n```go title=\"Example\"\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/gofiber/fiber/v3\"\n    \"github.com/gofiber/fiber/v3/middleware/recover\"\n)\n\nfunc main() {\n    app := fiber.New()\n\n    // Use Recover middleware to handle panics gracefully\n    app.Use(recover.New())\n\n    // Route that intentionally panics\n    app.Get(\"/\", func(c fiber.Ctx) error {\n        panic(\"normally this would crash your app\")\n    })\n\n    log.Fatal(app.Listen(\":3000\"))\n}\n```\n\n### Using Trusted Proxy\n\n\ud83d\udcd6 [Config](https://docs.gofiber.io/api/fiber#config)\n\n```go title=\"Example\"\npackage main\n\nimport (\n    \"log\"\n\n    \"github.com/gofiber/fiber/v3\"\n)\n\nfunc main() {\n    app := fiber.New(fiber.Config{\n        // Configure trusted proxies - WARNING: Only trust proxies you control\n        // Using TrustProxy: true with unrestricted IPs can lead to IP spoofing\n        TrustProxy: true,\n        TrustProxyConfig: fiber.TrustProxyConfig{\n            Proxies: []string{\"10.0.0.0/8\", \"172.16.0.0/12\"}, // Example: Internal network ranges only\n        },\n        ProxyHeader: fiber.HeaderXForwardedFor,\n    })\n\n    // Define routes\n    app.Get(\"/\", func(c fiber.Ctx) error {\n        return c.SendString(\"Trusted Proxy Configured!\")\n    })\n\n    log.Fatal(app.Listen(\":3000\"))\n}\n```\n\n</details>\n\n## \ud83e\uddec Internal Middleware\n\nHere is a list of middleware that are included within the Fiber framework.\n\n| Middleware                                                                           | Description                                                                                                                                                             |\n|--------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [adaptor](https://github.com/gofiber/fiber/tree/main/middleware/adaptor)             | Converter for net/http handlers to/from Fiber request handlers.                                                                                                         |\n| [basicauth](https://github.com/gofiber/fiber/tree/main/middleware/basicauth)         | Provides HTTP basic authentication. It calls the next handler for valid credentials and 401 Unauthorized for missing or invalid credentials.                            |\n| [cache](https://github.com/gofiber/fiber/tree/main/middleware/cache)                 | Intercept and cache HTTP responses.                                                                                                                                     |\n| [compress](https://github.com/gofiber/fiber/tree/main/middleware/compress)           | Compression middleware for Fiber, with support for `deflate`, `gzip`, `brotli` and `zstd`.                                                                             |\n| [cors](https://github.com/gofiber/fiber/tree/main/middleware/cors)                   | Enable cross-origin resource sharing (CORS) with various options.                                                                                                       |\n| [csrf](https://github.com/gofiber/fiber/tree/main/middleware/csrf)                   | Protect from CSRF exploits.                                                                                                                                             |\n| [earlydata](https://github.com/gofiber/fiber/tree/main/middleware/earlydata)         | Adds support for TLS 1.3's early data (\"0-RTT\") feature.                                                                                                                |\n| [encryptcookie](https://github.com/gofiber/fiber/tree/main/middleware/encryptcookie) | Encrypt middleware which encrypts cookie values.                                                                                                                        |\n| [envvar](https://github.com/gofiber/fiber/tree/main/middleware/envvar)               | Expose environment variables with providing an optional config.                                                                                                         |\n| [etag](https://github.com/gofiber/fiber/tree/main/middleware/etag)                   | Allows for caches to be more efficient and save bandwidth, as a web server does not need to resend a full response if the content has not changed.                      |\n| [expvar](https://github.com/gofiber/fiber/tree/main/middleware/expvar)               | Serves via its HTTP server runtime exposed variables in the JSON format.                                                                                                 |\n| [favicon](https://github.com/gofiber/fiber/tree/main/middleware/favicon)             | Ignore favicon from logs or serve from memory if a file path is provided.                                                                                               |\n| [healthcheck](https://github.com/gofiber/fiber/tree/main/middleware/healthcheck)     | Liveness and Readiness probes for Fiber.                                                                                                                                |\n| [helmet](https://github.com/gofiber/fiber/tree/main/middleware/helmet)               | Helps secure your apps by setting various HTTP headers.                                                                                                                 |\n| [idempotency](https://github.com/gofiber/fiber/tree/main/middleware/idempotency)     | Allows for fault-tolerant APIs where duplicate requests do not erroneously cause the same action performed multiple times on the server-side.                           |\n| [keyauth](https://github.com/gofiber/fiber/tree/main/middleware/keyauth)             | Adds support for key based authentication.                                                                                                                              |\n| [limiter](https://github.com/gofiber/fiber/tree/main/middleware/limiter)             | Adds Rate-limiting support to Fiber. Use to limit repeated requests to public APIs and/or endpoints such as password reset.                                             |\n| [logger](https://github.com/gofiber/fiber/tree/main/middleware/logger)               | HTTP request/response logger.                                                                                                                                           |\n| [pprof](https://github.com/gofiber/fiber/tree/main/middleware/pprof)                 | Serves runtime profiling data in pprof format.                                                                                                                          |\n| [proxy](https://github.com/gofiber/fiber/tree/main/middleware/proxy)                 | Allows you to proxy requests to multiple servers.                                                                                                                       |\n| [recover](https://github.com/gofiber/fiber/tree/main/middleware/recover)             | Recovers from panics anywhere in the stack chain and handles the control to the centralized ErrorHandler.                                                               |\n| [redirect](https://github.com/gofiber/fiber/tree/main/middleware/redirect)           | Redirect middleware.                                                                                                                                                    |\n| [requestid](https://github.com/gofiber/fiber/tree/main/middleware/requestid)         | Adds a request ID to every request.                                                                                                                                     |\n| [rewrite](https://github.com/gofiber/fiber/tree/main/middleware/rewrite)             | Rewrites the URL path based on provided rules. It can be helpful for backward compatibility or just creating cleaner and more descriptive links.                        |\n| [session](https://github.com/gofiber/fiber/tree/main/middleware/session)             | Session middleware. NOTE: This middleware uses our Storage package.                                                                                                     |\n| [skip](https://github.com/gofiber/fiber/tree/main/middleware/skip)                   | Skip middleware that skips a wrapped handler if a predicate is true.                                                                                                    |\n| [static](https://github.com/gofiber/fiber/tree/main/middleware/static)               | Static middleware for Fiber that serves static files such as **images**, **CSS**, and **JavaScript**.                                                                    |\n| [timeout](https://github.com/gofiber/fiber/tree/main/middleware/timeout)             | Adds a max time for a request and forwards to ErrorHandler if it is exceeded.                                                                                           |\n\n## \ud83e\uddec External Middleware\n\nList of externally hosted middleware modules and maintained by the [Fiber team](https://github.com/orgs/gofiber/people).\n\n| Middleware                                        | Description                                                                                                           |\n| :------------------------------------------------ | :-------------------------------------------------------------------------------------------------------------------- |\n| [contrib](https://github.com/gofiber/contrib)   | Third-party middlewares                                                                                               |\n| [storage](https://github.com/gofiber/storage)   | Premade storage drivers that implement the Storage interface, designed to be used with various Fiber middlewares.     |\n| [template](https://github.com/gofiber/template) | This package contains 9 template engines that can be used with Fiber `v3`. Go version 1.23 or higher is required.      |\n\n## \ud83d\udd76\ufe0f Awesome List\n\nFor more articles, middlewares, examples, or tools, check our [awesome list](https://github.com/gofiber/awesome-fiber).\n\n## \ud83d\udc4d Contribute\n\nIf you want to say **Thank You** and/or support the active development of `Fiber`:\n\n1. Add a [GitHub Star](https://github.com/gofiber/fiber/stargazers) to the project.\n2. Tweet about the project [on your \ud835\udd4f (Twitter)](https://x.com/intent/tweet?text=Fiber%20is%20an%20Express%20inspired%20%23web%20%23framework%20built%20on%20top%20of%20Fasthttp%2C%20the%20fastest%20HTTP%20engine%20for%20%23Go.%20Designed%20to%20ease%20things%20up%20for%20%23fast%20development%20with%20zero%20memory%20allocation%20and%20%23performance%20in%20mind%20%F0%9F%9A%80%20https%3A%2F%2Fgithub.com%2Fgofiber%2Ffiber).\n3. Write a review or tutorial on [Medium](https://medium.com/), [Dev.to](https://dev.to/) or your personal blog.\n4. Support the project by donating a [cup of coffee](https://buymeacoff.ee/fenny).\n\n## \ud83d\udcbb Development\n\nTo ensure your contributions are ready for a Pull Request, please use the following `Makefile` commands. These tools help maintain code quality and consistency.\n\n- **make help**: Display available commands.\n- **make audit**: Conduct quality checks.\n- **make benchmark**: Benchmark code performance.\n- **make coverage**: Generate test coverage report.\n- **make format**: Automatically format code.\n- **make lint**: Run lint checks.\n- **make test**: Execute all tests.\n- **make tidy**: Tidy dependencies.\n\nRun these commands to ensure your code adheres to project standards and best practices.\n\n## \u2615 Supporters\n\nFiber is an open-source project that runs on donations to pay the bills, e.g., our domain name, GitBook, Netlify, and serverless hosting. If you want to support Fiber, you can \u2615 [**buy a coffee here**](https://buymeacoff.ee/fenny).\n\n|                                                            | User                                             | Donation |\n| ---------------------------------------------------------- | ------------------------------------------------ | -------- |\n| ![](https://avatars.githubusercontent.com/u/204341?s=25)   | [@destari](https://github.com/destari)           | \u2615 x 10   |\n| ![](https://avatars.githubusercontent.com/u/63164982?s=25) | [@dembygenesis](https://github.com/dembygenesis) | \u2615 x 5    |\n| <img src=\"https://avatars.githubusercontent.com/u/56607882?s=25\" alt=\"thomasvvugt\" style=\"width: 25px; height: 25px;\"> | [@thomasvvugt](https://github.com/thomasvvugt)   | \u2615 x 5    |\n| ![](https://avatars.githubusercontent.com/u/27820675?s=25) | [@hendratommy](https://github.com/hendratommy)   | \u2615 x 5    |\n| ![](https://avatars.githubusercontent.com/u/1094221?s=25)  | [@ekaputra07](https://github.com/ekaputra07)     | \u2615 x 5    |\n| ![](https://avatars.githubusercontent.com/u/194590?s=25)   | [@jorgefuertes](https://github.com/jorgefuertes) | \u2615 x 5    |\n| ![](https://avatars.githubusercontent.com/u/186637?s=25)   | [@candidosales](https://github.com/candidosales) | \u2615 x 5    |\n| ![](https://avatars.githubusercontent.com/u/29659953?s=25) | [@l0nax](https://github.com/l0nax)               | \u2615 x 3    |\n| ![](https://avatars.githubusercontent.com/u/635852?s=25)   | [@bihe](https://github.com/bihe)                 | \u2615 x 3    |\n| ![](https://avatars.githubusercontent.com/u/307334?s=25)   | [@justdave](https://github.com/justdave)         | \u2615 x 3    |\n| ![](https://avatars.githubusercontent.com/u/11155743?s=25) | [@koddr](https://github.com/koddr)               | \u2615 x 1    |\n| ![](https://avatars.githubusercontent.com/u/29042462?s=25) | [@lapolinar](https://github.com/lapolinar)       | \u2615 x 1    |\n| ![](https://avatars.githubusercontent.com/u/2978730?s=25)  | [@diegowifi](https://github.com/diegowifi)       | \u2615 x 1   |\n| ![](https://avatars.githubusercontent.com/u/44171355?s=25) | [@ssimk0](https://github.com/ssimk0)             | \u2615 x 1   |\n| ![](https://avatars.githubusercontent.com/u/5638101?s=25)  | [@raymayemir](https://github.com/raymayemir)     | \u2615 x 1   |\n| ![](https://avatars.githubusercontent.com/u/619996?s=25)   | [@melkorm](https://github.com/melkorm)           | \u2615 x 1   |\n| ![](https://avatars.githubusercontent.com/u/31022056?s=25) | [@marvinjwendt](https://github.com/marvinjwendt) | \u2615 x 1   |\n| ![](https://avatars.githubusercontent.com/u/31921460?s=25) | [@toishy](https://github.com/toishy)             | \u2615 x 1   |\n\n## \ud83d\udcbb Code Contributors\n\n<img src=\"https://opencollective.com/fiber/contributors.svg?width=890&button=false\" alt=\"Code Contributors\" style=\"max-width:100%;\">\n\n## \u2b50\ufe0f Stargazers\n\n<img src=\"https://starchart.cc/gofiber/fiber.svg\" alt=\"Stargazers over time\" style=\"max-width: 100%\">\n\n## \ud83e\uddfe License\n\nCopyright (c) 2019-present [Fenny](https://github.com/fenny) and [Contributors](https://github.com/gofiber/fiber/graphs/contributors). `Fiber` is free and open-source software licensed under the [MIT License](https://github.com/gofiber/fiber/blob/master/LICENSE). Official logo was created by [Vic Sh\u00f3stak](https://github.com/koddr) and distributed under [Creative Commons](https://creativecommons.org/licenses/by-sa/4.0/) license (CC BY-SA 4.0 International).\n",
        "releases": [
            {
                "name": "v3.0.0-beta.4",
                "date": "2024-12-31T17:00:22Z"
            },
            {
                "name": "v2.52.6",
                "date": "2024-12-31T17:12:37Z"
            },
            {
                "name": "v3.0.0-beta.3",
                "date": "2024-06-30T20:35:38Z"
            },
            {
                "name": "v2.52.5",
                "date": "2024-06-30T20:19:10Z"
            },
            {
                "name": "v3.0.0-beta.2",
                "date": "2024-04-07T19:38:13Z"
            },
            {
                "name": "v2.52.4",
                "date": "2024-03-27T06:30:30Z"
            },
            {
                "name": "v2.52.3",
                "date": "2024-03-25T19:40:39Z"
            },
            {
                "name": "v2.52.2",
                "date": "2024-03-02T18:07:52Z"
            },
            {
                "name": "v2.52.1",
                "date": "2024-02-21T20:28:33Z"
            },
            {
                "name": "v2.52.0",
                "date": "2024-01-05T13:41:08Z"
            },
            {
                "name": "v2.51.0",
                "date": "2023-11-14T07:35:14Z"
            },
            {
                "name": "v2.50.0",
                "date": "2023-10-16T12:17:17Z"
            },
            {
                "name": "v2.49.2",
                "date": "2023-09-14T06:30:50Z"
            },
            {
                "name": "v2.49.1",
                "date": "2023-09-02T17:21:23Z"
            },
            {
                "name": "v2.49.0",
                "date": "2023-08-27T11:06:58Z"
            },
            {
                "name": "v2.48.0",
                "date": "2023-07-16T14:20:47Z"
            },
            {
                "name": "v2.47.0",
                "date": "2023-06-19T08:50:30Z"
            },
            {
                "name": "v2.46.0",
                "date": "2023-05-19T10:24:28Z"
            },
            {
                "name": "v2.45.0",
                "date": "2023-05-07T15:08:25Z"
            },
            {
                "name": "v2.44.0",
                "date": "2023-04-14T10:13:33Z"
            },
            {
                "name": "v2.43.0",
                "date": "2023-03-24T17:36:43Z"
            },
            {
                "name": "v2.42.0",
                "date": "2023-02-03T13:54:32Z"
            },
            {
                "name": "v2.41.0",
                "date": "2023-01-03T14:47:37Z"
            },
            {
                "name": "v2.40.1",
                "date": "2022-11-23T08:07:03Z"
            },
            {
                "name": "v2.40.0",
                "date": "2022-11-18T16:21:10Z"
            },
            {
                "name": "v2.39.0",
                "date": "2022-10-23T08:12:42Z"
            },
            {
                "name": "v2.38.1",
                "date": "2022-09-26T11:22:15Z"
            },
            {
                "name": "v2.37.1",
                "date": "2022-09-08T05:34:21Z"
            },
            {
                "name": "v2.37.0",
                "date": "2022-08-30T17:04:42Z"
            },
            {
                "name": "v2.37.0-rc.1",
                "date": "2022-08-18T14:33:17Z"
            },
            {
                "name": "v2.36.0",
                "date": "2022-08-02T06:49:51Z"
            },
            {
                "name": "v2.35.0",
                "date": "2022-07-06T11:03:02Z"
            },
            {
                "name": "v2.34.1",
                "date": "2022-06-14T06:10:28Z"
            },
            {
                "name": "v2.34.0",
                "date": "2022-05-23T07:19:07Z"
            },
            {
                "name": "v2.34.0-rc.1",
                "date": "2022-05-18T06:54:32Z"
            },
            {
                "name": "v2.33.0",
                "date": "2022-05-05T12:54:19Z"
            },
            {
                "name": "v2.32.0",
                "date": "2022-04-15T14:16:04Z"
            },
            {
                "name": "v2.31.0",
                "date": "2022-03-30T08:16:04Z"
            },
            {
                "name": "v2.30.0",
                "date": "2022-03-21T13:59:02Z"
            },
            {
                "name": "v2.29.0",
                "date": "2022-03-08T13:02:44Z"
            },
            {
                "name": "v2.28.0",
                "date": "2022-02-28T07:27:08Z"
            },
            {
                "name": "v2.27.0",
                "date": "2022-02-14T14:43:25Z"
            },
            {
                "name": "v2.26.0",
                "date": "2022-02-03T08:50:01Z"
            },
            {
                "name": "v2.25.0",
                "date": "2022-01-21T08:43:24Z"
            },
            {
                "name": "v2.24.0",
                "date": "2021-12-31T17:49:02Z"
            },
            {
                "name": "v2.23.0",
                "date": "2021-12-06T12:01:23Z"
            },
            {
                "name": "v2.22.0",
                "date": "2021-11-15T07:49:47Z"
            },
            {
                "name": "v2.21.0",
                "date": "2021-10-28T07:01:56Z"
            },
            {
                "name": "v2.20.2",
                "date": "2021-10-13T13:17:48Z"
            },
            {
                "name": "v2.20.1",
                "date": "2021-10-07T08:50:04Z"
            },
            {
                "name": "v2.20.0",
                "date": "2021-10-06T07:10:40Z"
            },
            {
                "name": "v2.19.0",
                "date": "2021-09-21T06:24:32Z"
            },
            {
                "name": "v2.18.0",
                "date": "2021-08-26T05:22:36Z"
            },
            {
                "name": "v2.17.0",
                "date": "2021-08-12T06:21:49Z"
            },
            {
                "name": "v2.16.0",
                "date": "2021-07-30T18:45:16Z"
            },
            {
                "name": "v2.15.0",
                "date": "2021-07-16T06:55:03Z"
            },
            {
                "name": "v2.14.0",
                "date": "2021-07-01T12:15:27Z"
            },
            {
                "name": "v2.13.0",
                "date": "2021-06-16T18:03:24Z"
            },
            {
                "name": "v2.12.0",
                "date": "2021-06-06T07:58:09Z"
            },
            {
                "name": "v2.11.0",
                "date": "2021-06-02T06:10:02Z"
            },
            {
                "name": "v2.10.0",
                "date": "2021-05-19T06:55:10Z"
            },
            {
                "name": "v2.9.0",
                "date": "2021-05-06T09:21:27Z"
            },
            {
                "name": "v2.8.0",
                "date": "2021-04-20T06:51:12Z"
            },
            {
                "name": "v2.7.1",
                "date": "2021-03-29T07:41:53Z"
            },
            {
                "name": "v2.6.0",
                "date": "2021-03-14T17:04:44Z"
            },
            {
                "name": "v2.5.0",
                "date": "2021-02-08T08:12:41Z"
            },
            {
                "name": "v2.4.1",
                "date": "2021-02-02T01:53:48Z"
            },
            {
                "name": "v2.4.0",
                "date": "2021-01-31T17:15:17Z"
            },
            {
                "name": "v2.3.3",
                "date": "2021-01-12T08:14:13Z"
            },
            {
                "name": "v2.3.2",
                "date": "2020-12-28T05:29:56Z"
            },
            {
                "name": "v2.3.1",
                "date": "2020-12-28T01:50:28Z"
            },
            {
                "name": "v2.3.0",
                "date": "2020-12-16T02:12:30Z"
            },
            {
                "name": "v2.2.5",
                "date": "2020-12-11T00:06:21Z"
            },
            {
                "name": "v2.2.4",
                "date": "2020-12-09T00:32:13Z"
            },
            {
                "name": "v2.2.3",
                "date": "2020-12-03T10:21:33Z"
            },
            {
                "name": "v2.2.2",
                "date": "2020-11-30T13:37:55Z"
            },
            {
                "name": "v2.2.1",
                "date": "2020-11-26T21:42:35Z"
            },
            {
                "name": "v2.2.0",
                "date": "2020-11-14T02:25:12Z"
            },
            {
                "name": "v2.1.4",
                "date": "2020-11-06T01:42:08Z"
            },
            {
                "name": "v2.1.3",
                "date": "2020-11-03T08:26:19Z"
            },
            {
                "name": "v2.1.2",
                "date": "2020-10-28T03:06:15Z"
            },
            {
                "name": "v2.1.1",
                "date": "2020-10-22T10:36:01Z"
            },
            {
                "name": "v2.1.0",
                "date": "2020-10-15T11:07:27Z"
            },
            {
                "name": "v2.0.6",
                "date": "2020-10-05T22:10:27Z"
            },
            {
                "name": "v2.0.5",
                "date": "2020-10-02T02:30:24Z"
            },
            {
                "name": "v2.0.4",
                "date": "2020-09-29T19:57:12Z"
            },
            {
                "name": "v2.0.3",
                "date": "2020-09-27T23:05:00Z"
            },
            {
                "name": "v2.0.2",
                "date": "2020-09-19T10:12:57Z"
            },
            {
                "name": "v2.0.1",
                "date": "2020-09-15T19:13:05Z"
            },
            {
                "name": "v2.0.0",
                "date": "2020-09-14T10:54:43Z"
            },
            {
                "name": "v1.14.6",
                "date": "2020-09-11T18:56:39Z"
            },
            {
                "name": "v1.14.5",
                "date": "2020-09-01T12:50:29Z"
            },
            {
                "name": "v1.14.4",
                "date": "2020-08-24T08:57:54Z"
            },
            {
                "name": "v1.14.3",
                "date": "2020-08-24T08:36:56Z"
            },
            {
                "name": "v1.14.2",
                "date": "2020-08-16T10:36:39Z"
            },
            {
                "name": "v1.14.1",
                "date": "2020-08-15T15:32:49Z"
            },
            {
                "name": "v1.13.3",
                "date": "2020-07-22T00:12:15Z"
            },
            {
                "name": "v1.13.1",
                "date": "2020-07-19T11:23:14Z"
            },
            {
                "name": "v1.13.0",
                "date": "2020-07-18T02:01:07Z"
            },
            {
                "name": "v1.12.6",
                "date": "2020-07-11T11:08:49Z"
            },
            {
                "name": "v1.12.5",
                "date": "2020-07-08T11:59:07Z"
            },
            {
                "name": "v1.12.4",
                "date": "2020-07-04T08:42:42Z"
            },
            {
                "name": "v1.12.3",
                "date": "2020-07-03T13:29:17Z"
            },
            {
                "name": "v1.12.2",
                "date": "2020-06-30T23:36:09Z"
            },
            {
                "name": "v1.12.1",
                "date": "2020-06-27T15:18:19Z"
            },
            {
                "name": "v1.12.0",
                "date": "2020-06-19T09:41:03Z"
            },
            {
                "name": "v1.11.0",
                "date": "2020-06-08T10:39:23Z"
            },
            {
                "name": "v1.10.5",
                "date": "2020-06-03T15:29:26Z"
            },
            {
                "name": "v1.10.0",
                "date": "2020-05-27T21:06:12Z"
            },
            {
                "name": "v1.9.6",
                "date": "2020-05-11T11:43:35Z"
            },
            {
                "name": "v1.9.3",
                "date": "2020-04-28T20:00:56Z"
            },
            {
                "name": "v1.9.2",
                "date": "2020-04-24T01:40:19Z"
            },
            {
                "name": "v1.9.1",
                "date": "2020-04-20T14:35:21Z"
            },
            {
                "name": "v1.9.0",
                "date": "2020-04-13T13:26:05Z"
            },
            {
                "name": "v1.8.43",
                "date": "2020-03-31T08:23:20Z"
            },
            {
                "name": "v1.8.42",
                "date": "2020-03-31T08:23:06Z"
            },
            {
                "name": "v1.8.41",
                "date": "2020-03-23T05:20:52Z"
            },
            {
                "name": "v1.8.4",
                "date": "2020-03-23T03:03:39Z"
            },
            {
                "name": "v1.8.3",
                "date": "2020-03-14T12:05:09Z"
            },
            {
                "name": "v1.8.2",
                "date": "2020-03-04T13:08:01Z"
            },
            {
                "name": "v1.8.1",
                "date": "2020-03-01T08:27:51Z"
            },
            {
                "name": "v1.8.0",
                "date": "2020-02-27T04:34:30Z"
            },
            {
                "name": "v1.7.1",
                "date": "2020-02-22T15:34:09Z"
            },
            {
                "name": "v1.0.0",
                "date": "2020-02-22T03:37:50Z"
            }
        ]
    }
}