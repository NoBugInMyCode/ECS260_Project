{
    "https://api.github.com/repos/hyperium/tonic": {
        "forks": 1038,
        "watchers": 10382,
        "stars": 10382,
        "languages": {
            "Rust": 1085689,
            "Shell": 4922,
            "HCL": 1379
        },
        "commits": [
            "2025-01-20T08:35:38Z",
            "2025-01-19T21:22:27Z",
            "2025-01-19T05:21:27Z",
            "2025-01-18T21:36:50Z",
            "2025-01-18T00:55:15Z",
            "2025-01-17T23:50:12Z",
            "2025-01-17T23:29:24Z",
            "2025-01-17T23:25:44Z",
            "2025-01-17T23:11:09Z",
            "2025-01-16T22:25:22Z",
            "2025-01-13T07:40:02Z",
            "2025-01-12T20:36:05Z",
            "2025-01-12T20:29:01Z",
            "2025-01-12T20:27:30Z",
            "2025-01-11T07:29:30Z",
            "2025-01-11T04:48:42Z",
            "2025-01-09T16:06:13Z",
            "2025-01-09T15:52:10Z",
            "2025-01-09T03:56:07Z",
            "2025-01-09T03:55:17Z",
            "2025-01-08T10:41:15Z",
            "2025-01-08T09:47:49Z",
            "2025-01-08T09:02:00Z",
            "2025-01-08T08:58:11Z",
            "2025-01-07T12:50:52Z",
            "2025-01-05T06:42:27Z",
            "2025-01-05T04:15:20Z",
            "2025-01-05T03:10:16Z",
            "2025-01-05T01:25:05Z",
            "2025-01-04T23:38:49Z"
        ],
        "creation_date": "2019-08-09T17:59:37Z",
        "contributors": 30,
        "topics": [
            "async",
            "grpc",
            "proto",
            "rpc",
            "rust"
        ],
        "subscribers": 78,
        "readme": "![](https://github.com/hyperium/tonic/raw/master/.github/assets/tonic-banner.svg?sanitize=true)\n\nA rust implementation of [gRPC], a high performance, open source, general\nRPC framework that puts mobile and HTTP/2 first.\n\n[`tonic`] is a gRPC over HTTP/2 implementation focused on high performance, interoperability, and flexibility. This library was created to have first class support of async/await and to act as a core building block for production systems written in Rust.\n\n[![Crates.io](https://img.shields.io/crates/v/tonic)](https://crates.io/crates/tonic)\n[![Documentation](https://docs.rs/tonic/badge.svg)](https://docs.rs/tonic)\n[![Crates.io](https://img.shields.io/crates/l/tonic)](LICENSE)\n\n\n[Examples] | [Website] | [Docs] | [Chat][discord]\n\n## Overview\n\n[`tonic`] is composed of three main components: the generic gRPC implementation, the high performance HTTP/2\nimplementation and the codegen powered by [`prost`]. The generic implementation can support any HTTP/2\nimplementation and any encoding via a set of generic traits. The HTTP/2 implementation is based on [`hyper`],\na fast HTTP/1.1 and HTTP/2 client and server built on top of the robust [`tokio`] stack. The codegen\ncontains the tools to build clients and servers from [`protobuf`] definitions.\n\n## Features\n\n- Bi-directional streaming\n- High performance async io\n- Interoperability\n- TLS backed by [`rustls`]\n- Load balancing\n- Custom metadata\n- Authentication\n- Health Checking\n\n## Getting Started\n\n- The [`helloworld`][helloworld-tutorial] tutorial provides a basic example of using `tonic`, perfect for first time users!\n- The [`routeguide`][routeguide-tutorial] tutorial provides a complete example of using `tonic` and all its features.\n\nExamples can be found in [`examples`] and for more complex scenarios [`interop`]\nmay be a good resource as it shows examples of many of the gRPC features.\n\n### Rust Version\n\n`tonic`'s MSRV is `1.75`.\n\n### Dependencies\n\n[`tonic-build`] uses `protoc` [Protocol Buffers compiler] in some APIs which compile Protocol Buffers resource files such as [`tonic_build::compile_protos()`].\n\n[Protocol Buffers compiler]: https://protobuf.dev/downloads/\n[`tonic_build::compile_protos()`]: https://docs.rs/tonic-build/latest/tonic_build/fn.compile_protos.html\n\n## Getting Help\n\nFirst, see if the answer to your question can be found in the API documentation.\nIf the answer is not there, there is an active community in\nthe [Tonic Discord channel][discord]. We would be happy to try to answer your\nquestion. If that doesn't work, try opening an [issue] with the question.\n\n[issue]: https://github.com/hyperium/tonic/issues/new/choose\n\n## Project Layout\n\n- [`tonic`]: Generic gRPC and HTTP/2 client/server implementation.\n- [`tonic-build`]: [`prost`] based service codegen.\n- [`tonic-types`]: [`prost`] based grpc utility types including support for gRPC Well Known Types.\n- [`tonic-health`]: Implementation of the standard [gRPC health checking service][healthcheck].\n  Also serves as an example of both unary and response streaming.\n- [`tonic-reflection`]: A tonic based gRPC reflection implementation.\n- [`examples`]: Example gRPC implementations showing off tls, load balancing and bi-directional streaming.\n- [`interop`]: Interop tests implementation.\n\n## Contributing\n\n:balloon: Thanks for your help improving the project! We are so happy to have\nyou! We have a [contributing guide][guide] to help you get involved in the Tonic\nproject.\n\n[guide]: CONTRIBUTING.md\n\n## License\n\nThis project is licensed under the [MIT license](LICENSE).\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in Tonic by you, shall be licensed as MIT, without any additional\nterms or conditions.\n\n\n[gRPC]: https://grpc.io\n[`tonic`]: ./tonic\n[`tonic-build`]: ./tonic-build\n[`tonic-types`]: ./tonic-types\n[`tonic-health`]: ./tonic-health\n[`tonic-reflection`]: ./tonic-reflection\n[`examples`]: ./examples\n[`interop`]: ./interop\n[`tokio`]: https://github.com/tokio-rs/tokio\n[`hyper`]: https://github.com/hyperium/hyper\n[`prost`]: https://github.com/tokio-rs/prost\n[`protobuf`]: https://protobuf.dev/\n[`rustls`]: https://github.com/rustls/rustls\n[`interop`]: https://github.com/hyperium/tonic/tree/master/interop\n[Examples]: https://github.com/hyperium/tonic/tree/master/examples\n[Website]: https://github.com/hyperium/tonic\n[Docs]: https://docs.rs/tonic\n[discord]: https://discord.gg/6yGkFeN\n[routeguide-tutorial]: https://github.com/hyperium/tonic/blob/master/examples/routeguide-tutorial.md\n[helloworld-tutorial]: https://github.com/hyperium/tonic/blob/master/examples/helloworld-tutorial.md\n[healthcheck]: https://grpc.io/docs/guides/health-checking/\n",
        "releases": [
            {
                "name": "v0.12.3",
                "date": "2024-09-26T17:10:40Z"
            },
            {
                "name": "v0.12.2",
                "date": "2024-08-26T20:25:55Z"
            },
            {
                "name": "v0.12.1",
                "date": "2024-07-17T18:11:18Z"
            },
            {
                "name": "v0.12.0",
                "date": "2024-07-08T17:59:49Z"
            }
        ]
    }
}