{
    "https://api.github.com/repos/gibbok/typescript-book": {
        "forks": 530,
        "watchers": 8525,
        "stars": 8525,
        "languages": {
            "TypeScript": 7636,
            "Python": 4263,
            "MDX": 1911,
            "Shell": 1472,
            "JavaScript": 1077,
            "CSS": 769,
            "Makefile": 235
        },
        "commits": [
            "2024-10-15T17:18:35Z",
            "2024-06-04T16:49:00Z",
            "2024-06-02T19:43:32Z",
            "2024-05-30T15:37:46Z",
            "2024-05-30T15:05:37Z",
            "2024-05-29T18:27:14Z",
            "2024-05-28T17:39:03Z",
            "2024-05-28T15:43:09Z",
            "2024-05-27T18:22:16Z",
            "2024-01-24T06:52:15Z",
            "2024-01-24T06:49:09Z",
            "2024-01-18T16:05:12Z",
            "2024-01-18T16:02:14Z",
            "2024-01-18T15:42:00Z",
            "2024-01-18T15:06:36Z",
            "2024-01-18T14:56:46Z",
            "2024-01-18T14:53:12Z",
            "2024-01-18T14:38:52Z",
            "2024-01-18T06:56:07Z",
            "2024-01-18T06:47:15Z",
            "2024-01-17T22:52:15Z",
            "2024-01-17T15:59:09Z",
            "2024-01-15T19:27:17Z",
            "2024-01-15T18:51:37Z",
            "2024-01-11T18:00:31Z",
            "2024-01-06T13:43:03Z",
            "2023-12-31T19:43:57Z",
            "2023-12-11T20:11:16Z",
            "2023-12-09T17:48:52Z",
            "2023-12-08T17:14:21Z"
        ],
        "creation_date": "2022-09-04T16:12:17Z",
        "contributors": 13,
        "topics": [
            "book",
            "free",
            "javascript",
            "javascript-book",
            "learn-typescript",
            "typescript",
            "typescript-book",
            "typescript-guide",
            "typescript-guidebook",
            "typescript-language",
            "typescript-learning",
            "typescript-tutorials"
        ],
        "subscribers": 53,
        "readme": "# The Concise TypeScript Book\n\nThe Concise TypeScript Book provides a comprehensive and succinct overview of TypeScript's capabilities. It offers clear explanations covering all aspects found in the latest version of the language, from its powerful type system to advanced features. Whether you're a beginner or an experienced developer, this book is an invaluable resource to enhance your understanding and proficiency in TypeScript.\n\nThis book is completely Free and Open Source.\n\nIf you found this TypeScript book valuable and wish to contribute, consider supporting my efforts via PayPal. Thanks!\n\n[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/donate/?business=QW82ZS956XLFY&no_recurring=0&currency_code=EUR)\n\n## Translations\n\nThis book has been translated into several language versions, including:\n\n[Chinese](https://github.com/gibbok/typescript-book/blob/main/README-zh_CN.md)\n\n## Downloads and website\n\nYou can also download the Epub version:\n\n[https://github.com/gibbok/typescript-book/tree/main/downloads](https://github.com/gibbok/typescript-book/tree/main/downloads)\n\nAn online version is available at:\n\n[https://gibbok.github.io/typescript-book](https://gibbok.github.io/typescript-book)\n\n## Table of Contents\n\n<!-- markdownlint-disable MD004 -->\n- [The Concise TypeScript Book](#the-concise-typescript-book)\n  - [Translations](#translations)\n  - [Downloads and website](#downloads-and-website)\n  - [Table of Contents](#table-of-contents)\n  - [Introduction](#introduction)\n  - [About the Author](#about-the-author)\n  - [TypeScript Introduction](#typescript-introduction)\n    - [What is TypeScript?](#what-is-typescript)\n    - [Why TypeScript?](#why-typescript)\n    - [TypeScript and JavaScript](#typescript-and-javascript)\n    - [TypeScript Code Generation](#typescript-code-generation)\n    - [Modern JavaScript Now (Downleveling)](#modern-javascript-now-downleveling)\n  - [Getting Started With TypeScript](#getting-started-with-typescript)\n    - [Installation](#installation)\n    - [Configuration](#configuration)\n    - [TypeScript Configuration File](#typescript-configuration-file)\n      - [target](#target)\n      - [lib](#lib)\n      - [strict](#strict)\n      - [module](#module)\n      - [moduleResolution](#moduleresolution)\n      - [esModuleInterop](#esmoduleinterop)\n      - [jsx](#jsx)\n      - [skipLibCheck](#skiplibcheck)\n      - [files](#files)\n      - [include](#include)\n      - [exclude](#exclude)\n    - [importHelpers](#importhelpers)\n    - [Migration to TypeScript Advice](#migration-to-typescript-advice)\n  - [Exploring the Type System](#exploring-the-type-system)\n    - [The TypeScript Language Service](#the-typescript-language-service)\n    - [Structural Typing](#structural-typing)\n    - [TypeScript Fundamental Comparison Rules](#typescript-fundamental-comparison-rules)\n    - [Types as Sets](#types-as-sets)\n    - [Assign a type: Type Declarations and Type Assertions](#assign-a-type-type-declarations-and-type-assertions)\n      - [Type Declaration](#type-declaration)\n      - [Type Assertion](#type-assertion)\n      - [Ambient Declarations](#ambient-declarations)\n    - [Property Checking and Excess Property Checking](#property-checking-and-excess-property-checking)\n    - [Weak Types](#weak-types)\n    - [Strict Object Literal Checking (Freshness)](#strict-object-literal-checking-freshness)\n    - [Type Inference](#type-inference)\n    - [More Advanced Inferences](#more-advanced-inferences)\n    - [Type Widening](#type-widening)\n    - [Const](#const)\n      - [Const Modifier on Type Parameters](#const-modifier-on-type-parameters)\n      - [Const assertion](#const-assertion)\n    - [Explicit Type Annotation](#explicit-type-annotation)\n    - [Type Narrowing](#type-narrowing)\n      - [Conditions](#conditions)\n      - [Throwing or returning](#throwing-or-returning)\n      - [Discriminated Union](#discriminated-union)\n      - [User-Defined Type Guards](#user-defined-type-guards)\n  - [Primitive Types](#primitive-types)\n    - [string](#string)\n    - [boolean](#boolean)\n    - [number](#number)\n    - [bigInt](#bigint)\n    - [Symbol](#symbol)\n    - [null and undefined](#null-and-undefined)\n    - [Array](#array)\n    - [any](#any)\n  - [Type Annotations](#type-annotations)\n  - [Optional Properties](#optional-properties)\n  - [Readonly Properties](#readonly-properties)\n  - [Index Signatures](#index-signatures)\n  - [Extending Types](#extending-types)\n  - [Literal Types](#literal-types)\n  - [Literal Inference](#literal-inference)\n  - [strictNullChecks](#strictnullchecks)\n  - [Enums](#enums)\n    - [Numeric enums](#numeric-enums)\n    - [String enums](#string-enums)\n    - [Constant enums](#constant-enums)\n    - [Reverse mapping](#reverse-mapping)\n    - [Ambient enums](#ambient-enums)\n    - [Computed and constant members](#computed-and-constant-members)\n  - [Narrowing](#narrowing)\n    - [typeof type guards](#typeof-type-guards)\n    - [Truthiness narrowing](#truthiness-narrowing)\n    - [Equality narrowing](#equality-narrowing)\n    - [In Operator narrowing](#in-operator-narrowing)\n    - [instanceof narrowing](#instanceof-narrowing)\n  - [Assignments](#assignments)\n  - [Control Flow Analysis](#control-flow-analysis)\n  - [Type Predicates](#type-predicates)\n  - [Discriminated Unions](#discriminated-unions)\n  - [The never Type](#the-never-type)\n  - [Exhaustiveness checking](#exhaustiveness-checking)\n  - [Object Types](#object-types)\n  - [Tuple Type (Anonymous)](#tuple-type-anonymous)\n  - [Named Tuple Type (Labeled)](#named-tuple-type-labeled)\n  - [Fixed Length Tuple](#fixed-length-tuple)\n  - [Union Type](#union-type)\n  - [Intersection Types](#intersection-types)\n  - [Type Indexing](#type-indexing)\n  - [Type from Value](#type-from-value)\n  - [Type from Func Return](#type-from-func-return)\n  - [Type from Module](#type-from-module)\n  - [Mapped Types](#mapped-types)\n  - [Mapped Type Modifiers](#mapped-type-modifiers)\n  - [Conditional Types](#conditional-types)\n  - [Distributive Conditional Types](#distributive-conditional-types)\n  - [infer Type Inference in Conditional Types](#infer-type-inference-in-conditional-types)\n  - [Predefined Conditional Types](#predefined-conditional-types)\n  - [Template Union Types](#template-union-types)\n  - [Any type](#any-type)\n  - [Unknown type](#unknown-type)\n  - [Void type](#void-type)\n  - [Never type](#never-type)\n  - [Interface and Type](#interface-and-type)\n    - [Common Syntax](#common-syntax)\n    - [Basic Types](#basic-types)\n    - [Objects and Interfaces](#objects-and-interfaces)\n    - [Union and Intersection Types](#union-and-intersection-types)\n  - [Built-in Type Primitives](#built-in-type-primitives)\n  - [Common Built-in JS Objects](#common-built-in-js-objects)\n  - [Overloads](#overloads)\n  - [Merging and Extension](#merging-and-extension)\n  - [Differences between Type and Interface](#differences-between-type-and-interface)\n  - [Class](#class)\n    - [Class Common Syntax](#class-common-syntax)\n    - [Constructor](#constructor)\n    - [Private and Protected Constructors](#private-and-protected-constructors)\n    - [Access Modifiers](#access-modifiers)\n    - [Get and Set](#get-and-set)\n    - [Auto-Accessors in Classes](#auto-accessors-in-classes)\n    - [this](#this)\n    - [Parameter Properties](#parameter-properties)\n    - [Abstract Classes](#abstract-classes)\n    - [With Generics](#with-generics)\n    - [Decorators](#decorators)\n      - [Class Decorators](#class-decorators)\n      - [Property Decorator](#property-decorator)\n      - [Method Decorator](#method-decorator)\n      - [Getter and Setter Decorators](#getter-and-setter-decorators)\n      - [Decorator Metadata](#decorator-metadata)\n    - [Inheritance](#inheritance)\n    - [Statics](#statics)\n    - [Property initialization](#property-initialization)\n    - [Method overloading](#method-overloading)\n  - [Generics](#generics)\n    - [Generic Type](#generic-type)\n    - [Generic Classes](#generic-classes)\n    - [Generic Constraints](#generic-constraints)\n    - [Generic contextual narrowing](#generic-contextual-narrowing)\n  - [Erased Structural Types](#erased-structural-types)\n  - [Namespacing](#namespacing)\n  - [Symbols](#symbols)\n  - [Triple-Slash Directives](#triple-slash-directives)\n  - [Type Manipulation](#type-manipulation)\n    - [Creating Types from Types](#creating-types-from-types)\n    - [Indexed Access Types](#indexed-access-types)\n    - [Utility Types](#utility-types)\n      - [Awaited\\<T\\>](#awaitedt)\n      - [Partial\\<T\\>](#partialt)\n      - [Required\\<T\\>](#requiredt)\n      - [Readonly\\<T\\>](#readonlyt)\n      - [Record\\<K, T\\>](#recordk-t)\n      - [Pick\\<T, K\\>](#pickt-k)\n      - [Omit\\<T, K\\>](#omitt-k)\n      - [Exclude\\<T, U\\>](#excludet-u)\n      - [Extract\\<T, U\\>](#extractt-u)\n      - [NonNullable\\<T\\>](#nonnullablet)\n      - [Parameters\\<T\\>](#parameterst)\n      - [ConstructorParameters\\<T\\>](#constructorparameterst)\n      - [ReturnType\\<T\\>](#returntypet)\n      - [InstanceType\\<T\\>](#instancetypet)\n      - [ThisParameterType\\<T\\>](#thisparametertypet)\n      - [OmitThisParameter\\<T\\>](#omitthisparametert)\n      - [ThisType\\<T\\>](#thistypet)\n      - [Uppercase\\<T\\>](#uppercaset)\n      - [Lowercase\\<T\\>](#lowercaset)\n      - [Capitalize\\<T\\>](#capitalizet)\n      - [Uncapitalize\\<T\\>](#uncapitalizet)\n      - [NoInfer\\<T\\>](#noinfert)\n  - [Others](#others)\n    - [Errors and Exception Handling](#errors-and-exception-handling)\n    - [Mixin classes](#mixin-classes)\n    - [Asynchronous Language Features](#asynchronous-language-features)\n    - [Iterators and Generators](#iterators-and-generators)\n    - [TsDocs JSDoc Reference](#tsdocs-jsdoc-reference)\n    - [@types](#types)\n    - [JSX](#jsx-1)\n    - [ES6 Modules](#es6-modules)\n    - [ES7 Exponentiation Operator](#es7-exponentiation-operator)\n    - [The for-await-of Statement](#the-for-await-of-statement)\n    - [New target meta-property](#new-target-meta-property)\n    - [Dynamic Import Expressions](#dynamic-import-expressions)\n    - [\"tsc \u2013watch\"](#tsc-watch)\n    - [Non-null Assertion Operator](#non-null-assertion-operator)\n    - [Defaulted declarations](#defaulted-declarations)\n    - [Optional Chaining](#optional-chaining)\n    - [Nullish coalescing operator](#nullish-coalescing-operator)\n    - [Template Literal Types](#template-literal-types)\n    - [Function overloading](#function-overloading)\n    - [Recursive Types](#recursive-types)\n    - [Recursive Conditional Types](#recursive-conditional-types)\n    - [ECMAScript Module Support in Node](#ecmascript-module-support-in-node)\n    - [Assertion Functions](#assertion-functions)\n    - [Variadic Tuple Types](#variadic-tuple-types)\n    - [Boxed types](#boxed-types)\n    - [Covariance and Contravariance in TypeScript](#covariance-and-contravariance-in-typescript)\n      - [Optional Variance Annotations for Type Parameters](#optional-variance-annotations-for-type-parameters)\n    - [Template String Pattern Index Signatures](#template-string-pattern-index-signatures)\n    - [The satisfies Operator](#the-satisfies-operator)\n    - [Type-Only Imports and Export](#type-only-imports-and-export)\n    - [using declaration and Explicit Resource Management](#using-declaration-and-explicit-resource-management)\n      - [await using declaration](#await-using-declaration)\n    - [Import Attributes](#import-attributes)\n<!-- markdownlint-enable MD004 -->\n\n## Introduction\n\nWelcome to The Concise TypeScript Book! This guide equips you with essential knowledge and practical skills for effective TypeScript development. Discover key concepts and techniques to write clean, robust code. Whether you're a beginner or an experienced developer, this book serves as both a comprehensive guide and a handy reference for leveraging TypeScript's power in your projects.\n\nThis book covers TypeScript 5.2.\n\n## About the Author\n\nSimone Poggiali is an experienced Senior Front-end Developer with a passion for writing professional-grade code since the 90s. Throughout his international career, he has contributed to numerous projects for a wide range of clients, from startups to large organizations. Notable companies such as HelloFresh, Siemens, O2, and Leroy Merlin have benefited from his expertise and dedication.\n\nYou can reach Simone Poggiali on the following platforms:\n\n* LinkedIn: [https://www.linkedin.com/in/simone-poggiali](https://www.linkedin.com/in/simone-poggiali)\n* GitHub: [https://github.com/gibbok](https://github.com/gibbok)\n* X.com: [https://x.com/gibbok_coding](https://x.com/gibbok_coding)\n* Email: gibbok.coding\ud83d\udce7gmail.com\n\n## TypeScript Introduction\n\n### What is TypeScript?\n\nTypeScript is a strongly typed programming language that builds on JavaScript. It was originally designed by Anders Hejlsberg in 2012 and is currently developed and maintained by Microsoft as an open source project.\n\nTypeScript compiles to JavaScript and can be executed in any JavaScript runtime (e.g., a browser or server Node.js).\n\nTypeScript supports multiple programming paradigms such as functional, generic, imperative, and object-oriented. TypeScript is neither an interpreted nor a compiled language.\n\n### Why TypeScript?\n\nTypeScript is a strongly typed language that helps prevent common programming mistakes and avoid certain kinds of run-time errors before the program is executed.\n\nA strongly typed language allows the developer to specify various program constraints and behaviors in the data type definitions, facilitating the ability to verify the correctness of the software and prevent defects. This is especially valuable in large-scale applications.\n\nSome of the benefits of TypeScript:\n\n* Static typing, optionally strongly typed\n* Type Inference\n* Access to ES6 and ES7 features\n* Cross-Platform and Cross-browser Compatibility\n* Tooling support with IntelliSense\n\n### TypeScript and JavaScript\n\nTypeScript is written in `.ts` or `.tsx` files, while JavaScript files are written in `.js` or `.jsx`.\n\nFiles with the extension `.tsx` or `.jsx` can contain JavaScript Syntax Extension JSX, which is used in React for UI development.\n\nTypeScript is a typed superset of JavaScript (ECMAScript 2015) in terms of syntax. All JavaScript code is valid TypeScript code, but the reverse is not always true.\n\nFor instance, consider a function in a JavaScript file with the `.js` extension, such as the following:\n\n<!-- skip -->\n```typescript\nconst sum = (a, b) => a + b;\n```\n\nThe function can be converted and used in TypeScript by changing the file extension to `.ts`. However, if the same function is annotated with TypeScript types, it cannot be executed in any JavaScript runtime without compilation. The following TypeScript code will produce a syntax error if it is not compiled:\n\n<!-- skip -->\n```typescript\nconst sum = (a: number, b: number): number => a + b;\n```\n\nTypeScript was designed to detect possible exceptions that can occur at runtime during compilation time by having the developer define the intent with type annotations. In addition, TypeScript can also catch issues if no type annotation is provided. For instance, the following code snippet does not specify any TypeScript types:\n\n<!-- skip -->\n```typescript\nconst items = [{ x: 1 }, { x: 2 }];\nconst result = items.filter(item => item.y);\n```\n\nIn this case, TypeScript detects an error and reports:\n\n```text\nProperty 'y' does not exist on type '{ x: number; }'.\n```\n\nTypeScript's type system is largely influenced by the runtime behavior of JavaScript. For example, the addition operator (+), which in JavaScript can either perform string concatenation or numeric addition, is modeled in the same way in TypeScript:\n\n```typescript\nconst result = '1' + 1; // Result is of type string\n```\n\nThe team behind TypeScript has made a deliberate decision to flag unusual usage of JavaScript as errors. For instance, consider the following valid JavaScript code:\n\n<!-- skip -->\n```typescript\nconst result = 1 + true; // In JavaScript, the result is equal 2\n```\n\nHowever, TypeScript throws an error:\n\n```text\nOperator '+' cannot be applied to types 'number' and 'boolean'.\n```\n\nThis error occurs because TypeScript strictly enforces type compatibility, and in this case, it identifies an invalid operation between a number and a boolean.\n\n### TypeScript Code Generation\n\nThe TypeScript compiler has two main responsibilities: checking for type errors and compiling to JavaScript. These two processes are independent of each other. Types do not affect the execution of the code in a JavaScript runtime, as they are completely erased during compilation. TypeScript can still output JavaScript even in the presence of type errors.\nHere is an example of TypeScript code with a type error:\n\n<!-- skip -->\n```typescript\nconst add = (a: number, b: number): number => a + b;\nconst result = add('x', 'y'); // Argument of type 'string' is not assignable to parameter of type 'number'.\n```\n\nHowever, it can still produce executable JavaScript output:\n\n<!-- skip -->\n```typescript\n'use strict';\nconst add = (a, b) => a + b;\nconst result = add('x', 'y'); // xy\n```\n\nIt is not possible to check TypeScript types at runtime. For example:\n\n<!-- skip -->\n```typescript\ninterface Animal {\n    name: string;\n}\ninterface Dog extends Animal {\n    bark: () => void;\n}\ninterface Cat extends Animal {\n    meow: () => void;\n}\nconst makeNoise = (animal: Animal) => {\n    if (animal instanceof Dog) {\n        // 'Dog' only refers to a type, but is being used as a value here.\n        // ...\n    }\n};\n```\n\nAs the types are erased after compilation, there is no way to run this code in JavaScript. To recognize types at runtime, we need to use another mechanism. TypeScript provides several options, with a common one being \"tagged union\". For example:\n\n```typescript\ninterface Dog {\n    kind: 'dog'; // Tagged union\n    bark: () => void;\n}\ninterface Cat {\n    kind: 'cat'; // Tagged union\n    meow: () => void;\n}\ntype Animal = Dog | Cat;\n\nconst makeNoise = (animal: Animal) => {\n    if (animal.kind === 'dog') {\n        animal.bark();\n    } else {\n        animal.meow();\n    }\n};\n\nconst dog: Dog = {\n    kind: 'dog',\n    bark: () => console.log('bark'),\n};\nmakeNoise(dog);\n```\n\nThe property \"kind\" is a value that can be used at runtime to distinguish between objects in JavaScript.\n\nIt is also possible for a value at runtime to have a type different from the one declared in the type declaration. For instance, if the developer has misinterpreted an API type and annotated it incorrectly.\n\nTypeScript is a superset of JavaScript, so the \"class\" keyword can be used as a type and value at runtime.\n\n```typescript\nclass Animal {\n    constructor(public name: string) {}\n}\nclass Dog extends Animal {\n    constructor(\n        public name: string,\n        public bark: () => void\n    ) {\n        super(name);\n    }\n}\nclass Cat extends Animal {\n    constructor(\n        public name: string,\n        public meow: () => void\n    ) {\n        super(name);\n    }\n}\ntype Mammal = Dog | Cat;\n\nconst makeNoise = (mammal: Mammal) => {\n    if (mammal instanceof Dog) {\n        mammal.bark();\n    } else {\n        mammal.meow();\n    }\n};\n\nconst dog = new Dog('Fido', () => console.log('bark'));\nmakeNoise(dog);\n```\n\nIn JavaScript, a \"class\" has a \"prototype\" property, and the \"instanceof\" operator can be used to test if the prototype property of a constructor appears anywhere in the prototype chain of an object.\n\nTypeScript has no effect on runtime performance, as all types will be erased. However, TypeScript does introduce some build time overhead.\n\n### Modern JavaScript Now (Downleveling)\n\nTypeScript can compile code to any released version of JavaScript since ECMAScript 3 (1999). This means that TypeScript can transpile code from the latest JavaScript features to older versions, a process known as Downleveling. This allows the usage of modern JavaScript while maintaining maximum compatibility with older runtime environments.\n\nIt's important to note that during transpilation to an older version of JavaScript, TypeScript may generate code that could incur a performance overhead compared to native implementations.\n\nHere are some of the modern JavaScript features that can be used in TypeScript:\n\n* ECMAScript modules instead of AMD-style \"define\" callbacks or CommonJS \"require\" statements.\n* Classes instead of prototypes.\n* Variables declaration using \"let\" or \"const\" instead of \"var\".\n* \"for-of\" loop or \".forEach\" instead of the traditional \"for\" loop.\n* Arrow functions instead of function expressions.\n* Destructuring assignment.\n* Shorthand property/method names and computed property names.\n* Default function parameters.\n\nBy leveraging these modern JavaScript features, developers can write more expressive and concise code in TypeScript.\n\n## Getting Started With TypeScript\n\n### Installation\n\nVisual Studio Code provides excellent support for the TypeScript language but does not include the TypeScript compiler. To install the TypeScript compiler, you can use a package manager like npm or yarn:\n\n```shell\nnpm install typescript --save-dev\n```\n\nor\n\n```shell\nyarn add typescript --dev\n```\n\nMake sure to commit the generated lockfile to ensure that every team member uses the same version of TypeScript.\n\nTo run the TypeScript compiler, you can use the following commands\n\n```shell\nnpx tsc\n```\n\nor\n\n```shell\nyarn tsc\n```\n\nIt is recommended to install TypeScript project-wise rather than globally, as it provides a more predictable build process. However, for one-off occasions, you can use the following command:\n\n```shell\nnpx tsc\n```\n\nor installing it globally:\n\n```shell\nnpm install -g typescript\n```\n\nIf you are using Microsoft Visual Studio, you can obtain TypeScript as a package in NuGet for your MSBuild projects. In the NuGet Package Manager Console, run the following command:\n\n```shell\nInstall-Package Microsoft.TypeScript.MSBuild\n```\n\nDuring the TypeScript installation, two executables are installed: \"tsc\" as the TypeScript compiler and \"tsserver\" as the TypeScript standalone server. The standalone server contains the compiler and language services that can be utilized by editors and IDEs to provide intelligent code completion.\n\nAdditionally, there are several TypeScript-compatible transpilers available, such as Babel (via a plugin) or swc. These transpilers can be used to convert TypeScript code into other target languages or versions.\n\n### Configuration\n\nTypeScript can be configured using the tsc CLI options or by utilizing a dedicated configuration file called tsconfig.json placed in the root of the project.\n\nTo generate a tsconfig.json file prepopulated with recommended settings, you can use the following command:\n\n```shell\ntsc --init\n```\n\nWhen executing the `tsc` command locally, TypeScript will compile the code using the configuration specified in the nearest tsconfig.json file.\n\nHere are some examples of CLI commands that run with the default settings:\n\n```shell\ntsc main.ts // Compile a specific file (main.ts) to JavaScript\ntsc src/*.ts // Compile any .ts files under the 'src' folder to JavaScript\ntsc app.ts util.ts --outfile index.js // Compile two TypeScript files (app.ts and util.ts) into a single JavaScript file (index.js)\n```\n\n### TypeScript Configuration File\n\nA tsconfig.json file is used to configure the TypeScript Compiler (tsc). Usually, it is added to the root of the project, together with the `package.json` file.\n\nNotes:\n\n* tsconfig.json accepts comments even if it is in json format.\n* It is advisable to use this configuration file instead of the command-line options.\n\nAt the following link you can find the complete documentation and its schema:\n\n[https://www.typescriptlang.org/tsconfig](https://www.typescriptlang.org/tsconfig)\n\n[http://json.schemastore.org/tsconfig](http://json.schemastore.org/tsconfig)\n\nThe following represents a list of the common and useful configurations:\n\n#### target\n\nThe \"target\" property is used to specify which version of JavaScript ECMAScript version your TypeScript should emit/compile into. For modern browsers ES6 is a good option, for older browsers, ES5 is recommended.\n\n#### lib\n\nThe \"lib\" property is used to specify which library files to include at compilation time. TypeScript automatically includes APIs for features specified in the \"target\" property, but it is possible to omit or pick specific libraries for particular needs. For instance, if you are working on a server project, you could exclude the \"DOM\" library, which is useful only in a browser environment.\n\n#### strict\n\nThe \"strict\" property enables stronger guarantees and enhances type safety. It is advisable to always include this property in your project's tsconfig.json file. Enabling the \"strict\" property allows TypeScript to:\n\n* Emit code using \"use strict\" for each source file.\n* Consider \"null\" and \"undefined\" in the type checking process.\n* Disable the usage of the \"any\" type when no type annotations are present.\n* Raise an error on the usage of the \"this\" expression, which would otherwise imply the \"any\" type.\n\n#### module\n\nThe \"module\" property sets the module system supported for the compiled program. During runtime, a module loader is used to locate and execute dependencies based on the specified module system.\n\nThe most common module loaders used in JavaScript are Node.js CommonJS for server-side applications and RequireJS for AMD modules in browser-based web applications. TypeScript can emit code for various module systems, including UMD, System, ESNext, ES2015/ES6, and ES2020.\n\nNote: The module system should be chosen based on the target environment and the module loading mechanism available in that environment.\n\n#### moduleResolution\n\nThe \"moduleResolution\" property specifies the module resolution strategy. Use \"node\" for modern TypeScript code, the \"classic\" strategy is used only for old versions of TypeScript (before 1.6).\n\n#### esModuleInterop\n\nThe \"esModuleInterop\" property allows import default from CommonJS modules that did not export using the \"default\" property, this property provides a shim to ensure compatibility in the emitted JavaScript. After enabling this option we can use `import MyLibrary from \"my-library\"` instead of `import * as MyLibrary from \"my-library\"`.\n\n#### jsx\n\nThe \"jsx\" property applies only to .tsx files used in ReactJS and controls how JSX constructs are compiled into JavaScript. A common option is \"preserve\" which will compile to a .jsx file keeping unchanged the JSX so it can be passed to different tools like Babel for further transformations.\n\n#### skipLibCheck\n\nThe \"skipLibCheck'' property will prevent TypeScript from type-checking the entire imported third-party packages. This property will reduce the compile time of a project. TypeScript will still check your code against the type definitions provided by these packages.\n\n#### files\n\nThe \"files\" property indicates to the compiler a list of files that must always be included in the program.\n\n#### include\n\n<!-- markdownlint-disable MD049 -->\nThe \"include\" property indicates to the compiler a list of files that we would like to include. This property allows glob-like patterns, such as \"\\*_\" for any subdirectory, \"_\" for any file name, and \"?\" for optional characters.\n<!-- markdownlint-enable MD049 -->\n\n#### exclude\n\nThe \"exclude\" property indicates to the compiler a list of files that should not be included in the compilation. This can include files such as \"node_modules\" or test files.\nNote: tsconfig.json allows comments.\n\n### importHelpers\n\nTypeScript uses helper code when generating code for certain advanced or down-leveled JavaScript features. By default, these helpers are duplicated in files using them. The `importHelpers` option imports these helpers from the `tslib` module instead, making the JavaScript output more efficient.\n\n### Migration to TypeScript Advice\n\nFor large projects, it is recommended to adopt a gradual transition where TypeScript and JavaScript code will initially coexist. Only small projects can be migrated to TypeScript in one go.\n\nThe first step of this transition is to introduce TypeScript into the build chain process. This can be done by using the \"allowJs\" compiler option, which permits .ts and .tsx files to coexist with existing JavaScript files. As TypeScript will fall back to a type of \"any\" for a variable when it cannot infer the type from JavaScript files, it is recommended to disable \"noImplicitAny\" in your compiler options at the beginning of the migration.\n\nThe second step is to ensure that your JavaScript tests work alongside TypeScript files so that you can run tests as you convert each module. If you are using Jest, consider using `ts-jest`, which allows you to test TypeScript projects with Jest.\n\nThe third step is to include type declarations for third-party libraries in your project. These declarations can be found either bundled or on DefinitelyTyped. You can search for them using [https://www.typescriptlang.org/dt/search](https://www.typescriptlang.org/dt/search) and install them using:\n\n```shell\nnpm install --save-dev @types/package-name or yarn add --dev @types/package-name.\n```\n\nThe fourth step is to migrate module by module with a bottom-up approach, following your Dependency Graph starting with the leaves. The idea is to start converting Modules that do not depend on other Modules. To visualize the dependency graphs, you can use the \"madge\" tool.\n\nGood candidate modules for these initial conversions are utility functions and code related to external APIs or specifications. It is possible to automatically generate TypeScript type definitions from Swagger contracts, GraphQL or JSON schemas to be included in your project.\n\nWhen there are no specifications or official schemas available, you can generate types from raw data, such as JSON returned by a server. However, it is recommended to generate types from specifications instead of data to avoid missing edge cases.\n\nDuring the migration, refrain from code refactoring and focus only on adding types to your modules.\n\nThe fifth step is to enable \"noImplicitAny,\" which will enforce that all types are known and defined, providing a better TypeScript experience for your project.\n\nDuring the migration, you can use the `@ts-check` directive, which enables TypeScript type checking in a JavaScript file. This directive provides a loose version of type checking and can be initially used to identify issues in JavaScript files. When `@ts-check` is included in a file, TypeScript will try to deduce definitions using JSDoc-style comments. However, consider using JSDoc annotations only at a very early stage of the migration.\n\nConsider keeping the default value of `noEmitOnError` in your tsconfig.json as false. This will allow you to output JavaScript source code even if errors are reported.\n\n## Exploring the Type System\n\n### The TypeScript Language Service\n\nThe TypeScript Language Service, also known as tsserver, offers various features such as error reporting, diagnostics, compile-on-save, renaming, go to definition, completion lists, signature help, and more. It is primarily used by integrated development environments (IDEs) to provide IntelliSense support. It seamlessly integrates with Visual Studio Code and is utilized by tools like Conquer of Completion (Coc).\n\nDevelopers can leverage a dedicated API and create their own custom language service plugins to enhance the TypeScript editing experience. This can be particularly useful for implementing special linting features or enabling auto-completion for a custom templating language.\n\n<!-- markdownlint-disable MD044 -->\nAn example of a real-world custom plugin is \"typescript-styled-plugin\", which provides syntax error reporting and IntelliSense support for CSS properties in styled components.\n<!-- markdownlint-enable MD044 -->\n\nFor more information and quick start guides, you can refer to the official TypeScript Wiki on GitHub: [https://github.com/microsoft/TypeScript/wiki/](https://github.com/microsoft/TypeScript/wiki/)\n\n### Structural Typing\n\nTypeScript is based on a structural type system. This means that the compatibility and equivalence of types are determined by the type's actual structure or definition, rather than its name or place of declaration, as in nominative type systems like C# or C.\n\nTypeScript's structural type system was designed based on how JavaScript's dynamic duck typing system works during runtime.\n\nThe following example is valid TypeScript code. As you can observe, \"X\" and \"Y\" have the same member \"a,\" even though they have different declaration names. The types are determined by their structures, and in this case, since the structures are the same, they are compatible and valid.\n\n```typescript\ntype X = {\n    a: string;\n};\ntype Y = {\n    a: string;\n};\nconst x: X = { a: 'a' };\nconst y: Y = x; // Valid\n```\n\n### TypeScript Fundamental Comparison Rules\n\nThe TypeScript comparison process is recursive and executed on types nested at any level.\n\nA type \"X\" is compatible with \"Y\" if \"Y\" has at least the same members as \"X\".\n\n```typescript\ntype X = {\n    a: string;\n};\nconst y = { a: 'A', b: 'B' }; // Valid, as it has at least the same members as X\nconst r: X = y;\n```\n\nFunction parameters are compared by types, not by their names:\n\n```typescript\ntype X = (a: number) => void;\ntype Y = (a: number) => void;\nlet x: X = (j: number) => undefined;\nlet y: Y = (k: number) => undefined;\ny = x; // Valid\nx = y; // Valid\n```\n\nFunction return types must be the same:\n\n<!-- skip -->\n```typescript\ntype X = (a: number) => undefined;\ntype Y = (a: number) => number;\nlet x: X = (a: number) => undefined;\nlet y: Y = (a: number) => 1;\ny = x; // Invalid\nx = y; // Invalid\n```\n\nThe return type of a source function must be a subtype of the return type of a target function:\n\n<!-- skip -->\n```typescript\nlet x = () => ({ a: 'A' });\nlet y = () => ({ a: 'A', b: 'B' });\nx = y; // Valid\ny = x; // Invalid member b is missing\n```\n\nDiscarding function parameters is allowed, as it is a common practice in JavaScript, for instance using \"Array.prototype.map()\":\n\n```typescript\n[1, 2, 3].map((element, _index, _array) => element + 'x');\n```\n\nTherefore, the following type declarations are completely valid:\n\n```typescript\ntype X = (a: number) => undefined;\ntype Y = (a: number, b: number) => undefined;\nlet x: X = (a: number) => undefined;\nlet y: Y = (a: number) => undefined; // Missing b parameter\ny = x; // Valid\n```\n\nAny additional optional parameters of the source type are valid:\n\n```typescript\ntype X = (a: number, b?: number, c?: number) => undefined;\ntype Y = (a: number) => undefined;\nlet x: X = a => undefined;\nlet y: Y = a => undefined;\ny = x; // Valid\nx = y; //Valid\n```\n\nAny optional parameters of the target type without corresponding parameters in the source type are valid and not an error:\n\n```typescript\ntype X = (a: number) => undefined;\ntype Y = (a: number, b?: number) => undefined;\nlet x: X = a => undefined;\nlet y: Y = a => undefined;\ny = x; // Valid\nx = y; // Valid\n```\n\nThe rest parameter is treated as an infinite series of optional parameters:\n\n```typescript\ntype X = (a: number, ...rest: number[]) => undefined;\nlet x: X = a => undefined; //valid\n```\n\nFunctions with overloads are valid if the overload signature is compatible with its implementation signature:\n\n<!-- skip -->\n```typescript\nfunction x(a: string): void;\nfunction x(a: string, b: number): void;\nfunction x(a: string, b?: number): void {\n    console.log(a, b);\n}\nx('a'); // Valid\nx('a', 1); // Valid\n\nfunction y(a: string): void; // Invalid, not compatible with implementation signature\nfunction y(a: string, b: number): void;\nfunction y(a: string, b: number): void {\n    console.log(a, b);\n}\ny('a');\ny('a', 1);\n```\n\nFunction parameter comparison succeeds if the source and target parameters are assignable to supertypes or subtypes (bivariance).\n\n```typescript\n// Supertype\nclass X {\n    a: string;\n    constructor(value: string) {\n        this.a = value;\n    }\n}\n// Subtype\nclass Y extends X {}\n// Subtype\nclass Z extends X {}\n\ntype GetA = (x: X) => string;\nconst getA: GetA = x => x.a;\n\n// Bivariance does accept supertypes\nconsole.log(getA(new X('x'))); // Valid\nconsole.log(getA(new Y('Y'))); // Valid\nconsole.log(getA(new Z('z'))); // Valid\n```\n\nEnums are comparable and valid with numbers and vice versa, but comparing Enum values from different Enum types is invalid.\n\n<!-- skip -->\n```typescript\nenum X {\n    A,\n    B,\n}\nenum Y {\n    A,\n    B,\n    C,\n}\nconst xa: number = X.A; // Valid\nconst ya: Y = 0; // Valid\nX.A === Y.A; // Invalid\n```\n\nInstances of a class are subject to a compatibility check for their private and protected members:\n\n<!-- skip -->\n```typescript\nclass X {\n    public a: string;\n    constructor(value: string) {\n        this.a = value;\n    }\n}\n\nclass Y {\n    private a: string;\n    constructor(value: string) {\n        this.a = value;\n    }\n}\n\nlet x: X = new Y('y'); // Invalid\n```\n\nThe comparison check does not take into consideration the different inheritance hierarchy, for instance:\n\n```typescript\nclass X {\n    public a: string;\n    constructor(value: string) {\n        this.a = value;\n    }\n}\nclass Y extends X {\n    public a: string;\n    constructor(value: string) {\n        super(value);\n        this.a = value;\n    }\n}\nclass Z {\n    public a: string;\n    constructor(value: string) {\n        this.a = value;\n    }\n}\nlet x: X = new X('x');\nlet y: Y = new Y('y');\nlet z: Z = new Z('z');\nx === y; // Valid\nx === z; // Valid even if z is from a different inheritance hierarchy\n```\n\nGenerics are compared using their structures based on the resulting type after applying the generic parameter, only the final result is compared as a non-generic type.\n\n<!-- skip -->\n```typescript\ninterface X<T> {\n    a: T;\n}\nlet x: X<number> = { a: 1 };\nlet y: X<string> = { a: 'a' };\nx === y; // Invalid as the type argument is used in the final structure\n```\n\n```typescript\ninterface X<T> {}\nconst x: X<number> = 1;\nconst y: X<string> = 'a';\nx === y; // Valid as the type argument is not used in the final structure\n```\n\nWhen generics do not have their type argument specified, all the unspecified arguments are treated as types with \"any\":\n\n```typescript\ntype X = <T>(x: T) => T;\ntype Y = <K>(y: K) => K;\nlet x: X = x => x;\nlet y: Y = y => y;\nx = y; // Valid\n```\n\nRemember:\n\n<!-- skip -->\n```typescript\nlet a: number = 1;\nlet b: number = 2;\na = b; // Valid, everything is assignable to itself\n\nlet c: any;\nc = 1; // Valid, all types are assignable to any\n\nlet d: unknown;\nd = 1; // Valid, all types are assignable to unknown\n\nlet e: unknown;\nlet e1: unknown = e; // Valid, unknown is only assignable to itself and any\nlet e2: any = e; // Valid\nlet e3: number = e; // Invalid\n\nlet f: never;\nf = 1; // Invalid, nothing is assignable to never\n\nlet g: void;\nlet g1: any;\ng = 1; // Invalid, void is not assignable to or from anything expect any\ng = g1; // Valid\n```\n\nPlease note that when \"strictNullChecks\" is enabled, \"null\" and \"undefined\" are treated similarly to \"void\"; otherwise, they are similar to \"never\".\n\n### Types as Sets\n\nIn TypeScript, a type is a set of possible values. This set is also referred to as the domain of the type. Each value of a type can be viewed as an element in a set. A type establishes the constraints that every element in the set must satisfy to be considered a member of that set.\nThe primary task of TypeScript is to check and verify whether one set is a subset of another.\n\nTypeScript supports various types of sets:\n\n| Set term           | TypeScript                      | Notes                                                                                                              |\n| ------------------ | ------------------------------- | ------------------------------------------------------------------------------------------------------------------ |\n| Empty set          | never                           | \"never\" contains anything apart itself                                                                             |\n| Single element set | undefined / null / literal type |                                                                                                                    |\n| Finite set         | boolean / union                 |                                                                                                                    |\n| Infinite set       | string / number / object        |                                                                                                                    |\n| Universal set      | any / unknown                   | Every element is a member of \"any\" and every set is a subset of it / \"unknown\" is a type-safe counterpart of \"any\" |\n\nHere few examples:\n\n| TypeScript            | Set term               | Example                                                                         |\n| --------------------- | ---------------------- | ------------------------------------------------------------------------------- |\n| never                 | \u2205 (empty set)          | const x: never = 'x'; // Error: Type 'string' is not assignable to type 'never' |\n|                       |                        |\n| Literal type          | Single element set     | type X = 'X';                                                                   |\n|                       |                        | type Y = 7;                                                                     |\n|                       |                        |\n| Value assignable to T | Value \u2208 T (member of)  | type XY = 'X' \\| 'Y';                                                           |\n|                       |                        | const x: XY = 'X';                                                              |\n|                       |                        |\n| T1 assignable to T2   | T1 \u2286 T2 (subset of)    | type XY = 'X' \\| 'Y';                                                           |\n|                       |                        | const x: XY = 'X';                                                              |\n|                       |                        | const j: XY = 'J'; // Type '\"J\"' is not assignable to type 'XY'.                |\n|                       |                        |                                                                                 |\n| T1 extends T2         | T1 \u2286 T2 (subset of)    | type X = 'X' extends string ? true : false;                                     |\n|                       |                        |\n| T1 \\| T2              | T1 \u222a T2 (union)        | type XY = 'X' \\| 'Y';                                                           |\n|                       |                        | type JK = 1 \\| 2;                                                               |\n|                       |                        |\n| T1 & T2               | T1 \u2229 T2 (intersection) | type X = \\{ a: string \\}                                                          |\n|                       |                        | type Y = \\{ b: string \\}                                                          |\n|                       |                        | type XY = X & Y                                                                 |\n|                       |                        | const x: XY = \\{ a: 'a', b: 'b' \\}                                                |\n|                       |                        |\n| unknown               | Universal set          | const x: unknown = 1                                                            |\n\nAn union, (T1 | T2) creates a wider set (both):\n\n```typescript\ntype X = {\n    a: string;\n};\ntype Y = {\n    b: string;\n};\ntype XY = X | Y;\nconst r: XY = { a: 'a', b: 'x' }; // Valid\n```\n\nAn intersection, (T1 & T2) create a narrower set (only shared):\n\n<!-- skip -->\n```typescript\ntype X = {\n    a: string;\n};\ntype Y = {\n    a: string;\n    b: string;\n};\ntype XY = X & Y;\nconst r: XY = { a: 'a' }; // Invalid\nconst j: XY = { a: 'a', b: 'b' }; // Valid\n```\n\nThe `extends` keyword could be considered as a \"subset of\" in this context. It sets a constraint for a type. The extends used with a generic, take the generic as an infinite set and it will constrain it to a more specific type.\nPlease note that `extends` has nothing to do with hierarchy in a OOP sense (there is no this concept in TypeScript).\nTypeScript works with sets and does not have a strict hierarchy, infact, as in the example below, two types could overlap without either being a subtype of the other type (TypeScript considers the structure, shape of the objects).\n\n```typescript\ninterface X {\n    a: string;\n}\ninterface Y extends X {\n    b: string;\n}\ninterface Z extends Y {\n    c: string;\n}\nconst z: Z = { a: 'a', b: 'b', c: 'c' };\ninterface X1 {\n    a: string;\n}\ninterface Y1 {\n    a: string;\n    b: string;\n}\ninterface Z1 {\n    a: string;\n    b: string;\n    c: string;\n}\nconst z1: Z1 = { a: 'a', b: 'b', c: 'c' };\n\nconst r: Z1 = z; // Valid\n```\n\n### Assign a type: Type Declarations and Type Assertions\n\nA type can be assigned in different ways in TypeScript:\n\n#### Type Declaration\n\nIn the following example, we use x: X (\": Type\") to declare a type for the variable x.\n\n```typescript\ntype X = {\n    a: string;\n};\n\n// Type declaration\nconst x: X = {\n    a: 'a',\n};\n```\n\nIf the variable is not in the specified format, TypeScript will report an error. For instance:\n\n<!-- skip -->\n```typescript\ntype X = {\n    a: string;\n};\n\nconst x: X = {\n    a: 'a',\n    b: 'b', // Error: Object literal may only specify known properties\n};\n```\n\n#### Type Assertion\n\nIt is possible to add an assertion by using the `as` keyword. This tells the compiler that the developer has more information about a type and silences any errors that may occur.\n\nFor example:\n\n```typescript\ntype X = {\n    a: string;\n};\nconst x = {\n    a: 'a',\n    b: 'b',\n} as X;\n```\n\nIn the above example, the object x is asserted to have the type X using the as keyword. This informs the TypeScript compiler that the object conforms to the specified type, even though it has an additional property b not present in the type definition.\n\nType assertions are useful in situations where a more specific type needs to be specified, especially when working with the DOM. For instance:\n\n```typescript\nconst myInput = document.getElementById('my_input') as HTMLInputElement;\n```\n\nHere, the type assertion as HTMLInputElement is used to tell TypeScript that the result of getElementById should be treated as an HTMLInputElement.\nType assertions can also be used to remap keys, as shown in the example below with template literals:\n\n```typescript\ntype J<Type> = {\n    [Property in keyof Type as `prefix_${string &\n        Property}`]: () => Type[Property];\n};\ntype X = {\n    a: string;\n    b: number;\n};\ntype Y = J<X>;\n```\n\nIn this example, the type `J<Type>` uses a mapped type with a template literal to remap the keys of Type. It creates new properties with a \"prefix_\" added to each key, and their corresponding values are functions returning the original property values.\n\nIt is worth noting that when using a type assertion, TypeScript will not execute excess property checking. Therefore, it is generally preferable to use a Type Declaration when the structure of the object is known in advance.\n\n#### Ambient Declarations\n\nAmbient declarations are files that describe types for JavaScript code, they have a file name format as `.d.ts.`. They are usually imported and used to annotate existing JavaScript libraries or to add types to existing JS files in your project.\n\nMany common libraries types can be found at:\n[https://github.com/DefinitelyTyped/DefinitelyTyped/](https://github.com/DefinitelyTyped/DefinitelyTyped/)\n\nand can be installed using:\n\n```shell\nnpm install --save-dev @types/library-name\n```\n\nFor your defined Ambient Declarations, you can import using the \"triple-slash\" reference:\n\n<!-- skip -->\n```typescript\n/// <reference path=\"./library-types.d.ts\" />\n```\n\nYou can use Ambient Declarations even within JavaScript files using `// @ts-check`.\n\nThe `declare` keyword enables type definitions for existing JavaScript code without importing it, serving as a placeholder for types from another file or globally.\n\n### Property Checking and Excess Property Checking\n\nTypeScript is based on a structural type system but excess property checking is a property of TypeScript which allows it to check whether an object has the exact properties specified in the type.\n\nExcess Property Checking is performed when assigning object literals to variables or when passing them as arguments to the function's excess property, for instance.\n\n<!-- skip -->\n```typescript\ntype X = {\n    a: string;\n};\nconst y = { a: 'a', b: 'b' };\nconst x: X = y; // Valid because structural typing\nconst w: X = { a: 'a', b: 'b' }; // Invalid because excess property checking\n```\n\n### Weak Types\n\nA type is considered weak when it contains nothing but a set of all-optional properties:\n\n```typescript\ntype X = {\n    a?: string;\n    b?: string;\n};\n```\n\nTypeScript considers an error to assign anything to a weak type when there is no overlap, for instance, the following throws an error:\n\n<!-- skip -->\n```typescript\ntype Options = {\n    a?: string;\n    b?: string;\n};\n\nconst fn = (options: Options) => undefined;\n\nfn({ c: 'c' }); // Invalid\n```\n\nAlthough not recommended, if needed, it is possible to bypass this check by using type assertion:\n\n```typescript\ntype Options = {\n    a?: string;\n    b?: string;\n};\nconst fn = (options: Options) => undefined;\nfn({ c: 'c' } as Options); // Valid\n```\n\nOr by adding `unknown` to the index signature to the weak type:\n\n```typescript\ntype Options = {\n    [prop: string]: unknown;\n    a?: string;\n    b?: string;\n};\n\nconst fn = (options: Options) => undefined;\nfn({ c: 'c' }); // Valid\n```\n\n### Strict Object Literal Checking (Freshness)\n\nStrict object literal checking, sometimes referred to as \"freshness\", is a feature in TypeScript that helps catch excess or misspelled properties that would otherwise go unnoticed in normal structural type checks.\n\nWhen creating an object literal, the TypeScript compiler considers it \"fresh.\" If the object literal is assigned to a variable or passed as a parameter, TypeScript will throw an error if the object literal specifies properties that do not exist in the target type.\n\nHowever, \"freshness\" disappears when an object literal is widened or a type assertion is used.\n\nHere are some examples to illustrate:\n\n<!-- skip -->\n```typescript\ntype X = { a: string };\ntype Y = { a: string; b: string };\n\nlet x: X;\nx = { a: 'a', b: 'b' }; // Freshness check: Invalid assignment\nvar y: Y;\ny = { a: 'a', bx: 'bx' }; // Freshness check: Invalid assignment\n\nconst fn = (x: X) => console.log(x.a);\n\nfn(x);\nfn(y); // Widening: No errors, structurally type compatible\n\nfn({ a: 'a', bx: 'b' }); // Freshness check: Invalid argument\n\nlet c: X = { a: 'a' };\nlet d: Y = { a: 'a', b: '' };\nc = d; // Widening: No Freshness check\n```\n\n### Type Inference\n\nTypeScript can infer types when no annotation is provided during:\n\n* Variable initialization.\n* Member initialization.\n* Setting defaults for parameters.\n* Function return type.\n\nFor example:\n\n```typescript\nlet x = 'x'; // The type inferred is string\n```\n\nThe TypeScript compiler analyzes the value or expression and determines its type based on the available information.\n\n### More Advanced Inferences\n\nWhen multiple expressions are used in type inference, TypeScript looks for the \"best common types.\" For instance:\n\n```typescript\nlet x = [1, 'x', 1, null]; // The type inferred is: (string | number | null)[]\n```\n\nIf the compiler cannot find the best common types, it returns a union type. For example:\n\n```typescript\nlet x = [new RegExp('x'), new Date()]; // Type inferred is: (RegExp | Date)[]\n```\n\nTypeScript utilizes \"contextual typing\" based on the variable's location to infer types. In the following example, the compiler knows that `e` is of type `MouseEvent` because of the `click` event type defined in the lib.d.ts file, which contains ambient declarations for various common JavaScript constructs and the DOM:\n\n```typescript\nwindow.addEventListener('click', function (e) {}); // The inferred type of e is MouseEvent\n```\n\n### Type Widening\n\nType widening is the process in which TypeScript assigns a type to a variable initialized when no type annotation was provided. It allows narrow to wider types but not vice versa.\nIn the following example:\n\n<!-- skip -->\n```typescript\nlet x = 'x'; // TypeScript infers as string, a wide type\nlet y: 'y' | 'x' = 'y'; // y types is a union of literal types\ny = x; // Invalid Type 'string' is not assignable to type '\"x\" | \"y\"'.\n```\n\nTypeScript assigns `string` to `x` based on the single value provided during initialization (`x`), this is an example of widening.\n\nTypeScript provides ways to have control of the widening process, for instance using \"const\".\n\n### Const\n\nUsing the `const` keyword when declaring a variable results in a narrower type inference in TypeScript.\n\nFor example:\n\n```typescript\nconst x = 'x'; // TypeScript infers the type of x as 'x', a narrower type\nlet y: 'y' | 'x' = 'y';\ny = x; // Valid: The type of x is inferred as 'x'\n```\n\nBy using `const` to declare the variable x, its type is narrowed to the specific literal value 'x'. Since the type of x is narrowed, it can be assigned to the variable y without any error.\nThe reason the type can be inferred is because `const` variables cannot be reassigned, so their type can be narrowed down to a specific literal type, in this case, the literal type 'x'.\n\n#### Const Modifier on Type Parameters\n\nFrom version 5.0 of TypeScript, it is possible to specify the `const` attribute on a generic type parameter. This allows for inferring the most precise type possible. Let's see an example without using `const`:\n\n```typescript\nfunction identity<T>(value: T) {\n    // No const here\n    return value;\n}\nconst values = identity({ a: 'a', b: 'b' }); // Type infered is: { a: string; b: string; }\n```\n\nAs you can see, the properties `a` and `b` are inferred with a type of `string`   .\n\nNow, let's see the difference with the `const` version:\n\n```typescript\nfunction identity<const T>(value: T) {\n    // Using const modifier on type parameters\n    return value;\n}\nconst values = identity({ a: 'a', b: 'b' }); // Type infered is: { a: \"a\"; b: \"b\"; }\n```\n\nNow we can see that the properties `a` and `b` are inferred as `const`, so `a` and `b` are treated as string literals rather than just `string` types.\n\n#### Const assertion\n\nThis feature allows you to declare a variable with a more precise literal type based on its initialization value, signifying to the compiler that the value should be treated as an immutable literal. Here are a few examples:\n\nOn a single property:\n\n```typescript\nconst v = {\n    x: 3 as const,\n};\nv.x = 3;\n```\n\nOn an entire object:\n\n```typescript\nconst v = {\n    x: 1,\n    y: 2,\n} as const;\n```\n\nThis can be particularly useful when defining the type for a tuple:\n\n```typescript\nconst x = [1, 2, 3]; // number[]\nconst y = [1, 2, 3] as const; // Tuple of readonly [1, 2, 3]\n```\n\n### Explicit Type Annotation\n\nWe can be specific and pass a type, in the following example property `x` is of type `number`:\n\n```typescript\nconst v = {\n    x: 1, // Inferred type: number (widening)\n};\nv.x = 3; // Valid\n```\n\nWe can make the type annotation more specific by using a union of literal types:\n\n<!-- skip -->\n```typescript\nconst v: { x: 1 | 2 | 3 } = {\n    x: 1, // x is now a union of literal types: 1 | 2 | 3\n};\nv.x = 3; // Valid\nv.x = 100; // Invalid\n```\n\n### Type Narrowing\n\nType Narrowing is the process in TypeScript where a general type is narrowed down to a more specific type. This occurs when TypeScript analyzes the code and determines that certain conditions or operations can refine the type information.\n\nNarrowing types can occur in different ways, including:\n\n#### Conditions\n\nBy using conditional statements, such as `if` or `switch`, TypeScript can narrow down the type based on the outcome of the condition. For example:\n\n```typescript\nlet x: number | undefined = 10;\n\nif (x !== undefined) {\n    x += 100; // The type is number, which had been narrowed by the condition\n}\n```\n\n#### Throwing or returning\n\nThrowing an error or returning early from a branch can be used to help TypeScript narrow down a type. For example:\n\n```typescript\nlet x: number | undefined = 10;\n\nif (x === undefined) {\n    throw 'error';\n}\nx += 100;\n```\n\nOther ways to narrow down types in TypeScript include:\n\n* `instanceof` operator: Used to check if an object is an instance of a specific class.\n* `in` operator: Used to check if a property exists in an object.\n* `typeof` operator: Used to check the type of a value at runtime.\n* Built-in functions like `Array.isArray()`: Used to check if a value is an array.\n\n#### Discriminated Union\n\nUsing a \"Discriminated Union\" is a pattern in TypeScript where an explicit \"tag\" is added to objects to distinguish between different types within a union. This pattern is also referred to as a \"tagged union.\" In the following example, the \"tag\" is represented by the property \"type\":\n\n```typescript\ntype A = { type: 'type_a'; value: number };\ntype B = { type: 'type_b'; value: string };\n\nconst x = (input: A | B): string | number => {\n    switch (input.type) {\n        case 'type_a':\n            return input.value + 100; // type is A\n        case 'type_b':\n            return input.value + 'extra'; // type is B\n    }\n};\n```\n\n#### User-Defined Type Guards\n\nIn cases where TypeScript is unable to determine a type, it is possible to write a helper function known as a \"user-defined type guard.\" In the following example, we will utilize a Type Predicate to narrow down the type after applying certain filtering:\n\n```typescript\nconst data = ['a', null, 'c', 'd', null, 'f'];\n\nconst r1 = data.filter(x => x != null); // The type is (string | null)[], TypeScript was not able to infer the type properly\n\nconst isValid = (item: string | null): item is string => item !== null; // Custom type guard\n\nconst r2 = data.filter(isValid); // The type is fine now string[], by using the predicate type guard we were able to narrow the type\n```\n\n## Primitive Types\n\nTypeScript supports 7 primitive types. A primitive data type refers to a type that is not an object and does not have any methods associated with it. In TypeScript, all primitive types are immutable, meaning their values cannot be changed once they are assigned.\n\n### string\n\nThe `string` primitive type stores textual data, and the value is always double or single-quoted.\n\n```typescript\nconst x: string = 'x';\nconst y: string = 'y';\n```\n\nStrings can span multiple lines if surrounded by the backtick (`) character:\n\n```typescript\nlet sentence: string = `xxx,\n   yyy`;\n```\n\n### boolean\n\nThe `boolean` data type in TypeScript stores a binary value, either `true` or `false`.\n\n```typescript\nconst isReady: boolean = true;\n```\n\n### number\n\nA `number` data type in TypeScript is represented with a 64-bit floating point value. A `number` type can represent integers and fractions.\nTypeScript also supports hexadecimal, binary, and octal, for instance:\n\n```typescript\nconst decimal: number = 10;\nconst hexadecimal: number = 0xa00d; // Hexadecimal starts with 0x\nconst binary: number = 0b1010; // Binary starts with 0b\nconst octal: number = 0o633; // Octal starts with 0o\n```\n\n### bigInt\n\nA `bigInt` represents numeric values that are very large (253 \u2013 1) and cannot be represented with a `number`.\n\nA `bigInt` can be created by calling the built-in function `BigInt()` or by adding `n` to the end of any integer numeric literal:\n\n```typescript\nconst x: bigint = BigInt(9007199254740991);\nconst y: bigint = 9007199254740991n;\n```\n\nNotes:\n\n* `bigInt` values cannot be mixed with `number` and cannot be used with built-in `Math`, they must be coerced to the same type.\n* `bigInt` values are available only if target configuration is ES2020 or higher.\n\n### Symbol\n\nSymbols are unique identifiers that can be used as property keys in objects to prevent naming conflicts.\n\n```typescript\ntype Obj = {\n    [sym: symbol]: number;\n};\n\nconst a = Symbol('a');\nconst b = Symbol('b');\nlet obj: Obj = {};\nobj[a] = 123;\nobj[b] = 456;\n\nconsole.log(obj[a]); // 123\nconsole.log(obj[b]); // 456\n```\n\n### null and undefined\n\n`null` and `undefined` types both represent no value or the absence of any value.\n\nThe `undefined` type means the value is not assigned or initialized or indicates an unintentional absence of value.\n\nThe `null` type means that we know that the field does not have a value, so value is unavailable, it indicates an intentional absence of value.\n\n### Array\n\nAn `array` is a data type that can store multiple values of the same type or not. It can be defined using the following syntax:\n\n```typescript\nconst x: string[] = ['a', 'b'];\nconst y: Array<string> = ['a', 'b'];\nconst j: Array<string | number> = ['a', 1, 'b', 2]; // Union\n```\n\nTypeScript supports readonly arrays using the following syntax:\n\n<!-- skip -->\n```typescript\nconst x: readonly string[] = ['a', 'b']; // Readonly modifier\nconst y: ReadonlyArray<string> = ['a', 'b'];\nconst j: ReadonlyArray<string | number> = ['a', 1, 'b', 2];\nj.push('x'); // Invalid\n```\n\nTypeScript supports tuple and readonly tuple:\n\n```typescript\nconst x: [string, number] = ['a', 1];\nconst y: readonly [string, number] = ['a', 1];\n```\n\n### any\n\nThe `any` data type represents literally \"any\" value, it is the default value when TypeScript cannot infer the type or is not specified.\n\nWhen using `any` TypeScript compiler skips the type checking so there is no type safety when `any` is being used. Generally do not use `any` to silence the compiler when an error occurs, instead focus on fixing the error as with using `any`  it is possible to break contracts and we lose the benefits of TypeScript autocomplete.\n\nThe `any` type could be useful during a gradual migration from JavaScript to TypeScript, as it can silence the compiler.\n\nFor new projects use TypeScript configuration `noImplicitAny` which enables TypeScript to issue errors where `any` is used or inferred.\n\nThe `any`type  is usually a source of errors which can mask real problems with your types. Avoid using it as much as possible.\n\n## Type Annotations\n\nOn variables declared using `var`, `let` and `const`, it is possible to optionally add a type:\n\n```typescript\nconst x: number = 1;\n```\n\nTypeScript does a good job of inferring types, especially when simple one, so these declarations in most cases are not necessary.\n\nOn functions is possible to add type annotations to parameters:\n\n```typescript\nfunction sum(a: number, b: number) {\n    return a + b;\n}\n```\n\nThe following is an example using a anonymous functions (so called lambda function):\n\n```typescript\nconst sum = (a: number, b: number) => a + b;\n```\n\nThese annotation can be avoided when a default value for a parameter is present:\n\n```typescript\nconst sum = (a = 10, b: number) => a + b;\n```\n\nReturn type annotations can be added to functions:\n\n```typescript\nconst sum = (a = 10, b: number): number => a + b;\n```\n\nThis is useful especially for  more complex functions as writing expliciting the return type before an implementation can help better think about the function.\n\nGenerally consider annotating type signatures but not the body local variables and add types always to object literals.\n\n## Optional Properties\n\nAn object can specify Optional Properties by adding a question mark `?` to the end of the property name:\n\n```typescript\ntype X = {\n    a: number;\n    b?: number; // Optional\n};\n```\n\nIt is possible to specify a default value when a property is optional\"\n\n```typescript\ntype X = {\n    a: number;\n    b?: number;\n};\nconst x = ({ a, b = 100 }: X) => a + b;\n```\n\n## Readonly Properties\n\nIs it possible to prevent writing on a property by using the modifier `readonly`which  makes sure that the property cannot be re-written but does not provide any guarantee of total immutability:\n\n```typescript\ninterface Y {\n    readonly a: number;\n}\n\ntype X = {\n    readonly a: number;\n};\n\ntype J = Readonly<{\n    a: number;\n}>;\n\ntype K = {\n    readonly [index: number]: string;\n};\n```\n\n## Index Signatures\n\nIn TypeScript we can use as index signature `string`, `number`, and `symbol`:\n\n```typescript\ntype K = {\n    [name: string | number]: string;\n};\nconst k: K = { x: 'x', 1: 'b' };\nconsole.log(k['x']);\nconsole.log(k[1]);\nconsole.log(k['1']); // Same result as k[1]\n```\n\nPlease note that JavaScript automatically converts an index with `number` to an index with `string` so `k[1]` or `k[\"1\"]` return the same value.\n\n## Extending Types\n\nIt is possible to extend an `interface` (copy members from another type):\n\n```typescript\ninterface X {\n    a: string;\n}\ninterface Y extends X {\n    b: string;\n}\n```\n\nIt is also possible to extend from multiple types:\n\n```typescript\ninterface A {\n    a: string;\n}\ninterface B {\n    b: string;\n}\ninterface Y extends A, B {\n    y: string;\n}\n```\n\nThe `extends` keyword works only on interfaces and classes, for types use an intersection:\n\n```typescript\ntype A = {\n    a: number;\n};\ntype B = {\n    b: number;\n};\ntype C = A & B;\n```\n\nIt is possible to extend a type using an inference but not vice versa:\n\n```typescript\ntype A = {\n    a: string;\n};\ninterface B extends A {\n    b: string;\n}\n```\n\n## Literal Types\n\nA Literal Type is a single element set from a collective type, it defines a very exact value that is a JavaScript primitive.\n\nLiteral Types in TypeScript are numbers, strings, and booleans.\n\nExample of literals:\n\n```typescript\nconst a = 'a'; // String literal type\nconst b = 1; // Numeric literal type\nconst c = true; // Boolean literal type\n```\n\nString, Numeric, and Boolean Literal Types are used in the union, type guard, and type aliases.\nIn the following example you can see a type alias union, `O` can be the only value specified and not any other string:\n\n```typescript\ntype O = 'a' | 'b' | 'c';\n```\n\n## Literal Inference\n\nLiteral Inference is a feature in TypeScript that allows the type of a variable or parameter to be inferred based on its value.\n\nIn the following example we can see that TypeScript considers `x` a literal type as the value cannot be changed any time later, when instead `y` is inferred as string as it can be modified any time later.\n\n```typescript\nconst x = 'x'; // Literal type of 'x', because this value cannot be changed\nlet y = 'y'; // Type string, as we can change this value\n```\n\nIn the following example we can see that `o.x` was inferred as a `string` (and not a literal of `a`) as TypeScript considers that the value can be changed any time later.\n\n<!-- skip -->\n```typescript\ntype X = 'a' | 'b';\n\nlet o = {\n    x: 'a', // This is a wider string\n};\n\nconst fn = (x: X) => `${x}-foo`;\n\nconsole.log(fn(o.x)); // Argument of type 'string' is not assignable to parameter of type 'X'\n```\n\nAs you can see the code throws an error when passing `o.x` to `fn` as X is a narrower type.\n\nWe can solve this issue by using type assertion using `const` or the `X` type:\n\n<!-- skip -->\n```typescript\nlet o = {\n    x: 'a' as const,\n};\n```\n\nor:\n\n<!-- skip -->\n```typescript\nlet o = {\n    x: 'a' as X,\n};\n```\n\n## strictNullChecks\n\n`strictNullChecks` is a TypeScript compiler option that enforces strict null checking. When this option is enabled, variables and parameters can only be assigned `null` or `undefined` if they have been explicitly declared to be of that type using the union type `null` | `undefined`. If a variable or parameter is not explicitly declared as nullable, TypeScript will generate an error to prevent potential runtime errors.\n\n## Enums\n\nIn TypeScript, an `enum` is a set of named constant values.\n\n```typescript\nenum Color {\n    Red = '#ff0000',\n    Green = '#00ff00',\n    Blue = '#0000ff',\n}\n```\n\nEnums can be defined in different ways:\n\n### Numeric enums\n\nIn TypeScript, a Numeric Enum is an Enum where each constant is assigned a numeric value, starting from 0 by default.\n\n```typescript\nenum Size {\n    Small, // value starts from 0\n    Medium,\n    Large,\n}\n```\n\nIt is possible to specify custom values by explicitly assigning them:\n\n```typescript\nenum Size {\n    Small = 10,\n    Medium,\n    Large,\n}\nconsole.log(Size.Medium); // 11\n```\n\n### String enums\n\nIn TypeScript, a String enum is an Enum where each constant is assigned a string value.\n\n```typescript\nenum Language {\n    English = 'EN',\n    Spanish = 'ES',\n}\n```\n\nNote: TypeScript allows the usage of heterogeneous Enums where string and numeric members can coexist.\n\n### Constant enums\n\nA constant enum in TypeScript is a special type of Enum where all the values are known at compile time and are inlined wherever the enum is used, resulting in more efficient code.\n\n```typescript\nconst enum Language {\n    English = 'EN',\n    Spanish = 'ES',\n}\nconsole.log(Language.English);\n```\n\nWill be compiled into:\n\n```typescript\nconsole.log('EN' /* Language.English */);\n```\n\nNotes:\nConst Enums have hardcoded values, erasing the Enum, which can be more efficient in self-contained libraries but is generally not desirable. Also, Const enums cannot have computed members.\n\n### Reverse mapping\n\nIn TypeScript, reverse mappings in Enums refer to the ability to retrieve the Enum member name from its value. By default, Enum members have forward mappings from name to value, but reverse mappings can be created by explicitly setting values for each member. Reverse mappings are useful when you need to look up an Enum member by its value, or when you need to iterate over all the Enum members. Note that only numeric enums members will generate reverse mappings, while String Enum members do not get a reverse mapping generated at all.\n\nThe following enum:\n\n```typescript\nenum Grade {\n    A = 90,\n    B = 80,\n    C = 70,\n    F = 'fail',\n}\n```\n\nCompiles to:\n\n<!-- skip -->\n```javascript\n'use strict';\nvar Grade;\n(function (Grade) {\n    Grade[(Grade['A'] = 90)] = 'A';\n    Grade[(Grade['B'] = 80)] = 'B';\n    Grade[(Grade['C'] = 70)] = 'C';\n    Grade['F'] = 'fail';\n})(Grade || (Grade = {}));\n```\n\nTherefore, mapping values to keys works for numeric enum members, but not for string enum members:\n\n<!-- skip -->\n```typescript\nenum Grade {\n    A = 90,\n    B = 80,\n    C = 70,\n    F = 'fail',\n}\nconst myGrade = Grade.A;\nconsole.log(Grade[myGrade]); // A\nconsole.log(Grade[90]); // A\n\nconst failGrade = Grade.F;\nconsole.log(failGrade); // fail\nconsole.log(Grade[failGrade]); // Element implicitly has an 'any' type because index expression is not of type 'number'.\n```\n\n### Ambient enums\n\nAn ambient enum in TypeScript is a type of Enum that is defined in a declaration file (*.d.ts) without an associated implementation. It allows you to define a set of named constants that can be used in a type-safe way across different files without having to import the implementation details in each file.\n\n### Computed and constant members\n\nIn TypeScript, a computed member is a member of an Enum that has a value calculated at runtime, while a constant member is a member whose value is set at compile-time and cannot be changed during runtime. Computed members are allowed in regular Enums, while constant members are allowed in both regular and const enums.\n\n```typescript\n// Constant members\nenum Color {\n    Red = 1,\n    Green = 5,\n    Blue = Red + Green,\n}\nconsole.log(Color.Blue); // 6 generation at compilation time\n```\n\n```typescript\n// Computed members\nenum Color {\n    Red = 1,\n    Green = Math.pow(2, 2),\n    Blue = Math.floor(Math.random() * 3) + 1,\n}\nconsole.log(Color.Blue); // random number generated at run time\n```\n\nEnums are denoted by unions comprising their member types. The values of each member can be determined through constant or non-constant expressions, with members possessing constant values being assigned literal types. To illustrate, consider the declaration of type E and its subtypes E.A, E.B, and E.C. In this case, E represents the union E.A | E.B | E.C.\n\n```typescript\nconst identity = (value: number) => value;\n\nenum E {\n    A = 2 * 5, // Numeric literal\n    B = 'bar', // String literal\n    C = identity(42), // Opaque computed\n}\n\nconsole.log(E.C); //42\n```\n\n## Narrowing\n\nTypeScript narrowing is the process of refining the type of a variable within a conditional block. This is useful when working with union types, where a variable can have more than one type.\n\nTypeScript recognizes several ways to narrow the type:\n\n### typeof type guards\n\nThe typeof type guard is one specific type guard in TypeScript that checks the type of a variable based on its built-in JavaScript type.\n\n```typescript\nconst fn = (x: number | string) => {\n    if (typeof x === 'number') {\n        return x + 1; // x is number\n    }\n    return -1;\n};\n```\n\n### Truthiness narrowing\n\nTruthiness narrowing in TypeScript works by checking whether a variable is truthy or falsy to narrow its type accordingly.\n\n```typescript\nconst toUpperCase = (name: string | null) => {\n    if (name) {\n        return name.toUpperCase();\n    } else {\n        return null;\n    }\n};\n```\n\n### Equality narrowing\n\nEquality narrowing in TypeScript works by checking whether a variable is equal to a specific value or not, to narrow its type accordingly.\n\nIt is used in conjunction with `switch` statements and equality operators such as `===`, `!==`, `==`, and `!=` to narrow down types.\n\n```typescript\nconst checkStatus = (status: 'success' | 'error') => {\n    switch (status) {\n        case 'success':\n            return true;\n        case 'error':\n            return null;\n    }\n};\n```\n\n### In Operator narrowing\n\nThe `in` Operator narrowing in TypeScript is a way to narrow the type of a variable based on whether a property exists within the variable's type.\n\n```typescript\ntype Dog = {\n    name: string;\n    breed: string;\n};\n\ntype Cat = {\n    name: string;\n    likesCream: boolean;\n};\n\nconst getAnimalType = (pet: Dog | Cat) => {\n    if ('breed' in pet) {\n        return 'dog';\n    } else {\n        return 'cat';\n    }\n};\n```\n\n### instanceof narrowing\n\nThe `instanceof` operator narrowing in TypeScript is a way to narrow the type of a variable based on its constructor function, by checking if an object is an instance of a certain class or interface.\n\n```typescript\nclass Square {\n    constructor(public width: number) {}\n}\nclass Rectangle {\n    constructor(\n        public width: number,\n        public height: number\n    ) {}\n}\nfunction area(shape: Square | Rectangle) {\n    if (shape instanceof Square) {\n        return shape.width * shape.width;\n    } else {\n        return shape.width * shape.height;\n    }\n}\nconst square = new Square(5);\nconst rectangle = new Rectangle(5, 10);\nconsole.log(area(square)); // 25\nconsole.log(area(rectangle)); // 50\n```\n\n## Assignments\n\nTypeScript narrowing using assignments is a way to narrow the type of a variable based on the value assigned to it. When a variable is assigned a value, TypeScript infers its type based on the assigned value, and it narrows the type of the variable to match the inferred type.\n\n```typescript\nlet value: string | number;\nvalue = 'hello';\nif (typeof value === 'string') {\n    console.log(value.toUpperCase());\n}\nvalue = 42;\nif (typeof value === 'number') {\n    console.log(value.toFixed(2));\n}\n```\n\n## Control Flow Analysis\n\nControl Flow Analysis in TypeScript is a way to statically analyze the code flow to infer the types of variables, allowing the compiler to narrow the types of those variables as needed, based on the results of the analysis.\n\nPrior to TypeScript 4.4, code flow analysis would only be applied to code within an if statement, but from TypeScript 4.4, it can also be applied to conditional expressions and discriminant property accesses indirectly referenced through const variables.\n\nFor example:\n\n```typescript\nconst f1 = (x: unknown) => {\n    const isString = typeof x === 'string';\n    if (isString) {\n        x.length;\n    }\n};\n\nconst f2 = (\n    obj: { kind: 'foo'; foo: string } | { kind: 'bar'; bar: number }\n) => {\n    const isFoo = obj.kind === 'foo';\n    if (isFoo) {\n        obj.foo;\n    } else {\n        obj.bar;\n    }\n};\n```\n\nSome examples where narrowing does not occur:\n\n<!-- skip -->\n```typescript\nconst f1 = (x: unknown) => {\n    let isString = typeof x === 'string';\n    if (isString) {\n        x.length; // Error, no narrowing because isString it is not const\n    }\n};\n\nconst f6 = (\n    obj: { kind: 'foo'; foo: string } | { kind: 'bar'; bar: number }\n) => {\n    const isFoo = obj.kind === 'foo';\n    obj = obj;\n    if (isFoo) {\n        obj.foo; // Error, no narrowing because obj is assigned in function body\n    }\n};\n```\n\nNotes: Up to five levels of indirection are analyzed in conditional expressions.\n\n## Type Predicates\n\nType Predicates in TypeScript are functions that return a boolean value and are used to narrow the type of a variable to a more specific type.\n\n```typescript\nconst isString = (value: unknown): value is string => typeof value === 'string';\n\nconst foo = (bar: unknown) => {\n    if (isString(bar)) {\n        console.log(bar.toUpperCase());\n    } else {\n        console.log('not a string');\n    }\n};\n```\n\n## Discriminated Unions\n\nDiscriminated Unions in TypeScript are a type of union type that uses a common property, known as the discriminant, to narrow down the set of possible types for the union.\n\n```typescript\ntype Square = {\n    kind: 'square'; // Discriminant\n    size: number;\n};\n\ntype Circle = {\n    kind: 'circle'; // Discriminant\n    radius: number;\n};\n\ntype Shape = Square | Circle;\n\nconst area = (shape: Shape) => {\n    switch (shape.kind) {\n        case 'square':\n            return Math.pow(shape.size, 2);\n        case 'circle':\n            return Math.PI * Math.pow(shape.radius, 2);\n    }\n};\n\nconst square: Square = { kind: 'square', size: 5 };\nconst circle: Circle = { kind: 'circle', radius: 2 };\n\nconsole.log(area(square)); // 25\nconsole.log(area(circle)); // 12.566370614359172\n```\n\n## The never Type\n\nWhen a variable is narrowed to a type that cannot contain any values, the TypeScript compiler will infer that the variable must be of the `never` type. This is because The never Type represents a value that can never be produced.\n\n```typescript\nconst printValue = (val: string | number) => {\n    if (typeof val === 'string') {\n        console.log(val.toUpperCase());\n    } else if (typeof val === 'number') {\n        console.log(val.toFixed(2));\n    } else {\n        // val has type never here because it can never be anything other than a string or a number\n        const neverVal: never = val;\n        console.log(`Unexpected value: ${neverVal}`);\n    }\n};\n```\n\n## Exhaustiveness checking\n\nExhaustiveness checking is a feature in TypeScript that ensures all possible cases of a discriminated union are handled in a `switch` statement or an `if` statement.\n\n```typescript\ntype Direction = 'up' | 'down';\n\nconst move = (direction: Direction) => {\n    switch (direction) {\n        case 'up':\n            console.log('Moving up');\n            break;\n        case 'down':\n            console.log('Moving down');\n            break;\n        default:\n            const exhaustiveCheck: never = direction;\n            console.log(exhaustiveCheck); // This line will never be executed\n    }\n};\n```\n\nThe `never` type is used to ensure that the default case is exhaustive and that TypeScript will raise an error if a new value is added to the Direction type without being handled in the switch statement.\n\n## Object Types\n\nIn TypeScript, object types describe the shape of an object. They specify the names and types of the object's properties, as well as whether those properties are required or optional.\n\nIn TypeScript, you can define object types in two primary ways:\n\nInterface which defines the shape of an object by specifying the names, types, and optionality of its properties.\n\n```typescript\ninterface User {\n    name: string;\n    age: number;\n    email?: string;\n}\n```\n\nType alias, similar to an interface, defines the shape of an object. However, it can also create a new custom type that is based on an existing type or a combination of existing types. This includes defining union types, intersection types, and other complex types.\n\n```typescript\ntype Point = {\n    x: number;\n    y: number;\n};\n```\n\nIt also possible to define a type anonymously:\n\n```typescript\nconst sum = (x: { a: number; b: number }) => x.a + x.b;\nconsole.log(sum({ a: 5, b: 1 }));\n```\n\n## Tuple Type (Anonymous)\n\nA Tuple Type is a type that represents an array with a fixed number of elements and their corresponding types. A tuple type enforces a specific number of elements and their respective types in a fixed order. Tuple types are useful when you want to represent a collection of values with specific types, where the position of each element in the array has a specific meaning.\n\n```typescript\ntype Point = [number, number];\n```\n\n## Named Tuple Type (Labeled)\n\nTuple types can include optional labels or names for each element. These labels are for readability and tooling assistance, and do not affect the operations you can perform with them.\n\n```typescript\ntype T = string;\ntype Tuple1 = [T, T];\ntype Tuple2 = [a: T, b: T];\ntype Tuple3 = [a: T, T]; // Named Tuple plus Anonymous Tuple\n```\n\n## Fixed Length Tuple\n\nA Fixed Length Tuple is a specific type of tuple that enforces a fixed number of elements of specific types, and disallows any modifications to the length of the tuple once it is defined.\n\nFixed Length Tuples are useful when you need to represent a collection of values with a specific number of elements and specific types, and you want to ensure that the length and types of the tuple cannot be changed inadvertently.\n\n<!-- skip -->\n```typescript\nconst x = [10, 'hello'] as const;\nx.push(2); // Error\n```\n\n## Union Type\n\nA Union Type is a type that represents a value that can be one of several types. Union Types are denoted using the `|` symbol between each possible type.\n\n```typescript\nlet x: string | number;\nx = 'hello'; // Valid\nx = 123; // Valid\n```\n\n## Intersection Types\n\nAn Intersection Type is a type that represents a value that has all the properties of two or more types. Intersection Types are denoted using the `&` symbol between each type.\n\n```typescript\ntype X = {\n    a: string;\n};\n\ntype Y = {\n    b: string;\n};\n\ntype J = X & Y; // Intersection\n\nconst j: J = {\n    a: 'a',\n    b: 'b',\n};\n```\n\n## Type Indexing\n\nType indexing refers to the ability to define types that can be indexed by a key that is not known in advance, using an index signature to specify the type for properties that are not explicitly declared.\n\n```typescript\ntype Dictionary<T> = {\n    [key: string]: T;\n};\nconst myDict: Dictionary<string> = { a: 'a', b: 'b' };\nconsole.log(myDict['a']); // Returns a\n```\n\n## Type from Value\n\nType from Value in TypeScript refers to the automatic inference of a type from a value or expression through type inference.\n\n```typescript\nconst x = 'x'; // TypeScript can automatically infer that the type of the message variable is string\n```\n\n## Type from Func Return\n\nType from Func Return refers to the ability to automatically infer the return type of a function based on its implementation. This allows TypeScript to determine the type of the value returned by the function without explicit type annotations.\n\n```typescript\nconst add = (x: number, y: number) => x + y; // TypeScript can infer that the return type of the function is a number\n```\n\n## Type from Module\n\nType from Module refers to the ability to use a module's exported values to automatically infer their types. When a module exports a value with a specific type, TypeScript can use that information to automatically infer the type of that value when it is imported into another module.\n\n<!-- skip -->\n```typescript\n// calc.ts\nexport const add = (x: number, y: number) => x + y;\n// index.ts\nimport { add } from 'calc';\nconst r = add(1, 2); // r is number\n```\n\n## Mapped Types\n\nMapped Types in TypeScript allow you to create new types based on an existing type by transforming each property using a mapping function. By mapping existing types, you can create new types that represent the same information in a different format. To create a mapped type, you access the properties of an existing type using the `keyof` operator and then alter them to produce a new type.\nIn the following example:\n\n```typescript\ntype MyMappedType<T> = {\n    [P in keyof T]: T[P][];\n};\ntype MyType = {\n    foo: string;\n    bar: number;\n};\ntype MyNewType = MyMappedType<MyType>;\nconst x: MyNewType = {\n    foo: ['hello', 'world'],\n    bar: [1, 2, 3],\n};\n```\n\nwe define MyMappedType to map over T's properties, creating a new type with each property as an array of its original type. Using this, we create MyNewType to represent the same info as MyType, but with each property as an array.\n\n## Mapped Type Modifiers\n\nMapped Type Modifiers in TypeScript enable the transformation of properties within an existing type:\n\n* `readonly` or `+readonly`: This renders a property in the mapped type as read-only.\n* `-readonly`: This allows a property in the mapped type to be mutable.\n* `?`: This designates a property in the mapped type as optional.\n\nExamples:\n\n```typescript\ntype ReadOnly<T> = { readonly [P in keyof T]: T[P] }; // All properties marked as read-only\n\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] }; // All properties marked as mutable\n\ntype MyPartial<T> = { [P in keyof T]?: T[P] }; // All properties marked as optional\n```\n\n## Conditional Types\n\nConditional Types are a way to create a type that depends on a condition, where the type to be created is determined based on the result of the condition. They are defined using the `extends` keyword and a ternary operator to conditionally choose between two types.\n\n```typescript\ntype IsArray<T> = T extends any[] ? true : false;\n\nconst myArray = [1, 2, 3];\nconst myNumber = 42;\n\ntype IsMyArrayAnArray = IsArray<typeof myArray>; // Type true\ntype IsMyNumberAnArray = IsArray<typeof myNumber>; // Type false\n```\n\n## Distributive Conditional Types\n\nDistributive Conditional Types are a feature that allow a type to be distributed over a union of types, by applying a transformation to each member of the union individually.\nThis can be especially useful when working with mapped types or higher-order types.\n\n```typescript\ntype Nullable<T> = T extends any ? T | null : never;\ntype NumberOrBool = number | boolean;\ntype NullableNumberOrBool = Nullable<NumberOrBool>; // number | boolean | null\n```\n\n## infer Type Inference in Conditional Types\n\nThe `infer`keyword is used in conditional types to infer (extract) the type of a generic parameter from a type that depends on it. This allows you to write more flexible and reusable type definitions.\n\n```typescript\ntype ElementType<T> = T extends (infer U)[] ? U : never;\ntype Numbers = ElementType<number[]>; // number\ntype Strings = ElementType<string[]>; // string\n```\n\n## Predefined Conditional Types\n\nIn TypeScript, Predefined Conditional Types are built-in conditional types provided by the language. They are designed to perform common type transformations based on the characteristics of a given type.\n\n`Exclude<UnionType, ExcludedType>`: This type removes all the types from Type that are assignable to ExcludedType.\n\n`Extract<Type, Union>`: This type extracts all the types from Union that are assignable to Type.\n\n`NonNullable<Type>`: This type removes null and undefined from Type.\n\n`ReturnType<Type>`: This type extracts the return type of a function Type.\n\n`Parameters<Type>`: This type extracts the parameter types of a function Type.\n\n`Required<Type>`: This type makes all properties in Type required.\n\n`Partial<Type>`: This type makes all properties in Type optional.\n\n`Readonly<Type>`: This type makes all properties in Type readonly.\n\n## Template Union Types\n\nTemplate union types can be used to merge and manipulate text inside the type system for instance:\n\n```typescript\ntype Status = 'active' | 'inactive';\ntype Products = 'p1' | 'p2';\ntype ProductId = `id-${Products}-${Status}`; // \"id-p1-active\" | \"id-p1-inactive\" | \"id-p2-active\" | \"id-p2-inactive\"\n```\n\n## Any type\n\nThe `any` type is a special type (universal supertype) that can be used to represent any type of value (primitives, objects, arrays, functions, errors, symbols). It is often used in situations where the type of a value is not known at compile time, or when working with values from external APIs or libraries that do not have TypeScript typings.\n\nBy utilizing `any` type, you are indicating to the TypeScript compiler that values should be represented without any limitations. In order to maximizing type safety in your code consider the following:\n\n* Limit the usage of `any` to specific cases where the type is truly unknown.\n* Do not return `any` types from a function as you will lose type safety in the code using that function weakening your type safety.\n* Instead of `any` use `@ts-ignore` if you need to silence the compiler.\n\n```typescript\nlet value: any;\nvalue = true; // Valid\nvalue = 7; // Valid\n```\n\n## Unknown type\n\nIn TypeScript, the `unknown` type represents a value that is of an unknown type. Unlike `any` type, which allows for any type of value, `unknown` requires a type check or assertion before it can be used in a specific way so no operations are permitted on an `unknown` without first asserting or narrowing to a more specific type.\n\nThe `unknown` type is only assignable to any type and the `unknown` type itself, it is a type-safe alternative to `any`.\n\n<!-- skip -->\n```typescript\nlet value: unknown;\n\nlet value1: unknown = value; // Valid\nlet value2: any = value; // Valid\nlet value3: boolean = value; // Invalid\nlet value4: number = value; // Invalid\n```\n\n```typescript\nconst add = (a: unknown, b: unknown): number | undefined =>\n    typeof a === 'number' && typeof b === 'number' ? a + b : undefined;\nconsole.log(add(1, 2)); // 3\nconsole.log(add('x', 2)); // undefined\n```\n\n## Void type\n\nThe `void` type is used to indicate that a function does not return a value.\n\n```typescript\nconst sayHello = (): void => {\n    console.log('Hello!');\n};\n```\n\n## Never type\n\nThe `never` type represents values that never occur. It is used to denote functions or expressions that never return or throw an error.\n\nFor instance an infinite loop:\n\n```typescript\nconst infiniteLoop = (): never => {\n    while (true) {\n        // do something\n    }\n};\n```\n\nThrowing an error:\n\n```typescript\nconst throwError = (message: string): never => {\n    throw new Error(message);\n};\n```\n\nThe `never` type is useful in ensuring type safety and catching potential errors in your code. It helps TypeScript analyze and infer more precise types when used in combination with other types and control flow statements, for instance:\n\n```typescript\ntype Direction = 'up' | 'down';\nconst move = (direction: Direction): void => {\n    switch (direction) {\n        case 'up':\n            // move up\n            break;\n        case 'down':\n            // move down\n            break;\n        default:\n            const exhaustiveCheck: never = direction;\n            throw new Error(`Unhandled direction: ${exhaustiveCheck}`);\n    }\n};\n```\n\n## Interface and Type\n\n### Common Syntax\n\nIn TypeScript, interfaces define the structure of objects, specifying the names and types of properties or methods that an object must have. The common syntax for defining an interface in TypeScript is as follows:\n\n<!-- skip -->\n```typescript\ninterface InterfaceName {\n    property1: Type1;\n    // ...\n    method1(arg1: ArgType1, arg2: ArgType2): ReturnType;\n    // ...\n}\n```\n\nSimilarly for type definition:\n\n<!-- skip -->\n```typescript\ntype TypeName = {\n    property1: Type1;\n    // ...\n    method1(arg1: ArgType1, arg2: ArgType2): ReturnType;\n    // ...\n};\n```\n\n`interface InterfaceName` or `type TypeName`: Defines the name of the interface.\n`property1`: `Type1`: Specifies the properties of the interface along with their corresponding types. Multiple properties can be defined, each separated by a semicolon.\n`method1(arg1: ArgType1, arg2: ArgType2): ReturnType;`: Specifies the methods of the interface. Methods are defined with their names, followed by a parameter list in parentheses and the return type. Multiple methods can be defined, each separated by a semicolon.\n\nExample interface:\n\n```typescript\ninterface Person {\n    name: string;\n    age: number;\n    greet(): void;\n}\n```\n\nExample of type:\n\n```typescript\ntype TypeName = {\n    property1: string;\n    method1(arg1: string, arg2: string): string;\n};\n```\n\nIn TypeScript, types are used to define the shape of data and enforce type checking. There are several common syntaxes for defining types in TypeScript, depending on the specific use case. Here are some examples:\n\n### Basic Types\n\n```typescript\nlet myNumber: number = 123; // number type\nlet myBoolean: boolean = true; // boolean type\nlet myArray: string[] = ['a', 'b']; // array of strings\nlet myTuple: [string, number] = ['a', 123]; // tuple\n```\n\n### Objects and Interfaces\n\n```typescript\nconst x: { name: string; age: number } = { name: 'Simon', age: 7 };\n```\n\n### Union and Intersection Types\n\n```typescript\ntype MyType = string | number; // Union type\nlet myUnion: MyType = 'hello'; // Can be a string\nmyUnion = 123; // Or a number\n\ntype TypeA = { name: string };\ntype TypeB = { age: number };\ntype CombinedType = TypeA & TypeB; // Intersection type\nlet myCombined: CombinedType = { name: 'John', age: 25 }; // Object with both name and age properties\n```\n\n## Built-in Type Primitives\n\nTypeScript has several built-in type primitives that can be used to define variables, function parameters, and return types:\n\n* `number`: Represents numeric values, including integers and floating-point numbers.\n* `string`: Represents textual data\n* `boolean`: Represents logical values, which can be either true or false.\n* `null`: Represents the absence of a value.\n* `undefined`: Represents a value that has not been assigned or has not been defined.\n* `symbol`: Represents a unique identifier. Symbols are typically used as keys for object properties.\n* `bigint`: Represents arbitrary-precision integers.\n* `any`: Represents a dynamic or unknown type. Variables of type any can hold values of any type, and they bypass type checking.\n* `void`: Represents the absence of any type. It is commonly used as the return type of functions that do not return a value.\n* `never`: Represents a type for values that never occur. It is typically used as the return type of functions that throw an error or enter an infinite loop.\n\n## Common Built-in JS Objects\n\nTypeScript is a superset of JavaScript, it includes all the commonly used built-in JavaScript objects. You can find an extensive list of these objects on the Mozilla Developer Network (MDN) documentation website:\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)\n\nHere is a list of some commonly used built-in JavaScript objects:\n\n* Function\n* Object\n* Boolean\n* Error\n* Number\n* BigInt\n* Math\n* Date\n* String\n* RegExp\n* Array\n* Map\n* Set\n* Promise\n* Intl\n\n## Overloads\n\nFunction overloads in TypeScript allow you to define multiple function signatures for a single function name, enabling you to define functions that can be called in multiple ways. Here's an example:\n\n```typescript\n// Overloads\nfunction sayHi(name: string): string;\nfunction sayHi(names: string[]): string[];\n\n// Implementation\nfunction sayHi(name: unknown): unknown {\n    if (typeof name === 'string') {\n        return `Hi, ${name}!`;\n    } else if (Array.isArray(name)) {\n        return name.map(name => `Hi, ${name}!`);\n    }\n    throw new Error('Invalid value');\n}\n\nsayHi('xx'); // Valid\nsayHi(['aa', 'bb']); // Valid\n```\n\nHere's another example of using function overloads within a `class`:\n\n```typescript\nclass Greeter {\n    message: string;\n\n    constructor(message: string) {\n        this.message = message;\n    }\n\n    // overload\n    sayHi(name: string): string;\n    sayHi(names: string[]): ReadonlyArray<string>;\n\n    // implementation\n    sayHi(name: unknown): unknown {\n        if (typeof name === 'string') {\n            return `${this.message}, ${name}!`;\n        } else if (Array.isArray(name)) {\n            return name.map(name => `${this.message}, ${name}!`);\n        }\n        throw new Error('value is invalid');\n    }\n}\nconsole.log(new Greeter('Hello').sayHi('Simon'));\n```\n\n## Merging and Extension\n\nMerging and extension refer to two different concepts related to working with types and interfaces.\n\nMerging allows you to combine multiple declarations of the same name into a single definition, for example, when you define an interface with the same name multiple times:\n\n```typescript\ninterface X {\n    a: string;\n}\n\ninterface X {\n    b: number;\n}\n\nconst person: X = {\n    a: 'a',\n    b: 7,\n};\n```\n\nExtension refers to the ability to extend or inherit from existing types or interfaces to create new ones. It is a mechanism to add additional properties or methods to an existing type without modifying its original definition. Example:\n\n```typescript\ninterface Animal {\n    name: string;\n    eat(): void;\n}\n\ninterface Bird extends Animal {\n    sing(): void;\n}\n\nconst dog: Bird = {\n    name: 'Bird 1',\n    eat() {\n        console.log('Eating');\n    },\n    sing() {\n        console.log('Singing');\n    },\n};\n```\n\n## Differences between Type and Interface\n\nDeclaration merging (augmentation):\n\nInterfaces support declaration merging, which means that you can define multiple interfaces with the same name, and TypeScript will merge them into a single interface with the combined properties and methods. On the other hand, types do not support declaration merging. This can be helpful when you want to add extra functionality or customize existing types without modifying the original definitions or patching missing or incorrect types.\n\n```typescript\ninterface A {\n    x: string;\n}\ninterface A {\n    y: string;\n}\nconst j: A = {\n    x: 'xx',\n    y: 'yy',\n};\n```\n\nExtending other types/interfaces:\n\nBoth types and interfaces can extend other types/interfaces, but the syntax is different. With interfaces, you use the `extends` keyword to inherit properties and methods from other interfaces. However, an interface cannot extend a complex type like a union type.\n\n```typescript\ninterface A {\n    x: string;\n    y: number;\n}\ninterface B extends A {\n    z: string;\n}\nconst car: B = {\n    x: 'x',\n    y: 123,\n    z: 'z',\n};\n```\n\nFor types, you use the & operator to combine multiple types into a single type (intersection).\n\n```typescript\ninterface A {\n    x: string;\n    y: number;\n}\n\ntype B = A & {\n    j: string;\n};\n\nconst c: B = {\n    x: 'x',\n    y: 123,\n    j: 'j',\n};\n```\n\nUnion and Intersection Types:\n\nTypes are more flexible when it comes to defining Union and Intersection Types. With the `type` keyword, you can easily create union types using the `|` operator and intersection types using the `&` operator. While interfaces can also represent union types indirectly, they don't have built-in support for intersection types.\n\n```typescript\ntype Department = 'dep-x' | 'dep-y'; // Union\n\ntype Person = {\n    name: string;\n    age: number;\n};\n\ntype Employee = {\n    id: number;\n    department: Department;\n};\n\ntype EmployeeInfo = Person & Employee; // Intersection\n```\n\nExample with interfaces:\n\n```typescript\ninterface A {\n    x: 'x';\n}\ninterface B {\n    y: 'y';\n}\n\ntype C = A | B; // Union of interfaces\n```\n\n## Class\n\n### Class Common Syntax\n\nThe `class` keyword is used in TypeScript to define a class. Below, you can see an example:\n\n```typescript\nclass Person {\n    private name: string;\n    private age: number;\n    constructor(name: string, age: number) {\n        this.name = name;\n        this.age = age;\n    }\n    public sayHi(): void {\n        console.log(\n            `Hello, my name is ${this.name} and I am ${this.age} years old.`\n        );\n    }\n}\n```\n\nThe `class` keyword is used to define a class named \"Person\".\n\nThe class has two private properties: name of type `string` and age of type `number`.\n\nThe constructor is defined using the `constructor` keyword. It takes name and age as parameters and assigns them to the corresponding properties.\n\nThe class has a `public` method named sayHi that logs a greeting message.\n\nTo create an instance of a class in TypeScript, you can use the `new` keyword followed by the class name, followed by parentheses `()`. For instance:\n\n<!-- skip -->\n```typescript\nconst myObject = new Person('John Doe', 25);\nmyObject.sayHi(); // Output: Hello, my name is John Doe and I am 25 years old.\n```\n\n### Constructor\n\nConstructors are special methods within a class that are used to initialize the object's properties when an instance of the class is created.\n\n```typescript\nclass Person {\n    public name: string;\n    public age: number;\n\n    constructor(name: string, age: number) {\n        this.name = name;\n        this.age = age;\n    }\n\n    sayHello() {\n        console.log(\n            `Hello, my name is ${this.name} and I'm ${this.age} years old.`\n        );\n    }\n}\n\nconst john = new Person('Simon', 17);\njohn.sayHello();\n```\n\nIt is possible to overload a constructor using the following syntax:\n\n```typescript\ntype Sex = 'm' | 'f';\n\nclass Person {\n    name: string;\n    age: number;\n    sex: Sex;\n\n    constructor(name: string, age: number, sex?: Sex);\n    constructor(name: string, age: number, sex: Sex) {\n        this.name = name;\n        this.age = age;\n        this.sex = sex ?? 'm';\n    }\n}\n\nconst p1 = new Person('Simon', 17);\nconst p2 = new Person('Alice', 22, 'f');\n```\n\nIn TypeScript, it is possible to define multiple constructor overloads, but you can have only one implementation that must be compatible with all the overloads, this can be achieved  by using an optional parameter.\n\n```typescript\nclass Person {\n    name: string;\n    age: number;\n\n    constructor();\n    constructor(name: string);\n    constructor(name: string, age: number);\n    constructor(name?: string, age?: number) {\n        this.name = name ?? 'Unknown';\n        this.age = age ?? 0;\n    }\n\n    displayInfo() {\n        console.log(`Name: ${this.name}, Age: ${this.age}`);\n    }\n}\n\nconst person1 = new Person();\nperson1.displayInfo(); // Name: Unknown, Age: 0\n\nconst person2 = new Person('John');\nperson2.displayInfo(); // Name: John, Age: 0\n\nconst person3 = new Person('Jane', 25);\nperson3.displayInfo(); // Name: Jane, Age: 25\n```\n\n### Private and Protected Constructors\n\nIn TypeScript, constructors can be marked as private or protected, which restricts their accessibility and usage.\n\nPrivate Constructors:\nCan be called only within the class itself. Private constructors are often used in scenarios where you want to enforce a singleton pattern or restrict the creation of instances to a factory method within the class\n\nProtected Constructors:\nProtected constructors are useful when you want to create a base class that should not be instantiated directly but can be extended by subclasses.\n\n```typescript\nclass BaseClass {\n    protected constructor() {}\n}\n\nclass DerivedClass extends BaseClass {\n    private value: number;\n\n    constructor(value: number) {\n        super();\n        this.value = value;\n    }\n}\n\n// Attempting to instantiate the base class directly will result in an error\n// const baseObj = new BaseClass(); // Error: Constructor of class 'BaseClass' is protected.\n\n// Create an instance of the derived class\nconst derivedObj = new DerivedClass(10);\n```\n\n### Access Modifiers\n\nAccess Modifiers `private`, `protected`, and `public` are used to control the visibility and accessibility of class members, such as properties and methods, in TypeScript classes. These modifiers are essential for enforcing encapsulation and establishing boundaries for accessing and modifying the internal state of a class.\n\nThe `private` modifier restricts access to the class member only within the containing class.\n\nThe `protected` modifier allows access to the class member within the containing class and its derived classes.\n\nThe `public` modifier provides unrestricted access to the class member, allowing it to be accessed from anywhere.\"\n\n### Get and Set\n\nGetters and setters are special methods that allow you to define custom access and modification behavior for class properties. They enable you to encapsulate the internal state of an object and provide additional logic when getting or setting the values of properties.\nIn TypeScript, getters and setters are defined using the `get` and `set` keywords respectively. Here's an example:\n\n```typescript\nclass MyClass {\n    private _myProperty: string;\n\n    constructor(value: string) {\n        this._myProperty = value;\n    }\n    get myProperty(): string {\n        return this._myProperty;\n    }\n    set myProperty(value: string) {\n        this._myProperty = value;\n    }\n}\n```\n\n### Auto-Accessors in Classes\n\nTypeScript version 4.9 adds support for auto-accessors, a forthcoming ECMAScript feature. They resemble class properties but are declared with the \"accessor\" keyword.\n\n```typescript\nclass Animal {\n    accessor name: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n```\n\nAuto-accessors are \"de-sugared\" into private `get` and `set` accessors, operating on an inaccessible property.\n\n<!-- skip -->\n```typescript\nclass Animal {\n    #__name: string;\n\n    get name() {\n        return this.#__name;\n    }\n    set name(value: string) {\n        this.#__name = name;\n    }\n\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n```\n\n### this\n\nIn TypeScript, the `this` keyword refers to the current instance of a class within its methods or constructors. It allows you to access and modify the properties and methods of the class from within its own scope.\nIt provides a way to access and manipulate the internal state of an object within its own methods.\n\n```typescript\nclass Person {\n    private name: string;\n    constructor(name: string) {\n        this.name = name;\n    }\n    public introduce(): void {\n        console.log(`Hello, my name is ${this.name}.`);\n    }\n}\n\nconst person1 = new Person('Alice');\nperson1.introduce(); // Hello, my name is Alice.\n```\n\n### Parameter Properties\n\nParameter properties allow you to declare and initialize class properties directly within the constructor parameters avoiding boilerplate code, example:\n\n```typescript\nclass Person {\n    constructor(\n        private name: string,\n        public age: number\n    ) {\n        // The \"private\" and \"public\" keywords in the constructor\n        // automatically declare and initialize the corresponding class properties.\n    }\n    public introduce(): void {\n        console.log(\n            `Hello, my name is ${this.name} and I am ${this.age} years old.`\n        );\n    }\n}\nconst person = new Person('Alice', 25);\nperson.introduce();\n```\n\n### Abstract Classes\n\nAbstract Classes are used in TypeScript mainly for inheritance, they provide a way to define common properties and methods that can be inherited by subclasses.\nThis is useful when you want to define common behavior and enforce that subclasses implement certain methods. They provide a way to create a hierarchy of classes where the abstract base class provides a shared interface and common functionality for the subclasses.\n\n```typescript\nabstract class Animal {\n    protected name: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    abstract makeSound(): void;\n}\n\nclass Cat extends Animal {\n    makeSound(): void {\n        console.log(`${this.name} meows.`);\n    }\n}\n\nconst cat = new Cat('Whiskers');\ncat.makeSound(); // Output: Whiskers meows.\n```\n\n### With Generics\n\nClasses with generics allow you to define reusable classes which can work with different types.\n\n```typescript\nclass Container<T> {\n    private item: T;\n\n    constructor(item: T) {\n        this.item = item;\n    }\n\n    getItem(): T {\n        return this.item;\n    }\n\n    setItem(item: T): void {\n        this.item = item;\n    }\n}\n\nconst container1 = new Container<number>(42);\nconsole.log(container1.getItem()); //  42\n\nconst container2 = new Container<string>('Hello');\ncontainer2.setItem('World');\nconsole.log(container2.getItem()); // World\n```\n\n### Decorators\n\nDecorators provide a mechanism to add metadata, modify behavior, validate, or extend the functionality of the target element. They are functions that execute at runtime. Multiple decorators can be applied to a declaration.\n\nDecorators are experimental features, and the following examples are only compatible with TypeScript version 5 or above using ES6.\n\nFor TypeScript versions prior to 5, they should be enabled using the `experimentalDecorators` property in your `tsconfig.json` or by using `--experimentalDecorators` in your command line (but the following example won't work).\n\nSome of the common use cases for decorators include:\n\n* Watching property changes.\n* Watching method calls.\n* Adding extra properties or methods.\n* Runtime validation.\n* Automatic serialization and deserialization.\n* Logging.\n* Authorization and authentication.\n* Error guarding.\n\nNote: Decorators for version 5 do not allow decorating parameters.\n\nTypes of decorators:\n\n#### Class Decorators\n\nClass Decorators are useful for extending an existing class, such as adding properties or methods, or collecting instances of a class. In the following example, we add a `toString` method that converts the class into a string representation.\n\n```typescript\ntype Constructor<T = {}> = new (...args: any[]) => T;\n\nfunction toString<Class extends Constructor>(\n    Value: Class,\n    context: ClassDecoratorContext<Class>\n) {\n    return class extends Value {\n        constructor(...args: any[]) {\n            super(...args);\n            console.log(JSON.stringify(this));\n            console.log(JSON.stringify(context));\n        }\n    };\n}\n\n@toString\nclass Person {\n    name: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    greet() {\n        return 'Hello, ' + this.name;\n    }\n}\nconst person = new Person('Simon');\n/* Logs:\n{\"name\":\"Simon\"}\n{\"kind\":\"class\",\"name\":\"Person\"}\n*/\n```\n\n#### Property Decorator\n\nProperty decorators are useful for modifying the behavior of a property, such as changing the initialization values. In the following code, we have a script that sets a property to always be in uppercase:\n\n```typescript\nfunction upperCase<T>(\n    target: undefined,\n    context: ClassFieldDecoratorContext<T, string>\n) {\n    return function (this: T, value: string) {\n        return value.toUpperCase();\n    };\n}\n\nclass MyClass {\n    @upperCase\n    prop1 = 'hello!';\n}\n\nconsole.log(new MyClass().prop1); // Logs: HELLO!\n```\n\n#### Method Decorator\n\nMethod decorators allow you to change or enhance the behavior of methods. Below is an example of a simple logger:\n\n```typescript\nfunction log<This, Args extends any[], Return>(\n    target: (this: This, ...args: Args) => Return,\n    context: ClassMethodDecoratorContext<\n        This,\n        (this: This, ...args: Args) => Return\n    >\n) {\n    const methodName = String(context.name);\n\n    function replacementMethod(this: This, ...args: Args): Return {\n        console.log(`LOG: Entering method '${methodName}'.`);\n        const result = target.call(this, ...args);\n        console.log(`LOG: Exiting method '${methodName}'.`);\n        return result;\n    }\n\n    return replacementMethod;\n}\n\nclass MyClass {\n    @log\n    sayHello() {\n        console.log('Hello!');\n    }\n}\n\nnew MyClass().sayHello();\n```\n\nIt logs:\n\n```shell\nLOG: Entering method 'sayHello'.\nHello!\nLOG: Exiting method 'sayHello'.\n```\n\n#### Getter and Setter Decorators\n\nGetter and setter decorators allow you to change or enhance the behavior of class accessors. They are useful, for instance, for validating property assignments. Here's a simple example for a getter decorator:\n\n```typescript\nfunction range<This, Return extends number>(min: number, max: number) {\n    return function (\n        target: (this: This) => Return,\n        context: ClassGetterDecoratorContext<This, Return>\n    ) {\n        return function (this: This): Return {\n            const value = target.call(this);\n            if (value < min || value > max) {\n                throw 'Invalid';\n            }\n            Object.defineProperty(this, context.name, {\n                value,\n                enumerable: true,\n            });\n            return value;\n        };\n    };\n}\n\nclass MyClass {\n    private _value = 0;\n\n    constructor(value: number) {\n        this._value = value;\n    }\n    @range(1, 100)\n    get getValue(): number {\n        return this._value;\n    }\n}\n\nconst obj = new MyClass(10);\nconsole.log(obj.getValue); // Valid: 10\n\nconst obj2 = new MyClass(999);\nconsole.log(obj2.getValue); // Throw: Invalid!\n```\n\n#### Decorator Metadata\n\nDecorator Metadata simplifies the process for decorators to apply and utilize metadata in any class. They can access a new metadata property on the context object, which can serve as a key for both primitives and objects.\nMetadata information can be accessed on the class via `Symbol.metadata`.\n\nMetadata can be used for various purposes, such as debugging, serialization, or dependency injection with decorators.\n\n```typescript\n//@ts-ignore\nSymbol.metadata ??= Symbol('Symbol.metadata'); // Simple polify\n\ntype Context =\n    | ClassFieldDecoratorContext\n    | ClassAccessorDecoratorContext\n    | ClassMethodDecoratorContext; // Context contains property metadata: DecoratorMetadata\n\nfunction setMetadata(_target: any, context: Context) {\n    // Set the metadata object with a primitive value\n    context.metadata[context.name] = true;\n}\n\nclass MyClass {\n    @setMetadata\n    a = 123;\n\n    @setMetadata\n    accessor b = 'b';\n\n    @setMetadata\n    fn() {}\n}\n\nconst metadata = MyClass[Symbol.metadata]; // Get metadata information\n\nconsole.log(JSON.stringify(metadata)); // {\"bar\":true,\"baz\":true,\"foo\":true}\n```\n\n### Inheritance\n\nInheritance refers to the mechanism by which a class can inherit properties and methods from another class, known as the base class or superclass. The derived class, also called the child class or subclass, can extend and specialize the functionality of the base class by adding new properties and methods or overriding existing ones.\n\n```typescript\nclass Animal {\n    name: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    speak(): void {\n        console.log('The animal makes a sound');\n    }\n}\n\nclass Dog extends Animal {\n    breed: string;\n\n    constructor(name: string, breed: string) {\n        super(name);\n        this.breed = breed;\n    }\n\n    speak(): void {\n        console.log('Woof! Woof!');\n    }\n}\n\n// Create an instance of the base class\nconst animal = new Animal('Generic Animal');\nanimal.speak(); // The animal makes a sound\n\n// Create an instance of the derived class\nconst dog = new Dog('Max', 'Labrador');\ndog.speak(); // Woof! Woof!\"\n```\n\nTypeScript does not support multiple inheritance in the traditional sense and instead allows inheritance from a single base class.\nTypeScript supports multiple interfaces. An interface can define a contract for the structure of an object, and a class can implement multiple interfaces. This allows a class to inherit behavior and structure from multiple sources.\n\n```typescript\ninterface Flyable {\n    fly(): void;\n}\n\ninterface Swimmable {\n    swim(): void;\n}\n\nclass FlyingFish implements Flyable, Swimmable {\n    fly() {\n        console.log('Flying...');\n    }\n\n    swim() {\n        console.log('Swimming...');\n    }\n}\n\nconst flyingFish = new FlyingFish();\nflyingFish.fly();\nflyingFish.swim();\n```\n\nThe `class` keyword in TypeScript, similar to JavaScript, is often referred to as syntactic sugar. It was introduced in ECMAScript 2015 (ES6) to offer a more familiar syntax for creating and working with objects in a class-based manner. However, it's important to note that TypeScript, being a superset of JavaScript, ultimately compiles down to JavaScript, which remains prototype-based at its core.\n\n### Statics\n\nTypeScript has static members. To access the static members of a class, you can use the class name followed by a dot, without the need to create an object.\n\n```typescript\nclass OfficeWorker {\n    static memberCount: number = 0;\n\n    constructor(private name: string) {\n        OfficeWorker.memberCount++;\n    }\n}\n\nconst w1 = new OfficeWorker('James');\nconst w2 = new OfficeWorker('Simon');\nconst total = OfficeWorker.memberCount;\nconsole.log(total); // 2\n```\n\n### Property initialization\n\nThere are several ways how you can initialize properties for a class in TypeScript:\n\nInline:\n\nIn the following example these initial values will be used when an instance of the class is created.\n\n```typescript\nclass MyClass {\n    property1: string = 'default value';\n    property2: number = 42;\n}\n```\n\nIn the constructor:\n\n```typescript\nclass MyClass {\n    property1: string;\n    property2: number;\n\n    constructor() {\n        this.property1 = 'default value';\n        this.property2 = 42;\n    }\n}\n```\n\nUsing constructor parameters:\n\n```typescript\nclass MyClass {\n    constructor(\n        private property1: string = 'default value',\n        public property2: number = 42\n    ) {\n        // There is no need to assign the values to the properties explicitly.\n    }\n    log() {\n        console.log(this.property2);\n    }\n}\nconst x = new MyClass();\nx.log();\n```\n\n### Method overloading\n\nMethod overloading allows a class to have multiple methods with the same name but different parameter types or a different number of parameters. This allows us to call a method in different ways based on the arguments passed.\n\n```typescript\nclass MyClass {\n    add(a: number, b: number): number; // Overload signature 1\n    add(a: string, b: string): string; // Overload signature 2\n\n    add(a: number | string, b: number | string): number | string {\n        if (typeof a === 'number' && typeof b === 'number') {\n            return a + b;\n        }\n        if (typeof a === 'string' && typeof b === 'string') {\n            return a.concat(b);\n        }\n        throw new Error('Invalid arguments');\n    }\n}\n\nconst r = new MyClass();\nconsole.log(r.add(10, 5)); // Logs 15\n```\n\n## Generics\n\nGenerics allow you to create reusable components and functions that can work with multiple types. With generics, you can parameterize types, functions, and interfaces, allowing them to operate on different types without explicitly specifying them beforehand.\n\nGenerics allow you to make code more flexible and reusable.\n\n### Generic Type\n\nTo define a generic type, you use angle brackets (`<>`) to specify the type parameters, for instance:\n\n```typescript\nfunction identity<T>(arg: T): T {\n    return arg;\n}\nconst a = identity('x');\nconst b = identity(123);\n\nconst getLen = <T,>(data: ReadonlyArray<T>) => data.length;\nconst len = getLen([1, 2, 3]);\n```\n\n### Generic Classes\n\nGenerics can be applied also to classes, in this way they can work with multiple types by using type parameters. This is useful to create reusable class definitions that can operate on different data types while maintaining type safety.\n\n```typescript\nclass Container<T> {\n    private item: T;\n\n    constructor(item: T) {\n        this.item = item;\n    }\n\n    getItem(): T {\n        return this.item;\n    }\n}\n\nconst numberContainer = new Container<number>(123);\nconsole.log(numberContainer.getItem()); // 123\n\nconst stringContainer = new Container<string>('hello');\nconsole.log(stringContainer.getItem()); // hello\n```\n\n### Generic Constraints\n\nGeneric parameters can be constrained using the `extends` keyword followed by a type or interface that the type parameter must satisfy.\n\nIn the following example T it is must containing a properly `length` in order to be valid:\n\n<!-- skip -->\n```typescript\nconst printLen = <T extends { length: number }>(value: T): void => {\n    console.log(value.length);\n};\n\nprintLen('Hello'); // 5\nprintLen([1, 2, 3]); // 3\nprintLen({ length: 10 }); // 10\nprintLen(123); // Invalid\n```\n\nAn interesting feature of generic introduced in version 3.4 RC is Higher order function type inference which introduced  propagated generic type arguments:\n\n```typescript\ndeclare function pipe<A extends any[], B, C>(\n    ab: (...args: A) => B,\n    bc: (b: B) => C\n): (...args: A) => C;\n\ndeclare function list<T>(a: T): T[];\ndeclare function box<V>(x: V): { value: V };\n\nconst listBox = pipe(list, box); // <T>(a: T) => { value: T[] }\nconst boxList = pipe(box, list); // <V>(x: V) => { value: V }[]\n```\n\nThis functionality allows more easily typed safe pointfree style programming which is common in functional programming.\n\n### Generic contextual narrowing\n\nContextual narrowing for generics is the mechanism in TypeScript that allows the compiler to narrow down the type of a generic parameter based on the context in which it is used, it is useful when working with generic types in conditional statements:\n\n```typescript\nfunction process<T>(value: T): void {\n    if (typeof value === 'string') {\n        // Value is narrowed down to type 'string'\n        console.log(value.length);\n    } else if (typeof value === 'number') {\n        // Value is narrowed down to type 'number'\n        console.log(value.toFixed(2));\n    }\n}\n\nprocess('hello'); // 5\nprocess(3.14159); // 3.14\n```\n\n## Erased Structural Types\n\nIn TypeScript, objects do not have to match a specific, exact type. For instance, if we create an object that fulfills an interface's requirements, we can utilize that object in places where that interface is required, even if there was no explicit connection between them.\nExample:\n\n```typescript\ntype NameProp1 = {\n    prop1: string;\n};\n\nfunction log(x: NameProp1) {\n    console.log(x.prop1);\n}\n\nconst obj = {\n    prop2: 123,\n    prop1: 'Origin',\n};\n\nlog(obj); // Valid\n```\n\n## Namespacing\n\nIn TypeScript, namespaces are used to organize code into logical containers, preventing naming collisions and providing a way to group related code together.\nThe usage of the `export` keywords allows access to the namespace in \"outside\" modules.\n\n```typescript\nexport namespace MyNamespace {\n    export interface MyInterface1 {\n        prop1: boolean;\n    }\n    export interface MyInterface2 {\n        prop2: string;\n    }\n}\n\nconst a: MyNamespace.MyInterface1 = {\n    prop1: true,\n};\n```\n\n## Symbols\n\nSymbols are a primitive data type that represents an immutable value which is guaranteed to be globally unique throughout the lifetime of the program.\n\nSymbols can be used as keys for object properties and provide a way to create non-enumerable properties.\n\n```typescript\nconst key1: symbol = Symbol('key1');\nconst key2: symbol = Symbol('key2');\n\nconst obj = {\n    [key1]: 'value 1',\n    [key2]: 'value 2',\n};\n\nconsole.log(obj[key1]); // value 1\nconsole.log(obj[key2]); // value 2\n```\n\nIn WeakMaps and WeakSets, symbols are now permissible as keys.\n\n## Triple-Slash Directives\n\nTriple-slash directives are special comments that provide instructions to the compiler about how to process a file. These directives begin with three consecutive slashes (`///`) and are typically placed at the top of a TypeScript file and have no effects on the runtime behavior.\n\nTriple-slash directives are used to reference external dependencies, specify module loading behavior, enable/disable certain compiler features, and more. Few examples:\n\nReferencing a declaration file:\n\n<!-- skip -->\n```typescript\n/// <reference path=\"path/to/declaration/file.d.ts\" />\n```\n\nIndicate the module format:\n\n<!-- skip -->\n```typescript\n/// <amd|commonjs|system|umd|es6|es2015|none>\n```\n\nEnable compiler options, in the following example strict mode:\n\n<!-- skip -->\n```typescript\n/// <strict|noImplicitAny|noUnusedLocals|noUnusedParameters>\n```\n\n## Type Manipulation\n\n### Creating Types from Types\n\nIs it possible to create new types composing, manipulating or transforming existing types.\n\nIntersection Types (`&`):\n\nAllow you to combine multiple types into a single  type:\n\n```typescript\ntype A = { foo: number };\ntype B = { bar: string };\ntype C = A & B; // Intersection of A and B\nconst obj: C = { foo: 42, bar: 'hello' };\n```\n\nUnion Types (`|`):\n\nAllow you to define a type that can be one of several types:\n\n```typescript\ntype Result = string | number;\nconst value1: Result = 'hello';\nconst value2: Result = 42;\n```\n\nMapped Types:\n\nAllow you to transform the properties of an existing type to create new type:\n\n```typescript\ntype Mutable<T> = {\n    readonly [P in keyof T]: T[P];\n};\ntype Person = {\n    name: string;\n    age: number;\n};\ntype ImmutablePerson = Mutable<Person>; // Properties become read-only\n```\n\nConditional types:\n\nAllow you to create types based on some conditions:\n\n```typescript\ntype ExtractParam<T> = T extends (param: infer P) => any ? P : never;\ntype MyFunction = (name: string) => number;\ntype ParamType = ExtractParam<MyFunction>; // string\n```\n\n### Indexed Access Types\n\nIn TypeScript is it possible to access and manipulate  the types of properties within another type using an index, `Type[Key]`.\n\n```typescript\ntype Person = {\n    name: string;\n    age: number;\n};\n\ntype AgeType = Person['age']; // number\n```\n\n```typescript\ntype MyTuple = [string, number, boolean];\ntype MyType = MyTuple[2]; // boolean\n```\n\n### Utility Types\n\nSeveral built-in utility types can be used to manipulate types, below a list of the most common used:\n\n#### Awaited\\<T\\>\n\nConstructs a type recursively unwrap Promises.\n\n```typescript\ntype A = Awaited<Promise<string>>; // string\n```\n\n#### Partial\\<T\\>\n\nConstructs a type with all properties of T set to optional.\n\n```typescript\ntype Person = {\n    name: string;\n    age: number;\n};\n\ntype A = Partial<Person>; // { name?: string | undefined; age?: number | undefined; }\n```\n\n#### Required\\<T\\>\n\nConstructs a type with all properties of T set to required.\n\n```typescript\ntype Person = {\n    name?: string;\n    age?: number;\n};\n\ntype A = Required<Person>; // { name: string; age: number; }\n```\n\n#### Readonly\\<T\\>\n\nConstructs a type with all properties of T set to readonly.\n\n<!-- skip -->\n```typescript\ntype Person = {\n    name: string;\n    age: number;\n};\n\ntype A = Readonly<Person>;\n\nconst a: A = { name: 'Simon', age: 17 };\na.name = 'John'; // Invalid\n```\n\n#### Record\\<K, T\\>\n\nConstructs a type with a set of properties K of type T.\n\n```typescript\ntype Product = {\n    name: string;\n    price: number;\n};\n\nconst products: Record<string, Product> = {\n    apple: { name: 'Apple', price: 0.5 },\n    banana: { name: 'Banana', price: 0.25 },\n};\n\nconsole.log(products.apple); // { name: 'Apple', price: 0.5 }\n```\n\n#### Pick\\<T, K\\>\n\nConstructs a type by picking the specified properties K from T.\n\n```typescript\ntype Product = {\n    name: string;\n    price: number;\n};\n\ntype Price = Pick<Product, 'price'>; // { price: number; }\n```\n\n#### Omit\\<T, K\\>\n\nConstructs a type by omitting the specified properties K from T.\n\n```typescript\ntype Product = {\n    name: string;\n    price: number;\n};\n\ntype Name = Omit<Product, 'price'>; // { name: string; }\n```\n\n#### Exclude\\<T, U\\>\n\nConstructs a type by excluding all values of type U from T.\n\n```typescript\ntype Union = 'a' | 'b' | 'c';\ntype MyType = Exclude<Union, 'a' | 'c'>; // b\n```\n\n#### Extract\\<T, U\\>\n\nConstructs a type by extracting all values of type U from T.\n\n```typescript\ntype Union = 'a' | 'b' | 'c';\ntype MyType = Extract<Union, 'a' | 'c'>; // a | c\n```\n\n#### NonNullable\\<T\\>\n\nConstructs a type by excluding null and undefined from T.\n\n```typescript\ntype Union = 'a' | null | undefined | 'b';\ntype MyType = NonNullable<Union>; // 'a' | 'b'\n```\n\n#### Parameters\\<T\\>\n\nExtracts the parameter types of a function type T.\n\n```typescript\ntype Func = (a: string, b: number) => void;\ntype MyType = Parameters<Func>; // [a: string, b: number]\n```\n\n#### ConstructorParameters\\<T\\>\n\nExtracts the parameter types of a constructor function type T.\n\n```typescript\nclass Person {\n    constructor(\n        public name: string,\n        public age: number\n    ) {}\n}\ntype PersonConstructorParams = ConstructorParameters<typeof Person>; // [name: string, age: number]\nconst params: PersonConstructorParams = ['John', 30];\nconst person = new Person(...params);\nconsole.log(person); // Person { name: 'John', age: 30 }\n```\n\n#### ReturnType\\<T\\>\n\nExtracts the return type of a function type T.\n\n```typescript\ntype Func = (name: string) => number;\ntype MyType = ReturnType<Func>; // number\n```\n\n#### InstanceType\\<T\\>\n\nExtracts the instance type of a class type T.\n\n```typescript\nclass Person {\n    name: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    sayHello() {\n        console.log(`Hello, my name is ${this.name}!`);\n    }\n}\n\ntype PersonInstance = InstanceType<typeof Person>;\n\nconst person: PersonInstance = new Person('John');\n\nperson.sayHello(); // Hello, my name is John!\n```\n\n#### ThisParameterType\\<T\\>\n\nExtracts the type of 'this' parameter from a function type T.\n\n```typescript\ninterface Person {\n    name: string;\n    greet(this: Person): void;\n}\ntype PersonThisType = ThisParameterType<Person['greet']>; // Person\n```\n\n#### OmitThisParameter\\<T\\>\n\nRemoves the 'this' parameter from a function type T.\n\n```typescript\nfunction capitalize(this: String) {\n    return this[0].toUpperCase + this.substring(1).toLowerCase();\n}\n\ntype CapitalizeType = OmitThisParameter<typeof capitalize>; // () => string\n```\n\n#### ThisType\\<T\\>\n\nServers as a market for a contextual `this` type.\n\n<!-- skip -->\n```typescript\ntype Logger = {\n    log: (error: string) => void;\n};\n\nlet helperFunctions: { [name: string]: Function } & ThisType<Logger> = {\n    hello: function () {\n        this.log('some error'); // Valid as \"log\" is a part of \"this\".\n        this.update(); // Invalid\n    },\n};\n```\n\n#### Uppercase\\<T\\>\n\nMake uppercase the name of the input type T.\n\n```typescript\ntype MyType = Uppercase<'abc'>; // \"ABC\"\n```\n\n#### Lowercase\\<T\\>\n\nMake lowercase the name of the input type T.\n\n```typescript\ntype MyType = Lowercase<'ABC'>; // \"abc\"\n```\n\n#### Capitalize\\<T\\>\n\nCapitalize the name of the input type T.\n\n```typescript\ntype MyType = Capitalize<'abc'>; // \"Abc\"\n```\n\n#### Uncapitalize\\<T\\>\n\nUncapitalize the name of the input type T.\n\n```typescript\ntype MyType = Uncapitalize<'Abc'>; // \"abc\"\n```\n\n#### NoInfer\\<T\\>\n\nNoInfer is a utility type designed to block the automatic inference of types within the scope of a generic function.\n\nExample:\n\n```typescript\n// Automatic inference of types within the scope of a generic function.\nfunction fn<T extends string>(x: T[], y: T) {\n    return x.concat(y);\n}\nconst r = fn(['a', 'b'], 'c'); // Type here is (\"a\" | \"b\" | \"c\")[]\n```\n\nWith NoInfer:\n\n<!-- skip -->\n```typescript\n// Example function that uses NoInfer to prevent type inference\nfunction fn2<T extends string>(x: T[], y: NoInfer<T>) {\n    return x.concat(y);\n}\n\nconst r2 = fn2(['a', 'b'], 'c'); // Error: Type Argument of type '\"c\"' is not assignable to parameter of type '\"a\" | \"b\"'.\n```\n\n## Others\n\n### Errors and Exception Handling\n\nTypeScript allows you to catch and handle errors using standard JavaScript error handling mechanisms:\n\nTry-Catch-Finally Blocks:\n\n```typescript\ntry {\n    // Code that might throw an error\n} catch (error) {\n    // Handle the error\n} finally {\n    // Code that always executes, finally is optional\n}\n```\n\nYou can also handle different types of error:\n\n```typescript\ntry {\n    // Code that might throw different types of errors\n} catch (error) {\n    if (error instanceof TypeError) {\n        // Handle TypeError\n    } else if (error instanceof RangeError) {\n        // Handle RangeError\n    } else {\n        // Handle other errors\n    }\n}\n```\n\nCustom Error Types:\n\nIt is possible to specify more specific error by extending on the Error `class`:\n\n```typescript\nclass CustomError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = 'CustomError';\n    }\n}\n\nthrow new CustomError('This is a custom error.');\n```\n\n### Mixin classes\n\nMixin classes allow you to combine and compose behavior from multiple classes into a single class. They provide a way to reuse and extend functionality without the need for deep inheritance chains.\n\n```typescript\nabstract class Identifiable {\n    name: string = '';\n    logId() {\n        console.log('id:', this.name);\n    }\n}\nabstract class Selectable {\n    selected: boolean = false;\n    select() {\n        this.selected = true;\n        console.log('Select');\n    }\n    deselect() {\n        this.selected = false;\n        console.log('Deselect');\n    }\n}\nclass MyClass {\n    constructor() {}\n}\n\n// Extend MyClass to include the behavior of Identifiable and Selectable\ninterface MyClass extends Identifiable, Selectable {}\n\n// Function to apply mixins to a class\nfunction applyMixins(source: any, baseCtors: any[]) {\n    baseCtors.forEach(baseCtor => {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n            let descriptor = Object.getOwnPropertyDescriptor(\n                baseCtor.prototype,\n                name\n            );\n            if (descriptor) {\n                Object.defineProperty(source.prototype, name, descriptor);\n            }\n        });\n    });\n}\n\n// Apply the mixins to MyClass\napplyMixins(MyClass, [Identifiable, Selectable]);\nlet o = new MyClass();\no.name = 'abc';\no.logId();\no.select();\n```\n\n### Asynchronous Language Features\n\nAs TypeScript is a superset of JavaScript, it has built-in asynchronous language features of JavaScript as:\n\nPromises:\n\nPromises are a way to handle asynchronous operations and their results using methods like `.then()` and `.catch()` to handle success and error conditions.\n\nTo learn more: [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n\nAsync/await:\n\nAsync/await keywords are a way to provide a more synchronous-looking syntax for working with Promises. The `async` keyword is used to define an asynchronous function, and the `await` keyword is used within an async function to pause execution until a Promise is resolved or rejected.\n\nTo learn more:\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await)\n\nThe following API are well supported in TypeScript:\n\nFetch API:\n[https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\n\nWeb Workers:\n[https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API)\n\nShared Workers:\n[https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker](https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker)\n\nWebSocket:\n[https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API)\n\n### Iterators and Generators\n\nBoth Interators and Generators are well supported in TypeScript.\n\nIterators are objects that implement the iterator protocol, providing a way to access elements of a collection or sequence one by one. It is a structure that contains a pointer to the next element in the iteration. They have a `next()` method that returns the next value in the sequence along with a boolean indicating if the sequence is `done`.\n\n```typescript\nclass NumberIterator implements Iterable<number> {\n    private current: number;\n\n    constructor(\n        private start: number,\n        private end: number\n    ) {\n        this.current = start;\n    }\n\n    public next(): IteratorResult<number> {\n        if (this.current <= this.end) {\n            const value = this.current;\n            this.current++;\n            return { value, done: false };\n        } else {\n            return { value: undefined, done: true };\n        }\n    }\n\n    [Symbol.iterator](): Iterator<number> {\n        return this;\n    }\n}\n\nconst iterator = new NumberIterator(1, 3);\n\nfor (const num of iterator) {\n    console.log(num);\n}\n```\n\nGenerators are special functions defined using the `function*` syntax that simplifies the creation of iterators. They use the `yield` keyword to define the sequence of values and automatically pause and resume execution when values are requested.\n\nGenerators make it easier to create iterators and are especially useful for working with large or infinite sequences.\n\nExample:\n\n```typescript\nfunction* numberGenerator(start: number, end: number): Generator<number> {\n    for (let i = start; i <= end; i++) {\n        yield i;\n    }\n}\n\nconst generator = numberGenerator(1, 5);\n\nfor (const num of generator) {\n    console.log(num);\n}\n```\n\nTypeScript also supports async iterators and async Generators.\n\nTo learn more:\n\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator)\n\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)\n\n### TsDocs JSDoc Reference\n\nWhen working with a JavaScript code base, it is possible to help TypeScript to infer the right Type by using JSDoc comments with additional annotation to provide type information.\n\nExample:\n\n```typescript\n/**\n * Computes the power of a given number\n * @constructor\n * @param {number} base \u2013 The base value of the expression\n * @param {number} exponent \u2013 The exponent value of the expression\n */\nfunction power(base: number, exponent: number) {\n    return Math.pow(base, exponent);\n}\npower(10, 2); // function power(base: number, exponent: number): number\n```\n\nFull documentation is provided to this link:\n[https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html](https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html)\n\nFrom version 3.7 it is possible to generate .d.ts type definitions from JavaScript JSDoc syntax.\nMore information can be found here:\n[https://www.typescriptlang.org/docs/handbook/declaration-files/dts-from-js.html](https://www.typescriptlang.org/docs/handbook/declaration-files/dts-from-js.html)\n\n### @types\n\nPackages under the @types organization are special package naming conventions used to provide type definitions for existing JavaScript libraries or modules. For instance using:\n\n```shell\nnpm install --save-dev @types/lodash\n```\n\nWill install the type definitions of `lodash` in your current project.\n\nTo contribute to the type definitions of @types package, please submit a pull request to [https://github.com/DefinitelyTyped/DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped).\n\n### JSX\n\nJSX (JavaScript XML) is an extension to the JavaScript language syntax that allows you to write HTML-like code within your JavaScript or TypeScript files. It is commonly used in React to define the HTML structure.\n\nTypeScript extends the capabilities of JSX by providing type checking and static analysis.\n\nTo use JSX you need to set the `jsx` compiler option in your `tsconfig.json` file. Two common configuration options:\n\n* \"preserve\": emit .jsx files with the JSX unchanged. This option tells TypeScript to keep the JSX syntax as-is and not transform it during the compilation process. You can use this option if you have a separate tool, like Babel, that handles the transformation.\n* \"react\": enables TypeScript's built-in JSX transformation. React.createElement will be used.\n\nAll options are available here:\n[https://www.typescriptlang.org/tsconfig#jsx](https://www.typescriptlang.org/tsconfig#jsx)\n\n### ES6 Modules\n\nTypeScript does support ES6 (ECMAScript 2015) and many subsequent versions. This means you can use ES6 syntax, such as arrow functions, template literals, classes, modules, destructuring, and more.\n\nTo enable ES6 features in your project, you can specify the `target` property in the tsconfig.json.\n\nA configuration example:\n\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"es6\",\n    \"module\": \"es6\",\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"outDir\": \"dist\"\n  },\n  \"include\": [\"src\"]\n}\n```\n\n### ES7 Exponentiation Operator\n\nThe exponentiation (`**`) operator computes the value obtained by raising the first operand to the power of the second operand. It functions similarly to `Math.pow()`, but with the added capability of accepting BigInts as operands.\nTypeScript fully supports this operator using as `target` in your tsconfig.json file `es2016` or larger version.\n\n```typescript\nconsole.log(2 ** (2 ** 2)); // 16\n```\n\n### The for-await-of Statement\n\nThis is a JavaScript feature fully supported in TypeScript which allows you to iterate over asynchronous iterable objects from target version es2018.\n\n```typescript\nasync function* asyncNumbers(): AsyncIterableIterator<number> {\n    yield Promise.resolve(1);\n    yield Promise.resolve(2);\n    yield Promise.resolve(3);\n}\n\n(async () => {\n    for await (const num of asyncNumbers()) {\n        console.log(num);\n    }\n})();\n```\n\n### New target meta-property\n\nYou can use in TypeScript the `new.target` meta-property which enables you to determine if a function or constructor was invoked using the new operator. It allows you to detect whether an object was created as a result of a constructor call.\n\n```typescript\nclass Parent {\n    constructor() {\n        console.log(new.target); // Logs the constructor function used to create an instance\n    }\n}\n\nclass Child extends Parent {\n    constructor() {\n        super();\n    }\n}\n\nconst parentX = new Parent(); // [Function: Parent]\nconst child = new Child(); // [Function: Child]\n```\n\n### Dynamic Import Expressions\n\nIt is possible to conditionally load modules or lazy load them on-demand using the ECMAScript proposal for dynamic import which is supported in TypeScript.\n\nThe syntax for dynamic import expressions in TypeScript is as follows:\n\n<!-- skip -->\n```typescript\nasync function renderWidget() {\n    const container = document.getElementById('widget');\n    if (container !== null) {\n        const widget = await import('./widget'); // Dynamic import\n        widget.render(container);\n    }\n}\n\nrenderWidget();\n```\n\n### \"tsc \u2013watch\"\n\nThis command starts a TypeScript compiler with `--watch` parameter, with the ability to automatically recompile TypeScript files whenever they are modified.\n\n```shell\ntsc --watch\n```\n\nStarting from TypeScript version 4.9, file monitoring primarily relies on file system events, automatically resorting to polling if an event-based watcher cannot be established.\n\n### Non-null Assertion Operator\n\nThe Non-null Assertion Operator (Postfix !) also called Definite Assignment Assertions is a TypeScript feature that allows you to assert that a variable or property is not null or undefined, even if TypeScript's static type analysis suggests that it might be. With this feature it is possible to remove any explicit checking.\n\n```typescript\ntype Person = {\n    name: string;\n};\n\nconst printName = (person?: Person) => {\n    console.log(`Name is ${person!.name}`);\n};\n```\n\n### Defaulted declarations\n\nDefaulted declarations are used when a variable or parameter is assigned a default value. This means that if no value is provided for that variable or parameter, the default value will be used instead.\n\n```typescript\nfunction greet(name: string = 'Anonymous'): void {\n    console.log(`Hello, ${name}!`);\n}\ngreet(); // Hello, Anonymous!\ngreet('John'); // Hello, John!\n```\n\n### Optional Chaining\n\nThe optional chaining operator `?.` works like the regular dot operator (`.`) for accessing properties or methods. However, it gracefully handles null or undefined values by terminating the expression and returning `undefined`, instead of throwing an error.\n\n```typescript\ntype Person = {\n    name: string;\n    age?: number;\n    address?: {\n        street?: string;\n        city?: string;\n    };\n};\n\nconst person: Person = {\n    name: 'John',\n};\n\nconsole.log(person.address?.city); // undefined\n```\n\n### Nullish coalescing operator\n\nThe nullish coalescing operator `??` returns the right-hand side value if the left-hand side is `null` or `undefined`; otherwise, it returns the left-hand side value.\n\n```typescript\nconst foo = null ?? 'foo';\nconsole.log(foo); // foo\n\nconst baz = 1 ?? 'baz';\nconst baz2 = 0 ?? 'baz';\nconsole.log(baz); // 1\nconsole.log(baz2); // 0\n```\n\n### Template Literal Types\n\nTemplate Literal Types allow to manipulate string value at type level and generate new string types based on existing ones. They are useful to create more expressive and precise types from string-based operations.\n\n```typescript\ntype Department = 'engineering' | 'hr';\ntype Language = 'english' | 'spanish';\ntype Id = `${Department}-${Language}-id`; // \"engineering-english-id\" | \"engineering-spanish-id\" | \"hr-english-id\" | \"hr-spanish-id\"\n```\n\n### Function overloading\n\nFunction overloading allows you to define multiple function signatures for the same function name, each with different parameter types and return type.\nWhen you call an overloaded function, TypeScript uses the provided arguments to determine the correct function signature:\n\n```typescript\nfunction makeGreeting(name: string): string;\nfunction makeGreeting(names: string[]): string[];\n\nfunction makeGreeting(person: unknown): unknown {\n    if (typeof person === 'string') {\n        return `Hi ${person}!`;\n    } else if (Array.isArray(person)) {\n        return person.map(name => `Hi, ${name}!`);\n    }\n    throw new Error('Unable to greet');\n}\n\nmakeGreeting('Simon');\nmakeGreeting(['Simone', 'John']);\n```\n\n### Recursive Types\n\nA Recursive Type is a type that can refer to itself. This is useful for defining data structures that have a hierarchical or recursive structure (potentially infinite nesting), such as linked lists, trees, and graphs.\n\n```typescript\ntype ListNode<T> = {\n    data: T;\n    next: ListNode<T> | undefined;\n};\n```\n\n### Recursive Conditional Types\n\nIt is possible to define complex type relationships using logic and recursion in TypeScript.\nLet\u2019s break it down in simple terms:\n\nConditional Types: allows you to define types based on boolean conditions:\n\n```typescript\ntype CheckNumber<T> = T extends number ? 'Number' : 'Not a number';\ntype A = CheckNumber<123>; // 'Number'\ntype B = CheckNumber<'abc'>; // 'Not a number'\n```\n\nRecursion: means a type definition that refers to itself within its own definition:\n\n```typescript\ntype Json = string | number | boolean | null | Json[] | { [key: string]: Json };\n\nconst data: Json = {\n    prop1: true,\n    prop2: 'prop2',\n    prop3: {\n        prop4: [],\n    },\n};\n```\n\nRecursive Conditional Types combine both conditional logic and recursion. It means that a type definition can depend on itself through conditional logic, creating complex and flexible type relationships.\n\n```typescript\ntype Flatten<T> = T extends Array<infer U> ? Flatten<U> : T;\n\ntype NestedArray = [1, [2, [3, 4], 5], 6];\ntype FlattenedArray = Flatten<NestedArray>; // 2 | 3 | 4 | 5 | 1 | 6\n```\n\n### ECMAScript Module Support in Node\n\nNode.js added support for ECMAScript Modules starting from version 15.3.0, and TypeScript has had ECMAScript Module Support for Node.js since version 4.7. This support can be enabled by using the `module` property with the value `nodenext` in the tsconfig.json file. Here's an example:\n\n```json\n{\n  \"compilerOptions\": {\n    \"module\": \"nodenext\",\n    \"outDir\": \"./lib\",\n    \"declaration\": true\n  }\n}\n```\n\nNode.js supports two file extensions for modules: `.mjs` for ES modules and `.cjs` for CommonJS modules. The equivalent file extensions in TypeScript are `.mts` for ES modules and `.cts` for CommonJS modules. When the TypeScript compiler transpiles these files to JavaScript, it will create `.mjs` and `.cjs` files.\n\nIf you want to use ES modules in your project, you can set the `type` property to \"module\" in your package.json file. This instructs Node.js to treat the project as an ES module project.\n\nAdditionally, TypeScript also supports type declarations in .d.ts files. These declaration files provide type information for libraries or modules written in TypeScript, allowing other developers to utilize them with TypeScript's type checking and auto-completion features.\n\n### Assertion Functions\n\nIn TypeScript, assertion functions are functions that indicate the verification of a specific condition based on their return value. In their simplest form, an assert function examines a provided predicate and raises an error when the predicate evaluates to false.\n\n```typescript\nfunction isNumber(value: unknown): asserts value is number {\n    if (typeof value !== 'number') {\n        throw new Error('Not a number');\n    }\n}\n```\n\nOr can be declared as function expression:\n\n```typescript\ntype AssertIsNumber = (value: unknown) => asserts value is number;\nconst isNumber: AssertIsNumber = value => {\n    if (typeof value !== 'number') {\n        throw new Error('Not a number');\n    }\n};\n```\n\nAssertion functions share similarities with type guards. Type guards were initially introduced to perform runtime checks and ensure the type of a value within a specific scope.\nSpecifically, a type guard is a function that evaluates a type predicate and returns a boolean value indicating whether the predicate is true or false. This differs slightly from assertion functions,where the intention is to throw an error rather than returning false when the predicate is not satisfied.\n\nExample of type guard:\n\n```typescript\nconst isNumber = (value: unknown): value is number => typeof value === 'number';\n```\n\n### Variadic Tuple Types\n\nVariadic Tuple Types are a features introduces in TypeScript version 4.0, let\u2019s start to learn them by revise what is a tuple:\n\nA tuple type is an array which has a defined length, and were the type of each element is known:\n\n```typescript\ntype Student = [string, number];\nconst [name, age]: Student = ['Simone', 20];\n```\n\nThe term \"variadic\" means indefinite arity (accept a variable number of arguments).\n\nA variadic tuple is a tuple type which has all the property as before but the exact shape is not defined yet:\n\n```typescript\ntype Bar<T extends unknown[]> = [boolean, ...T, number];\n\ntype A = Bar<[boolean]>; // [boolean, boolean, number]\ntype B = Bar<['a', 'b']>; // [boolean, 'a', 'b', number]\ntype C = Bar<[]>; // [boolean, number]\n```\n\nIn the previous code we can see that the tuple shape is defined by the `T` generic passed in.\n\nVariadic tuples can accept multiple generics make them very flexible:\n\n```typescript\ntype Bar<T extends unknown[], G extends unknown[]> = [...T, boolean, ...G];\n\ntype A = Bar<[number], [string]>; // [number, boolean, string]\ntype B = Bar<['a', 'b'], [boolean]>; // [\"a\", \"b\", boolean, boolean]\n```\n\nWith the new variadic tuples we can use:\n\n* The spreads in tuple type syntax can now be generic, so we can represent higher-order operation on tuples and arrays even when we do not know the actual types we are operating over.\n* The rest elements can occur anywhere in a tuple.\n\nExample:\n\n```typescript\ntype Items = readonly unknown[];\n\nfunction concat<T extends Items, U extends Items>(\n    arr1: T,\n    arr2: U\n): [...T, ...U] {\n    return [...arr1, ...arr2];\n}\n\nconcat([1, 2, 3], ['4', '5', '6']); // [1, 2, 3, \"4\", \"5\", \"6\"]\n```\n\n### Boxed types\n\nBoxed types refer to the wrapper objects that are used to represent primitive types as objects. These wrapper objects provide additional functionality and methods that are not available directly on the primitive values.\n\nWhen you access a method like `charAt` or `normalize` on a `string` primitive, JavaScript wraps it in a `String` object, calls the method, and then throws the object away.\n\nDemonstration:\n\n```typescript\nconst originalNormalize = String.prototype.normalize;\nString.prototype.normalize = function () {\n    console.log(this, typeof this);\n    return originalNormalize.call(this);\n};\nconsole.log('\\u0041'.normalize());\n```\n\nTypeScript represents this differentiation by providing separate types for the primitives and their corresponding object wrappers:\n\n* string => String\n* number => Number\n* boolean => Boolean\n* symbol => Symbol\n* bigint => BigInt\n\nThe boxed types are usually not needed. Avoid using boxed types and instead use type for the primitives,  for instance `string` instead of `String`.\n\n### Covariance and Contravariance in TypeScript\n\nCovariance and Contravariance are used to describe how relationships work when dealing with inheritance or assignment of types.\n\nCovariance means that a type relationship preserves the direction of inheritance or assignment, so if a type A is a subtype of type B, then an array of type A is also considered a subtype of an array of type B. The important thing to note here is that the subtype relationship is maintained this means that Covariance accept subtype but doesn't accept supertype.\n\nContravariance means that a type relationship reverses the direction of inheritance or assignment, so if a type A is a subtype of type B, then an array of type B is considered a subtype of an array of type A. The subtype relationship is reversed this means that Contravariance accept supertype but doesn't accept subtype.\n\nNotes: Bivariance means accept both supertype & subtype.\n\nExample: Let's say we have a space for all animals and a separate space just for dogs.\n\nIn Covariance, you can put all the dogs in the animals space because dogs are a type of animal. But you cannot put all the animals in the dog space because there might be other animals mixed in.\n\nIn Contravariance, you cannot put all the animals in the dogs space because the animals space might contain other animals as well. However, you can put all the dogs in the animal space because all dogs are also animals.\n\n<!-- skip -->\n```typescript\n// Covariance example\nclass Animal {\n    name: string;\n    constructor(name: string) {\n        this.name = name;\n    }\n}\n\nclass Dog extends Animal {\n    breed: string;\n    constructor(name: string, breed: string) {\n        super(name);\n        this.breed = breed;\n    }\n}\n\nlet animals: Animal[] = [];\nlet dogs: Dog[] = [];\n\n// Covariance allows assigning subtype (Dog) array to supertype (Animal) array\nanimals = dogs;\ndogs = animals; // Invalid: Type 'Animal[]' is not assignable to type 'Dog[]'\n\n// Contravariance example\ntype Feed<in T> = (animal: T) => void;\n\nlet feedAnimal: Feed<Animal> = (animal: Animal) => {\n    console.log(`Animal name: ${animal.name}`);\n};\n\nlet feedDog: Feed<Dog> = (dog: Dog) => {\n    console.log(`Dog name: ${dog.name}, Breed: ${dog.breed}`);\n};\n\n// Contravariance allows assigning supertype (Animal) callback to subtype (Dog) callback\nfeedDog = feedAnimal;\nfeedAnimal = feedDog; // Invalid: Type 'Feed<Dog>' is not assignable to type 'Feed<Animal>'.\n```\n\nIn TypeScript, type relationships for arrays are covariant, while type relationships for function parameters are contravariant. This means that TypeScript exhibits both covariance and contravariance, depending on the context.\n\n#### Optional Variance Annotations for Type Parameters\n\nAs of TypeScript 4.7.0, we can use the `out` and `in` keywords to be specific about Variance annotation.\n\nFor Covariant, use the `out` keyword:\n\n```typescript\ntype AnimalCallback<out T> = () => T; // T is Covariant here\n```\n\nAnd for Contravariant, use the `in` keyword:\n\n```typescript\ntype AnimalCallback<in T> = (value: T) => void; // T is Contravariance here\n```\n\n### Template String Pattern Index Signatures\n\nTemplate string pattern index signatures allow us to define flexible index signatures using template string patterns. This feature enables us to create objects that can be indexed with specific patterns of string keys, providing more control and specificity when accessing and manipulating properties.\n\nTypeScript from version 4.4 allows index signatures for symbols and template string patterns.\n\n```typescript\nconst uniqueSymbol = Symbol('description');\n\ntype MyKeys = `key-${string}`;\n\ntype MyObject = {\n    [uniqueSymbol]: string;\n    [key: MyKeys]: number;\n};\n\nconst obj: MyObject = {\n    [uniqueSymbol]: 'Unique symbol key',\n    'key-a': 123,\n    'key-b': 456,\n};\n\nconsole.log(obj[uniqueSymbol]); // Unique symbol key\nconsole.log(obj['key-a']); // 123\nconsole.log(obj['key-b']); // 456\n```\n\n### The satisfies Operator\n\nThe `satisfies`  allows you to check if a given type satisfies a specific interface or condition. In other words, it ensures that a type has all the required properties and methods of a specific interface. It is a way to ensure a variable fits into a definition of a type\nHere is an example:\n\n<!-- skip -->\n```typescript\ntype Columns = 'name' | 'nickName' | 'attributes';\n\ntype User = Record<Columns, string | string[] | undefined>;\n\n// Type Annotation using `User`\nconst user: User = {\n    name: 'Simone',\n    nickName: undefined,\n    attributes: ['dev', 'admin'],\n};\n\n// In the following lines, TypeScript won't be able to infer properly\nuser.attributes?.map(console.log); // Property 'map' does not exist on type 'string | string[]'. Property 'map' does not exist on type 'string'.\nuser.nickName; // string | string[] | undefined\n\n// Type assertion using `as`\nconst user2 = {\n    name: 'Simon',\n    nickName: undefined,\n    attributes: ['dev', 'admin'],\n} as User;\n\n// Here too, TypeScript won't be able to infer properly\nuser2.attributes?.map(console.log); // Property 'map' does not exist on type 'string | string[]'. Property 'map' does not exist on type 'string'.\nuser2.nickName; // string | string[] | undefined\n\n// Using `satisfies` operators we can properly infer the types now\nconst user3 = {\n    name: 'Simon',\n    nickName: undefined,\n    attributes: ['dev', 'admin'],\n} satisfies User;\n\nuser3.attributes?.map(console.log); // TypeScript infers correctly: string[]\nuser3.nickName; // TypeScript infers correctly: undefined\n```\n\n### Type-Only Imports and Export\n\nType-Only Imports and Export allows you to import or export types without importing or exporting the values or functions associated with those types. This can be useful for reducing the size of your bundle.\n\nTo use type-only imports, you can use the `import type` keyword.\n\nTypeScript permits using both declaration and implementation file extensions (.ts, .mts, .cts, and .tsx) in type-only imports, regardless of `allowImportingTsExtensions` settings.\n\nFor example:\n\n<!-- skip -->\n```typescript\nimport type { House } from './house.ts';\n```\n\nThe following are supported forms:\n\n<!-- skip -->\n```typescript\nimport type T from './mod';\nimport type { A, B } from './mod';\nimport type * as Types from './mod';\nexport type { T };\nexport type { T } from './mod';\n```\n\n### using declaration and Explicit Resource Management\n\nA `using` declaration is a block-scoped, immutable binding, similar to `const`, used for managing disposable resources. When initialized with a value, the `Symbol.dispose` method of that value is recorded and subsequently executed upon exiting the enclosing block scope.\n\nThis is based on ECMAScript's Resource Management feature, which is useful for performing essential cleanup tasks after object creation, such as closing connections, deleting files, and releasing memory.\n\nNotes:\n\n* Due to its recent introduction in TypeScript version 5.2, most runtimes lack native support. You'll need polyfills for: `Symbol.dispose`, `Symbol.asyncDispose`, `DisposableStack`, `AsyncDisposableStack`, `SuppressedError`.\n* Additionally, you will need to configure your tsconfig.json as follows:\n\n```json\n{\n    \"compilerOptions\": {\n        \"target\": \"es2022\",\n        \"lib\": [\"es2022\", \"esnext.disposable\", \"dom\"]\n    }\n}\n```\n\nExample:\n\n<!-- skip -->\n```typescript\n//@ts-ignore\nSymbol.dispose ??= Symbol('Symbol.dispose'); // Simple polify\n\nconst doWork = (): Disposable => {\n    return {\n        [Symbol.dispose]: () => {\n            console.log('disposed');\n        },\n    };\n};\n\nconsole.log(1);\n\n{\n    using work = doWork(); // Resource is declared\n    console.log(2);\n} // Resource is disposed (e.g., `work[Symbol.dispose]()` is evaluated)\n\nconsole.log(3);\n```\n\nThe code will log:\n\n```shell\n1\n2\ndisposed\n3\n```\n\nA resource eligible for disposal must adhere to the `Disposable` interface:\n\n```typescript\n// lib.esnext.disposable.d.ts\ninterface Disposable {\n    [Symbol.dispose](): void;\n}\n```\n\nThe `using` declarations record resource disposal operations in a stack, ensuring they are disposed in reverse order of declaration:\n\n<!-- skip -->\n```typescript\n{\n    using j = getA(),\n        y = getB();\n    using k = getC();\n} // disposes `C`, then `B`, then `A`.\n```\n\nResources are guaranteed to be disposed, even if subsequent code or exceptions occur. This may lead to disposal potentially throwing an exception, possibly suppressing another. To retain information on suppressed errors, a new native exception, `SuppressedError`, is introduced.\n\n#### await using declaration\n\nAn `await using` declaration handles an asynchronously disposable resource. The value must have a `Symbol.asyncDispose` method, which will be awaited at the block's end.\n\n<!-- skip -->\n```typescript\nasync function doWorkAsync() {\n    await using work = doWorkAsync(); // Resource is declared\n} // Resource is disposed (e.g., `await work[Symbol.asyncDispose]()` is evaluated)\n```\n\nFor an asynchronously disposable resource, it must adhere to either the `Disposable` or `AsyncDisposable` interface:\n\n```typescript\n// lib.esnext.disposable.d.ts\ninterface AsyncDisposable {\n    [Symbol.asyncDispose](): Promise<void>;\n}\n```\n\n<!-- skip -->\n```typescript\n//@ts-ignore\nSymbol.asyncDispose ??= Symbol('Symbol.asyncDispose'); // Simple polify\n\nclass DatabaseConnection implements AsyncDisposable {\n    // A method that is called when the object is disposed asynchronously\n    [Symbol.asyncDispose]() {\n        // Close the connection and return a promise\n        return this.close();\n    }\n\n    async close() {\n        console.log('Closing the connection...');\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        console.log('Connection closed.');\n    }\n}\n\nasync function doWork() {\n    // Create a new connection and dispose it asynchronously when it goes out of scope\n    await using connection = new DatabaseConnection(); //  Resource is declared\n    console.log('Doing some work...');\n} // Resource is disposed (e.g., `await connection[Symbol.asyncDispose]()` is evaluated)\n\ndoWork();\n```\n\nThe code logs:\n\n```shell\nDoing some work...\nClosing the connection...\nConnection closed.\n```\n\nThe `using` and `await using` declarations are allowed in Statements: `for`, `for-in`, `for-of`, `for-await-of`, `switch`.\n\n### Import Attributes\n\nTypeScript 5.3's Import Attributes (labels for imports) tell the runtime how to handle modules (JSON, etc.). This improves security by ensuring clear imports and aligns with Content Security Policy (CSP) for safer resource loading. TypeScript ensures they are valid but lets the runtime handle their interpretation for specific module handling.\n\nExample:\n\n<!-- skip -->\n```typescript\nimport config from './config.json' with { type: 'json' };\n```\n\nwith dynamic import:\n\n<!-- skip -->\n```typescript\nconst config = import('./config.json', { with: { type: 'json' } });\n```\n",
        "releases": []
    }
}