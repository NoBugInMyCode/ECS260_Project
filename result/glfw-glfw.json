{
    "https://api.github.com/repos/glfw/glfw": {
        "forks": 5365,
        "watchers": 13367,
        "stars": 13367,
        "languages": {
            "C": 1789816,
            "Objective-C": 165958,
            "CMake": 28962
        },
        "commits": [
            "2025-01-12T18:29:05Z",
            "2024-07-25T07:17:43Z",
            "2023-12-10T12:54:11Z",
            "2024-05-10T15:05:49Z",
            "2024-05-10T13:15:12Z",
            "2024-05-09T15:18:39Z",
            "2024-04-12T16:25:19Z",
            "2024-04-08T16:50:08Z",
            "2024-04-08T16:50:08Z",
            "2024-04-07T18:03:37Z",
            "2024-04-07T17:39:52Z",
            "2024-04-07T17:26:01Z",
            "2024-03-25T20:02:10Z",
            "2024-03-25T20:00:08Z",
            "2024-02-29T15:51:41Z",
            "2024-01-18T20:33:27Z",
            "2024-03-10T15:18:08Z",
            "2024-03-11T13:29:07Z",
            "2024-03-11T10:33:51Z",
            "2024-03-08T14:22:36Z",
            "2024-02-29T15:50:50Z",
            "2024-02-29T14:39:21Z",
            "2024-02-29T14:28:46Z",
            "2024-02-22T21:22:47Z",
            "2024-02-22T21:32:03Z",
            "2024-02-18T14:22:24Z",
            "2024-02-22T19:20:50Z",
            "2024-02-21T14:37:15Z",
            "2024-02-21T14:34:36Z",
            "2024-02-20T23:38:33Z"
        ],
        "creation_date": "2013-04-18T15:24:53Z",
        "contributors": 30,
        "topics": [
            "c",
            "linux",
            "macos",
            "opengl",
            "opengl-es",
            "unix",
            "vulkan",
            "windows"
        ],
        "subscribers": 383,
        "readme": "# GLFW\n\n[![Build status](https://github.com/glfw/glfw/actions/workflows/build.yml/badge.svg)](https://github.com/glfw/glfw/actions)\n[![Build status](https://ci.appveyor.com/api/projects/status/0kf0ct9831i5l6sp/branch/master?svg=true)](https://ci.appveyor.com/project/elmindreda/glfw)\n\n## Introduction\n\nGLFW is an Open Source, multi-platform library for OpenGL, OpenGL ES and Vulkan\napplication development.  It provides a simple, platform-independent API for\ncreating windows, contexts and surfaces, reading input, handling events, etc.\n\nGLFW natively supports Windows, macOS and Linux and other Unix-like systems.  On\nLinux both Wayland and X11 are supported.\n\nGLFW is licensed under the [zlib/libpng\nlicense](https://www.glfw.org/license.html).\n\nYou can [download](https://www.glfw.org/download.html) the latest stable release\nas source or Windows binaries.  Each release starting with 3.0 also has\na corresponding [annotated tag](https://github.com/glfw/glfw/releases) with\nsource and binary archives.\n\nThe [documentation](https://www.glfw.org/docs/latest/) is available online and is\nincluded in all source and binary archives.  See the [release\nnotes](https://www.glfw.org/docs/latest/news.html) for new features, caveats and\ndeprecations in the latest release.  For more details see the [version\nhistory](https://www.glfw.org/changelog.html).\n\nThe `master` branch is the stable integration branch and _should_ always compile\nand run on all supported platforms, although details of newly added features may\nchange until they have been included in a release.  New features and many bug\nfixes live in [other branches](https://github.com/glfw/glfw/branches/all) until\nthey are stable enough to merge.\n\nIf you are new to GLFW, you may find the\n[tutorial](https://www.glfw.org/docs/latest/quick.html) for GLFW 3 useful.  If\nyou have used GLFW 2 in the past, there is a [transition\nguide](https://www.glfw.org/docs/latest/moving.html) for moving to the GLFW\n3 API.\n\nGLFW exists because of the contributions of [many people](CONTRIBUTORS.md)\naround the world, whether by reporting bugs, providing community support, adding\nfeatures, reviewing or testing code, debugging, proofreading docs, suggesting\nfeatures or fixing bugs.\n\n\n## Compiling GLFW\n\nGLFW is written primarily in C99, with parts of macOS support being written in\nObjective-C.  GLFW itself requires only the headers and libraries for your OS\nand window system.  It does not need any additional headers for context creation\nAPIs (WGL, GLX, EGL, NSGL, OSMesa) or rendering APIs (OpenGL, OpenGL ES, Vulkan)\nto enable support for them.\n\nGLFW supports compilation on Windows with Visual C++ 2013 and later, MinGW and\nMinGW-w64, on macOS with Clang and on Linux and other Unix-like systems with GCC\nand Clang.  It will likely compile in other environments as well, but this is\nnot regularly tested.\n\nThere are [pre-compiled binaries](https://www.glfw.org/download.html) available\nfor all supported compilers on Windows and macOS.\n\nSee the [compilation guide](https://www.glfw.org/docs/latest/compile.html) for\nmore information about how to compile GLFW yourself.\n\n\n## Using GLFW\n\nSee the [documentation](https://www.glfw.org/docs/latest/) for tutorials, guides\nand the API reference.\n\n\n## Contributing to GLFW\n\nSee the [contribution\nguide](https://github.com/glfw/glfw/blob/master/docs/CONTRIBUTING.md) for\nmore information.\n\n\n## System requirements\n\nGLFW supports Windows XP and later and macOS 10.11 and later.  Linux and other\nUnix-like systems running the X Window System are supported even without\na desktop environment or modern extensions, although some features require\na running window or clipboard manager.  The OSMesa backend requires Mesa 6.3.\n\nSee the [compatibility guide](https://www.glfw.org/docs/latest/compat.html)\nin the documentation for more information.\n\n\n## Dependencies\n\nGLFW itself needs only CMake 3.16 or later and the headers and libraries for your\nOS and window system.\n\nThe examples and test programs depend on a number of tiny libraries.  These are\nlocated in the `deps/` directory.\n\n - [getopt\\_port](https://github.com/kimgr/getopt_port/) for examples\n   with command-line options\n - [TinyCThread](https://github.com/tinycthread/tinycthread) for threaded\n   examples\n - [glad2](https://github.com/Dav1dde/glad) for loading OpenGL and Vulkan\n   functions\n - [linmath.h](https://github.com/datenwolf/linmath.h) for linear algebra in\n   examples\n - [Nuklear](https://github.com/Immediate-Mode-UI/Nuklear) for test and example UI\n - [stb\\_image\\_write](https://github.com/nothings/stb) for writing images to disk\n\nThe documentation is generated with [Doxygen](https://doxygen.org/) if CMake can\nfind that tool.\n\n\n## Reporting bugs\n\nBugs are reported to our [issue tracker](https://github.com/glfw/glfw/issues).\nPlease check the [contribution\nguide](https://github.com/glfw/glfw/blob/master/docs/CONTRIBUTING.md) for\ninformation on what to include when reporting a bug.\n\n\n## Changelog since 3.4\n\n - Added `GLFW_UNLIMITED_MOUSE_BUTTONS` input mode that allows mouse buttons beyond\n   the limit of the mouse button tokens to be reported (#2423)\n - Updated minimum CMake version to 3.16 (#2541)\n - [Cocoa] Added `QuartzCore` framework as link-time dependency\n - [Cocoa] Removed support for OS X 10.10 Yosemite and earlier (#2506)\n - [Wayland] Bugfix: The fractional scaling related objects were not destroyed\n - [Wayland] Bugfix: `glfwInit` would segfault on compositor with no seat (#2517)\n - [Wayland] Bugfix: A drag entering a non-GLFW surface could cause a segfault\n - [X11] Bugfix: Running without a WM could trigger an assert (#2593,#2601,#2631)\n - [Null] Added Vulkan 'window' surface creation via `VK_EXT_headless_surface`\n - [Null] Added EGL context creation on Mesa via `EGL_MESA_platform_surfaceless`\n - [EGL] Allowed native access on Wayland with `GLFW_CONTEXT_CREATION_API` set to\n   `GLFW_NATIVE_CONTEXT_API` (#2518)\n\n\n## Contact\n\nOn [glfw.org](https://www.glfw.org/) you can find the latest version of GLFW, as\nwell as news, documentation and other information about the project.\n\nIf you have questions related to the use of GLFW, we have a\n[forum](https://discourse.glfw.org/).\n\nIf you have a bug to report, a patch to submit or a feature you'd like to\nrequest, please file it in the\n[issue tracker](https://github.com/glfw/glfw/issues) on GitHub.\n\nFinally, if you're interested in helping out with the development of GLFW or\nporting it to your favorite platform, join us on the forum or GitHub.\n\n",
        "releases": [
            {
                "name": "3.4",
                "date": "2024-02-23T15:35:20Z"
            },
            {
                "name": "3.3.10",
                "date": "2024-02-21T21:23:34Z"
            },
            {
                "name": "3.3.9",
                "date": "2023-12-14T00:42:43Z"
            },
            {
                "name": "3.3.8",
                "date": "2022-07-22T13:50:50Z"
            },
            {
                "name": "3.3.7",
                "date": "2022-04-05T17:24:46Z"
            },
            {
                "name": "3.3.6",
                "date": "2021-12-09T22:27:23Z"
            },
            {
                "name": "3.3.5",
                "date": "2021-10-28T17:48:44Z"
            },
            {
                "name": "3.3.4",
                "date": "2021-04-08T17:55:06Z"
            },
            {
                "name": "3.3.3",
                "date": "2021-02-23T19:56:32Z"
            },
            {
                "name": "3.3.2",
                "date": "2020-01-20T01:17:16Z"
            },
            {
                "name": "3.3.1",
                "date": "2020-01-01T20:12:03Z"
            },
            {
                "name": "3.3",
                "date": "2019-04-16T00:37:49Z"
            },
            {
                "name": "3.2.1",
                "date": "2016-08-18T14:02:55Z"
            },
            {
                "name": "3.2",
                "date": "2016-06-02T15:22:57Z"
            },
            {
                "name": "3.1.2",
                "date": "2015-10-12T19:29:51Z"
            },
            {
                "name": "3.1.1",
                "date": "2015-03-19T21:50:24Z"
            },
            {
                "name": "3.1",
                "date": "2015-03-10T10:15:27Z"
            },
            {
                "name": "3.0.4",
                "date": "2016-08-07T12:45:38Z"
            },
            {
                "name": "3.0.3",
                "date": "2016-08-07T12:47:01Z"
            },
            {
                "name": "3.0.2",
                "date": "2016-08-07T12:48:43Z"
            },
            {
                "name": "3.0.1",
                "date": "2016-08-07T12:49:39Z"
            },
            {
                "name": "3.0",
                "date": "2016-08-07T12:50:45Z"
            }
        ]
    }
}