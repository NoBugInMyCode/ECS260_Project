{
    "https://api.github.com/repos/reduxjs/reselect": {
        "forks": 674,
        "watchers": 19053,
        "stars": 19053,
        "languages": {
            "TypeScript": 486682,
            "MDX": 113761,
            "CSS": 6919,
            "JavaScript": 1608
        },
        "commits": [
            "2024-09-12T10:33:13Z",
            "2024-09-12T06:39:58Z",
            "2024-09-12T06:37:30Z",
            "2024-08-11T15:22:51Z",
            "2024-08-11T15:19:18Z",
            "2024-08-11T15:07:09Z",
            "2024-08-06T09:18:54Z",
            "2024-08-06T07:45:43Z",
            "2024-08-06T06:55:15Z",
            "2024-07-23T09:14:10Z",
            "2024-07-22T14:46:42Z",
            "2024-07-20T06:51:28Z",
            "2024-07-17T20:37:04Z",
            "2024-06-25T01:16:21Z",
            "2024-06-25T00:02:53Z",
            "2024-06-21T10:22:53Z",
            "2024-06-19T21:20:45Z",
            "2024-06-19T20:02:46Z",
            "2024-06-19T14:21:26Z",
            "2024-06-19T14:16:39Z",
            "2024-06-19T14:12:04Z",
            "2024-06-04T02:43:06Z",
            "2024-06-04T02:41:23Z",
            "2024-06-03T23:21:16Z",
            "2024-06-01T22:41:42Z",
            "2024-06-01T22:17:00Z",
            "2024-06-01T21:55:35Z",
            "2024-06-01T21:53:00Z",
            "2024-05-31T23:49:09Z",
            "2024-05-31T21:23:13Z"
        ],
        "creation_date": "2015-07-01T11:06:45Z",
        "contributors": 30,
        "topics": [
            "memoized-selectors",
            "redux"
        ],
        "subscribers": 164,
        "readme": "# Reselect\n\n[![npm package][npm-badge]][npm][![Coveralls][coveralls-badge]][coveralls][![GitHub Workflow Status][build-badge]][build]![TypeScript][typescript-badge]\n\nA library for creating memoized \"selector\" functions. Commonly used with Redux, but usable with any plain JS immutable data as well.\n\n- Selectors can compute derived data, allowing [Redux] to store the minimal possible state.\n- Selectors are efficient. A selector is not recomputed unless one of its arguments changes.\n- Selectors are composable. They can be used as input to other selectors.\n\nThe **Redux docs usage page on [Deriving Data with Selectors](https://redux.js.org/usage/deriving-data-selectors)** covers the purpose and motivation for selectors, why memoized selectors are useful, typical Reselect usage patterns, and using selectors with [React-Redux].\n\n## Installation\n\n### Redux Toolkit\n\nWhile Reselect is not exclusive to [Redux], it is already included by default in [the official Redux Toolkit package](https://redux-toolkit.js.org) - no further installation needed.\n\n```ts\nimport { createSelector } from '@reduxjs/toolkit'\n```\n\n### Standalone\n\nFor standalone usage, install the `reselect` package:\n\n```bash\n# NPM\nnpm install reselect\n\n# Yarn\nyarn add reselect\n```\n\n---\n\n## Documentation\n\nThe Reselect docs are available at **https://reselect.js.org**, and include usage guides and API references:\n\n- [**Introduction**](#https://reselect.js.org/introduction/getting-started)\n- [**How Does Reselect Work?**](#https://reselect.js.org/introduction/how-does-reselect-work)\n- **API Reference**:\n  - **[`createSelector`]**\n  - **[`createSelectorCreator`]**\n  - **[`createStructuredSelector`]**\n  - [**Development-Only Stability Checks**](#https://reselect.js.org/api/development-only-stability-checks)\n  - **[`lruMemoize`]**\n  - **[`weakMapMemoize`]**\n- [**FAQ**](#https://reselect.js.org/FAQ)\n\n## Basic Usage\n\nReselect exports a [`createSelector`] API, which generates memoized selector functions. [`createSelector`] accepts one or more [input selectors], which extract values from arguments, and a [result function] function that receives the extracted values and should return a derived value. If the generated [output selector] is called multiple times, the output will only be recalculated when the extracted values have changed.\n\nYou can play around with the following **example** in [this CodeSandbox](https://codesandbox.io/s/reselect-example-g3k9gf?file=/src/index.js):\n\n```ts\nimport { createSelector } from 'reselect'\n\ninterface RootState {\n  todos: { id: number; completed: boolean }[]\n  alerts: { id: number; read: boolean }[]\n}\n\nconst state: RootState = {\n  todos: [\n    { id: 0, completed: false },\n    { id: 1, completed: true }\n  ],\n  alerts: [\n    { id: 0, read: false },\n    { id: 1, read: true }\n  ]\n}\n\nconst selectCompletedTodos = (state: RootState) => {\n  console.log('selector ran')\n  return state.todos.filter(todo => todo.completed === true)\n}\n\nselectCompletedTodos(state) // selector ran\nselectCompletedTodos(state) // selector ran\nselectCompletedTodos(state) // selector ran\n\nconst memoizedSelectCompletedTodos = createSelector(\n  [(state: RootState) => state.todos],\n  todos => {\n    console.log('memoized selector ran')\n    return todos.filter(todo => todo.completed === true)\n  }\n)\n\nmemoizedSelectCompletedTodos(state) // memoized selector ran\nmemoizedSelectCompletedTodos(state)\nmemoizedSelectCompletedTodos(state)\n\nconsole.log(selectCompletedTodos(state) === selectCompletedTodos(state)) //=> false\n\nconsole.log(\n  memoizedSelectCompletedTodos(state) === memoizedSelectCompletedTodos(state)\n) //=> true\n```\n\nAs you can see from the example above, `memoizedSelectCompletedTodos` does not run the second or third time, but we still get the same return value as last time.\n\nIn addition to skipping unnecessary recalculations, `memoizedSelectCompletedTodos` returns the existing result reference if there is no recalculation. This is important for libraries like [React-Redux] or [React] that often rely on reference equality checks to optimize UI updates.\n\n---\n\n## Terminology\n\n- <a name=\"selector-function\"></a>[**Selector Function**](#selector-function): A function that accepts one or more JavaScript values as arguments, and derives a result. When used with [Redux], the first argument is typically the entire Redux store state.\n- <a name=\"input-selectors\"></a>[**input selectors**](#input-selectors): Basic selector functions used as building blocks for creating a memoized selector. They are passed as the first argument(s) to [`createSelector`], and are called with all selector arguments. They are responsible for extracting and providing necessary values to the [result function].\n- <a name=\"output-selector\"></a>[**Output Selector**](#output-selector): The actual memoized selectors created by [`createSelector`].\n- <a name=\"result-function\"></a>[**Result Function**](#result-function): The function that comes after the [input selectors]. It takes the [input selectors]' return values as arguments and returns a result.\n- <a name=\"dependencies\"></a>[**`Dependencies`**](#dependencies): Same as [input selectors]. They are what the [output selector] \"depends\" on.\n\nThe below example serves as a visual aid:\n\n```ts\nconst outputSelector = createSelector(\n  [inputSelector1, inputSelector2, inputSelector3], // synonymous with `dependencies`.\n  resultFunc // Result function\n)\n```\n\n---\n\n## What's New in 5.0.0?\n\nVersion 5.0.0 introduces several new features and improvements:\n\n- **Customization Enhancements**:\n\n  - Added the ability to pass an options object to [`createSelectorCreator`], allowing for customized `memoize` and `argsMemoize` functions, alongside their respective options (`memoizeOptions` and `argsMemoizeOptions`).\n  - The [`createSelector`] function now supports direct customization of `memoize` and `argsMemoize` within its options object.\n\n- **Memoization Functions**:\n\n  - Introduced new experimental memoization functions: `weakMapMemoize` and `unstable_autotrackMemoize`.\n  - Incorporated `memoize` and `argsMemoize` into the [output selector fields] for debugging purposes.\n\n- **TypeScript Support and Performance**:\n\n  - Discontinued support for TypeScript versions below 4.7, aligning with modern TypeScript features.\n  - Significantly improved TypeScript performance for nesting [output selectors][output selector]. The nesting limit has increased from approximately 8 to around 30 [output selectors][output selector], greatly reducing the occurrence of the infamous `Type instantiation is excessively deep and possibly infinite` error.\n\n- **Selector API Enhancements**:\n\n  - Removed the second overload of `createStructuredSelector` due to its susceptibility to runtime errors.\n\n- **Additional Functionalities**:\n\n  - Added `dependencyRecomputations` and `resetDependencyRecomputations` to the [output selector fields]. These additions provide greater control and insight over [input selectors], complementing the new `argsMemoize` API.\n  - Introduced `inputStabilityCheck`, a development tool that runs the [input selectors] twice using the same arguments and triggers a warning If they return differing results for the same call.\n  - Introduced `identityFunctionCheck`, a development tool that checks to see if the [result function] returns its own input.\n\nThese updates aim to enhance flexibility, performance, and developer experience. For detailed usage and examples, refer to the updated documentation sections for each feature.\n\n- **Breaking Changes**:\n\n  - Removed `ParametricSelector` and `OutputParametricSelector` types. Their functionalities are now integrated into `Selector` and `OutputSelector` respectively, which inherently support additional parameters.\n\n<div align=\"right\">[ <a href=\"installation\">\u2191 Back to top \u2191</a> ]</div>\n\n---\n\n## License\n\nMIT\n\n## References\n\n<details><summary><b>Click to Expand</b></summary>\n\nOriginally inspired by getters in [NuclearJS](https://github.com/optimizely/nuclear-js.git), [subscriptions](https://github.com/Day8/re-frame#just-a-read-only-cursor) in [re-frame](https://github.com/Day8/re-frame) and this [proposal](https://github.com/reduxjs/redux/pull/169) from [speedskater](https://github.com/speedskater).\n\n[typescript-badge]: https://img.shields.io/badge/TypeScript-v4%2E7%2B-007ACC?style=for-the-badge&logo=TypeScript&logoColor=black&labelColor=blue&color=gray\n[build-badge]: https://img.shields.io/github/actions/workflow/status/reduxjs/reselect/build-and-test-types.yml?branch=master&style=for-the-badge\n[build]: https://github.com/reduxjs/reselect/actions/workflows/build-and-test-types.yml\n[npm-badge]: https://img.shields.io/npm/v/reselect.svg?style=for-the-badge\n[npm]: https://www.npmjs.org/package/reselect\n[coveralls-badge]: https://img.shields.io/coveralls/reduxjs/reselect/master.svg?style=for-the-badge\n[coveralls]: https://coveralls.io/github/reduxjs/reselect\n\n<!-- External Links -->\n\n[Redux]: https://redux.js.org 'Redux'\n[React]: https://react.dev 'React'\n[React-Redux]: https://react-redux.js.org 'React-Redux'\n\n<!-- Internal Links -->\n\n[selector]: #selector-function 'Selector Function'\n[input selectors]: #input-selectors 'Input Selectors'\n[output selector]: #output-selector 'Output Selector'\n[result function]: #result-function 'Result Function'\n[output selector fields]: https://reselect.js.org/api/createSelector#output-selector-fields 'Output Selector Fields'\n[`createSelector`]: https://reselect.js.org/api/createSelector 'createSelector'\n[`createSelectorCreator`]: https://reselect.js.org/api/createSelectorCreator 'createSelectorCreator'\n[`lruMemoize`]: https://reselect.js.org/api/lruMemoize 'lruMemoize'\n[`weakMapMemoize`]: https://reselect.js.org/api/weakMapMemoize 'weakMapMemoize'\n[`createStructuredSelector`]: https://reselect.js.org/api/createStructuredSelector 'createStructuredSelector'\n\n</details>\n",
        "releases": [
            {
                "name": "v5.1.1",
                "date": "2024-06-01T22:22:52Z"
            },
            {
                "name": "v5.1.0",
                "date": "2024-01-05T12:01:02Z"
            },
            {
                "name": "v5.0.0",
                "date": "2023-12-04T14:00:53Z"
            },
            {
                "name": "v5.0.0-rc.1",
                "date": "2023-12-02T03:59:34Z"
            },
            {
                "name": "v5.0.0-rc.0",
                "date": "2023-12-01T04:39:50Z"
            },
            {
                "name": "v5.0.0-beta.1",
                "date": "2023-11-17T03:55:20Z"
            },
            {
                "name": "v5.0.0-beta.0",
                "date": "2023-10-28T21:06:44Z"
            },
            {
                "name": "v5.0.0-alpha.2",
                "date": "2023-05-14T22:49:13Z"
            },
            {
                "name": "v5.0.0-alpha.1",
                "date": "2023-05-10T04:10:02Z"
            },
            {
                "name": "v5.0.0-alpha.0",
                "date": "2023-05-10T02:35:57Z"
            },
            {
                "name": "v4.1.8",
                "date": "2023-04-16T20:34:20Z"
            },
            {
                "name": "v4.1.7",
                "date": "2022-11-04T01:48:20Z"
            },
            {
                "name": "v4.1.6",
                "date": "2022-06-07T00:10:09Z"
            },
            {
                "name": "v4.1.5",
                "date": "2021-11-24T21:28:49Z"
            },
            {
                "name": "v4.1.4",
                "date": "2021-11-17T04:49:03Z"
            },
            {
                "name": "v4.1.3",
                "date": "2021-11-16T03:07:18Z"
            },
            {
                "name": "v4.1.2",
                "date": "2021-11-04T01:59:24Z"
            },
            {
                "name": "v4.1.1",
                "date": "2021-10-26T23:59:55Z"
            },
            {
                "name": "v4.1.0",
                "date": "2021-10-26T02:29:42Z"
            },
            {
                "name": "v4.1.0-beta.2",
                "date": "2021-10-24T18:27:48Z"
            },
            {
                "name": "v4.1.0-beta.1",
                "date": "2021-10-21T03:21:41Z"
            },
            {
                "name": "4.1.0-beta.0",
                "date": "2021-10-21T02:27:31Z"
            },
            {
                "name": "v4.1.0-alpha.2",
                "date": "2021-10-20T03:17:44Z"
            },
            {
                "name": "v4.1.0-alpha.1",
                "date": "2021-10-17T22:03:46Z"
            },
            {
                "name": "v4.1.0-alpha.0",
                "date": "2021-10-16T22:52:54Z"
            },
            {
                "name": "v4.0.0",
                "date": "2018-09-30T11:50:27Z"
            },
            {
                "name": "Bug fix",
                "date": "2017-05-10T21:57:02Z"
            },
            {
                "name": "v3.0.0",
                "date": "2017-03-24T20:32:47Z"
            },
            {
                "name": "v3.0.0-rc",
                "date": "2017-03-15T18:37:59Z"
            },
            {
                "name": "v2.5.4",
                "date": "2016-09-17T09:28:19Z"
            },
            {
                "name": "v2.5.3",
                "date": "2016-07-04T11:33:09Z"
            },
            {
                "name": "v2.5.2",
                "date": "2016-07-03T14:32:51Z"
            },
            {
                "name": "v2.5.1",
                "date": "2016-04-21T13:02:39Z"
            },
            {
                "name": "v2.5.0",
                "date": "2016-04-21T12:23:45Z"
            },
            {
                "name": "v2.4.0",
                "date": "2016-04-16T22:24:11Z"
            },
            {
                "name": "v2.3.0",
                "date": "2016-04-07T17:59:31Z"
            },
            {
                "name": "v2.2.1",
                "date": "2016-03-15T04:31:42Z"
            },
            {
                "name": "v2.2.0",
                "date": "2016-03-15T04:08:47Z"
            },
            {
                "name": "v2.1.0",
                "date": "2016-03-03T20:08:15Z"
            },
            {
                "name": "v2.0.3",
                "date": "2016-02-01T20:25:51Z"
            },
            {
                "name": "v2.0.2",
                "date": "2016-01-14T21:19:30Z"
            },
            {
                "name": "v2.0.1",
                "date": "2015-11-08T09:53:58Z"
            },
            {
                "name": "v2.0.0",
                "date": "2015-10-02T12:50:59Z"
            },
            {
                "name": "",
                "date": "2015-09-16T16:10:57Z"
            },
            {
                "name": "v1.0.0",
                "date": "2015-09-09T20:21:50Z"
            },
            {
                "name": "",
                "date": "2015-09-03T20:17:59Z"
            },
            {
                "name": "v1.0.0-alpha",
                "date": "2015-09-01T20:51:15Z"
            }
        ]
    }
}