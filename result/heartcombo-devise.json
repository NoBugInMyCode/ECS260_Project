{
    "https://api.github.com/repos/heartcombo/devise": {
        "forks": 5545,
        "watchers": 24058,
        "stars": 24058,
        "languages": {
            "Ruby": 588394,
            "HTML": 17010
        },
        "commits": [
            "2024-11-29T13:15:22Z",
            "2024-11-29T12:56:24Z",
            "2024-11-25T14:47:44Z",
            "2024-11-25T14:38:47Z",
            "2024-11-25T12:57:51Z",
            "2024-11-17T11:10:30Z",
            "2024-11-25T07:37:25Z",
            "2024-11-25T02:28:09Z",
            "2024-11-24T15:27:27Z",
            "2024-11-15T19:16:25Z",
            "2024-11-08T16:40:12Z",
            "2024-11-08T16:13:05Z",
            "2024-10-22T18:49:08Z",
            "2024-10-22T18:45:41Z",
            "2024-10-22T18:33:18Z",
            "2024-10-06T14:14:48Z",
            "2024-08-18T09:20:19Z",
            "2024-08-16T09:21:28Z",
            "2024-08-17T09:58:10Z",
            "2024-08-17T08:24:22Z",
            "2024-04-10T12:45:08Z",
            "2024-04-10T12:43:27Z",
            "2024-04-09T19:58:24Z",
            "2024-04-09T17:20:06Z",
            "2024-01-02T12:19:00Z",
            "2024-02-13T12:22:46Z",
            "2023-10-20T10:05:16Z",
            "2023-10-13T14:56:48Z",
            "2023-10-13T14:54:36Z",
            "2023-10-13T14:23:18Z"
        ],
        "creation_date": "2009-09-16T12:15:12Z",
        "contributors": 30,
        "topics": [
            "authentication",
            "devise",
            "rails",
            "ruby"
        ],
        "subscribers": 454,
        "readme": "![Devise Logo](https://raw.github.com/heartcombo/devise/main/devise.png)\n\nDevise is a flexible authentication solution for Rails based on Warden. It:\n\n* Is Rack based;\n* Is a complete MVC solution based on Rails engines;\n* Allows you to have multiple models signed in at the same time;\n* Is based on a modularity concept: use only what you really need.\n\nIt's composed of 10 modules:\n\n* [Database Authenticatable](http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/DatabaseAuthenticatable): hashes and stores a password in the database to validate the authenticity of a user while signing in. The authentication can be done both through POST requests or HTTP Basic Authentication.\n* [Omniauthable](http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Omniauthable): adds OmniAuth (https://github.com/omniauth/omniauth) support.\n* [Confirmable](http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Confirmable): sends emails with confirmation instructions and verifies whether an account is already confirmed during sign in.\n* [Recoverable](http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Recoverable): resets the user password and sends reset instructions.\n* [Registerable](http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Registerable): handles signing up users through a registration process, also allowing them to edit and destroy their account.\n* [Rememberable](http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Rememberable): manages generating and clearing a token for remembering the user from a saved cookie.\n* [Trackable](http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Trackable): tracks sign in count, timestamps and IP address.\n* [Timeoutable](http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Timeoutable): expires sessions that have not been active in a specified period of time.\n* [Validatable](http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Validatable): provides validations of email and password. It's optional and can be customized, so you're able to define your own validations.\n* [Lockable](http://www.rubydoc.info/github/heartcombo/devise/main/Devise/Models/Lockable): locks an account after a specified number of failed sign-in attempts. Can unlock via email or after a specified time period.\n\n## Table of Contents\n\n<!-- TOC depthFrom:1 depthTo:6 withLinks:1 orderedList:0 -->\n\n- [Information](#information)\n\t- [The Devise wiki](#the-devise-wiki)\n\t- [Bug reports](#bug-reports)\n\t- [StackOverflow and Mailing List](#stackoverflow-and-mailing-list)\n\t- [RDocs](#rdocs)\n\t- [Example applications](#example-applications)\n\t- [Extensions](#extensions)\n\t- [Contributing](#contributing)\n- [Starting with Rails?](#starting-with-rails)\n- [Getting started](#getting-started)\n\t- [Controller filters and helpers](#controller-filters-and-helpers)\n\t- [Configuring Models](#configuring-models)\n\t- [Strong Parameters](#strong-parameters)\n\t- [Configuring views](#configuring-views)\n\t- [Configuring controllers](#configuring-controllers)\n\t- [Configuring routes](#configuring-routes)\n\t- [I18n](#i18n)\n\t- [Test helpers](#test-helpers)\n\t- [Controller tests](#controller-tests)\n\t- [Integration tests](#integration-tests)\n\t- [OmniAuth](#omniauth)\n\t- [Configuring multiple models](#configuring-multiple-models)\n\t- [Active Job Integration](#active-job-integration)\n\t- [Password reset tokens and Rails logs](#password-reset-tokens-and-rails-logs)\n\t- [Other ORMs](#other-orms)\n\t- [Rails API mode](#rails-api-mode)\n- [Additional information](#additional-information)\n\t- [Warden](#warden)\n\t- [Contributors](#contributors)\n- [License](#license)\n\n<!-- /TOC -->\n\n\n\n## Information\n\n### The Devise wiki\n\nThe Devise Wiki has lots of additional information about Devise including many \"how-to\" articles and answers to the most frequently asked questions. Please browse the Wiki after finishing this README:\n\nhttps://github.com/heartcombo/devise/wiki\n\n### Bug reports\n\nIf you discover a problem with Devise, we would like to know about it. However, we ask that you please review these guidelines before submitting a bug report:\n\nhttps://github.com/heartcombo/devise/wiki/Bug-reports\n\nIf you have discovered a security related bug, please do *NOT* use the GitHub issue tracker. Send an email to heartcombo@googlegroups.com.\n\n### StackOverflow and Mailing List\n\nIf you have any questions, comments, or concerns, please use StackOverflow instead of the GitHub issue tracker:\n\nhttp://stackoverflow.com/questions/tagged/devise\n\nThe deprecated mailing list can still be read on\n\nhttps://groups.google.com/group/plataformatec-devise\n\n### RDocs\n\nYou can view the Devise documentation in RDoc format here:\n\nhttp://rubydoc.info/github/heartcombo/devise/main/frames\n\nIf you need to use Devise with previous versions of Rails, you can always run \"gem server\" from the command line after you install the gem to access the old documentation.\n\n### Example applications\n\nThere are a few example applications available on GitHub that demonstrate various features of Devise with different versions of Rails. You can view them here:\n\nhttps://github.com/heartcombo/devise/wiki/Example-Applications\n\n### Extensions\n\nOur community has created a number of extensions that add functionality above and beyond what is included with Devise. You can view a list of available extensions and add your own here:\n\nhttps://github.com/heartcombo/devise/wiki/Extensions\n\n### Contributing\n\nWe hope that you will consider contributing to Devise. Please read this short overview for some information about how to get started:\n\nhttps://github.com/heartcombo/devise/wiki/Contributing\n\nYou will usually want to write tests for your changes.  To run the test suite, go into Devise's top-level directory and run `bundle install` and `bin/test`.\nDevise works with multiple Ruby and Rails versions, and ActiveRecord and Mongoid ORMs, which means you can run the test suite with some modifiers: `DEVISE_ORM` and `BUNDLE_GEMFILE`.\n\n### DEVISE_ORM\nSince Devise supports both Mongoid and ActiveRecord, we rely on this variable to run specific code for each ORM.\nThe default value of `DEVISE_ORM` is `active_record`. To run the tests for Mongoid, you can pass `mongoid`:\n```\nDEVISE_ORM=mongoid bin/test\n\n==> Devise.orm = :mongoid\n```\nWhen running the tests for Mongoid, you will need to have a MongoDB server (version 2.0 or newer) running on your system.\n\nPlease note that the command output will show the variable value being used.\n\n### BUNDLE_GEMFILE\nWe can use this variable to tell bundler what Gemfile it should use (instead of the one in the current directory).\nInside the [gemfiles](https://github.com/heartcombo/devise/tree/main/gemfiles) directory, we have one for each version of Rails we support. When you send us a pull request, it may happen that the test suite breaks using some of them. If that's the case, you can simulate the same environment using the `BUNDLE_GEMFILE` variable.\nFor example, if the tests broke using Ruby 3.0.0 and Rails 6.0, you can do the following:\n```bash\nrbenv shell 3.0.0 # or rvm use 3.0.0\nBUNDLE_GEMFILE=gemfiles/Gemfile-rails-6-0 bundle install\nBUNDLE_GEMFILE=gemfiles/Gemfile-rails-6-0 bin/test\n```\n\nYou can also combine both of them if the tests broke for Mongoid:\n```bash\nBUNDLE_GEMFILE=gemfiles/Gemfile-rails-6-0 bundle install\nBUNDLE_GEMFILE=gemfiles/Gemfile-rails-6-0 DEVISE_ORM=mongoid bin/test\n```\n\n### Running tests\nDevise uses [Mini Test](https://github.com/seattlerb/minitest) as test framework.\n\n* Running all tests:\n```bash\nbin/test\n```\n\n* Running tests for an specific file:\n```bash\nbin/test test/models/trackable_test.rb\n```\n\n* Running a specific test given a regex:\n```bash\nbin/test test/models/trackable_test.rb:16\n```\n\n## Starting with Rails?\n\nIf you are building your first Rails application, we recommend you *do not* use Devise. Devise requires a good understanding of the Rails Framework. In such cases, we advise you to start a simple authentication system from scratch. Here's a few resources that should help you get started:\n\n* Michael Hartl's online book: https://www.railstutorial.org/book/modeling_users\n* Ryan Bates' Railscasts: http://railscasts.com/episodes/250-authentication-from-scratch and http://railscasts.com/episodes/250-authentication-from-scratch-revised\n* Codecademy's Ruby on Rails: Authentication and Authorization: https://www.codecademy.com/learn/rails-auth\n\nOnce you have solidified your understanding of Rails and authentication mechanisms, we assure you Devise will be very pleasant to work with. :smiley:\n\n## Getting started\n\nDevise 4.0 works with Rails 6.0 onwards. Run:\n\n```sh\nbundle add devise\n```\n\nNext, you need to run the generator:\n\n```console\nrails generate devise:install\n```\n\nAt this point, a number of instructions will appear in the console. Among these instructions, you'll need to set up the default URL options for the Devise mailer in each environment. Here is a possible configuration for `config/environments/development.rb`:\n\n```ruby\nconfig.action_mailer.default_url_options = { host: 'localhost', port: 3000 }\n```\n\nThe generator will install an initializer which describes ALL of Devise's configuration options. It is *imperative* that you take a look at it. When you are done, you are ready to add Devise to any of your models using the generator.\n\n\nIn the following command you will replace `MODEL` with the class name used for the application\u2019s users (it\u2019s frequently `User` but could also be `Admin`). This will create a model (if one does not exist) and configure it with the default Devise modules. The generator also configures your `config/routes.rb` file to point to the Devise controller.\n\n```console\nrails generate devise MODEL\n```\n\nNext, check the MODEL for any additional configuration options you might want to add, such as confirmable or lockable. If you add an option, be sure to inspect the migration file (created by the generator if your ORM supports them) and uncomment the appropriate section.  For example, if you add the confirmable option in the model, you'll need to uncomment the Confirmable section in the migration.\n\nThen run `rails db:migrate`\n\nYou should restart your application after changing Devise's configuration options (this includes stopping spring). Otherwise, you will run into strange errors, for example, users being unable to login and route helpers being undefined.\n\n### Controller filters and helpers\n\nDevise will create some helpers to use inside your controllers and views. To set up a controller with user authentication, just add this before_action (assuming your devise model is 'User'):\n\n```ruby\nbefore_action :authenticate_user!\n```\n\nFor Rails 5, note that `protect_from_forgery` is no longer prepended to the `before_action` chain, so if you have set `authenticate_user` before `protect_from_forgery`, your request will result in \"Can't verify CSRF token authenticity.\" To resolve this, either change the order in which you call them, or use `protect_from_forgery prepend: true`.\n\nIf your devise model is something other than User, replace \"_user\" with \"_yourmodel\". The same logic applies to the instructions below.\n\nTo verify if a user is signed in, use the following helper:\n\n```ruby\nuser_signed_in?\n```\n\nFor the current signed-in user, this helper is available:\n\n```ruby\ncurrent_user\n```\n\nYou can access the session for this scope:\n\n```ruby\nuser_session\n```\n\nAfter signing in a user, confirming the account or updating the password, Devise will look for a scoped root path to redirect to. For instance, when using a `:user` resource, the `user_root_path` will be used if it exists; otherwise, the default `root_path` will be used. This means that you need to set the root inside your routes:\n\n```ruby\nroot to: 'home#index'\n```\n\nYou can also override `after_sign_in_path_for` and `after_sign_out_path_for` to customize your redirect hooks.\n\nNotice that if your Devise model is called `Member` instead of `User`, for example, then the helpers available are:\n\n```ruby\nbefore_action :authenticate_member!\n\nmember_signed_in?\n\ncurrent_member\n\nmember_session\n```\n\n### Configuring Models\n\nThe Devise method in your models also accepts some options to configure its modules. For example, you can choose the cost of the hashing algorithm with:\n\n```ruby\ndevise :database_authenticatable, :registerable, :confirmable, :recoverable, stretches: 13\n```\n\nBesides `:stretches`, you can define `:pepper`, `:encryptor`, `:confirm_within`, `:remember_for`, `:timeout_in`, `:unlock_in` among other options. For more details, see the initializer file that was created when you invoked the \"devise:install\" generator described above. This file is usually located at `/config/initializers/devise.rb`.\n\n### Strong Parameters\n\nThe Parameter Sanitizer API has changed for Devise 4 :warning:\n\n*For previous Devise versions see https://github.com/heartcombo/devise/tree/3-stable#strong-parameters*\n\nWhen you customize your own views, you may end up adding new attributes to forms. Rails 4 moved the parameter sanitization from the model to the controller, causing Devise to handle this concern at the controller as well.\n\nThere are just three actions in Devise that allow any set of parameters to be passed down to the model, therefore requiring sanitization. Their names and default permitted parameters are:\n\n* `sign_in` (`Devise::SessionsController#create`) - Permits only the authentication keys (like `email`)\n* `sign_up` (`Devise::RegistrationsController#create`) - Permits authentication keys plus `password` and `password_confirmation`\n* `account_update` (`Devise::RegistrationsController#update`) - Permits authentication keys plus `password`, `password_confirmation` and `current_password`\n\nIn case you want to permit additional parameters (the lazy way\u2122), you can do so using a simple before action in your `ApplicationController`:\n\n```ruby\nclass ApplicationController < ActionController::Base\n  before_action :configure_permitted_parameters, if: :devise_controller?\n\n  protected\n\n  def configure_permitted_parameters\n    devise_parameter_sanitizer.permit(:sign_up, keys: [:username])\n  end\nend\n```\n\nThe above works for any additional fields where the parameters are simple scalar types. If you have nested attributes (say you're using `accepts_nested_attributes_for`), then you will need to tell devise about those nestings and types:\n\n```ruby\nclass ApplicationController < ActionController::Base\n  before_action :configure_permitted_parameters, if: :devise_controller?\n\n  protected\n\n  def configure_permitted_parameters\n    devise_parameter_sanitizer.permit(:sign_up, keys: [:first_name, :last_name, address_attributes: [:country, :state, :city, :area, :postal_code]])\n  end\nend\n```\n\nDevise allows you to completely change Devise defaults or invoke custom behavior by passing a block:\n\nTo permit simple scalar values for username and email, use this\n\n```ruby\ndef configure_permitted_parameters\n  devise_parameter_sanitizer.permit(:sign_in) do |user_params|\n    user_params.permit(:username, :email)\n  end\nend\n```\n\nIf you have some checkboxes that express the roles a user may take on registration, the browser will send those selected checkboxes as an array. An array is not one of Strong Parameters' permitted scalars, so we need to configure Devise in the following way:\n\n```ruby\ndef configure_permitted_parameters\n  devise_parameter_sanitizer.permit(:sign_up) do |user_params|\n    user_params.permit({ roles: [] }, :email, :password, :password_confirmation)\n  end\nend\n```\nFor the list of permitted scalars, and how to declare permitted keys in nested hashes and arrays, see\n\nhttps://github.com/rails/strong_parameters#nested-parameters\n\nIf you have multiple Devise models, you may want to set up a different parameter sanitizer per model. In this case, we recommend inheriting from `Devise::ParameterSanitizer` and adding your own logic:\n\n```ruby\nclass User::ParameterSanitizer < Devise::ParameterSanitizer\n  def initialize(*)\n    super\n    permit(:sign_up, keys: [:username, :email])\n  end\nend\n```\n\nAnd then configure your controllers to use it:\n\n```ruby\nclass ApplicationController < ActionController::Base\n  protected\n\n  def devise_parameter_sanitizer\n    if resource_class == User\n      User::ParameterSanitizer.new(User, :user, params)\n    else\n      super # Use the default one\n    end\n  end\nend\n```\n\nThe example above overrides the permitted parameters for the user to be both `:username` and `:email`. The non-lazy way to configure parameters would be by defining the before filter above in a custom controller. We detail how to configure and customize controllers in some sections below.\n\n### Configuring views\n\nWe built Devise to help you quickly develop an application that uses authentication. However, we don't want to be in your way when you need to customize it.\n\nSince Devise is an engine, all its views are packaged inside the gem. These views will help you get started, but after some time you may want to change them. If this is the case, you just need to invoke the following generator, and it will copy all views to your application:\n\n```console\nrails generate devise:views\n```\n\nIf you have more than one Devise model in your application (such as `User` and `Admin`), you will notice that Devise uses the same views for all models. Fortunately, Devise offers an easy way to customize views. All you need to do is set `config.scoped_views = true` inside the `config/initializers/devise.rb` file.\n\nAfter doing so, you will be able to have views based on the role like `users/sessions/new` and `admins/sessions/new`. If no view is found within the scope, Devise will use the default view at `devise/sessions/new`. You can also use the generator to generate scoped views:\n\n```console\nrails generate devise:views users\n```\n\nIf you would like to generate only a few sets of views, like the ones for the `registerable` and `confirmable` module,\nyou can pass a list of views to the generator with the `-v` flag.\n\n```console\nrails generate devise:views -v registrations confirmations\n```\n\n### Configuring controllers\n\nIf the customization at the views level is not enough, you can customize each controller by following these steps:\n\n1. Create your custom controllers using the generator which requires a scope:\n\n    ```console\n    rails generate devise:controllers [scope]\n    ```\n\n    If you specify `users` as the scope, controllers will be created in `app/controllers/users/`.\n    And the sessions controller will look like this:\n\n    ```ruby\n    class Users::SessionsController < Devise::SessionsController\n      # GET /resource/sign_in\n      # def new\n      #   super\n      # end\n      ...\n    end\n    ```\n    Use the `-c` flag to specify one or more controllers, for example: `rails generate devise:controllers users -c sessions`\n\n2. Tell the router to use this controller:\n\n    ```ruby\n    devise_for :users, controllers: { sessions: 'users/sessions' }\n    ```\n\n3. Recommended but not required: copy (or move) the views from `devise/sessions` to `users/sessions`. Rails will continue using the views from `devise/sessions` due to inheritance if you skip this step, but having the views matching the controller(s) keeps things consistent.\n\n4. Finally, change or extend the desired controller actions.\n\n    You can completely override a controller action:\n\n    ```ruby\n    class Users::SessionsController < Devise::SessionsController\n      def create\n        # custom sign-in code\n      end\n    end\n    ```\n\n    Or you can simply add new behavior to it:\n\n    ```ruby\n    class Users::SessionsController < Devise::SessionsController\n      def create\n        super do |resource|\n          BackgroundWorker.trigger(resource)\n        end\n      end\n    end\n    ```\n\n    This is useful for triggering background jobs or logging events during certain actions.\n\nRemember that Devise uses flash messages to let users know if sign in was successful or unsuccessful. Devise expects your application to call `flash[:notice]` and `flash[:alert]` as appropriate. Do not print the entire flash hash, print only specific keys. In some circumstances, Devise adds a `:timedout` key to the flash hash, which is not meant for display. Remove this key from the hash if you intend to print the entire hash.\n\n### Configuring routes\n\nDevise also ships with default routes. If you need to customize them, you should probably be able to do it through the devise_for method. It accepts several options like :class_name, :path_prefix and so on, including the possibility to change path names for I18n:\n\n```ruby\ndevise_for :users, path: 'auth', path_names: { sign_in: 'login', sign_out: 'logout', password: 'secret', confirmation: 'verification', unlock: 'unblock', registration: 'register', sign_up: 'cmon_let_me_in' }\n```\n\nBe sure to check `devise_for` [documentation](http://www.rubydoc.info/github/heartcombo/devise/main/ActionDispatch/Routing/Mapper%3Adevise_for) for details.\n\nIf you have the need for more deep customization, for instance to also allow \"/sign_in\" besides \"/users/sign_in\", all you need to do is create your routes normally and wrap them in a `devise_scope` block in the router:\n\n```ruby\ndevise_scope :user do\n  get 'sign_in', to: 'devise/sessions#new'\nend\n```\n\nThis way, you tell Devise to use the scope `:user` when \"/sign_in\" is accessed. Notice `devise_scope` is also aliased as `as` in your router.\n\nPlease note: You will still need to add `devise_for` in your routes in order to use helper methods such as `current_user`.\n\n```ruby\ndevise_for :users, skip: :all\n```\n\n### Hotwire/Turbo\n\nDevise integrates with Hotwire/Turbo by treating such requests as navigational, and configuring certain responses for errors and redirects to match the expected behavior. New apps are generated with the following response configuration by default, and existing apps may opt-in by adding the config to their Devise initializers:\n\n```ruby\nDevise.setup do |config|\n  # ...\n  # When using Devise with Hotwire/Turbo, the http status for error responses\n  # and some redirects must match the following. The default in Devise for existing\n  # apps is `200 OK` and `302 Found` respectively, but new apps are generated with\n  # these new defaults that match Hotwire/Turbo behavior.\n  # Note: These might become the new default in future versions of Devise.\n  config.responder.error_status = :unprocessable_entity\n  config.responder.redirect_status = :see_other\nend\n```\n\n**Important**: these custom responses require the `responders` gem version to be `3.1.0` or higher, please make sure you update it if you're going to use this configuration. Check [this upgrade guide](https://github.com/heartcombo/devise/wiki/How-To:-Upgrade-to-Devise-4.9.0-[Hotwire-Turbo-integration]) for more info.\n\n_Note_: the above statuses configuration may become the default for Devise in a future release.\n\nThere are a couple other changes you might need to make in your app to work with Hotwire/Turbo, if you're migrating from rails-ujs:\n\n* The `data-confirm` option that adds a confirmation modal to buttons/forms before submission needs to change to `data-turbo-confirm`, so that Turbo handles those appropriately.\n* The `data-method` option that sets the request method for link submissions needs to change to `data-turbo-method`. This is not necessary for `button_to` or `form`s since Turbo can handle those.\n\nIf you're setting up Devise to sign out via `:delete`, and you're using links (instead of buttons wrapped in a form) to sign out with the `method: :delete` option, they will need to be updated as described above. (Devise does not provide sign out links/buttons in its shared views.)\n\nMake sure to inspect your views looking for those, and change appropriately.\n\n### I18n\n\nDevise uses flash messages with I18n, in conjunction with the flash keys :notice and :alert. To customize your app, you can set up your locale file:\n\n```yaml\nen:\n  devise:\n    sessions:\n      signed_in: 'Signed in successfully.'\n```\n\nYou can also create distinct messages based on the resource you've configured using the singular name given in routes:\n\n```yaml\nen:\n  devise:\n    sessions:\n      user:\n        signed_in: 'Welcome user, you are signed in.'\n      admin:\n        signed_in: 'Hello admin!'\n```\n\nThe Devise mailer uses a similar pattern to create subject messages:\n\n```yaml\nen:\n  devise:\n    mailer:\n      confirmation_instructions:\n        subject: 'Hello everybody!'\n        user_subject: 'Hello User! Please confirm your email'\n      reset_password_instructions:\n        subject: 'Reset instructions'\n```\n\nTake a look at our locale file to check all available messages. You may also be interested in one of the many translations that are available on our wiki:\n\nhttps://github.com/heartcombo/devise/wiki/I18n\n\nCaution: Devise Controllers inherit from ApplicationController. If your app uses multiple locales, you should be sure to set I18n.locale in ApplicationController.\n\n### Test helpers\n\nDevise includes some test helpers for controller and integration tests.\nIn order to use them, you need to include the respective module in your test\ncases/specs.\n\n### Controller tests\n\nController tests require that you include `Devise::Test::IntegrationHelpers` on\nyour test case or its parent `ActionController::TestCase` superclass.\nFor Rails versions prior to 5, include `Devise::Test::ControllerHelpers` instead, since the superclass\nfor controller tests was changed to ActionDispatch::IntegrationTest\n(for more details, see the [Integration tests](#integration-tests) section).\n\n```ruby\nclass PostsControllerTest < ActionController::TestCase\n  include Devise::Test::IntegrationHelpers # Rails >= 5\nend\n```\n\n```ruby\nclass PostsControllerTest < ActionController::TestCase\n  include Devise::Test::ControllerHelpers # Rails < 5\nend\n```\n\nIf you're using RSpec, you can put the following inside a file named\n`spec/support/devise.rb` or in your `spec/spec_helper.rb` (or\n`spec/rails_helper.rb` if you are using `rspec-rails`):\n\n```ruby\nRSpec.configure do |config|\n  config.include Devise::Test::ControllerHelpers, type: :controller\n  config.include Devise::Test::ControllerHelpers, type: :view\nend\n```\n\nJust be sure that this inclusion is made *after* the `require 'rspec/rails'` directive.\n\nNow you are ready to use the `sign_in` and `sign_out` methods on your controller\ntests:\n\n```ruby\nsign_in @user\nsign_in @user, scope: :admin\n```\n\nIf you are testing Devise internal controllers or a controller that inherits\nfrom Devise's, you need to tell Devise which mapping should be used before a\nrequest. This is necessary because Devise gets this information from the router,\nbut since controller tests do not pass through the router, it needs to be stated\nexplicitly. For example, if you are testing the user scope, simply use:\n\n```ruby\ntest 'GET new' do\n  # Mimic the router behavior of setting the Devise scope through the env.\n  @request.env['devise.mapping'] = Devise.mappings[:user]\n\n  # Use the sign_in helper to sign in a fixture `User` record.\n  sign_in users(:alice)\n\n  get :new\n\n  # assert something\nend\n```\n\n### Integration tests\n\nIntegration test helpers are available by including the\n`Devise::Test::IntegrationHelpers` module.\n\n```ruby\nclass PostsTests < ActionDispatch::IntegrationTest\n  include Devise::Test::IntegrationHelpers\nend\n```\n\nNow you can use the following `sign_in` and `sign_out` methods in your integration\ntests:\n\n```ruby\nsign_in users(:bob)\nsign_in users(:bob), scope: :admin\n\nsign_out :user\n```\n\nRSpec users can include the `IntegrationHelpers` module on their `:feature` specs.\n\n```ruby\nRSpec.configure do |config|\n  config.include Devise::Test::IntegrationHelpers, type: :feature\nend\n```\n\nUnlike controller tests, integration tests do not need to supply the\n`devise.mapping` `env` value, as the mapping can be inferred by the routes that\nare executed in your tests.\n\nYou can read more about testing your Rails controllers with RSpec in the wiki:\n\n* https://github.com/heartcombo/devise/wiki/How-To:-Test-controllers-with-Rails-(and-RSpec)\n\n### OmniAuth\n\nDevise comes with OmniAuth support out of the box to authenticate with other providers. To use it, simply specify your OmniAuth configuration in `config/initializers/devise.rb`:\n\n```ruby\nconfig.omniauth :github, 'APP_ID', 'APP_SECRET', scope: 'user,public_repo'\n```\n\nYou can read more about OmniAuth support in the wiki:\n\n* https://github.com/heartcombo/devise/wiki/OmniAuth:-Overview\n\n### Configuring multiple models\n\nDevise allows you to set up as many Devise models as you want. If you want to have an Admin model with just authentication and timeout features, in addition to the User model above, just run:\n\n```ruby\n# Create a migration with the required fields\ncreate_table :admins do |t|\n  t.string :email\n  t.string :encrypted_password\n  t.timestamps null: false\nend\n\n# Inside your Admin model\ndevise :database_authenticatable, :timeoutable\n\n# Inside your routes\ndevise_for :admins\n\n# Inside your protected controller\nbefore_action :authenticate_admin!\n\n# Inside your controllers and views\nadmin_signed_in?\ncurrent_admin\nadmin_session\n```\n\nAlternatively, you can simply run the Devise generator.\n\nKeep in mind that those models will have completely different routes. They **do not** and **cannot** share the same controller for sign in, sign out and so on. In case you want to have different roles sharing the same actions, we recommend that you use a role-based approach, by either providing a role column or using a dedicated gem for authorization.\n\n### Active Job Integration\n\nIf you are using Active Job to deliver Action Mailer messages in the\nbackground through a queuing back-end, you can send Devise emails through your\nexisting queue by overriding the `send_devise_notification` method in your model.\n\n```ruby\ndef send_devise_notification(notification, *args)\n  devise_mailer.send(notification, self, *args).deliver_later\nend\n```\n\n### Password reset tokens and Rails logs\n\nIf you enable the [Recoverable](http://rubydoc.info/github/heartcombo/devise/main/Devise/Models/Recoverable) module, note that a stolen password reset token could give an attacker access to your application. Devise takes effort to generate random, secure tokens, and stores only token digests in the database, never plaintext. However the default logging behavior in Rails can cause plaintext tokens to leak into log files:\n\n1. Action Mailer logs the entire contents of all outgoing emails to the DEBUG level. Password reset tokens delivered to users in email will be leaked.\n2. Active Job logs all arguments to every enqueued job at the INFO level. If you configure Devise to use `deliver_later` to send password reset emails, password reset tokens will be leaked.\n\nRails sets the production logger level to INFO by default. Consider changing your production logger level to WARN if you wish to prevent tokens from being leaked into your logs. In `config/environments/production.rb`:\n\n```ruby\nconfig.log_level = :warn\n```\n\n\n### Other ORMs\n\nDevise supports ActiveRecord (default) and Mongoid. To select another ORM, simply require it in the initializer file.\n\n### Rails API Mode\n\nRails 5+ has a built-in [API Mode](https://edgeguides.rubyonrails.org/api_app.html) which optimizes Rails for use as an API (only). Devise is _somewhat_ able to handle applications that are built in this mode without additional modifications in the sense that it should not raise exceptions and the like. But some issues may still arise during `development`/`testing`, as we still don't know the full extent of this compatibility. (For more information, see [issue #4947](https://github.com/heartcombo/devise/issues/4947/))\n\n#### Supported Authentication Strategies\nAPI-only applications don't support browser-based authentication via cookies, which is devise's default. Yet, devise can still provide authentication out of the box in those cases with the `http_authenticatable` strategy, which uses HTTP Basic Auth and authenticates the user on each request. (For more info, see this wiki article for [How To: Use HTTP Basic Authentication](https://github.com/heartcombo/devise/wiki/How-To:-Use-HTTP-Basic-Authentication))\n\nThe devise default for HTTP Auth is disabled, so it will need to be enabled in the devise initializer for the database strategy:\n\n```ruby\nconfig.http_authenticatable = [:database]\n```\n\nThis restriction does not limit you from implementing custom warden strategies, either in your application or via gem-based extensions for devise.\nA common authentication strategy for APIs is token-based authentication. For more information on extending devise to support this type of authentication and others, see the wiki article for [Simple Token Authentication Examples and alternatives](https://github.com/heartcombo/devise/wiki/How-To:-Simple-Token-Authentication-Example#alternatives) or this blog post on [Custom authentication methods with Devise](http://blog.plataformatec.com.br/2019/01/custom-authentication-methods-with-devise/).\n\n#### Testing\nAPI Mode changes the order of the middleware stack, and this can cause problems for `Devise::Test::IntegrationHelpers`. This problem usually surfaces as an ```undefined method `[]=' for nil:NilClass``` error when using integration test helpers, such as `#sign_in`. The solution is simply to reorder the middlewares by adding the following to test.rb:\n\n```ruby\nRails.application.config.middleware.insert_before Warden::Manager, ActionDispatch::Cookies\nRails.application.config.middleware.insert_before Warden::Manager, ActionDispatch::Session::CookieStore\n```\n\nFor a deeper understanding of this, review [this issue](https://github.com/heartcombo/devise/issues/4696).\n\nAdditionally be mindful that without views supported, some email-based flows from Confirmable, Recoverable and Lockable are not supported directly at this time.\n\n## Additional information\n\n### Warden\n\nDevise is based on Warden, which is a general Rack authentication framework created by Daniel Neighman. We encourage you to read more about Warden here:\n\nhttps://github.com/wardencommunity/warden\n\n### Contributors\n\nWe have a long list of valued contributors. Check them all at:\n\nhttps://github.com/heartcombo/devise/graphs/contributors\n\n## License\n\nMIT License. Copyright 2020-2024 Rafael Fran\u00e7a, Leonardo Tegon, Carlos Ant\u00f4nio da Silva. Copyright 2009-2019 Plataformatec.\n\nThe Devise logo is licensed under [Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License](https://creativecommons.org/licenses/by-nc-nd/4.0/).\n",
        "releases": [
            {
                "name": "",
                "date": "2024-04-10T12:30:53Z"
            },
            {
                "name": "",
                "date": "2024-04-10T12:30:14Z"
            },
            {
                "name": "",
                "date": "2023-04-03T12:32:07Z"
            },
            {
                "name": "",
                "date": "2023-03-31T12:40:12Z"
            },
            {
                "name": "",
                "date": "2023-02-17T14:14:53Z"
            },
            {
                "name": "",
                "date": "2021-12-16T11:07:59Z"
            },
            {
                "name": "",
                "date": "2021-04-29T11:57:41Z"
            },
            {
                "name": "v4.7.1",
                "date": "2019-09-06T18:01:58Z"
            },
            {
                "name": "v4.7.0",
                "date": "2019-08-19T16:34:22Z"
            },
            {
                "name": "v4.6.2",
                "date": "2019-03-26T16:56:50Z"
            },
            {
                "name": "v4.6.1",
                "date": "2019-02-11T15:28:20Z"
            },
            {
                "name": "v4.6.0",
                "date": "2019-02-07T18:15:08Z"
            },
            {
                "name": "v4.5.0",
                "date": "2018-08-15T23:29:20Z"
            },
            {
                "name": "v4.4.3",
                "date": "2018-03-18T00:20:05Z"
            },
            {
                "name": "v4.4.2",
                "date": "2018-03-15T13:56:41Z"
            },
            {
                "name": "v4.4.1",
                "date": "2018-01-23T18:11:05Z"
            },
            {
                "name": "v4.4.0",
                "date": "2017-12-29T19:57:54Z"
            },
            {
                "name": "v3.5.3",
                "date": "2015-12-10T16:38:30Z"
            },
            {
                "name": "v3.5.2",
                "date": "2015-12-09T12:35:38Z"
            },
            {
                "name": "",
                "date": "2014-10-29T15:00:39Z"
            },
            {
                "name": "",
                "date": "2014-10-29T15:01:14Z"
            }
        ]
    }
}