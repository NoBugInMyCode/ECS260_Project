{
    "https://api.github.com/repos/google/benchmark": {
        "forks": 1647,
        "watchers": 9204,
        "stars": 9204,
        "languages": {
            "C++": 622816,
            "Python": 105401,
            "CMake": 50551,
            "Starlark": 11707,
            "C": 4359
        },
        "commits": [
            "2025-01-13T13:38:59Z",
            "2025-01-13T13:33:04Z",
            "2025-01-09T16:07:43Z",
            "2025-01-09T10:47:29Z",
            "2025-01-08T16:54:08Z",
            "2025-01-08T12:49:09Z",
            "2025-01-08T12:41:17Z",
            "2025-01-08T12:03:53Z",
            "2025-01-08T11:26:44Z",
            "2024-12-10T15:29:03Z",
            "2024-12-10T12:27:12Z",
            "2024-12-10T12:07:53Z",
            "2024-12-10T12:04:53Z",
            "2024-12-03T17:42:57Z",
            "2024-11-29T11:55:32Z",
            "2024-11-29T11:06:08Z",
            "2024-11-28T16:51:38Z",
            "2024-11-27T09:41:06Z",
            "2024-11-13T13:06:48Z",
            "2024-11-07T15:04:51Z",
            "2024-11-06T13:15:22Z",
            "2024-10-28T18:18:40Z",
            "2024-10-24T11:31:06Z",
            "2024-10-24T09:22:58Z",
            "2024-10-24T08:46:02Z",
            "2024-10-23T09:38:53Z",
            "2024-10-23T09:27:18Z",
            "2024-10-11T21:16:37Z",
            "2024-10-10T22:02:36Z",
            "2024-10-02T08:40:03Z"
        ],
        "creation_date": "2013-12-12T00:10:48Z",
        "contributors": 30,
        "topics": [
            "benchmark"
        ],
        "subscribers": 207,
        "readme": "# Benchmark\n\n[![build-and-test](https://github.com/google/benchmark/workflows/build-and-test/badge.svg)](https://github.com/google/benchmark/actions?query=workflow%3Abuild-and-test)\n[![bazel](https://github.com/google/benchmark/actions/workflows/bazel.yml/badge.svg)](https://github.com/google/benchmark/actions/workflows/bazel.yml)\n[![pylint](https://github.com/google/benchmark/workflows/pylint/badge.svg)](https://github.com/google/benchmark/actions?query=workflow%3Apylint)\n[![test-bindings](https://github.com/google/benchmark/workflows/test-bindings/badge.svg)](https://github.com/google/benchmark/actions?query=workflow%3Atest-bindings)\n[![Coverage Status](https://coveralls.io/repos/google/benchmark/badge.svg)](https://coveralls.io/r/google/benchmark)\n\n[![Discord](https://discordapp.com/api/guilds/1125694995928719494/widget.png?style=shield)](https://discord.gg/cz7UX7wKC2)\n\nA library to benchmark code snippets, similar to unit tests. Example:\n\n```c++\n#include <benchmark/benchmark.h>\n\nstatic void BM_SomeFunction(benchmark::State& state) {\n  // Perform setup here\n  for (auto _ : state) {\n    // This code gets timed\n    SomeFunction();\n  }\n}\n// Register the function as a benchmark\nBENCHMARK(BM_SomeFunction);\n// Run the benchmark\nBENCHMARK_MAIN();\n```\n\n## Getting Started\n\nTo get started, see [Requirements](#requirements) and\n[Installation](#installation). See [Usage](#usage) for a full example and the\n[User Guide](docs/user_guide.md) for a more comprehensive feature overview.\n\nIt may also help to read the [Google Test documentation](https://github.com/google/googletest/blob/main/docs/primer.md)\nas some of the structural aspects of the APIs are similar.\n\n## Resources\n\n[Discussion group](https://groups.google.com/d/forum/benchmark-discuss)\n\nIRC channels:\n* [libera](https://libera.chat) #benchmark\n\n[Additional Tooling Documentation](docs/tools.md)\n\n[Assembly Testing Documentation](docs/AssemblyTests.md)\n\n[Building and installing Python bindings](docs/python_bindings.md)\n\n## Requirements\n\nThe library can be used with C++03. However, it requires C++14 to build,\nincluding compiler and standard library support.\n\n_See [dependencies.md](docs/dependencies.md) for more details regarding supported\ncompilers and standards._\n\nIf you have need for a particular compiler to be supported, patches are very welcome.\n\nSee [Platform-Specific Build Instructions](docs/platform_specific_build_instructions.md).\n\n## Installation\n\nThis describes the installation process using cmake. As pre-requisites, you'll\nneed git and cmake installed.\n\n_See [dependencies.md](docs/dependencies.md) for more details regarding supported\nversions of build tools._\n\n```bash\n# Check out the library.\n$ git clone https://github.com/google/benchmark.git\n# Go to the library root directory\n$ cd benchmark\n# Make a build directory to place the build output.\n$ cmake -E make_directory \"build\"\n# Generate build system files with cmake, and download any dependencies.\n$ cmake -E chdir \"build\" cmake -DBENCHMARK_DOWNLOAD_DEPENDENCIES=on -DCMAKE_BUILD_TYPE=Release ../\n# or, starting with CMake 3.13, use a simpler form:\n# cmake -DBENCHMARK_DOWNLOAD_DEPENDENCIES=on -DCMAKE_BUILD_TYPE=Release -S . -B \"build\"\n# Build the library.\n$ cmake --build \"build\" --config Release\n```\nThis builds the `benchmark` and `benchmark_main` libraries and tests.\nOn a unix system, the build directory should now look something like this:\n\n```\n/benchmark\n  /build\n    /src\n      /libbenchmark.a\n      /libbenchmark_main.a\n    /test\n      ...\n```\n\nNext, you can run the tests to check the build.\n\n```bash\n$ cmake -E chdir \"build\" ctest --build-config Release\n```\n\nIf you want to install the library globally, also run:\n\n```\nsudo cmake --build \"build\" --config Release --target install\n```\n\nNote that Google Benchmark requires Google Test to build and run the tests. This\ndependency can be provided two ways:\n\n* Checkout the Google Test sources into `benchmark/googletest`.\n* Otherwise, if `-DBENCHMARK_DOWNLOAD_DEPENDENCIES=ON` is specified during\n  configuration as above, the library will automatically download and build\n  any required dependencies.\n\nIf you do not wish to build and run the tests, add `-DBENCHMARK_ENABLE_GTEST_TESTS=OFF`\nto `CMAKE_ARGS`.\n\n### Debug vs Release\n\nBy default, benchmark builds as a debug library. You will see a warning in the\noutput when this is the case. To build it as a release library instead, add\n`-DCMAKE_BUILD_TYPE=Release` when generating the build system files, as shown\nabove. The use of `--config Release` in build commands is needed to properly\nsupport multi-configuration tools (like Visual Studio for example) and can be\nskipped for other build systems (like Makefile).\n\nTo enable link-time optimisation, also add `-DBENCHMARK_ENABLE_LTO=true` when\ngenerating the build system files.\n\nIf you are using gcc, you might need to set `GCC_AR` and `GCC_RANLIB` cmake\ncache variables, if autodetection fails.\n\nIf you are using clang, you may need to set `LLVMAR_EXECUTABLE`,\n`LLVMNM_EXECUTABLE` and `LLVMRANLIB_EXECUTABLE` cmake cache variables.\n\nTo enable sanitizer checks (eg., `asan` and `tsan`), add:\n```\n -DCMAKE_C_FLAGS=\"-g -O2 -fno-omit-frame-pointer -fsanitize=address -fsanitize=thread -fno-sanitize-recover=all\"\n -DCMAKE_CXX_FLAGS=\"-g -O2 -fno-omit-frame-pointer -fsanitize=address -fsanitize=thread -fno-sanitize-recover=all \"  \n```\n\n### Stable and Experimental Library Versions\n\nThe main branch contains the latest stable version of the benchmarking library;\nthe API of which can be considered largely stable, with source breaking changes\nbeing made only upon the release of a new major version.\n\nNewer, experimental, features are implemented and tested on the\n[`v2` branch](https://github.com/google/benchmark/tree/v2). Users who wish\nto use, test, and provide feedback on the new features are encouraged to try\nthis branch. However, this branch provides no stability guarantees and reserves\nthe right to change and break the API at any time.\n\n## Usage\n\n### Basic usage\n\nDefine a function that executes the code to measure, register it as a benchmark\nfunction using the `BENCHMARK` macro, and ensure an appropriate `main` function\nis available:\n\n```c++\n#include <benchmark/benchmark.h>\n\nstatic void BM_StringCreation(benchmark::State& state) {\n  for (auto _ : state)\n    std::string empty_string;\n}\n// Register the function as a benchmark\nBENCHMARK(BM_StringCreation);\n\n// Define another benchmark\nstatic void BM_StringCopy(benchmark::State& state) {\n  std::string x = \"hello\";\n  for (auto _ : state)\n    std::string copy(x);\n}\nBENCHMARK(BM_StringCopy);\n\nBENCHMARK_MAIN();\n```\n\nTo run the benchmark, compile and link against the `benchmark` library\n(libbenchmark.a/.so). If you followed the build steps above, this library will \nbe under the build directory you created.\n\n```bash\n# Example on linux after running the build steps above. Assumes the\n# `benchmark` and `build` directories are under the current directory.\n$ g++ mybenchmark.cc -std=c++11 -isystem benchmark/include \\\n  -Lbenchmark/build/src -lbenchmark -lpthread -o mybenchmark\n```\n\nAlternatively, link against the `benchmark_main` library and remove\n`BENCHMARK_MAIN();` above to get the same behavior.\n\nThe compiled executable will run all benchmarks by default. Pass the `--help`\nflag for option information or see the [User Guide](docs/user_guide.md).\n\n### Usage with CMake\n\nIf using CMake, it is recommended to link against the project-provided\n`benchmark::benchmark` and `benchmark::benchmark_main` targets using\n`target_link_libraries`.\nIt is possible to use ```find_package``` to import an installed version of the\nlibrary.\n```cmake\nfind_package(benchmark REQUIRED)\n```\nAlternatively, ```add_subdirectory``` will incorporate the library directly in\nto one's CMake project.\n```cmake\nadd_subdirectory(benchmark)\n```\nEither way, link to the library as follows.\n```cmake\ntarget_link_libraries(MyTarget benchmark::benchmark)\n```\n",
        "releases": [
            {
                "name": "v1.9.1",
                "date": "2024-11-28T16:52:25Z"
            },
            {
                "name": "v1.9.0",
                "date": "2024-08-16T10:09:24Z"
            },
            {
                "name": "v1.8.5",
                "date": "2024-07-18T10:14:02Z"
            },
            {
                "name": "v1.8.4",
                "date": "2024-05-23T14:03:56Z"
            },
            {
                "name": "v1.8.3",
                "date": "2023-08-31T12:17:48Z"
            },
            {
                "name": "v1.8.2",
                "date": "2023-07-06T08:51:00Z"
            },
            {
                "name": "v1.8.1",
                "date": "2023-07-04T07:48:38Z"
            },
            {
                "name": "v1.8.0",
                "date": "2023-05-05T10:27:20Z"
            },
            {
                "name": "v1.7.1",
                "date": "2022-11-11T14:02:40Z"
            },
            {
                "name": "v1.7.0",
                "date": "2022-07-25T11:36:53Z"
            },
            {
                "name": "v1.6.2",
                "date": "2022-07-18T14:35:55Z"
            },
            {
                "name": "v1.6.1",
                "date": "2022-01-10T19:19:10Z"
            },
            {
                "name": "v1.6.0",
                "date": "2021-09-07T11:23:06Z"
            },
            {
                "name": "v1.5.6",
                "date": "2021-08-11T14:27:02Z"
            },
            {
                "name": "v1.5.5",
                "date": "2021-06-11T11:10:59Z"
            },
            {
                "name": "v1.5.4",
                "date": "2021-05-30T08:48:40Z"
            },
            {
                "name": "v1.5.3",
                "date": "2021-04-23T11:55:09Z"
            },
            {
                "name": "v1.5.2",
                "date": "2020-09-11T10:04:23Z"
            },
            {
                "name": "v1.5.1",
                "date": "2020-06-09T08:54:15Z"
            },
            {
                "name": "v1.5.0",
                "date": "2019-05-28T08:58:51Z"
            },
            {
                "name": "v1.4.1",
                "date": "2018-05-25T10:56:04Z"
            },
            {
                "name": "v1.4.0",
                "date": "2018-04-04T09:46:00Z"
            },
            {
                "name": "v1.3.0",
                "date": "2017-11-03T19:38:23Z"
            },
            {
                "name": "v1.2.0",
                "date": "2017-07-21T17:00:43Z"
            },
            {
                "name": "v1.1.0",
                "date": "2016-11-04T16:58:36Z"
            },
            {
                "name": "v1.0.0",
                "date": "2016-01-15T18:26:06Z"
            }
        ]
    }
}