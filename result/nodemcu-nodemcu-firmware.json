{
    "https://api.github.com/repos/nodemcu/nodemcu-firmware": {
        "forks": 3124,
        "watchers": 7725,
        "stars": 7725,
        "languages": {
            "C": 11337820,
            "Lua": 671852,
            "Makefile": 85173,
            "C++": 29289,
            "Python": 17073,
            "Shell": 14671,
            "Tcl": 10995,
            "Assembly": 8901,
            "HTML": 8441,
            "GDB": 853
        },
        "commits": [
            "2024-02-25T08:04:43Z",
            "2024-02-25T08:01:01Z",
            "2024-02-25T08:00:08Z",
            "2024-02-18T22:00:21Z",
            "2024-02-18T21:14:27Z",
            "2024-02-18T10:18:23Z",
            "2024-02-18T10:18:07Z",
            "2024-02-18T09:58:41Z",
            "2024-02-18T09:56:21Z",
            "2024-02-05T06:11:48Z",
            "2024-01-23T19:29:57Z",
            "2023-10-18T20:13:03Z",
            "2023-10-18T19:17:30Z",
            "2022-12-22T20:55:40Z",
            "2022-12-14T07:31:39Z",
            "2022-07-10T15:01:21Z",
            "2022-05-23T11:18:12Z",
            "2022-05-20T05:53:27Z",
            "2021-03-28T15:15:43Z",
            "2022-01-27T06:04:04Z",
            "2022-01-15T00:24:50Z",
            "2022-01-15T00:23:18Z",
            "2022-01-12T12:22:52Z",
            "2022-01-07T04:53:42Z",
            "2021-12-30T07:46:20Z",
            "2021-07-28T11:46:43Z",
            "2021-12-06T12:38:48Z",
            "2021-11-19T21:50:27Z",
            "2021-11-19T21:47:54Z",
            "2021-09-08T20:34:43Z"
        ],
        "creation_date": "2014-11-20T15:06:45Z",
        "contributors": 30,
        "topics": [
            "esp32",
            "esp8266",
            "esp8285",
            "espressif",
            "firmware",
            "lua",
            "nodemcu",
            "spiffs"
        ],
        "subscribers": 542,
        "readme": "# NodeMCU 3.0.0\n> Lua-based firmware for ESP8266 WiFi SOC\n\n[![Join the chat at https://gitter.im/nodemcu/nodemcu-firmware](https://img.shields.io/gitter/room/badges/shields.svg)](https://gitter.im/nodemcu/nodemcu-firmware?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![CI](https://github.com/nodemcu/nodemcu-firmware/actions/workflows/build.yml/badge.svg)](https://github.com/nodemcu/nodemcu-firmware/actions/workflows/build.yml)\n[![Documentation Status](https://img.shields.io/badge/docs-release-yellow.svg?style=flat)](http://nodemcu.readthedocs.io/en/release/)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat)](#license)\n\nNodeMCU is an open source [Lua](https://www.lua.org/) based firmware for the [ESP8266 WiFi SOC from Espressif](https://www.espressif.com/en/products/socs/esp8266) and uses an on-module flash-based [SPIFFS](https://github.com/pellepl/spiffs) file system. NodeMCU is implemented in C and is layered on the [Espressif NON-OS SDK](https://github.com/espressif/ESP8266_NONOS_SDK).\n\nThe firmware was initially developed as is a companion project to the popular ESP8266-based [NodeMCU development modules]((https://github.com/nodemcu/nodemcu-devkit-v1.0)), but the project is now community-supported, and the firmware can now be run on _any_ ESP module.\n\n## Summary\n\n- Easy to program wireless node and/or access point\n- Based on Lua 5.1.4 or Lua 5.3 but without `debug`, `io`, `os` and (most of the) `math` modules\n- Asynchronous event-driven programming model\n- More than **70 built-in C modules** and **close to 20 Lua modules**\n- Firmware available with or without floating point support (integer-only uses less memory)\n- Up-to-date documentation at [https://nodemcu.readthedocs.io](https://nodemcu.readthedocs.io)\n\n### LFS support\n\nIn July 2018 support for a Lua Flash Store (LFS) was introduced. LFS  allows Lua code and its associated constant data to be executed directly out of flash-memory; just as the firmware itself is executed. This now enables NodeMCU developers to create **Lua applications with up to 256Kb** Lua code and read-only constants executing out of flash. All of the RAM is available for read-write data!\n\n## Programming Model\n\nThe NodeMCU programming model is similar to that of [Node.js](https://en.wikipedia.org/wiki/Node.js), only in Lua. It is asynchronous and event-driven. Many functions, therefore, have parameters for callback functions. To give you an idea what a NodeMCU program looks like study the short snippets below. For more extensive examples have a look at the [`/lua_examples`](lua_examples) folder in the repository on GitHub.\n\n```lua\n-- a simple HTTP server\nsrv = net.createServer(net.TCP)\nsrv:listen(80, function(conn)\n\tconn:on(\"receive\", function(sck, payload)\n\t\tprint(payload)\n\t\tsck:send(\"HTTP/1.0 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<h1> Hello, NodeMCU.</h1>\")\n\tend)\n\tconn:on(\"sent\", function(sck) sck:close() end)\nend)\n```\n```lua\n-- connect to WiFi access point\nwifi.setmode(wifi.STATION)\nwifi.sta.config{ssid=\"SSID\", pwd=\"password\"}\n```\n\n## Documentation\n\nThe entire [NodeMCU documentation](https://nodemcu.readthedocs.io) is maintained right in this repository at [/docs](docs). The fact that the API documentation is maintained in the same repository as the code that *provides* the API ensures consistency between the two. With every commit the documentation is rebuilt by Read the Docs and thus transformed from terse Markdown into a nicely browsable HTML site at [https://nodemcu.readthedocs.io](https://nodemcu.readthedocs.io).\n\n\nPages:\n\n- How to [build the firmware](https://nodemcu.readthedocs.io/en/release/build/)\n- How to [flash the firmware](https://nodemcu.readthedocs.io/en/release/flash/)\n- How to [upload code and NodeMCU IDEs](https://nodemcu.readthedocs.io/en/release/upload/)\n- API documentation for every module\n\n\n## Releases\n\nDue to the ever-growing number of modules available within NodeMCU, pre-built binaries are no longer made available. Use the automated [custom firmware build service](http://nodemcu-build.com/) to get the specific firmware configuration you need, or consult the [documentation](http://nodemcu.readthedocs.io/en/release/build/) for other options to build your own firmware.\n\nThis project uses two main branches, `release` and `dev`. `dev` is actively worked on and it's also where PRs should be created against. `release` thus can be considered \"stable\" even though there are no automated regression tests. The goal is to merge back to `release` roughly every 2 months. Depending on the current \"heat\" (issues, PRs) we accept changes to `dev` for 5-6 weeks and then hold back for 2-3 weeks before the next snap is completed.\n\nA new tag is created every time the `dev` branch is merged back to `release`. They are listed in this repo's [releases](https://github.com/nodemcu/nodemcu-firmware/releases).\n\nTag names follow the `<SDK-version>-release_yyyymmdd` pattern.\n\n## Support\n\nSee [https://nodemcu.readthedocs.io/en/release/support/](https://nodemcu.readthedocs.io/en/release/support/).\n\n## License\n\n[MIT](/LICENSE) \u00a9 [zeroday](https://github.com/NodeMCU)/[nodemcu.com](http://nodemcu.com/index_en.html)\n",
        "releases": [
            {
                "name": "3.0.0-release_20240225",
                "date": "2024-02-25T09:40:35Z"
            },
            {
                "name": "3.0.0-release_20211229",
                "date": "2021-12-30T19:20:45Z"
            },
            {
                "name": "3.0.0-release_20210201",
                "date": "2021-02-03T22:00:23Z"
            },
            {
                "name": "3.0-release_20201107",
                "date": "2020-11-07T15:48:05Z"
            },
            {
                "name": "3.0-release_20200910",
                "date": "2020-09-28T09:35:32Z"
            },
            {
                "name": "3.0-master_20200610",
                "date": "2020-06-10T09:52:18Z"
            },
            {
                "name": "3.0-master_20190907",
                "date": "2019-09-10T06:18:11Z"
            },
            {
                "name": "2.2.1-master_20190405",
                "date": "2019-04-09T13:27:21Z"
            },
            {
                "name": "2.2.1-master_20181207",
                "date": "2018-12-07T22:19:26Z"
            },
            {
                "name": "2.2.1-master_20180915",
                "date": "2018-09-15T20:00:37Z"
            },
            {
                "name": "2.2.0-master_20180608",
                "date": "2018-06-08T15:03:53Z"
            },
            {
                "name": "2.2.0-master_20180402",
                "date": "2018-04-02T18:30:29Z"
            },
            {
                "name": "2.1.0-master_20170824",
                "date": "2017-08-24T19:32:27Z"
            },
            {
                "name": "2.1.0-master_20170811",
                "date": "2017-08-11T05:43:11Z"
            },
            {
                "name": "2.1.0-master_20170521",
                "date": "2017-05-21T14:14:07Z"
            },
            {
                "name": "2.0.0-master_20170202",
                "date": "2017-02-02T06:49:44Z"
            },
            {
                "name": "1.5.4.1-master_20161201",
                "date": "2016-12-07T21:28:27Z"
            },
            {
                "name": "1.5.4.1-master_20161001",
                "date": "2016-10-01T13:32:50Z"
            },
            {
                "name": "1.5.4.1-master_20160802",
                "date": "2016-08-02T20:17:05Z"
            },
            {
                "name": "1.5.1-master_20160603",
                "date": "2016-06-03T21:36:26Z"
            },
            {
                "name": "1.4.0-master_20151229: Retroactively tagged stable drop",
                "date": "2016-05-17T06:28:25Z"
            },
            {
                "name": null,
                "date": "2015-07-03T22:31:57Z"
            },
            {
                "name": "0.9.6-dev_20150627",
                "date": "2015-06-27T07:32:14Z"
            },
            {
                "name": null,
                "date": "2015-06-26T11:24:26Z"
            },
            {
                "name": null,
                "date": "2015-04-05T17:11:52Z"
            },
            {
                "name": null,
                "date": "2015-03-31T15:56:20Z"
            },
            {
                "name": null,
                "date": "2015-03-18T11:47:41Z"
            },
            {
                "name": null,
                "date": "2015-03-16T16:46:30Z"
            },
            {
                "name": null,
                "date": "2015-03-11T05:27:07Z"
            },
            {
                "name": null,
                "date": "2015-03-10T15:17:35Z"
            },
            {
                "name": null,
                "date": "2015-03-09T17:23:19Z"
            },
            {
                "name": null,
                "date": "2015-03-05T03:49:10Z"
            }
        ]
    }
}