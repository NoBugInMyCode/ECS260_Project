{
    "https://api.github.com/repos/databrickslabs/dolly": {
        "forks": 1155,
        "watchers": 10810,
        "stars": 10810,
        "languages": {
            "Python": 33042,
            "Shell": 111
        },
        "commits": [
            "2023-06-30T18:36:16Z",
            "2023-06-30T18:35:51Z",
            "2023-06-24T03:01:22Z",
            "2023-06-22T14:14:09Z",
            "2023-06-22T14:12:42Z",
            "2023-06-21T20:39:41Z",
            "2023-06-08T12:46:47Z",
            "2023-06-07T00:12:34Z",
            "2023-06-06T22:55:30Z",
            "2023-06-06T22:49:24Z",
            "2023-06-05T19:02:32Z",
            "2023-06-02T23:37:29Z",
            "2023-06-02T17:14:42Z",
            "2023-05-31T20:05:25Z",
            "2023-05-26T21:42:15Z",
            "2023-05-26T21:37:22Z",
            "2023-05-26T21:24:27Z",
            "2023-05-26T20:19:29Z",
            "2023-05-26T20:18:47Z",
            "2023-05-26T16:55:30Z",
            "2023-05-26T16:40:58Z",
            "2023-05-26T16:17:28Z",
            "2023-05-26T16:15:55Z",
            "2023-05-26T16:04:45Z",
            "2023-05-26T03:57:34Z",
            "2023-05-26T03:30:15Z",
            "2023-05-24T22:45:26Z",
            "2023-05-24T22:44:34Z",
            "2023-05-23T20:51:58Z",
            "2023-05-18T05:30:06Z"
        ],
        "creation_date": "2023-03-24T16:15:53Z",
        "contributors": 13,
        "topics": [
            "chatbot",
            "databricks",
            "dolly",
            "gpt"
        ],
        "subscribers": 139,
        "readme": "# Dolly\n\nDatabricks\u2019 [Dolly](https://huggingface.co/databricks/dolly-v2-12b) is an instruction-following large language model trained on the Databricks machine learning platform\nthat is licensed for commercial use. Based on `pythia-12b`, Dolly is trained on ~15k instruction/response fine tuning records\n[`databricks-dolly-15k`](https://huggingface.co/datasets/databricks/databricks-dolly-15k) generated\nby Databricks employees in capability domains from the InstructGPT paper, including brainstorming, classification, closed QA, generation,\ninformation extraction, open QA and summarization. `dolly-v2-12b` is not a state-of-the-art model, but does exhibit surprisingly\nhigh quality instruction following behavior not characteristic of the foundation model on which it is based.\n\nDatabricks is committed to ensuring that every organization and individual benefits from the transformative power of artificial intelligence. The Dolly model family represents our first steps along this journey, and we\u2019re excited to share this technology with the world.\n\nThe model is available on Hugging Face as [databricks/dolly-v2-12b](https://huggingface.co/databricks/dolly-v2-12b).\n\n## Model Overview\n\n`dolly-v2-12b` is a 12 billion parameter causal language model created by [Databricks](https://databricks.com/) that is derived from\n[EleutherAI\u2019s](https://www.eleuther.ai/) [Pythia-12b](https://huggingface.co/EleutherAI/pythia-12b) and fine-tuned\non a [~15K record instruction corpus](https://github.com/databrickslabs/dolly/tree/master/data) generated by Databricks employees and released under a permissive license (CC-BY-SA)\n\n\n## Known Limitations\n\n### Performance Limitations\n**`dolly-v2-12b` is not a state-of-the-art generative language model** and, though quantitative benchmarking is ongoing, is not designed to perform\ncompetitively with more modern model architectures or models subject to larger pretraining corpuses.\n\nThe Dolly model family is under active development, and so any list of shortcomings is unlikely to be exhaustive, but we include known limitations and misfires here as a means to document and share our preliminary findings with the community.\nIn particular, `dolly-v2-12b` struggles with: syntactically complex prompts, programming problems, mathematical operations, factual errors,\ndates and times, open-ended question answering, hallucination, enumerating lists of specific length, stylistic mimicry, having a sense of humor, etc.\nMoreover, we find that `dolly-v2-12b` does not have some capabilities, such as well-formatted letter writing, present in the original model.\n\n### Dataset Limitations\nLike all language models, `dolly-v2-12b` reflects the content and limitations of its training corpuses.\n\n- **The Pile**: GPT-J\u2019s pre-training corpus contains content mostly collected from the public internet, and like most web-scale datasets,\nit contains content many users would find objectionable. As such, the model is likely to reflect these shortcomings, potentially overtly\nin the case it is explicitly asked to produce objectionable content, and sometimes subtly, as in the case of biased or harmful implicit\nassociations.\n\n- **`databricks-dolly-15k`**: The training data on which `dolly-v2-12b` is instruction tuned represents natural language instructions generated\nby Databricks employees during a period spanning March and April 2023 and includes passages from Wikipedia as references passages\nfor instruction categories like closed QA and summarization. To our knowledge it does not contain obscenity, intellectual property or\npersonally identifying information about non-public figures, but it may contain typos and factual errors.\nThe dataset may also reflect biases found in Wikipedia. Finally, the dataset likely reflects\nthe interests and semantic choices of Databricks employees, a demographic which is not representative of the global population at large.\n\nDatabricks is committed to ongoing research and development efforts to develop helpful, honest and harmless AI technologies that\nmaximize the potential of all individuals and organizations.\n\n## Getting Started with Response Generation\n\nIf you'd like to simply test the model without training, the model is available on Hugging Face as [databricks/dolly-v2-12b](https://huggingface.co/databricks/dolly-v2-12b).\n\nTo use the model with the `transformers` library on a machine with A100 GPUs:\n\n```\nfrom transformers import pipeline\nimport torch\n\ninstruct_pipeline = pipeline(model=\"databricks/dolly-v2-12b\", torch_dtype=torch.bfloat16, trust_remote_code=True, device_map=\"auto\")\n```\n\nYou can then use the pipeline to answer instructions:\n\n```\ninstruct_pipeline(\"Explain to me the difference between nuclear fission and fusion.\")\n```\n\n### Generating on Other Instances\n\nA100 instance types are not available in all cloud regions, or can be hard to provision. Inference is possible on other GPU instance types.\n\n#### A10 GPUs\n\nThe 6.9B and 2.8B param models should work as-is.\n\nTo generate using the 12B param model on A10s (ex: `g5.4xlarge`, 1 x A10 24GB), it's necessary to load and run generating using 8-bit weights, which impacts the results slightly:\n\n- Also install `bitsandbytes`\n- Add `model_kwargs={'load_in_8bit': True}` to the `pipeline()` command shown above\n\n#### V100 GPUs\n\nWhen using V100s (ex: `p3.2xlarge`, 1 x V100 16GB, `NC6s_v3`), in all cases, set `torch_dtype=torch.float16` in `pipeline()` instead.\n\nOtherwise, follow the steps above. The 12B param model may not function well in 8-bit on V100s.\n\n## Getting Started with Training\n\n- Add the `dolly` repo to Databricks (under Repos click Add Repo, enter `https://github.com/databrickslabs/dolly.git`, then click Create Repo).\n- Start a `13.x ML (includes Apache Spark 3.4.0, GPU, Scala 2.12)` or later single-node cluster with node type having 8 A100 GPUs (e.g. `Standard_ND96asr_v4` or `p4d.24xlarge`). Note that these instance types may not be available in all regions, or may be difficult to provision. In Databricks, note that you must select the GPU runtime first, and unselect \"Use Photon\", for these instance types to appear (where supported).\n- Open the `train_dolly` notebook in the Repo (which is the `train_dolly.py` file in the Github `dolly` repo), attach to your GPU cluster, and run all cells.  When training finishes, the notebook will save the model under `/dbfs/dolly_training`.\n\n### Training on Other Instances\n\nA100 instance types are not available in all cloud regions, or can be hard to provision. Training is possible on other GPU instance types, \nfor smaller Dolly model sizes, and with small modifications to reduce memory usage. These modifications are not optimal, but are simple to make. \n\nSelect your GPU family type from the `gpu_family` widget, enter the number of GPUs available in the `num_gpus` widget, and then run the rest of the code. \nA number of different options will be set for you to train the model for one of the following GPU types:\n- A100 (default)\n- A10 \n- V100\n\nDetails of the different configurations are below.\n\n#### A100 GPUs\n\nA100 GPUs are preferred for training all model sizes, and are the only GPUs that can train the 12B param model in a reasonable amount of time.\nAs such, this is the default configuration, as set in the `a100_config.json` deepspeed config file.\n\n#### A10 GPUs\n\nTraining the 12B param model is not recommended on A10s.\n\nTo train the 6.9B param model on A10 instances (ex: `g5.24xlarge`, 4 x A10 24GB; `Standard_NV72ads_A10_v5`, 2 x A10),\nsimply select `a10` from the `gpu_family` widget and enter the number of GPUs available in the `num_gpus` widget, then run the rest of the code. \nThis will use the `a10_config.json` deepspeed config file, which makes the following changes:\n\n- `per-device-train-batch-size` and `per-device-eval-batch-size` are set to 3 in the `train_dolly.py` invocation of `deepspeed`\n- Within the `\"zero_optimization\"` section of the deepspeed config, we have added:\n  ```\n  \"offload_optimizer\": {\n    \"device\": \"cpu\",\n    \"pin_memory\": true\n  },\n  ```\n\n#### V100 GPUs\n\nTo run on V100 instances with 32GB of GPU memory (ex: `p3dn.24xlarge` or `Standard_ND40rs_v2`), \nsimply select `v100` from the `gpu_family` widget and enter the number of GPUs available in the `num_gpus` widget, and then run the rest of the code. \nThis will use the `v100_config.json` deepspeed config file, which makes the following changes:\n\n- It makes the changes described above for A10s\n- It enables fp16 floating point format\n- It sets the `per-device-train-batch-size` and `per-device-eval-batch-size` to 3\n  \nYou may be able to slightly increase the batch size with 32GB instances, compared to what works above for 24GB A10s.\n\n## Running Unit Tests Locally\n\n```\npyenv local 3.8.13\npython -m venv .venv\n. .venv/bin/activate\npip install -r requirements_dev.txt\n./run_pytest.sh\n```\n\n## Citation\n\n```\n@online{DatabricksBlog2023DollyV2,\n    author    = {Mike Conover and Matt Hayes and Ankit Mathur and Jianwei Xie and Jun Wan and Sam Shah and Ali Ghodsi and Patrick Wendell and Matei Zaharia and Reynold Xin},\n    title     = {Free Dolly: Introducing the World's First Truly Open Instruction-Tuned LLM},\n    year      = {2023},\n    url       = {https://www.databricks.com/blog/2023/04/12/dolly-first-open-commercially-viable-instruction-tuned-llm},\n    urldate   = {2023-06-30}\n}\n```\n",
        "releases": []
    }
}