{
    "https://api.github.com/repos/trinodb/trino": {
        "forks": 3065,
        "watchers": 10731,
        "stars": 10731,
        "languages": {
            "Java": 79202290,
            "JavaScript": 273952,
            "TypeScript": 70667,
            "ANTLR": 60810,
            "Shell": 27965,
            "HTML": 23328,
            "CSS": 16286,
            "Scala": 10145,
            "Python": 7379,
            "Dockerfile": 2803,
            "Smarty": 1938,
            "Groovy": 1702
        },
        "commits": [
            "2025-01-21T14:07:40Z",
            "2025-01-21T13:42:02Z",
            "2025-01-21T12:54:42Z",
            "2025-01-16T21:55:56Z",
            "2025-01-20T19:31:15Z",
            "2025-01-20T17:56:38Z",
            "2025-01-19T07:07:00Z",
            "2025-01-20T09:18:47Z",
            "2025-01-20T09:16:15Z",
            "2025-01-20T09:14:06Z",
            "2025-01-20T09:12:50Z",
            "2025-01-20T03:20:05Z",
            "2025-01-14T10:37:13Z",
            "2025-01-20T05:24:58Z",
            "2025-01-17T14:34:50Z",
            "2024-11-29T02:42:27Z",
            "2024-10-25T17:52:03Z",
            "2024-11-28T20:08:20Z",
            "2024-11-28T20:04:20Z",
            "2024-01-10T23:36:15Z",
            "2024-11-22T04:45:47Z",
            "2024-03-04T05:55:46Z",
            "2025-01-16T15:53:42Z",
            "2025-01-16T15:31:44Z",
            "2025-01-16T10:52:56Z",
            "2025-01-16T09:58:15Z",
            "2025-01-16T08:20:13Z",
            "2025-01-15T20:48:02Z",
            "2025-01-15T20:46:21Z",
            "2025-01-16T09:58:09Z"
        ],
        "creation_date": "2019-01-19T06:38:14Z",
        "contributors": 30,
        "topics": [
            "analytics",
            "big-data",
            "data-science",
            "database",
            "databases",
            "datalake",
            "delta-lake",
            "distributed-database",
            "distributed-systems",
            "hadoop",
            "hive",
            "iceberg",
            "java",
            "jdbc",
            "presto",
            "prestodb",
            "query-engine",
            "sql",
            "trino"
        ],
        "subscribers": 180,
        "readme": "<p align=\"center\">\n    <a href=\"https://trino.io/\"><img alt=\"Trino Logo\" src=\".github/homepage.png\" /></a>\n</p>\n<p align=\"center\">\n    <b>Trino is a fast distributed SQL query engine for big data analytics.</b>\n</p>\n<p align=\"center\">\n    See the <a href=\"https://trino.io/docs/current/\">User Manual</a> for deployment instructions and end user documentation.\n</p>\n<p align=\"center\">\n  <a href=\"https://trino.io/download.html\" style=\"text-decoration: none\">\n    <img src=\"https://img.shields.io/maven-central/v/io.trino/trino-server.svg?label=Trino\" alt=\"Trino download\" />\n  </a>\n  <a href=\"https://github.com/jvm-repo-rebuild/reproducible-central/blob/master/content/io/trino/README.md\" style=\"text-decoration: none\">\n    <img src=\"https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/jvm-repo-rebuild/reproducible-central/master/content/io/trino/badge.json\" alt=\"Reproducible builds supported\" />\n  </a>\n  <a href=\"https://trino.io/slack.html\"  style=\"text-decoration: none\">\n    <img src=\"https://img.shields.io/static/v1?logo=slack&logoColor=959DA5&label=Slack&labelColor=333a41&message=join%20conversation&color=3AC358\" alt=\"Trino Slack\" />\n  </a>\n  <a href=\"https://trino.io/trino-the-definitive-guide.html\"  style=\"text-decoration: none\">\n    <img src=\"https://img.shields.io/badge/Trino%3A%20The%20Definitive%20Guide-download-brightgreen\" alt=\"Trino: The Definitive Guide book download\" />\n  </a>\n</p>\n\n## Development\n\nLearn about development for all Trino organization projects:\n\n* [Vision](https://trino.io/development/vision)\n* [Contribution process](https://trino.io/development/process#contribution-process)\n* [Pull request and commit guidelines](https://trino.io/development/process#pull-request-and-commit-guidelines-)\n* [Release note guidelines](https://trino.io/development/process#release-note-guidelines-)\n\nFurther information in the [development section of the\nwebsite](https://trino.io/development) includes different roles, like\ncontributors, reviewers, and maintainers, related processes, and other aspects.\n\nSee [the Trino developer guide](https://trino.io/docs/current/develop.html) for\ninformation about the SPI, implementing connectors and other plugins plugins,\nthe client protocol, writing tests and other lower level details.\n\nSee [DEVELOPMENT](.github/DEVELOPMENT.md) for information about code style,\ndevelopment process, and guidelines.\n\nSee [CONTRIBUTING](.github/CONTRIBUTING.md) for contribution requirements.\n\n## Security\n\nSee the project [security policy](.github/SECURITY.md) for\ninformation about reporting vulnerabilities.\n\nTrino supports [reproducible builds](https://reproducible-builds.org) as of version 449.\n\n## Build requirements\n\n* Mac OS X or Linux\n* Java 23.0.0+, 64-bit\n* Docker\n  * Turn SELinux or other systems disabling write access to the local checkout\n    off, to allow containers to mount parts of the Trino source tree\n\n## Building Trino\n\nTrino is a standard Maven project. Simply run the following command from the\nproject root directory:\n\n    ./mvnw clean install -DskipTests\n\nOn the first build, Maven downloads all the dependencies from the internet\nand caches them in the local repository (`~/.m2/repository`), which can take a\nwhile, depending on your connection speed. Subsequent builds are faster.\n\nTrino has a comprehensive set of tests that take a considerable amount of time\nto run, and are thus disabled by the above command. These tests are run by the\nCI system when you submit a pull request. We recommend only running tests\nlocally for the areas of code that you change.\n\n## Running Trino in your IDE\n\n### Overview\n\nAfter building Trino for the first time, you can load the project into your IDE\nand run the server.  We recommend using\n[IntelliJ IDEA](http://www.jetbrains.com/idea/). Because Trino is a standard\nMaven project, you easily can import it into your IDE.  In IntelliJ, choose\n*Open Project* from the *Quick Start* box or choose *Open*\nfrom the *File* menu and select the root `pom.xml` file.\n\nAfter opening the project in IntelliJ, double check that the Java SDK is\nproperly configured for the project:\n\n* Open the File menu and select Project Structure\n* In the SDKs section, ensure that JDK 23 is selected (create one if none exist)\n* In the Project section, ensure the Project language level is set to 23\n\n### Running a testing server\n\nThe simplest way to run Trino for development is to run the `TpchQueryRunner`\nclass. It will start a development version of the server that is configured with\nthe TPCH connector. You can then use the CLI to execute queries against this\nserver. Many other connectors have their own `*QueryRunner` class that you can\nuse when working on a specific connector.\n\n### Running the full server\n\nTrino comes with sample configuration that should work out-of-the-box for\ndevelopment. Use the following options to create a run configuration:\n\n* Main Class: `io.trino.server.DevelopmentServer`\n* VM Options: `-ea -Dconfig=etc/config.properties -Dlog.levels-file=etc/log.properties -Djdk.attach.allowAttachSelf=true`\n* Working directory: `$MODULE_DIR$`\n* Use classpath of module: `trino-server-dev`\n\nThe working directory should be the `trino-server-dev` subdirectory. In\nIntelliJ, using `$MODULE_DIR$` accomplishes this automatically.\n\nIf `VM options` doesn't exist in the dialog, you need to select `Modify options`\nand enable `Add VM options`.\n\nTo adjust which plugins are enabled for the development server, adjust the value of\n`plugin.bundles` in `config.properties`. Each entry in this list must represent a plugin\nspecified by one of the following options:\n* A path to a `pom.xml` or `*.pom` file describing a Maven project that produces a plugin.\n* Maven coordinates, in the form `<groupId>:<artifactId>[:<extension>[:<classifier>]]:<version>`. The plugin will be loaded via Maven and therefore must be available in your local repository or a remote repository.\n* A path to a plugin directory containing JAR files. See [Deploying a custom plugin](https://trino.io/docs/current/develop/spi-overview.html#deploying-a-custom-plugin) for more details.\n\nIf you want to use a plugin in a catalog, you must add a corresponding\n`<catalog_name>.properties` file to `testing/trino-server-dev/etc/catalog`.\n\n### Running the CLI\n\nStart the CLI to connect to the server and run SQL queries:\n\n    client/trino-cli/target/trino-cli-*-executable.jar\n\nRun a query to see the nodes in the cluster:\n\n    SELECT * FROM system.runtime.nodes;\n\nRun a query against the TPCH connector:\n\n    SELECT * FROM tpch.tiny.region;\n",
        "releases": []
    }
}