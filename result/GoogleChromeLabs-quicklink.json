{
    "https://api.github.com/repos/GoogleChromeLabs/quicklink": {
        "forks": 407,
        "watchers": 11063,
        "stars": 11063,
        "languages": {
            "JavaScript": 91693,
            "SCSS": 7861
        },
        "commits": [
            "2024-07-25T04:34:00Z",
            "2024-07-25T04:20:25Z",
            "2024-07-25T04:17:47Z",
            "2024-05-12T12:18:54Z",
            "2024-05-12T12:14:05Z",
            "2024-05-12T12:12:32Z",
            "2024-05-09T06:04:35Z",
            "2024-05-09T05:47:31Z",
            "2024-05-09T05:20:51Z",
            "2024-04-24T05:33:56Z",
            "2024-04-24T05:31:48Z",
            "2024-05-04T05:22:10Z",
            "2024-05-04T05:21:58Z",
            "2024-02-21T04:34:07Z",
            "2024-02-21T04:32:33Z",
            "2024-02-21T04:32:15Z",
            "2023-10-31T19:19:26Z",
            "2023-10-31T19:19:09Z",
            "2023-10-31T19:18:53Z",
            "2023-10-03T05:41:25Z",
            "2023-09-06T05:38:04Z",
            "2023-09-06T05:37:15Z",
            "2023-09-06T05:30:23Z",
            "2023-08-20T06:33:38Z",
            "2023-08-14T15:16:25Z",
            "2023-08-14T15:13:08Z",
            "2023-08-14T15:11:13Z",
            "2023-08-14T15:07:49Z",
            "2023-08-14T14:59:57Z",
            "2023-08-14T14:50:46Z"
        ],
        "creation_date": "2018-11-23T20:10:04Z",
        "contributors": 30,
        "topics": [
            "performance",
            "prefetch",
            "prefetcher",
            "speed",
            "web-performance"
        ],
        "subscribers": 96,
        "readme": "<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/GoogleChromeLabs/quicklink/HEAD/assets/images/logos/banner-white-bg.png\" alt=\"\" width=\"640\">\n  <br>\n  <a href=\"https://www.npmjs.com/package/quicklink\">\n    <img src=\"https://img.shields.io/npm/v/quicklink?style=flat&logo=npm&logoColor=fff\" alt=\"npm\">\n  </a>\n  <a href=\"https://unpkg.com/quicklink\">\n    <img src=\"https://img.shields.io/bundlephobia/minzip/quicklink\" alt=\"gzip size\">\n  </a>\n  <a href=\"https://github.com/GoogleChromeLabs/quicklink/actions/workflows/ci.yml?query=workflow%3ACI+branch%3Amain\">\n    <img src=\"https://img.shields.io/github/actions/workflow/status/GoogleChromeLabs/quicklink/ci.yml?branch=main&label=ci&logo=github\" alt=\"ci\">\n  </a>\n</p>\n\n# quicklink\n\n> Faster subsequent page-loads by prefetching or prerendering in-viewport links during idle time\n\n## How it works\n\nQuicklink attempts to make navigations to subsequent pages load faster. It:\n\n- **Detects links within the viewport** (using [Intersection Observer](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API))\n- **Waits until the browser is idle** (using [requestIdleCallback](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback))\n- **Checks if the user isn't on a slow connection** (using `navigator.connection.effectiveType`) or has data-saver enabled (using `navigator.connection.saveData`)\n- **Prefetches** (using [`<link rel=prefetch>`](https://www.w3.org/TR/resource-hints/#prefetch) or XHR) or **prerenders** (using [Speculation Rules API](https://github.com/WICG/nav-speculation/blob/main/triggers.md)) URLs to the links. Provides some control over the request priority (can switch to `fetch()` if supported).\n\n## Why\n\nThis project aims to be a drop-in solution for sites to prefetch or prerender links based on what is in the user's viewport. It also aims to be small (**< 2KB minified/gzipped**).\n\n## Multi page apps\n\n### Installation\n\nFor use with [Node.js](https://nodejs.org/) and [npm](https://www.npmjs.com/):\n\n```sh\nnpm install quicklink\n```\n\nYou can also grab `quicklink` from [unpkg.com/quicklink](https://unpkg.com/quicklink).\n\n### Usage\n\nOnce initialized, `quicklink` will automatically prefetch URLs for links that are in-viewport during idle time.\n\nQuickstart:\n\n```html\n<!-- Include quicklink from dist -->\n<script src=\"dist/quicklink.umd.js\"></script>\n<!-- Initialize (you can do this whenever you want) -->\n<script>\n  quicklink.listen();\n</script>\n```\n\nFor example, you can initialize after the `load` event fires:\n\n```html\n<script>\n  window.addEventListener('load', () => {\n    quicklink.listen();\n  });\n</script>\n```\n\nES Module import:\n\n```js\nimport {listen, prefetch} from 'quicklink';\n```\n\n## Single page apps (React)\n\n### Installation\n\nFirst, install the packages with [Node.js](https://nodejs.org/) and [npm](https://www.npmjs.com/):\n\n```sh\nnpm install quicklink webpack-route-manifest --save-dev\n```\n\nThen, configure Webpack route manifest into your project, as explained [here](https://github.com/lukeed/webpack-route-manifest).\nThis will generate a map of routes and chunks called `rmanifest.json`. It can be obtained at:\n\n- URL: `site_url/rmanifest.json`\n- Window object: `window.__rmanifest`\n\n### Usage\n\nImport `quicklink` React HOC where want to add prefetching functionality.\nWrap your routes with the `withQuicklink()` HOC.\n\nExample:\n\n```jsx\nimport {withQuicklink} from 'quicklink/dist/react/hoc.js';\n\nconst options = {\n  origins: [],\n};\n\n<Suspense fallback={<div>Loading...</div>}>\n  <Route path='/' exact component={withQuicklink(Home, options)} />\n  <Route path='/blog' exact component={withQuicklink(Blog, options)} />\n  <Route path='/blog/:title' component={withQuicklink(Article, options)} />\n  <Route path='/about' exact component={withQuicklink(About, options)} />\n</Suspense>;\n```\n\n## API\n\n### quicklink.listen(options)\n\nReturns: `Function`\n\nA \"reset\" function is returned, which will empty the active `IntersectionObserver` and the cache of URLs that have already been prefetched or prerendered. This can be used between page navigations and/or when significant DOM changes have occurred.\n\n#### options.prerender\n\n- Type: `Boolean`\n- Default: `false`\n\nWhether to switch from the default prefetching mode to the prerendering mode for the links inside the viewport.\n\n> **Note:** The prerendering mode (when this option is set to true) will fallback to the prefetching mode if the browser does not support prerender.\n\n#### options.prerenderAndPrefetch\n\n* Type: `Boolean`\n* Default: `false`\n\nWhether to activate both the prefetching and prerendering mode at the same time.\n\n#### options.delay\n\n- Type: `Number`\n- Default: `0`\n\nThe _amount of time_ each link needs to stay inside the viewport before being prefetched, in milliseconds.\n\n#### options.el\n\n- Type: `HTMLElement|NodeList<A>`\n- Default: `document.body`\n\nThe DOM element to observe for in-viewport links to prefetch or the NodeList of Anchor Elements.\n\n#### options.limit\n\n- Type: `Number`\n- Default: `Infinity`\n\nThe _total_ requests that can be prefetched or prerendered while observing the `options.el` container.\n\n#### options.threshold\n\n- Type: `Number`\n- Default: `0`\n\nThe _area percentage_ of each link that must have entered the viewport to be fetched, in its decimal form (e.g. 0.25 = 25%).\n\n#### options.throttle\n\n- Type: `Number`\n- Default: `Infinity`\n\nThe _concurrency limit_ for simultaneous requests while observing the `options.el` container.\n\n#### options.timeout\n\n- Type: `Number`\n- Default: `2000`\n\nThe `requestIdleCallback` timeout, in milliseconds.\n\n> **Note:** The browser must be idle for the configured duration before prefetching.\n\n#### options.timeoutFn\n\n- Type: `Function`\n- Default: `requestIdleCallback`\n\nA function used for specifying a `timeout` delay.\n\nThis can be swapped out for a custom function like [networkIdleCallback](https://github.com/pastelsky/network-idle-callback) (see demos).\n\nBy default, this uses [`requestIdleCallback`](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback) or the embedded polyfill.\n\n#### options.priority\n\n- Type: `Boolean`\n- Default: `false`\n\nWhether or not the URLs within the `options.el` container should be treated as high priority.\n\nWhen `true`, quicklink will attempt to use the `fetch()` API if supported (rather than `link[rel=prefetch]`).\n\n#### options.origins\n\n- Type: `Array<String>`\n- Default: `[location.hostname]`\n\nA static array of URL hostnames that are allowed to be prefetched.\n\nDefaults to the same domain origin, which prevents _any_ cross-origin requests.\n\n**Important:** An empty array (`[]`) allows **_all origins_** to be prefetched.\n\n#### options.ignores\n\n- Type: `RegExp` or `Function` or `Array`\n- Default: `[]`\n\nDetermine if a URL should be prefetched.\n\nWhen a `RegExp` tests positive, a `Function` returns `true`, or an `Array` contains the string, then the URL is _not_ prefetched.\n\n> **Note:** An `Array` may contain `String`, `RegExp`, or `Function` values.\n\n> **Important:** This logic is executed _after_ origin matching!\n\n#### options.onError\n\n- Type: `Function`\n- Default: None\n\nAn optional error handler that will receive any errors from prefetched requests.\n\nBy default, these errors are silently ignored.\n\n#### options.hrefFn\n\n- Type: `Function`\n- Default: None\n\nAn optional function to generate the URL to prefetch. It receives an [Element](https://developer.mozilla.org/en-US/docs/Web/API/Element) as the argument.\n\n### quicklink.prefetch(urls, isPriority)\n\nReturns: `Promise`\n\nThe `urls` provided are always passed through `Promise.all`, which means the result will always resolve to an Array.\n\n> **Important:** You much `catch` you own request error(s).\n\n#### urls\n\n- Type: `String` or `Array<String>`\n- Required: `true`\n\nOne or many URLs to be prefetched.\n\n> **Note:** Each `url` value is resolved from the current location.\n\n#### isPriority\n\n- Type: `Boolean`\n- Default: `false`\n\nWhether or not the URL(s) should be treated as \"high priority\" targets.\n\nBy default, calls to `prefetch()` are low priority.\n\n> **Note:** This behaves identically to `listen()`'s `priority` option.\n\n### quicklink.prerender(urls)\n\nReturns: `Promise`\n\n> **Important:** You much `catch` you own request error(s).\n\n#### urls\n\n- Type: `String` or `Array<String>`\n- Required: `true`\n\nOne or many URLs to be prerendered.\n\n> **Note:** Speculative Rules API supports same-site cross origin Prerendering with [opt-in header](https://bit.ly/ss-cross-origin-pre).\n\n## Polyfills\n\n`quicklink`:\n\n- Includes a very small fallback for [requestIdleCallback](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback)\n- Requires `IntersectionObserver` to be supported (see [Can I Use](https://caniuse.com/intersectionobserver)). We recommend conditionally polyfilling this feature with a service like Polyfill.io:\n\n```html\n<script src=\"https://polyfill.io/v3/polyfill.min.js?features=IntersectionObserver\"></script>\n```\n\nAlternatively, see the [Intersection Observer polyfill](https://github.com/GoogleChromeLabs/intersection-observer).\n\n## Recipes\n\n### Set a custom timeout for prefetching resources\n\nDefaults to 2 seconds (via `requestIdleCallback`). Here we override it to 4 seconds:\n\n```js\nquicklink.listen({\n  timeout: 4000,\n});\n```\n\n### Set a specific Anchor Elements NodeList to observe for in-viewport links\n\nDefaults to `document` otherwise.\n\n```js\nquicklink.listen({\n  el: document.querySelectorAll('a.linksToPrefetch'),\n});\n```\n\n### Set the DOM element to observe for in-viewport links\n\nDefaults to `document` otherwise.\n\n```js\nquicklink.listen({\n  el: document.getElementById('carousel'),\n});\n```\n\n### Programmatically `prefetch()` URLs\n\nIf you would prefer to provide a static list of URLs to be prefetched, instead of detecting those in-viewport, customizing URLs is supported.\n\n```js\n// Single URL\nquicklink.prefetch('2.html');\n\n// Multiple URLs\nquicklink.prefetch(['2.html', '3.html', '4.js']);\n\n// Multiple URLs, with high priority\n// Note: Can also be use with single URL!\nquicklink.prefetch(['2.html', '3.html', '4.js'], true);\n```\n\n### Programmatically `prerender()` URLs\n\nIf you would prefer to provide a static list of URLs to be prerendered, instead of detecting those in-viewport, customizing URLs is supported.\n\n```js\n// Single URL\nquicklink.prerender('2.html');\n\n// Multiple URLs\nquicklink.prerender(['2.html', '3.html', '4.js']);\n```\n\n### Set the request priority for prefetches while scrolling\n\nDefaults to low-priority (`rel=prefetch` or XHR). For high-priority (`priority: true`), attempts to use `fetch()` or falls back to XHR.\n\n> **Note:** This runs `prefetch(..., true)` with URLs found within the `options.el` container.\n\n```js\nquicklink.listen({priority: true});\n```\n\n### Specify a custom list of allowed origins\n\nProvide a list of hostnames that should be prefetch-able. Only the same origin is allowed by default.\n\n> **Important:** You must also include your own hostname!\n\n```js\nquicklink.listen({\n  origins: [\n    // add mine\n    'my-website.com',\n    'api.my-website.com',\n    // add third-parties\n    'other-website.com',\n    'example.com',\n    // ...\n  ],\n});\n```\n\n### Allow all origins\n\nEnables all cross-origin requests to be made.\n\n> **Note:** You may run into [CORB](https://chromium.googlesource.com/chromium/src/+/main/services/network/cross_origin_read_blocking_explainer.md) and [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) issues!\n\n```js\nquicklink.listen({\n  origins: true,\n  // or\n  origins: [],\n});\n```\n\n### Custom Ignore Patterns\n\nThese filters run _after_ the `origins` matching has run. Ignores can be useful for avoiding large file downloads or for responding to DOM attributes dynamically.\n\n```js\n// Same-origin restraint is enabled by default.\n//\n// This example will ignore all requests to:\n//  - all \"/api/*\" pathnames\n//  - all \".zip\" extensions\n//  - all <a> tags with \"noprefetch\" attribute\n//\nquicklink.listen({\n  ignores: [\n    /\\/api\\/?/,\n    uri => uri.includes('.zip'),\n    (uri, elem) => elem.hasAttribute('noprefetch'),\n  ],\n});\n```\n\nYou may also wish to ignore prefetches to URLs which contain a URL fragment (e.g. `index.html#top`). This can be useful if you (1) are using anchors to headings in a page or (2) have URL fragments setup for a single-page application, and which to avoid firing prefetches for similar URLs.\n\nUsing `ignores` this can be achieved as follows:\n\n```js\nquicklink.listen({\n  ignores: [\n    uri => uri.includes('#'),\n    // or RegExp: /#(.+)/\n    // or element matching: (uri, elem) => !!elem.hash\n  ],\n});\n```\n\n### Custom URL to prefetch via hrefFn callback\n\nThe hrefFn method allows to build the URL to prefetch (e.g. API endpoint) on the fly instead of the prefetching the `href` attribute URL.\n\n```js\nquicklink.listen({\n  hrefFn(element) {\n    return element.href.replace('html', 'json');\n  },\n});\n```\n\n## Browser Support\n\nThe prefetching provided by `quicklink` can be viewed as a [progressive enhancement](https://www.smashingmagazine.com/2009/04/progressive-enhancement-what-it-is-and-how-to-use-it/). Cross-browser support is as follows:\n\n- Without polyfills: Chrome, Safari \u2265 12.1, Firefox, Edge, Opera, Android Browser, Samsung Internet.\n- With [Intersection Observer polyfill](https://github.com/GoogleChromeLabs/intersection-observer) ~6KB gzipped/minified: Safari \u2264 12.0, IE11\n- With the above and a [Set()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) and [Array.from](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from) polyfill: IE9 and IE10. [Core.js](https://github.com/zloirock/core-js) provides both `Set()` and `Array.from()` shims. Projects like [es6-shim](https://github.com/paulmillr/es6-shim/blob/master/README.md) are an alternative you can consider.\n\nCertain features have layered support:\n\n- The [Network Information API](https://wicg.github.io/netinfo/), which is used to check if the user has a slow effective connection type (via `navigator.connection.effectiveType`) is only available in [Chrome 61+ and Opera 57+](https://caniuse.com/netinfo)\n- If opting for `{priority: true}` and the [Fetch API](https://fetch.spec.whatwg.org/) isn't available, XHR will be used instead.\n\n## Using the prefetcher directly\n\nA `prefetch` method can be individually imported for use in other projects.\n\nThis method includes the logic to respect Data Saver and 2G connections. It also issues requests thru `fetch()`, XHRs, or `link[rel=prefetch]` depending on (a) the `isPriority` value and (b) the current browser's support.\n\nAfter installing `quicklink` as a dependency, you can use it as follows:\n\n```html\n<script type=\"module\">\n  import {prefetch} from 'quicklink';\n  prefetch(['1.html', '2.html']).catch(error => {\n    // Handle own errors\n  });\n</script>\n```\n\n## Demo\n\n### Glitch demos\n\n- [Using Quicklink in a multi-page site](https://github.com/GoogleChromeLabs/quicklink/tree/main/demos/news)\n- [Using Quicklink with Service Workers (via Workbox)](https://github.com/GoogleChromeLabs/quicklink/tree/main/demos/news-workbox)\n- [Using Quicklink to prefetch API calls instead of `href` attribute](https://github.com/GoogleChromeLabs/quicklink/tree/main/demos/hrefFn)\n- [Using Quicklink to prerender a specific page](https://uskay-prerender2.glitch.me/next.html)\n\n### Research\n\nHere's a [WebPageTest run](https://www.webpagetest.org/video/view.php?id=181212_4c294265117680f2636676721cc886613fe2eede&data=1) for our [demo](https://keyword-2-ecd7b.firebaseapp.com/) improving page-load performance by up to 4 seconds via quicklink's prefetching. A [video](https://youtu.be/rQ75YEbJicw) comparison of the before/after prefetching is on YouTube.\n\nFor demo purposes, we deployed a version of the [Google Blog](https://blog.google) on\nFirebase hosting. We then deployed another version of it, adding quicklink to the homepage and benchmarked navigating from the homepage to an article that was\nautomatically prefetched. The prefetched version loaded faster.\n\nPlease note: this is by no means an exhaustive benchmark of the pros and cons of in-viewport link prefetching. Just a demo of the potential improvements the approach can offer. Your own mileage may heavily vary.\n\n## Additional notes\n\n### Session Stitching\n\nCross-origin prefetching (e.g `a.com/foo.html` prefetches `b.com/bar.html`) has a number of limitations. One such limitation is with session-stitching. `b.com` may expect `a.com`'s navigation requests to include session information (e.g a temporary ID - e.g `b.com/bar.html?hash=<>&timestamp=<>`), where this information is used to customize the experience or log information to analytics. If session-stitching requires a timestamp in the URL, what is prefetched and stored in the HTTP cache may not be the same as the one the user ultimately navigates to. This introduces a challenge as it can result in double prefetches.\n\nTo workaround this problem, you can consider passing along session information via the [ping attribute](https://caniuse.com/ping) (separately) so the origin can stitch a session together asynchronously.\n\n### Ad-related considerations\n\nSites that rely on ads as a source of monetization should not prefetch ad-links, to avoid unintentionally counting clicks against those ad placements, which can lead to inflated Ad CTR (click-through-rate).\n\nAds appear on sites mostly in two ways:\n\n- **Inside iframes:** By default, most ad-servers render ads within iframes. In these cases, those ad-links won't be prefetched by Quicklink, unless a developer explicitly passes in the URL of an ads iframe. The reason is that the library look-up for in-viewport elements is restricted to those of the top-level origin.\n\n- **Outside iframes:**: In cases when the site shows same-origin ads, displayed in the top-level document (e.g. by hosting the ads themselves and by displaying the ads in the page directly), the developer needs to explicitly tell Quicklink to avoid prefetching these links. This can be achieved by passing the URL or subpath of the ad-link, or the element containing it to the [custom ignore patterns list](#custom-ignore-patterns).\n\n## Related projects\n\n- Using [Gatsby](https://gatsbyjs.org)? You already get most of this for free baked in. It uses `Intersection Observer` to prefetch all of the links that are in view and provided heavy inspiration for this project.\n- Want a more data-driven approach? See [Guess.js](https://guess-js.github.io). It uses analytics and machine-learning to prefetch resources based on how users navigate your site. It also has plugins for [Webpack](https://www.npmjs.com/package/guess-webpack) and [Gatsby](https://www.gatsbyjs.org/docs/optimizing-site-performance-with-guessjs/).\n- WordPress users can now get quicklink as a [WordPress Plugin from the plugin repository](https://wordpress.org/plugins/quicklink/).\n- Drupal users can install the [Quicklink Drupal module](https://www.drupal.org/project/quicklink).\n- Magento 2 users can install the [rafaelcg-magento2-quicklink](https://marketplace.magento.com/rafaelcg-magento2-quicklink.html) or [rangerz/magento2-module-quicklink](https://github.com/rangerz/magento2-module-quicklink).\n- Want less aggressive prefetching? [instant.page](https://instant.page/) prefetches on mouseover and touchstart, right before a click.\n\n## License\n\nLicensed under the [Apache-2.0 license](LICENSE).\n",
        "releases": [
            {
                "name": "",
                "date": "2023-03-30T06:08:57Z"
            },
            {
                "name": "",
                "date": "2023-03-30T06:08:22Z"
            },
            {
                "name": "2.1.0",
                "date": "2021-02-08T16:27:59Z"
            },
            {
                "name": "2.0.0",
                "date": "2021-01-13T01:31:18Z"
            },
            {
                "name": "2.0.0-alpha",
                "date": "2019-09-27T06:20:09Z"
            },
            {
                "name": "v1.0.1",
                "date": "2019-08-17T19:47:15Z"
            },
            {
                "name": "Quicklink 1.0.0",
                "date": "2018-12-15T22:43:09Z"
            }
        ]
    }
}