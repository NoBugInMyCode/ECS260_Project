{
    "https://api.github.com/repos/camsong/You-Dont-Need-jQuery": {
        "forks": 1747,
        "watchers": 20317,
        "stars": 20317,
        "languages": {
            "JavaScript": 4718
        },
        "commits": [
            "2023-04-13T03:37:43Z",
            "2023-04-12T10:47:02Z",
            "2023-02-08T10:59:05Z",
            "2023-02-07T16:21:19Z",
            "2022-05-26T13:03:27Z",
            "2022-05-21T18:17:08Z",
            "2022-05-21T18:16:57Z",
            "2021-09-01T06:28:38Z",
            "2021-08-31T13:00:36Z",
            "2021-07-17T00:25:01Z",
            "2021-06-02T14:53:30Z",
            "2021-06-02T14:50:17Z",
            "2021-05-23T16:38:56Z",
            "2021-05-23T16:23:05Z",
            "2021-05-23T16:13:51Z",
            "2021-05-23T15:51:47Z",
            "2021-05-23T15:49:42Z",
            "2021-05-23T15:37:57Z",
            "2021-05-23T15:37:53Z",
            "2021-05-23T15:37:34Z",
            "2021-04-15T10:41:03Z",
            "2020-02-27T21:39:33Z",
            "2020-01-10T03:40:15Z",
            "2020-01-10T03:30:06Z",
            "2019-11-26T06:21:51Z",
            "2019-11-26T06:18:07Z",
            "2019-11-26T06:17:32Z",
            "2019-11-26T06:17:10Z",
            "2019-10-15T13:54:40Z",
            "2019-09-28T06:36:58Z"
        ],
        "creation_date": "2015-11-21T16:02:26Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 529,
        "readme": "## You (Might) Don't Need jQuery\n\nFrontend environments evolve rapidly nowadays and modern browsers have already implemented a great deal of DOM/BOM APIs which are good enough for production use. We don't have to learn jQuery from scratch for DOM manipulation or event handling. In the meantime, thanks to the spread of frontend libraries such as React, Angular and Vue, manipulating the DOM directly becomes anti-pattern, so that jQuery usage has never been less important. This project summarizes most of the alternatives in native Javascript implementation to jQuery methods, with IE 10+ support.\n\n\u2139\ufe0f Notice: \n1. jQuery is still a great library and has many valid use cases. Don\u2019t migrate away if you don\u2019t want to!\n2. The alternatives are not completely equivalent in all scenarios, and it is recommended that you test it before using it.\n\n## Table of Contents\n\n1. [Translations](#translations)\n1. [Query Selector](#query-selector)\n1. [CSS & Style](#css--style)\n1. [DOM Manipulation](#dom-manipulation)\n1. [Ajax](#ajax)\n1. [Events](#events)\n1. [Utilities](#utilities)\n1. [Promises](#promises)\n1. [Animation](#animation)\n1. [Alternatives](#alternatives)\n1. [Browser Support](#browser-support)\n\n## Translations\n\n* [\ud55c\uad6d\uc5b4](./README.ko-KR.md)\n* [\u6b63\u9ad4\u4e2d\u6587](./README.zh-TW.md)\n* [\u7b80\u4f53\u4e2d\u6587](./README.zh-CN.md)\n* [Bahasa Melayu](./README-my.md)\n* [Bahasa Indonesia](./README-id.md)\n* [Portugu\u00eas(PT-BR)](./README.pt-BR.md)\n* [Ti\u1ebfng Vi\u1ec7t Nam](./README-vi.md)\n* [Espa\u00f1ol](./README-es.md)\n* [\u0420\u0443\u0441\u0441\u043a\u0438\u0439](./README-ru.md)\n* [\u041a\u044b\u0440\u0433\u044b\u0437\u0447\u0430](./README-kg.md)\n* [T\u00fcrk\u00e7e](./README-tr.md)\n* [Italiano](./README-it.md)\n* [Fran\u00e7ais](./README-fr.md)\n* [\u65e5\u672c\u8a9e](./README-ja.md)\n* [Polski](./README-pl.md)\n\n## Query Selector\n\nIn place of common selectors like class, id or attribute we can use `document.querySelector` or `document.querySelectorAll` for substitution. The differences lie in:\n* `document.querySelector` returns the first matched element\n* `document.querySelectorAll` returns all matched elements as NodeList. It can be converted to Array using `Array.prototype.slice.call(document.querySelectorAll(selector));` or any of the methods outlined in [makeArray](#makeArray)\n* If there are no elements matched, jQuery and `document.querySelectorAll` will return `[]`, whereas `document.querySelector` will return `null`.\n\n> Notice: `document.querySelector` and `document.querySelectorAll` are quite **SLOW**, thus try to use `document.getElementById`, `document.getElementsByClassName` or `document.getElementsByTagName` if you want to get a performance bonus.\n\n- [1.0](#1.0) <a name='1.0'></a> Query by selector\n\n  ```js\n  // jQuery\n  $('selector');\n\n  // Native\n  document.querySelectorAll('selector');\n  ```\n\n- [1.1](#1.1) <a name='1.1'></a> Query by class\n\n  ```js\n  // jQuery\n  $('.class');\n\n  // Native\n  document.querySelectorAll('.class');\n\n  // or\n  document.getElementsByClassName('class');\n  ```\n\n- [1.2](#1.2) <a name='1.2'></a> Query by id\n\n  ```js\n  // jQuery\n  $('#id');\n\n  // Native\n  document.querySelector('#id');\n\n  // or\n  document.getElementById('id');\n\n  // or\n  window['id']\n  ```\n\n- [1.3](#1.3) <a name='1.3'></a> Query by attribute\n\n  ```js\n  // jQuery\n  $('a[target=_blank]');\n\n  // Native\n  document.querySelectorAll('a[target=_blank]');\n  ```\n\n- [1.4](#1.4) <a name='1.4'></a> Query in descendants\n\n  ```js\n  // jQuery\n  $el.find('li');\n\n  // Native\n  el.querySelectorAll('li');\n  ```\n\n- [1.5](#1.5) <a name='1.5'></a> Sibling/Previous/Next Elements\n\n  + All siblings\n\n    ```js\n    // jQuery\n    $el.siblings();\n\n    // Native - latest, Edge13+\n    [...el.parentNode.children].filter((child) =>\n      child !== el\n    );\n    // Native (alternative) - latest, Edge13+\n    Array.from(el.parentNode.children).filter((child) =>\n      child !== el\n    );\n    // Native - IE10+\n    Array.prototype.filter.call(el.parentNode.children, (child) =>\n      child !== el\n    );\n    ```\n\n  + Previous sibling\n\n    ```js\n    // jQuery\n    $el.prev();\n\n    // Native\n    el.previousElementSibling;\n    ```\n  + Next sibling\n\n    ```js\n    // jQuery\n    $el.next();\n\n    // Native\n    el.nextElementSibling;\n    ```\n\n  + All previous siblings\n\n    ```js\n    // jQuery (optional filter selector)\n    $el.prevAll($filter);\n\n    // Native (optional filter function)\n    function getPreviousSiblings(elem, filter) {\n      var sibs = [];\n      while (elem = elem.previousSibling) {\n          if (elem.nodeType === 3) continue; // ignore text nodes\n          if (!filter || filter(elem)) sibs.push(elem);\n      }\n      return sibs;\n    }\n\n  + All next siblings\n\n    ```js\n    // jQuery (optional selector filter)\n    $el.nextAll($filter);\n\n    // Native (optional filter function)\n    function getNextSiblings(elem, filter) {\n            var sibs = [];\n            var nextElem = elem.parentNode.firstChild;\n            do {\n                if (nextElem.nodeType === 3) continue; // ignore text nodes\n                if (nextElem === elem) continue; // ignore elem of target\n                if (nextElem === elem.nextElementSibling) {\n                    if (!filter || filter(elem)) {\n                        sibs.push(nextElem);\n                        elem = nextElem;\n                    }\n                }\n            } while(nextElem = nextElem.nextSibling)\n            return sibs;\n        }\n\nAn example of filter function:\n\n```js\nfunction exampleFilter(elem) {\n  switch (elem.nodeName.toUpperCase()) {\n    case 'DIV':\n      return true;\n    case 'SPAN':\n      return true;\n    default:\n      return false;\n  }\n}\n```\n\n- [1.6](#1.6) <a name='1.6'></a> Closest\n\n  Return the first matched element by provided selector, traversing from current element up through its ancestors in the DOM tree.\n\n  ```js\n  // jQuery\n  $el.closest(selector);\n\n  // Native - Only latest, NO IE\n  el.closest(selector);\n\n  // Native - IE10+\n  function closest(el, selector) {\n    const matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;\n\n    while (el) {\n      if (matchesSelector.call(el, selector)) {\n        return el;\n      } else {\n        el = el.parentElement;\n      }\n    }\n    return null;\n  }\n  ```\n\n- [1.7](#1.7) <a name='1.7'></a> Parents Until\n\n  Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.\n\n  ```js\n  // jQuery\n  $el.parentsUntil(selector, filter);\n\n  // Native\n  function parentsUntil(el, selector, filter) {\n    const result = [];\n    const matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;\n\n    // match start from parent\n    el = el.parentElement;\n    while (el && !matchesSelector.call(el, selector)) {\n      if (!filter) {\n        result.push(el);\n      } else {\n        if (matchesSelector.call(el, filter)) {\n          result.push(el);\n        }\n      }\n      el = el.parentElement;\n    }\n    return result;\n  }\n  ```\n\n- [1.8](#1.8) <a name='1.8'></a> Form\n\n  + Input/Textarea\n\n    ```js\n    // jQuery\n    $('#my-input').val();\n\n    // Native\n    document.querySelector('#my-input').value;\n    ```\n\n  + Get index of e.currentTarget between `.radio`\n\n    ```js\n    // jQuery\n    $('.radio').index(e.currentTarget);\n\n    // Native\n    Array.from(document.querySelectorAll('.radio')).indexOf(e.currentTarget);\n    or\n    Array.prototype.indexOf.call(document.querySelectorAll('.radio'), e.currentTarget);\n    ```\n\n- [1.9](#1.9) <a name='1.9'></a> Iframe Contents\n\n  `$('iframe').contents()` returns `contentDocument` for this specific iframe\n\n  + Iframe contents\n\n    ```js\n    // jQuery\n    $iframe.contents();\n\n    // Native\n    iframe.contentDocument;\n    ```\n\n  + Iframe Query\n\n    ```js\n    // jQuery\n    $iframe.contents().find('.css');\n\n    // Native\n    iframe.contentDocument.querySelectorAll('.css');\n    ```\n\n- [1.10](#1.10) <a name='1.10'></a> Get body\n\n  ```js\n  // jQuery\n  $('body');\n\n  // Native\n  document.body;\n  ```\n\n- [1.11](#1.11) <a name='1.11'></a> Attribute getter and setter\n\n  + Get an attribute\n\n    ```js\n    // jQuery\n    $el.attr('foo');\n\n    // Native\n    el.getAttribute('foo');\n    ```\n  + Set an attribute\n\n    ```js\n    // jQuery\n    $el.attr('foo', 'bar');\n\n    // Native\n    el.setAttribute('foo', 'bar');\n    ```\n\n  + Get a `data-` attribute\n\n    ```js\n    // jQuery\n    $el.data('foo');\n\n    // Native (use `getAttribute`)\n    el.getAttribute('data-foo');\n\n    // Native (use `dataset` if only need to support IE 11+)\n    el.dataset['foo'];\n    ```\n\n- [1.12](#1.12) <a name='1.12'></a> Selector containing string (case-sensitive)\n\n    ```js\n    // jQuery\n    $(\"selector:contains('text')\");\n\n    // Native\n    function contains(selector, text) {\n      var elements = document.querySelectorAll(selector);\n      return Array.from(elements).filter(function(element) {\n        return RegExp(text).test(element.textContent);\n      });\n    }\n    ```\n\n**[\u2b06 back to top](#table-of-contents)**\n\n## CSS & Style\n\n- [2.1](#2.1) <a name='2.1'></a> CSS\n\n  + Get style\n\n    ```js\n    // jQuery\n    $el.css('color');\n\n    // Native\n    // NOTE: Known bug, will return 'auto' if style value is 'auto'\n    const win = el.ownerDocument.defaultView;\n\n    // null means not to return pseudo styles\n    win.getComputedStyle(el, null).color;\n    ```\n\n  + Set style\n\n    ```js\n    // jQuery\n    $el.css({ color: '#f01' });\n\n    // Native\n    el.style.color = '#f01';\n    ```\n\n  + Get/Set Styles\n\n    ```js\n    // jQuery\n    $el.css({ color: '#f01', 'border-color': '#f02' })\n    \n    // Native\n    Object.assign(el.style, { color: '#f01', borderColor: '#f02' }) \n    ```\n\n  + Add class\n\n    ```js\n    // jQuery\n    $el.addClass(className);\n\n    // Native\n    el.classList.add(className);\n    ```\n\n  + Remove class\n\n    ```js\n    // jQuery\n    $el.removeClass(className);\n\n    // Native\n    el.classList.remove(className);\n    ```\n\n  + has class\n\n    ```js\n    // jQuery\n    $el.hasClass(className);\n\n    // Native\n    el.classList.contains(className);\n    ```\n\n  + Toggle class\n\n    ```js\n    // jQuery\n    $el.toggleClass(className);\n\n    // Native\n    el.classList.toggle(className);\n    ```\n\n- [2.2](#2.2) <a name='2.2'></a> Width & Height\n\n  Width and Height are theoretically identical, take Height as example:\n\n  + Window height\n\n    ```js\n    // window height\n    $(window).height();\n\n    // without scrollbar, behaves like jQuery\n    window.document.documentElement.clientHeight;\n\n    // with scrollbar\n    window.innerHeight;\n    ```\n\n  + Document height\n\n    ```js\n    // jQuery\n    $(document).height();\n\n    // Native\n    const body = document.body;\n    const html = document.documentElement;\n    const height = Math.max(\n      body.offsetHeight,\n      body.scrollHeight,\n      html.clientHeight,\n      html.offsetHeight,\n      html.scrollHeight\n    );\n    ```\n\n  + Element height\n\n    ```js\n    // jQuery\n    $el.height();\n\n    // Native\n    function getHeight(el) {\n      const styles = window.getComputedStyle(el);\n      const height = el.offsetHeight;\n      const borderTopWidth = parseFloat(styles.borderTopWidth);\n      const borderBottomWidth = parseFloat(styles.borderBottomWidth);\n      const paddingTop = parseFloat(styles.paddingTop);\n      const paddingBottom = parseFloat(styles.paddingBottom);\n      return height - borderBottomWidth - borderTopWidth - paddingTop - paddingBottom;\n    }\n\n    // accurate to integer\uff08when `border-box`, it's `height - border`; when `content-box`, it's `height + padding`\uff09\n    el.clientHeight;\n\n    // accurate to decimal\uff08when `border-box`, it's `height`; when `content-box`, it's `height + padding + border`\uff09\n    el.getBoundingClientRect().height;\n    ```\n\n- [2.3](#2.3) <a name='2.3'></a> Position & Offset\n\n  + Position\n\n    Get the current coordinates of the element relative to the offset parent.\n\n    ```js\n    // jQuery\n    $el.position();\n\n    // Native\n    { left: el.offsetLeft, top: el.offsetTop }\n    ```\n\n  + Offset\n\n    Get the current coordinates of the element relative to the document.\n\n    ```js\n    // jQuery\n    $el.offset();\n\n    // Native\n    function getOffset (el) {\n      const box = el.getBoundingClientRect();\n\n      return {\n        top: box.top + window.pageYOffset - document.documentElement.clientTop,\n        left: box.left + window.pageXOffset - document.documentElement.clientLeft\n      };\n    }\n    ```\n\n- [2.4](#2.4) <a name='2.4'></a> Scroll Top\n\n  Get the current vertical position of the scroll bar for the element.\n\n  ```js\n  // jQuery\n  $(window).scrollTop();\n\n  // Native\n  (document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop;\n  ```\n\n**[\u2b06 back to top](#table-of-contents)**\n\n## DOM Manipulation\n\n- [3.1](#3.1) <a name='3.1'></a> Remove\n\n  Remove the element from the DOM.\n\n  ```js\n  // jQuery\n  $el.remove();\n\n  // Native\n  el.parentNode.removeChild(el);\n  ```\n\n- [3.2](#3.2) <a name='3.2'></a> Text\n\n  + Get text\n\n    Get the combined text contents of the element including their descendants,\n\n    ```js\n    // jQuery\n    $el.text();\n\n    // Native\n    el.textContent;\n    ```\n\n  + Set text\n\n    Set the content of the element to the specified text.\n\n    ```js\n    // jQuery\n    $el.text(string);\n\n    // Native\n    el.textContent = string;\n    ```\n\n- [3.3](#3.3) <a name='3.3'></a> HTML\n\n  + Get HTML\n\n    ```js\n    // jQuery\n    $el.html();\n\n    // Native\n    el.innerHTML;\n    ```\n\n  + Set HTML\n\n    ```js\n    // jQuery\n    $el.html(htmlString);\n\n    // Native\n    el.innerHTML = htmlString;\n    ```\n\n- [3.4](#3.4) <a name='3.4'></a> Append\n\n  Append child element after the last child of parent element\n\n  ```js\n  // jQuery: unified syntax for DOMString and Node objects\n  $parent.append(newEl | '<div id=\"container\">Hello World</div>');\n\n  // Native: different syntax\n  parent.insertAdjacentHTML('beforeend', '<div id=\"container\">Hello World</div>');\n  parent.appendChild(newEl);\n\n  // Native (ES6-way): unified syntax\n  parent.append(newEl | '<div id=\"container\">Hello World</div>');\n  ```\n\n- [3.5](#3.5) <a name='3.5'></a> Prepend\n\n  ```js\n  // jQuery: unified syntax for DOMString and Node objects\n  $parent.prepend(newEl | '<div id=\"container\">Hello World</div>');\n\n  // Native: different syntax\n  parent.insertAdjacentHTML('afterbegin', '<div id=\"container\">Hello World</div>');\n  parent.insertBefore(newEl, parent.firstChild);\n\n  // Native (ES6-way): unified syntax\n  parent.prepend(newEl | '<div id=\"container\">Hello World</div>');\n  ```\n\n- [3.6](#3.6) <a name='3.6'></a> insertBefore\n\n  Insert a new node before the selected elements\n\n  ```js\n  // jQuery\n  $newEl.insertBefore(selector);\n\n  // Native (HTML string)\n  el.insertAdjacentHTML('beforebegin ', '<div id=\"container\">Hello World</div>');\n\n  // Native (Element)\n  const el = document.querySelector(selector);\n  if (el.parentNode) {\n    el.parentNode.insertBefore(newEl, el);\n  }\n  ```\n\n- [3.7](#3.7) <a name='3.7'></a> insertAfter\n\n  Insert a new node after the selected elements\n\n  ```js\n  // jQuery\n  $newEl.insertAfter(selector);\n\n  // Native (HTML string)\n  el.insertAdjacentHTML('afterend', '<div id=\"container\">Hello World</div>');\n\n  // Native (Element)\n  const el = document.querySelector(selector);\n  if (el.parentNode) {\n    el.parentNode.insertBefore(newEl, el.nextSibling);\n  }\n  ```\n\n- [3.8](#3.8) <a name='3.8'></a> is\n\n  Return `true` if it matches the query selector\n\n  ```js\n  // jQuery - Notice `is` also works with a function, an existing jQuery object or a DOM element, which are not of concern here\n  $el.is(selector);\n\n  // Native\n  el.matches(selector);\n  ```\n- [3.9](#3.9) <a name='3.9'></a> clone\n\n  Create a deep copy of an element: it copies the matched element as well as all of its descendant elements and text nodes.\n\n  ```js\n  // jQuery. Sets parameter as `true` to indicate that event handlers should be copied along with the element.\n  $el.clone();\n\n  // Native\n  el.cloneNode();\n\n  ```\n\n- [3.10](#3.10) <a name='3.10'></a> empty\n\n  Remove all child nodes\n\n  ```js\n  // jQuery\n  $el.empty();\n\n  // Native\n  el.innerHTML = null;\n  ```\n\n- [3.11](#3.11) <a name='3.11'></a> wrap\n\n  Wrap an HTML structure around each element\n\n  ```js\n  // jQuery\n  $('.inner').wrap('<div class=\"wrapper\"></div>');\n\n  // Native\n  Array.from(document.querySelectorAll('.inner')).forEach((el) => {\n    const wrapper = document.createElement('div');\n    wrapper.className = 'wrapper';\n    el.parentNode.insertBefore(wrapper, el);\n    wrapper.appendChild(el);\n  });\n  ```\n\n- [3.12](#3.12) <a name='3.12'></a> unwrap\n\n  Remove the parents of the set of matched elements from the DOM\n\n  ```js\n  // jQuery\n  $('.inner').unwrap();\n\n  // Native\n  Array.from(document.querySelectorAll('.inner')).forEach((el) => {\n    let elParentNode = el.parentNode;\n\n    if(elParentNode !== document.body) {\n        elParentNode.parentNode.insertBefore(el, elParentNode);\n        elParentNode.parentNode.removeChild(elParentNode);\n    }\n  });\n  ```\n\n- [3.13](#3.13) <a name='3.13'></a> replaceWith\n\n  Replace each element in the set of matched elements with the provided new content\n\n  ```js\n  // jQuery\n  $('.inner').replaceWith('<div class=\"outer\"></div>');\n\n  // Native (alternative) - latest, Edge17+\n  Array.from(document.querySelectorAll('.inner')).forEach((el) => {\n    const outer = document.createElement('div');\n    outer.className = 'outer';\n    el.replaceWith(outer);\n  });\n\n  // Native\n  Array.from(document.querySelectorAll('.inner')).forEach((el) => {\n    const outer = document.createElement('div');\n    outer.className = 'outer';\n    el.parentNode.replaceChild(outer, el);\n  });\n  ```\n\n- [3.14](#3.14) <a name='3.14'></a> simple parse\n\n  Parse a string into HTML/SVG/XML\n\n  ```js\n  // jQuery\n  $(`<ol>\n    <li>a</li>\n    <li>b</li>\n  </ol>\n  <ol>\n    <li>c</li>\n    <li>d</li>\n  </ol>`);\n\n  // Native\n  range = document.createRange();\n  parse = range.createContextualFragment.bind(range);\n\n  parse(`<ol>\n    <li>a</li>\n    <li>b</li>\n  </ol>\n  <ol>\n    <li>c</li>\n    <li>d</li>\n  </ol>`);\n  ```\n\n\n**[\u2b06 back to top](#table-of-contents)**\n\n## Ajax\n\n[Fetch API](https://fetch.spec.whatwg.org/) is the new standard to replace XMLHttpRequest to do ajax. It works on Chrome and Firefox, you can use polyfills to make it work on legacy browsers.\n\nTry [github/fetch](http://github.com/github/fetch) on IE9+ or [fetch-ie8](https://github.com/camsong/fetch-ie8/) on IE8+, [fetch-jsonp](https://github.com/camsong/fetch-jsonp) to make JSONP requests.\n\n- [4.1](#4.1) <a name='4.1'></a> Load data from the server and place the returned HTML into the matched element.\n\n  ```js\n  // jQuery\n  $(selector).load(url, completeCallback)\n\n  // Native\n  fetch(url).then(data => data.text()).then(data => {\n    document.querySelector(selector).innerHTML = data\n  }).then(completeCallback)\n  ```\n\n**[\u2b06 back to top](#table-of-contents)**\n\n## Events\n\nFor a complete replacement with namespace and delegation, refer to https://github.com/oneuijs/oui-dom-events\n\n- [5.0](#5.0) <a name='5.0'></a> Document ready by `DOMContentLoaded`\n\n  ```js\n    // jQuery\n    $(document).ready(eventHandler);\n\n    // Native\n    // Check if the DOMContentLoaded has already been completed\n    if (document.readyState !== 'loading') {\n      eventHandler();\n    } else {\n      document.addEventListener('DOMContentLoaded', eventHandler);\n    }\n\n    // Native \n    // Example 2 - Ternary Operator - Async\n    // Check if the DOMContentLoaded has already been completed\n    (async function() {\n      (document.readyState !== 'loading') ?\n        eventHandler() : document.addEventListener('DOMContentLoaded',\n          function() {\n            eventHandler(); // EventHandler\n          });\n    })();\n\n    // Native\n    // Example 3 - Ternary Operator - Non Async\n    // Check if the DOMContentLoaded has already been completed\n    (function() {\n      (document.readyState !== 'loading') ?\n        eventHandler() : document.addEventListener('DOMContentLoaded',\n          function() {\n            eventHandler(); // EventHandler\n          });\n    })();\n  ``` \n\n- [5.1](#5.1) <a name='5.1'></a> Bind an event with on\n\n  ```js\n  // jQuery\n  $el.on(eventName, eventHandler);\n\n  // Native\n  el.addEventListener(eventName, eventHandler);\n  ```\n\n- [5.2](#5.2) <a name='5.2'></a> Unbind an event with off\n\n  ```js\n  // jQuery\n  $el.off(eventName, eventHandler);\n\n  // Native\n  el.removeEventListener(eventName, eventHandler);\n  ```\n\n- [5.3](#5.3) <a name='5.3'></a> Trigger\n\n  ```js\n  // jQuery\n  $(el).trigger('custom-event', {key1: 'data'});\n\n  // Native\n  if (window.CustomEvent) {\n    const event = new CustomEvent('custom-event', {detail: {key1: 'data'}});\n  } else {\n    const event = document.createEvent('CustomEvent');\n    event.initCustomEvent('custom-event', true, true, {key1: 'data'});\n  }\n\n  el.dispatchEvent(event);\n  ```\n\n**[\u2b06 back to top](#table-of-contents)**\n\n## Utilities\n\nMost of jQuery utilities are also found in the native API. Other advanced functions could be chosen from better utilities libraries, focusing on consistency and performance. [Lodash](https://lodash.com) is a recommended replacement.\n\n- [6.1](#6.1) <a name='6.1'></a> Basic utilities\n\n  + isArray\n\n  Determine whether the argument is an array.\n\n  ```js\n  // jQuery\n  $.isArray(array);\n\n  // Native\n  Array.isArray(array);\n  ```\n\n  + isWindow\n\n  Determine whether the argument is a window.\n\n  ```js\n  // jQuery\n  $.isWindow(obj);\n\n  // Native\n  function isWindow(obj) {\n    return obj !== null && obj !== undefined && obj === obj.window;\n  }\n  ```\n\n  + inArray\n\n  Search for a specified value within an array and return its index (or -1 if not found).\n\n  ```js\n  // jQuery\n  $.inArray(item, array);\n\n  // Native\n  array.indexOf(item) > -1;\n\n  // ES6-way\n  array.includes(item);\n  ```\n\n  + isNumeric\n\n  Determine if the argument passed is numerical.\n  Use `typeof` to decide the type or the `type` example for better accuracy.\n\n  ```js\n  // jQuery\n  $.isNumeric(item);\n\n  // Native\n  function isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n  ```\n\n  + isFunction\n\n  Determine if the argument passed is a JavaScript function object.\n\n  ```js\n  // jQuery\n  $.isFunction(item);\n\n  // Native\n  function isFunction(item) {\n    if (typeof item === 'function') {\n      return true;\n    }\n    var type = Object.prototype.toString.call(item);\n    return type === '[object Function]' || type === '[object GeneratorFunction]';\n  }\n  ```\n\n  + isEmptyObject\n\n  Check to see if an object is empty (contains no enumerable properties).\n\n  ```js\n  // jQuery\n  $.isEmptyObject(obj);\n\n  // Native\n  function isEmptyObject(obj) {\n    return Object.keys(obj).length === 0;\n  }\n  ```\n\n  + isPlainObject\n\n  Check to see if an object is a plain object (created using \u201c{}\u201d or \u201cnew Object\u201d).\n\n  ```js\n  // jQuery\n  $.isPlainObject(obj);\n\n  // Native\n  function isPlainObject(obj) {\n    if (typeof (obj) !== 'object' || obj.nodeType || obj !== null && obj !== undefined && obj === obj.window) {\n      return false;\n    }\n\n    if (obj.constructor &&\n        !Object.prototype.hasOwnProperty.call(obj.constructor.prototype, 'isPrototypeOf')) {\n      return false;\n    }\n\n    return true;\n  }\n  ```\n\n  + extend\n\n  Merge the contents of two or more objects together into a new object, without modifying either argument.\n  object.assign is part of ES6 API, and you could also use a [polyfill](https://github.com/ljharb/object.assign).\n\n  ```js\n  // jQuery\n  $.extend({}, object1, object2);\n\n  // Native\n  Object.assign({}, object1, object2);\n  ```\n\n  + trim\n\n  Remove the white-space from the beginning and end of a string.\n\n  ```js\n  // jQuery\n  $.trim(string);\n\n  // Native\n  string.trim();\n  ```\n\n  + map\n\n  Translate all items in an array or object to new array of items.\n\n  ```js\n  // jQuery\n  $.map(array, (value, index) => {\n  });\n\n  // Native\n  array.map((value, index) => {\n  });\n  ```\n\n  + each\n\n  A generic iterator function, which can be used to seamlessly iterate over both objects and arrays.\n\n  ```js\n  // jQuery\n  $.each(array, (index, value) => {\n  });\n\n  // Native\n  array.forEach((value, index) => {\n  });\n  ```\n\n  + grep\n\n  Finds the elements of an array which satisfy a filter function.\n\n  ```js\n  // jQuery\n  $.grep(array, (value, index) => {\n  });\n\n  // Native\n  array.filter((value, index) => {\n  });\n  ```\n\n  + type\n\n  Determine the internal JavaScript [Class] of an object.\n\n  ```js\n  // jQuery\n  $.type(obj);\n\n  // Native\n  function type(item) {\n    const reTypeOf = /(?:^\\[object\\s(.*?)\\]$)/;\n    return Object.prototype.toString.call(item)\n      .replace(reTypeOf, '$1')\n      .toLowerCase();\n  }\n  ```\n\n  + merge\n\n  Merge the contents of two arrays together into the first array.\n\n  ```js\n  // jQuery, doesn't remove duplicate items\n  $.merge(array1, array2);\n\n  // Native, doesn't remove duplicate items\n  function merge(...args) {\n    return [].concat(...args)\n  }\n\n  // ES6-way, doesn't remove duplicate items\n  array1 = [...array1, ...array2]\n\n  // Set version, does remove duplicate items\n  function merge(...args) {\n    return Array.from(new Set([].concat(...args)))\n  }\n  ```\n\n  + now\n\n  Return a number representing the current time.\n\n  ```js\n  // jQuery\n  $.now();\n\n  // Native\n  Date.now();\n  ```\n\n  + proxy\n\n  Takes a function and returns a new one that will always have a particular context.\n\n  ```js\n  // jQuery\n  $.proxy(fn, context);\n\n  // Native\n  fn.bind(context);\n  ```\n\n  <a name=\"makeArray\"></a>+ makeArray\n\n  Convert an array-like object into a true JavaScript array.\n\n  ```js\n  // jQuery\n  $.makeArray(arrayLike);\n\n  // Native\n  Array.prototype.slice.call(arrayLike);\n\n  // ES6-way: Array.from() method\n  Array.from(arrayLike);\n\n  // ES6-way: spread operator\n  [...arrayLike];\n  ```\n\n- [6.2](#6.2) <a name='6.2'></a> Contains\n\n  Check to see if a DOM element is a descendant of another DOM element.\n\n  ```js\n  // jQuery\n  $.contains(el, child);\n\n  // Native\n  el !== child && el.contains(child);\n  ```\n\n- [6.3](#6.3) <a name='6.3'></a> Globaleval\n\n  Execute some JavaScript code globally.\n\n  ```js\n  // jQuery\n  $.globaleval(code);\n\n  // Native\n  function Globaleval(code) {\n    const script = document.createElement('script');\n    script.text = code;\n\n    document.head.appendChild(script).parentNode.removeChild(script);\n  }\n\n  // Use eval, but context of eval is current, context of $.Globaleval is global.\n  eval(code);\n  ```\n\n- [6.4](#6.4) <a name='6.4'></a> parse\n\n  + parseHTML\n\n  Parses a string into an array of DOM nodes.\n\n  ```js\n  // jQuery\n  $.parseHTML(htmlString);\n\n  // Native\n  function parseHTML(string) {\n    const context = document.implementation.createHTMLDocument();\n\n    // Set the base href for the created document so any parsed elements with URLs\n    // are based on the document's URL\n    const base = context.createElement('base');\n    base.href = document.location.href;\n    context.head.appendChild(base);\n\n    context.body.innerHTML = string;\n    return context.body.children;\n  }\n  ```\n- [6.5](#6.4) <a name='6.5'></a> exists\n\n+ exists\n\n  Check if an element exists in the DOM\n\n  ```js\n  // jQuery\n  if ($('selector').length) {\n     // exists\n  }\n\n  // Native\n  var element =  document.getElementById('elementId');\n  if (typeof(element) != 'undefined' && element != null)\n  {\n     // exists\n  }\n  ```\n\n**[\u2b06 back to top](#table-of-contents)**\n\n## Promises\n\nA promise represents the eventual result of an asynchronous operation. jQuery has its own way to handle promises. Native JavaScript implements a thin and minimal API to handle promises according to the [Promises/A+](http://promises-aplus.github.io/promises-spec/) specification.\n\n- [7.1](#7.1) <a name='7.1'></a> done, fail, always\n\n  `done` is called when promise is resolved, `fail` is called when promise is rejected, `always` is called when promise is either resolved or rejected.\n\n  ```js\n  // jQuery\n  $promise.done(doneCallback).fail(failCallback).always(alwaysCallback)\n\n  // Native\n  promise.then(doneCallback, failCallback).then(alwaysCallback, alwaysCallback)\n  ```\n\n- [7.2](#7.2) <a name='7.2'></a> when\n\n  `when` is used to handle multiple promises. It will resolve when all promises are resolved, and reject if either one is rejected.\n\n  ```js\n  // jQuery\n  $.when($promise1, $promise2).done((promise1Result, promise2Result) => {\n  });\n\n  // Native\n  Promise.all([$promise1, $promise2]).then([promise1Result, promise2Result] => {});\n  ```\n\n- [7.3](#7.3) <a name='7.3'></a> Deferred\n\n  Deferred is a way to create promises.\n\n  ```js\n  // jQuery\n  function asyncFunc() {\n    const defer = new $.Deferred();\n    setTimeout(() => {\n      if(true) {\n        defer.resolve('some_value_computed_asynchronously');\n      } else {\n        defer.reject('failed');\n      }\n    }, 1000);\n\n    return defer.promise();\n  }\n\n  // Native\n  function asyncFunc() {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (true) {\n          resolve('some_value_computed_asynchronously');\n        } else {\n          reject('failed');\n        }\n      }, 1000);\n    });\n  }\n\n  // Deferred way\n  function defer() {\n    const deferred = {};\n    const promise = new Promise((resolve, reject) => {\n      deferred.resolve = resolve;\n      deferred.reject = reject;\n    });\n\n    deferred.promise = () => {\n      return promise;\n    };\n\n    return deferred;\n  }\n\n  function asyncFunc() {\n    const defer = defer();\n    setTimeout(() => {\n      if(true) {\n        defer.resolve('some_value_computed_asynchronously');\n      } else {\n        defer.reject('failed');\n      }\n    }, 1000);\n\n    return defer.promise();\n  }\n  ```\n\n**[\u2b06 back to top](#table-of-contents)**\n\n## Animation\n\n- [8.1](#8.1) <a name='8.1'></a> Show & Hide\n\n  ```js\n  // jQuery\n  $el.show();\n  $el.hide();\n\n  // Native\n  // More detail about show method, please refer to https://github.com/oneuijs/oui-dom-utils/blob/master/src/index.js#L363\n  el.style.display = ''|'inline'|'inline-block'|'inline-table'|'block';\n  el.style.display = 'none';\n  ```\n\n- [8.2](#8.2) <a name='8.2'></a> Toggle\n\n  Display or hide the element.\n\n  ```js\n  // jQuery\n  $el.toggle();\n\n  // Native\n  if (el.ownerDocument.defaultView.getComputedStyle(el, null).display === 'none') {\n    el.style.display = ''|'inline'|'inline-block'|'inline-table'|'block';\n  } else {\n    el.style.display = 'none';\n  }\n  ```\n\n- [8.3](#8.3) <a name='8.3'></a> FadeIn & FadeOut\n\n  ```js\n  // jQuery\n  $el.fadeIn(3000);\n  $el.fadeOut(3000);\n\n  // Native fadeOut\n  function fadeOut(el, ms) {\n    if (ms) {\n      el.style.transition = `opacity ${ms} ms`;\n      el.addEventListener(\n        'transitionend',\n        function(event) {\n          el.style.display = 'none';\n        },\n        false\n      );\n    }\n    el.style.opacity = '0';\n  }\n\n  // Native fadeIn\n  function fadeIn(elem, ms) {\n    elem.style.opacity = 0;\n\n    if (ms) {\n      let opacity = 0;\n      const timer = setInterval(function() {\n        opacity += 50 / ms;\n        if (opacity >= 1) {\n          clearInterval(timer);\n          opacity = 1;\n        }\n        elem.style.opacity = opacity;\n      }, 50);\n    } else {\n      elem.style.opacity = 1;\n    }\n  }\n  ```\n\n- [8.4](#8.4) <a name='8.4'></a> FadeTo\n\n  Adjust the opacity of the element.\n\n  ```js\n  // jQuery\n  $el.fadeTo('slow',0.15);\n  // Native\n  el.style.transition = 'opacity 3s'; // assume 'slow' equals 3 seconds\n  el.style.opacity = '0.15';\n  ```\n\n- [8.5](#8.5) <a name='8.5'></a> FadeToggle\n\n  Display or hide the element by animating their opacity.\n\n  ```js\n  // jQuery\n  $el.fadeToggle();\n\n  // Native\n  el.style.transition = 'opacity 3s';\n  const { opacity } = el.ownerDocument.defaultView.getComputedStyle(el, null);\n  if (opacity === '1') {\n    el.style.opacity = '0';\n  } else {\n    el.style.opacity = '1';\n  }\n  ```\n\n- [8.6](#8.6) <a name='8.6'></a> SlideUp & SlideDown\n\n  ```js\n  // jQuery\n  $el.slideUp();\n  $el.slideDown();\n\n  // Native\n  const originHeight = '100px';\n  el.style.transition = 'height 3s';\n  // slideUp\n  el.style.height = '0px';\n  // slideDown\n  el.style.height = originHeight;\n  ```\n\n- [8.7](#8.7) <a name='8.7'></a> SlideToggle\n\n  Display or hide the element with a sliding motion.\n\n  ```js\n  // jQuery\n  $el.slideToggle();\n\n  // Native\n  const originHeight = '100px';\n  el.style.transition = 'height 3s';\n  const { height } = el.ownerDocument.defaultView.getComputedStyle(el, null);\n  if (parseInt(height, 10) === 0) {\n    el.style.height = originHeight;\n  } else {\n   el.style.height = '0px';\n  }\n  ```\n\n- [8.8](#8.8) <a name='8.8'></a> Animate\n\n  Perform a custom animation of a set of CSS properties.\n\n  ```js\n  // jQuery\n  $el.animate({ params }, speed);\n\n  // Native\n  el.style.transition = 'all ' + speed;\n  Object.keys(params).forEach((key) => {\n    el.style[key] = params[key];\n  });\n  ```\n\n## Alternatives\n\n* [You Might Not Need jQuery](http://youmightnotneedjquery.com/) - Examples of how to do common event, element, ajax etc with plain javascript.\n* [npm-dom](http://github.com/npm-dom) and [webmodules](http://github.com/webmodules) - Organizations you can find individual DOM modules on NPM\n\n## Browser Support\n\n![Chrome][chrome-image] | ![Firefox][firefox-image] | ![IE][ie-image] | ![Opera][opera-image] | ![Safari][safari-image]\n--- | --- | --- | --- | --- |\nLatest \u2714 | Latest \u2714 | 10+ \u2714 | Latest \u2714 | 6.1+ \u2714 |\n\n# License\n\nMIT\n\n[chrome-image]: https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png\n[firefox-image]: https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png\n[ie-image]: https://raw.github.com/alrra/browser-logos/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png\n[opera-image]: https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png\n[safari-image]: https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png\n",
        "releases": [
            {
                "name": "Release 2.0",
                "date": "2016-01-13T10:04:28Z"
            }
        ]
    }
}