{
    "https://api.github.com/repos/PyO3/pyo3": {
        "forks": 788,
        "watchers": 12831,
        "stars": 12831,
        "languages": {
            "Rust": 2955452,
            "Python": 74353,
            "Shell": 4591,
            "Makefile": 2794,
            "HTML": 1425,
            "C": 93
        },
        "commits": [
            "2025-01-20T17:02:59Z",
            "2025-01-15T18:31:05Z",
            "2025-01-15T08:08:52Z",
            "2025-01-15T07:38:25Z",
            "2025-01-10T07:01:43Z",
            "2025-01-09T23:44:59Z",
            "2025-01-08T22:57:37Z",
            "2025-01-08T20:08:52Z",
            "2025-01-02T22:03:22Z",
            "2025-01-02T06:45:10Z",
            "2025-01-01T14:49:39Z",
            "2025-01-01T14:01:19Z",
            "2024-12-31T22:00:09Z",
            "2024-12-31T21:59:19Z",
            "2024-12-31T21:58:58Z",
            "2024-12-24T12:48:32Z",
            "2024-12-24T10:57:40Z",
            "2024-12-23T21:04:28Z",
            "2024-12-23T19:05:56Z",
            "2024-12-23T16:07:06Z",
            "2024-12-23T16:04:12Z",
            "2024-12-23T13:53:51Z",
            "2024-12-18T17:21:55Z",
            "2024-12-18T15:39:54Z",
            "2024-12-16T19:14:13Z",
            "2024-12-12T18:52:03Z",
            "2024-12-12T18:20:13Z",
            "2024-12-11T17:33:39Z",
            "2024-12-08T21:26:00Z",
            "2024-12-06T22:02:16Z"
        ],
        "creation_date": "2017-05-13T05:22:06Z",
        "contributors": 30,
        "topics": [
            "binding",
            "ffi",
            "python",
            "python-c-api",
            "rust"
        ],
        "subscribers": 104,
        "readme": "# PyO3\n\n[![actions status](https://img.shields.io/github/actions/workflow/status/PyO3/pyo3/ci.yml?branch=main&logo=github&style=)](https://github.com/PyO3/pyo3/actions)\n[![benchmark](https://img.shields.io/endpoint?url=https://codspeed.io/badge.json)](https://codspeed.io/PyO3/pyo3)\n[![codecov](https://img.shields.io/codecov/c/gh/PyO3/pyo3?logo=codecov)](https://codecov.io/gh/PyO3/pyo3)\n[![crates.io](https://img.shields.io/crates/v/pyo3?logo=rust)](https://crates.io/crates/pyo3)\n[![minimum rustc 1.63](https://img.shields.io/badge/rustc-1.63+-blue?logo=rust)](https://rust-lang.github.io/rfcs/2495-min-rust-version.html)\n[![discord server](https://img.shields.io/discord/1209263839632424990?logo=discord)](https://discord.gg/33kcChzH7f)\n[![contributing notes](https://img.shields.io/badge/contribute-on%20github-Green?logo=github)](https://github.com/PyO3/pyo3/blob/main/Contributing.md)\n\n[Rust](https://www.rust-lang.org/) bindings for [Python](https://www.python.org/), including tools for creating native Python extension modules. Running and interacting with Python code from a Rust binary is also supported.\n\n- User Guide: [stable](https://pyo3.rs) | [main](https://pyo3.rs/main)\n\n- API Documentation: [stable](https://docs.rs/pyo3/) | [main](https://pyo3.rs/main/doc)\n\n## Usage\n\nRequires Rust 1.63 or greater.\n\nPyO3 supports the following Python distributions:\n  - CPython 3.7 or greater\n  - PyPy 7.3 (Python 3.9+)\n  - GraalPy 24.0 or greater (Python 3.10+)\n\nYou can use PyO3 to write a native Python module in Rust, or to embed Python in a Rust binary. The following sections explain each of these in turn.\n\n### Using Rust from Python\n\nPyO3 can be used to generate a native Python module. The easiest way to try this out for the first time is to use [`maturin`](https://github.com/PyO3/maturin). `maturin` is a tool for building and publishing Rust-based Python packages with minimal configuration. The following steps install `maturin`, use it to generate and build a new Python package, and then launch Python to import and execute a function from the package.\n\nFirst, follow the commands below to create a new directory containing a new Python `virtualenv`, and install `maturin` into the virtualenv using Python's package manager, `pip`:\n\n```bash\n# (replace string_sum with the desired package name)\n$ mkdir string_sum\n$ cd string_sum\n$ python -m venv .env\n$ source .env/bin/activate\n$ pip install maturin\n```\n\nStill inside this `string_sum` directory, now run `maturin init`. This will generate the new package source. When given the choice of bindings to use, select pyo3 bindings:\n\n```bash\n$ maturin init\n\u2714 \ud83e\udd37 What kind of bindings to use? \u00b7 pyo3\n  \u2728 Done! New project created string_sum\n```\n\nThe most important files generated by this command are `Cargo.toml` and `lib.rs`, which will look roughly like the following:\n\n**`Cargo.toml`**\n\n```toml\n[package]\nname = \"string_sum\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[lib]\n# The name of the native library. This is the name which will be used in Python to import the\n# library (i.e. `import string_sum`). If you change this, you must also change the name of the\n# `#[pymodule]` in `src/lib.rs`.\nname = \"string_sum\"\n# \"cdylib\" is necessary to produce a shared library for Python to import from.\n#\n# Downstream Rust code (including code in `bin/`, `examples/`, and `tests/`) will not be able\n# to `use string_sum;` unless the \"rlib\" or \"lib\" crate type is also included, e.g.:\n# crate-type = [\"cdylib\", \"rlib\"]\ncrate-type = [\"cdylib\"]\n\n[dependencies]\npyo3 = { version = \"0.23.3\", features = [\"extension-module\"] }\n```\n\n**`src/lib.rs`**\n\n```rust\nuse pyo3::prelude::*;\n\n/// Formats the sum of two numbers as string.\n#[pyfunction]\nfn sum_as_string(a: usize, b: usize) -> PyResult<String> {\n    Ok((a + b).to_string())\n}\n\n/// A Python module implemented in Rust. The name of this function must match\n/// the `lib.name` setting in the `Cargo.toml`, else Python will not be able to\n/// import the module.\n#[pymodule]\nfn string_sum(m: &Bound<'_, PyModule>) -> PyResult<()> {\n    m.add_function(wrap_pyfunction!(sum_as_string, m)?)?;\n    Ok(())\n}\n```\n\nFinally, run `maturin develop`. This will build the package and install it into the Python virtualenv previously created and activated. The package is then ready to be used from `python`:\n\n```bash\n$ maturin develop\n# lots of progress output as maturin runs the compilation...\n$ python\n>>> import string_sum\n>>> string_sum.sum_as_string(5, 20)\n'25'\n```\n\nTo make changes to the package, just edit the Rust source code and then re-run `maturin develop` to recompile.\n\nTo run this all as a single copy-and-paste, use the bash script below (replace `string_sum` in the first command with the desired package name):\n\n```bash\nmkdir string_sum && cd \"$_\"\npython -m venv .env\nsource .env/bin/activate\npip install maturin\nmaturin init --bindings pyo3\nmaturin develop\n```\n\nIf you want to be able to run `cargo test` or use this project in a Cargo workspace and are running into linker issues, there are some workarounds in [the FAQ](https://pyo3.rs/latest/faq.html#i-cant-run-cargo-test-or-i-cant-build-in-a-cargo-workspace-im-having-linker-issues-like-symbol-not-found-or-undefined-reference-to-_pyexc_systemerror).\n\nAs well as with `maturin`, it is possible to build using [`setuptools-rust`](https://github.com/PyO3/setuptools-rust) or [manually](https://pyo3.rs/latest/building-and-distribution.html#manual-builds). Both offer more flexibility than `maturin` but require more configuration to get started.\n\n### Using Python from Rust\n\nTo embed Python into a Rust binary, you need to ensure that your Python installation contains a shared library. The following steps demonstrate how to ensure this (for Ubuntu), and then give some example code which runs an embedded Python interpreter.\n\nTo install the Python shared library on Ubuntu:\n\n```bash\nsudo apt install python3-dev\n```\n\nTo install the Python shared library on RPM based distributions (e.g. Fedora, Red Hat, SuSE), install the `python3-devel` package.\n\n\nStart a new project with `cargo new` and add  `pyo3` to the `Cargo.toml` like this:\n\n```toml\n[dependencies.pyo3]\nversion = \"0.23.3\"\nfeatures = [\"auto-initialize\"]\n```\n\nExample program displaying the value of `sys.version` and the current user name:\n\n```rust\nuse pyo3::prelude::*;\nuse pyo3::types::IntoPyDict;\nuse pyo3::ffi::c_str;\n\nfn main() -> PyResult<()> {\n    Python::with_gil(|py| {\n        let sys = py.import(\"sys\")?;\n        let version: String = sys.getattr(\"version\")?.extract()?;\n\n        let locals = [(\"os\", py.import(\"os\")?)].into_py_dict(py)?;\n        let code = c_str!(\"os.getenv('USER') or os.getenv('USERNAME') or 'Unknown'\");\n        let user: String = py.eval(code, None, Some(&locals))?.extract()?;\n\n        println!(\"Hello {}, I'm Python {}\", user, version);\n        Ok(())\n    })\n}\n```\n\nThe guide has [a section](https://pyo3.rs/latest/python-from-rust.html) with lots of examples\nabout this topic.\n\n## Tools and libraries\n\n- [maturin](https://github.com/PyO3/maturin) _Build and publish crates with pyo3, rust-cpython or cffi bindings as well as rust binaries as python packages_\n- [setuptools-rust](https://github.com/PyO3/setuptools-rust) _Setuptools plugin for Rust support_.\n- [pyo3-built](https://github.com/PyO3/pyo3-built) _Simple macro to expose metadata obtained with the [`built`](https://crates.io/crates/built) crate as a [`PyDict`](https://docs.rs/pyo3/*/pyo3/types/struct.PyDict.html)_\n- [rust-numpy](https://github.com/PyO3/rust-numpy) _Rust binding of NumPy C-API_\n- [dict-derive](https://github.com/gperinazzo/dict-derive) _Derive FromPyObject to automatically transform Python dicts into Rust structs_\n- [pyo3-log](https://github.com/vorner/pyo3-log) _Bridge from Rust to Python logging_\n- [pythonize](https://github.com/davidhewitt/pythonize) _Serde serializer for converting Rust objects to JSON-compatible Python objects_\n- [pyo3-asyncio](https://github.com/awestlake87/pyo3-asyncio) _Utilities for working with Python's Asyncio library and async functions_\n- [rustimport](https://github.com/mityax/rustimport) _Directly import Rust files or crates from Python, without manual compilation step. Provides pyo3 integration by default and generates pyo3 binding code automatically._\n- [pyo3-arrow](https://crates.io/crates/pyo3-arrow) _Lightweight [Apache Arrow](https://arrow.apache.org/) integration for pyo3._\n- [pyo3-bytes](https://crates.io/crates/pyo3-bytes) _Integration between [`bytes`](https://crates.io/crates/bytes) and pyo3._\n\n## Examples\n\n- [autopy](https://github.com/autopilot-rs/autopy) _A simple, cross-platform GUI automation library for Python and Rust._\n  - Contains an example of building wheels on TravisCI and appveyor using [cibuildwheel](https://github.com/pypa/cibuildwheel)\n- [ballista-python](https://github.com/apache/arrow-ballista-python) _A Python library that binds to Apache Arrow distributed query engine Ballista._\n- [bed-reader](https://github.com/fastlmm/bed-reader) _Read and write the PLINK BED format, simply and efficiently._\n    - Shows Rayon/ndarray::parallel (including capturing errors, controlling thread num), Python types to Rust generics, Github Actions\n- [cellular_raza](https://cellular-raza.com) _A cellular agent-based simulation framework for building complex models from a clean slate._\n- [connector-x](https://github.com/sfu-db/connector-x) _Fastest library to load data from DB to DataFrames in Rust and Python._\n- [cryptography](https://github.com/pyca/cryptography/tree/main/src/rust) _Python cryptography library with some functionality in Rust._\n- [css-inline](https://github.com/Stranger6667/css-inline/tree/master/bindings/python) _CSS inlining for Python implemented in Rust._\n- [datafusion-python](https://github.com/apache/arrow-datafusion-python) _A Python library that binds to Apache Arrow in-memory query engine DataFusion._\n- [deltalake-python](https://github.com/delta-io/delta-rs/tree/main/python) _Native Delta Lake Python binding based on delta-rs with Pandas integration._\n- [fastbloom](https://github.com/yankun1992/fastbloom) _A fast [bloom filter](https://github.com/yankun1992/fastbloom#BloomFilter) | [counting bloom filter](https://github.com/yankun1992/fastbloom#countingbloomfilter) implemented by Rust for Rust and Python!_\n- [fastuuid](https://github.com/thedrow/fastuuid/) _Python bindings to Rust's UUID library._\n- [feos](https://github.com/feos-org/feos) _Lightning fast thermodynamic modeling in Rust with fully developed Python interface._\n- [forust](https://github.com/jinlow/forust) _A lightweight gradient boosted decision tree library written in Rust._\n- [granian](https://github.com/emmett-framework/granian) _A Rust HTTP server for Python applications._\n- [greptimedb](https://github.com/GreptimeTeam/greptimedb/tree/main/src/script) _Support [Python scripting](https://docs.greptime.com/user-guide/python-scripts/overview) in the database_\n- [haem](https://github.com/BooleanCat/haem) _A Python library for working on Bioinformatics problems._\n- [html2text-rs](https://github.com/deedy5/html2text_rs) _Python library for converting HTML to markup or plain text._\n- [html-py-ever](https://github.com/PyO3/setuptools-rust/tree/main/examples/html-py-ever) _Using [html5ever](https://github.com/servo/html5ever) through [kuchiki](https://github.com/kuchiki-rs/kuchiki) to speed up html parsing and css-selecting._\n- [hyperjson](https://github.com/mre/hyperjson) _A hyper-fast Python module for reading/writing JSON data using Rust's serde-json._\n- [inline-python](https://github.com/fusion-engineering/inline-python) _Inline Python code directly in your Rust code._\n- [johnnycanencrypt](https://github.com/kushaldas/johnnycanencrypt) OpenPGP library with Yubikey support.\n- [jsonschema](https://github.com/Stranger6667/jsonschema/tree/master/crates/jsonschema-py) _A high-performance JSON Schema validator for Python._\n- [mocpy](https://github.com/cds-astro/mocpy) _Astronomical Python library offering data structures for describing any arbitrary coverage regions on the unit sphere._\n- [opendal](https://github.com/apache/opendal/tree/main/bindings/python) _A data access layer that allows users to easily and efficiently retrieve data from various storage services in a unified way._\n- [orjson](https://github.com/ijl/orjson) _Fast Python JSON library._\n- [ormsgpack](https://github.com/aviramha/ormsgpack) _Fast Python msgpack library._\n- [point-process](https://github.com/ManifoldFR/point-process-rust/tree/master/pylib) _High level API for pointprocesses as a Python library._\n- [polaroid](https://github.com/daggy1234/polaroid) _Hyper Fast and safe image manipulation library for Python written in Rust._\n- [polars](https://github.com/pola-rs/polars) _Fast multi-threaded DataFrame library in Rust | Python | Node.js._\n- [pydantic-core](https://github.com/pydantic/pydantic-core) _Core validation logic for pydantic written in Rust._\n- [pyheck](https://github.com/kevinheavey/pyheck) _Fast case conversion library, built by wrapping [heck](https://github.com/withoutboats/heck)._\n    - Quite easy to follow as there's not much code.\n- [pyre](https://github.com/Project-Dream-Weaver/pyre-http) _Fast Python HTTP server written in Rust._\n- [primp](https://github.com/deedy5/primp) _The fastest python HTTP client that can impersonate web browsers by mimicking their headers and TLS/JA3/JA4/HTTP2 fingerprints._\n- [rateslib](https://github.com/attack68/rateslib) _A fixed income library for Python using Rust extensions._\n- [ril-py](https://github.com/Cryptex-github/ril-py) _A performant and high-level image processing library for Python written in Rust._\n- [river](https://github.com/online-ml/river) _Online machine learning in python, the computationally heavy statistics algorithms are implemented in Rust._\n- [robyn](https://github.com/sparckles/Robyn) A Super Fast Async Python Web Framework with a Rust runtime.\n- [rust-python-coverage](https://github.com/cjermain/rust-python-coverage) _Example PyO3 project with automated test coverage for Rust and Python._\n- [sail](https://github.com/lakehq/sail) _Unifying stream, batch, and AI workloads with Apache Spark compatibility._\n- [tiktoken](https://github.com/openai/tiktoken) _A fast BPE tokeniser for use with OpenAI's models._\n- [tokenizers](https://github.com/huggingface/tokenizers/tree/main/bindings/python) _Python bindings to the Hugging Face tokenizers (NLP) written in Rust._\n- [tzfpy](http://github.com/ringsaturn/tzfpy) _A fast package to convert longitude/latitude to timezone name._\n- [utiles](https://github.com/jessekrubin/utiles) _Fast Python web-map tile utilities_\n- [wasmer-python](https://github.com/wasmerio/wasmer-python) _Python library to run WebAssembly binaries._\n\n## Articles and other media\n\n- [(Video) PyO3: From Python to Rust and Back Again](https://www.youtube.com/watch?v=UmL_CA-v3O8) - Jul 3, 2024\n- [Parsing Python ASTs 20x Faster with Rust](https://www.gauge.sh/blog/parsing-python-asts-20x-faster-with-rust) - Jun 17, 2024\n- [(Video) How Python Harnesses Rust through PyO3](https://www.youtube.com/watch?v=UkZ_m3Wj2hA) - May 18, 2024\n- [(Video) Combining Rust and Python: The Best of Both Worlds?](https://www.youtube.com/watch?v=lyG6AKzu4ew) - Mar 1, 2024\n- [(Video) Extending Python with Rust using PyO3](https://www.youtube.com/watch?v=T45ZEmSR1-s) - Dec 16, 2023\n- [A Week of PyO3 + rust-numpy (How to Speed Up Your Data Pipeline X Times)](https://terencezl.github.io/blog/2023/06/06/a-week-of-pyo3-rust-numpy/) - Jun 6, 2023\n- [(Podcast) PyO3 with David Hewitt](https://rustacean-station.org/episode/david-hewitt/) - May 19, 2023\n- [Making Python 100x faster with less than 100 lines of Rust](https://ohadravid.github.io/posts/2023-03-rusty-python/) - Mar 28, 2023\n- [How Pydantic V2 leverages Rust's Superpowers](https://fosdem.org/2023/schedule/event/rust_how_pydantic_v2_leverages_rusts_superpowers/) - Feb 4, 2023\n- [How we extended the River stats module with Rust using PyO3](https://boring-guy.sh/posts/river-rust/) - Dec 23, 2022\n- [Nine Rules for Writing Python Extensions in Rust](https://towardsdatascience.com/nine-rules-for-writing-python-extensions-in-rust-d35ea3a4ec29?sk=f8d808d5f414154fdb811e4137011437) - Dec 31, 2021\n- [Calling Rust from Python using PyO3](https://saidvandeklundert.net/learn/2021-11-18-calling-rust-from-python-using-pyo3/) - Nov 18, 2021\n- [davidhewitt's 2021 talk at Rust Manchester meetup](https://www.youtube.com/watch?v=-XyWG_klSAw&t=320s) - Aug 19, 2021\n- [Incrementally porting a small Python project to Rust](https://blog.waleedkhan.name/port-python-to-rust/) - Apr 29, 2021\n- [Vortexa - Integrating Rust into Python](https://www.vortexa.com/insight/integrating-rust-into-python) - Apr 12, 2021\n- [Writing and publishing a Python module in Rust](https://blog.yossarian.net/2020/08/02/Writing-and-publishing-a-python-module-in-rust) - Aug 2, 2020\n\n## Contributing\n\nEveryone is welcomed to contribute to PyO3! There are many ways to support the project, such as:\n\n- help PyO3 users with issues on GitHub and [Discord](https://discord.gg/33kcChzH7f)\n- improve documentation\n- write features and bugfixes\n- publish blogs and examples of how to use PyO3\n\nOur [contributing notes](https://github.com/PyO3/pyo3/blob/main/Contributing.md) and [architecture guide](https://github.com/PyO3/pyo3/blob/main/Architecture.md) have more resources if you wish to volunteer time for PyO3 and are searching where to start.\n\nIf you don't have time to contribute yourself but still wish to support the project's future success, some of our maintainers have GitHub sponsorship pages:\n\n- [davidhewitt](https://github.com/sponsors/davidhewitt)\n- [messense](https://github.com/sponsors/messense)\n\n## License\n\nPyO3 is licensed under the [Apache-2.0 license](LICENSE-APACHE) or the [MIT license](LICENSE-MIT), at your option.\n\nPython is licensed under the [Python License](https://docs.python.org/3/license.html).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in PyO3 by you, as defined in the Apache License, shall be dual-licensed as above, without any additional terms or conditions.\n\n<a href=\"https://www.netlify.com\"> <img src=\"https://www.netlify.com/v3/img/components/netlify-color-accent.svg\" alt=\"Deploys by Netlify\" /> </a>\n",
        "releases": [
            {
                "name": "PyO3 0.23.4",
                "date": "2025-01-11T21:33:10Z"
            },
            {
                "name": "PyO3 0.23.3",
                "date": "2024-12-04T14:46:50Z"
            },
            {
                "name": "PyO3 0.23.2",
                "date": "2024-11-25T22:25:41Z"
            },
            {
                "name": "PyO3 0.23.1",
                "date": "2024-11-16T23:34:14Z"
            },
            {
                "name": "PyO3 0.23.0",
                "date": "2024-11-15T18:46:53Z"
            },
            {
                "name": "PyO3 0.22.6",
                "date": "2024-11-05T22:27:59Z"
            },
            {
                "name": "PyO3 0.22.5",
                "date": "2024-10-15T20:59:22Z"
            },
            {
                "name": "PyO3 0.22.4",
                "date": "2024-10-12T20:58:16Z"
            },
            {
                "name": "PyO3 0.22.3",
                "date": "2024-09-15T20:50:14Z"
            },
            {
                "name": "PyO3 0.22.2",
                "date": "2024-07-17T21:39:35Z"
            },
            {
                "name": "PyO3 0.22.1",
                "date": "2024-07-07T06:51:57Z"
            },
            {
                "name": "PyO3 0.22.0",
                "date": "2024-06-24T20:13:25Z"
            },
            {
                "name": "PyO3 0.21.2",
                "date": "2024-04-16T08:07:40Z"
            },
            {
                "name": "PyO3 0.21.1",
                "date": "2024-04-01T18:51:44Z"
            },
            {
                "name": "PyO3 0.21.0",
                "date": "2024-03-25T23:35:50Z"
            },
            {
                "name": "PyO3 0.21.0-beta.0",
                "date": "2024-03-10T22:14:00Z"
            },
            {
                "name": "PyO3 0.20.3",
                "date": "2024-02-23T11:58:47Z"
            },
            {
                "name": "PyO3 0.20.2",
                "date": "2024-01-04T21:31:25Z"
            },
            {
                "name": "PyO3 0.20.1",
                "date": "2023-12-30T21:31:33Z"
            },
            {
                "name": "PyO3 0.20.0",
                "date": "2023-10-11T21:22:34Z"
            },
            {
                "name": "PyO3 0.19.2",
                "date": "2023-08-01T06:25:45Z"
            },
            {
                "name": "PyO3 0.19.1",
                "date": "2023-07-03T15:15:10Z"
            },
            {
                "name": "PyO3 0.19.0",
                "date": "2023-05-31T14:58:29Z"
            },
            {
                "name": "PyO3 0.18.3",
                "date": "2023-04-13T21:45:51Z"
            },
            {
                "name": "PyO3 0.18.2",
                "date": "2023-03-24T20:35:04Z"
            },
            {
                "name": "PyO3 0.18.1",
                "date": "2023-02-07T21:35:54Z"
            },
            {
                "name": "PyO3 0.18.0",
                "date": "2023-01-17T20:39:44Z"
            },
            {
                "name": "PyO3 0.17.3",
                "date": "2022-11-01T20:46:24Z"
            },
            {
                "name": "PyO3 0.17.2",
                "date": "2022-10-04T07:12:37Z"
            },
            {
                "name": "PyO3 0.17.1",
                "date": "2022-08-28T08:33:42Z"
            },
            {
                "name": "PyO3 0.17.0",
                "date": "2022-08-23T21:49:37Z"
            },
            {
                "name": "PyO3 0.16.6",
                "date": "2022-08-23T20:13:05Z"
            },
            {
                "name": "PyO3 0.16.5",
                "date": "2022-05-15T19:27:39Z"
            },
            {
                "name": "PyO3 0.16.4",
                "date": "2022-04-14T18:20:34Z"
            },
            {
                "name": "PyO3 0.15.2",
                "date": "2022-04-14T18:13:57Z"
            },
            {
                "name": "PyO3 0.16.3",
                "date": "2022-04-05T08:19:46Z"
            },
            {
                "name": "PyO3 0.16.2",
                "date": "2022-03-15T21:29:18Z"
            },
            {
                "name": "PyO3 0.16.1",
                "date": "2022-03-05T20:01:43Z"
            },
            {
                "name": "PyO3 0.16.0",
                "date": "2022-02-27T23:39:43Z"
            },
            {
                "name": "PyO3 0.15.1",
                "date": "2021-11-19T10:06:15Z"
            },
            {
                "name": "PyO3 0.15.0",
                "date": "2021-11-03T23:04:40Z"
            },
            {
                "name": "PyO3 0.14.5",
                "date": "2021-09-05T14:02:19Z"
            },
            {
                "name": "PyO3 0.14.4",
                "date": "2021-08-29T06:56:34Z"
            },
            {
                "name": "PyO3 0.14.3",
                "date": "2021-08-22T00:20:10Z"
            },
            {
                "name": "PyO3 0.14.2",
                "date": "2021-08-09T08:03:04Z"
            },
            {
                "name": "PyO3 0.14.1",
                "date": "2021-07-04T21:22:23Z"
            },
            {
                "name": "PyO3 0.14.0",
                "date": "2021-07-03T21:27:38Z"
            },
            {
                "name": "PyO3 0.13.2",
                "date": "2021-02-12T23:33:55Z"
            },
            {
                "name": "PyO3 0.13.1",
                "date": "2021-01-10T13:44:21Z"
            },
            {
                "name": "PyO3 0.13.0",
                "date": "2020-12-22T16:10:33Z"
            },
            {
                "name": "PyO3 0.12.4",
                "date": "2020-11-28T20:33:19Z"
            },
            {
                "name": "PyO3 0.12.3",
                "date": "2020-10-12T22:29:02Z"
            },
            {
                "name": "PyO3 0.12.2",
                "date": "2020-10-12T19:55:24Z"
            },
            {
                "name": "PyO3 0.12.1",
                "date": "2020-09-16T21:16:41Z"
            },
            {
                "name": "PyO3 0.12.0",
                "date": "2020-09-12T22:55:30Z"
            },
            {
                "name": "PyO3 0.11.1",
                "date": "2020-07-03T03:24:51Z"
            },
            {
                "name": "PyO3 0.11.0",
                "date": "2020-06-28T09:14:27Z"
            },
            {
                "name": "PyO3 0.10.1",
                "date": "2020-05-14T12:39:56Z"
            },
            {
                "name": "PyO3 0.10.0",
                "date": "2020-05-13T04:39:13Z"
            },
            {
                "name": "PyO3 0.9.2",
                "date": "2020-04-09T08:16:28Z"
            },
            {
                "name": "PyO3 0.9.1",
                "date": "2020-03-23T13:30:14Z"
            },
            {
                "name": "PyO3 0.9.0",
                "date": "2020-03-19T06:21:59Z"
            },
            {
                "name": "PyO3 0.9.0 alpha.1",
                "date": "2020-01-18T06:12:43Z"
            },
            {
                "name": "PyO3 0.8.5",
                "date": "2020-01-05T10:08:52Z"
            },
            {
                "name": "PyO3 0.8.4",
                "date": "2019-12-14T13:33:03Z"
            },
            {
                "name": "PyO3 0.8.3",
                "date": "2019-11-23T11:15:47Z"
            },
            {
                "name": "PyO3 0.8.2",
                "date": "2019-10-27T06:11:39Z"
            },
            {
                "name": "PyO3 0.8.1",
                "date": "2019-10-08T02:56:25Z"
            },
            {
                "name": "PyO3 0.8.0",
                "date": "2019-09-16T11:07:04Z"
            },
            {
                "name": "PyO3 0.7.0",
                "date": "2019-05-26T09:07:13Z"
            },
            {
                "name": "PyO3 v0.6.0",
                "date": "2019-03-28T11:57:00Z"
            },
            {
                "name": "PyO3 v0.5.3",
                "date": "2019-01-04T10:35:23Z"
            },
            {
                "name": "PyO3 v0.5.2",
                "date": "2018-11-25T23:15:11Z"
            },
            {
                "name": "PyO3 v0.5.1",
                "date": "2018-11-24T12:15:25Z"
            },
            {
                "name": "PyO3 v0.5.0",
                "date": "2018-11-11T11:28:51Z"
            },
            {
                "name": "PyO3 v0.5.0-alpha.2",
                "date": "2018-10-29T16:45:42Z"
            },
            {
                "name": "PyO3 v0.4.1",
                "date": "2018-08-20T12:37:43Z"
            },
            {
                "name": "PyO3 0.4.0",
                "date": "2018-07-30T21:16:17Z"
            },
            {
                "name": "PyO3 0.3.2",
                "date": "2018-07-22T19:39:23Z"
            },
            {
                "name": "PyO3 0.3.1",
                "date": "2018-07-18T12:08:29Z"
            },
            {
                "name": "PyO3 0.3.0",
                "date": "2018-07-18T11:29:51Z"
            },
            {
                "name": "PyO3 0.2.7",
                "date": "2018-05-17T23:49:38Z"
            },
            {
                "name": "PyO3 0.2.6",
                "date": "2018-04-03T17:47:40Z"
            },
            {
                "name": "PyO3 0.2.5",
                "date": "2018-02-21T18:44:27Z"
            },
            {
                "name": "PyO3 0.2.4",
                "date": "2018-01-19T18:16:06Z"
            },
            {
                "name": "PyO3 0.2.3",
                "date": "2017-11-27T19:42:34Z"
            },
            {
                "name": "PyO3 0.2.2",
                "date": "2017-10-01T13:01:17Z"
            },
            {
                "name": "PyO3 0.2.1",
                "date": "2017-09-27T04:28:06Z"
            },
            {
                "name": "PyO3 0.2.0",
                "date": "2017-08-12T16:58:10Z"
            },
            {
                "name": "PyO3 0.1.0",
                "date": "2017-07-23T18:32:39Z"
            }
        ]
    }
}