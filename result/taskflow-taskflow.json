{
    "https://api.github.com/repos/taskflow/taskflow": {
        "forks": 1228,
        "watchers": 10492,
        "stars": 10492,
        "languages": {
            "C++": 2703379,
            "Cuda": 300389,
            "C": 147743,
            "CMake": 64431,
            "JavaScript": 28587,
            "Shell": 6843,
            "Python": 6327,
            "HTML": 5601,
            "CSS": 3125,
            "Makefile": 2586
        },
        "commits": [
            "2025-01-14T20:48:52Z",
            "2025-01-14T20:42:27Z",
            "2025-01-12T17:02:30Z",
            "2025-01-12T06:16:31Z",
            "2025-01-11T19:52:24Z",
            "2025-01-10T00:03:07Z",
            "2025-01-09T05:42:57Z",
            "2025-01-08T20:30:33Z",
            "2025-01-06T23:47:06Z",
            "2025-01-05T19:41:32Z",
            "2025-01-03T23:02:05Z",
            "2025-01-03T22:49:20Z",
            "2025-01-03T22:41:18Z",
            "2025-01-02T21:34:44Z",
            "2025-01-02T21:30:09Z",
            "2025-01-02T20:59:23Z",
            "2025-01-02T20:41:37Z",
            "2025-01-02T03:50:28Z",
            "2025-01-02T03:37:41Z",
            "2024-12-30T23:43:28Z",
            "2024-12-27T21:01:16Z",
            "2024-12-27T20:17:39Z",
            "2024-12-27T19:31:22Z",
            "2024-12-26T20:00:45Z",
            "2024-12-26T16:44:11Z",
            "2024-12-26T05:01:50Z",
            "2024-12-25T23:13:19Z",
            "2024-12-25T21:55:23Z",
            "2024-12-25T02:50:57Z",
            "2024-12-24T02:38:03Z"
        ],
        "creation_date": "2018-04-18T13:45:30Z",
        "contributors": 30,
        "topics": [
            "concurrent-programming",
            "cuda-programming",
            "gpu-programming",
            "heterogeneous-parallel-programming",
            "high-performance-computing",
            "multi-threading",
            "multicore-programming",
            "multithreading",
            "parallel",
            "parallel-computing",
            "parallel-programming",
            "taskflow",
            "taskparallelism",
            "threadpool",
            "work-stealing"
        ],
        "subscribers": 251,
        "readme": "# Taskflow <img align=\"right\" width=\"10%\" src=\"image/taskflow_logo.png\">\n\n<!--[![Linux Build Status](https://travis-ci.com/taskflow/taskflow.svg?branch=master)](https://travis-ci.com/taskflow/taskflow)-->\n[![Ubuntu](https://github.com/taskflow/taskflow/workflows/Ubuntu/badge.svg)](https://github.com/taskflow/taskflow/actions?query=workflow%3AUbuntu)\n[![macOS](https://github.com/taskflow/taskflow/workflows/macOS/badge.svg)](https://github.com/taskflow/taskflow/actions?query=workflow%3AmacOS)\n[![Windows](https://github.com/taskflow/taskflow/workflows/Windows/badge.svg)](https://github.com/taskflow/taskflow/actions?query=workflow%3AWindows)\n[![Wiki](image/api-doc.svg)][documentation]\n[![TFProf](image/tfprof.svg)](https://taskflow.github.io/tfprof/)\n[![Cite](image/cite-tpds.svg)][TPDS22]\n\nTaskflow helps you quickly write parallel and heterogeneous task programs in modern C++\n\n# Why Taskflow?\n\nTaskflow is faster, more expressive, and easier for drop-in integration\nthan many of existing task programming frameworks\nin handling complex parallel workloads.\n\n![](image/performance.png)\n\nTaskflow lets you quickly implement task decomposition strategies\nthat incorporate both regular and irregular compute patterns,\ntogether with an efficient *work-stealing* scheduler to optimize your multithreaded performance.\n\n| [Static Tasking](#start-your-first-taskflow-program) | [Subflow Tasking](#create-a-subflow-graph) |\n| :------------: | :-------------: |\n| ![](image/static_graph.svg) | <img align=\"right\" src=\"image/dynamic_graph.svg\" width=\"100%\"> |\n\nTaskflow supports conditional tasking for you to make rapid control-flow decisions\nacross dependent tasks to implement cycles and conditions that were otherwise difficult to do\nwith existing tools.\n\n| [Conditional Tasking](#integrate-control-flow-to-a-task-graph) |\n| :-----------------: |\n| ![](image/condition.svg) |\n\nTaskflow is composable. You can create large parallel graphs through\ncomposition of modular and reusable blocks that are easier to optimize\nat an individual scope.\n\n| [Taskflow Composition](#compose-task-graphs) |\n| :---------------: |\n|![](image/framework.svg)|\n\nTaskflow supports heterogeneous tasking for you to\naccelerate a wide range of scientific computing applications\nby harnessing the power of CPU-GPU collaborative computing.\n\n| [Concurrent CPU-GPU Tasking](#offload-a-task-to-a-gpu) |\n| :-----------------: |\n| ![](image/cudaflow.svg) |\n\n\nTaskflow provides visualization and tooling needed for profiling Taskflow programs.\n\n| [Taskflow Profiler](https://taskflow.github.io/tfprof) |\n| :-----------------: |\n| ![](image/tfprof.png) |\n\nWe are committed to support trustworthy developments for both academic and industrial research projects\nin parallel computing. Check out [Who is Using Taskflow](https://taskflow.github.io/#tag_users) and what our users say:\n\n+ *\"Taskflow is the cleanest Task API I've ever seen.\" [Damien Hocking @Corelium Inc](http://coreliuminc.com)*\n+ *\"Taskflow has a very simple and elegant tasking interface. The performance also scales very well.\" [Glen Fraser][totalgee]*\n+ *\"Taskflow lets me handle parallel processing in a smart way.\" [Hayabusa @Learning](https://cpp-learning.com/cpp-taskflow/)*\n+ *\"Taskflow improves the throughput of our graph engine in just a few hours of coding.\" [Jean-Micha\u00ebl @KDAB](https://ossia.io/)*\n+ *\"Best poster award for open-source parallel programming library.\" [Cpp Conference 2018][Cpp Conference 2018]*\n+ *\"Second Prize of Open-source Software Competition.\" [ACM Multimedia Conference 2019](https://tsung-wei-huang.github.io/img/mm19-ossc-award.jpg)*\n\nSee a quick [presentation](https://taskflow.github.io/) and\nvisit the [documentation][documentation] to learn more about Taskflow.\nTechnical details can be referred to our [IEEE TPDS paper][TPDS21].\n\n# Start Your First Taskflow Program\n\nThe following program (`simple.cpp`) creates four tasks \n`A`, `B`, `C`, and `D`, where `A` runs before `B` and `C`, and `D`\nruns after `B` and `C`.\nWhen `A` finishes, `B` and `C` can run in parallel.\nTry it live on [Compiler Explorer (godbolt)](https://godbolt.org/z/j8hx3xnnx)!\n\n\n\n```cpp\n#include <taskflow/taskflow.hpp>  // Taskflow is header-only\n\nint main(){\n  \n  tf::Executor executor;\n  tf::Taskflow taskflow;\n\n  auto [A, B, C, D] = taskflow.emplace(  // create four tasks\n    [] () { std::cout << \"TaskA\\n\"; },\n    [] () { std::cout << \"TaskB\\n\"; },\n    [] () { std::cout << \"TaskC\\n\"; },\n    [] () { std::cout << \"TaskD\\n\"; } \n  );                                  \n                                      \n  A.precede(B, C);  // A runs before B and C\n  D.succeed(B, C);  // D runs after  B and C\n                                      \n  executor.run(taskflow).wait(); \n\n  return 0;\n}\n```\n\nTaskflow is *header-only* and there is no wrangle with installation.\nTo compile the program, clone the Taskflow project and \ntell the compiler to include the [headers](./taskflow/).\n\n```bash\n~$ git clone https://github.com/taskflow/taskflow.git  # clone it only once\n~$ g++ -std=c++20 examples/simple.cpp -I. -O2 -pthread -o simple\n~$ ./simple\nTaskA\nTaskC \nTaskB \nTaskD\n```\n\n# Visualize Your First Taskflow Program\n\nTaskflow comes with a built-in profiler, \n[TFProf](https://taskflow.github.io/tfprof/), \nfor you to profile and visualize taskflow programs\nin an easy-to-use web-based interface.\n\n![](doxygen/images/tfprof.png)\n\n```bash\n# run the program with the environment variable TF_ENABLE_PROFILER enabled\n~$ TF_ENABLE_PROFILER=simple.json ./simple\n~$ cat simple.json\n[\n{\"executor\":\"0\",\"data\":[{\"worker\":0,\"level\":0,\"data\":[{\"span\":[172,186],\"name\":\"0_0\",\"type\":\"static\"},{\"span\":[187,189],\"name\":\"0_1\",\"type\":\"static\"}]},{\"worker\":2,\"level\":0,\"data\":[{\"span\":[93,164],\"name\":\"2_0\",\"type\":\"static\"},{\"span\":[170,179],\"name\":\"2_1\",\"type\":\"static\"}]}]}\n]\n# paste the profiling json data to https://taskflow.github.io/tfprof/\n```\n\nIn addition to execution diagram, you can dump the graph to a DOT format \nand visualize it using a number of free [GraphViz][GraphViz] tools.\n\n```\n// dump the taskflow graph to a DOT format through std::cout\ntaskflow.dump(std::cout); \n```\n\n<p align=\"center\"><img src=\"doxygen/images/simple.svg\"></p>\n\n# Express Task Graph Parallelism\n\nTaskflow empowers users with both static and dynamic task graph constructions\nto express end-to-end parallelism in a task graph that\nembeds in-graph control flow.\n\n1. [Create a Subflow Graph](#create-a-subflow-graph)\n2. [Integrate Control Flow to a Task Graph](#integrate-control-flow-to-a-task-graph)\n3. [Offload a Task to a GPU](#offload-a-task-to-a-gpu)\n4. [Compose Task Graphs](#compose-task-graphs)\n5. [Launch Asynchronous Tasks](#launch-asynchronous-tasks)\n6. [Execute a Taskflow](#execute-a-taskflow)\n7. [Leverage Standard Parallel Algorithms](#leverage-standard-parallel-algorithms)\n\n## Create a Subflow Graph\n\nTaskflow supports *dynamic tasking* for you to create a subflow\ngraph from the execution of a task to perform dynamic parallelism.\nThe following program spawns a task dependency graph parented at task `B`.\n\n```cpp\ntf::Task A = taskflow.emplace([](){}).name(\"A\");  \ntf::Task C = taskflow.emplace([](){}).name(\"C\");  \ntf::Task D = taskflow.emplace([](){}).name(\"D\");  \n\ntf::Task B = taskflow.emplace([] (tf::Subflow& subflow) { \n  tf::Task B1 = subflow.emplace([](){}).name(\"B1\");  \n  tf::Task B2 = subflow.emplace([](){}).name(\"B2\");  \n  tf::Task B3 = subflow.emplace([](){}).name(\"B3\");  \n  B3.succeed(B1, B2);  // B3 runs after B1 and B2\n}).name(\"B\");\n\nA.precede(B, C);  // A runs before B and C\nD.succeed(B, C);  // D runs after  B and C\n```\n\n<p align=\"center\"><img src=\"doxygen/images/subflow_join.svg\"></p>\n\n## Integrate Control Flow to a Task Graph \n\nTaskflow supports *conditional tasking* for you to make rapid \ncontrol-flow decisions across dependent tasks to implement cycles \nand conditions in an *end-to-end* task graph.\n\n```cpp\ntf::Task init = taskflow.emplace([](){}).name(\"init\");\ntf::Task stop = taskflow.emplace([](){}).name(\"stop\");\n\n// creates a condition task that returns a random binary\ntf::Task cond = taskflow.emplace(\n  [](){ return std::rand() % 2; }\n).name(\"cond\");\n\ninit.precede(cond);\n\n// creates a feedback loop {0: cond, 1: stop}\ncond.precede(cond, stop);\n```\n\n<p align=\"center\"><img src=\"doxygen/images/conditional-tasking-1.svg\"></p>\n\n\n## Offload a Task to a GPU\n\nTaskflow supports GPU tasking for you to accelerate a wide range of scientific computing applications by harnessing the power of CPU-GPU collaborative computing using CUDA.\n\n```cpp\n__global__ void saxpy(size_t N, float alpha, float* dx, float* dy) {\n  int i = blockIdx.x*blockDim.x + threadIdx.x;\n  if (i < n) {\n    y[i] = a*x[i] + y[i];\n  }\n}\ntf::Task cudaflow = taskflow.emplace([&](tf::cudaFlow& cf) {\n\n  // data copy tasks\n  tf::cudaTask h2d_x = cf.copy(dx, hx.data(), N).name(\"h2d_x\");\n  tf::cudaTask h2d_y = cf.copy(dy, hy.data(), N).name(\"h2d_y\");\n  tf::cudaTask d2h_x = cf.copy(hx.data(), dx, N).name(\"d2h_x\");\n  tf::cudaTask d2h_y = cf.copy(hy.data(), dy, N).name(\"d2h_y\");\n  \n  // kernel task with parameters to launch the saxpy kernel\n  tf::cudaTask saxpy = cf.kernel(\n    (N+255)/256, 256, 0, saxpy, N, 2.0f, dx, dy\n  ).name(\"saxpy\");\n\n  saxpy.succeed(h2d_x, h2d_y)\n       .precede(d2h_x, d2h_y);\n}).name(\"cudaFlow\");\n```\n\n<p align=\"center\"><img src=\"doxygen/images/saxpy_1_cudaflow.svg\"></p>\n\n## Compose Task Graphs\n\nTaskflow is composable. \nYou can create large parallel graphs through composition of modular \nand reusable blocks that are easier to optimize at an individual scope.\n\n```cpp\ntf::Taskflow f1, f2;\n\n// create taskflow f1 of two tasks\ntf::Task f1A = f1.emplace([]() { std::cout << \"Task f1A\\n\"; })\n                 .name(\"f1A\");\ntf::Task f1B = f1.emplace([]() { std::cout << \"Task f1B\\n\"; })\n                 .name(\"f1B\");\n\n// create taskflow f2 with one module task composed of f1\ntf::Task f2A = f2.emplace([]() { std::cout << \"Task f2A\\n\"; })\n                 .name(\"f2A\");\ntf::Task f2B = f2.emplace([]() { std::cout << \"Task f2B\\n\"; })\n                 .name(\"f2B\");\ntf::Task f2C = f2.emplace([]() { std::cout << \"Task f2C\\n\"; })\n                 .name(\"f2C\");\n\ntf::Task f1_module_task = f2.composed_of(f1)\n                            .name(\"module\");\n\nf1_module_task.succeed(f2A, f2B)\n              .precede(f2C);\n```\n\n<p align=\"center\"><img src=\"doxygen/images/composition.svg\"></p>\n\n## Launch Asynchronous Tasks\n\nTaskflow supports *asynchronous* tasking.\nYou can launch tasks asynchronously to dynamically explore task graph parallelism.\n\n```cpp\ntf::Executor executor;\n\n// create asynchronous tasks directly from an executor\nstd::future<int> future = executor.async([](){ \n  std::cout << \"async task returns 1\\n\";\n  return 1;\n}); \nexecutor.silent_async([](){ std::cout << \"async task does not return\\n\"; });\n\n// create asynchronous tasks with dynamic dependencies\ntf::AsyncTask A = executor.silent_dependent_async([](){ printf(\"A\\n\"); });\ntf::AsyncTask B = executor.silent_dependent_async([](){ printf(\"B\\n\"); }, A);\ntf::AsyncTask C = executor.silent_dependent_async([](){ printf(\"C\\n\"); }, A);\ntf::AsyncTask D = executor.silent_dependent_async([](){ printf(\"D\\n\"); }, B, C);\n\nexecutor.wait_for_all();\n```\n\n## Execute a Taskflow\n\nThe executor provides several *thread-safe* methods to run a taskflow. \nYou can run a taskflow once, multiple times, or until a stopping criteria is met. \nThese methods are non-blocking with a `tf::Future<void>` return \nto let you query the execution status. \n\n```cpp\n// runs the taskflow once\ntf::Future<void> run_once = executor.run(taskflow); \n\n// wait on this run to finish\nrun_once.get();\n\n// run the taskflow four times\nexecutor.run_n(taskflow, 4);\n\n// runs the taskflow five times\nexecutor.run_until(taskflow, [counter=5](){ return --counter == 0; });\n\n// block the executor until all submitted taskflows complete\nexecutor.wait_for_all();\n```\n\n## Leverage Standard Parallel Algorithms\n\nTaskflow defines algorithms for you to quickly express common parallel\npatterns using standard C++ syntaxes, \nsuch as parallel iterations, parallel reductions, and parallel sort.\n\n```cpp\n// standard parallel CPU algorithms\ntf::Task task1 = taskflow.for_each( // assign each element to 100 in parallel\n  first, last, [] (auto& i) { i = 100; }    \n);\ntf::Task task2 = taskflow.reduce(   // reduce a range of items in parallel\n  first, last, init, [] (auto a, auto b) { return a + b; }\n);\ntf::Task task3 = taskflow.sort(     // sort a range of items in parallel\n  first, last, [] (auto a, auto b) { return a < b; }\n);\n\n// standard parallel GPU algorithms\ntf::cudaTask cuda1 = cudaflow.for_each( // assign each element to 100 on GPU\n  dfirst, dlast, [] __device__ (auto i) { i = 100; }\n);\ntf::cudaTask cuda2 = cudaflow.reduce(   // reduce a range of items on GPU\n  dfirst, dlast, init, [] __device__ (auto a, auto b) { return a + b; }\n);\ntf::cudaTask cuda3 = cudaflow.sort(     // sort a range of items on GPU\n  dfirst, dlast, [] __device__ (auto a, auto b) { return a < b; }\n);\n```\n\nAdditionally, Taskflow provides composable graph building blocks for you to \nefficiently implement common parallel algorithms, such as parallel pipeline.\n\n```cpp\n// create a pipeline to propagate five tokens through three serial stages\ntf::Pipeline pl(num_parallel_lines,\n  tf::Pipe{tf::PipeType::SERIAL, [](tf::Pipeflow& pf) {\n    if(pf.token() == 5) {\n      pf.stop();\n    }\n  }},\n  tf::Pipe{tf::PipeType::SERIAL, [](tf::Pipeflow& pf) {\n    printf(\"stage 2: input buffer[%zu] = %d\\n\", pf.line(), buffer[pf.line()]);\n  }},\n  tf::Pipe{tf::PipeType::SERIAL, [](tf::Pipeflow& pf) {\n    printf(\"stage 3: input buffer[%zu] = %d\\n\", pf.line(), buffer[pf.line()]);\n  }}\n);\ntaskflow.composed_of(pl)\nexecutor.run(taskflow).wait();\n```\n\n\n# Supported Compilers\n\nTo use Taskflow, you only need a compiler that supports C++17:\n\n+ GNU C++ Compiler at least v8.4 with -std=c++17\n+ Clang C++ Compiler at least v6.0 with -std=c++17\n+ Microsoft Visual Studio at least v19.27 with /std:c++17\n+ AppleClang Xcode Version at least v12.0 with -std=c++17\n+ Nvidia CUDA Toolkit and Compiler (nvcc) at least v11.1 with -std=c++17\n+ Intel C++ Compiler at least v19.0.1 with -std=c++17\n+ Intel DPC++ Clang Compiler at least v13.0.0 with -std=c++17 and SYCL20\n\nTaskflow works on Linux, Windows, and Mac OS X.\n\nAlthough %Taskflow supports primarily C++17, you can enable C++20 compilation\nthrough `-std=c++20` to achieve better performance due to new C++20 features.\n\n# Learn More about Taskflow\n\nVisit our [project website][Project Website] and [documentation][documentation]\nto learn more about Taskflow. To get involved:\n\n  + See [release notes][release notes] to stay up-to-date with newest versions\n  + Read the step-by-step tutorial at [cookbook][cookbook]\n  + Submit an issue at [GitHub issues][GitHub issues]\n  + Find out our technical details at [references][references]\n  + Watch our technical talks at YouTube\n\n| [CppCon20 Tech Talk][cppcon20 talk] | [MUC++ Tech Talk](https://www.youtube.com/watch?v=u8Mc_WgGwVY) |\n| :------------: | :-------------: |\n| ![](doxygen/images/cppcon20-thumbnail.jpg) | <img align=\"right\" src=\"doxygen/images/muc++20-thumbnail.jpg\" width=\"100%\"> |\n\nWe are committed to support trustworthy developments for \nboth academic and industrial research projects in parallel \nand heterogeneous computing. \nIf you are using Taskflow, please cite the following paper we published at 2021 IEEE TPDS:\n\n+ Tsung-Wei Huang, Dian-Lun Lin, Chun-Xun Lin, and Yibo Lin, &quot;[Taskflow: A Lightweight Parallel and Heterogeneous Task Graph Computing System](https://tsung-wei-huang.github.io/papers/tpds21-taskflow.pdf),&quot; <i>IEEE Transactions on Parallel and Distributed Systems (TPDS)</i>, vol. 33, no. 6, pp. 1303-1320, June 2022\n\nMore importantly, we appreciate all Taskflow [contributors][contributors] and \nthe following organizations for sponsoring the Taskflow project!\n\n| <!-- --> | <!-- --> | <!-- --> | <!-- --> |\n|:-------------------------:|:-------------------------:|:-------------------------:|:-------------------------:|\n|<img src=\"doxygen/images/utah-ece-logo.png\">|<img src=\"doxygen/images/nsf.png\"> | <img src=\"doxygen/images/darpa.png\"> | <img src=\"doxygen/images/NumFocus.png\">|\n|<img src=\"doxygen/images/nvidia-logo.png\"> | | | |\n\n# License\n\nTaskflow is licensed with the [MIT License](./LICENSE). \nYou are completely free to re-distribute your work derived from Taskflow.\n\n* * *\n\n[Tsung-Wei Huang]:       https://tsung-wei-huang.github.io/\n[GitHub releases]:       https://github.com/taskflow/taskflow/releases\n[GitHub issues]:         https://github.com/taskflow/taskflow/issues\n[GitHub insights]:       https://github.com/taskflow/taskflow/pulse\n[GitHub pull requests]:  https://github.com/taskflow/taskflow/pulls\n[GraphViz]:              https://www.graphviz.org/\n[Project Website]:       https://taskflow.github.io/\n[cppcon20 talk]:         https://www.youtube.com/watch?v=MX15huP5DsM\n[contributors]:          https://taskflow.github.io/taskflow/contributors.html\n[totalgee]:              https://github.com/totalgee\n[NSF]:                   https://www.nsf.gov/\n[UIUC]:                  https://illinois.edu/\n[CSL]:                   https://csl.illinois.edu/\n[UofU]:                  https://www.utah.edu/\n[documentation]:         https://taskflow.github.io/taskflow/index.html\n[release notes]:         https://taskflow.github.io/taskflow/Releases.html\n[cookbook]:              https://taskflow.github.io/taskflow/pages.html\n[references]:            https://taskflow.github.io/taskflow/References.html\n[PayMe]:                 https://www.paypal.me/twhuang/10\n[email me]:              mailto:twh760812@gmail.com\n[Cpp Conference 2018]:   https://github.com/CppCon/CppCon2018\n[TPDS22]:                https://tsung-wei-huang.github.io/papers/tpds21-taskflow.pdf\n\n",
        "releases": [
            {
                "name": "Taskflow v3.9.0",
                "date": "2025-01-02T21:44:09Z"
            },
            {
                "name": "Taskflow v3.8.0",
                "date": "2024-10-03T03:38:32Z"
            },
            {
                "name": "Taskflow v3.7.0",
                "date": "2024-05-06T20:12:06Z"
            },
            {
                "name": "Taskflow v3.6.0",
                "date": "2023-05-07T06:18:28Z"
            },
            {
                "name": "Taskflow v3.5.0",
                "date": "2023-01-05T22:19:40Z"
            },
            {
                "name": "Taskflow v3.4.0",
                "date": "2022-05-23T23:44:09Z"
            },
            {
                "name": "Taskflow v3.3.0",
                "date": "2022-01-03T23:37:46Z"
            },
            {
                "name": "Taskflow v3.2.0",
                "date": "2021-07-29T22:15:08Z"
            },
            {
                "name": "Taskflow v3.1.0",
                "date": "2021-04-14T20:56:08Z"
            },
            {
                "name": "Taskflow v3.0.0",
                "date": "2021-01-02T06:04:40Z"
            },
            {
                "name": "Taskflow v2.7.0",
                "date": "2020-10-01T20:09:33Z"
            },
            {
                "name": "Taskflow v2.6.0",
                "date": "2020-08-27T16:19:30Z"
            },
            {
                "name": "Taskflow v2.5.0",
                "date": "2020-06-01T22:58:27Z"
            },
            {
                "name": "Cpp-Taskflow v2.4.0",
                "date": "2020-03-25T18:22:07Z"
            },
            {
                "name": "Cpp-Taskflow v2.3.1",
                "date": "2020-03-13T19:14:13Z"
            },
            {
                "name": "Cpp-Taskflow v2.3.0",
                "date": "2020-02-28T02:33:48Z"
            },
            {
                "name": "Cpp-Taskflow v2.2.0",
                "date": "2019-06-15T18:01:37Z"
            },
            {
                "name": "Cpp-Taskflow v2.1.0",
                "date": "2019-02-15T04:46:06Z"
            },
            {
                "name": "Cpp-Taskflow v2.0.0",
                "date": "2019-02-15T04:43:42Z"
            }
        ]
    }
}