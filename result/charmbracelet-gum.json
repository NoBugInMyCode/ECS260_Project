{
    "https://api.github.com/repos/charmbracelet/gum": {
        "forks": 356,
        "watchers": 18653,
        "stars": 18653,
        "languages": {
            "Go": 159734,
            "Nix": 765,
            "Dockerfile": 94
        },
        "commits": [
            "2025-01-21T22:37:50Z",
            "2025-01-21T22:33:52Z",
            "2025-01-21T12:34:38Z",
            "2025-01-15T05:06:10Z",
            "2025-01-13T19:31:05Z",
            "2025-01-13T18:49:43Z",
            "2025-01-12T20:42:52Z",
            "2025-01-12T20:40:44Z",
            "2025-01-07T14:28:17Z",
            "2025-01-07T14:08:24Z",
            "2025-01-07T05:00:57Z",
            "2024-12-17T17:43:24Z",
            "2024-12-17T17:17:43Z",
            "2024-12-17T16:56:19Z",
            "2024-12-17T12:47:31Z",
            "2024-12-13T20:03:42Z",
            "2024-12-13T19:59:59Z",
            "2024-12-13T19:59:44Z",
            "2024-12-13T19:59:32Z",
            "2024-12-13T19:59:14Z",
            "2024-12-13T17:34:10Z",
            "2024-12-12T19:02:19Z",
            "2024-12-12T13:12:28Z",
            "2024-12-12T02:24:25Z",
            "2024-12-12T02:23:58Z",
            "2024-12-12T02:23:33Z",
            "2024-12-11T17:22:26Z",
            "2024-12-11T17:17:03Z",
            "2024-12-11T17:00:55Z",
            "2024-12-11T13:17:41Z"
        ],
        "creation_date": "2022-06-10T22:09:42Z",
        "contributors": 30,
        "topics": [
            "bash",
            "shell"
        ],
        "subscribers": 56,
        "readme": "# Gum\n\n<p>\n    <a href=\"https://stuff.charm.sh/gum/nutritional-information.png\" target=\"_blank\"><img src=\"https://stuff.charm.sh/gum/gum.png\" alt=\"Gum Image\" width=\"450\" /></a>\n    <br><br>\n    <a href=\"https://github.com/charmbracelet/gum/releases\"><img src=\"https://img.shields.io/github/release/charmbracelet/gum.svg\" alt=\"Latest Release\"></a>\n    <a href=\"https://pkg.go.dev/github.com/charmbracelet/gum?tab=doc\"><img src=\"https://godoc.org/github.com/golang/gddo?status.svg\" alt=\"Go Docs\"></a>\n    <a href=\"https://github.com/charmbracelet/gum/actions\"><img src=\"https://github.com/charmbracelet/gum/workflows/build/badge.svg\" alt=\"Build Status\"></a>\n</p>\n\nA tool for glamorous shell scripts. Leverage the power of\n[Bubbles](https://github.com/charmbracelet/bubbles) and [Lip\nGloss](https://github.com/charmbracelet/lipgloss) in your scripts and aliases\nwithout writing any Go code!\n\n<img alt=\"Shell running the ./demo.sh script\" width=\"600\" src=\"https://vhs.charm.sh/vhs-1qY57RrQlXCuydsEgDp68G.gif\">\n\nThe above example is running from a single shell script ([source](./examples/demo.sh)).\n\n## Tutorial\n\nGum provides highly configurable, ready-to-use utilities to help you write\nuseful shell scripts and dotfiles aliases with just a few lines of code.\nLet's build a simple script to help you write\n[Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/#summary)\nfor your dotfiles.\n\nAsk for the commit type with gum choose:\n\n```bash\ngum choose \"fix\" \"feat\" \"docs\" \"style\" \"refactor\" \"test\" \"chore\" \"revert\"\n```\n\n> [!NOTE]\n> This command itself will print to stdout which is not all that useful. To make use of the command later on you can save the stdout to a `$VARIABLE` or `file.txt`.\n\nPrompt for the scope of these changes:\n\n```bash\ngum input --placeholder \"scope\"\n```\n\nPrompt for the summary and description of changes:\n\n```bash\ngum input --value \"$TYPE$SCOPE: \" --placeholder \"Summary of this change\"\ngum write --placeholder \"Details of this change\"\n```\n\nConfirm before committing:\n\n```bash\ngum confirm \"Commit changes?\" && git commit -m \"$SUMMARY\" -m \"$DESCRIPTION\"\n```\n\nCheck out the [complete example](https://github.com/charmbracelet/gum/blob/main/examples/commit.sh) for combining these commands in a single script.\n\n<img alt=\"Running the ./examples/commit.sh script to commit to git\" width=\"600\" src=\"https://vhs.charm.sh/vhs-7rRq3LsEuJVwhwr0xf6Er7.gif\">\n\n## Installation\n\nUse a package manager:\n\n```bash\n# macOS or Linux\nbrew install gum\n\n# Arch Linux (btw)\npacman -S gum\n\n# Nix\nnix-env -iA nixpkgs.gum\n\n# Flox\nflox install gum\n\n# Windows (via WinGet or Scoop)\nwinget install charmbracelet.gum\nscoop install charm-gum\n```\n\n<details>\n<summary>Debian/Ubuntu</summary>\n\n```bash\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://repo.charm.sh/apt/gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/charm.gpg\necho \"deb [signed-by=/etc/apt/keyrings/charm.gpg] https://repo.charm.sh/apt/ * *\" | sudo tee /etc/apt/sources.list.d/charm.list\nsudo apt update && sudo apt install gum\n```\n\n</details>\n\n<details>\n<summary>Fedora/RHEL/OpenSuse</summary>\n\n```bash\necho '[charm]\nname=Charm\nbaseurl=https://repo.charm.sh/yum/\nenabled=1\ngpgcheck=1\ngpgkey=https://repo.charm.sh/yum/gpg.key' | sudo tee /etc/yum.repos.d/charm.repo\nsudo rpm --import https://repo.charm.sh/yum/gpg.key\n\n# yum\nsudo yum install gum\n\n# zypper\nsudo zypper refresh\nsudo zypper install gum\n```\n\n</details>\n\nOr download it:\n\n- [Packages][releases] are available in Debian, RPM, and Alpine formats\n- [Binaries][releases] are available for Linux, macOS, Windows, FreeBSD, OpenBSD, and NetBSD\n\nOr just install it with `go`:\n\n```bash\ngo install github.com/charmbracelet/gum@latest\n```\n\n[releases]: https://github.com/charmbracelet/gum/releases\n\n## Commands\n\n- [`choose`](#choose): Choose an option from a list of choices\n- [`confirm`](#confirm): Ask a user to confirm an action\n- [`file`](#file): Pick a file from a folder\n- [`filter`](#filter): Filter items from a list\n- [`format`](#format): Format a string using a template\n- [`input`](#input): Prompt for some input\n- [`join`](#join): Join text vertically or horizontally\n- [`pager`](#pager): Scroll through a file\n- [`spin`](#spin): Display spinner while running a command\n- [`style`](#style): Apply coloring, borders, spacing to text\n- [`table`](#table): Render a table of data\n- [`write`](#write): Prompt for long-form text\n- [`log`](#log): Log messages to output\n\n## Customization\n\nYou can customize `gum` options and styles with `--flags` and `$ENVIRONMENT_VARIABLES`.\nSee `gum <command> --help` for a full view of each command's customization and configuration options.\n\nCustomize with `--flags`:\n\n```bash\n\ngum input --cursor.foreground \"#FF0\" \\\n          --prompt.foreground \"#0FF\" \\\n          --placeholder \"What's up?\" \\\n          --prompt \"* \" \\\n          --width 80 \\\n          --value \"Not much, hby?\"\n```\n\nCustomize with `ENVIRONMENT_VARIABLES`:\n\n```bash\nexport GUM_INPUT_CURSOR_FOREGROUND=\"#FF0\"\nexport GUM_INPUT_PROMPT_FOREGROUND=\"#0FF\"\nexport GUM_INPUT_PLACEHOLDER=\"What's up?\"\nexport GUM_INPUT_PROMPT=\"* \"\nexport GUM_INPUT_WIDTH=80\n\n# --flags can override values set with environment\ngum input\n```\n\n<img alt=\"Gum input displaying most customization options\" width=\"600\" src=\"https://vhs.charm.sh/vhs-5zb9DlQYA70aL9ZpYLTwKv.gif\">\n\n## Input\n\nPrompt for input with a simple command.\n\n```bash\ngum input > answer.txt\ngum input --password > password.txt\n```\n\n<img src=\"https://vhs.charm.sh/vhs-1nScrStFI3BMlCp5yrLtyg.gif\" width=\"600\" alt=\"Shell running gum input typing Not much, you?\" />\n\n## Write\n\nPrompt for some multi-line text (`ctrl+d` to complete text entry).\n\n```bash\ngum write > story.txt\n```\n\n<img src=\"https://vhs.charm.sh/vhs-7abdKKrUEukgx9aJj8O5GX.gif\" width=\"600\" alt=\"Shell running gum write typing a story\" />\n\n## Filter\n\nFilter a list of values with fuzzy matching:\n\n```bash\necho Strawberry >> flavors.txt\necho Banana >> flavors.txt\necho Cherry >> flavors.txt\ngum filter < flavors.txt > selection.txt\n```\n\n<img src=\"https://vhs.charm.sh/vhs-61euOQtKPtQVD7nDpHQhzr.gif\" width=\"600\" alt=\"Shell running gum filter on different bubble gum flavors\" />\n\nSelect multiple options with the `--limit` flag or `--no-limit` flag. Use `tab` or `ctrl+space` to select, `enter` to confirm.\n\n```bash\ncat flavors.txt | gum filter --limit 2\ncat flavors.txt | gum filter --no-limit\n```\n\n## Choose\n\nChoose an option from a list of choices.\n\n```bash\necho \"Pick a card, any card...\"\nCARD=$(gum choose --height 15 {{A,K,Q,J},{10..2}}\" \"{\u2660,\u2665,\u2663,\u2666})\necho \"Was your card the $CARD?\"\n```\n\nYou can also select multiple items with the `--limit` or `--no-limit` flag, which determines\nthe maximum of items that can be chosen.\n\n```bash\ncat songs.txt | gum choose --limit 5\ncat foods.txt | gum choose --no-limit --header \"Grocery Shopping\"\n```\n\n<img src=\"https://vhs.charm.sh/vhs-3zV1LvofA6Cbn5vBu1NHHl.gif\" width=\"600\" alt=\"Shell running gum choose with numbers and gum flavors\" />\n\n## Confirm\n\nConfirm whether to perform an action. Exits with code `0` (affirmative) or `1`\n(negative) depending on selection.\n\n```bash\ngum confirm && rm file.txt || echo \"File not removed\"\n```\n\n<img src=\"https://vhs.charm.sh/vhs-3xRFvbeQ4lqGerbHY7y3q2.gif\" width=\"600\" alt=\"Shell running gum confirm\" />\n\n## File\n\nPrompt the user to select a file from the file tree.\n\n```bash\nEDITOR $(gum file $HOME)\n```\n\n<img src=\"https://vhs.charm.sh/vhs-2RMRqmnOPneneIgVJJ3mI1.gif\" width=\"600\" alt=\"Shell running gum file\" />\n\n## Pager\n\nScroll through a long document with line numbers and a fully customizable viewport.\n\n```bash\ngum pager < README.md\n```\n\n<img src=\"https://vhs.charm.sh/vhs-3iMDpgOLmbYr0jrYEGbk7p.gif\" width=\"600\" alt=\"Shell running gum pager\" />\n\n## Spin\n\nDisplay a spinner while running a script or command. The spinner will\nautomatically stop after the given command exits.\n\nTo view or pipe the command's output, use the `--show-output` flag.\n\n```bash\ngum spin --spinner dot --title \"Buying Bubble Gum...\" -- sleep 5\n```\n\n<img src=\"https://vhs.charm.sh/vhs-3YFswCmoY4o3Q7MyzWl6sS.gif\" width=\"600\" alt=\"Shell running gum spin while sleeping for 5 seconds\" />\n\nAvailable spinner types include: `line`, `dot`, `minidot`, `jump`, `pulse`, `points`, `globe`, `moon`, `monkey`, `meter`, `hamburger`.\n\n## Table\n\nSelect a row from some tabular data.\n\n```bash\ngum table < flavors.csv | cut -d ',' -f 1\n```\n\n<!-- <img src=\"https://stuff.charm.sh/gum/table.gif\" width=\"600\" alt=\"Shell running gum table\" /> -->\n\n## Style\n\nPretty print any string with any layout with one command.\n\n```bash\ngum style \\\n\t--foreground 212 --border-foreground 212 --border double \\\n\t--align center --width 50 --margin \"1 2\" --padding \"2 4\" \\\n\t'Bubble Gum (1\u00a2)' 'So sweet and so fresh!'\n```\n\n<img src=\"https://github.com/charmbracelet/gum/assets/42545625/67468acf-b3e0-4e78-bd89-360739eb44fa\" width=\"600\" alt=\"Bubble Gum, So sweet and so fresh!\" />\n\n## Join\n\nCombine text vertically or horizontally. Use this command with `gum style` to\nbuild layouts and pretty output.\n\nTip: Always wrap the output of `gum style` in quotes to preserve newlines\n(`\\n`) when using it as an argument in the `join` command.\n\n```bash\nI=$(gum style --padding \"1 5\" --border double --border-foreground 212 \"I\")\nLOVE=$(gum style --padding \"1 4\" --border double --border-foreground 57 \"LOVE\")\nBUBBLE=$(gum style --padding \"1 8\" --border double --border-foreground 255 \"Bubble\")\nGUM=$(gum style --padding \"1 5\" --border double --border-foreground 240 \"Gum\")\n\nI_LOVE=$(gum join \"$I\" \"$LOVE\")\nBUBBLE_GUM=$(gum join \"$BUBBLE\" \"$GUM\")\ngum join --align center --vertical \"$I_LOVE\" \"$BUBBLE_GUM\"\n```\n\n<img src=\"https://github.com/charmbracelet/gum/assets/42545625/68f7a25d-b495-48dd-982a-cee0c8ea5786\" width=\"600\" alt=\"I LOVE Bubble Gum written out in four boxes with double borders around them.\" />\n\n## Format\n\n`format` processes and formats bodies of text. `gum format` can parse markdown,\ntemplate strings, and named emojis.\n\n```bash\n# Format some markdown\ngum format -- \"# Gum Formats\" \"- Markdown\" \"- Code\" \"- Template\" \"- Emoji\"\necho \"# Gum Formats\\n- Markdown\\n- Code\\n- Template\\n- Emoji\" | gum format\n\n# Syntax highlight some code\ncat main.go | gum format -t code\n\n# Render text any way you want with templates\necho '{{ Bold \"Tasty\" }} {{ Italic \"Bubble\" }} {{ Color \"99\" \"0\" \" Gum \" }}' \\\n    | gum format -t template\n\n# Display your favorite emojis!\necho 'I :heart: Bubble Gum :candy:' | gum format -t emoji\n```\n\nFor more information on template helpers, see the [Termenv\ndocs](https://github.com/muesli/termenv#template-helpers). For a full list of\nnamed emojis see the [GitHub API](https://api.github.com/emojis).\n\n<img src=\"https://github.com/charmbracelet/gum/assets/42545625/5cfbb0c8-0022-460d-841b-fec37527ca66\" width=\"300\" alt=\"Running gum format for different types of formats\" />\n\n## Log\n\n`log` logs messages to the terminal at using different levels and styling using\nthe [`charmbracelet/log`](https://github.com/charmbracelet/log) library.\n\n```bash\n# Log some debug information.\ngum log --structured --level debug \"Creating file...\" name file.txt\n# DEBUG Unable to create file. name=temp.txt\n\n# Log some error.\ngum log --structured --level error \"Unable to create file.\" name file.txt\n# ERROR Unable to create file. name=temp.txt\n\n# Include a timestamp.\ngum log --time rfc822 --level error \"Unable to create file.\"\n```\n\nSee the Go [`time` package](https://pkg.go.dev/time#pkg-constants) for acceptable `--time` formats.\n\nSee [`charmbracelet/log`](https://github.com/charmbracelet/log) for more usage.\n\n<img src=\"https://vhs.charm.sh/vhs-6jupuFM0s2fXiUrBE0I1vU.gif\" width=\"600\" alt=\"Running gum log with debug and error levels\" />\n\n## Examples\n\nHow to use `gum` in your daily workflows:\n\nSee the [examples](./examples/) directory for more real world use cases.\n\n- Write a commit message:\n\n```bash\ngit commit -m \"$(gum input --width 50 --placeholder \"Summary of changes\")\" \\\n           -m \"$(gum write --width 80 --placeholder \"Details of changes\")\"\n```\n\n- Open files in your `$EDITOR`\n\n```bash\n$EDITOR $(gum filter)\n```\n\n- Connect to a `tmux` session\n\n```bash\nSESSION=$(tmux list-sessions -F \\#S | gum filter --placeholder \"Pick session...\")\ntmux switch-client -t \"$SESSION\" || tmux attach -t \"$SESSION\"\n```\n\n- Pick a commit hash from `git` history\n\n```bash\ngit log --oneline | gum filter | cut -d' ' -f1 # | copy\n```\n\n- Simple [`skate`](https://github.com/charmbracelet/skate) password selector.\n\n```\nskate list -k | gum filter | xargs skate get\n```\n\n- Uninstall packages\n\n```bash\nbrew list | gum choose --no-limit | xargs brew uninstall\n```\n\n- Clean up `git` branches\n\n```bash\ngit branch | cut -c 3- | gum choose --no-limit | xargs git branch -D\n```\n\n- Checkout GitHub pull requests with [`gh`](https://cli.github.com/)\n\n```bash\ngh pr list | cut -f1,2 | gum choose | cut -f1 | xargs gh pr checkout\n```\n\n- Copy command from shell history\n\n```bash\ngum filter < $HISTFILE --height 20\n```\n\n- `sudo` replacement\n\n```bash\nalias please=\"gum input --password | sudo -nS\"\n```\n\n## Feedback\n\nWe\u2019d love to hear your thoughts on this project. Feel free to drop us a note!\n\n- [Twitter](https://twitter.com/charmcli)\n- [The Fediverse](https://mastodon.social/@charmcli)\n- [Discord](https://charm.sh/chat)\n\n## License\n\n[MIT](https://github.com/charmbracelet/gum/raw/main/LICENSE)\n\n---\n\nPart of [Charm](https://charm.sh).\n\n<a href=\"https://charm.sh/\"><img alt=\"The Charm logo\" src=\"https://stuff.charm.sh/charm-badge.jpg\" width=\"400\" /></a>\n\nCharm\u70ed\u7231\u5f00\u6e90 \u2022 Charm loves open source\n",
        "releases": [
            {
                "name": "v0.15.0",
                "date": "2025-01-13T19:11:42Z"
            },
            {
                "name": "v0.14.5",
                "date": "2024-09-06T16:52:48Z"
            },
            {
                "name": "v0.14.4",
                "date": "2024-08-23T13:56:24Z"
            },
            {
                "name": "v0.14.3",
                "date": "2024-07-24T20:48:17Z"
            },
            {
                "name": "v0.14.2",
                "date": "2024-07-24T19:26:40Z"
            },
            {
                "name": "v0.14.1",
                "date": "2024-05-25T19:05:22Z"
            },
            {
                "name": "v0.14.0",
                "date": "2024-04-29T18:29:24Z"
            },
            {
                "name": "v0.13.0",
                "date": "2023-12-12T16:59:20Z"
            },
            {
                "name": "v0.12.0",
                "date": "2023-11-27T20:42:44Z"
            },
            {
                "name": "v0.11.0",
                "date": "2023-07-21T20:55:46Z"
            },
            {
                "name": "v0.10.0",
                "date": "2023-03-27T16:12:11Z"
            },
            {
                "name": "v0.9.0",
                "date": "2023-01-12T16:51:41Z"
            },
            {
                "name": "v0.8.0",
                "date": "2022-10-11T22:02:40Z"
            },
            {
                "name": "v0.7.0",
                "date": "2022-10-03T17:58:52Z"
            },
            {
                "name": "v0.6.0",
                "date": "2022-09-05T20:55:33Z"
            },
            {
                "name": "v0.5.0",
                "date": "2022-08-29T19:20:15Z"
            },
            {
                "name": "v0.4.0",
                "date": "2022-08-04T16:54:53Z"
            },
            {
                "name": "v0.3.0",
                "date": "2022-08-02T20:56:30Z"
            },
            {
                "name": "v0.2.0",
                "date": "2022-07-31T16:05:55Z"
            },
            {
                "name": "v0.1.0",
                "date": "2022-07-28T13:02:22Z"
            }
        ]
    }
}