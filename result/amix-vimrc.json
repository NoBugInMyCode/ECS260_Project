{
    "https://api.github.com/repos/amix/vimrc": {
        "forks": 7312,
        "watchers": 30950,
        "stars": 30950,
        "languages": {
            "Vim Script": 4088365,
            "Vim Snippet": 806221,
            "Ruby": 116717,
            "Shell": 22292,
            "Python": 13708,
            "PowerShell": 10472,
            "CoffeeScript": 9274,
            "VBScript": 7720,
            "Lua": 5240,
            "Makefile": 4957,
            "CMake": 4187,
            "Dockerfile": 1755,
            "Batchfile": 972,
            "HTML": 253,
            "Haml": 39
        },
        "commits": [
            "2024-10-06T08:25:50Z",
            "2024-02-13T14:13:23Z",
            "2024-02-11T17:33:58Z",
            "2024-02-11T17:33:15Z",
            "2024-01-07T15:19:36Z",
            "2024-01-07T15:15:48Z",
            "2024-01-07T15:15:00Z",
            "2024-01-07T15:14:20Z",
            "2024-01-07T15:09:42Z",
            "2023-08-20T14:39:46Z",
            "2023-08-20T14:37:28Z",
            "2023-08-20T14:36:43Z",
            "2023-08-20T14:36:15Z",
            "2023-08-20T14:35:39Z",
            "2023-08-20T14:33:32Z",
            "2023-07-15T10:47:11Z",
            "2023-07-15T10:43:27Z",
            "2023-07-15T10:39:43Z",
            "2023-04-01T20:49:41Z",
            "2023-04-01T20:48:04Z",
            "2022-12-03T10:29:32Z",
            "2022-12-03T10:25:59Z",
            "2022-11-21T09:11:47Z",
            "2022-11-20T11:24:49Z",
            "2022-11-20T11:22:11Z",
            "2022-11-20T11:21:23Z",
            "2022-10-15T19:50:31Z",
            "2022-10-15T19:49:17Z",
            "2022-10-15T19:48:38Z",
            "2022-10-15T19:39:35Z"
        ],
        "creation_date": "2012-05-29T16:19:29Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 782,
        "readme": "![VIM](https://dnp4pehkvoo6n.cloudfront.net/43c5af597bd5c1a64eb1829f011c208f/as/Ultimate%20Vimrc.svg)\n\n# The Ultimate vimrc\n\nOver the last 10 years, I have used and tweaked Vim. This configuration is the ultimate vimrc (or at least my version of it).\n\nThere are two versions:\n\n* **The Basic**: If you want something small just copy [basic.vim](https://github.com/amix/vimrc/blob/master/vimrcs/basic.vim) into your ~/.vimrc and you will have a good basic setup\n* **The Awesome**: Includes a ton of useful plugins, color schemes, and configurations\n\nI would, of course, recommend using the awesome version.\n\n\n## How to install the Awesome version?\n### Install for your own user only\nThe awesome version includes a lot of great plugins, configurations and color schemes that make Vim a lot better. To install it simply do following from your terminal:\n\n\tgit clone --depth=1 https://github.com/amix/vimrc.git ~/.vim_runtime\n\tsh ~/.vim_runtime/install_awesome_vimrc.sh\n\t\n### Install for multiple users\nTo install for multiple users, the repository needs to be cloned to a location accessible for all the intended users.\n\n\tgit clone --depth=1 https://github.com/amix/vimrc.git /opt/vim_runtime\n\tsh /opt/vim_runtime/install_awesome_parameterized.sh /opt/vim_runtime user0 user1 user2\n\t# to install for all users with home directories, note that root will not be included\n\tsh /opt/vim_runtime/install_awesome_parameterized.sh /opt/vim_runtime --all\n\t\nNaturally, `/opt/vim_runtime` can be any directory, as long as all the users specified have read access.\n\n## Fonts\n\nI recommend using [IBM Plex Mono font](https://github.com/IBM/plex) (it's an open-source and awesome font that can make your code look beautiful). The Awesome vimrc is already setup to try to use it.\n\nSome other fonts that Awesome will try to use:\n\n* [Hack](http://sourcefoundry.org/hack/)\n* [Source Code Pro](https://adobe-fonts.github.io/source-code-pro/)\n\n## How to install the Basic version?\n\nThe basic version is just one file and no plugins. Just copy [basic.vim](https://github.com/amix/vimrc/blob/master/vimrcs/basic.vim) and paste it into your vimrc.\n\nThe basic version is useful to install on remote servers where you don't need many plugins, and you don't do many edits.\n\n\tgit clone --depth=1 https://github.com/amix/vimrc.git ~/.vim_runtime\n\tsh ~/.vim_runtime/install_basic_vimrc.sh\n\n\n## How to install on Windows?\n\nUse [gitforwindows](http://gitforwindows.org/) to checkout the repository and run the installation instructions above. No special instructions needed ;-)\n\n\n## How to install on Linux\n\nIf you have vim aliased as `vi` instead of `vim`, make sure to either alias it: `alias vi=vim`. Otherwise, `apt-get install vim`\n\n\n## How to update to latest version?\n\nJust do a git rebase!\n\n\n    cd ~/.vim_runtime\n    git reset --hard\n    git clean -d --force\n    git pull --rebase\n    python update_plugins.py  # use python3 if python is unavailable\n\n## Some screenshots\n\nColors when editing a Python file:\n\n![Screenshot 1](https://dnp4pehkvoo6n.cloudfront.net/07583008e4da885801657e8781777844/as/Python%20editing.png)\n\n[NERD Tree](https://github.com/preservim/nerdtree) plugin in a terminal window:\n![Screenshot 3](https://dnp4pehkvoo6n.cloudfront.net/ae719203166585d64728f28398f4b1b7/as/Terminal%20usage.png)\n\nDistraction free mode using [goyo.vim](https://github.com/junegunn/goyo.vim) and [vim-zenroom2](https://github.com/amix/vim-zenroom2):\n![Screenshot 4](https://dnp4pehkvoo6n.cloudfront.net/f0dcc4c9739148c56cbf8285a910ac41/as/Zen%20mode.png)\n\n\n## Included Plugins\n\nI recommend reading the docs of these plugins to understand them better. Each plugin provides a much better Vim experience!\n\n* [ack.vim](https://github.com/mileszs/ack.vim): Vim plugin for `the_silver_searcher` (ag) or ack -- a wicked fast grep\n* [bufexplorer.zip](https://github.com/vim-scripts/bufexplorer.zip): Quickly and easily switch between buffers. This plugin can be opened with `<leader+o>`\n* [ctrlp.vim](https://github.com/ctrlpvim/ctrlp.vim): Fuzzy file, buffer, mru and tag finder. It's mapped to `<Ctrl+F>`\n* [goyo.vim](https://github.com/junegunn/goyo.vim) and [vim-zenroom2](https://github.com/amix/vim-zenroom2): \n* [lightline.vim](https://github.com/itchyny/lightline.vim): A light and configurable statusline/tabline for Vim\n* [NERD Tree](https://github.com/preservim/nerdtree): A tree explorer plugin for vim\n* [open_file_under_cursor.vim](https://github.com/amix/open_file_under_cursor.vim): Open file under cursor when pressing `gf`\n* [pathogen.vim](https://github.com/tpope/vim-pathogen): Manage your vim runtimepath \n* [snipmate.vim](https://github.com/garbas/vim-snipmate): snipmate.vim aims to be a concise vim script that implements some of TextMate's snippets features in Vim\n* [ale](https://github.com/dense-analysis/ale): Syntax and lint checking for vim (ALE requires NeoVim >= 0.2.0 or Vim 8 with +timers +job +channel)\n* [vim-commentary](https://github.com/tpope/vim-commentary): Comment stuff out.  Use `gcc` to comment out a line (takes a count), `gc` to comment out the target of a motion. `gcu` uncomments a set of adjacent commented lines\n* [vim-expand-region](https://github.com/terryma/vim-expand-region): Allows you to visually select increasingly larger regions of text using the same key combination\n* [vim-fugitive](https://github.com/tpope/vim-fugitive): A Git wrapper so awesome, it should be illegal\n* [vim-indent-object](https://github.com/michaeljsmith/vim-indent-object): Defines a new text object representing lines of code at the same indent level. Useful for python/vim scripts\n* [vim-multiple-cursors](https://github.com/terryma/vim-multiple-cursors): Sublime Text style multiple selections for Vim, CTRL+N is remapped to CTRL+S (due to YankRing)\n* [vim-yankstack](https://github.com/maxbrunsfeld/vim-yankstack): Maintains a history of previous yanks, changes and deletes\n* [vim-zenroom2](https://github.com/amix/vim-zenroom2) Remove all clutter and focus only on the essential. Similar to iA Writer or Write Room\n* [gist-vim](https://github.com/mattn/gist-vim) Easily create gists from Vim using the `:Gist` command\n* [vim-indent-guides](https://github.com/nathanaelkane/vim-indent-guides) Is a plugin for visually displaying indent levels in Vim\n* [editorconfig-vim](https://github.com/editorconfig/editorconfig-vim) EditorConfig helps maintain consistent coding styles for multiple developers working on the same project across various editors and IDEs\n* [copilot.vim](https://github.com/github/copilot.vim) Plugin for GitHub Copilot (AI autocompletion FTW \ud83d\ude05)\n\n\n## Included color schemes\n\nType `:colorscheme <Tab>` to try out color schemes on the fly,\nor add the command to `~/.vim_runtime/my_configs.vim` (see [below](#how-to-include-your-own-stuff)),\nfor example `colorscheme pyte`.\n\n* [peaksea](https://github.com/vim-scripts/peaksea): The default\n* [dracula](https://github.com/dracula/vim)\n* [vim-colors-solarized](https://github.com/altercation/vim-colors-solarized)\n* [vim-irblack](https://github.com/wgibbs/vim-irblack)\n* [mayansmoke](https://github.com/vim-scripts/mayansmoke)\n* [vim-pyte](https://github.com/therubymug/vim-pyte)\n\n\n## Included modes\n\n* [vim-coffee-script](https://github.com/kchmck/vim-coffee-script)\n* [vim-less](https://github.com/groenewege/vim-less)\n* [vim-bundle-mako](https://github.com/sophacles/vim-bundle-mako)\n* [vim-markdown](https://github.com/plasticboy/vim-markdown)\n* [nginx.vim](https://github.com/vim-scripts/nginx.vim): Highlights configuration files for nginx\n* [rust.vim](https://github.com/rust-lang/rust.vim)\n* [vim-ruby](https://github.com/vim-ruby/vim-ruby)\n* [typescript-vim](https://github.com/leafgarland/typescript-vim)\n* [vim-javascript](https://github.com/pangloss/vim-javascript)\n* [vim-python-pep8-indent](https://github.com/Vimjas/vim-python-pep8-indent)\n\n\n## How to include your own stuff?\n\nAfter you have installed the setup,\ncreate an empty `~/.vim_runtime/my_configs.vim` file for further customization.\nThis file's syntax matches `vimrc` syntax,\nand add `vimrc` lines like `set number` as needed.\n\nFor instance, my `my_configs.vim` looks like this:\n\n\t~/.vim_runtime > cat my_configs.vim\n\tmap <leader>ct :cd ~/Desktop/Todoist/todoist<cr>\n\tmap <leader>cw :cd ~/Desktop/Wedoist/wedoist<cr> \n\nYou can also install your plugins, for instance, via pathogen you can install [vim-rails](https://github.com/tpope/vim-rails):\n\n\tcd ~/.vim_runtime\n\tgit clone git://github.com/tpope/vim-rails.git my_plugins/vim-rails\n\nYou can also install plugins without any plugin manager (vim 8+ required):\n\n* Create pack plugin directory:\\\n`mkdir -p ~/.vim_runtime/pack/plugins/start`\n* Clone the plugin that you want in that directory, for example:\\\n`git clone --depth=1 git://github.com/maxmellon/vim-jsx-pretty  ~/.vim_runtime/pack/plugins/start/vim-jsx-pretty`\n\n\n## Key Mappings\n\nThe [leader](http://learnvimscriptthehardway.stevelosh.com/chapters/06.html#leader) is `,`, so whenever you see `<leader>` it means `,`.\n\n\n### Normal mode mappings\n\nFast saving of a buffer (`<leader>w`):\n\n```vim\nnmap <leader>w :w!<cr>\n```\n\nMap `<Space>` to `/` (search) and `<Ctrl>+<Space>` to `?` (backwards search):\n```vim\t\nmap <space> /\nmap <C-space> ?\n```\nDisable highlights when you press `<leader><cr>`:\n\n```vim\nmap <silent> <leader><cr> :noh<cr>\n```\nSmart way to move between windows (`<ctrl>j` etc.):\n```vim\t\nmap <C-j> <C-W>j\nmap <C-k> <C-W>k\nmap <C-h> <C-W>h\nmap <C-l> <C-W>l\n```\nClosing of the current buffer(s) (`<leader>bd` and (`<leader>ba`)):\n```vim\t\n\" Close current buffer\nmap <leader>bd :Bclose<cr>\n\n\" Close all buffers\nmap <leader>ba :1,1000 bd!<cr>\n```\t\nUseful mappings for managing tabs:\n```vim\t\nmap <leader>tn :tabnew<cr>\nmap <leader>to :tabonly<cr>\nmap <leader>tc :tabclose<cr>\nmap <leader>tm :tabmove \n\n\" Opens a new tab with the current buffer's path\n\" Super useful when editing files in the same directory\nmap <leader>te :tabedit <C-r>=escape(expand(\"%:p:h\"), \" \")<cr>/\n```\t\nSwitch [CWD](http://vim.wikia.com/wiki/Set_working_directory_to_the_current_file) to the directory of the open buffer:\n```vim\t\nmap <leader>cd :cd %:p:h<cr>:pwd<cr>\n```\t\nOpen `ack.vim` for fast search:\n```vim\t\nmap <leader>g :Ack \n```\nQuickly open a buffer for scripbble:\n```vim\t\nmap <leader>q :e ~/buffer<cr>\n```\nToggle paste mode on and off:\n```vim\t\nmap <leader>pp :setlocal paste!<cr>\n```\n\n### Visual mode mappings\n\nVisual mode pressing `*` or `#` searches for the current selection:\n```vim\nvnoremap <silent> * :call VisualSelection('f')<CR>\nvnoremap <silent> # :call VisualSelection('b')<CR>\n```\nWhen you press gv you `Ack.vim` after the selected text:\n```vim\nvnoremap <silent> gv :call VisualSelection('gv', '')<CR>\n```\nWhen you press `<leader>r` you can search and replace the selected text:\n```vim\nvnoremap <silent> <leader>r :call VisualSelection('replace')<CR>\n```\nSurround the visual selection in parenthesis/brackets/etc.:\n```vim\nvnoremap $1 <esc>`>a)<esc>`<i(<esc>\nvnoremap $2 <esc>`>a]<esc>`<i[<esc>\nvnoremap $3 <esc>`>a}<esc>`<i{<esc>\nvnoremap $$ <esc>`>a\"<esc>`<i\"<esc>\nvnoremap $q <esc>`>a'<esc>`<i'<esc>\nvnoremap $e <esc>`>a`<esc>`<i`<esc>\n```\n\n### Insert mode mappings\n\nQuickly insert parenthesis/brackets/etc.:\n```vim\ninoremap $1 ()<esc>i\ninoremap $2 []<esc>i\ninoremap $3 {}<esc>i\ninoremap $4 {<esc>o}<esc>O\ninoremap $q ''<esc>i\ninoremap $e \"\"<esc>i\ninoremap $t <><esc>i\n```\nInsert the current date and time (useful for timestamps):\n```vim\niab xdate <C-r>=strftime(\"%d/%m/%y %H:%M:%S\")<cr>\n```\n\n### Command line mappings\n\n$q is super useful when browsing on the command line. It deletes everything until the last slash:\n```vim\ncno $q <C-\\>eDeleteTillSlash()<cr>\n```\nBash like keys for the command line:\n```vim\ncnoremap <C-A>\t\t<Home>\ncnoremap <C-E>\t\t<End>\ncnoremap <C-K>\t\t<C-U>\n\ncnoremap <C-P> <Up>\ncnoremap <C-N> <Down>\n```\n\nWrite the file as sudo (works only on Unix). Super useful when you open a file and you don't have permissions to save your changes. [Vim tip](http://vim.wikia.com/wiki/Su-write):\n\n    :W \n\n### Plugin related mappings\n\nOpen [bufexplorer](https://github.com/vim-scripts/bufexplorer.zip) to see and manage the current buffers (`<leader>o`):\n```vim\nmap <leader>o :BufExplorer<cr>\n```\nOpen [ctrlp.vim](https://github.com/kien/ctrlp.vim) plugin to quickly find a file or a buffer (`<leader>j` or `<ctrl>f`):\n```vim\n\" Quickly find and open a file in the CWD\nlet g:ctrlp_map = '<C-f>'\n\n\" Quickly find and open a recently opened file\nmap <leader>f :MRU<CR>\n\n\" Quickly find and open a buffer\nmap <leader>b :CtrlPBuffer<cr>\n```\n[NERD Tree](https://github.com/preservim/nerdtree) mappings:\n```vim\nmap <leader>nn :NERDTreeToggle<cr>\nmap <leader>nb :NERDTreeFromBookmark \nmap <leader>nf :NERDTreeFind<cr>\n```\n[goyo.vim](https://github.com/junegunn/goyo.vim) and [vim-zenroom2](https://github.com/amix/vim-zenroom2) lets you only focus on one thing at a time. It removes all the distractions and centers the content. It has a special look when editing Markdown, reStructuredText and textfiles. It only has one mapping. (`<leader>z`)\n```vim\nmap <leader>z :Goyo<cr>\n```\n[vim-multiple-cursors](https://github.com/terryma/vim-multiple-cursors) mappings to manage multiple cursors at once:\n```vim\nlet g:multi_cursor_start_word_key      = '<C-s>'\nlet g:multi_cursor_select_all_word_key = '<A-s>'\nlet g:multi_cursor_start_key           = 'g<C-s>'\nlet g:multi_cursor_select_all_key      = 'g<A-s>'\nlet g:multi_cursor_next_key            = '<C-s>'\nlet g:multi_cursor_prev_key            = '<C-p>'\nlet g:multi_cursor_skip_key            = '<C-x>'\nlet g:multi_cursor_quit_key            = '<Esc>'\n```\n[vim-yankstack](https://github.com/maxbrunsfeld/vim-yankstack) mappings to manage the kill-ring (clipboard):\n```vim\nnmap <C-p> <Plug>yankstack_substitute_older_paste\nnmap <C-n> <Plug>yankstack_substitute_newer_paste\n```\n[ctrl-p](https://github.com/ctrlpvim/ctrlp.vim) mappings to easily find and open a file, buffer, etc.:\n```vim\nlet g:ctrlp_map = '<C-f>'\nmap <leader>j :CtrlP<cr>\nmap <C-b> :CtrlPBuffer<cr>\n```\n\n[vim-snipmate](https://github.com/garbas/vim-snipmate) mappings to autocomplete via snippets:\n```vim\nino <C-j> <C-r>=snipMate#TriggerSnippet()<cr>\nsnor <C-j> <esc>i<right><C-r>=snipMate#TriggerSnippet()<cr>\n```\n[vim-surround](https://github.com/tpope/vim-surround) mappings to easily surround a string with `_()` gettext annotation:\n```vim\nvmap Si S(i_<esc>f)\nau FileType mako vmap Si S\"i${ _(<esc>2f\"a) }<esc>\n```\n[ale](https://github.com/dense-analysis/ale) to easily go to the next Ale syntax/lint error:\n```vim\nnmap <silent> <leader>a <Plug>(ale_next_wrap)\n```\n[vim-indent-guides](https://github.com/nathanaelkane/vim-indent-guides) the default mapping to toggle the plugin is (`<leader>ig`)\n\n    You can also use the following commands inside Vim:\n    :IndentGuidesEnable\n    :IndentGuidesDisable\n    :IndentGuidesToggle\n\n[vim-fugitive](https://github.com/tpope/vim-fugitive) to copy the link to the line of a Git repository to the clipboard:\n```vim\nnnoremap <leader>v :.GBrowse!<CR>\nxnoremap <leader>v :'<'>GBrowse!<CR>\n```\n### Spell checking\nPressing `<leader>ss` will toggle spell checking:\n```vim\nmap <leader>ss :setlocal spell!<cr>\n```\nShortcuts using `<leader>` instead of special characters:\n```vim\nmap <leader>sn ]s\nmap <leader>sp [s\nmap <leader>sa zg\nmap <leader>s? z=\n```\n### Running Code\nTo run code directly from vim, press `F5`. The currently open code will execute without you having to type anything.\n\nCan be used to execute code written in C, C++, Java, Python, Go, Octave, Bash scripts and HTML. To edit how you want your code to be executed, make changes in the file `~/.vim_runtime/vimrcs/extended.vim`\n\n### Cope\nQuery `:help cope` if you are unsure what cope is. It's super useful!\n\nWhen you search with `Ack.vim`, display your results in cope by doing:\n`<leader>cc`\n\nTo go to the next search result do:\n`<leader>n`\n\nTo go to the previous search results do:\n`<leader>p`\n\nCope mappings:\n```vim\nmap <leader>cc :botright cope<cr>\nmap <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg\nmap <leader>n :cn<cr>\nmap <leader>p :cp<cr>\n```\n\n## How to uninstall\nJust do following:\n* Remove `~/.vim_runtime`\n* Remove any lines that reference `.vim_runtime` in your `~/.vimrc`\n\n\n## Looking for a remote-first job?\n\nMaintaining this Vim configuration isn't my day job. Daily I am the founder/CEO of [Doist](https://doist.com/). You could come and help us build the workplace of the future while living a balanced life (anywhere in the world \ud83c\udf0d\ud83c\udf0e\ud83c\udf0f).\n\nPS: Using Vim isn't a requirement \ud83d\ude04\n\n",
        "releases": []
    }
}