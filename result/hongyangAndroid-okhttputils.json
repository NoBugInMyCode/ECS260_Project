{
    "https://api.github.com/repos/hongyangAndroid/okhttputils": {
        "forks": 2387,
        "watchers": 6866,
        "stars": 6866,
        "languages": {
            "Java": 92188
        },
        "commits": [
            "2017-06-26T01:57:16Z",
            "2016-09-10T16:28:33Z",
            "2016-06-23T09:39:04Z",
            "2016-06-23T09:31:32Z",
            "2016-06-20T14:15:13Z",
            "2016-06-20T13:24:01Z",
            "2016-06-20T10:03:11Z",
            "2016-06-01T05:48:17Z",
            "2016-05-30T02:09:21Z",
            "2016-05-30T01:47:04Z",
            "2016-05-25T08:31:20Z",
            "2016-05-24T09:24:19Z",
            "2016-05-24T09:24:13Z",
            "2016-05-24T09:24:06Z",
            "2016-05-24T09:23:58Z",
            "2016-05-24T09:17:00Z",
            "2016-05-24T07:07:57Z",
            "2016-05-06T18:09:35Z",
            "2016-05-06T17:59:26Z",
            "2016-05-01T14:42:12Z",
            "2016-05-01T14:41:50Z",
            "2016-04-12T15:00:24Z",
            "2016-03-21T01:51:54Z",
            "2016-03-21T01:38:11Z",
            "2016-03-14T09:09:18Z",
            "2016-03-10T14:01:42Z",
            "2016-03-10T10:06:52Z",
            "2016-03-06T13:03:10Z",
            "2016-03-05T06:44:54Z",
            "2016-03-05T06:39:50Z"
        ],
        "creation_date": "2015-08-17T14:53:29Z",
        "contributors": 6,
        "topics": [],
        "subscribers": 416,
        "readme": "# okhttp-utils\n\n>\u7531\u4e8e\u4e2a\u4eba\u539f\u56e0\uff0c\u73b0\u5df2\u505c\u6b62\u7ef4\u62a4\u3002\n\n\u5bf9okhttp\u7684\u5c01\u88c5\u7c7b\uff0cokhttp\u89c1\uff1a[https://github.com/square/okhttp](https://github.com/square/okhttp).\n\n\u76ee\u524d\u5bf9\u5e94okhttp\u7248\u672c`3.3.1`.\n\n## \u7528\u6cd5\n\n* Android Studio\n\t\n\t```\n\tcompile 'com.zhy:okhttputils:2.6.2'\n\t```\n\t\n* Eclipse\n\t\n\t\u4e0b\u8f7d\u6700\u65b0jar:[okhttputils-2\\_6\\_2.jar](okhttputils-2_6_2.jar?raw=true)\n\n\t\u6ce8\uff1a\u9700\u8981\u540c\u65f6\u5bfc\u5165okhttp\u548cokio\u7684jar\uff0c\u4e0b\u8f7d\u89c1\uff1a[https://github.com/square/okhttp](https://github.com/square/okhttp).\n\t\n\n## \u76ee\u524d\u5bf9\u4ee5\u4e0b\u9700\u6c42\u8fdb\u884c\u4e86\u5c01\u88c5\n* \u4e00\u822c\u7684get\u8bf7\u6c42\n* \u4e00\u822c\u7684post\u8bf7\u6c42\n* \u57fa\u4e8eHttp Post\u7684\u6587\u4ef6\u4e0a\u4f20\uff08\u7c7b\u4f3c\u8868\u5355\uff09\n* \u6587\u4ef6\u4e0b\u8f7d/\u52a0\u8f7d\u56fe\u7247\n* \u4e0a\u4f20\u4e0b\u8f7d\u7684\u8fdb\u5ea6\u56de\u8c03\n* \u652f\u6301\u53d6\u6d88\u67d0\u4e2a\u8bf7\u6c42\n* \u652f\u6301\u81ea\u5b9a\u4e49Callback\n* \u652f\u6301HEAD\u3001DELETE\u3001PATCH\u3001PUT\n* \u652f\u6301session\u7684\u4fdd\u6301\n* \u652f\u6301\u81ea\u7b7e\u540d\u7f51\u7ad9https\u7684\u8bbf\u95ee\uff0c\u63d0\u4f9b\u65b9\u6cd5\u8bbe\u7f6e\u4e0b\u8bc1\u4e66\u5c31\u884c\n\n## \u914d\u7f6eOkhttpClient\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5c06\u76f4\u63a5\u4f7f\u7528okhttp\u9ed8\u8ba4\u7684\u914d\u7f6e\u751f\u6210OkhttpClient\uff0c\u5982\u679c\u4f60\u6709\u4efb\u4f55\u914d\u7f6e\uff0c\u8bb0\u5f97\u5728Application\u4e2d\u8c03\u7528`initClient`\u65b9\u6cd5\u8fdb\u884c\u8bbe\u7f6e\u3002\n\n```java\npublic class MyApplication extends Application\n{\t\n\t@Override\n    public void onCreate()\n    {\n        super.onCreate();\n\n        OkHttpClient okHttpClient = new OkHttpClient.Builder()\n//                .addInterceptor(new LoggerInterceptor(\"TAG\"))\n                  .connectTimeout(10000L, TimeUnit.MILLISECONDS)\n                  .readTimeout(10000L, TimeUnit.MILLISECONDS)\n                  //\u5176\u4ed6\u914d\u7f6e\n                 .build();\n                 \n        OkHttpUtils.initClient(okHttpClient);\n\n    }\n}\n```\n\u522b\u5fd8\u4e86\u5728AndroidManifest\u4e2d\u8bbe\u7f6e\u3002\n\n## \u5bf9\u4e8eCookie(\u5305\u542bSession)\n\n\u5bf9\u4e8ecookie\u4e00\u6837\uff0c\u76f4\u63a5\u901a\u8fc7cookiejar\u65b9\u6cd5\u914d\u7f6e\uff0c\u53c2\u8003\u4e0a\u9762\u7684\u914d\u7f6e\u8fc7\u7a0b\u3002\n\n```\nCookieJarImpl cookieJar = new CookieJarImpl(new PersistentCookieStore(getApplicationContext()));\nOkHttpClient okHttpClient = new OkHttpClient.Builder()\n          .cookieJar(cookieJar)\n          //\u5176\u4ed6\u914d\u7f6e\n         .build();\n                 \nOkHttpUtils.initClient(okHttpClient);\n```\n\u76ee\u524d\u9879\u76ee\u4e2d\u5305\u542b\uff1a\n\n* PersistentCookieStore //\u6301\u4e45\u5316cookie\n* SerializableHttpCookie //\u6301\u4e45\u5316cookie\n* MemoryCookieStore //cookie\u4fe1\u606f\u5b58\u5728\u5185\u5b58\u4e2d\n\n\u5982\u679c\u9047\u5230\u95ee\u9898\uff0c\u6b22\u8fce\u53cd\u9988\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0CookieJar\u63a5\u53e3\uff0c\u7f16\u5199cookie\u7ba1\u7406\u76f8\u5173\u4ee3\u7801\u3002\n\n\u6b64\u5916\uff0c\u5bf9\u4e8e\u6301\u4e45\u5316cookie\u8fd8\u53ef\u4ee5\u4f7f\u7528[https://github.com/franmontiel/PersistentCookieJar](https://github.com/franmontiel/PersistentCookieJar).\n\n\u76f8\u5f53\u4e8e\u6846\u67b6\u4e2d\u53ea\u662f\u63d0\u4f9b\u4e86\u51e0\u4e2a\u5b9e\u73b0\u7c7b\uff0c\u4f60\u53ef\u4ee5\u81ea\u884c\u5b9a\u5236\u6216\u8005\u9009\u62e9\u4f7f\u7528\u3002\n\n## \u5bf9\u4e8eLog\n\n\u521d\u59cb\u5316OkhttpClient\u65f6\uff0c\u901a\u8fc7\u8bbe\u7f6e\u62e6\u622a\u5668\u5b9e\u73b0\uff0c\u6846\u67b6\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a`LoggerInterceptor `\uff0c\u5f53\u7136\u4f60\u53ef\u4ee5\u81ea\u884c\u5b9e\u73b0\u4e00\u4e2aInterceptor \u3002\n\n```\n OkHttpClient okHttpClient = new OkHttpClient.Builder()\n       .addInterceptor(new LoggerInterceptor(\"TAG\"))\n        //\u5176\u4ed6\u914d\u7f6e\n        .build();\nOkHttpUtils.initClient(okHttpClient);\n```\n\n\n## \u5bf9\u4e8eHttps\n\n\u4f9d\u7136\u662f\u901a\u8fc7\u914d\u7f6e\u5373\u53ef\uff0c\u6846\u67b6\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b`HttpsUtils`\n\n* \u8bbe\u7f6e\u53ef\u8bbf\u95ee\u6240\u6709\u7684https\u7f51\u7ad9\n\n```\nHttpsUtils.SSLParams sslParams = HttpsUtils.getSslSocketFactory(null, null, null);\nOkHttpClient okHttpClient = new OkHttpClient.Builder()\n        .sslSocketFactory(sslParams.sSLSocketFactory, sslParams.trustManager)\n         //\u5176\u4ed6\u914d\u7f6e\n         .build();\nOkHttpUtils.initClient(okHttpClient);\n```\n\n* \u8bbe\u7f6e\u5177\u4f53\u7684\u8bc1\u4e66\n\n```\nHttpsUtils.SSLParams sslParams = HttpsUtils.getSslSocketFactory(\u8bc1\u4e66\u7684inputstream, null, null);\nOkHttpClient okHttpClient = new OkHttpClient.Builder()\n        .sslSocketFactory(sslParams.sSLSocketFactory, sslParams.trustManager))\n         //\u5176\u4ed6\u914d\u7f6e\n         .build();\nOkHttpUtils.initClient(okHttpClient);\n```\n\n* \u53cc\u5411\u8ba4\u8bc1\n\n```\nHttpsUtils.getSslSocketFactory(\n\t\u8bc1\u4e66\u7684inputstream, \n\t\u672c\u5730\u8bc1\u4e66\u7684inputstream, \n\t\u672c\u5730\u8bc1\u4e66\u7684\u5bc6\u7801)\n```\n\n\u540c\u6837\u7684\uff0c\u6846\u67b6\u4e2d\u53ea\u662f\u63d0\u4f9b\u4e86\u51e0\u4e2a\u5b9e\u73b0\u7c7b\uff0c\u4f60\u53ef\u4ee5\u81ea\u884c\u5b9e\u73b0`SSLSocketFactory`\uff0c\u4f20\u5165sslSocketFactory\u5373\u53ef\u3002\n\n##\u5176\u4ed6\u7528\u6cd5\u793a\u4f8b\n\n### GET\u8bf7\u6c42\n\n```java\nString url = \"http://www.csdn.net/\";\nOkHttpUtils\n    .get()\n    .url(url)\n    .addParams(\"username\", \"hyman\")\n    .addParams(\"password\", \"123\")\n    .build()\n    .execute(new StringCallback()\n\t        {\n\t            @Override\n\t            public void onError(Request request, Exception e)\n\t            {\n\t                \n\t            }\n\t\n\t            @Override\n\t            public void onResponse(String response)\n\t            {\n\t\n\t            }\n\t        });\n```\n\n### POST\u8bf7\u6c42\n\n```java\n OkHttpUtils\n    .post()\n    .url(url)\n    .addParams(\"username\", \"hyman\")\n    .addParams(\"password\", \"123\")\n    .build()\n    .execute(callback);\n\n```\n\n### Post JSON\n\n```java\n  OkHttpUtils\n    .postString()\n    .url(url)\n    .content(new Gson().toJson(new User(\"zhy\", \"123\")))\n     .mediaType(MediaType.parse(\"application/json; charset=utf-8\"))\n    .build()\n    .execute(new MyStringCallback());\n```\n\n\u63d0\u4ea4\u4e00\u4e2aGson\u5b57\u7b26\u4e32\u5230\u670d\u52a1\u5668\u7aef\uff0c\u6ce8\u610f\uff1a\u4f20\u9012JSON\u7684\u65f6\u5019\uff0c\u4e0d\u8981\u901a\u8fc7addHeader\u53bb\u8bbe\u7f6econtentType\uff0c\u800c\u4f7f\u7528`.mediaType(MediaType.parse(\"application/json; charset=utf-8\"))`.\u3002\n\n### Post File\n\n```java\n OkHttpUtils\n\t.postFile()\n\t.url(url)\n\t.file(file)\n\t.build()\n\t.execute(new MyStringCallback());\n```\n\u5c06\u6587\u4ef6\u4f5c\u4e3a\u8bf7\u6c42\u4f53\uff0c\u53d1\u9001\u5230\u670d\u52a1\u5668\u3002\n\n\n### Post\u8868\u5355\u5f62\u5f0f\u4e0a\u4f20\u6587\u4ef6\n\n```java\nOkHttpUtils.post()//\n    .addFile(\"mFile\", \"messenger_01.png\", file)//\n    .addFile(\"mFile\", \"test1.txt\", file2)//\n    .url(url)\n    .params(params)//\n    .headers(headers)//\n    .build()//\n    .execute(new MyStringCallback());\n```\n\n\u652f\u6301\u5355\u4e2a\u591a\u4e2a\u6587\u4ef6\uff0c`addFile`\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u6587\u4ef6\u7684key\uff0c\u5373\u7c7b\u522b\u8868\u5355\u4e2d`<input type=\"file\" name=\"mFile\"/>`\u7684name\u5c5e\u6027\u3002\n\n### \u81ea\u5b9a\u4e49CallBack\n\n\u76ee\u524d\u5185\u90e8\u5305\u542b`StringCallBack`,`FileCallBack`,`BitmapCallback`\uff0c\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u53bb\u81ea\u5b9a\u4e49Callback\uff0c\u4f8b\u5982\u5e0c\u671b\u56de\u8c03User\u5bf9\u8c61\uff1a\n\n```java\npublic abstract class UserCallback extends Callback<User>\n{\n    @Override\n    public User parseNetworkResponse(Response response) throws IOException\n    {\n        String string = response.body().string();\n        User user = new Gson().fromJson(string, User.class);\n        return user;\n    }\n}\n\n OkHttpUtils\n    .get()//\n    .url(url)//\n    .addParams(\"username\", \"hyman\")//\n    .addParams(\"password\", \"123\")//\n    .build()//\n    .execute(new UserCallback()\n    {\n        @Override\n        public void onError(Request request, Exception e)\n        {\n            mTv.setText(\"onError:\" + e.getMessage());\n        }\n\n        @Override\n        public void onResponse(User response)\n        {\n            mTv.setText(\"onResponse:\" + response.username);\n        }\n    });\n\n```\n\n\u901a\u8fc7`parseNetworkResponse `\u56de\u8c03\u7684response\u8fdb\u884c\u89e3\u6790\uff0c\u8be5\u65b9\u6cd5\u8fd0\u884c\u5728\u5b50\u7ebf\u7a0b\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fdb\u884c\u4efb\u4f55\u8017\u65f6\u64cd\u4f5c\uff0c\u8be6\u7ec6\u53c2\u89c1sample\u3002\n\n\n### \u4e0b\u8f7d\u6587\u4ef6\n\n```java\n OkHttpUtils//\n\t.get()//\n\t.url(url)//\n\t.build()//\n\t.execute(new FileCallBack(Environment.getExternalStorageDirectory().getAbsolutePath(), \"gson-2.2.1.jar\")//\n\t{\n\t    @Override\n\t    public void inProgress(float progress)\n\t    {\n\t        mProgressBar.setProgress((int) (100 * progress));\n\t    }\n\t\n\t    @Override\n\t    public void onError(Request request, Exception e)\n\t    {\n\t        Log.e(TAG, \"onError :\" + e.getMessage());\n\t    }\n\t\n\t    @Override\n\t    public void onResponse(File file)\n\t    {\n\t        Log.e(TAG, \"onResponse :\" + file.getAbsolutePath());\n\t    }\n\t});\n```\n\n\u6ce8\u610f\u4e0b\u8f7d\u6587\u4ef6\u53ef\u4ee5\u4f7f\u7528`FileCallback`\uff0c\u9700\u8981\u4f20\u5165\u6587\u4ef6\u9700\u8981\u4fdd\u5b58\u7684\u6587\u4ef6\u5939\u4ee5\u53ca\u6587\u4ef6\u540d\u3002\n\n\n### \u663e\u793a\u56fe\u7247\n\n```java\n OkHttpUtils\n    .get()//\n    .url(url)//\n    .build()//\n    .execute(new BitmapCallback()\n    {\n        @Override\n        public void onError(Request request, Exception e)\n        {\n            mTv.setText(\"onError:\" + e.getMessage());\n        }\n\n        @Override\n        public void onResponse(Bitmap bitmap)\n        {\n            mImageView.setImageBitmap(bitmap);\n        }\n    });\n```\n\n\u663e\u793a\u56fe\u7247\uff0c\u56de\u8c03\u4f20\u5165`BitmapCallback`\u5373\u53ef\u3002\n\n\n### \u4e0a\u4f20\u4e0b\u8f7d\u7684\u8fdb\u5ea6\u663e\u793a\n\n```java\nnew Callback<T>()\n{\n    //...\n    @Override\n    public void inProgress(float progress)\n    {\n       //use progress: 0 ~ 1\n    }\n}\n```\n\ncallback\u56de\u8c03\u4e2d\u6709`inProgress `\u65b9\u6cd5\uff0c\u76f4\u63a5\u590d\u5199\u5373\u53ef\u3002\n\n### HEAD\u3001DELETE\u3001PUT\u3001PATCH\n\n```java\n\nOkHttpUtils\n     .put()//also can use delete() ,head() , patch()\n     .requestBody(RequestBody.create(null, \"may be something\"))//\n     .build()//\n     .execute(new MyStringCallback());\n```\n\n\u5982\u679c\u9700\u8981requestBody\uff0c\u4f8b\u5982\uff1aPUT\u3001PATCH\uff0c\u81ea\u884c\u6784\u9020\u8fdb\u884c\u4f20\u5165\u3002\n\n\n\n### \u540c\u6b65\u7684\u8bf7\u6c42\n\n```\n Response response = OkHttpUtils\n    .get()//\n    .url(url)//\n    .tag(this)//\n    .build()//\n    .execute();\n```\n\nexecute\u65b9\u6cd5\u4e0d\u4f20\u5165callback\u5373\u4e3a\u540c\u6b65\u7684\u8bf7\u6c42\uff0c\u8fd4\u56deResponse\u3002\n\n\n### \u53d6\u6d88\u5355\u4e2a\u8bf7\u6c42\n\n```java\n RequestCall call = OkHttpUtils.get().url(url).build();\n call.cancel();\n \n```\n\n### \u6839\u636etag\u53d6\u6d88\u8bf7\u6c42\n\n\u76ee\u524d\u5bf9\u4e8e\u652f\u6301\u7684\u65b9\u6cd5\u90fd\u6dfb\u52a0\u4e86\u6700\u540e\u4e00\u4e2a\u53c2\u6570`Object tag`\uff0c\u53d6\u6d88\u5219\u901a\u8fc7` OkHttpUtils.cancelTag(tag)`\u6267\u884c\u3002\n\n\u4f8b\u5982\uff1a\u5728Activity\u4e2d\uff0c\u5f53Activity\u9500\u6bc1\u53d6\u6d88\u8bf7\u6c42\uff1a\n\n```\nOkHttpUtils\n    .get()//\n    .url(url)//\n    .tag(this)//\n    .build()//\n\n@Override\nprotected void onDestroy()\n{\n    super.onDestroy();\n    //\u53ef\u4ee5\u53d6\u6d88\u540c\u4e00\u4e2atag\u7684\n    OkHttpUtils.cancelTag(this);//\u53d6\u6d88\u4ee5Activity.this\u4f5c\u4e3atag\u7684\u8bf7\u6c42\n}\n```\n\u6bd4\u5982\uff0c\u5f53\u524dActivity\u9875\u9762\u6240\u6709\u7684\u8bf7\u6c42\u4ee5Activity\u5bf9\u8c61\u4f5c\u4e3atag\uff0c\u53ef\u4ee5\u5728onDestory\u91cc\u9762\u7edf\u4e00\u53d6\u6d88\u3002\n\n## \u6df7\u6dc6\n\n```\n#okhttputils\n-dontwarn com.zhy.http.**\n-keep class com.zhy.http.**{*;}\n\n\n#okhttp\n-dontwarn okhttp3.**\n-keep class okhttp3.**{*;}\n\n\n#okio\n-dontwarn okio.**\n-keep class okio.**{*;}\n\n\n```\n\n\n\n\n\n\n",
        "releases": []
    }
}