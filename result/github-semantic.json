{
    "https://api.github.com/repos/github/semantic": {
        "forks": 451,
        "watchers": 9005,
        "stars": 9005,
        "languages": {
            "Haskell": 2937716,
            "Starlark": 34273,
            "Shell": 17789,
            "Dockerfile": 1856,
            "Ruby": 276,
            "Python": 275
        },
        "commits": [
            "2024-05-13T19:31:47Z",
            "2024-05-13T13:22:21Z",
            "2024-05-13T13:21:24Z",
            "2024-03-25T18:22:44Z",
            "2024-03-25T13:57:23Z",
            "2024-03-25T13:56:18Z",
            "2024-03-25T13:47:13Z",
            "2024-03-25T13:47:01Z",
            "2024-03-25T13:46:45Z",
            "2024-03-25T13:35:34Z",
            "2024-03-25T13:30:36Z",
            "2024-03-25T13:29:19Z",
            "2024-03-25T13:29:09Z",
            "2024-03-25T13:28:20Z",
            "2024-03-25T13:23:21Z",
            "2024-03-20T20:18:53Z",
            "2024-03-20T19:41:56Z",
            "2024-03-20T17:52:54Z",
            "2024-03-20T17:40:14Z",
            "2024-03-20T13:16:28Z",
            "2024-03-19T19:01:07Z",
            "2024-03-19T19:00:15Z",
            "2024-03-19T18:58:02Z",
            "2024-03-19T18:55:18Z",
            "2024-03-19T18:50:45Z",
            "2024-03-19T18:46:43Z",
            "2024-03-19T18:45:20Z",
            "2024-03-19T18:42:10Z",
            "2024-03-19T17:46:16Z",
            "2024-03-19T17:35:58Z"
        ],
        "creation_date": "2019-03-15T14:54:00Z",
        "contributors": 30,
        "topics": [
            "keep"
        ],
        "subscribers": 414,
        "readme": "# Semantic\n\n`semantic` is a Haskell library and command line tool for parsing, analyzing, and comparing source code.\n\nIn a hurry? Check out our documentation of [example uses for the `semantic` command line tool](docs/examples.md).\n\n| Table of Contents |\n| :------------- |\n| [Usage](#usage) |\n| [Language support](#language-support) |\n| [Development](#development) |\n| [Technology and architecture](#technology-and-architecture) |\n| [Licensing](#licensing) |\n\n## Usage\n\nRun `semantic --help` for complete list of up-to-date options.\n\n#### Parse\n```\nUsage: semantic parse [--sexpression | (--json-symbols|--symbols) |\n                        --proto-symbols | --show | --quiet] [FILES...]\n  Generate parse trees for path(s)\n\nAvailable options:\n  --sexpression            Output s-expression parse trees (default)\n  --json-symbols,--symbols Output JSON symbol list\n  --proto-symbols          Output protobufs symbol list\n  --show                   Output using the Show instance (debug only, format\n                           subject to change without notice)\n  --quiet                  Don't produce output, but show timing stats\n  -h,--help                Show this help text\n   ```\n\n## Language support\n\n| Language       | Parse | AST Symbols\u2020 | Stack graphs |\n| :------------- | :---: | :---:        | :---:        |\n| Ruby           | \u2705    | \u2705           | |\n| JavaScript     | \u2705    | \u2705           | |\n| TypeScript     | \u2705    | \u2705           | \ud83d\udea7 |\n| Python         | \u2705    | \u2705           | \ud83d\udea7 |\n| Go             | \u2705    | \u2705           | |\n| PHP            | \u2705    | \u2705           | |\n| Java           | \ud83d\udea7    | \u2705           | |\n| JSON           | \u2705    | \u2b1c\ufe0f           | \u2b1c\ufe0f |\n| JSX            | \u2705    | \u2705           | |\n| TSX            | \u2705    | \u2705           | |\n| CodeQL         | \u2705    | \u2705           | |\n| Haskell        | \ud83d\udea7    | \ud83d\udea7           | |\n\n\u2020 Used for [code navigation](https://help.github.com/en/github/managing-files-in-a-repository/navigating-code-on-github) on github.com.\n* \u2705 \u2014 Supported\n* \ud83d\udd36 \u2014 Partial support\n* \ud83d\udea7 \u2014 Under development\n* \u2b1c - N/A \ufe0f\n\n\n## Development\n\n`semantic` requires at least GHC 8.10.1 and Cabal 3.0. We strongly recommend using [`ghcup`][ghcup] to sandbox GHC versions, as GHC packages installed through your OS's package manager may not install statically-linked versions of the GHC boot libraries. `semantic` currently builds only on Unix systems; users of other operating systems may wish to use the [Docker images](https://github.com/github/semantic/packages/11609).\n\nWe use `cabal's` [Nix-style local builds][nix] for development. To get started quickly:\n\n```bash\ngit clone git@github.com:github/semantic.git\ncd semantic\nscript/bootstrap\ncabal v2-build all\ncabal v2-run semantic:test\ncabal v2-run semantic:semantic -- --help\n```\n\nYou can also use the [Bazel](https://bazel.build) build system for development. To learn more about Bazel and why it might give you a better development experience, check the [build documentation](docs/build.md).\n\n``` bash\ngit clone git@github.com:github/semantic.git\ncd semantic\nscript/bootstrap-bazel\nbazel build //...\n```\n\n\n `stack` as a build tool is not officially supported; there is [unofficial `stack.yaml` support](https://github.com/jkachmar/semantic-stack-yaml) available, though we cannot make guarantees as to its stability.\n\n[nix]: https://cabal.readthedocs.io/en/3.4/nix-local-build-overview.html\n[ghcup]: https://www.haskell.org/ghcup/\n\n## Technology and architecture\n\nArchitecturally, `semantic`:\n1. Generates per-language Haskell syntax types based on [tree-sitter](https://github.com/tree-sitter/tree-sitter) grammar definitions.\n2. Reads blobs from a filesystem or provided via a protocol buffer request.\n3. Returns blobs or performs analysis.\n4. Renders output in one of many supported formats.\n\nThroughout its lifecycle, `semantic` has leveraged a number of interesting algorithms and techniques, including:\n\n- Myers' algorithm (SES) as described in the paper [*An O(ND) Difference Algorithm and Its Variations*][SES]\n- RWS as described in the paper [*RWS-Diff: Flexible and Efficient Change Detection in Hierarchical Data*][RWS].\n- Open unions and [data types \u00e0 la carte](https://www.cambridge.org/core/journals/journal-of-functional-programming/article/data-types-a-la-carte/14416CB20C4637164EA9F77097909409).\n- An implementation of [Abstracting Definitional Interpreters][adi] extended to work with an \u00e0 la carte representation of syntax terms.\n\n[SES]: http://www.xmailserver.org/diff2.pdf\n[RWS]: https://db.in.tum.de/~finis/papers/RWS-Diff.pdf\n[adi]: https://plum-umd.github.io/abstracting-definitional-interpreters/\n[tree-sitter]: https://github.com/tree-sitter/tree-sitter\n\n## Contributions\n\nContributions are welcome!  Please see our [contribution\nguidelines](CONTRIBUTING.md) and our [code of conduct](CODE_OF_CONDUCT.md) for\ndetails on how to participate in our community.\n\n## Licensing\n\nSemantic is licensed under the [MIT license](semantic/LICENSE).\n",
        "releases": [
            {
                "name": "sha_c1486db42dcbcc0a7748fc759017ab8d30d0f2d1",
                "date": "2019-08-26T22:04:44Z"
            },
            {
                "name": "0.7.0.0",
                "date": "2019-08-01T14:03:17Z"
            },
            {
                "name": "sha_72b3aed8f058973f408e6702110231322ca8a94e",
                "date": "2019-08-01T14:03:13Z"
            },
            {
                "name": "sha_b4792db2528153d9d471877d6f35693e76f5dd28",
                "date": "2019-06-25T21:21:32Z"
            },
            {
                "name": "latest",
                "date": "2019-06-25T21:21:35Z"
            },
            {
                "name": "0.6.0",
                "date": "2019-06-10T23:02:56Z"
            },
            {
                "name": "sha_c62a7accf5b3091f7a35bf89dc40e8e38d3d25ea",
                "date": "2019-06-10T23:02:59Z"
            },
            {
                "name": "sha_15f6889158dc3c67712da95830afe960f0dfc867",
                "date": "2019-06-10T23:47:23Z"
            },
            {
                "name": "",
                "date": "2019-06-10T21:08:55Z"
            }
        ]
    }
}