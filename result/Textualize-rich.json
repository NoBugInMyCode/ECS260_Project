{
    "https://api.github.com/repos/Textualize/rich": {
        "forks": 1766,
        "watchers": 50405,
        "stars": 50405,
        "languages": {
            "Python": 1393362,
            "Batchfile": 799,
            "Makefile": 307
        },
        "commits": [
            "2024-11-01T16:42:58Z",
            "2024-11-01T16:40:10Z",
            "2024-11-01T15:31:31Z",
            "2024-11-01T12:16:56Z",
            "2024-11-01T12:14:20Z",
            "2024-11-01T12:03:20Z",
            "2024-10-31T18:45:13Z",
            "2024-10-31T15:48:27Z",
            "2024-10-22T15:34:55Z",
            "2024-10-22T15:29:46Z",
            "2024-10-22T15:23:41Z",
            "2024-10-22T15:13:14Z",
            "2024-10-22T15:10:04Z",
            "2024-10-22T14:45:57Z",
            "2024-10-22T14:43:33Z",
            "2024-10-22T14:37:12Z",
            "2024-10-04T11:49:13Z",
            "2024-10-04T11:46:29Z",
            "2024-10-04T11:43:43Z",
            "2024-10-04T11:41:32Z",
            "2024-10-04T11:38:55Z",
            "2024-10-04T10:55:26Z",
            "2024-10-04T09:40:50Z",
            "2024-10-04T09:40:37Z",
            "2024-10-03T15:34:41Z",
            "2024-10-03T15:05:56Z",
            "2024-10-01T13:35:48Z",
            "2024-10-01T13:31:42Z",
            "2024-10-01T13:26:19Z",
            "2024-10-01T12:10:58Z"
        ],
        "creation_date": "2019-11-10T15:28:09Z",
        "contributors": 30,
        "topics": [
            "ansi-colors",
            "emoji",
            "markdown",
            "progress-bar",
            "progress-bar-python",
            "python",
            "python-library",
            "python3",
            "rich",
            "syntax-highlighting",
            "tables",
            "terminal",
            "terminal-color",
            "traceback",
            "tracebacks-rich",
            "tui"
        ],
        "subscribers": 538,
        "readme": "[![Supported Python Versions](https://img.shields.io/pypi/pyversions/rich/13.2.0)](https://pypi.org/project/rich/) [![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)\n\n[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)\n[![codecov](https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&logo=codecov)](https://codecov.io/gh/Textualize/rich)\n[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)\n\n![Logo](https://github.com/textualize/rich/raw/master/imgs/logo.svg)\n\n[English readme](https://github.com/textualize/rich/blob/master/README.md)\n \u2022 [\u7b80\u4f53\u4e2d\u6587 readme](https://github.com/textualize/rich/blob/master/README.cn.md)\n \u2022 [\u6b63\u9ad4\u4e2d\u6587 readme](https://github.com/textualize/rich/blob/master/README.zh-tw.md)\n \u2022 [Lengua espa\u00f1ola readme](https://github.com/textualize/rich/blob/master/README.es.md)\n \u2022 [Deutsche readme](https://github.com/textualize/rich/blob/master/README.de.md)\n \u2022 [L\u00e4s p\u00e5 svenska](https://github.com/textualize/rich/blob/master/README.sv.md)\n \u2022 [\u65e5\u672c\u8a9e readme](https://github.com/textualize/rich/blob/master/README.ja.md)\n \u2022 [\ud55c\uad6d\uc5b4 readme](https://github.com/textualize/rich/blob/master/README.kr.md)\n \u2022 [Fran\u00e7ais readme](https://github.com/textualize/rich/blob/master/README.fr.md)\n \u2022 [Schwizerd\u00fctsch readme](https://github.com/textualize/rich/blob/master/README.de-ch.md)\n \u2022 [\u0939\u093f\u0928\u094d\u0926\u0940 readme](https://github.com/textualize/rich/blob/master/README.hi.md)\n \u2022 [Portugu\u00eas brasileiro readme](https://github.com/textualize/rich/blob/master/README.pt-br.md)\n \u2022 [Italian readme](https://github.com/textualize/rich/blob/master/README.it.md)\n \u2022 [\u0420\u0443\u0441\u0441\u043a\u0438\u0439 readme](https://github.com/textualize/rich/blob/master/README.ru.md)\n \u2022 [Indonesian readme](https://github.com/textualize/rich/blob/master/README.id.md)\n \u2022 [\u0641\u0627\u0631\u0633\u06cc readme](https://github.com/textualize/rich/blob/master/README.fa.md)\n \u2022 [T\u00fcrk\u00e7e readme](https://github.com/textualize/rich/blob/master/README.tr.md)\n \u2022 [Polskie readme](https://github.com/textualize/rich/blob/master/README.pl.md)\n\n\nRich is a Python library for _rich_ text and beautiful formatting in the terminal.\n\nThe [Rich API](https://rich.readthedocs.io/en/latest/) makes it easy to add color and style to terminal output. Rich can also render pretty tables, progress bars, markdown, syntax highlighted source code, tracebacks, and more \u2014 out of the box.\n\n![Features](https://github.com/textualize/rich/raw/master/imgs/features.png)\n\nFor a video introduction to Rich see [calmcode.io](https://calmcode.io/rich/introduction.html) by [@fishnets88](https://twitter.com/fishnets88).\n\nSee what [people are saying about Rich](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).\n\n## Compatibility\n\nRich works with Linux, macOS and Windows. True color / emoji works with new Windows Terminal, classic terminal is limited to 16 colors. Rich requires Python 3.8 or later.\n\nRich works with [Jupyter notebooks](https://jupyter.org/) with no additional configuration required.\n\n## Installing\n\nInstall with `pip` or your favorite PyPI package manager.\n\n```sh\npython -m pip install rich\n```\n\nRun the following to test Rich output on your terminal:\n\n```sh\npython -m rich\n```\n\n## Rich Print\n\nTo effortlessly add rich output to your application, you can import the [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) method, which has the same signature as the builtin Python function. Try this:\n\n```python\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/print.png)\n\n## Rich REPL\n\nRich can be installed in the Python REPL, so that any data structures will be pretty printed and highlighted.\n\n```python\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n![REPL](https://github.com/textualize/rich/raw/master/imgs/repl.png)\n\n## Using the Console\n\nFor more control over rich terminal content, import and construct a [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console) object.\n\n```python\nfrom rich.console import Console\n\nconsole = Console()\n```\n\nThe Console object has a `print` method which has an intentionally similar interface to the builtin `print` function. Here's an example of use:\n\n```python\nconsole.print(\"Hello\", \"World!\")\n```\n\nAs you might expect, this will print `\"Hello World!\"` to the terminal. Note that unlike the builtin `print` function, Rich will word-wrap your text to fit within the terminal width.\n\nThere are a few ways of adding color and style to your output. You can set a style for the entire output by adding a `style` keyword argument. Here's an example:\n\n```python\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\nThe output will be something like the following:\n\n![Hello World](https://github.com/textualize/rich/raw/master/imgs/hello_world.png)\n\nThat's fine for styling a line of text at a time. For more finely grained styling, Rich renders a special markup which is similar in syntax to [bbcode](https://en.wikipedia.org/wiki/BBCode). Here's an example:\n\n```python\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n![Console Markup](https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png)\n\nYou can use a Console object to generate sophisticated output with minimal effort. See the [Console API](https://rich.readthedocs.io/en/latest/console.html) docs for details.\n\n## Rich Inspect\n\nRich has an [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) function which can produce a report on any Python object, such as class, instance, or builtin.\n\n```python\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/inspect.png)\n\nSee the [inspect docs](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) for details.\n\n# Rich Library\n\nRich contains a number of builtin _renderables_ you can use to create elegant output in your CLI and help you debug your code.\n\nClick the following headings for details:\n\n<details>\n<summary>Log</summary>\n\nThe Console object has a `log()` method which has a similar interface to `print()`, but also renders a column for the current time and the file and line which made the call. By default Rich will do syntax highlighting for Python structures and for repr strings. If you log a collection (i.e. a dict or a list) Rich will pretty print it so that it fits in the available space. Here's an example of some of these features.\n\n```python\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\nThe above produces the following output:\n\n![Log](https://github.com/textualize/rich/raw/master/imgs/log.png)\n\nNote the `log_locals` argument, which outputs a table containing the local variables where the log method was called.\n\nThe log method could be used for logging to the terminal for long running applications such as servers, but is also a very nice debugging aid.\n\n</details>\n<details>\n<summary>Logging Handler</summary>\n\nYou can also use the builtin [Handler class](https://rich.readthedocs.io/en/latest/logging.html) to format and colorize output from Python's logging module. Here's an example of the output:\n\n![Logging](https://github.com/textualize/rich/raw/master/imgs/logging.png)\n\n</details>\n\n<details>\n<summary>Emoji</summary>\n\nTo insert an emoji in to console output place the name between two colons. Here's an example:\n\n```python\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n\ud83d\ude03 \ud83e\udddb \ud83d\udca9 \ud83d\udc4d \ud83e\udd9d\n```\n\nPlease use this feature wisely.\n\n</details>\n\n<details>\n<summary>Tables</summary>\n\nRich can render flexible [tables](https://rich.readthedocs.io/en/latest/tables.html) with unicode box characters. There is a large variety of formatting options for borders, styles, cell alignment etc.\n\n![table movie](https://github.com/textualize/rich/raw/master/imgs/table_movie.gif)\n\nThe animation above was generated with [table_movie.py](https://github.com/textualize/rich/blob/master/examples/table_movie.py) in the examples directory.\n\nHere's a simpler table example:\n\n```python\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\nThis produces the following output:\n\n![table](https://github.com/textualize/rich/raw/master/imgs/table.png)\n\nNote that console markup is rendered in the same way as `print()` and `log()`. In fact, anything that is renderable by Rich may be included in the headers / rows (even other tables).\n\nThe `Table` class is smart enough to resize columns to fit the available width of the terminal, wrapping text as required. Here's the same example, with the terminal made smaller than the table above:\n\n![table2](https://github.com/textualize/rich/raw/master/imgs/table2.png)\n\n</details>\n\n<details>\n<summary>Progress Bars</summary>\n\nRich can render multiple flicker-free [progress](https://rich.readthedocs.io/en/latest/progress.html) bars to track long-running tasks.\n\nFor basic usage, wrap any sequence in the `track` function and iterate over the result. Here's an example:\n\n```python\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\nIt's not much harder to add multiple progress bars. Here's an example taken from the docs:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/progress.gif)\n\nThe columns may be configured to show any details you want. Built-in columns include percentage complete, file size, file speed, and time remaining. Here's another example showing a download in progress:\n\n![progress](https://github.com/textualize/rich/raw/master/imgs/downloader.gif)\n\nTo try this out yourself, see [examples/downloader.py](https://github.com/textualize/rich/blob/master/examples/downloader.py) which can download multiple URLs simultaneously while displaying progress.\n\n</details>\n\n<details>\n<summary>Status</summary>\n\nFor situations where it is hard to calculate progress, you can use the [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) method which will display a 'spinner' animation and message. The animation won't prevent you from using the console as normal. Here's an example:\n\n```python\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\nThis generates the following output in the terminal.\n\n![status](https://github.com/textualize/rich/raw/master/imgs/status.gif)\n\nThe spinner animations were borrowed from [cli-spinners](https://www.npmjs.com/package/cli-spinners). You can select a spinner by specifying the `spinner` parameter. Run the following command to see the available values:\n\n```\npython -m rich.spinner\n```\n\nThe above command generates the following output in the terminal:\n\n![spinners](https://github.com/textualize/rich/raw/master/imgs/spinners.gif)\n\n</details>\n\n<details>\n<summary>Tree</summary>\n\nRich can render a [tree](https://rich.readthedocs.io/en/latest/tree.html) with guide lines. A tree is ideal for displaying a file structure, or any other hierarchical data.\n\nThe labels of the tree can be simple text or anything else Rich can render. Run the following for a demonstration:\n\n```\npython -m rich.tree\n```\n\nThis generates the following output:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/tree.png)\n\nSee the [tree.py](https://github.com/textualize/rich/blob/master/examples/tree.py) example for a script that displays a tree view of any directory, similar to the linux `tree` command.\n\n</details>\n\n<details>\n<summary>Columns</summary>\n\nRich can render content in neat [columns](https://rich.readthedocs.io/en/latest/columns.html) with equal or optimal width. Here's a very basic clone of the (MacOS / Linux) `ls` command which displays a directory listing in columns:\n\n```python\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\nThe following screenshot is the output from the [columns example](https://github.com/textualize/rich/blob/master/examples/columns.py) which displays data pulled from an API in columns:\n\n![columns](https://github.com/textualize/rich/raw/master/imgs/columns.png)\n\n</details>\n\n<details>\n<summary>Markdown</summary>\n\nRich can render [markdown](https://rich.readthedocs.io/en/latest/markdown.html) and does a reasonable job of translating the formatting to the terminal.\n\nTo render markdown import the `Markdown` class and construct it with a string containing markdown code. Then print it to the console. Here's an example:\n\n```python\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\nThis will produce output something like the following:\n\n![markdown](https://github.com/textualize/rich/raw/master/imgs/markdown.png)\n\n</details>\n\n<details>\n<summary>Syntax Highlighting</summary>\n\nRich uses the [pygments](https://pygments.org/) library to implement [syntax highlighting](https://rich.readthedocs.io/en/latest/syntax.html). Usage is similar to rendering markdown; construct a `Syntax` object and print it to the console. Here's an example:\n\n```python\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\nThis will produce the following output:\n\n![syntax](https://github.com/textualize/rich/raw/master/imgs/syntax.png)\n\n</details>\n\n<details>\n<summary>Tracebacks</summary>\n\nRich can render [beautiful tracebacks](https://rich.readthedocs.io/en/latest/traceback.html) which are easier to read and show more code than standard Python tracebacks. You can set Rich as the default traceback handler so all uncaught exceptions will be rendered by Rich.\n\nHere's what it looks like on OSX (similar on Linux):\n\n![traceback](https://github.com/textualize/rich/raw/master/imgs/traceback.png)\n\n</details>\n\nAll Rich renderables make use of the [Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html), which you can also use to implement your own Rich content.\n\n# Rich CLI\n\n\nSee also [Rich CLI](https://github.com/textualize/rich-cli) for a command line application powered by Rich. Syntax highlight code, render markdown, display CSVs in tables, and more, directly from the command prompt.\n\n\n![Rich CLI](https://raw.githubusercontent.com/Textualize/rich-cli/main/imgs/rich-cli-splash.jpg)\n\n# Textual\n\nSee also Rich's sister project, [Textual](https://github.com/Textualize/textual), which you can use to build sophisticated User Interfaces in the terminal.\n\n![Textual screenshot](https://raw.githubusercontent.com/Textualize/textual/main/imgs/textual.png)\n",
        "releases": [
            {
                "name": "The Faster is Faster release",
                "date": "2024-11-02T12:15:28Z"
            },
            {
                "name": "The irregular expression release",
                "date": "2024-10-22T15:38:03Z"
            },
            {
                "name": "The Splitting segments Release",
                "date": "2024-10-04T11:51:48Z"
            },
            {
                "name": "Hotfix for dependency issue",
                "date": "2024-10-01T13:37:12Z"
            },
            {
                "name": "The so long Python 3.7 release",
                "date": "2024-10-01T12:13:50Z"
            },
            {
                "name": "The Python 3.13 release",
                "date": "2024-09-10T12:54:07Z"
            },
            {
                "name": "The Thanks for your patience Release",
                "date": "2024-08-26T16:15:57Z"
            },
            {
                "name": "",
                "date": "2024-02-28T14:52:38Z"
            },
            {
                "name": "The \"It's a wrap\" release",
                "date": "2023-11-15T16:33:44Z"
            },
            {
                "name": "The Python 3.12 release",
                "date": "2023-09-30T14:13:00Z"
            },
            {
                "name": "Markdown fixes",
                "date": "2023-09-17T15:51:58Z"
            },
            {
                "name": "",
                "date": "2023-08-01T15:47:37Z"
            },
            {
                "name": "",
                "date": "2023-07-31T10:07:14Z"
            },
            {
                "name": "Mostly cake, one or two puppies",
                "date": "2023-07-29T16:19:45Z"
            },
            {
                "name": "",
                "date": "2023-06-12T13:57:22Z"
            },
            {
                "name": "Hot fix for typing extension issue",
                "date": "2023-05-31T17:26:35Z"
            },
            {
                "name": "Added tables to Markdown",
                "date": "2023-05-31T15:52:49Z"
            },
            {
                "name": "",
                "date": "2023-04-27T16:00:07Z"
            },
            {
                "name": "Bugfix for is_terminal",
                "date": "2023-04-12T16:50:35Z"
            },
            {
                "name": "Clear meta and links ",
                "date": "2023-03-27T10:53:35Z"
            },
            {
                "name": "Fixes and maintenance",
                "date": "2023-03-04T16:30:20Z"
            },
            {
                "name": "My math was wrong",
                "date": "2023-01-28T10:20:56Z"
            },
            {
                "name": "Dependency update",
                "date": "2023-01-27T17:22:14Z"
            },
            {
                "name": "New Markdown parser",
                "date": "2023-01-19T15:07:26Z"
            },
            {
                "name": "Jupyter tracebacks fix",
                "date": "2023-01-14T11:27:47Z"
            },
            {
                "name": "Fix for splitting segments",
                "date": "2023-01-06T14:23:34Z"
            },
            {
                "name": "Dropped Python3.6 support",
                "date": "2022-12-30T12:55:57Z"
            },
            {
                "name": "The FORCE_COLOR edition",
                "date": "2022-10-02T16:28:13Z"
            },
            {
                "name": "",
                "date": "2022-07-11T14:37:31Z"
            },
            {
                "name": "",
                "date": "2022-07-11T13:55:49Z"
            },
            {
                "name": "",
                "date": "2022-05-24T06:41:38Z"
            },
            {
                "name": "",
                "date": "2022-05-23T16:41:15Z"
            },
            {
                "name": "Fix SVG output on Firefox",
                "date": "2022-05-23T08:58:54Z"
            },
            {
                "name": "SVG Redux Redux",
                "date": "2022-05-08T17:02:48Z"
            },
            {
                "name": "SVG Redux",
                "date": "2022-05-07T14:57:25Z"
            },
            {
                "name": "",
                "date": "2022-04-26T15:18:35Z"
            },
            {
                "name": "",
                "date": "2022-04-05T11:58:55Z"
            },
            {
                "name": "Export SVGs and file progress",
                "date": "2022-04-03T13:51:16Z"
            },
            {
                "name": "Fix for piping on legacy windows plus optimizations",
                "date": "2022-03-22T11:11:53Z"
            },
            {
                "name": "New Legacy Windows renderer",
                "date": "2022-03-10T15:36:02Z"
            },
            {
                "name": "",
                "date": "2022-02-08T20:13:09Z"
            },
            {
                "name": "",
                "date": "2022-01-28T14:51:24Z"
            },
            {
                "name": "Vertical alignment in tables",
                "date": "2022-01-09T10:38:06Z"
            },
            {
                "name": "",
                "date": "2022-01-02T17:07:10Z"
            },
            {
                "name": "",
                "date": "2021-12-15T09:34:17Z"
            },
            {
                "name": "v10.16.0",
                "date": "2021-12-12T11:12:11Z"
            },
            {
                "name": "Hotfix to fix deadlock issue with Live (including status and progress)",
                "date": "2021-12-02T13:56:16Z"
            },
            {
                "name": "",
                "date": "2021-11-29T18:00:41Z"
            },
            {
                "name": "",
                "date": "2021-11-28T16:37:19Z"
            },
            {
                "name": "",
                "date": "2021-11-16T15:15:03Z"
            },
            {
                "name": "",
                "date": "2021-11-07T16:10:36Z"
            },
            {
                "name": "Python3.10 support",
                "date": "2021-10-06T13:09:30Z"
            },
            {
                "name": "",
                "date": "2021-09-24T09:06:32Z"
            },
            {
                "name": "",
                "date": "2021-09-18T09:41:52Z"
            },
            {
                "name": "Enhancements to print_json",
                "date": "2021-08-29T14:57:02Z"
            },
            {
                "name": "Pretty print JSON",
                "date": "2021-08-28T15:27:48Z"
            },
            {
                "name": "",
                "date": "2021-08-05T20:19:04Z"
            },
            {
                "name": "Emoji variants",
                "date": "2021-07-12T18:23:29Z"
            },
            {
                "name": "Mostly repr fixes",
                "date": "2021-07-05T14:43:20Z"
            },
            {
                "name": "Auto Rich Repr",
                "date": "2021-06-18T19:47:17Z"
            },
            {
                "name": "Rich Repr updates",
                "date": "2021-06-09T17:58:18Z"
            },
            {
                "name": "Fix console markup in status text",
                "date": "2021-05-19T16:16:58Z"
            },
            {
                "name": "Fix markdown in layout",
                "date": "2021-05-17T21:32:25Z"
            },
            {
                "name": "Expanded pretty printing",
                "date": "2021-05-12T17:22:13Z"
            },
            {
                "name": "Improved Jupyter support",
                "date": "2021-04-03T09:53:39Z"
            },
            {
                "name": "Fix for race condition in Progress",
                "date": "2021-03-30T17:22:57Z"
            },
            {
                "name": "Update to render protocol",
                "date": "2021-03-27T15:47:07Z"
            },
            {
                "name": "Pretty dataclass support",
                "date": "2021-03-06T15:34:58Z"
            },
            {
                "name": "Fix for custom formatter in RichHandler",
                "date": "2021-03-01T22:37:53Z"
            },
            {
                "name": "Faster tables",
                "date": "2021-02-28T10:43:38Z"
            },
            {
                "name": "",
                "date": "2021-02-27T16:21:28Z"
            },
            {
                "name": "",
                "date": "2021-02-27T13:16:27Z"
            },
            {
                "name": "",
                "date": "2021-02-24T21:59:00Z"
            },
            {
                "name": "Some minor fixes",
                "date": "2021-02-20T12:02:03Z"
            },
            {
                "name": "Now with Rich Layout system",
                "date": "2021-02-15T21:13:14Z"
            },
            {
                "name": "Optimizations and faster tracebacks",
                "date": "2021-01-27T20:58:25Z"
            },
            {
                "name": "Traceback optimizations and fixes",
                "date": "2021-01-23T15:44:14Z"
            },
            {
                "name": "Fixed deadlock in Live - please update if you are using Live / Status",
                "date": "2021-01-15T10:12:26Z"
            },
            {
                "name": "",
                "date": "2021-01-13T17:01:49Z"
            },
            {
                "name": "",
                "date": "2021-01-11T21:44:10Z"
            },
            {
                "name": "A Treemendous release",
                "date": "2021-01-09T16:48:41Z"
            },
            {
                "name": "Console markup escaping fix",
                "date": "2021-01-07T21:57:22Z"
            },
            {
                "name": "",
                "date": "2020-12-31T17:59:13Z"
            },
            {
                "name": "IPython support ",
                "date": "2020-12-30T15:36:10Z"
            },
            {
                "name": "Fix terminal size detection on Windows",
                "date": "2020-12-18T18:27:39Z"
            },
            {
                "name": "",
                "date": "2020-12-18T16:08:33Z"
            },
            {
                "name": "We got a live one",
                "date": "2020-12-12T12:18:17Z"
            },
            {
                "name": "",
                "date": "2020-12-01T17:12:40Z"
            },
            {
                "name": "",
                "date": "2020-11-08T12:31:32Z"
            },
            {
                "name": "",
                "date": "2020-10-23T17:01:02Z"
            },
            {
                "name": "",
                "date": "2020-10-19T15:46:09Z"
            },
            {
                "name": "Paging Dr Rich",
                "date": "2020-10-18T11:21:14Z"
            },
            {
                "name": "Locals in tracebacks",
                "date": "2020-10-03T13:29:05Z"
            },
            {
                "name": "Better traceback formatting",
                "date": "2020-09-26T15:22:58Z"
            },
            {
                "name": "Syntax improvements",
                "date": "2020-09-18T15:46:30Z"
            },
            {
                "name": "Highlight inline code in Markdown",
                "date": "2020-09-14T16:47:26Z"
            },
            {
                "name": "Highlighting for IP addresses",
                "date": "2020-09-11T15:53:57Z"
            },
            {
                "name": "",
                "date": "2020-09-08T14:35:55Z"
            },
            {
                "name": "",
                "date": "2020-09-07T16:16:48Z"
            },
            {
                "name": "A pretty good release",
                "date": "2020-08-25T16:32:04Z"
            },
            {
                "name": "",
                "date": "2020-08-20T09:19:31Z"
            },
            {
                "name": "This release Rules",
                "date": "2020-08-14T16:21:03Z"
            },
            {
                "name": "Pretty formatter optimizations",
                "date": "2020-08-10T15:46:09Z"
            },
            {
                "name": "Rich REPL",
                "date": "2020-08-08T19:48:27Z"
            },
            {
                "name": "Markup format change",
                "date": "2020-08-02T11:23:18Z"
            },
            {
                "name": "",
                "date": "2020-07-29T17:55:59Z"
            },
            {
                "name": "Better 16 color rendering",
                "date": "2020-07-27T16:43:30Z"
            },
            {
                "name": "",
                "date": "2020-07-26T14:32:10Z"
            },
            {
                "name": "A better Text.stylize",
                "date": "2020-07-23T16:04:12Z"
            },
            {
                "name": "",
                "date": "2020-07-22T17:08:20Z"
            },
            {
                "name": "Added rich.prompt",
                "date": "2020-07-22T16:20:39Z"
            },
            {
                "name": "Nicer rendering of locals",
                "date": "2020-07-14T20:18:51Z"
            },
            {
                "name": "",
                "date": "2020-07-13T15:27:41Z"
            },
            {
                "name": "Title on Panel",
                "date": "2020-07-12T15:27:18Z"
            },
            {
                "name": "",
                "date": "2020-07-10T16:48:57Z"
            },
            {
                "name": "",
                "date": "2020-07-09T16:03:24Z"
            },
            {
                "name": "",
                "date": "2020-07-07T17:16:15Z"
            },
            {
                "name": "",
                "date": "2020-07-07T16:09:42Z"
            },
            {
                "name": "",
                "date": "2020-07-03T18:28:27Z"
            },
            {
                "name": "",
                "date": "2020-07-02T18:52:58Z"
            },
            {
                "name": "",
                "date": "2020-06-30T20:54:09Z"
            },
            {
                "name": "Better Tables on legacy Windows terminals",
                "date": "2020-06-28T13:54:09Z"
            },
            {
                "name": "",
                "date": "2020-06-26T16:45:50Z"
            },
            {
                "name": "",
                "date": "2020-06-26T10:42:06Z"
            },
            {
                "name": "",
                "date": "2020-06-24T20:29:02Z"
            },
            {
                "name": "",
                "date": "2020-06-23T10:48:31Z"
            },
            {
                "name": "",
                "date": "2020-06-21T11:34:16Z"
            },
            {
                "name": "",
                "date": "2020-06-15T10:53:33Z"
            },
            {
                "name": "",
                "date": "2020-06-14T15:37:05Z"
            },
            {
                "name": "",
                "date": "2020-06-14T13:53:03Z"
            },
            {
                "name": "Allow builtin print with progress",
                "date": "2020-06-14T13:24:02Z"
            },
            {
                "name": "",
                "date": "2020-06-11T17:36:38Z"
            },
            {
                "name": "",
                "date": "2020-06-10T11:56:28Z"
            },
            {
                "name": "",
                "date": "2020-06-07T09:17:16Z"
            },
            {
                "name": "",
                "date": "2020-06-01T18:20:15Z"
            },
            {
                "name": "",
                "date": "2020-05-31T16:24:54Z"
            },
            {
                "name": "",
                "date": "2020-05-24T19:53:42Z"
            },
            {
                "name": "",
                "date": "2020-05-22T15:59:09Z"
            },
            {
                "name": "Fixed issue with `sum` builtin < Python3.8",
                "date": "2020-05-22T14:23:10Z"
            },
            {
                "name": "",
                "date": "2020-05-22T13:59:31Z"
            },
            {
                "name": "",
                "date": "2020-05-20T17:56:28Z"
            },
            {
                "name": "",
                "date": "2020-05-20T16:25:11Z"
            },
            {
                "name": "",
                "date": "2020-05-19T17:01:43Z"
            },
            {
                "name": "",
                "date": "2020-05-15T13:11:51Z"
            },
            {
                "name": "",
                "date": "2020-05-15T11:47:45Z"
            },
            {
                "name": "",
                "date": "2020-05-14T19:38:42Z"
            },
            {
                "name": "",
                "date": "2020-05-14T19:17:28Z"
            },
            {
                "name": "",
                "date": "2020-05-12T10:19:39Z"
            },
            {
                "name": "Hyperlink support",
                "date": "2020-05-10T13:33:18Z"
            },
            {
                "name": "",
                "date": "2020-05-08T14:15:17Z"
            },
            {
                "name": "",
                "date": "2020-05-08T13:04:13Z"
            },
            {
                "name": "",
                "date": "2020-05-08T12:50:50Z"
            },
            {
                "name": "First 1.0 release!",
                "date": "2020-05-03T10:28:26Z"
            },
            {
                "name": "",
                "date": "2020-04-21T08:32:43Z"
            },
            {
                "name": "",
                "date": "2020-04-14T14:39:47Z"
            },
            {
                "name": "",
                "date": "2020-04-12T14:34:48Z"
            },
            {
                "name": "",
                "date": "2020-04-12T11:54:48Z"
            },
            {
                "name": "",
                "date": "2020-03-31T15:52:02Z"
            },
            {
                "name": "",
                "date": "2020-03-31T13:28:57Z"
            },
            {
                "name": "Experimental Jupyter support",
                "date": "2020-03-29T16:31:50Z"
            },
            {
                "name": "",
                "date": "2020-03-29T13:01:20Z"
            },
            {
                "name": "Fixes",
                "date": "2020-03-27T10:30:52Z"
            },
            {
                "name": "",
                "date": "2020-03-17T17:16:20Z"
            },
            {
                "name": "",
                "date": "2020-03-15T17:14:05Z"
            },
            {
                "name": "",
                "date": "2020-03-13T16:54:00Z"
            },
            {
                "name": "",
                "date": "2020-03-03T16:20:09Z"
            },
            {
                "name": "Fixed Windows support",
                "date": "2020-02-04T18:29:03Z"
            },
            {
                "name": "Added logging support",
                "date": "2020-01-26T16:10:38Z"
            }
        ]
    }
}