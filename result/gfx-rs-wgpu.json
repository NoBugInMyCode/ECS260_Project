{
    "https://api.github.com/repos/gfx-rs/wgpu": {
        "forks": 969,
        "watchers": 13215,
        "stars": 13215,
        "languages": {
            "Rust": 8496592,
            "WGSL": 1918247,
            "JavaScript": 208272,
            "GLSL": 167796,
            "HLSL": 163258,
            "Nix": 2258,
            "HTML": 431,
            "Shell": 8
        },
        "commits": [
            "2025-01-22T02:41:38Z",
            "2025-01-21T19:50:59Z",
            "2025-01-21T19:34:12Z",
            "2025-01-21T19:28:14Z",
            "2025-01-21T19:24:03Z",
            "2025-01-21T16:33:07Z",
            "2025-01-21T00:12:07Z",
            "2025-01-05T07:40:44Z",
            "2025-01-04T22:07:43Z",
            "2025-01-04T21:52:03Z",
            "2025-01-20T18:28:32Z",
            "2025-01-20T18:09:36Z",
            "2025-01-20T18:00:34Z",
            "2025-01-20T17:59:11Z",
            "2025-01-20T17:11:27Z",
            "2025-01-20T15:39:16Z",
            "2025-01-20T15:29:12Z",
            "2025-01-20T15:20:43Z",
            "2025-01-20T04:07:17Z",
            "2025-01-19T08:16:07Z",
            "2025-01-18T20:05:57Z",
            "2025-01-18T20:02:42Z",
            "2025-01-17T16:36:22Z",
            "2025-01-17T16:18:17Z",
            "2025-01-17T15:39:47Z",
            "2025-01-17T00:04:33Z",
            "2025-01-16T16:13:04Z",
            "2025-01-16T14:50:15Z",
            "2025-01-16T13:53:36Z",
            "2025-01-15T21:29:22Z"
        ],
        "creation_date": "2018-09-13T19:18:50Z",
        "contributors": 30,
        "topics": [
            "d3d12",
            "gpu",
            "hacktoberfest",
            "metal",
            "opengl",
            "rust",
            "vulkan",
            "webgpu"
        ],
        "subscribers": 114,
        "readme": "<img align=\"right\" width=\"25%\" src=\"logo.png\">\n\n# wgpu\n\n[![Matrix Space](https://img.shields.io/static/v1?label=Space&message=%23Wgpu&color=blue&logo=matrix)](https://matrix.to/#/#Wgpu:matrix.org)\n[![Dev Matrix  ](https://img.shields.io/static/v1?label=devs&message=%23wgpu&color=blueviolet&logo=matrix)](https://matrix.to/#/#wgpu:matrix.org)\n[![User Matrix ](https://img.shields.io/static/v1?label=users&message=%23wgpu-users&color=blueviolet&logo=matrix)](https://matrix.to/#/#wgpu-users:matrix.org)\n[![Build Status](https://github.com/gfx-rs/wgpu/workflows/CI/badge.svg)](https://github.com/gfx-rs/wgpu/actions)\n[![codecov.io](https://codecov.io/gh/gfx-rs/wgpu/branch/trunk/graph/badge.svg?token=84qJTesmeS)](https://codecov.io/gh/gfx-rs/wgpu)\n\n`wgpu` is a cross-platform, safe, pure-rust graphics API. It runs natively on Vulkan, Metal, D3D12, and OpenGL; and on top of WebGL2 and WebGPU on wasm.\n\nThe API is based on the [WebGPU standard](https://gpuweb.github.io/gpuweb/). It serves as the core of the WebGPU integration in Firefox, Servo, and Deno.\n\n## Quick Links\n\n| Docs                                 | Examples                                                             | Changelog                                                                    |\n|:------------------------------------:|:--------------------------------------------------------------------:|:----------------------------------------------------------------------------:|\n| [v24](https://docs.rs/wgpu/)         | [v24](https://github.com/gfx-rs/wgpu/tree/v24/examples#readme)       | [v24](https://github.com/gfx-rs/wgpu/releases)                               |\n| [`trunk`](https://wgpu.rs/doc/wgpu/) | [`trunk`](https://github.com/gfx-rs/wgpu/tree/trunk/examples#readme) | [`trunk`](https://github.com/gfx-rs/wgpu/blob/trunk/CHANGELOG.md#unreleased) |\n\n## Repo Overview\n\nThe repository hosts the following libraries:\n\n- [![Crates.io](https://img.shields.io/crates/v/wgpu.svg?label=wgpu)](https://crates.io/crates/wgpu) [![docs.rs](https://docs.rs/wgpu/badge.svg)](https://docs.rs/wgpu/) - User facing Rust API.\n- [![Crates.io](https://img.shields.io/crates/v/wgpu-core.svg?label=wgpu-core)](https://crates.io/crates/wgpu-core) [![docs.rs](https://docs.rs/wgpu-core/badge.svg)](https://docs.rs/wgpu-core/) - Internal safe implementation.\n- [![Crates.io](https://img.shields.io/crates/v/wgpu-hal.svg?label=wgpu-hal)](https://crates.io/crates/wgpu-hal) [![docs.rs](https://docs.rs/wgpu-hal/badge.svg)](https://docs.rs/wgpu-hal/) - Internal unsafe GPU API abstraction layer.\n- [![Crates.io](https://img.shields.io/crates/v/wgpu-types.svg?label=wgpu-types)](https://crates.io/crates/wgpu-types) [![docs.rs](https://docs.rs/wgpu-types/badge.svg)](https://docs.rs/wgpu-types/) - Rust types shared between all crates.\n- [![Crates.io](https://img.shields.io/crates/v/naga.svg?label=naga)](https://crates.io/crates/naga) [![docs.rs](https://docs.rs/naga/badge.svg)](https://docs.rs/naga/) - Stand-alone shader translation library.\n- [![Crates.io](https://img.shields.io/crates/v/deno_webgpu.svg?label=deno_webgpu)](https://crates.io/crates/deno_webgpu) - WebGPU implementation for the Deno JavaScript/TypeScript runtime\n\nThe following binaries:\n\n- [![Crates.io](https://img.shields.io/crates/v/naga-cli.svg?label=naga-cli)](https://crates.io/crates/naga-cli) - Tool for translating shaders between different languages using `naga`.\n- [![Crates.io](https://img.shields.io/crates/v/wgpu-info.svg?label=wgpu-info)](https://crates.io/crates/wgpu-info) - Tool for getting information on GPUs in the system.\n- `cts_runner` - WebGPU Conformance Test Suite runner using `deno_webgpu`.\n- `player` - standalone application for replaying the API traces.\n\nFor an overview of all the components in the gfx-rs ecosystem, see [the big picture](./etc/big-picture.png).\n\n## Getting Started\n\n### Play with our Examples\n\nGo to [https://wgpu.rs/examples/] to play with our examples in your browser. Requires a browser supporting WebGPU for the WebGPU examples.\n\n### Rust\n\nRust examples can be found at [wgpu/examples](examples). You can run the examples on native with `cargo run --bin wgpu-examples <example>`. See the [list of examples](examples).\n\nIf you are new to wgpu and graphics programming, we recommend starting with https://sotrh.github.io/learn-wgpu/.\n\nTo run the examples in a browser, run `cargo xtask run-wasm`.\nThen open `http://localhost:8000` in your browser, and you can choose an example to run.\nNaturally, in order to display any of the WebGPU based examples, you need to make sure your browser supports it.\n\n### C/C++\n\nTo use wgpu in C/C++, you need [wgpu-native](https://github.com/gfx-rs/wgpu-native).\n\nIf you are looking for a wgpu C++ tutorial, look at the following:\n\n- https://eliemichel.github.io/LearnWebGPU/\n\n### Others\n\nIf you want to use wgpu in other languages, there are many bindings to wgpu-native from languages such as Python, D, Julia, Kotlin, and more. See [the list](https://github.com/gfx-rs/wgpu-native#bindings).\n\n## Community\n\nWe have the Matrix space [![Matrix Space](https://img.shields.io/static/v1?label=Space&message=%23Wgpu&color=blue&logo=matrix)](https://matrix.to/#/#Wgpu:matrix.org) with a few different rooms that form the wgpu community:\n\n- [![Wgpu Matrix](https://img.shields.io/static/v1?label=wgpu-devs&message=%23wgpu&color=blueviolet&logo=matrix)](https://matrix.to/#/#wgpu:matrix.org) - discussion of the wgpu's development.\n- [![Naga Matrix](https://img.shields.io/static/v1?label=naga-devs&message=%23naga&color=blueviolet&logo=matrix)](https://matrix.to/#/#naga:matrix.org) - discussion of the naga's development.\n- [![User Matrix](https://img.shields.io/static/v1?label=wgpu-users&message=%23wgpu-users&color=blueviolet&logo=matrix)](https://matrix.to/#/#wgpu-users:matrix.org) - discussion of using the library and the surrounding ecosystem.\n- [![Random Matrix](https://img.shields.io/static/v1?label=random&message=%23wgpu-random&color=blueviolet&logo=matrix)](https://matrix.to/#/#wgpu-random:matrix.org) - discussion of everything else.\n\n## Wiki\n\nWe have a [wiki](https://github.com/gfx-rs/wgpu/wiki) that serves as a knowledge base.\n\n## Extension Specifications\n\nWhile the core of wgpu is based on the WebGPU standard, we also support extensions that allow for features that the standard does not have yet.\nFor high-level documentation on how to use these extensions, see the individual specifications:\n\n\ud83e\uddeaEXPERIMENTAL\ud83e\uddea APIs are subject to change and may allow undefined behavior if used incorrectly.\n\n- \ud83e\uddeaEXPERIMENTAL\ud83e\uddea [Ray Tracing](./etc/specs/ray_tracing.md).\n\n## Supported Platforms\n\n| API    | Windows            | Linux/Android      | macOS/iOS          | Web (wasm)         |\n| ------ | ------------------ | ------------------ | ------------------ | ------------------ |\n| Vulkan |         \u2705         |         \u2705         |         \ud83c\udf0b         |                    |\n| Metal  |                    |                    |         \u2705         |                    |\n| DX12   |         \u2705         |                    |                    |                    |\n| OpenGL |    \ud83c\udd97 (GL 3.3+)    |  \ud83c\udd97 (GL ES 3.0+)   |         \ud83d\udcd0         |    \ud83c\udd97 (WebGL2)     |\n| WebGPU |                    |                    |                    |         \u2705         |\n\n\u2705 = First Class Support  \n\ud83c\udd97 = Downlevel/Best Effort Support  \n\ud83d\udcd0 = Requires the [ANGLE](#angle) translation layer (GL ES 3.0 only)  \n\ud83c\udf0b = Requires the [MoltenVK](https://vulkan.lunarg.com/sdk/home#mac) translation layer  \n\ud83d\udee0\ufe0f = Unsupported, though open to contributions\n\n### Shader Support\n\nwgpu supports shaders in [WGSL](https://gpuweb.github.io/gpuweb/wgsl/), SPIR-V, and GLSL.\nBoth [HLSL](https://github.com/Microsoft/DirectXShaderCompiler) and [GLSL](https://github.com/KhronosGroup/glslang)\nhave compilers to target SPIR-V. All of these shader languages can be used with any backend as we handle all of the conversions. Additionally, support for these shader inputs is not going away.\n\nWhile WebGPU does not support any shading language other than WGSL, we will automatically convert your\nnon-WGSL shaders if you're running on WebGPU.\n\nWGSL is always supported by default, but GLSL and SPIR-V need features enabled to compile in support.\n\nNote that the WGSL specification is still under development,\nso the [draft specification][wgsl spec] does not exactly describe what `wgpu` supports.\nSee [below](#tracking-the-webgpu-and-wgsl-draft-specifications) for details.\n\nTo enable SPIR-V shaders, enable the `spirv` feature of wgpu.\nTo enable GLSL shaders, enable the `glsl` feature of wgpu.\n\n### Angle\n\n[Angle](http://angleproject.org) is a translation layer from GLES to other backends developed by Google.\nWe support running our GLES3 backend over it in order to reach platforms DX11 support, which aren't accessible otherwise.\nIn order to run with Angle, the \"angle\" feature has to be enabled, and Angle libraries placed in a location visible to the application.\nThese binaries can be downloaded from [gfbuild-angle](https://github.com/DileSoft/gfbuild-angle) artifacts, [manual compilation](https://github.com/google/angle/blob/main/doc/DevSetup.md) may be required on Macs with Apple silicon.\n\nOn Windows, you generally need to copy them into the working directory, in the same directory as the executable, or somewhere in your path.\nOn Linux, you can point to them using `LD_LIBRARY_PATH` environment.\n\n### MSRV policy\n\nDue to complex dependants, we have two MSRV policies:\n\n- `naga`, `wgpu-core`, `wgpu-hal`, and `wgpu-types`'s MSRV is **1.76**, but may be lower than the rest of the workspace in the future.\n- The rest of the workspace has an MSRV of **1.83** as well right now, but may be higher than above listed crates.\n\nIt is enforced on CI (in \"/.github/workflows/ci.yml\") with the `CORE_MSRV` and `REPO_MSRV` variables.\nThis version can only be upgraded in breaking releases, though we release a breaking version every three months.\n\nThe `naga`, `wgpu-core`, `wgpu-hal`, and `wgpu-types` crates should never\nrequire an MSRV ahead of Firefox's MSRV for nightly builds, as\ndetermined by the value of `MINIMUM_RUST_VERSION` in\n[`python/mozboot/mozboot/util.py`][util].\n\n[util]: https://searchfox.org/mozilla-central/source/python/mozboot/mozboot/util.py\n\n## Environment Variables\n\nAll testing and example infrastructure share the same set of environment variables that determine which Backend/GPU it will run on.\n\n- `WGPU_ADAPTER_NAME` with a substring of the name of the adapter you want to use (ex. `1080` will match `NVIDIA GeForce 1080ti`).\n- `WGPU_BACKEND` with a comma-separated list of the backends you want to use (`vulkan`, `metal`, `dx12`, or `gl`).\n- `WGPU_POWER_PREF` with the power preference to choose when a specific adapter name isn't specified (`high`, `low` or `none`)\n- `WGPU_DX12_COMPILER` with the DX12 shader compiler you wish to use (`dxc`, `static-dxc`, or `fxc`). Note that `dxc` requires `dxil.dll` and `dxcompiler.dll` to be in the working directory, and `static-dxc` requires the `static-dxc` crate feature to be enabled. Otherwise, it will fall back to `fxc`.\n- `WGPU_GLES_MINOR_VERSION` with the minor OpenGL ES 3 version number to request (`0`, `1`, `2` or `automatic`).\n- `WGPU_ALLOW_UNDERLYING_NONCOMPLIANT_ADAPTER` with a boolean whether non-compliant drivers are enumerated (`0` for false, `1` for true).\n\nWhen running the CTS, use the variables `DENO_WEBGPU_ADAPTER_NAME`, `DENO_WEBGPU_BACKEND`, `DENO_WEBGPU_POWER_PREFERENCE`.\n\n## Testing\n\nWe have multiple methods of testing, each of which tests different qualities about wgpu. We automatically run our tests on CI. The current state of CI testing:\n\n| Platform/Backend | Tests              | Notes                 |\n| ---------------- | ------------------ | --------------------- |\n| Windows/DX12     | :heavy_check_mark: | using WARP            |\n| Windows/OpenGL   | :heavy_check_mark: | using llvmpipe        |\n| MacOS/Metal      | :heavy_check_mark: | using hardware runner |\n| Linux/Vulkan     | :heavy_check_mark: | using lavapipe        |\n| Linux/OpenGL ES  | :heavy_check_mark: | using llvmpipe        |\n| Chrome/WebGL     | :heavy_check_mark: | using swiftshader     |\n| Chrome/WebGPU    | :x:                | not set up            |\n\n### Core Test Infrastructure\n\nWe use a tool called [`cargo nextest`](https://github.com/nextest-rs/nextest) to run our tests.\nTo install it, run `cargo install cargo-nextest`.\n\nTo run the test suite:\n\n```\ncargo xtask test\n```\n\nTo run the test suite on WebGL (currently incomplete):\n\n```\ncd wgpu\nwasm-pack test --headless --chrome --no-default-features --features webgl --workspace\n```\n\nThis will automatically run the tests using a packaged browser. Remove `--headless` to run the tests with whatever browser you wish at `http://localhost:8000`.\n\nIf you are a user and want a way to help contribute to wgpu, we always need more help writing test cases.\n\n### WebGPU Conformance Test Suite\n\nWebGPU includes a Conformance Test Suite to validate that implementations are working correctly. We can run this CTS against wgpu.\n\nTo run the CTS, first, you need to check it out:\n\n```\ngit clone https://github.com/gpuweb/cts.git\ncd cts\n# works in bash and powershell\ngit checkout $(cat ../cts_runner/revision.txt)\n```\n\nTo run a given set of tests:\n\n```\n# Must be inside the `cts` folder we just checked out, else this will fail\ncargo run --manifest-path ../Cargo.toml -p cts_runner --bin cts_runner -- ./tools/run_deno --verbose \"<test string>\"\n```\n\nTo find the full list of tests, go to the [online cts viewer](https://gpuweb.github.io/cts/standalone/?runnow=0&worker=0&debug=0&q=webgpu:*).\n\nThe list of currently enabled CTS tests can be found [here](./cts_runner/test.lst).\n\n## Tracking the WebGPU and WGSL draft specifications\n\nThe `wgpu` crate is meant to be an idiomatic Rust translation of the [WebGPU API][webgpu spec].\nThat specification, along with its shading language, [WGSL][wgsl spec],\nare both still in the \"Working Draft\" phase,\nand while the general outlines are stable,\ndetails change frequently.\nUntil the specification is stabilized, the `wgpu` crate and the version of WGSL it implements\nwill likely differ from what is specified,\nas the implementation catches up.\n\nExactly which WGSL features `wgpu` supports depends on how you are using it:\n\n- When running as native code, `wgpu` uses the [Naga][naga] crate\n  to translate WGSL code into the shading language of your platform's native GPU API.\n  Naga has [a milestone][naga wgsl milestone]\n  for catching up to the WGSL specification,\n  but in general, there is no up-to-date summary\n  of the differences between Naga and the WGSL spec.\n\n- When running in a web browser (by compilation to WebAssembly)\n  without the `\"webgl\"` feature enabled,\n  `wgpu` relies on the browser's own WebGPU implementation.\n  WGSL shaders are simply passed through to the browser,\n  so that determines which WGSL features you can use.\n\n- When running in a web browser with `wgpu`'s `\"webgl\"` feature enabled,\n  `wgpu` uses Naga to translate WGSL programs into GLSL.\n  This uses the same version of Naga as if you were running `wgpu` as native code.\n\n[webgpu spec]: https://www.w3.org/TR/webgpu/\n[wgsl spec]: https://gpuweb.github.io/gpuweb/wgsl/\n[naga]: https://github.com/gfx-rs/naga/\n[naga wgsl milestone]: https://github.com/gfx-rs/naga/milestone/4\n\n## Coordinate Systems\n\nwgpu uses the coordinate systems of D3D and Metal:\n\n| Render                                              | Texture                                               |\n| --------------------------------------------------- | ----------------------------------------------------- |\n| ![render_coordinates](./etc/render_coordinates.png) | ![texture_coordinates](./etc/texture_coordinates.png) |\n",
        "releases": [
            {
                "name": "v24.0.0",
                "date": "2025-01-15T21:41:36Z"
            },
            {
                "name": "v23.1.0 (2024-12-16)",
                "date": "2024-12-16T20:19:59Z"
            },
            {
                "name": "23.0.1 (2024-11-25)",
                "date": "2024-11-25T08:00:20Z"
            },
            {
                "name": "v23.0.0 (2024-10-25)",
                "date": "2024-10-30T14:36:55Z"
            },
            {
                "name": "v22.1.0",
                "date": "2024-07-31T21:50:18Z"
            },
            {
                "name": "v22.0.0 (Our first major version release!)",
                "date": "2024-07-18T18:22:43Z"
            },
            {
                "name": "v0.20.2",
                "date": "2024-06-27T05:06:28Z"
            },
            {
                "name": "v0.20.1",
                "date": "2024-06-13T04:06:55Z"
            },
            {
                "name": "v0.20.0",
                "date": "2024-04-28T22:15:13Z"
            },
            {
                "name": "v0.19.4",
                "date": "2024-04-18T00:12:13Z"
            },
            {
                "name": "v0.19.3",
                "date": "2024-03-01T22:19:08Z"
            },
            {
                "name": "v0.19.2",
                "date": "2024-02-29T22:33:10Z"
            },
            {
                "name": "v0.19.1",
                "date": "2024-01-22T00:27:40Z"
            },
            {
                "name": "v0.19.0",
                "date": "2024-01-17T20:30:02Z"
            },
            {
                "name": "v0.18.2",
                "date": "2023-12-06T19:34:33Z"
            },
            {
                "name": "v0.18.1",
                "date": "2023-11-15T21:29:38Z"
            },
            {
                "name": "v0.18.0",
                "date": "2023-10-25T18:15:20Z"
            },
            {
                "name": "v0.17.2",
                "date": "2023-10-03T23:34:36Z"
            },
            {
                "name": "v0.17.1",
                "date": "2023-09-27T18:18:05Z"
            },
            {
                "name": "v0.17.0",
                "date": "2023-07-21T03:18:20Z"
            },
            {
                "name": "v0.16.3",
                "date": "2023-07-19T20:33:41Z"
            },
            {
                "name": "v0.16.2",
                "date": "2023-07-09T04:57:17Z"
            },
            {
                "name": "v0.16.1",
                "date": "2023-05-25T02:06:59Z"
            },
            {
                "name": "v0.16.0",
                "date": "2023-04-20T01:01:19Z"
            },
            {
                "name": "v0.15.3",
                "date": "2023-03-22T21:33:00Z"
            },
            {
                "name": "v0.15.2",
                "date": "2023-03-10T03:33:44Z"
            },
            {
                "name": "v0.15.1",
                "date": "2023-02-09T21:06:12Z"
            },
            {
                "name": "v0.15.0",
                "date": "2023-01-26T00:47:09Z"
            },
            {
                "name": "v0.14.2",
                "date": "2022-11-30T23:03:12Z"
            },
            {
                "name": "v0.14.1",
                "date": "2022-11-02T21:43:53Z"
            },
            {
                "name": "v0.14.0",
                "date": "2022-10-05T23:12:13Z"
            },
            {
                "name": "v0.13.2",
                "date": "2022-07-14T02:30:45Z"
            },
            {
                "name": "v0.13.1",
                "date": "2022-07-03T06:05:58Z"
            },
            {
                "name": "v0.13.0",
                "date": "2022-07-01T16:51:26Z"
            }
        ]
    }
}