{
    "https://api.github.com/repos/junegunn/fzf": {
        "forks": 2437,
        "watchers": 67320,
        "stars": 67320,
        "languages": {
            "Go": 620570,
            "Ruby": 146233,
            "Shell": 71944,
            "Vim Script": 32572,
            "Makefile": 5349,
            "PowerShell": 1882,
            "Dockerfile": 505
        },
        "commits": [
            "2025-01-19T17:00:03Z",
            "2025-01-19T15:49:08Z",
            "2025-01-19T16:01:59Z",
            "2025-01-19T15:32:50Z",
            "2025-01-19T01:58:57Z",
            "2025-01-19T00:02:12Z",
            "2025-01-18T16:38:18Z",
            "2025-01-18T04:47:25Z",
            "2025-01-17T17:33:28Z",
            "2025-01-17T14:17:58Z",
            "2025-01-17T05:31:07Z",
            "2025-01-17T03:51:51Z",
            "2025-01-16T01:05:26Z",
            "2025-01-16T00:23:25Z",
            "2025-01-15T16:52:42Z",
            "2025-01-15T16:38:45Z",
            "2025-01-15T14:40:42Z",
            "2025-01-15T13:39:48Z",
            "2025-01-15T13:23:52Z",
            "2025-01-13T08:37:50Z",
            "2025-01-13T03:45:01Z",
            "2025-01-12T15:13:31Z",
            "2025-01-12T05:58:55Z",
            "2025-01-12T01:29:15Z",
            "2025-01-12T01:27:26Z",
            "2025-01-12T01:23:43Z",
            "2025-01-12T00:02:26Z",
            "2025-01-11T10:34:13Z",
            "2025-01-11T02:39:15Z",
            "2025-01-10T15:53:07Z"
        ],
        "creation_date": "2013-10-23T16:04:23Z",
        "contributors": 30,
        "topics": [
            "bash",
            "cli",
            "fish",
            "fzf",
            "go",
            "neovim",
            "tmux",
            "unix",
            "vim",
            "zsh"
        ],
        "subscribers": 395,
        "readme": "<div align=\"center\">\n<sup>Special thanks to:</sup>\n<br>\n<br>\n<a href=\"https://warp.dev/?utm_source=github&utm_medium=referral&utm_campaign=fzf_20240209\">\n  <div>\n    <img src=\"https://raw.githubusercontent.com/junegunn/i/master/warp.png\" width=\"300\" alt=\"Warp\">\n  </div>\n  <b>Warp is a modern, Rust-based terminal with AI built in so you and your team can build great software, faster.</b>\n  <div>\n    <sup>Visit warp.dev to learn more.</sup>\n  </div>\n</a>\n<br>\n<hr>\n</div>\n<br>\n\n<img src=\"https://raw.githubusercontent.com/junegunn/i/master/fzf.png\" height=\"170\" alt=\"fzf - a command-line fuzzy finder\"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)\n===\n\nfzf is a general-purpose command-line fuzzy finder.\n\n<img src=\"https://raw.githubusercontent.com/junegunn/i/master/fzf-preview.png\" width=640>\n\nIt's an interactive filter program for any kind of list; files, command\nhistory, processes, hostnames, bookmarks, git commits, etc. It implements\na \"fuzzy\" matching algorithm, so you can quickly type in patterns with omitted\ncharacters and still get the results you want.\n\nHighlights\n----------\n\n- \ud83d\udce6 **Portable** \u2014 Distributed as a single binary for easy installation\n- \u26a1 **Blazingly fast** \u2014 Highly optimized code instantly processes millions of items\n- \ud83d\udee0\ufe0f **Extremely versatile** \u2014 Fully customizable via an event-action binding mechanism\n- \ud83d\udd0b **Batteries included** \u2014 Includes integration with bash, zsh, fish, Vim, and Neovim\n\nSponsors \u2764\ufe0f\n-----------\n\nI would like to thank all the sponsors of this project who make it possible for me to continue to improve fzf.\n\nIf you'd like to sponsor this project, please visit https://github.com/sponsors/junegunn.\n\n<!-- sponsors --><a href=\"https://github.com/miyanokomiya\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;miyanokomiya.png\" width=\"60px\" alt=\"User avatar: miyanokomiya\" /></a><a href=\"https://github.com/jonhoo\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;jonhoo.png\" width=\"60px\" alt=\"User avatar: Jon Gjengset\" /></a><a href=\"https://github.com/AceofSpades5757\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;AceofSpades5757.png\" width=\"60px\" alt=\"User avatar: Kyle L. Davis\" /></a><a href=\"https://github.com/Frederick888\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;Frederick888.png\" width=\"60px\" alt=\"User avatar: Frederick Zhang\" /></a><a href=\"https://github.com/moritzdietz\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;moritzdietz.png\" width=\"60px\" alt=\"User avatar: Moritz Dietz\" /></a><a href=\"https://github.com/mikker\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;mikker.png\" width=\"60px\" alt=\"User avatar: Mikkel Malmberg\" /></a><a href=\"https://github.com/pldubouilh\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;pldubouilh.png\" width=\"60px\" alt=\"User avatar: Pierre Dubouilh\" /></a><a href=\"https://github.com/trantor\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;trantor.png\" width=\"60px\" alt=\"User avatar: Fulvio Scapin\" /></a><a href=\"https://github.com/rcorre\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;rcorre.png\" width=\"60px\" alt=\"User avatar: Ryan Roden-Corrent\" /></a><a href=\"https://github.com/blissdev\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;blissdev.png\" width=\"60px\" alt=\"User avatar: Jordan Arentsen\" /></a><a href=\"https://github.com/aexvir\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;aexvir.png\" width=\"60px\" alt=\"User avatar: Alex Viscreanu\" /></a><a href=\"https://github.com/dbalatero\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;dbalatero.png\" width=\"60px\" alt=\"User avatar: David Balatero\" /></a><a href=\"https://github.com/moobar\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;moobar.png\" width=\"60px\" alt=\"User avatar: \" /></a><a href=\"https://github.com/benelan\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;benelan.png\" width=\"60px\" alt=\"User avatar: Ben Elan\" /></a><a href=\"https://github.com/pawelduda\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;pawelduda.png\" width=\"60px\" alt=\"User avatar: Pawe\u0142 Duda\" /></a><a href=\"https://github.com/pbwn\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;pbwn.png\" width=\"60px\" alt=\"User avatar: \" /></a><a href=\"https://github.com/pyrho\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;pyrho.png\" width=\"60px\" alt=\"User avatar: Damien Rajon\" /></a><a href=\"https://github.com/ArtBIT\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;ArtBIT.png\" width=\"60px\" alt=\"User avatar: ArtBIT\" /></a><a href=\"https://github.com/da-moon\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;da-moon.png\" width=\"60px\" alt=\"User avatar: \" /></a><a href=\"https://github.com/hovissimo\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;hovissimo.png\" width=\"60px\" alt=\"User avatar: Hovis\" /></a><a href=\"https://github.com/dariusjonda\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;dariusjonda.png\" width=\"60px\" alt=\"User avatar: Darius Jonda\" /></a><a href=\"https://github.com/cristiand391\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;cristiand391.png\" width=\"60px\" alt=\"User avatar: Cristian Dominguez\" /></a><a href=\"https://github.com/eliangcs\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;eliangcs.png\" width=\"60px\" alt=\"User avatar: Chang-Hung Liang\" /></a><a href=\"https://github.com/asphaltbuffet\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;asphaltbuffet.png\" width=\"60px\" alt=\"User avatar: Ben Lechlitner\" /></a><a href=\"https://github.com/looshch\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;looshch.png\" width=\"60px\" alt=\"User avatar: george looshch\" /></a><a href=\"https://github.com/kg8m\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;kg8m.png\" width=\"60px\" alt=\"User avatar: Takumi KAGIYAMA\" /></a><a href=\"https://github.com/polm\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;polm.png\" width=\"60px\" alt=\"User avatar: Paul OLeary McCann\" /></a><a href=\"https://github.com/rbeeger\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;rbeeger.png\" width=\"60px\" alt=\"User avatar: Robert Beeger\" /></a><a href=\"https://github.com/yowayb\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;yowayb.png\" width=\"60px\" alt=\"User avatar: Yoway Buorn\" /></a><a href=\"https://github.com/scalisi\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;scalisi.png\" width=\"60px\" alt=\"User avatar: Josh Scalisi\" /></a><a href=\"https://github.com/alecbcs\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;alecbcs.png\" width=\"60px\" alt=\"User avatar: Alec Scott\" /></a><a href=\"https://github.com/thnxdev\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;thnxdev.png\" width=\"60px\" alt=\"User avatar: thanks.dev\" /></a><a href=\"https://github.com/artursapek\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;artursapek.png\" width=\"60px\" alt=\"User avatar: Artur Sapek\" /></a><a href=\"https://github.com/ramnes\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;ramnes.png\" width=\"60px\" alt=\"User avatar: Guillaume Gelin\" /></a><a href=\"https://github.com/jyc\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;jyc.png\" width=\"60px\" alt=\"User avatar: \" /></a><a href=\"https://github.com/roblevy\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;roblevy.png\" width=\"60px\" alt=\"User avatar: Rob Levy\" /></a><a href=\"https://github.com/glozow\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;glozow.png\" width=\"60px\" alt=\"User avatar: Gloria Zhao\" /></a><a href=\"https://github.com/toupeira\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;toupeira.png\" width=\"60px\" alt=\"User avatar: Markus Koller\" /></a><a href=\"https://github.com/rkpatel33\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;rkpatel33.png\" width=\"60px\" alt=\"User avatar: \" /></a><a href=\"https://github.com/jamesob\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;jamesob.png\" width=\"60px\" alt=\"User avatar: jamesob\" /></a><a href=\"https://github.com/jlebray\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;jlebray.png\" width=\"60px\" alt=\"User avatar: Johan Le Bray\" /></a><a href=\"https://github.com/panosl1\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;panosl1.png\" width=\"60px\" alt=\"User avatar: Panos Lampropoulos\" /></a><a href=\"https://github.com/bespinian\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;bespinian.png\" width=\"60px\" alt=\"User avatar: bespinian\" /></a><a href=\"https://github.com/scosu\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;scosu.png\" width=\"60px\" alt=\"User avatar: Markus Schneider-Pargmann\" /></a><a href=\"https://github.com/smithbm2316\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;smithbm2316.png\" width=\"60px\" alt=\"User avatar: Ben Smith\" /></a><a href=\"https://github.com/charlieegan3\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;charlieegan3.png\" width=\"60px\" alt=\"User avatar: Charlie Egan\" /></a><a href=\"https://github.com/thobbs\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;thobbs.png\" width=\"60px\" alt=\"User avatar: Tyler Hobbs\" /></a><a href=\"https://github.com/neilparikh\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;neilparikh.png\" width=\"60px\" alt=\"User avatar: Neil Parikh\" /></a><a href=\"https://github.com/shkm\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;shkm.png\" width=\"60px\" alt=\"User avatar: Jamie Schembri\" /></a><a href=\"https://github.com/BasedScience\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;BasedScience.png\" width=\"60px\" alt=\"User avatar: dockien\" /></a><a href=\"https://github.com/RussellGilmore\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;RussellGilmore.png\" width=\"60px\" alt=\"User avatar: Russell Gilmore\" /></a><a href=\"https://github.com/meribold\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;meribold.png\" width=\"60px\" alt=\"User avatar: Lukas Waymann\" /></a><a href=\"https://github.com/terminaldweller\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;terminaldweller.png\" width=\"60px\" alt=\"User avatar: Farzad Sadeghi\" /></a><a href=\"https://github.com/jaydee-coder\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;jaydee-coder.png\" width=\"60px\" alt=\"User avatar: \" /></a><a href=\"https://github.com/brpaz\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;brpaz.png\" width=\"60px\" alt=\"User avatar: Bruno Paz\" /></a><a href=\"https://github.com/flanaras\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;flanaras.png\" width=\"60px\" alt=\"User avatar: Filippos Lanaras\" /></a><a href=\"https://github.com/freshleafmedia\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;freshleafmedia.png\" width=\"60px\" alt=\"User avatar: Freshleaf Media\" /></a><a href=\"https://github.com/Unambiguous\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;Unambiguous.png\" width=\"60px\" alt=\"User avatar: \" /></a><a href=\"https://github.com/timobenn\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;timobenn.png\" width=\"60px\" alt=\"User avatar: Timothy Bennett\" /></a><a href=\"https://github.com/danhorner\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;danhorner.png\" width=\"60px\" alt=\"User avatar: Daniel Horner\" /></a><a href=\"https://github.com/devmatteini\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;devmatteini.png\" width=\"60px\" alt=\"User avatar: Cosimo Matteini\" /></a><a href=\"https://github.com/Saulimedes\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;Saulimedes.png\" width=\"60px\" alt=\"User avatar: Paul Becker\" /></a><!-- sponsors -->\n\nTable of Contents\n-----------------\n\n<!-- vim-markdown-toc GFM -->\n\n* [Installation](#installation)\n    * [Using Homebrew](#using-homebrew)\n    * [Linux packages](#linux-packages)\n    * [Windows packages](#windows-packages)\n    * [Using git](#using-git)\n    * [Binary releases](#binary-releases)\n    * [Setting up shell integration](#setting-up-shell-integration)\n    * [Vim/Neovim plugin](#vimneovim-plugin)\n* [Upgrading fzf](#upgrading-fzf)\n* [Building fzf](#building-fzf)\n* [Usage](#usage)\n    * [Using the finder](#using-the-finder)\n    * [Display modes](#display-modes)\n        * [`--height` mode](#--height-mode)\n        * [`--tmux` mode](#--tmux-mode)\n    * [Search syntax](#search-syntax)\n    * [Environment variables](#environment-variables)\n    * [Customizing the look](#customizing-the-look)\n    * [Options](#options)\n    * [Demo](#demo)\n* [Examples](#examples)\n* [Key bindings for command-line](#key-bindings-for-command-line)\n* [Fuzzy completion for bash and zsh](#fuzzy-completion-for-bash-and-zsh)\n    * [Files and directories](#files-and-directories)\n    * [Process IDs](#process-ids)\n    * [Host names](#host-names)\n    * [Environment variables / Aliases](#environment-variables--aliases)\n    * [Customizing fzf options for completion](#customizing-fzf-options-for-completion)\n    * [Customizing completion source for paths and directories](#customizing-completion-source-for-paths-and-directories)\n    * [Supported commands](#supported-commands)\n    * [Custom fuzzy completion](#custom-fuzzy-completion)\n* [Vim plugin](#vim-plugin)\n* [Advanced topics](#advanced-topics)\n    * [Performance](#performance)\n    * [Executing external programs](#executing-external-programs)\n    * [Turning into a different process](#turning-into-a-different-process)\n    * [Reloading the candidate list](#reloading-the-candidate-list)\n        * [1. Update the list of processes by pressing CTRL-R](#1-update-the-list-of-processes-by-pressing-ctrl-r)\n        * [2. Switch between sources by pressing CTRL-D or CTRL-F](#2-switch-between-sources-by-pressing-ctrl-d-or-ctrl-f)\n        * [3. Interactive ripgrep integration](#3-interactive-ripgrep-integration)\n    * [Preview window](#preview-window)\n    * [Previewing an image](#previewing-an-image)\n* [Tips](#tips)\n    * [Respecting `.gitignore`](#respecting-gitignore)\n    * [Fish shell](#fish-shell)\n    * [fzf Theme Playground](#fzf-theme-playground)\n* [Related projects](#related-projects)\n* [License](#license)\n\n<!-- vim-markdown-toc -->\n\nInstallation\n------------\n\n### Using Homebrew\n\nYou can use [Homebrew](https://brew.sh/) (on macOS or Linux) to install fzf.\n\n```sh\nbrew install fzf\n```\n\n> [!IMPORTANT]\n> To set up shell integration (key bindings and fuzzy completion),\n> see [the instructions below](#setting-up-shell-integration).\n\nfzf is also available [via MacPorts][portfile]: `sudo port install fzf`\n\n[portfile]: https://github.com/macports/macports-ports/blob/master/sysutils/fzf/Portfile\n\n### Linux packages\n\n| Package Manager | Linux Distribution      | Command                            |\n| --------------- | ----------------------- | ---------------------------------- |\n| APK             | Alpine Linux            | `sudo apk add fzf`                 |\n| APT             | Debian 9+/Ubuntu 19.10+ | `sudo apt install fzf`             |\n| Conda           |                         | `conda install -c conda-forge fzf` |\n| DNF             | Fedora                  | `sudo dnf install fzf`             |\n| Nix             | NixOS, etc.             | `nix-env -iA nixpkgs.fzf`          |\n| Pacman          | Arch Linux              | `sudo pacman -S fzf`               |\n| pkg             | FreeBSD                 | `pkg install fzf`                  |\n| pkgin           | NetBSD                  | `pkgin install fzf`                |\n| pkg_add         | OpenBSD                 | `pkg_add fzf`                      |\n| Portage         | Gentoo                  | `emerge --ask app-shells/fzf`      |\n| Spack           |                         | `spack install fzf`                |\n| XBPS            | Void Linux              | `sudo xbps-install -S fzf`         |\n| Zypper          | openSUSE                | `sudo zypper install fzf`          |\n\n> [!IMPORTANT]\n> To set up shell integration (key bindings and fuzzy completion),\n> see [the instructions below](#setting-up-shell-integration).\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/fzf.svg?columns=3)](https://repology.org/project/fzf/versions)\n\n### Windows packages\n\nOn Windows, fzf is available via [Chocolatey][choco], [Scoop][scoop],\n[Winget][winget], and [MSYS2][msys2]:\n\n| Package manager | Command                               |\n| --------------- | ------------------------------------- |\n| Chocolatey      | `choco install fzf`                   |\n| Scoop           | `scoop install fzf`                   |\n| Winget          | `winget install fzf`                  |\n| MSYS2 (pacman)  | `pacman -S $MINGW_PACKAGE_PREFIX-fzf` |\n\n[choco]: https://chocolatey.org/packages/fzf\n[scoop]: https://github.com/ScoopInstaller/Main/blob/master/bucket/fzf.json\n[winget]: https://github.com/microsoft/winget-pkgs/tree/master/manifests/j/junegunn/fzf\n[msys2]: https://packages.msys2.org/base/mingw-w64-fzf\n\n### Using git\n\nAlternatively, you can \"git clone\" this repository to any directory and run\n[install](https://github.com/junegunn/fzf/blob/master/install) script.\n\n```sh\ngit clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf\n~/.fzf/install\n```\n\nThe install script will add lines to your shell configuration file to modify\n`$PATH` and set up shell integration.\n\n### Binary releases\n\nYou can download the official fzf binaries from the releases page.\n\n* https://github.com/junegunn/fzf/releases\n\n### Setting up shell integration\n\nAdd the following line to your shell configuration file.\n\n* bash\n  ```sh\n  # Set up fzf key bindings and fuzzy completion\n  eval \"$(fzf --bash)\"\n  ```\n* zsh\n  ```sh\n  # Set up fzf key bindings and fuzzy completion\n  source <(fzf --zsh)\n  ```\n* fish\n  ```fish\n  # Set up fzf key bindings\n  fzf --fish | source\n  ```\n\n> [!NOTE]\n> `--bash`, `--zsh`, and `--fish` options are only available in fzf 0.48.0 or\n> later. If you have an older version of fzf, or want finer control, you can\n> source individual script files in the [/shell](/shell) directory. The\n> location of the files may vary depending on the package manager you use.\n> Please refer to the package documentation for more information.\n> (e.g. `apt show fzf`)\n\n> [!TIP]\n> You can disable CTRL-T or ALT-C binding by setting `FZF_CTRL_T_COMMAND` or\n> `FZF_ALT_C_COMMAND` to an empty string when sourcing the script.\n> For example, to disable ALT-C binding:\n>\n> * bash: `FZF_ALT_C_COMMAND= eval \"$(fzf --bash)\"`\n> * zsh: `FZF_ALT_C_COMMAND= source <(fzf --zsh)`\n> * fish: `fzf --fish | FZF_ALT_C_COMMAND= source`\n>\n> Setting the variables after sourcing the script will have no effect.\n\n### Vim/Neovim plugin\n\nIf you use [vim-plug](https://github.com/junegunn/vim-plug), add this to\nyour Vim configuration file:\n\n```vim\nPlug 'junegunn/fzf', { 'do': { -> fzf#install() } }\nPlug 'junegunn/fzf.vim'\n```\n\n* `junegunn/fzf` provides the basic library functions\n    * `fzf#install()` makes sure that you have the latest binary\n* `junegunn/fzf.vim` is [a separate project](https://github.com/junegunn/fzf.vim)\n  that provides a variety of useful commands\n\nTo learn more about the Vim integration, see [README-VIM.md](README-VIM.md).\n\n> [!TIP]\n> If you use Neovim and prefer Lua-based plugins, check out\n> [fzf-lua](https://github.com/ibhagwan/fzf-lua).\n\nUpgrading fzf\n-------------\n\nfzf is being actively developed, and you might want to upgrade it once in a\nwhile. Please follow the instruction below depending on the installation\nmethod used.\n\n- git: `cd ~/.fzf && git pull && ./install`\n- brew: `brew update; brew upgrade fzf`\n- macports: `sudo port upgrade fzf`\n- chocolatey: `choco upgrade fzf`\n- vim-plug: `:PlugUpdate fzf`\n\nBuilding fzf\n------------\n\nSee [BUILD.md](BUILD.md).\n\nUsage\n-----\n\nfzf will launch interactive finder, read the list from STDIN, and write the\nselected item to STDOUT.\n\n```sh\nfind * -type f | fzf > selected\n```\n\nWithout STDIN pipe, fzf will traverse the file system under the current\ndirectory to get the list of files.\n\n```sh\nvim $(fzf)\n```\n\n> [!NOTE]\n> You can override the default behavior\n> * Either by setting `$FZF_DEFAULT_COMMAND` to a command that generates the desired list\n> * Or by setting `--walker`, `--walker-root`, and `--walker-skip` options in `$FZF_DEFAULT_OPTS`\n\n> [!WARNING]\n> A more robust solution would be to use `xargs` but we've presented\n> the above as it's easier to grasp\n> ```sh\n> fzf --print0 | xargs -0 -o vim\n> ```\n\n> [!TIP]\n> fzf also has the ability to turn itself into a different process.\n>\n> ```sh\n> fzf --bind 'enter:become(vim {})'\n> ```\n>\n> *See [Turning into a different process](#turning-into-a-different-process)\n> for more information.*\n\n### Using the finder\n\n- `CTRL-K` / `CTRL-J` (or `CTRL-P` / `CTRL-N`) to move cursor up and down\n- `Enter` key to select the item, `CTRL-C` / `CTRL-G` / `ESC` to exit\n- On multi-select mode (`-m`), `TAB` and `Shift-TAB` to mark multiple items\n- Emacs style key bindings\n- Mouse: scroll, click, double-click; shift-click and shift-scroll on\n  multi-select mode\n\n### Display modes\n\nfzf by default runs in fullscreen mode, but there are other display modes.\n\n#### `--height` mode\n\nWith `--height HEIGHT[%]`, fzf will start below the cursor with the given height.\n\n```sh\nfzf --height 40%\n```\n\n`reverse` layout and `--border` goes well with this option.\n\n```sh\nfzf --height 40% --layout reverse --border\n```\n\nBy prepending `~` to the height, you're setting the maximum height.\n\n```sh\n# Will take as few lines as possible to display the list\nseq 3 | fzf --height ~100%\nseq 3000 | fzf --height ~100%\n```\n\nHeight value can be a negative number.\n\n```sh\n# Screen height - 3\nfzf --height -3\n```\n\n#### `--tmux` mode\n\nWith `--tmux` option, fzf will start in a tmux popup.\n\n```sh\n# --tmux [center|top|bottom|left|right][,SIZE[%]][,SIZE[%][,border-native]]\n\nfzf --tmux center         # Center, 50% width and height\nfzf --tmux 80%            # Center, 80% width and height\nfzf --tmux 100%,50%       # Center, 100% width and 50% height\nfzf --tmux left,40%       # Left, 40% width\nfzf --tmux left,40%,90%   # Left, 40% width, 90% height\nfzf --tmux top,40%        # Top, 40% height\nfzf --tmux bottom,80%,40% # Bottom, 80% height, 40% height\n```\n\n`--tmux` is silently ignored when you're not on tmux.\n\n> [!NOTE]\n> If you're stuck with an old version of tmux that doesn't support popup,\n> or if you want to open fzf in a regular tmux pane, check out\n> [fzf-tmux](bin/fzf-tmux) script.\n\n> [!TIP]\n> You can add these options to `$FZF_DEFAULT_OPTS` so that they're applied by\n> default. For example,\n>\n> ```sh\n> # Open in tmux popup if on tmux, otherwise use --height mode\n> export FZF_DEFAULT_OPTS='--height 40% --tmux bottom,40% --layout reverse --border top'\n> ```\n\n### Search syntax\n\nUnless otherwise specified, fzf starts in \"extended-search mode\" where you can\ntype in multiple search terms delimited by spaces. e.g. `^music .mp3$ sbtrkt\n!fire`\n\n| Token     | Match type                              | Description                                  |\n| --------- | --------------------------------------  | ------------------------------------------   |\n| `sbtrkt`  | fuzzy-match                             | Items that match `sbtrkt`                    |\n| `'wild`   | exact-match (quoted)                    | Items that include `wild`                    |\n| `'wild'`  | exact-boundary-match (quoted both ends) | Items that include `wild` at word boundaries |\n| `^music`  | prefix-exact-match                      | Items that start with `music`                |\n| `.mp3$`   | suffix-exact-match                      | Items that end with `.mp3`                   |\n| `!fire`   | inverse-exact-match                     | Items that do not include `fire`             |\n| `!^music` | inverse-prefix-exact-match              | Items that do not start with `music`         |\n| `!.mp3$`  | inverse-suffix-exact-match              | Items that do not end with `.mp3`            |\n\nIf you don't prefer fuzzy matching and do not wish to \"quote\" every word,\nstart fzf with `-e` or `--exact` option. Note that when  `--exact` is set,\n`'`-prefix \"unquotes\" the term.\n\nA single bar character term acts as an OR operator. For example, the following\nquery matches entries that start with `core` and end with either `go`, `rb`,\nor `py`.\n\n```\n^core go$ | rb$ | py$\n```\n\n### Environment variables\n\n- `FZF_DEFAULT_COMMAND`\n    - Default command to use when input is tty\n    - e.g. `export FZF_DEFAULT_COMMAND='fd --type f'`\n- `FZF_DEFAULT_OPTS`\n    - Default options\n    - e.g. `export FZF_DEFAULT_OPTS=\"--layout=reverse --inline-info\"`\n- `FZF_DEFAULT_OPTS_FILE`\n    - If you prefer to manage default options in a file, set this variable to\n      point to the location of the file\n    - e.g. `export FZF_DEFAULT_OPTS_FILE=~/.fzfrc`\n\n> [!WARNING]\n> `FZF_DEFAULT_COMMAND` is not used by shell integration due to the\n> slight difference in requirements.\n>\n> * `CTRL-T` runs `$FZF_CTRL_T_COMMAND` to get a list of files and directories\n> * `ALT-C` runs `$FZF_ALT_C_COMMAND` to get a list of directories\n> * `vim ~/**<tab>` runs `fzf_compgen_path()` with the prefix (`~/`) as the first argument\n> * `cd foo**<tab>` runs `fzf_compgen_dir()` with the prefix (`foo`) as the first argument\n>\n> The available options are described later in this document.\n\n### Customizing the look\n\nThe user interface of fzf is fully customizable with a large number of\nconfiguration options. For a quick setup, you can start with one of the style\npresets \u2014 `default`, `full`, or `minimal` \u2014 using the `--style` option.\n\n```sh\nfzf --style full \\\n    --preview 'fzf-preview.sh {}' --bind 'focus:transform-header:file --brief {}'\n```\n\n| Preset    | Screenshot                                                                             |\n| :---      | :---                                                                                   |\n| `default` | <img src=\"https://raw.githubusercontent.com/junegunn/i/master/fzf-style-default.png\"/> |\n| `full`    | <img src=\"https://raw.githubusercontent.com/junegunn/i/master/fzf-style-full.png\"/>    |\n| `minimal` | <img src=\"https://raw.githubusercontent.com/junegunn/i/master/fzf-style-minimal.png\"/> |\n\nHere's an example based on the `full` preset:\n\n<img src=\"https://raw.githubusercontent.com/junegunn/i/master/fzf-4-borders.png\"/>\n\n<details>\n\n```sh\ngit ls-files | fzf --style full \\\n    --border --padding 1,2 \\\n    --border-label ' Demo ' --input-label ' Input ' --header-label ' File Type ' \\\n    --preview 'fzf-preview.sh {}' \\\n    --bind 'result:transform-list-label:\n        if [[ -z $FZF_QUERY ]]; then\n          echo \" $FZF_MATCH_COUNT items \"\n        else\n          echo \" $FZF_MATCH_COUNT matches for [$FZF_QUERY] \"\n        fi\n        ' \\\n    --bind 'focus:transform-preview-label:[[ -n {} ]] && printf \" Previewing [%s] \" {}' \\\n    --bind 'focus:+transform-header:file --brief {} || echo \"No file selected\"' \\\n    --bind 'ctrl-r:change-list-label( Reloading the list )+reload(sleep 2; git ls-files)' \\\n    --color 'border:#aaaaaa,label:#cccccc' \\\n    --color 'preview-border:#9999cc,preview-label:#ccccff' \\\n    --color 'list-border:#669966,list-label:#99cc99' \\\n    --color 'input-border:#996666,input-label:#ffcccc' \\\n    --color 'header-border:#6699cc,header-label:#99ccff'\n```\n\n</details>\n\n### Options\n\nSee the man page (`fzf --man` or `man fzf`) for the full list of options.\n\n### Demo\nIf you learn by watching videos, check out this screencast by [@samoshkin](https://github.com/samoshkin) to explore `fzf` features.\n\n<a title=\"fzf - command-line fuzzy finder\" href=\"https://www.youtube.com/watch?v=qgG5Jhi_Els\">\n  <img src=\"https://i.imgur.com/vtG8olE.png\" width=\"640\">\n</a>\n\nExamples\n--------\n\n* [Wiki page of examples](https://github.com/junegunn/fzf/wiki/examples)\n    * *Disclaimer: The examples on this page are maintained by the community\n      and are not thoroughly tested*\n* [Advanced fzf examples](https://github.com/junegunn/fzf/blob/master/ADVANCED.md)\n\nKey bindings for command-line\n-----------------------------\n\nBy [setting up shell integration](#setting-up-shell-integration), you can use\nthe following key bindings in bash, zsh, and fish.\n\n- `CTRL-T` - Paste the selected files and directories onto the command-line\n    - The list is generated using `--walker file,dir,follow,hidden` option\n        - You can override the behavior by setting `FZF_CTRL_T_COMMAND` to a custom command that generates the desired list\n        - Or you can set `--walker*` options in `FZF_CTRL_T_OPTS`\n    - Set `FZF_CTRL_T_OPTS` to pass additional options to fzf\n      ```sh\n      # Preview file content using bat (https://github.com/sharkdp/bat)\n      export FZF_CTRL_T_OPTS=\"\n        --walker-skip .git,node_modules,target\n        --preview 'bat -n --color=always {}'\n        --bind 'ctrl-/:change-preview-window(down|hidden|)'\"\n      ```\n    - Can be disabled by setting `FZF_CTRL_T_COMMAND` to an empty string when\n      sourcing the script\n- `CTRL-R` - Paste the selected command from history onto the command-line\n    - If you want to see the commands in chronological order, press `CTRL-R`\n      again which toggles sorting by relevance\n    - Press `CTRL-/` or `ALT-/` to toggle line wrapping\n    - Set `FZF_CTRL_R_OPTS` to pass additional options to fzf\n      ```sh\n      # CTRL-Y to copy the command into clipboard using pbcopy\n      export FZF_CTRL_R_OPTS=\"\n        --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'\n        --color header:italic\n        --header 'Press CTRL-Y to copy command into clipboard'\"\n      ```\n- `ALT-C` - cd into the selected directory\n    - The list is generated using `--walker dir,follow,hidden` option\n    - Set `FZF_ALT_C_COMMAND` to override the default command\n        - Or you can set `--walker-*` options in `FZF_ALT_C_OPTS`\n    - Set `FZF_ALT_C_OPTS` to pass additional options to fzf\n      ```sh\n      # Print tree structure in the preview window\n      export FZF_ALT_C_OPTS=\"\n        --walker-skip .git,node_modules,target\n        --preview 'tree -C {}'\"\n      ```\n    - Can be disabled by setting `FZF_ALT_C_COMMAND` to an empty string when\n      sourcing the script\n\nDisplay modes for these bindings can be separately configured via\n`FZF_{CTRL_T,CTRL_R,ALT_C}_OPTS` or globally via `FZF_DEFAULT_OPTS`.\n(e.g. `FZF_CTRL_R_OPTS='--tmux bottom,60% --height 60% --border top'`)\n\nMore tips can be found on [the wiki page](https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings).\n\nFuzzy completion for bash and zsh\n---------------------------------\n\n### Files and directories\n\nFuzzy completion for files and directories can be triggered if the word before\nthe cursor ends with the trigger sequence, which is by default `**`.\n\n- `COMMAND [DIRECTORY/][FUZZY_PATTERN]**<TAB>`\n\n```sh\n# Files under the current directory\n# - You can select multiple items with TAB key\nvim **<TAB>\n\n# Files under parent directory\nvim ../**<TAB>\n\n# Files under parent directory that match `fzf`\nvim ../fzf**<TAB>\n\n# Files under your home directory\nvim ~/**<TAB>\n\n\n# Directories under current directory (single-selection)\ncd **<TAB>\n\n# Directories under ~/github that match `fzf`\ncd ~/github/fzf**<TAB>\n```\n\n### Process IDs\n\nFuzzy completion for PIDs is provided for kill command.\n\n```sh\n# Can select multiple processes with <TAB> or <Shift-TAB> keys\nkill -9 **<TAB>\n```\n\n### Host names\n\nFor ssh and telnet commands, fuzzy completion for hostnames is provided. The\nnames are extracted from /etc/hosts and ~/.ssh/config.\n\n```sh\nssh **<TAB>\ntelnet **<TAB>\n```\n\n### Environment variables / Aliases\n\n```sh\nunset **<TAB>\nexport **<TAB>\nunalias **<TAB>\n```\n\n### Customizing fzf options for completion\n\n```sh\n# Use ~~ as the trigger sequence instead of the default **\nexport FZF_COMPLETION_TRIGGER='~~'\n\n# Options to fzf command\nexport FZF_COMPLETION_OPTS='--border --info=inline'\n\n# Options for path completion (e.g. vim **<TAB>)\nexport FZF_COMPLETION_PATH_OPTS='--walker file,dir,follow,hidden'\n\n# Options for directory completion (e.g. cd **<TAB>)\nexport FZF_COMPLETION_DIR_OPTS='--walker dir,follow'\n\n# Advanced customization of fzf options via _fzf_comprun function\n# - The first argument to the function is the name of the command.\n# - You should make sure to pass the rest of the arguments ($@) to fzf.\n_fzf_comprun() {\n  local command=$1\n  shift\n\n  case \"$command\" in\n    cd)           fzf --preview 'tree -C {} | head -200'   \"$@\" ;;\n    export|unset) fzf --preview \"eval 'echo \\$'{}\"         \"$@\" ;;\n    ssh)          fzf --preview 'dig {}'                   \"$@\" ;;\n    *)            fzf --preview 'bat -n --color=always {}' \"$@\" ;;\n  esac\n}\n```\n\n### Customizing completion source for paths and directories\n\n```sh\n# Use fd (https://github.com/sharkdp/fd) for listing path candidates.\n# - The first argument to the function ($1) is the base path to start traversal\n# - See the source code (completion.{bash,zsh}) for the details.\n_fzf_compgen_path() {\n  fd --hidden --follow --exclude \".git\" . \"$1\"\n}\n\n# Use fd to generate the list for directory completion\n_fzf_compgen_dir() {\n  fd --type d --hidden --follow --exclude \".git\" . \"$1\"\n}\n```\n\n### Supported commands\n\nOn bash, fuzzy completion is enabled only for a predefined set of commands\n(`complete | grep _fzf` to see the list). But you can enable it for other\ncommands as well by using `_fzf_setup_completion` helper function.\n\n```sh\n# usage: _fzf_setup_completion path|dir|var|alias|host COMMANDS...\n_fzf_setup_completion path ag git kubectl\n_fzf_setup_completion dir tree\n```\n\n### Custom fuzzy completion\n\n_**(Custom completion API is experimental and subject to change)**_\n\nFor a command named _\"COMMAND\"_, define `_fzf_complete_COMMAND` function using\n`_fzf_complete` helper.\n\n```sh\n# Custom fuzzy completion for \"doge\" command\n#   e.g. doge **<TAB>\n_fzf_complete_doge() {\n  _fzf_complete --multi --reverse --prompt=\"doge> \" -- \"$@\" < <(\n    echo very\n    echo wow\n    echo such\n    echo doge\n  )\n}\n```\n\n- The arguments before `--` are the options to fzf.\n- After `--`, simply pass the original completion arguments unchanged (`\"$@\"`).\n- Then, write a set of commands that generates the completion candidates and\n  feed its output to the function using process substitution (`< <(...)`).\n\nzsh will automatically pick up the function using the naming convention but in\nbash you have to manually associate the function with the command using the\n`complete` command.\n\n```sh\n[ -n \"$BASH\" ] && complete -F _fzf_complete_doge -o default -o bashdefault doge\n```\n\nIf you need to post-process the output from fzf, define\n`_fzf_complete_COMMAND_post` as follows.\n\n```sh\n_fzf_complete_foo() {\n  _fzf_complete --multi --reverse --header-lines=3 -- \"$@\" < <(\n    ls -al\n  )\n}\n\n_fzf_complete_foo_post() {\n  awk '{print $NF}'\n}\n\n[ -n \"$BASH\" ] && complete -F _fzf_complete_foo -o default -o bashdefault foo\n```\n\nVim plugin\n----------\n\nSee [README-VIM.md](README-VIM.md).\n\nAdvanced topics\n---------------\n\n### Performance\n\nfzf is fast. Performance should not be a problem in most use cases. However,\nyou might want to be aware of the options that can affect performance.\n\n- `--ansi` tells fzf to extract and parse ANSI color codes in the input, and it\n  makes the initial scanning slower. So it's not recommended that you add it\n  to your `$FZF_DEFAULT_OPTS`.\n- `--nth` makes fzf slower because it has to tokenize each line.\n- `--with-nth` makes fzf slower as fzf has to tokenize and reassemble each\n  line.\n\n### Executing external programs\n\nYou can set up key bindings for starting external processes without leaving\nfzf (`execute`, `execute-silent`).\n\n```bash\n# Press F1 to open the file with less without leaving fzf\n# Press CTRL-Y to copy the line to clipboard and aborts fzf (requires pbcopy)\nfzf --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} | pbcopy)+abort'\n```\n\nSee *KEY BINDINGS* section of the man page for details.\n\n### Turning into a different process\n\n`become(...)` is similar to `execute(...)`/`execute-silent(...)` described\nabove, but instead of executing the command and coming back to fzf on\ncomplete, it turns fzf into a new process for the command.\n\n```sh\nfzf --bind 'enter:become(vim {})'\n```\n\nCompared to the seemingly equivalent command substitution `vim \"$(fzf)\"`, this\napproach has several advantages:\n\n* Vim will not open an empty file when you terminate fzf with\n  <kbd>CTRL-C</kbd>\n* Vim will not open an empty file when you press <kbd>ENTER</kbd> on an empty\n  result\n* Can handle multiple selections even when they have whitespaces\n  ```sh\n  fzf --multi --bind 'enter:become(vim {+})'\n  ```\n\nTo be fair, running `fzf --print0 | xargs -0 -o vim` instead of `vim \"$(fzf)\"`\nresolves all of the issues mentioned. Nonetheless, `become(...)` still offers\nadditional benefits in different scenarios.\n\n* You can set up multiple bindings to handle the result in different ways\n  without any wrapping script\n  ```sh\n  fzf --bind 'enter:become(vim {}),ctrl-e:become(emacs {})'\n  ```\n  * Previously, you would have to use `--expect=ctrl-e` and check the first\n    line of the output of fzf\n* You can easily build the subsequent command using the field index\n  expressions of fzf\n  ```sh\n  # Open the file in Vim and go to the line\n  git grep --line-number . |\n      fzf --delimiter : --nth 3.. --bind 'enter:become(vim {1} +{2})'\n  ```\n\n### Reloading the candidate list\n\nBy binding `reload` action to a key or an event, you can make fzf dynamically\nreload the candidate list. See https://github.com/junegunn/fzf/issues/1750 for\nmore details.\n\n#### 1. Update the list of processes by pressing CTRL-R\n\n```sh\nps -ef |\n  fzf --bind 'ctrl-r:reload(ps -ef)' \\\n      --header 'Press CTRL-R to reload' --header-lines=1 \\\n      --height=50% --layout=reverse\n```\n\n#### 2. Switch between sources by pressing CTRL-D or CTRL-F\n\n```sh\nFZF_DEFAULT_COMMAND='find . -type f' \\\n  fzf --bind 'ctrl-d:reload(find . -type d),ctrl-f:reload(eval \"$FZF_DEFAULT_COMMAND\")' \\\n      --height=50% --layout=reverse\n```\n\n#### 3. Interactive ripgrep integration\n\nThe following example uses fzf as the selector interface for ripgrep. We bound\n`reload` action to `change` event, so every time you type on fzf, the ripgrep\nprocess will restart with the updated query string denoted by the placeholder\nexpression `{q}`. Also, note that we used `--disabled` option so that fzf\ndoesn't perform any secondary filtering.\n\n```sh\n: | rg_prefix='rg --column --line-number --no-heading --color=always --smart-case' \\\n    fzf --bind 'start:reload:$rg_prefix \"\"' \\\n        --bind 'change:reload:$rg_prefix {q} || true' \\\n        --bind 'enter:become(vim {1} +{2})' \\\n        --ansi --disabled \\\n        --height=50% --layout=reverse\n```\n\nIf ripgrep doesn't find any matches, it will exit with a non-zero exit status,\nand fzf will warn you about it. To suppress the warning message, we added\n`|| true` to the command, so that it always exits with 0.\n\nSee [\"Using fzf as interactive Ripgrep launcher\"](https://github.com/junegunn/fzf/blob/master/ADVANCED.md#using-fzf-as-interactive-ripgrep-launcher)\nfor more sophisticated examples.\n\n### Preview window\n\nWhen the `--preview` option is set, fzf automatically starts an external process\nwith the current line as the argument and shows the result in the split window.\nYour `$SHELL` is used to execute the command with `$SHELL -c COMMAND`.\nThe window can be scrolled using the mouse or custom key bindings.\n\n```bash\n# {} is replaced with the single-quoted string of the focused line\nfzf --preview 'cat {}'\n```\n\nPreview window supports ANSI colors, so you can use any program that\nsyntax-highlights the content of a file, such as\n[Bat](https://github.com/sharkdp/bat) or\n[Highlight](https://gitlab.com/saalen/highlight):\n\n```bash\nfzf --preview 'bat --color=always {}' --preview-window '~3'\n```\n\nYou can customize the size, position, and border of the preview window using\n`--preview-window` option, and the foreground and background color of it with\n`--color` option. For example,\n\n```bash\nfzf --height 40% --layout reverse --info inline --border \\\n    --preview 'file {}' --preview-window up,1,border-horizontal \\\n    --bind 'ctrl-/:change-preview-window(50%|hidden|)' \\\n    --color 'fg:#bbccdd,fg+:#ddeeff,bg:#334455,preview-bg:#223344,border:#778899'\n```\n\nSee the man page (`man fzf`) for the full list of options.\n\nMore advanced examples can be found [here](https://github.com/junegunn/fzf/blob/master/ADVANCED.md).\n\n> [!WARNING]\n> Since fzf is a general-purpose text filter rather than a file finder, **it is\n> not a good idea to add `--preview` option to your `$FZF_DEFAULT_OPTS`**.\n>\n> ```sh\n> # *********************\n> # ** DO NOT DO THIS! **\n> # *********************\n> export FZF_DEFAULT_OPTS='--preview \"bat --style=numbers --color=always --line-range :500 {}\"'\n>\n> # bat doesn't work with any input other than the list of files\n> ps -ef | fzf\n> seq 100 | fzf\n> history | fzf\n> ```\n\n### Previewing an image\n\nfzf can display images in the preview window using one of the following protocols:\n\n* [Kitty graphics protocol](https://sw.kovidgoyal.net/kitty/graphics-protocol/)\n* [iTerm2 inline images protocol](https://iterm2.com/documentation-images.html)\n* [Sixel](https://en.wikipedia.org/wiki/Sixel)\n\nSee [bin/fzf-preview.sh](bin/fzf-preview.sh) script for more information.\n\n```sh\nfzf --preview 'fzf-preview.sh {}'\n```\n\nTips\n----\n\n### Respecting `.gitignore`\n\nYou can use [fd](https://github.com/sharkdp/fd),\n[ripgrep](https://github.com/BurntSushi/ripgrep), or [the silver\nsearcher](https://github.com/ggreer/the_silver_searcher) to traverse the file\nsystem while respecting `.gitignore`.\n\n```sh\n# Feed the output of fd into fzf\nfd --type f --strip-cwd-prefix | fzf\n\n# Setting fd as the default source for fzf\nexport FZF_DEFAULT_COMMAND='fd --type f --strip-cwd-prefix'\n\n# Now fzf (w/o pipe) will use the fd command to generate the list\nfzf\n\n# To apply the command to CTRL-T as well\nexport FZF_CTRL_T_COMMAND=\"$FZF_DEFAULT_COMMAND\"\n```\n\nIf you want the command to follow symbolic links and don't want it to exclude\nhidden files, use the following command:\n\n```sh\nexport FZF_DEFAULT_COMMAND='fd --type f --strip-cwd-prefix --hidden --follow --exclude .git'\n```\n\n### Fish shell\n\n`CTRL-T` key binding of fish, unlike those of bash and zsh, will use the last\ntoken on the command-line as the root directory for the recursive search. For\ninstance, hitting `CTRL-T` at the end of the following command-line\n\n```sh\nls /var/\n```\n\nwill list all files and directories under `/var/`.\n\nWhen using a custom `FZF_CTRL_T_COMMAND`, use the unexpanded `$dir` variable to\nmake use of this feature. `$dir` defaults to `.` when the last token is not a\nvalid directory. Example:\n\n```sh\nset -g FZF_CTRL_T_COMMAND \"command find -L \\$dir -type f 2> /dev/null | sed '1d; s#^\\./##'\"\n```\n\n### fzf Theme Playground\n\n[fzf Theme Playground](https://vitormv.github.io/fzf-themes/) created by\n[Vitor Mello](https://github.com/vitormv) is a webpage where you can\ninteractively create fzf themes.\n\nRelated projects\n----------------\n\nhttps://github.com/junegunn/fzf/wiki/Related-projects\n\n[License](LICENSE)\n------------------\n\nThe MIT License (MIT)\n\nCopyright (c) 2013-2024 Junegunn Choi\n",
        "releases": [
            {
                "name": "0.58.0",
                "date": "2025-01-19T17:11:30Z"
            },
            {
                "name": "0.57.0",
                "date": "2024-12-15T08:07:32Z"
            },
            {
                "name": "0.56.3",
                "date": "2024-11-15T01:07:53Z"
            },
            {
                "name": "0.56.2",
                "date": "2024-11-11T15:59:57Z"
            },
            {
                "name": "0.56.1",
                "date": "2024-11-10T14:25:02Z"
            },
            {
                "name": "0.56.0",
                "date": "2024-10-27T03:07:01Z"
            },
            {
                "name": "0.55.0",
                "date": "2024-08-29T08:13:56Z"
            },
            {
                "name": "0.54.3",
                "date": "2024-07-31T12:58:35Z"
            },
            {
                "name": "0.54.2",
                "date": "2024-07-26T10:12:30Z"
            },
            {
                "name": "0.54.1",
                "date": "2024-07-19T08:14:20Z"
            },
            {
                "name": "0.54.0",
                "date": "2024-07-08T13:54:24Z"
            },
            {
                "name": "0.53.0",
                "date": "2024-06-06T13:10:31Z"
            },
            {
                "name": "0.52.1",
                "date": "2024-05-13T16:56:16Z"
            },
            {
                "name": "0.52.0",
                "date": "2024-05-07T15:17:02Z"
            },
            {
                "name": "0.51.0",
                "date": "2024-05-01T05:37:01Z"
            },
            {
                "name": "0.50.0",
                "date": "2024-04-14T15:06:31Z"
            },
            {
                "name": "0.49.0",
                "date": "2024-04-04T15:23:06Z"
            },
            {
                "name": "0.48.1",
                "date": "2024-03-17T07:40:50Z"
            },
            {
                "name": "0.48.0",
                "date": "2024-03-13T15:14:40Z"
            },
            {
                "name": "0.47.0",
                "date": "2024-03-10T12:47:04Z"
            },
            {
                "name": "0.46.1",
                "date": "2024-02-01T09:15:52Z"
            },
            {
                "name": "0.46.0",
                "date": "2024-01-23T14:55:12Z"
            },
            {
                "name": "0.45.0",
                "date": "2024-01-01T06:41:32Z"
            },
            {
                "name": "0.44.1",
                "date": "2023-11-17T10:20:41Z"
            },
            {
                "name": "0.44.0",
                "date": "2023-11-12T13:10:54Z"
            },
            {
                "name": "0.43.0",
                "date": "2023-10-14T17:06:23Z"
            },
            {
                "name": "0.42.0",
                "date": "2023-06-14T15:42:35Z"
            },
            {
                "name": "0.41.1",
                "date": "2023-05-27T06:57:29Z"
            },
            {
                "name": "0.41.0",
                "date": "2023-05-25T15:32:09Z"
            },
            {
                "name": "0.40.0",
                "date": "2023-04-30T17:12:27Z"
            },
            {
                "name": "0.39.0",
                "date": "2023-04-02T14:37:51Z"
            },
            {
                "name": "0.38.0",
                "date": "2023-02-15T14:27:26Z"
            },
            {
                "name": "0.37.0",
                "date": "2023-01-24T13:18:39Z"
            },
            {
                "name": "0.36.0",
                "date": "2023-01-16T16:51:13Z"
            },
            {
                "name": "0.35.1",
                "date": "2022-11-18T11:45:18Z"
            },
            {
                "name": "0.35.0",
                "date": "2022-11-11T16:00:38Z"
            },
            {
                "name": "0.34.0",
                "date": "2022-09-28T14:30:15Z"
            },
            {
                "name": "0.33.0",
                "date": "2022-08-28T22:26:40Z"
            },
            {
                "name": "0.32.1",
                "date": "2022-08-08T15:01:15Z"
            },
            {
                "name": "0.32.0",
                "date": "2022-08-02T12:59:41Z"
            },
            {
                "name": "0.31.0",
                "date": "2022-07-21T14:07:12Z"
            },
            {
                "name": "0.30.0",
                "date": "2022-04-04T14:07:30Z"
            },
            {
                "name": "0.29.0",
                "date": "2021-12-24T16:56:56Z"
            },
            {
                "name": "0.28.0",
                "date": "2021-11-03T16:10:44Z"
            },
            {
                "name": "0.27.3",
                "date": "2021-10-15T15:07:44Z"
            },
            {
                "name": "0.27.2",
                "date": "2021-06-01T08:06:37Z"
            },
            {
                "name": "0.27.1",
                "date": "2021-05-22T04:25:16Z"
            },
            {
                "name": "0.27.0",
                "date": "2021-04-06T13:57:45Z"
            },
            {
                "name": "0.26.0",
                "date": "2021-03-13T06:17:10Z"
            },
            {
                "name": "0.25.1",
                "date": "2021-02-03T13:34:20Z"
            },
            {
                "name": "0.25.0",
                "date": "2021-01-02T19:10:59Z"
            },
            {
                "name": "0.24.4",
                "date": "2020-12-05T14:27:46Z"
            },
            {
                "name": "0.24.3",
                "date": "2020-11-09T11:43:50Z"
            },
            {
                "name": "0.24.2",
                "date": "2020-11-03T17:03:50Z"
            },
            {
                "name": "0.24.1",
                "date": "2020-10-28T16:46:48Z"
            },
            {
                "name": "0.24.0",
                "date": "2020-10-27T15:00:55Z"
            }
        ]
    }
}