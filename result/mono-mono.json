{
    "https://api.github.com/repos/mono/mono": {
        "forks": 3829,
        "watchers": 11193,
        "stars": 11193,
        "languages": {
            "C#": 277490592,
            "C": 20940123,
            "TSQL": 3587831,
            "PLpgSQL": 2626770,
            "ASP.NET": 2264375,
            "JavaScript": 1343261,
            "Makefile": 1258321,
            "Shell": 655414,
            "HTML": 617748,
            "M4": 318026,
            "Python": 277555,
            "C++": 252116,
            "Batchfile": 84271,
            "PLSQL": 70204,
            "Perl": 61255,
            "XSLT": 37762,
            "Ruby": 15052,
            "Groovy": 10705,
            "CSS": 10166,
            "Roff": 9064,
            "Assembly": 4183,
            "CMake": 3118,
            "DTrace": 2862,
            "Rich Text Format": 1720,
            "Visual Basic .NET": 1413,
            "Java": 738,
            "sed": 634,
            "Lua": 529,
            "RPC": 512,
            "PHP": 152,
            "Smalltalk": 14
        },
        "commits": [
            "2024-08-27T16:49:28Z",
            "2024-05-13T16:28:40Z",
            "2024-05-13T16:28:26Z",
            "2024-05-13T16:28:13Z",
            "2024-05-13T16:28:01Z",
            "2024-05-13T16:25:58Z",
            "2024-04-11T08:26:27Z",
            "2024-03-28T14:44:12Z",
            "2024-03-28T13:05:56Z",
            "2024-03-28T12:53:58Z",
            "2024-02-13T20:27:20Z",
            "2024-01-06T10:17:38Z",
            "2023-09-09T08:51:18Z",
            "2023-08-01T17:16:58Z",
            "2023-07-26T09:39:46Z",
            "2023-07-21T19:57:56Z",
            "2023-07-24T08:28:19Z",
            "2023-07-11T16:29:30Z",
            "2023-06-14T11:47:29Z",
            "2023-06-01T14:17:29Z",
            "2023-05-16T13:52:43Z",
            "2023-05-15T19:10:16Z",
            "2023-05-06T08:20:35Z",
            "2023-05-05T20:36:48Z",
            "2023-05-05T15:58:37Z",
            "2023-05-05T13:17:00Z",
            "2023-04-24T14:48:34Z",
            "2023-04-17T18:55:40Z",
            "2023-03-13T11:57:25Z",
            "2023-03-10T17:35:49Z"
        ],
        "creation_date": "2010-07-22T18:06:36Z",
        "contributors": 30,
        "topics": [
            "android",
            "csharp",
            "dotnet",
            "garbage-collector",
            "ios",
            "jit",
            "runtime",
            "xamarin"
        ],
        "subscribers": 527,
        "readme": "Mono is a software platform designed to allow developers to easily\ncreate cross platform applications.  It is an open source\nimplementation of Microsoft's .NET Framework based on the ECMA\nstandards for C# and the Common Language Runtime.\n\nThe Mono project is part of the [.NET Foundation](https://www.dotnetfoundation.org/)\n\n> [!IMPORTANT]\n> The [Mono Project (mono/mono)]( https://github.com/mono/mono) (\u2018original mono\u2019) has been an important part of the .NET ecosystem since it was launched in 2001. Microsoft became the steward of the Mono Project when it acquired Xamarin in 2016.\n>\n> The last major release of the Mono Project was in July 2019, with minor patch releases since that time. The last patch release was February 2024.\n>\n> We are happy to announce that the WineHQ organization will be taking over as the stewards of the Mono Project upstream at [wine-mono / Mono \u00b7 GitLab (winehq.org)](https://gitlab.winehq.org/wine-mono/mono).  Source code in existing [mono/mono](https://github.com/mono/mono) and other repos will remain available, although repos may be archived. Binaries will remain available for up to four years.\n>\n> Microsoft maintains a modern fork of [Mono runtime in the dotnet/runtime repo](https://github.com/dotnet/runtime/tree/main/src/mono) and has been progressively moving workloads to that fork. That work is now complete, and we recommend that active Mono users and maintainers of Mono-based app frameworks migrate to [.NET](https://github.com/dotnet/core) which includes work from this fork.\n>\n> We want to recognize that the Mono Project was the first .NET implementation on Android, iOS, Linux, and other operating systems. The Mono Project was a trailblazer for the .NET platform across many operating systems. It helped make cross-platform .NET a reality and enabled .NET in many new places and we appreciate the work of those who came before us.\n>\n> Thank you to all the Mono developers!\n\nJoin us on [Discord](https://aka.ms/dotnet-discord) in the `#monovm` channel:\n\n<a href=\"https://aka.ms/dotnet-discord\">\n  <img src=\"https://img.shields.io/discord/732297728826277939?style=flat-square&label=Discord&logo=discord&logoColor=white&color=7289DA\">\n</a>\n\n### Contents\n\n1. [Compilation and Installation](#compilation-and-installation)\n2. [Using Mono](#using-mono)\n3. [Directory Roadmap](#directory-roadmap)\n4. [Contributing to Mono](#contributing-to-mono)\n5. [Reporting bugs](#reporting-bugs)\n6. [Configuration Options](#configuration-options)\n7. [Working with Submodules](#working-with-submodules)\n\n### Build Status\n\nPublic CI: [![Azure Pipelines](https://dev.azure.com/dnceng/public/_apis/build/status/mono/mono-ci?branchName=main)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=952&branchName=main)\n\nLegacy Jenkins CI (no longer available publicly):\n\n| OS           | Architecture       | Status                       |\n|--------------|--------------------|------------------------------|\n| Debian 9     | amd64              | [![debian-9-amd64][1]][2]    |\n| Debian 9     | i386               | [![debian-9-i386][3]][4]     |\n| Debian 9     | armel              | [![debian-9-armel][5]][6]    |\n| Debian 9     | armhf              | [![debian-9-armhf][7]][8]    |\n| Debian 9     | arm64              | [![debian-9-arm64][9]][10]   |\n| OS X         | amd64              | [![osx-amd64][11]][12]       |\n| OS X         | i386               | [![osx-i386][13]][14]        |\n| Windows      | amd64              | [![windows-amd64][15]][16]   |\n| Windows      | i386               | [![windows-i386][17]][18]    |\n| CentOS       | s390x (cs)         | [![centos-s390x][19]][20]    |\n| Debian 9     | ppc64el (cs)       | [![debian-9-ppc64el][21]][22]|\n| AIX 6.1      | ppc64 (cs)         | [![aix-ppc64][23]][24]       |\n| FreeBSD 12   | amd64 (cs)         | [![freebsd-amd64][25]][26]   |\n\n_(cs) = community supported architecture_\n\n[1]: https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=debian-9-amd64/badge/icon\n[2]: https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=debian-9-amd64\n[3]: https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=debian-9-i386/badge/icon\n[4]: https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=debian-9-i386/\n[5]: https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=debian-9-armel/badge/icon\n[6]: https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=debian-9-armel/\n[7]: https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=debian-9-armhf/badge/icon\n[8]: https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=debian-9-armhf/\n[9]: https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=debian-9-arm64/badge/icon\n[10]: https://jenkins.mono-project.com/job/test-mono-mainline-linux/label=debian-9-arm64/\n[11]: https://jenkins.mono-project.com/job/test-mono-mainline/label=osx-amd64/badge/icon\n[12]: https://jenkins.mono-project.com/job/test-mono-mainline/label=osx-amd64/\n[13]: https://jenkins.mono-project.com/job/test-mono-mainline/label=osx-i386/badge/icon\n[14]: https://jenkins.mono-project.com/job/test-mono-mainline/label=osx-i386/\n[15]: https://jenkins.mono-project.com/job/z/label=w64/badge/icon\n[16]: https://jenkins.mono-project.com/job/z/label=w64/\n[17]: https://jenkins.mono-project.com/job/z/label=w32/badge/icon\n[18]: https://jenkins.mono-project.com/job/z/label=w32/\n[19]: https://jenkins.mono-project.com/job/test-mono-mainline-community/label=centos-s390x/badge/icon\n[20]: https://jenkins.mono-project.com/job/test-mono-mainline-community/label=centos-s390x\n[21]: https://jenkins.mono-project.com/job/test-mono-mainline-community-chroot/label=debian-9-ppc64el/badge/icon\n[22]: https://jenkins.mono-project.com/job/test-mono-mainline-community-chroot/label=debian-9-ppc64el\n[23]: https://jenkins.mono-project.com/job/test-mono-mainline-community/label=aix-ppc64/badge/icon\n[24]: https://jenkins.mono-project.com/job/test-mono-mainline-community/label=aix-ppc64\n[25]: https://jenkins.mono-project.com/job/test-mono-mainline-community/label=freebsd-12-amd64/badge/icon\n[26]: https://jenkins.mono-project.com/job/test-mono-mainline-community/label=freebsd-12-amd64\n\nCompilation and Installation\n============================\n\nBuilding the Software\n---------------------\n\nPlease see our guides for building Mono on\n[Mac OS X](https://www.mono-project.com/docs/compiling-mono/mac/),\n[Linux](https://www.mono-project.com/docs/compiling-mono/linux/) and \n[Windows](https://www.mono-project.com/docs/compiling-mono/windows/).\n\nNote that building from Git assumes that you already have Mono installed,\nso please download and [install the latest Mono release](https://www.mono-project.com/download/)\nbefore trying to build from Git. This is required because the Mono build\nrelies on a working Mono C# compiler to compile itself\n(also known as [bootstrapping](https://en.wikipedia.org/wiki/Bootstrapping_(compilers))).\n\nIf you don't have a working Mono installation\n---------------------------------------------\n\nIf you don't have a working Mono installation, you can try a slightly\nmore risky approach: getting the latest version of the 'monolite' distribution,\nwhich contains just enough to run the 'mcs' compiler. You do this with:\n\n    # Run the following line after ./autogen.sh\n    make get-monolite-latest\n\nThis will download and place the files appropriately so that you can then\njust run:\n\n    make\n\nThe build will then use the files downloaded by `make get-monolite-latest`.\n\nTesting and Installation\n------------------------\n\nYou can run the mono and mcs test suites with the command: `make check`.\n\nExpect to find a few test suite failures. As a sanity check, you\ncan compare the failures you got with [https://jenkins.mono-project.com/](https://jenkins.mono-project.com/).\n\nYou can now install mono with: `make install`\n\nYou can verify your installation by using the mono-test-install\nscript, it can diagnose some common problems with Mono's install.\nFailure to follow these steps may result in a broken installation. \n\nUsing Mono\n==========\n\nOnce you have installed the software, you can run a few programs:\n\n* `mono program.exe` runtime engine\n\n* `mcs program.cs` C# compiler\n\n* `monodis program.exe` CIL Disassembler\n\nSee the man pages for mono(1), mcs(1) and monodis(1) for further details.\n\nDirectory Roadmap\n=================\n\n* `acceptance-tests/` - Optional third party test suites used to validate Mono against a wider range of test cases.\n\n* `data/` - Configuration files installed as part of the Mono runtime.\n\n* `docs/` - Technical documents about the Mono runtime.\n\n* `external/` - Git submodules for external libraries (Newtonsoft.Json, ikvm, etc).\n\n* `ikvm-native/` - Glue code for ikvm.\n\n* `libgc/` - The (deprecated) Boehm GC implementation.\n\n* `llvm/` - Utility Makefiles for integrating the Mono LLVM fork.\n\n* `m4/` - General utility Makefiles.\n\n* `man/` - Manual pages for the various Mono commands and programs.\n\n* `mcs/` - The class libraries, compiler and tools\n\n  * `class/` - The class libraries (like System.*, Microsoft.Build, etc.)\n\n  * `mcs/` - The Mono C# compiler written in C#\n\n  * `tools/` - Tools like gacutil, ikdasm, mdoc, etc.\n\n* `mono/` - The core of the Mono Runtime.\n\n  * `arch/` - Architecture specific portions.\n\n  * `benchmark/` - A collection of benchmarks.\n\n  * `btls/` - Build files for the BTLS library which incorporates BoringSSL.\n\n  * `cil/` - Common Intermediate Representation, XML\ndefinition of the CIL bytecodes.\n\n  * `dis/` - CIL executable Disassembler.\n\n  * `eglib/` - Independent implementation of the glib API.\n\n  * `metadata/` - The object system and metadata reader.\n\n  * `mini/` - The Just in Time Compiler.\n\n  * `profiler/` - The profiler implementation.\n\n  * `sgen/` - The SGen Garbage Collector implementation.\n\n  * `tests/` - The main runtime tests.\n\n  * `unit-tests/` - Additional runtime unit tests.\n\n  * `utils/` - Utility functions used across the runtime codebase.\n\n* `msvc/` - Logic for the MSVC / Visual Studio based runtime and BCL build system.\nThe latter is experimental at the moment.\n\n* `packaging/` - Packaging logic for the OS X and Windows Mono packages.\n\n* `po/` - Translation files.\n\n* `runtime/` - A directory that contains the Makefiles that link the\nmono/ and mcs/ build systems.\n\n* `samples/` - Some simple sample programs on uses of the Mono\nruntime as an embedded library.\n\n* `scripts/` - Scripts used to invoke Mono and the corresponding program.\n\n* `support/` - Various support libraries.\n\n* `tools/` - A collection of tools, mostly used during Mono development.\n\nContributing to Mono\n====================\n\nBefore submitting changes to Mono, please review the [contribution\nguidelines](https://www.mono-project.com/community/contributing/).\nPlease pay particular attention to the [Important\nRules](https://www.mono-project.com/community/contributing/#important-rules)\nsection.\n\nReporting bugs\n==============\n\nTo submit bug reports, please [open an issue on the mono GitHub repo](https://github.com/mono/mono/issues/new).\n\nPlease use the search facility to ensure the same bug hasn't already\nbeen submitted and follow our\n[guidelines](https://www.mono-project.com/community/bugs/make-a-good-bug-report/)\non how to make a good bug report.\n\nConfiguration Options\n=====================\n\nThe following are the configuration options that someone building Mono\nmight want to use:\n\n* `--with-sgen=yes,no` - Generational GC support: Used to enable or\ndisable the compilation of a Mono runtime with the SGen garbage\ncollector.\n\n  * On platforms that support it, after building Mono, you will have\nboth a `mono-boehm` binary and a `mono-sgen` binary. `mono-boehm` uses Boehm,\nwhile `mono-sgen` uses the Simple Generational GC.\n\n* `--with-libgc=[included, none]` - Selects the default Boehm\ngarbage collector engine to use.\n\n  * *included*: (*slightly modified Boehm GC*) This is the default\nvalue for the Boehm GC, and it's the most feature complete, it will\nallow Mono to use typed allocations and support the debugger.\n\n  * *none*:\nDisables the inclusion of a Boehm garbage collector.\n\n  * This defaults to `included`.\n\n* `--enable-cooperative-suspend`\n\n  * If you pass this flag the Mono runtime is configured to only use\n  the cooperative mode of the garbage collector.  If you do not pass\n  this flag, then you can control at runtime the use of the\n  cooperative GC mode by setting the `MONO_ENABLE_COOP_SUSPEND` flag.\n  \n* `--with-tls=__thread,pthread`\n\n  * Controls how Mono should access thread local storage,\npthread forces Mono to use the pthread APIs, while\n__thread uses compiler-optimized access to it.\n\n  * Although __thread is faster, it requires support from\nthe compiler, kernel and libc. Old Linux systems do\nnot support with __thread.\n\n  * This value is typically pre-configured and there is no\nneed to set it, unless you are trying to debug a problem.\n\n* `--with-sigaltstack=yes,no`\n\n  * **Experimental**: Use at your own risk, it is known to\ncause problems with garbage collection and is hard to\nreproduce those bugs.\n\n  * This controls whether Mono will install a special\nsignal handler to handle stack overflows. If set to\n`yes`, it will turn stack overflows into the\nStackOverflowException. Otherwise when a stack\noverflow happens, your program will receive a\nsegmentation fault.\n\n  * The configure script will try to detect if your\noperating system supports this. Some older Linux\nsystems do not support this feature, or you might want\nto override the auto-detection.\n\n* `--with-static_mono=yes,no`\n\n  * This controls whether `mono` should link against a\nstatic library (libmono.a) or a shared library\n(libmono.so). \n\n  * This defaults to `yes`, and will improve the performance\nof the `mono` program. \n\n  * This only affects the `mono' binary, the shared\nlibrary libmono.so will always be produced for\ndevelopers that want to embed the runtime in their\napplication.\n\n* `--with-xen-opt=yes,no` - Optimize code for Xen virtualization.\n\n  * It makes Mono generate code which might be slightly\nslower on average systems, but the resulting executable will run\nfaster under the Xen virtualization system.\n\n  * This defaults to `yes`.\n\n* `--with-large-heap=yes,no` - Enable support for GC heaps larger than 3GB.\n\n  * This only applies only to the Boehm garbage collector, the SGen garbage\ncollector does not use this configuration option.\n\n  * This defaults to `no`.\n\n* `--enable-small-config=yes,no` - Enable some tweaks to reduce memory usage\nand disk footprint at the expense of some capabilities.\n\n  * Typically this means that the number of threads that can be created\nis limited (256), that the maximum heap size is also reduced (256 MB)\nand other such limitations that still make mono useful, but more suitable\nto embedded devices (like mobile phones).\n\n  * This defaults to `no`.\n\n* `--with-ikvm-native=yes,no` - Controls whether the IKVM JNI interface library is\nbuilt or not.\n\n  * This is used if you are planning on\nusing the IKVM Java Virtual machine with Mono.\n\n  * This defaults to `yes`.\n\n* `--with-profile4=yes,no` - Whether you want to build the 4.x profile libraries\nand runtime.\n\n  * This defaults to `yes`.\n\n* `--with-libgdiplus=installed,sibling,<path>` - Configure where Mono\nsearches for libgdiplus when running System.Drawing tests.\n\n  * It defaults to `installed`, which means that the\nlibrary is available to Mono through the regular\nsystem setup.\n\n  * `sibling` can be used to specify that a libgdiplus\nthat resides as a sibling of this directory (mono)\nshould be used.\n\n * Or you can specify a path to a libgdiplus.\n\n* `--enable-minimal=LIST`\n\n  * Use this feature to specify optional runtime\ncomponents that you might not want to include.  This\nis only useful for developers embedding Mono that\nrequire a subset of Mono functionality.\n  * The list is a comma-separated list of components that\nshould be removed, these are:\n\n    * `aot`:\nDisables support for the Ahead of Time compilation.\n\n    * `attach`:\nSupport for the Mono.Management assembly and the\nVMAttach API (allowing code to be injected into\na target VM)\n\n    * `com`:\nDisables COM support.\n\n    * `debug`:\nDrop debugging support.\n\n    * `decimal`:\nDisables support for System.Decimal.\n\n    * `full_messages`:\nBy default Mono comes with a full table\nof messages for error codes. This feature\nturns off uncommon error messages and reduces\nthe runtime size.\n\n    * `generics`:\nGenerics support.  Disabling this will not\nallow Mono to run any 2.0 libraries or\ncode that contains generics.\n\n    * `jit`:\nRemoves the JIT engine from the build, this reduces\nthe executable size, and requires that all code\nexecuted by the virtual machine be compiled with\nFull AOT before execution.\n\n    * `large_code`:\nDisables support for large assemblies.\n\n    * `logging`:\nDisables support for debug logging.\n\n    * `pinvoke`:\nSupport for Platform Invocation services,\ndisabling this will drop support for any\nlibraries using DllImport.\n\n    * `portability`:\nRemoves support for MONO_IOMAP, the environment\nvariables for simplifying porting applications that \nare case-insensitive and that mix the Unix and Windows path separators.\n\n    * `profiler`:\nDisables support for the default profiler.\n\n    * `reflection_emit`:\nDrop System.Reflection.Emit support\n\n    * `reflection_emit_save`:\nDrop support for saving dynamically created\nassemblies (AssemblyBuilderAccess.Save) in\nSystem.Reflection.Emit.\n\n    * `shadow_copy`:\nDisables support for AppDomain's shadow copies\n(you can disable this if you do not plan on \nusing appdomains).\n\n    * `simd`:\nDisables support for the Mono.SIMD intrinsics\nlibrary.\n\n    * `ssa`:\nDisables compilation for the SSA optimization\nframework, and the various SSA-based optimizations.\n\n* `--enable-llvm`\n\n  * This enables the use of LLVM as a code generation engine\nfor Mono.  The LLVM code generator and optimizer will be \nused instead of Mono's built-in code generator for both\nJust in Time and Ahead of Time compilations.\n\n  * See https://www.mono-project.com/docs/advanced/mono-llvm/ for the \nfull details and up-to-date information on this feature.\n\n  * You will need to have an LLVM built that Mono can link\nagainst.\n\n* `--enable-big-arrays` - Enable use of arrays with indexes larger\nthan Int32.MaxValue.\n\n  * By default Mono has the same limitation as .NET on\nWin32 and Win64 and limits array indexes to 32-bit\nvalues (even on 64-bit systems).\n\n  * In certain scenarios where large arrays are required,\nyou can pass this flag and Mono will be built to\nsupport 64-bit arrays.\n\n  * This is not the default as it breaks the C embedding\nABI that we have exposed through the Mono development\ncycle.\n\n* `--enable-parallel-mark`\n\n  * Use this option to enable the garbage collector to use\nmultiple CPUs to do its work.  This helps performance\non multi-CPU machines as the work is divided across CPUS.\n\n  * This option is not currently the default on OSX\nas it runs into issues there.\n\n  * This option only applies to the Boehm GC.\n\n* `--enable-dtrace`\n\n  * On Solaris and MacOS X builds a version of the Mono\nruntime that contains DTrace probes and can\nparticipate in the system profiling using DTrace.\n\n* `--disable-dev-random`\n\n  * Mono uses /dev/random to obtain good random data for\nany source that requires random numbers.   If your\nsystem does not support this, you might want to\ndisable it.\n\n  * There are a number of runtime options to control this\nalso, see the man page.\n\n* `--with-csc=roslyn,mcs,default`\n\n  * Use this option to configure which C# compiler to use.  By default\n    the configure script will pick Roslyn, except on platforms where\n    Roslyn does not work (Big Endian systems) where it will pick mcs.\n\n    If you specify \"mcs\", then Mono's C# compiler will be used.  This\n    also allows for a complete bootstrap of Mono's core compiler and\n    core libraries from source.\n\n \u00a0  If you specify \"roslyn\", then Roslyn's C# compiler will be used.\n    This currently uses Roslyn binaries.\n  \n* `--enable-nacl`\n\n  * This configures the Mono compiler to generate code\nsuitable to be used by Google's Native Client:\nhttps://code.google.com/p/nativeclient/\n\n  * Currently this is used with Mono's AOT engine as\nNative Client does not support JIT engines yet.\n\n* `--enable-wasm`\n\n  * Use this option to configure mono to run on WebAssembly. It will\n    set both host and target to the WebAssembly triplet. This overrides\n    the values passed to `--host` or `--target` and ignored what config.sub guesses.\n\n    This is a workaround to enable usage of old automake versions that don't\n    recognize the wasm triplet.\n\n\nWorking With Submodules\n=======================\n\nMono references several external git submodules, for example\na fork of Microsoft's reference source code that has been altered\nto be suitable for use with the Mono runtime.\n\nThis section describes how to use it.\n\nAn initial clone should be done recursively so all submodules will also be\ncloned in a single pass:\n\n\t$ git clone --recursive git@github.com:mono/mono\n\nOnce cloned, submodules can be updated to pull down the latest changes.\nThis can also be done after an initial non-recursive clone:\n\n\t$ git submodule update --init --recursive\n\nTo pull external changes into a submodule:\n\n\t$ cd <submodule>\n\t$ git pull origin <branch>\n\t$ cd <top-level>\n\t$ git add <submodule>\n\t$ git commit\n\nBy default, submodules are detached because they point to a specific commit.\nUse `git checkout` to move back to a branch before making changes:\n\n\t$ cd <submodule>\n\t$ git checkout <branch>\n\t# work as normal; the submodule is a normal repo\n\t$ git commit/push new changes to the repo (submodule)\n\n\t$ cd <top-level>\n\t$ git add <submodule> # this will record the new commits to the submodule\n\t$ git commit\n\nTo switch the repo of a submodule (this should not be a common or normal thing\nto do at all), first edit `.gitmodules` to point to the new location, then:\n\n\t$ git submodule sync -- <path of the submodule>\n\t$ git submodule update --recursive\n\t$ git checkout <desired new hash or branch>\n\nThe desired output diff is a change in `.gitmodules` to reflect the\nchange in the remote URL, and a change in /<submodule> where you see\nthe desired change in the commit hash.\n\nLicense\n=======\n\nSee the LICENSE file for licensing information, and the PATENTS.TXT\nfile for information about Microsoft's patent grant.\n\nMono Trademark Use Policy\n=========================\n\nThe use of trademarks and logos for Mono can be found [here](https://www.dotnetfoundation.org/legal/mono-tm). \n",
        "releases": []
    }
}