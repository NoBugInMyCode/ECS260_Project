{
    "https://api.github.com/repos/tomnomnom/gron": {
        "forks": 329,
        "watchers": 13958,
        "stars": 13958,
        "languages": {
            "Go": 60635,
            "Shell": 3221,
            "PHP": 2283
        },
        "commits": [
            "2024-11-29T23:37:14Z",
            "2022-04-13T14:23:37Z",
            "2022-04-13T13:57:28Z",
            "2020-11-07T01:17:42Z",
            "2020-11-06T21:11:17Z",
            "2020-11-06T16:51:02Z",
            "2019-04-03T15:27:56Z",
            "2019-04-03T15:26:48Z",
            "2019-04-03T15:24:26Z",
            "2018-12-06T23:04:39Z",
            "2018-12-06T22:58:42Z",
            "2018-10-25T21:30:18Z",
            "2018-10-20T10:03:13Z",
            "2018-10-02T12:10:02Z",
            "2018-10-01T19:01:31Z",
            "2018-08-24T18:06:26Z",
            "2018-07-05T10:22:56Z",
            "2018-07-05T10:17:29Z",
            "2018-07-05T10:11:16Z",
            "2018-05-26T10:17:41Z",
            "2018-04-12T14:01:44Z",
            "2018-04-10T11:55:06Z",
            "2018-04-10T11:34:49Z",
            "2018-05-01T12:13:11Z",
            "2018-04-25T17:57:16Z",
            "2018-04-19T09:27:12Z",
            "2018-04-19T09:22:09Z",
            "2018-04-19T09:21:56Z",
            "2018-04-10T07:33:07Z",
            "2018-04-09T10:08:19Z"
        ],
        "creation_date": "2012-09-08T00:46:07Z",
        "contributors": 16,
        "topics": [
            "cli",
            "json"
        ],
        "subscribers": 91,
        "readme": "# gron\n[![Build Status](https://travis-ci.org/tomnomnom/gron.svg?branch=master)](https://travis-ci.org/tomnomnom/gron)\n\nMake JSON greppable!\n\ngron transforms JSON into discrete assignments to make it easier to `grep` for what you want and see the absolute 'path' to it.\nIt eases the exploration of APIs that return large blobs of JSON but have terrible documentation.\n\n<pre>\n\u25b6 <b>gron</b> \"https://api.github.com/repos/tomnomnom/gron/commits?per_page=1\" | fgrep \"commit.author\"\njson[0].commit.author = {};\njson[0].commit.author.date = \"2016-07-02T10:51:21Z\";\njson[0].commit.author.email = \"mail@tomnomnom.com\";\njson[0].commit.author.name = \"Tom Hudson\";\n</pre>\n\ngron can work backwards too, enabling you to turn your filtered data back into JSON:\n<pre>\n\u25b6 gron \"https://api.github.com/repos/tomnomnom/gron/commits?per_page=1\" | fgrep \"commit.author\" | <b>gron --ungron</b>\n[\n  {\n    \"commit\": {\n      \"author\": {\n        \"date\": \"2016-07-02T10:51:21Z\",\n        \"email\": \"mail@tomnomnom.com\",\n        \"name\": \"Tom Hudson\"\n      }\n    }\n  }\n]\n</pre>\n\n> Disclaimer: the GitHub API has fantastic documentation, but it makes for a good example.\n\n## Installation\n\ngron has no runtime dependencies. You can just [download a binary for Linux, Mac, Windows or FreeBSD and run it](https://github.com/tomnomnom/gron/releases).\nPut the binary in your `$PATH` (e.g. in `/usr/local/bin`) to make it easy to use:\n```\n\u25b6 tar xzf gron-linux-amd64-0.1.5.tgz\n\u25b6 sudo mv gron /usr/local/bin/\n```\n\nIf you're a Mac user you can also [install gron via brew](http://braumeister.org/formula/gron):\n```\n\u25b6 brew install gron\n```\n\nOr if you're a Go user you can use `go install`:\n\n```\n\u25b6 go install github.com/tomnomnom/gron@latest\n```\n\nIt's recommended that you alias `ungron` or `norg` (or both!) to `gron --ungron`. Put something like this in your shell profile (e.g. in `~/.bashrc`):\n```\nalias norg=\"gron --ungron\"\nalias ungron=\"gron --ungron\"\n```\nOr you could create a shell script in your $PATH named `ungron` or `norg` to affect all users:\n```\ngron --ungron \"$@\"\n```\n\n## Usage\n\nGet JSON from a file:\n\n```\n\u25b6 gron testdata/two.json \njson = {};\njson.contact = {};\njson.contact.email = \"mail@tomnomnom.com\";\njson.contact.twitter = \"@TomNomNom\";\njson.github = \"https://github.com/tomnomnom/\";\njson.likes = [];\njson.likes[0] = \"code\";\njson.likes[1] = \"cheese\";\njson.likes[2] = \"meat\";\njson.name = \"Tom\";\n```\n\nFrom a URL:\n\n```\n\u25b6 gron http://headers.jsontest.com/\njson = {};\njson.Host = \"headers.jsontest.com\";\njson[\"User-Agent\"] = \"gron/0.1\";\njson[\"X-Cloud-Trace-Context\"] = \"6917a823919477919dbc1523584ba25d/11970839830843610056\";\n```\n\nOr from `stdin`:\n\n```\n\u25b6 curl -s http://headers.jsontest.com/ | gron\njson = {};\njson.Accept = \"*/*\";\njson.Host = \"headers.jsontest.com\";\njson[\"User-Agent\"] = \"curl/7.43.0\";\njson[\"X-Cloud-Trace-Context\"] = \"c70f7bf26661c67d0b9f2cde6f295319/13941186890243645147\";\n```\n\nGrep for something and easily see the path to it:\n\n```\n\u25b6 gron testdata/two.json | grep twitter\njson.contact.twitter = \"@TomNomNom\";\n```\n\ngron makes diffing JSON easy too:\n\n```\n\u25b6 diff <(gron two.json) <(gron two-b.json)\n3c3\n< json.contact.email = \"mail@tomnomnom.com\";\n---\n> json.contact.email = \"contact@tomnomnom.com\";\n```\n\nThe output of `gron` is valid JavaScript:\n\n```\n\u25b6 gron testdata/two.json > tmp.js\n\u25b6 echo \"console.log(json);\" >> tmp.js\n\u25b6 nodejs tmp.js\n{ contact: { email: 'mail@tomnomnom.com', twitter: '@TomNomNom' },\n  github: 'https://github.com/tomnomnom/',\n  likes: [ 'code', 'cheese', 'meat' ],\n  name: 'Tom' }\n```\n\nIt's also possible to obtain the `gron` output as JSON stream via\nthe `--json` switch:\n\n```\n\u25b6 curl -s http://headers.jsontest.com/ | gron --json\n[[],{}]\n[[\"Accept\"],\"*/*\"]\n[[\"Host\"],\"headers.jsontest.com\"]\n[[\"User-Agent\"],\"curl/7.43.0\"]\n[[\"X-Cloud-Trace-Context\"],\"c70f7bf26661c67d0b9f2cde6f295319/13941186890243645147\"]\n```\n\n## ungronning\ngron can also turn its output back into JSON:\n```\n\u25b6 gron testdata/two.json | gron -u\n{\n  \"contact\": {\n    \"email\": \"mail@tomnomnom.com\",\n    \"twitter\": \"@TomNomNom\"\n  },\n  \"github\": \"https://github.com/tomnomnom/\",\n  \"likes\": [\n    \"code\",\n    \"cheese\",\n    \"meat\"\n  ],\n  \"name\": \"Tom\"\n}\n```\n\nThis means you use can use gron with `grep` and other tools to modify JSON:\n```\n\u25b6 gron testdata/two.json | grep likes | gron --ungron\n{\n  \"likes\": [\n    \"code\",\n    \"cheese\",\n    \"meat\"\n  ]\n}\n```\n\nor\n\n\n```\n\u25b6 gron --json testdata/two.json | grep likes | gron  --json --ungron\n{\n  \"likes\": [\n    \"code\",\n    \"cheese\",\n    \"meat\"\n  ]\n}\n```\n\nTo preserve array keys, arrays are padded with `null` when values are missing:\n```\n\u25b6 gron testdata/two.json | grep likes | grep -v cheese\njson.likes = [];\njson.likes[0] = \"code\";\njson.likes[2] = \"meat\";\n\u25b6 gron testdata/two.json | grep likes | grep -v cheese | gron --ungron\n{\n  \"likes\": [\n    \"code\",\n    null,\n    \"meat\"\n  ]\n}\n```\n\nIf you get creative you can do [some pretty neat tricks with gron](ADVANCED.mkd), and\nthen ungron the output back into JSON.\n\n## Get Help\n\n```\n\u25b6 gron --help\nTransform JSON (from a file, URL, or stdin) into discrete assignments to make it greppable\n\nUsage:\n  gron [OPTIONS] [FILE|URL|-]\n\nOptions:\n  -u, --ungron     Reverse the operation (turn assignments back into JSON)\n  -v, --values     Print just the values of provided assignments\n  -c, --colorize   Colorize output (default on tty)\n  -m, --monochrome Monochrome (don't colorize output)\n  -s, --stream     Treat each line of input as a separate JSON object\n  -k, --insecure   Disable certificate validation\n  -j, --json       Represent gron data as JSON stream\n      --no-sort    Don't sort output (faster)\n      --version    Print version information\n\nExit Codes:\n  0\tOK\n  1\tFailed to open file\n  2\tFailed to read input\n  3\tFailed to form statements\n  4\tFailed to fetch URL\n  5\tFailed to parse statements\n  6\tFailed to encode JSON\n\nExamples:\n  gron /tmp/apiresponse.json\n  gron http://jsonplaceholder.typicode.com/users/1 \n  curl -s http://jsonplaceholder.typicode.com/users/1 | gron\n  gron http://jsonplaceholder.typicode.com/users/1 | grep company | gron --ungron\n```\n\n## FAQ\n### Wasn't this written in PHP before?\nYes it was! The original version is [preserved here for posterity](https://github.com/tomnomnom/gron/blob/master/original-gron.php).\n\n### Why the change to Go?\nMostly to remove PHP as a dependency. There's a lot of people who work with JSON who don't have PHP installed.\n\n### Why shouldn't I just use jq?\n[jq](https://stedolan.github.io/jq/) is *awesome*, and a lot more powerful than gron, but with that power comes\ncomplexity. gron aims to make it easier to use the tools you already know, like `grep` and `sed`.\n\ngron's primary purpose is to make it easy to find the path to a value in a deeply nested JSON blob\nwhen you don't already know the structure; much of jq's power is unlocked only once you know that structure.\n",
        "releases": [
            {
                "name": "v0.7.1",
                "date": "2022-04-13T14:09:29Z"
            },
            {
                "name": "gron v0.6.1",
                "date": "2021-01-26T13:31:18Z"
            },
            {
                "name": "gron v0.6.0",
                "date": "2018-07-05T10:17:40Z"
            },
            {
                "name": "gron v0.5.2",
                "date": "2018-04-04T10:15:18Z"
            },
            {
                "name": "gron v0.5.1",
                "date": "2018-01-02T00:04:48Z"
            },
            {
                "name": "gron v0.5.0",
                "date": "2017-02-22T20:53:14Z"
            },
            {
                "name": "gron v0.4.0",
                "date": "2017-01-31T20:17:49Z"
            },
            {
                "name": "gron v0.3.7",
                "date": "2016-09-16T15:59:56Z"
            },
            {
                "name": "gron v0.3.6",
                "date": "2016-09-09T20:31:38Z"
            },
            {
                "name": "gron v0.3.4",
                "date": "2016-09-07T20:40:50Z"
            },
            {
                "name": "gron v0.3.3",
                "date": "2016-09-03T14:51:07Z"
            },
            {
                "name": "gron v0.3.2",
                "date": "2016-08-30T22:09:56Z"
            },
            {
                "name": "gron v0.3.1",
                "date": "2016-08-16T08:07:47Z"
            },
            {
                "name": "gron v0.3.0",
                "date": "2016-08-15T23:42:35Z"
            },
            {
                "name": "gron v0.2.9",
                "date": "2016-08-03T18:52:24Z"
            },
            {
                "name": "gron v0.2.8",
                "date": "2016-08-03T10:23:29Z"
            },
            {
                "name": "gron v0.2.7",
                "date": "2016-08-02T20:26:07Z"
            },
            {
                "name": "gron v0.2.4",
                "date": "2016-07-04T19:13:08Z"
            },
            {
                "name": "gron v0.2.3",
                "date": "2016-07-03T00:07:40Z"
            },
            {
                "name": "gron v0.2.2",
                "date": "2016-07-02T23:28:04Z"
            },
            {
                "name": "gron v0.2.1",
                "date": "2016-07-02T23:07:53Z"
            },
            {
                "name": "gron v0.2.0",
                "date": "2016-06-30T22:52:40Z"
            },
            {
                "name": "gron v0.1.7",
                "date": "2016-06-24T14:23:43Z"
            },
            {
                "name": "gron v0.1.6",
                "date": "2016-06-18T23:52:49Z"
            },
            {
                "name": "gron v0.1.5",
                "date": "2016-06-06T23:36:20Z"
            },
            {
                "name": "gron v0.1.4",
                "date": "2016-06-06T23:28:25Z"
            },
            {
                "name": "gron v0.1.3",
                "date": "2016-06-06T23:15:40Z"
            },
            {
                "name": "gron v0.1.2",
                "date": "2016-06-06T22:33:39Z"
            },
            {
                "name": "gron v0.1.1",
                "date": "2016-06-05T20:47:33Z"
            },
            {
                "name": "gron v0.1.0",
                "date": "2016-06-04T22:01:58Z"
            }
        ]
    }
}