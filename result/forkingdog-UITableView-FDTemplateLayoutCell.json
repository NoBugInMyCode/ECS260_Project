{
    "https://api.github.com/repos/forkingdog/UITableView-FDTemplateLayoutCell": {
        "forks": 2006,
        "watchers": 9927,
        "stars": 9927,
        "languages": {
            "Objective-C": 43970,
            "Ruby": 2120
        },
        "commits": [
            "2017-11-19T03:08:53Z",
            "2017-11-19T03:01:16Z",
            "2017-05-15T10:26:21Z",
            "2017-05-10T06:23:45Z",
            "2017-05-09T17:46:55Z",
            "2017-05-09T07:13:32Z",
            "2017-05-03T12:44:28Z",
            "2017-05-03T12:42:09Z",
            "2017-04-27T07:02:23Z",
            "2017-04-23T04:58:38Z",
            "2017-04-23T02:53:32Z",
            "2017-04-22T14:13:20Z",
            "2016-03-16T06:04:12Z",
            "2016-03-16T03:43:39Z",
            "2016-03-16T03:43:13Z",
            "2016-03-16T03:35:34Z",
            "2016-01-09T02:33:12Z",
            "2016-01-05T04:22:51Z",
            "2016-01-05T04:20:15Z",
            "2016-01-04T10:56:19Z",
            "2016-01-04T10:55:26Z",
            "2016-01-04T10:55:20Z",
            "2016-01-04T10:49:13Z",
            "2016-01-04T10:46:57Z",
            "2016-01-04T10:45:53Z",
            "2016-01-04T10:35:59Z",
            "2015-10-10T02:56:14Z",
            "2015-10-01T04:28:27Z",
            "2015-09-23T23:57:41Z",
            "2015-09-23T03:35:41Z"
        ],
        "creation_date": "2015-04-16T13:14:19Z",
        "contributors": 5,
        "topics": [],
        "subscribers": 331,
        "readme": "# UITableView-FDTemplateLayoutCell\n<img src=\"https://cloud.githubusercontent.com/assets/219689/7244961/4209de32-e816-11e4-87bc-b161c442d348.png\" width=\"640\">\n\n## Overview\nTemplate auto layout cell for **automatically** UITableViewCell height calculating.\n\n![Demo Overview](https://github.com/forkingdog/UITableView-FDTemplateLayoutCell/blob/master/Sceenshots/screenshot2.gif)\n\n## Basic usage\n\nIf you have a **self-satisfied** cell, then all you have to do is: \n\n``` objc\n#import \"UITableView+FDTemplateLayoutCell.h\"\n\n- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    return [tableView fd_heightForCellWithIdentifier:@\"reuse identifer\" configuration:^(id cell) {\n        // Configure this cell with data, same as what you've done in \"-tableView:cellForRowAtIndexPath:\"\n        // Like:\n        //    cell.entity = self.feedEntities[indexPath.row];\n    }];\n}\n```\n\n## Height Caching API\n\nSince iOS8, `-tableView:heightForRowAtIndexPath:` will be called more times than we expect, we can feel these extra calculations when scrolling. So we provide another API with cache by index path:   \n\n``` objc\n- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {\n    return [tableView fd_heightForCellWithIdentifier:@\"identifer\" cacheByIndexPath:indexPath configuration:^(id cell) {\n        // configurations\n    }];\n}\n```\n\nOr, if your entity has an unique identifier, use cache by key API:\n\n``` objc\n- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {\n\tEntity *entity = self.entities[indexPath.row];\n    return [tableView fd_heightForCellWithIdentifier:@\"identifer\" cacheByKey:entity.uid configuration:^(id cell) {\n        // configurations\n    }];\n}\n```\n\n## Frame layout mode\n\n`FDTemplateLayoutCell` offers 2 modes for asking cell's height.  \n\n1. Auto layout mode using \"-systemLayoutSizeFittingSize:\"  \n2. Frame layout mode using \"-sizeThatFits:\"  \n\nGenerally, no need to care about modes, it will **automatically** choose a proper mode by whether you have set auto layout constrants on cell's content view. If you want to enforce frame layout mode, enable this property in your cell's configuration block:  \n\n``` objc\ncell.fd_enforceFrameLayout = YES;\n```\nAnd if you're using frame layout mode, you must override `-sizeThatFits:` in your customized cell and return content view's height (separator excluded)\n\n```\n- (CGSize)sizeThatFits:(CGSize)size {\n    return CGSizeMake(size.width, A+B+C+D+E+....);\n}\n```\n\n## Debug log\n\nDebug log helps to debug or inspect what is this \"FDTemplateLayoutCell\" extention doing, turning on to print logs when \"calculating\", \"precaching\" or \"hitting cache\".Default to \"NO\", log by \"NSLog\".\n\n``` objc\nself.tableView.fd_debugLogEnabled = YES;\n```\n\nIt will print like this:  \n\n``` objc\n** FDTemplateLayoutCell ** layout cell created - FDFeedCell\n** FDTemplateLayoutCell ** calculate - [0:0] 233.5\n** FDTemplateLayoutCell ** calculate - [0:1] 155.5\n** FDTemplateLayoutCell ** calculate - [0:2] 258\n** FDTemplateLayoutCell ** calculate - [0:3] 284\n** FDTemplateLayoutCell ** precached - [0:3] 284\n** FDTemplateLayoutCell ** calculate - [0:4] 278.5\n** FDTemplateLayoutCell ** precached - [0:4] 278.5\n** FDTemplateLayoutCell ** hit cache - [0:3] 284\n** FDTemplateLayoutCell ** hit cache - [0:4] 278.5\n** FDTemplateLayoutCell ** hit cache - [0:5] 156\n** FDTemplateLayoutCell ** hit cache - [0:6] 165\n```\n\n## About self-satisfied cell\n\na fully **self-satisfied** cell is constrainted by auto layout and each edge(\"top\", \"left\", \"bottom\", \"right\") has at least one layout constraint against it. It's the same concept introduced as \"self-sizing cell\" in iOS8 using auto layout.\n\nA bad one :( - missing right and bottom\n![non-self-satisfied](https://github.com/forkingdog/UITableView-FDTemplateLayoutCell/blob/master/Sceenshots/screenshot0.png)   \n\nA good one :)  \n![self-satisfied](https://github.com/forkingdog/UITableView-FDTemplateLayoutCell/blob/master/Sceenshots/screenshot1.png)   \n\n## Notes\n\nA template layout cell is created by `-dequeueReusableCellWithIdentifier:` method, it means that you MUST have registered this cell reuse identifier by one of:  \n\n- A prototype cell of UITableView in storyboard.\n- Use `-registerNib:forCellReuseIdentifier:` \n- Use `-registerClass:forCellReuseIdentifier:`\n\n## \u5982\u679c\u4f60\u5728\u5929\u671d\n\u53ef\u4ee5\u770b\u8fd9\u7bc7\u4e2d\u6587\u535a\u5ba2\uff1a \n[http://blog.sunnyxx.com/2015/05/17/cell-height-calculation/](http://blog.sunnyxx.com/2015/05/17/cell-height-calculation/)\n\n## Installation\n\nLatest version: **1.6**\n\n```\npod search UITableView+FDTemplateLayoutCell \n```\nIf you cannot search out the latest version, try:  \n\n```\npod setup\n```\n\n## Release Notes\n\nWe recommend to use the latest release in cocoapods.\n\n- 1.6\nfix bug in iOS 10\n\n- 1.4  \nRefactor, add \"cacheByKey\" mode, bug fixed\n\n- 1.3  \nFrame layout mode, handle cell's accessory view/type\n\n- 1.2  \nPrecache and auto cache invalidation\n\n- 1.1  \nHeight cache\n\n- 1.0  \nBasic automatically height calculation\n\n## License\nMIT\n\n\n",
        "releases": []
    }
}