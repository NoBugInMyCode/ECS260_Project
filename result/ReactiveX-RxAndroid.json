{
    "https://api.github.com/repos/ReactiveX/RxAndroid": {
        "forks": 2947,
        "watchers": 19872,
        "stars": 19872,
        "languages": {
            "Java": 63703
        },
        "commits": [
            "2024-08-07T18:30:26Z",
            "2024-04-15T16:35:28Z",
            "2024-02-07T13:30:18Z",
            "2024-02-02T05:46:48Z",
            "2024-02-02T05:33:20Z",
            "2023-11-30T05:40:24Z",
            "2023-11-30T05:25:07Z",
            "2023-09-05T10:55:00Z",
            "2023-09-05T05:54:28Z",
            "2023-07-24T11:12:24Z",
            "2023-07-24T05:26:11Z",
            "2023-02-20T12:33:45Z",
            "2023-02-20T06:13:23Z",
            "2022-11-09T20:03:55Z",
            "2022-11-09T20:03:10Z",
            "2022-11-09T19:33:50Z",
            "2022-11-09T19:28:55Z",
            "2022-11-09T19:25:57Z",
            "2022-11-09T18:52:17Z",
            "2022-11-09T03:50:16Z",
            "2022-11-09T03:39:01Z",
            "2022-11-09T03:37:39Z",
            "2022-11-09T03:37:08Z",
            "2022-11-09T03:12:51Z",
            "2022-11-09T03:12:32Z",
            "2022-11-09T03:01:46Z",
            "2022-11-09T03:01:35Z",
            "2022-11-09T03:01:07Z",
            "2022-11-09T02:57:01Z",
            "2022-11-09T02:56:19Z"
        ],
        "creation_date": "2014-08-19T03:46:38Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 989,
        "readme": "# RxAndroid: Reactive Extensions for Android\n\nAndroid specific bindings for [RxJava 3](http://github.com/ReactiveX/RxJava).\n\nThis module adds the minimum classes to RxJava that make writing reactive components in Android\napplications easy and hassle-free. More specifically, it provides a `Scheduler` that schedules on\nthe main thread or any given `Looper`.\n\n\n## Communication\n\nSince RxAndroid is part of the RxJava family the communication channels are similar:\n\n- Google Group: [RxJava][list]\n- Twitter: [@RxJava][twitter]\n- StackOverflow: [rx-android][so]\n- [GitHub Issues][issues]\n\n\n# Binaries\n\n```groovy\ndependencies {\n    implementation 'io.reactivex.rxjava3:rxandroid:3.0.2'\n    // Because RxAndroid releases are few and far between, it is recommended you also\n    // explicitly depend on RxJava's latest version for bug fixes and new features.\n    // (see https://github.com/ReactiveX/RxJava/releases for latest 3.x.x version)\n    implementation 'io.reactivex.rxjava3:rxjava:3.1.5'\n}\n```\n\n* RxAndroid: <a href='http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.reactivex.rxjava3%22%20a%3A%22rxandroid%22'><img src='http://img.shields.io/maven-central/v/io.reactivex.rxjava3/rxandroid.svg'></a>\n* RxJava: <a href='http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.reactivex.rxjava3%22%20a%3A%22rxjava%22'><img src='http://img.shields.io/maven-central/v/io.reactivex.rxjava3/rxjava.svg'></a>\n\nAdditional binaries and dependency information for can be found at [search.maven.org](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.reactivex.rxjava3%22%20a%3A%22rxandroid%22).\n\n<details>\n<summary>Snapshots of the development version are available in Sonatype's snapshots repository.</summary>\n<p>\n\n```groovy\nrepositories {\n    mavenCentral()\n    maven {\n        url 'https://oss.sonatype.org/content/repositories/snapshots/'\n    }\n}\n\ndependencies {\n    implementation 'io.reactivex.rxjava3:rxandroid:3.1.0-SNAPSHOT'\n}\n```\n\n</p>\n</details>\n\n\n## Build\n\nTo build:\n\n```bash\n$ git clone git@github.com:ReactiveX/RxAndroid.git\n$ cd RxAndroid/\n$ ./gradlew build\n```\n\nFurther details on building can be found on the RxJava [Getting Started][start] page of the wiki.\n\n# Sample usage\n\nA sample project which provides runnable code examples that demonstrate uses of the classes in this\nproject is available in the `sample-app/` folder.\n\n## Observing on the main thread\n\nOne of the most common operations when dealing with asynchronous tasks on Android is to observe the task's\nresult or outcome on the main thread. Using vanilla Android, this would typically be accomplished with an\n`AsyncTask`. With RxJava instead you would declare your `Observable` to be observed on the main thread:\n\n```java\nObservable.just(\"one\", \"two\", \"three\", \"four\", \"five\")\n    .subscribeOn(Schedulers.newThread())\n    .observeOn(AndroidSchedulers.mainThread())\n    .subscribe(/* an Observer */);\n```\n\nThis will execute the `Observable` on a new thread, and emit results through `onNext` on the main thread.\n\n## Observing on arbitrary loopers\n\nThe previous sample is merely a specialization of a more general concept: binding asynchronous\ncommunication to an Android message loop, or `Looper`. In order to observe an `Observable` on an arbitrary\n`Looper`, create an associated `Scheduler` by calling `AndroidSchedulers.from`:\n\n```java\nLooper backgroundLooper = // ...\nObservable.just(\"one\", \"two\", \"three\", \"four\", \"five\")\n    .observeOn(AndroidSchedulers.from(backgroundLooper))\n    .subscribe(/* an Observer */)\n```\n\nThis will execute the Observable on a new thread and emit results through `onNext` on whatever thread is\nrunning `backgroundLooper`.\n\n\n## Bugs and Feedback\n\nFor bugs, feature requests, and discussion please use [GitHub Issues][issues].\nFor general usage questions please use the [mailing list][list] or [StackOverflow][so].\n\n\n## LICENSE\n\n    Copyright 2015 The RxAndroid authors\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\n\n [list]: http://groups.google.com/d/forum/rxjava\n [so]: http://stackoverflow.com/questions/tagged/rx-android\n [twitter]: http://twitter.com/RxJava\n [issues]: https://github.com/ReactiveX/RxAndroid/issues\n [start]: https://github.com/ReactiveX/RxJava/wiki/Getting-Started\n",
        "releases": [
            {
                "name": "",
                "date": "2022-11-09T20:28:32Z"
            },
            {
                "name": "",
                "date": "2022-11-09T03:48:10Z"
            },
            {
                "name": "",
                "date": "2020-02-14T15:38:26Z"
            },
            {
                "name": "",
                "date": "2019-02-15T19:29:51Z"
            },
            {
                "name": "",
                "date": "2018-08-16T14:33:27Z"
            },
            {
                "name": "2.0.2",
                "date": "2018-02-12T21:19:29Z"
            },
            {
                "name": "",
                "date": "2016-11-12T17:27:15Z"
            },
            {
                "name": "",
                "date": "2016-10-29T12:25:35Z"
            },
            {
                "name": "",
                "date": "2016-08-25T16:01:51Z"
            },
            {
                "name": "",
                "date": "2016-08-25T13:21:15Z"
            },
            {
                "name": "",
                "date": "2016-05-04T21:57:22Z"
            },
            {
                "name": "",
                "date": "2015-12-09T20:24:04Z"
            },
            {
                "name": "1.0.1",
                "date": "2015-08-10T00:42:25Z"
            },
            {
                "name": "1.0.0",
                "date": "2015-08-05T19:39:54Z"
            },
            {
                "name": "0.25.0",
                "date": "2015-06-29T16:18:17Z"
            },
            {
                "name": "0.24.0",
                "date": "2015-06-29T16:17:57Z"
            },
            {
                "name": "0.23.0",
                "date": "2014-12-03T10:04:33Z"
            },
            {
                "name": "0.22.0",
                "date": "2014-10-16T14:17:57Z"
            },
            {
                "name": "0.21.0",
                "date": "2014-10-01T06:39:08Z"
            },
            {
                "name": "0.20.4",
                "date": "2014-10-01T06:37:54Z"
            }
        ]
    }
}