{
    "https://api.github.com/repos/wbthomason/packer.nvim": {
        "forks": 264,
        "watchers": 7963,
        "stars": 7963,
        "languages": {
            "Lua": 198876,
            "Dockerfile": 710,
            "Makefile": 328,
            "Vim Script": 64
        },
        "commits": [
            "2023-08-24T19:05:42Z",
            "2023-08-24T18:50:17Z",
            "2023-08-18T10:09:26Z",
            "2023-04-28T22:20:16Z",
            "2023-06-10T03:25:31Z",
            "2023-06-10T03:19:35Z",
            "2023-06-23T23:11:26Z",
            "2022-10-19T15:31:10Z",
            "2023-01-11T23:52:42Z",
            "2023-01-11T06:27:40Z",
            "2023-01-11T01:22:45Z",
            "2023-01-11T01:19:06Z",
            "2022-12-18T01:39:59Z",
            "2022-12-07T01:45:27Z",
            "2022-12-06T20:05:29Z",
            "2022-12-05T05:13:13Z",
            "2022-12-05T04:44:03Z",
            "2022-12-05T04:24:18Z",
            "2022-12-05T01:58:21Z",
            "2022-12-04T06:37:24Z",
            "2022-12-03T10:54:11Z",
            "2022-11-29T05:07:48Z",
            "2022-11-28T14:24:11Z",
            "2022-11-28T14:20:24Z",
            "2022-10-02T14:07:19Z",
            "2022-11-24T18:40:39Z",
            "2022-11-28T14:04:47Z",
            "2022-10-21T18:22:25Z",
            "2022-09-10T09:13:35Z",
            "2022-09-06T08:02:29Z"
        ],
        "creation_date": "2017-11-19T06:36:02Z",
        "contributors": 30,
        "topics": [
            "lua",
            "neovim",
            "neovim-plugin",
            "nvim",
            "package-manager",
            "packer",
            "plugin-manager"
        ],
        "subscribers": 31,
        "readme": "**NOTICE:**\n\nThis repository is currently unmaintained. For the time being (as of August, 2023), it is recommended to use one of the following plugin managers instead:\n\n- [lazy.nvim](https://github.com/folke/lazy.nvim): Most stable and maintained plugin manager for Nvim.\n- [pckr.nvim](https://github.com/lewis6991/pckr.nvim): Spiritual successor of packer.nvim. Functional but not as stable as lazy.nvim.\n\n# packer.nvim\n\n[![Gitter](https://badges.gitter.im/packer-nvim/community.svg)](https://gitter.im/packer-nvim/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n[`use-package`](https://github.com/jwiegley/use-package) inspired plugin/package management for\nNeovim.\n\nHave questions? Start a [discussion](https://github.com/wbthomason/packer.nvim/discussions).\n\nHave a problem or idea? Make an [issue](https://github.com/wbthomason/packer.nvim/issues) or a [PR](https://github.com/wbthomason/packer.nvim/pulls).\n\n**Packer is built on native packages. You may wish to read `:h packages` before continuing**\n\n## Table of Contents\n1. [Features](#features)\n2. [Requirements](#requirements)\n3. [Quickstart](#quickstart)\n4. [Bootstrapping](#bootstrapping)\n5. [Usage](#usage)\n    1. [The startup function](#the-startup-function)\n    2. [Custom Initialization](#custom-initialization)\n    3. [Specifying Plugins](#specifying-plugins)\n    4. [Performing plugin management operations](#performing-plugin-management-operations)\n    5. [Extending packer](#extending-packer)\n    6. [Compiling Lazy-Loaders](#compiling-lazy-loaders)\n\t7. [User autocommands](#user-autocommands)\n\t8. [Using a floating window](#using-a-floating-window)\n6. [Profiling](#profiling)\n7. [Debugging](#debugging)\n8. [Compatibility and known issues](#compatibility-and-known-issues)\n9. [Contributors](#contributors)\n\n## Features\n- Declarative plugin specification\n- Support for dependencies\n- Support for Luarocks dependencies\n- Expressive configuration and lazy-loading options\n- Automatically compiles efficient lazy-loading code to improve startup time\n- Uses native packages\n- Extensible\n- Written in Lua, configured in Lua\n- Post-install/update hooks\n- Uses jobs for async installation\n- Support for `git` tags, branches, revisions, submodules\n- Support for local plugins\n\n## Requirements\n- You need to be running **Neovim v0.5.0+**\n- If you are on Windows 10, you need developer mode enabled in order to use local plugins (creating\n  symbolic links requires admin privileges on Windows - credit to @TimUntersberger for this note)\n\n## Quickstart\nTo get started, first clone this repository to somewhere on your `packpath`, e.g.:\n\n> Unix, Linux Installation\n\n```shell\ngit clone --depth 1 https://github.com/wbthomason/packer.nvim\\\n ~/.local/share/nvim/site/pack/packer/start/packer.nvim\n```\n\nIf you use Arch Linux, there is also [an AUR\npackage](https://aur.archlinux.org/packages/nvim-packer-git/).\n\n> Windows Powershell Installation\n\n```shell\ngit clone https://github.com/wbthomason/packer.nvim \"$env:LOCALAPPDATA\\nvim-data\\site\\pack\\packer\\start\\packer.nvim\"\n```\n\nThen you can write your plugin specification in Lua, e.g. (in `~/.config/nvim/lua/plugins.lua`):\n\n```lua\n-- This file can be loaded by calling `lua require('plugins')` from your init.vim\n\n-- Only required if you have packer configured as `opt`\nvim.cmd [[packadd packer.nvim]]\n\nreturn require('packer').startup(function(use)\n  -- Packer can manage itself\n  use 'wbthomason/packer.nvim'\n\n  -- Simple plugins can be specified as strings\n  use 'rstacruz/vim-closer'\n\n  -- Lazy loading:\n  -- Load on specific commands\n  use {'tpope/vim-dispatch', opt = true, cmd = {'Dispatch', 'Make', 'Focus', 'Start'}}\n\n  -- Load on an autocommand event\n  use {'andymass/vim-matchup', event = 'VimEnter'}\n\n  -- Load on a combination of conditions: specific filetypes or commands\n  -- Also run code after load (see the \"config\" key)\n  use {\n    'w0rp/ale',\n    ft = {'sh', 'zsh', 'bash', 'c', 'cpp', 'cmake', 'html', 'markdown', 'racket', 'vim', 'tex'},\n    cmd = 'ALEEnable',\n    config = 'vim.cmd[[ALEEnable]]'\n  }\n\n  -- Plugins can have dependencies on other plugins\n  use {\n    'haorenW1025/completion-nvim',\n    opt = true,\n    requires = {{'hrsh7th/vim-vsnip', opt = true}, {'hrsh7th/vim-vsnip-integ', opt = true}}\n  }\n\n  -- Plugins can also depend on rocks from luarocks.org:\n  use {\n    'my/supercoolplugin',\n    rocks = {'lpeg', {'lua-cjson', version = '2.1.0'}}\n  }\n\n  -- You can specify rocks in isolation\n  use_rocks 'penlight'\n  use_rocks {'lua-resty-http', 'lpeg'}\n\n  -- Local plugins can be included\n  use '~/projects/personal/hover.nvim'\n\n  -- Plugins can have post-install/update hooks\n  use {'iamcco/markdown-preview.nvim', run = 'cd app && yarn install', cmd = 'MarkdownPreview'}\n\n  -- Post-install/update hook with neovim command\n  use { 'nvim-treesitter/nvim-treesitter', run = ':TSUpdate' }\n\n  -- Post-install/update hook with call of vimscript function with argument\n  use { 'glacambre/firenvim', run = function() vim.fn['firenvim#install'](0) end }\n\n  -- Use specific branch, dependency and run lua file after load\n  use {\n    'glepnir/galaxyline.nvim', branch = 'main', config = function() require'statusline' end,\n    requires = {'kyazdani42/nvim-web-devicons'}\n  }\n\n  -- Use dependency and run lua function after load\n  use {\n    'lewis6991/gitsigns.nvim', requires = { 'nvim-lua/plenary.nvim' },\n    config = function() require('gitsigns').setup() end\n  }\n\n  -- You can specify multiple plugins in a single call\n  use {'tjdevries/colorbuddy.vim', {'nvim-treesitter/nvim-treesitter', opt = true}}\n\n  -- You can alias plugin names\n  use {'dracula/vim', as = 'dracula'}\nend)\n```\n\nNote that if you get linter complaints about `use` being an undefined global, these errors are\nspurious - `packer` injects `use` into the scope of the function passed to `startup`.\nIf these errors bother you, the easiest fix is to simply specify `use` as an argument to the\nfunction you pass to `startup`, e.g.\n```lua\npacker.startup(function(use)\n...your config...\nend)\n```\n\n`packer` provides the following commands after you've run and configured `packer` with `require('packer').startup(...)`:\n\n```\n-- You must run this or `PackerSync` whenever you make changes to your plugin configuration\n-- Regenerate compiled loader file\n:PackerCompile\n\n-- Remove any disabled or unused plugins\n:PackerClean\n\n-- Clean, then install missing plugins\n:PackerInstall\n\n-- Clean, then update and install plugins\n-- supports the `--preview` flag as an optional first argument to preview updates\n:PackerUpdate\n\n-- Perform `PackerUpdate` and then `PackerCompile`\n-- supports the `--preview` flag as an optional first argument to preview updates\n:PackerSync\n\n-- Show list of installed plugins\n:PackerStatus\n\n-- Loads opt plugin immediately\n:PackerLoad completion-nvim ale\n```\n\nYou can configure Neovim to automatically run `:PackerCompile` whenever `plugins.lua` is updated with\n[an autocommand](https://neovim.io/doc/user/autocmd.html#:autocmd):\n\n```\naugroup packer_user_config\n  autocmd!\n  autocmd BufWritePost plugins.lua source <afile> | PackerCompile\naugroup end\n```\n\nThis autocommand can be placed in your `init.vim`, or any other startup file as per your setup.\nPlacing this in `plugins.lua` could look like this:\n\n```lua\nvim.cmd([[\n  augroup packer_user_config\n    autocmd!\n    autocmd BufWritePost plugins.lua source <afile> | PackerCompile\n  augroup end\n]])\n```\n\n## Bootstrapping\n\nIf you want to automatically install and set up `packer.nvim` on any machine you clone your configuration to,\nadd the following snippet (which is due to @Iron-E and @khuedoan) somewhere in your config **before** your first usage of `packer`:\n\n```lua\nlocal ensure_packer = function()\n  local fn = vim.fn\n  local install_path = fn.stdpath('data')..'/site/pack/packer/start/packer.nvim'\n  if fn.empty(fn.glob(install_path)) > 0 then\n    fn.system({'git', 'clone', '--depth', '1', 'https://github.com/wbthomason/packer.nvim', install_path})\n    vim.cmd [[packadd packer.nvim]]\n    return true\n  end\n  return false\nend\n\nlocal packer_bootstrap = ensure_packer()\n\nreturn require('packer').startup(function(use)\n  use 'wbthomason/packer.nvim'\n  -- My plugins here\n  -- use 'foo1/bar1.nvim'\n  -- use 'foo2/bar2.nvim'\n\n  -- Automatically set up your configuration after cloning packer.nvim\n  -- Put this at the end after all plugins\n  if packer_bootstrap then\n    require('packer').sync()\n  end\nend)\n```\n\nYou can also use the following command (with `packer` bootstrapped) to have `packer` setup your\nconfiguration (or simply run updates) and close once all operations are completed:\n\n```sh\n$ nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'\n```\n\n## Usage\n\nThe above snippets give some examples of `packer` features and use. Examples include:\n\n- My dotfiles:\n  - [Specification file](https://github.com/wbthomason/dotfiles/blob/linux/neovim/.config/nvim/lua/plugins.lua)\n  - [Loading file](https://github.com/wbthomason/dotfiles/blob/linux/neovim/.config/nvim/lua/plugins.lua)\n  - [Generated lazy-loader file](https://github.com/wbthomason/dotfiles/blob/linux/neovim/.config/nvim/plugin/packer_compiled.lua)\n- An example using the `startup` method: [tjdevries](https://github.com/tjdevries/config_manager/blob/master/xdg_config/nvim/lua/tj/plugins.lua)\n    - Using this method, you do not require a \"loading\" file. You can simply `lua require('plugins')` from your `init.vim`\n\nThe following is a more in-depth explanation of `packer`'s features and use.\n\n### The `startup` function\n`packer` provides `packer.startup(spec)`, which is used in the above examples.\n\n`startup` is a convenience function for simple setup and can be invoked as follows:\n- `spec` can be a function: `packer.startup(function() use 'tjdevries/colorbuddy.vim' end)`\n- `spec` can be a table with a function as its first element and config overrides as another element:\n  `packer.startup({function() use 'tjdevries/colorbuddy.vim' end, config = { ... }})`\n- `spec` can be a table with a table of plugin specifications as its first element, config overrides as another element, and optional rock specifications as another element:\n `packer.startup({{'tjdevries/colorbuddy.vim'}, config = { ... }, rocks = { ... }})`\n\n### Custom Initialization\nYou are not required to use `packer.startup` if you prefer a more manual setup with finer control\nover configuration and loading.\n\nTo take this approach, load `packer` like any other Lua module. You must call `packer.init()` before\nperforming any operations; it is recommended to call `packer.reset()` if you may be re-running your\nspecification code (e.g. by sourcing your plugin specification file with `luafile`).\n\nYou may pass a table of configuration values to `packer.init()` to customize its operation. The\ndefault configuration values (and structure of the configuration table) are:\n```lua\nlocal packer = require('packer')\npacker.util = require('packer.util')\n\npacker.init({\n  ensure_dependencies = true, -- Should packer install plugin dependencies?\n  snapshot = nil, -- Name of the snapshot you would like to load at startup\n  snapshot_path = packer.util.join_paths(vim.fn.stdpath('cache'), 'packer.nvim'), -- Default save directory for snapshots\n  package_root  = packer.util.join_paths(vim.fn.stdpath('data'), 'site', 'pack'),\n  compile_path  = packer.util.join_paths(vim.fn.stdpath('config'), 'plugin', 'packer_compiled.lua'),\n  plugin_package = 'packer', -- The default package for plugins\n  max_jobs = nil, -- Limit the number of simultaneous jobs. nil means no limit\n  auto_clean = true, -- During sync(), remove unused plugins\n  compile_on_sync = true, -- During sync(), run packer.compile()\n  disable_commands = false, -- Disable creating commands\n  opt_default = false, -- Default to using opt (as opposed to start) plugins\n  transitive_opt = true, -- Make dependencies of opt plugins also opt by default\n  transitive_disable = true, -- Automatically disable dependencies of disabled plugins\n  auto_reload_compiled = true, -- Automatically reload the compiled file after creating it.\n  preview_updates = false, -- If true, always preview updates before choosing which plugins to update, same as `PackerUpdate --preview`.\n  git = {\n    cmd = 'git', -- The base command for git operations\n    subcommands = { -- Format strings for git subcommands\n      update         = 'pull --ff-only --progress --rebase=false --force',\n      install        = 'clone --depth %i --no-single-branch --progress',\n      fetch          = 'fetch --depth 999999 --progress --force',\n      checkout       = 'checkout %s --',\n      update_branch  = 'merge --ff-only @{u}',\n      current_branch = 'branch --show-current',\n      diff           = 'log --color=never --pretty=format:FMT --no-show-signature HEAD@{1}...HEAD',\n      diff_fmt       = '%%h %%s (%%cr)',\n      get_rev        = 'rev-parse --short HEAD',\n      get_msg        = 'log --color=never --pretty=format:FMT --no-show-signature HEAD -n 1',\n      submodules     = 'submodule update --init --recursive --progress'\n    },\n    depth = 1, -- Git clone depth\n    clone_timeout = 60, -- Timeout, in seconds, for git clones\n    default_url_format = 'https://github.com/%s' -- Lua format string used for \"aaa/bbb\" style plugins\n  },\n  display = {\n    non_interactive = false, -- If true, disable display windows for all operations\n    compact = false, -- If true, fold updates results by default\n    open_fn  = nil, -- An optional function to open a window for packer's display\n    open_cmd = '65vnew \\\\[packer\\\\]', -- An optional command to open a window for packer's display\n    working_sym = '\u27f3', -- The symbol for a plugin being installed/updated\n    error_sym = '\u2717', -- The symbol for a plugin with an error in installation/updating\n    done_sym = '\u2713', -- The symbol for a plugin which has completed installation/updating\n    removed_sym = '-', -- The symbol for an unused plugin which was removed\n    moved_sym = '\u2192', -- The symbol for a plugin which was moved (e.g. from opt to start)\n    header_sym = '\u2501', -- The symbol for the header line in packer's display\n    show_all_info = true, -- Should packer show all update details automatically?\n    prompt_border = 'double', -- Border style of prompt popups.\n    keybindings = { -- Keybindings for the display window\n      quit = 'q',\n      toggle_update = 'u', -- only in preview\n      continue = 'c', -- only in preview\n      toggle_info = '<CR>',\n      diff = 'd',\n      prompt_revert = 'r',\n    }\n  },\n  luarocks = {\n    python_cmd = 'python' -- Set the python command to use for running hererocks\n  },\n  log = { level = 'warn' }, -- The default print log level. One of: \"trace\", \"debug\", \"info\", \"warn\", \"error\", \"fatal\".\n  profile = {\n    enable = false,\n    threshold = 1, -- integer in milliseconds, plugins which load faster than this won't be shown in profile output\n  },\n  autoremove = false, -- Remove disabled or unused plugins without prompting the user\n})\n```\n\n### Specifying plugins\n\n`packer` is based around declarative specification of plugins. You can declare a plugin using the\nfunction `packer.use`, which I highly recommend locally binding to `use` for conciseness.\n\n`use` takes either a string or a table. If a string is provided, it is treated as a plugin location\nfor a non-optional plugin with no additional configuration. Plugin locations may be specified as\n\n1. Absolute paths to a local plugin\n2. Full URLs (treated as plugins managed with `git`)\n3. `username/repo` paths (treated as Github `git` plugins)\n\nA table given to `use` can take two forms:\n\n1. A list of plugin specifications (strings or tables)\n2. A table specifying a single plugin. It must have a plugin location string as its first element,\n   and may additionally have a number of optional keyword elements, shown below:\n```lua\nuse {\n  'myusername/example',        -- The plugin location string\n  -- The following keys are all optional\n  disable = boolean,           -- Mark a plugin as inactive\n  as = string,                 -- Specifies an alias under which to install the plugin\n  installer = function,        -- Specifies custom installer. See \"custom installers\" below.\n  updater = function,          -- Specifies custom updater. See \"custom installers\" below.\n  after = string or list,      -- Specifies plugins to load before this plugin. See \"sequencing\" below\n  rtp = string,                -- Specifies a subdirectory of the plugin to add to runtimepath.\n  opt = boolean,               -- Manually marks a plugin as optional.\n  bufread = boolean,           -- Manually specifying if a plugin needs BufRead after being loaded\n  branch = string,             -- Specifies a git branch to use\n  tag = string,                -- Specifies a git tag to use. Supports '*' for \"latest tag\"\n  commit = string,             -- Specifies a git commit to use\n  lock = boolean,              -- Skip updating this plugin in updates/syncs. Still cleans.\n  run = string, function, or table, -- Post-update/install hook. See \"update/install hooks\".\n  requires = string or list,   -- Specifies plugin dependencies. See \"dependencies\".\n  rocks = string or list,      -- Specifies Luarocks dependencies for the plugin\n  config = string or function, -- Specifies code to run after this plugin is loaded.\n  -- The setup key implies opt = true\n  setup = string or function,  -- Specifies code to run before this plugin is loaded. The code is ran even if\n                               -- the plugin is waiting for other conditions (ft, cond...) to be met.\n  -- The following keys all imply lazy-loading and imply opt = true\n  cmd = string or list,        -- Specifies commands which load this plugin. Can be an autocmd pattern.\n  ft = string or list,         -- Specifies filetypes which load this plugin.\n  keys = string or list,       -- Specifies maps which load this plugin. See \"Keybindings\".\n  event = string or list,      -- Specifies autocommand events which load this plugin.\n  fn = string or list          -- Specifies functions which load this plugin.\n  cond = string, function, or list of strings/functions,   -- Specifies a conditional test to load this plugin\n  module = string or list      -- Specifies Lua module names for require. When requiring a string which starts\n                               -- with one of these module names, the plugin will be loaded.\n  module_pattern = string/list -- Specifies Lua pattern of Lua module names for require. When\n                               -- requiring a string which matches one of these patterns, the plugin will be loaded.\n}\n```\n\nFor the `cmd` option, the command may be a full command, or an autocommand pattern. If the command contains any\nnon-alphanumeric characters, it is assumed to be a pattern, and instead of creating a stub command, it creates\na CmdUndefined autocmd to load the plugin when a command that matches the pattern is invoked.\n\n#### Checking plugin statuses\nYou can check whether or not a particular plugin is installed with `packer` as well as if that plugin is loaded.\nTo do this you can check for the plugin's name in the `packer_plugins` global table.\nPlugins in this table are saved using only the last section of their names\ne.g. `tpope/vim-fugitive` if installed will be under the key `vim-fugitive`.\n\n```lua\nif packer_plugins[\"vim-fugitive\"] and packer_plugins[\"vim-fugitive\"].loaded then\nprint(\"Vim fugitive is loaded\")\n-- other custom logic\nend\n```\n**NOTE:** this table is only available *after* `packer_compiled.vim` is loaded so cannot be used till *after* plugins\nhave been loaded.\n\n#### Luarocks support\n\nYou may specify that a plugin requires one or more Luarocks packages using the `rocks` key. This key\ntakes either a string specifying the name of a package (e.g. `rocks=lpeg`), or a list specifying one or more packages.\nEntries in the list may either be strings, a list of strings or a table --- the latter case is used to specify arguments such as the\nparticular version of a package.\nall supported luarocks keys are allowed except: `tree` and `local`. Environment variables for the luarocks command can also be\nspecified using the `env` key which takes a table as the value as shown below.\n```lua\nrocks = {'lpeg', {'lua-cjson', version = '2.1.0'}}\nuse_rocks {'lua-cjson', 'lua-resty-http'}\nuse_rocks {'luaformatter', server = 'https://luarocks.org/dev'}\nuse_rocks {'openssl' env = {OPENSSL_DIR = \"/path/to/dir\"}}\n```\n\nCurrently, `packer` only supports equality constraints on package versions.\n\n`packer` also provides the function `packer.luarocks.install_commands()`, which creates the\n`PackerRocks <cmd> <packages...>` command. `<cmd>` must be one of \"install\" or \"remove\";\n`<packages...>` is one or more package names (currently, version restrictions are not supported with\nthis command). Running `PackerRocks` will install or remove the given packages. You can use this\ncommand even if you don't use `packer` to manage your plugins. However, please note that (1)\npackages installed through `PackerRocks` **will** be removed by calls to `packer.luarocks.clean()`\n(unless they are also part of a `packer` plugin specification), and (2) you will need to manually\ninvoke `packer.luarocks.setup_paths` (or otherwise modify your `package.path`) to ensure that Neovim\ncan find the installed packages.\n\nFinally, `packer` provides the function `packer.use_rocks`, which takes a string or table specifying\none or more Luarocks packages as in the `rocks` key. You can use this to ensure that `packer`\ndownloads and manages some rocks which you want to use, but which are not associated with any\nparticular plugin.\n\n#### Custom installers\n\nYou may specify a custom installer & updater for a plugin using the `installer` and `updater` keys.\nNote that either both or none of these keys are required. These keys should be functions which take\nas an argument a `display` object (from `lua/packer/display.lua`) and return an async function (per\n`lua/packer/async.lua`) which (respectively) installs/updates the given plugin.\n\nProviding the `installer`/`updater` keys overrides plugin type detection, but you still need to\nprovide a location string for the name of the plugin.\n\n#### Update/install hooks\n\nYou may specify operations to be run after successful installs/updates of a plugin with the `run`\nkey. This key may either be a Lua function, which will be called with the `plugin` table for this\nplugin (containing the information passed to `use` as well as output from the installation/update\ncommands, the installation path of the plugin, etc.), a string, or a table of functions and strings.\n\nIf an element of `run` is a string, then either:\n\n1. If the first character of `run` is \":\", it is treated as a Neovim command and executed.\n2. Otherwise, `run` is treated as a shell command and run in the installation directory of the\n   plugin via `$SHELL -c '<run>'`.\n\n#### Dependencies\n\nPlugins may specify dependencies via the `requires` key. This key can be a string or a list (table).\n\nIf `requires` is a string, it is treated as specifying a single plugin. If a plugin with the name\ngiven in `requires` is already known in the managed set, nothing happens. Otherwise, the string is\ntreated as a plugin location string and the corresponding plugin is added to the managed set.\n\nIf `requires` is a list, it is treated as a list of plugin specifications following the format given\nabove.\n\nIf `ensure_dependencies` is true, the plugins specified in `requires` will be installed.\n\nPlugins specified in `requires` are removed when no active plugins require them.\n\n#### Sequencing\n\nYou may specify a loading order for plugins using the `after` key. This key can be a string or a\nlist (table).\n\nIf `after` is a string, it must be the name of another plugin managed by `packer` (e.g. the final segment of a plugin's path - for a Github plugin `FooBar/Baz`, the name would be just `Baz`). If `after` is a table, it must be a list of plugin names. If a plugin has an alias (i.e. uses the `as` key), this alias is its name.\n\nThe set of plugins specified in a plugin's `after` key must **all** be loaded before the plugin\nusing `after` will be loaded. For example, in the specification\n```lua\n  use {'FooBar/Baz', ft = 'bax'}\n  use {'Something/Else', after = 'Baz'}\n```\nthe plugin `Else` will only be loaded after the plugin `Baz`, which itself is only loaded for files\nwith `bax` filetype.\n\n#### Keybindings\n\nPlugins may be lazy-loaded on the use of keybindings/maps. Individual keybindings are specified either as a string (in which case they are treated as normal mode maps) or a table in the format `{mode, map}`.\n\n### Performing plugin management operations\n`packer` exposes the following functions for common plugin management operations. In all of the\nbelow, `plugins` is an optional table of plugin names; if not provided, the default is \"all managed\nplugins\":\n\n- `packer.install(plugins)`: Install the specified plugins if they are not already installed\n- `packer.update(plugins)`: Update the specified plugins, installing any that are missing\n- `packer.update(opts, plugins)`: First argument can be a table specifying options, such as `{preview_updates = true}` to preview potential changes before updating (same as `PackerUpdate --preview`).\n- `packer.clean()`: Remove any disabled or no longer managed plugins\n- `packer.sync(plugins)`: Perform a `clean` followed by an `update`.\n- `packer.sync(opts, plugins)`: Can take same optional options as `update`.\n- `packer.compile(path)`: Compile lazy-loader code and save to `path`.\n- `packer.snapshot(snapshot_name, ...)`: Creates a snapshot file that will live under `config.snapshot_path/<snapshot_name>`. If `snapshot_name` is an absolute path, then that will be the location where the snapshot will be taken. Optionally, a list of plugins name can be provided to selectively choose the plugins to snapshot.\n- `packer.rollback(snapshot_name, ...)`: Rollback plugins status a snapshot file that will live under `config.snapshot_path/<snapshot_name>`. If `snapshot_name` is an absolute path, then that will be the location where the snapshot will be taken. Optionally, a list of plugins name can be provided to selectively choose which plugins to revert.\n- `packer.delete(snapshot_name)`: Deletes a snapshot file under `config.snapshot_path/<snapshot_name>`. If `snapshot_name` is an absolute path, then that will be the location where the snapshot will be deleted.\n\n### Extending `packer`\nYou can add custom key handlers to `packer` by calling `packer.set_handler(name, func)` where `name`\nis the key you wish to handle and `func` is a function with the signature `func(plugins, plugin,\nvalue)` where `plugins` is the global table of managed plugins, `plugin` is the table for a specific\nplugin, and `value` is the value associated with key `name` in `plugin`.\n\n### Compiling Lazy-Loaders\nTo optimize startup time, `packer.nvim` compiles code to perform the lazy-loading operations you\nspecify. This means that you do not need to load `packer.nvim` unless you want to perform some\nplugin management operations.\n\nTo generate the compiled code, call `packer.compile(path)`, where `path` is some file path on your\n`runtimepath`, with a `.vim` extension. This will generate a blend of Lua and Vimscript to load and\nconfigure all your lazy-loaded plugins (e.g. generating commands, autocommands, etc.) and save it to\n`path`. Then, when you start vim, the file at `path` is loaded (because `path` must be on your\n`runtimepath`), and lazy-loading works.\n\nIf `path` is not provided to `packer.compile`, the output file will default to the value of\n`config.compile_path`.\n\nThe option `compile_on_sync`, which defaults to `true`, will run `packer.compile()` during\n`packer.sync()`, if set to `true`. Note that otherwise, you **must** run `packer.compile` yourself\nto generate the lazy-loader file!\n\n**NOTE:** If you use a function value for `config` or `setup` keys in any plugin specifications, it\n**must not** have any upvalues (i.e. captures). We currently use Lua's `string.dump` to compile\nconfig/setup functions to bytecode, which has this limitation.\nAdditionally, if functions are given for these keys, the functions will be passed the plugin\nname and information table as arguments.\n\n### User autocommands\n`packer` runs most of its operations asyncronously. If you would like to implement automations that\nrequire knowing when the operations are complete, you can use the following `User` autocmds (see\n`:help User` for more info on how to use):\n\n- `PackerComplete`: Fires after install, update, clean, and sync asynchronous operations finish.\n- `PackerCompileDone`: Fires after compiling (see [the section on compilation](#compiling-lazy-loaders))\n\n### Using a floating window\nYou can configure Packer to use a floating window for command outputs by passing a utility\nfunction to `packer`'s config:\n```lua\npacker.startup({function()\n  -- Your plugins here\nend,\nconfig = {\n  display = {\n    open_fn = require('packer.util').float,\n  }\n}})\n```\n\nBy default, this floating window will show doubled borders. If you want to customize the window\nappearance, you can pass a configuration to `float`, which is the same configuration that would be\npassed to `nvim_open_win`:\n```lua\npacker.startup({function()\n  -- Your plugins here\nend,\nconfig = {\n  display = {\n    open_fn = function()\n      return require('packer.util').float({ border = 'single' })\n    end\n  }\n}})\n```\n\n## Profiling\nPacker has built in functionality that can allow you to profile the time taken loading your plugins.\nIn order to use this functionality you must either enable profiling in your config, or pass in an argument\nwhen running packer compile.\n\n#### Setup via config\n```lua\nconfig = {\n  profile = {\n    enable = true,\n    threshold = 1 -- the amount in ms that a plugin's load time must be over for it to be included in the profile\n  }\n}\n```\n\n#### Using the packer compile command\n```vim\n:PackerCompile profile=true\n\" or\n:PackerCompile profile=false\n```\n\n#### Profiling usage\nThis will rebuild your `packer_compiled.vim` with profiling code included. In order to visualise the output of the profile\nrestart your neovim and run `PackerProfile`. This will open a window with the output of your profiling.\n\n## Debugging\n`packer.nvim` logs to `stdpath(cache)/packer.nvim.log`. Looking at this file is usually a good start\nif something isn't working as expected.\n\n## Compatibility and known issues\n\n- **2021-07-31:** If you're on macOS, note that building Neovim with the version of `luv` from `homebrew` [will cause any `packer` command to crash](https://github.com/wbthomason/packer.nvim/issues/496#issuecomment-890371022). More about this issue at [neovim/neovim#15054](https://github.com/neovim/neovim/issues/15054).\n- **2021-07-28:** `packer` will now highlight commits/plugin names with potentially breaking changes\n  (determined by looking for `breaking change` or `breaking_change`, case insensitive, in the update\n  commit bodies and headers) as `WarningMsg` in the status window.\n- **2021-06-06**: Your Neovim must include https://github.com/neovim/neovim/pull/14659; `packer` uses the `noautocmd` key.\n- **2021-04-19**: `packer` now provides built-in profiling for your config via the `packer_compiled`\n  file. Take a look at [the docs](#profiling) for more information!\n- **2021-02-18**: Having trouble with Luarocks on macOS? See [this issue](https://github.com/wbthomason/packer.nvim/issues/180).\n- **2021-01-19**: Basic Luarocks support has landed! Use the `rocks` key with a string or table to specify packages to install.\n- **2020-12-10**: The `disable_commands` configuration flag now affects non-`startup` use as well. This means that, by default, `packer` will create commands for basic operations for you.\n- **2020-11-13**: There is now a default implementation for a floating window `open_fn` in `packer.util`.\n- **2020-09-04:** Due to changes to the Neovim `extmark` api (see: https://github.com/neovim/neovim/commit/3853276d9cacc99a2698117e904475dbf7033383), users will need to update to a version of Neovim **after** the aforementioned PR was merged. There are currently shims around the changed functions which should maintain support for earlier versions of Neovim, but these are intended to be temporary and will be removed by **2020-10-04**. Therefore Packer will not work with Neovim v0.4.4, which was released before the `extmark` change.\n\n## Contributors\nMany thanks to those who have contributed to the project! PRs and issues are always welcome. This\nlist is infrequently updated; please feel free to bug me if you're not listed here and you would\nlike to be.\n\n- [@akinsho](https://github.com/akinsho)\n- [@nanotee](https://github.com/nanotee)\n- [@weilbith](https://github.com/weilbith)\n- [@Iron-E](https://github.com/Iron-E)\n- [@tjdevries](https://github.com/tjdevries)\n- [@numToStr](https://github.com/numToStr)\n- [@fsouza](https://github.com/fsouza)\n- [@gbrlsnchs](https://github.com/gbrlsnchs)\n- [@lewis6991](https://github.com/lewis6991)\n- [@TimUntersberger](https://github.com/TimUntersberger)\n- [@bfredl](https://github.com/bfredl)\n- [@sunjon](https://github.com/sunjon)\n- [@gwerbin](https://github.com/gwerbin)\n- [@shadmansaleh](https://github.com/shadmansaleh)\n- [@ur4ltz](https://github.com/ur4ltz)\n- [@EdenEast](https://github.com/EdenEast)\n- [@khuedoan](https://github.com/khuedoan)\n- [@kevinhwang91](https://github.com/kevinhwang91)\n- [@runiq](https://github.com/runiq)\n- [@n3wborn](https://github.com/n3wborn)\n- [@deathlyfrantic](https://github.com/deathlyfrantic)\n- [@doctoromer](https://github.com/doctoromer)\n- [@elianiva](https://github.com/elianiva)\n- [@dundargoc](https://github.com/dundargoc)\n- [@jdelkins](https://github.com/jdelkins)\n- [@dsully](https://github.com/dsully)\n",
        "releases": []
    }
}