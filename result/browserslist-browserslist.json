{
    "https://api.github.com/repos/browserslist/browserslist": {
        "forks": 721,
        "watchers": 13117,
        "stars": 13117,
        "languages": {
            "JavaScript": 134578
        },
        "commits": [
            "2025-01-08T11:44:10Z",
            "2025-01-08T11:36:18Z",
            "2025-01-08T11:28:21Z",
            "2025-01-08T11:27:53Z",
            "2025-01-08T11:23:38Z",
            "2024-12-23T10:18:36Z",
            "2024-12-16T21:08:03Z",
            "2024-12-16T21:02:48Z",
            "2024-12-16T20:58:16Z",
            "2024-12-13T16:27:01Z",
            "2024-12-13T16:26:03Z",
            "2024-12-13T16:24:51Z",
            "2024-12-13T16:24:55Z",
            "2024-12-10T07:00:27Z",
            "2024-11-26T23:05:17Z",
            "2024-11-20T15:23:25Z",
            "2024-11-15T21:48:42Z",
            "2024-10-21T22:10:13Z",
            "2024-10-21T22:09:42Z",
            "2024-10-21T21:58:47Z",
            "2024-10-21T21:53:06Z",
            "2024-10-21T15:47:12Z",
            "2024-10-04T00:10:58Z",
            "2024-10-04T00:10:14Z",
            "2024-10-03T23:54:12Z",
            "2024-09-25T00:30:19Z",
            "2024-09-25T00:29:19Z",
            "2024-09-25T00:29:13Z",
            "2024-09-25T00:27:30Z",
            "2024-09-25T00:26:28Z"
        ],
        "creation_date": "2014-12-13T19:35:45Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 140,
        "readme": "# Browserslist [![Cult Of Martians][cult-img]][cult]\n\n<img width=\"120\" height=\"120\" alt=\"Browserslist logo by Anton Popov\"\n     src=\"https://browsersl.ist/logo.svg\" align=\"right\">\n\nThe config to share target browsers and Node.js versions between different\nfront-end tools. It is used in:\n\n* [Autoprefixer]\n* [Babel]\n* [postcss-preset-env]\n* [eslint-plugin-compat]\n* [stylelint-no-unsupported-browser-features]\n* [postcss-normalize]\n* [obsolete-webpack-plugin]\n\nAll tools will find target browsers automatically,\nwhen\u00a0you\u00a0add\u00a0the\u00a0following to `package.json`:\n\n```json\n  \"browserslist\": [\n    \"defaults and fully supports es6-module\",\n    \"maintained node versions\"\n  ]\n```\n\nOr in `.browserslistrc` config:\n\n```yaml\n# Browsers that we support\n\ndefaults and fully supports es6-module\nmaintained node versions\n```\n\nDevelopers set their version lists using queries like `last 2 versions`\nto be free from updating versions manually.\nBrowserslist\u00a0will\u00a0use [`caniuse-lite`] with\u00a0[Can I Use] data for this queries.\n\nYou can check how config works at our playground: [`browsersl.ist`](https://browsersl.ist/)\n\n<a href=\"https://browsersl.ist/\">\n  <img src=\"/img/screenshot.webp\" alt=\"browsersl.ist website\">\n</a>\n\n<br>\n<br>\n<div align=\"center\">\n  <a href=\"https://evilmartians.com/?utm_source=browserslist\"><img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\" alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\"></a>\u00a0\u00a0<a href=\"https://cube.dev/?ref=eco-browserslist-github\"><img src=\"https://user-images.githubusercontent.com/986756/154330861-d79ab8ec-aacb-4af8-9e17-1b28f1eccb01.svg\" alt=\"Supported by Cube\" width=\"227\" height=\"46\"></a>\n</div>\n\n[stylelint-no-unsupported-browser-features]: https://github.com/ismay/stylelint-no-unsupported-browser-features\n[obsolete-webpack-plugin]:                   https://github.com/ElemeFE/obsolete-webpack-plugin\n[eslint-plugin-compat]:                      https://github.com/amilajack/eslint-plugin-compat\n[Browserslist Example]:                      https://github.com/browserslist/browserslist-example\n[postcss-preset-env]:                        https://github.com/csstools/postcss-plugins/tree/main/plugin-packs/postcss-preset-env\n[postcss-normalize]:                         https://github.com/csstools/postcss-normalize\n[`browsersl.ist`]:                           https://browsersl.ist/\n[`caniuse-lite`]:                            https://github.com/ben-eb/caniuse-lite\n[Autoprefixer]:                              https://github.com/postcss/autoprefixer\n[Can I Use]:                                 https://caniuse.com/\n[Babel]:                                     https://github.com/babel/babel/tree/master/packages/babel-preset-env\n[cult-img]: https://cultofmartians.com/assets/badges/badge.svg\n[cult]: https://cultofmartians.com/done.html\n\n## Table of Contents\n\n* [Tools](#tools)\n* [Best Practices](#best-practices)\n* [Queries](#queries)\n* [Config File](#config-file)\n* [Shareable Configs](#shareable-configs)\n* [Configuring for Different Environments](#configuring-for-different-environments)\n* [Custom Usage Data](#custom-usage-data)\n* [JS API](#js-api)\n* [Environment Variables](#environment-variables)\n* [Cache](#cache)\n* [Security Contact](#security-contact)\n* [For Enterprise](#for-enterprise)\n\n\n## Sponsors\n\nBrowserslist needs your support. We are accepting donations\n[at Open Collective](https://opencollective.com/browserslist).\n\n<a href=\"https://www.springernature.com/\"><img src=\"https://user-images.githubusercontent.com/19343/227742503-cf7fc2b3-9cc4-481c-97b8-68414d762fda.png\" alt=\"Sponsored by Springer Nature Technology\" width=\"154\" height=\"54\"></a>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<a href=\"https://workleap.com/\"><img src=\"https://workleap.com/wp-content/uploads/2023/05/workleap-logo.svg\" alt=\"Sponsored by Workleap\" width=\"154\" height=\"40\"></a>\n\n\n## Tools\n\n### Analyze your Browserslist Config\n\n* Run `npx browserslist` in your project directory to see project\u2019s\n  target browsers. This CLI tool is built-in and available in\u00a0any project\n  with Autoprefixer.\n* [`browserslist-lint`] checks your config for popular mistakes.\n\n\n### Update `caniuse-lite`\n\n* [`update-browserslist-db`] is a CLI tool to update browsers DB for queries\n  like `last 2 version` or `>1%`.\n* [`browserslist-update-action`] is a GitHub Action to automatically\n  run `update-browserslist-db` and proposes a pull request to merge updates.\n\n\n### Show \u201cWe do not support your browser\u201d Banner\n\n* [`browserslist-useragent-regexp`] compiles Browserslist query to a RegExp\n  to test browser useragent.\n* [`browserslist-useragent-ruby`] is a Ruby library to check browser\n  by user agent string to match Browserslist.\n\n\n### Get Statistics for `>5% in my stats`:\n\n* [`browserslist-ga`] and [`browserslist-ga-export`] download your website\n  browsers statistics to\u00a0use\u00a0it\u00a0in `> 0.5% in my stats` query.\n* [`browserslist-new-relic`] generates a custom usage data file for Browserslist\n* [`browserslist-adobe-analytics`] uses Adobe Analytics data to target browsers\n  from your New Relic Browser data.\n\n\n### Others\n\n* [`browserslist-rs`] is a Browserslist port to Rust.\n* [`browserslist-browserstack`] runs BrowserStack tests for all browsers\n  in Browserslist config.\n\n[`browserslist-useragent-regexp`]: https://github.com/browserslist/browserslist-useragent-regexp\n[`browserslist-adobe-analytics`]:  https://github.com/xeroxinteractive/browserslist-adobe-analytics\n[`browserslist-useragent-ruby`]:   https://github.com/browserslist/browserslist-useragent-ruby\n[`browserslist-update-action`]:    https://github.com/c2corg/browserslist-update-action\n[`browserslist-browserstack`]:     https://github.com/xeroxinteractive/browserslist-browserstack\n[`browserslist-ga-export`]:        https://github.com/browserslist/browserslist-ga-export\n[`browserslist-useragent`]:        https://github.com/pastelsky/browserslist-useragent\n[`update-browserslist-db`]:        https://github.com/browserslist/update-db\n[`browserslist-new-relic`]:        https://github.com/syntactic-salt/browserslist-new-relic\n[`browserslist-lint`]:             https://github.com/browserslist/lint/\n[`browserslist-ga`]:               https://github.com/browserslist/browserslist-ga\n[`browserslist-rs`]:               https://github.com/g-plane/browserslist-rs\n[`caniuse-api`]:                   https://github.com/Nyalab/caniuse-api\n\n\n### Text Editors\n\nThese extensions will add syntax highlighting for `.browserslistrc` files.\n\n* [VS Code](https://marketplace.visualstudio.com/items?itemName=webben.browserslist)\n* [Vim](https://github.com/browserslist/vim-browserslist)\n* [WebStorm](https://plugins.jetbrains.com/plugin/16139-browserslist)\n\n## Best Practices\n\n* There is a `defaults` query, which gives a reasonable configuration\n  for most users:\n\n  ```json\n    \"browserslist\": [\n      \"defaults\"\n    ]\n  ```\n\n* If you want to change the default set of browsers, we recommend including\n  `last 2 versions, not dead, > 0.2%`. This is because `last n versions` on its\n  own does not add popular old versions, while only using a percentage of usage\n  numbers above `0.2%` will in the long run make popular browsers even more\n  popular. We might run into a monopoly and stagnation situation, as we had with\n  Internet Explorer 6. Please use this setting with caution.\n* Select browsers directly (`last 2 Chrome versions`) only if you are making\n  a web app for a kiosk with one browser. There\u00a0are a lot of browsers\n  on the market. If you are making general web app you should respect\n  browsers diversity.\n* Don\u2019t remove browsers just because you don\u2019t know them. Opera Mini has\n  100 million users in Africa and it is more popular in the global market\n  than Microsoft Edge. Chinese QQ Browsers has more market share than Firefox\n  and desktop Safari combined.\n\n\n## Queries\n\nBrowserslist will use browsers and Node.js versions query\nfrom one of these sources:\n\n1. `.browserslistrc` config file in current or parent directories.\n2. `browserslist` key in `package.json` file in current or parent directories.\n3. `browserslist` config file in current or parent directories.\n4. `BROWSERSLIST` environment variable.\n5. If the above methods did not produce a valid result\n   Browserslist will use defaults:\n   `> 0.5%, last 2 versions, Firefox ESR, not dead`.\n\n\n### Query Composition\n\nAn `or` combiner can use the keyword `or` as well as `,`.\n`last 1 version or > 1%` is equal to `last 1 version, > 1%`.\n\n`and` query combinations are also supported to perform an\nintersection of all the previous queries:\n`last 1 version or chrome > 75 and > 1%` will select\n(`browser last version` or `Chrome since 76`) and `more than 1% marketshare`.\n\nThere are 3 different ways to combine queries as depicted below. First you start\nwith a single query and then we combine the\u00a0queries to get our final list.\n\nObviously you can *not* start with a `not` combiner, since there is no left-hand\nside query to\u00a0combine\u00a0it\u00a0with. The left-hand is always resolved as `and`\ncombiner even if `or` is used (this is an API implementation specificity).\n\n| Query combiner type | Illustration | Example |\n| ------------------- | :----------: | ------- |\n|`or`/`,` combiner <br> (union) | ![Union of queries](img/union.svg)  | `> .5% or last 2 versions` <br> `> .5%, last 2 versions` |\n| `and` combiner <br> (intersection) | ![intersection of queries](img/intersection.svg) | `> .5% and last 2 versions` |\n| `not` combiner <br> (relative complement) | ![Relative complement of queries](img/complement.svg) | These three are equivalent to one another: <br> `> .5% and not last 2 versions` <br> `> .5% or not last 2 versions` <br> `> .5%, not last 2 versions` |\n\n_A quick way to test your query is to do `npx browserslist '> 0.3%, not dead'`\nin your terminal._\n\n### Full List\n\nYou can specify the browser and Node.js versions by queries (case insensitive):\n\n* `defaults`: Browserslist\u2019s default browsers\n  (`> 0.5%, last 2 versions, Firefox ESR, not dead`).\n* By usage statistics:\n  * `> 5%`: browsers versions selected by global usage statistics.\n  `>=`, `<` and `<=` work too.\n  * `> 5% in US`: uses USA usage statistics.\n    It accepts [two-letter country code].\n  * `> 5% in alt-AS`: uses Asia region usage statistics.\n    List of all region codes can be found at [`caniuse-lite/data/regions`].\n  * `> 5% in my stats`: uses [custom usage data].\n  * `> 5% in browserslist-config-mycompany stats`: uses [custom usage data]\n    from `browserslist-config-mycompany/browserslist-stats.json`.\n  * `cover 99.5%`: most popular browsers that provide coverage.\n  * `cover 99.5% in US`: same as above, with [two-letter country code].\n  * `cover 99.5% in my stats`: uses [custom usage data].\n* Last versions:\n  * `last 2 versions`: the last 2 versions for *each* browser.\n  * `last 2 Chrome versions`: the last 2 versions of Chrome browser.\n  * `last 2 major versions` or `last 2 iOS major versions`:\n    all minor/patch releases of last 2 major versions.\n* `dead`: browsers without official support or updates for 24 months.\n  Right now it is `IE 11`, `IE_Mob 11`, `BlackBerry 10`, `BlackBerry 7`,\n  `Samsung 4`, `OperaMobile 12.1` and all versions of `Baidu`.\n* Node.js versions:\n  * `node 10` and `node 10.4`: selects latest Node.js `10.x.x`\n  or `10.4.x` release.\n  * `last 2 node versions`: select 2 latest Node.js releases.\n  * `last 2 node major versions`: select 2 latest major-version Node.js releases.\n  * `current node`: Node.js version used by Browserslist right now.\n  * `maintained node versions`: all Node.js versions, which are [still maintained]\n    by Node.js Foundation.\n* Browsers versions:\n  * `iOS 7`: the iOS browser version 7 directly. Note, that `op_mini`\n    has special version `all`.\n  * `Firefox > 20`: versions of Firefox newer than 20.\n    `>=`, `<` and `<=` work too. It also works with Node.js.\n  * `ie 6-8`: selects an inclusive range of versions.\n  * `Firefox ESR`: the latest [Firefox Extended Support Release].\n  * `PhantomJS 2.1` and `PhantomJS 1.9`: selects Safari versions similar\n    to PhantomJS runtime.\n* `extends browserslist-config-mycompany`: take queries from\n  `browserslist-config-mycompany` npm package.\n* By browser support:<br>\n  In these example queries `es6` and `es6-module` are the the `feat` parameter\n  from the URL of the [Can I Use] page. A list of all available features can be\n  found at [`caniuse-lite/data/features`].\n  * `fully supports es6`: browsers with full support for specific\n    features. For example, `fully supports css-grid` will omit Edge 12-15, as\n    those browser versions are marked as [having partial support].\n  * `partially supports es6-module` or `supports es6-module`:  browsers with\n    full or partial support for specific features. For example,\n    `partially supports css-grid` will include Edge 12-15 support, as those\n    browser versions are marked as [having partial support].\n* `browserslist config`: the browsers defined in Browserslist config. Useful\n  in Differential Serving to modify user\u2019s config like\n  `browserslist config and fully supports es6-module`.\n* `since 2015` or `last 2 years`: all versions released since year 2015\n  (also `since 2015-03` and `since 2015-03-10`).\n* `unreleased versions` or `unreleased Chrome versions`:\n  alpha and beta versions.\n* `not ie <= 8`: exclude IE 8 and lower from previous queries.\n\nYou can add `not ` to any query.\n\n[`caniuse-lite/data/regions`]: https://github.com/ben-eb/caniuse-lite/tree/main/data/regions\n[`caniuse-lite/data/features`]: https://github.com/ben-eb/caniuse-lite/tree/main/data/features\n[two-letter country code]:     https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements\n[custom usage data]:           #custom-usage-data\n[still maintained]:            https://github.com/nodejs/Release\n[Can I Use]:                   https://caniuse.com/\n[Firefox Extended Support Release]: https://support.mozilla.org/en-US/kb/choosing-firefox-update-channel\n[having partial support]: https://caniuse.com/css-grid\n\n### Grammar Definition\n\nThere is a [grammar specification](./grammar.w3c-ebnf) about the query syntax,\nwhich may be helpful if you're implementing a parser or something else.\n\n### Debug\n\nRun `npx browserslist` in a project directory to see which browsers were selected\nby your queries.\n\n```sh\n$ npx browserslist\nand_chr 61\nand_ff 56\nand_qq 1.2\nand_uc 11.4\nandroid 56\nbaidu 7.12\nbb 10\nchrome 62\nedge 16\nfirefox 56\nios_saf 11\nopera 48\nsafari 11\nsamsung 5\n```\n\n\n### Browsers\n\nThe following table maps browser names & their target devices into identifiers used by browserslist.\n\n| Browser Name             | Desktop         | Android                   | iOS                      | Other Mobile      |\n| ------------------------ | --------------- | ------------------------- | ------------------------ | ----------------- |\n| Android (WebView)        |                 | `Android`                 |                          |                   |\n| Baidu                    | `Baidu`         |                           |                          |                   |\n| BlackBerry               |                 |                           |                          | `BlackBerry`\u00a0`bb` |\n| Chrome                   | `Chrome`        | `ChromeAndroid`\u00a0`and_chr` | \u21aa\ufe0e `ios_saf`<sup>2</sup> |                   |\n| Edge                     | `Edge`          | \u21aa\ufe0e `and_chr`              | \u21aa\ufe0e `ios_saf`<sup>2</sup> |                   |\n| Electron                 | `Electron`      |                           |                          |                   |\n| Firefox                  | `Firefox`\u00a0`ff`  | `FirefoxAndroid`\u00a0`and_ff` | \u21aa\ufe0e `ios_saf`<sup>2</sup> |                   |\n| Internet Explorer        | `Explorer`\u00a0`ie` |                           |                          | `ie_mob`          |\n| Node.js                  | `Node`          |                           |                          |                   |\n| [KaiOS Browser]          |                 |                           |                          | `kaios`           |\n| Opera                    | `Opera`         | `op_mob` <sup>1</sup>     | \u21aa\ufe0e `ios_saf`<sup>2</sup> |                   |\n| [Opera Mini]<sup>3</sup> |                 | `OperaMini` `op_mini`     |                          |                   |\n| [QQ browser]             |                 | `and_qq`                  |                          |                   |\n| Safari                   | `Safari`        |                           | `iOS` `ios_saf`          |                   |\n| Samsung Internet         |                 | `Samsung`                 |                          |                   |\n| [UC Browser]             |                 | `UCAndroid`\u00a0`and_uc`      |                          |                   |\n\n- `\u21aa\ufe0e name` implies that the browser uses the same engine captured by `name`\n- <sup>1</sup> [Opera Mobile \u2248 Chrome Android](https://github.com/Fyrd/caniuse/issues/5602#issuecomment-792385127)\n- <sup>2</sup> [All iOS browsers use WebKit](https://en.wikipedia.org/wiki/WebKit)\n- <sup>3</sup> Opera Mini has 2 modes \u201cExtreme\u201d and \u201cHigh\u201d for data saving.\n  `op_mini` targets at the \u201cExtreme\u201d one.\n  \u201cHigh\u201d is compatible with the normal Opera Mobile.\n\n[KaiOS Browser]: https://medium.com/design-at-kai/what-you-didnt-know-about-kaios-browser-53937ea1636\n[QQ browser]: https://en.wikipedia.org/wiki/QQ_browser\n[Opera Mini]: https://en.wikipedia.org/wiki/Opera_Mini\n[UC Browser]: https://en.wikipedia.org/wiki/UC_Browser\n\n## Config File\n\n### `package.json`\n\nIf you want to reduce config files in project root, you can specify\nbrowsers in `package.json` with `browserslist` key:\n\n```json\n{\n  \"private\": true,\n  \"dependencies\": {\n    \"autoprefixer\": \"^6.5.4\"\n  },\n  \"browserslist\": [\n    \"last 1 version\",\n    \"> 1%\",\n    \"not dead\"\n  ]\n}\n```\n\n\n### `.browserslistrc`\n\nSeparated Browserslist config should be named `.browserslistrc`\nand have browsers queries split by a new line.\nEach line is combined with the `or` combiner. Comments\u00a0starts\u00a0with\u00a0`#`\u00a0symbol:\n\n```yaml\n# Browsers that we support\n\nlast 1 version\n> 1%\nnot dead # no browsers without security updates\n```\n\nBrowserslist will check config in every directory in `path`.\nSo, if tool process `app/styles/main.css`, you can put config to root,\n`app/` or `app/styles`.\n\nYou can specify direct path in `BROWSERSLIST_CONFIG` environment variables.\n\n\n## Shareable Configs\n\nYou can use the following query to reference an exported Browserslist config\nfrom another package:\n\n```json\n  \"browserslist\": [\n    \"extends browserslist-config-mycompany\"\n  ]\n```\n\nFor security reasons, external configuration only supports packages that have\nthe `browserslist-config-` prefix. npm scoped packages are also supported, by\nnaming or prefixing the module with `@scope/browserslist-config`, such as\n`@scope/browserslist-config` or `@scope/browserslist-config-mycompany`.\n\nIf\u00a0you\u00a0don\u2019t\u00a0accept Browserslist queries from users, you can disable the\nvalidation by using the or `BROWSERSLIST_DANGEROUS_EXTEND` environment variable.\n\n```sh\nBROWSERSLIST_DANGEROUS_EXTEND=1 npx webpack\n```\n\nBecause this uses `npm`'s resolution, you can also reference specific files\nin a package:\n\n```json\n  \"browserslist\": [\n    \"extends browserslist-config-mycompany/desktop\",\n    \"extends browserslist-config-mycompany/mobile\"\n  ]\n```\n\nWhen writing a shared Browserslist package, just export an array.\n`browserslist-config-mycompany/index.js`:\n\n```js\nmodule.exports = [\n  'last 1 version',\n  '> 1%',\n  'not dead'\n]\n```\n\nYou can also include a `browserslist-stats.json` file as part of your shareable\nconfig at the root and query it using\n`> 5% in browserslist-config-mycompany stats`. It uses the same format\nas `extends` and the `dangerousExtend` property as above.\n\nYou can export configs for different environments and select environment\nby `BROWSERSLIST_ENV` or `env` option in your tool:\n\n```js\nmodule.exports = {\n  development: [\n    'last 1 version'\n  ],\n  production: [\n    'last 1 version',\n    '> 1%',\n    'not dead'\n  ]\n}\n```\n\n\n## Configuring for Different Environments\n\nYou can also specify different browser queries for various environments.\nBrowserslist will choose query according to\u00a0`BROWSERSLIST_ENV` or `NODE_ENV`\nvariables. If none of them is declared, Browserslist will firstly look\nfor `production` queries and then use defaults.\n\nIn `package.json`:\n\n```js\n  \"browserslist\": {\n    \"production\": [\n      \"> 1%\",\n      \"not dead\"\n    ],\n    \"modern\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\"\n    ],\n    \"ssr\": [\n      \"node 12\"\n    ]\n  }\n```\n\nIn `.browserslistrc` config:\n\n```ini\n[production]\n> 1%\nnot dead\n\n[modern]\nlast 1 chrome version\nlast 1 firefox version\n\n[ssr]\nnode 12\n```\n\n\n## Custom Usage Data\n\nIf you have a website, you can query against the usage statistics of your site.\n[`browserslist-ga`] will ask access to Google Analytics and then generate\n`browserslist-stats.json`:\n\n```\nnpx browserslist-ga\n```\n\nOr you can use [`browserslist-ga-export`] to convert Google Analytics data without giving a password for Google account.\n\nYou can generate usage statistics file by any other method. File format should\nbe like:\n\n```js\n{\n  \"ie\": {\n    \"6\": 0.01,\n    \"7\": 0.4,\n    \"8\": 1.5\n  },\n  \"chrome\": {\n    \u2026\n  },\n  \u2026\n}\n```\n\nNote that you can query against your custom usage data while also querying\nagainst global or regional data. For\u00a0example,\u00a0the query\n`> 1% in my stats, > 5% in US, 10%` is permitted.\n\n[`browserslist-ga-export`]: https://github.com/browserslist/browserslist-ga-export\n[`browserslist-ga`]:        https://github.com/browserslist/browserslist-ga\n[Can I Use]:                https://caniuse.com/\n\n\n## JS API\n\n```js\nconst browserslist = require('browserslist')\n\n// Your CSS/JS build tool code\nfunction process (source, opts) {\n  const browsers = browserslist(opts.overrideBrowserslist, {\n    stats: opts.stats,\n    path:  opts.file,\n    env:   opts.env\n  })\n  // Your code to add features for selected browsers\n}\n```\n\nQueries can be a string `\"> 1%, not dead\"`\nor an array `['> 1%', 'not dead']`.\n\nIf a query is missing, Browserslist will look for a config file.\nYou can provide a `path` option (that\u00a0can\u00a0be\u00a0a\u00a0file) to\u00a0find\u00a0the\u00a0config\u00a0file\nrelatively to it.\n\nOptions:\n\n* `path`: file or a directory path to look for config file. Default is `.`.\n* `env`: what environment section use from config. Default is `production`.\n* `stats`: custom usage statistics data.\n* `config`: path to config if you want to set it manually.\n* `ignoreUnknownVersions`: do not throw on direct query (like `ie 12`).\n  Default is `false`.\n* `dangerousExtend`: Disable security checks for `extend` query.\n  Default is `false`.\n* `throwOnMissing`: throw an error if env is not found.\n  Default is `false`.\n* `mobileToDesktop`: Use desktop browsers if Can I Use doesn\u2019t have data\n  about this mobile version. Can I Use has only data about\n  latest versions of mobile browsers. By default, `last 2 and_ff versions`\n  returns `and_ff 90` and with this option it returns `and_ff 91, and_ff 90`.\n  This option may lead to unknown browser version error (in example Can I Use\n  doesn\u2019t have data for `and_ff 91` yet). Default is `false`.\n\nFor non-JS environment and debug purpose you can use CLI tool:\n\n```sh\nbrowserslist \"> 1%, not dead\"\n```\n\nYou can get total users coverage for selected browsers by JS API:\n\n```js\nbrowserslist.coverage(browserslist('> 1%'))\n//=> 81.4\n```\n\n```js\nbrowserslist.coverage(browserslist('> 1% in US'), 'US')\n//=> 83.1\n```\n\n```js\nbrowserslist.coverage(browserslist('> 1% in my stats'), 'my stats')\n//=> 83.1\n```\n\n```js\nbrowserslist.coverage(browserslist('> 1% in my stats', { stats }), stats)\n//=> 82.2\n```\n\nOr by CLI:\n\n```sh\n$ browserslist --coverage \"> 1%\"\nThese browsers account for 81.4% of all users globally\n```\n\n```sh\n$ browserslist --coverage=US \"> 1% in US\"\nThese browsers account for 83.1% of all users in the US\n```\n\n```sh\n$ browserslist --coverage \"> 1% in my stats\"\nThese browsers account for 83.1% of all users in custom statistics\n```\n\n```sh\n$ browserslist --coverage \"> 1% in my stats\" --stats=./stats.json\nThese browsers account for 83.1% of all users in custom statistics\n```\n\n\n## Environment Variables\n\nIf a tool uses Browserslist inside, you can change the Browserslist settings\nwith [environment variables]:\n\n* `BROWSERSLIST` with browsers queries.\n\n   ```sh\n  BROWSERSLIST=\"> 5%\" npx webpack\n   ```\n\n* `BROWSERSLIST_CONFIG` with path to config file.\n\n   ```sh\n  BROWSERSLIST_CONFIG=./config/browserslist npx webpack\n   ```\n\n* `BROWSERSLIST_ENV` with environments string.\n\n   ```sh\n  BROWSERSLIST_ENV=\"development\" npx webpack\n   ```\n\n* `BROWSERSLIST_STATS` with path to the custom usage data\n  for `> 1% in my stats` query.\n\n   ```sh\n  BROWSERSLIST_STATS=./config/usage_data.json npx webpack\n   ```\n\n* `BROWSERSLIST_DISABLE_CACHE` if you want to disable config reading cache.\n\n   ```sh\n  BROWSERSLIST_DISABLE_CACHE=1 npx webpack\n   ```\n\n* `BROWSERSLIST_DANGEROUS_EXTEND` to disable security shareable config\n  name check.\n\n   ```sh\n  BROWSERSLIST_DANGEROUS_EXTEND=1 npx webpack\n   ```\n\n* `BROWSERSLIST_ROOT_PATH` to prevent reading files above this path.\n\n   ```sh\n  BROWSERSLIST_ROOT_PATH=. npx webpack\n   ```\n\n[environment variables]: https://en.wikipedia.org/wiki/Environment_variable\n\n### `browserslist.coverage()`\n\nReturn browsers market coverage.\n\n```js\nconst browsers = browserslist('> 1% in US')\nbrowserslist.coverage(browsers, 'US') //=> 83.1\n```\n\n### `browserslist.loadConfig()`\n\nIt is like calling `browserslist()`, but it returns config\u2019s queries,\nnot browsers.\n\n```js\nbrowserslist.loadConfig({ path: process.cwd() }) ?? browserslist.defaults\n```\n\n### `browserslist.defaults`\n\nAn array with default queries.\n\n\n## Cache\n\nBrowserslist caches the configuration it reads from `package.json` and\n`browserslist` files, as well as knowledge about the existence of files,\nfor the duration of the hosting process.\n\nTo clear these caches, use:\n\n```js\nbrowserslist.clearCaches()\n```\n\nTo disable the caching altogether, set the `BROWSERSLIST_DISABLE_CACHE`\nenvironment variable.\n\n\n## Security Contact\n\nTo report a security vulnerability, please use the [Tidelift security contact].\nTidelift will coordinate the fix and disclosure.\n\n[Tidelift security contact]: https://tidelift.com/security\n\n\n## For Enterprise\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of `browserslist` and thousands of other packages are working\nwith Tidelift to deliver commercial support and maintenance for the open source\ndependencies you use to build your applications. Save time, reduce risk,\nand improve code health, while paying the maintainers of the exact dependencies\nyou use. [Learn more.](https://tidelift.com/subscription/pkg/npm-browserslist?utm_source=npm-browserslist&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n\n## Browsers Data Updating\n\nSee [`update-browserslist-db` docs](https://github.com/browserslist/update-db#readme)\n",
        "releases": [
            {
                "name": "4.24.4",
                "date": "2025-01-08T11:43:54Z"
            },
            {
                "name": "4.24.3",
                "date": "2024-12-13T16:26:15Z"
            },
            {
                "name": "4.24.2",
                "date": "2024-10-21T22:10:24Z"
            },
            {
                "name": "4.24.1",
                "date": "2024-10-21T21:58:58Z"
            },
            {
                "name": "4.24.0",
                "date": "2024-09-25T00:30:33Z"
            },
            {
                "name": "4.23.3",
                "date": "2024-08-03T20:39:50Z"
            },
            {
                "name": "4.23.2",
                "date": "2024-07-09T20:40:07Z"
            },
            {
                "name": "4.23.1",
                "date": "2024-06-08T20:55:54Z"
            },
            {
                "name": "4.23.0",
                "date": "2024-02-14T17:50:56Z"
            }
        ]
    }
}