{
    "https://api.github.com/repos/coredns/coredns": {
        "forks": 2164,
        "watchers": 12623,
        "stars": 12623,
        "languages": {
            "Go": 1707598,
            "Makefile": 1623,
            "Dockerfile": 742
        },
        "commits": [
            "2025-01-21T08:41:38Z",
            "2024-12-20T00:28:38Z",
            "2024-11-22T13:13:42Z",
            "2024-11-22T12:38:15Z",
            "2024-11-21T19:27:33Z",
            "2024-11-21T19:25:32Z",
            "2024-11-21T19:15:06Z",
            "2024-11-21T19:13:28Z",
            "2024-11-21T15:32:17Z",
            "2024-11-21T15:30:12Z",
            "2024-11-21T15:29:21Z",
            "2024-11-21T15:25:25Z",
            "2024-11-21T10:32:03Z",
            "2024-11-21T10:31:37Z",
            "2024-11-21T10:31:15Z",
            "2024-11-21T10:30:56Z",
            "2024-11-21T10:30:34Z",
            "2024-11-15T02:14:00Z",
            "2024-11-15T01:42:46Z",
            "2024-11-15T01:02:25Z",
            "2024-11-15T01:02:00Z",
            "2024-11-15T01:01:19Z",
            "2024-11-13T17:40:25Z",
            "2024-11-13T17:36:36Z",
            "2024-11-13T01:31:15Z",
            "2024-11-12T23:40:01Z",
            "2024-11-05T19:15:45Z",
            "2024-11-05T19:03:47Z",
            "2024-11-05T19:00:13Z",
            "2024-11-05T18:59:11Z"
        ],
        "creation_date": "2016-03-18T20:56:45Z",
        "contributors": 30,
        "topics": [
            "cncf",
            "coredns",
            "dns-server",
            "go",
            "plugin",
            "service-discovery"
        ],
        "subscribers": 237,
        "readme": "[![CoreDNS](https://coredns.io/images/CoreDNS_Colour_Horizontal.png)](https://coredns.io)\n\n[![Documentation](https://img.shields.io/badge/godoc-reference-blue.svg)](https://godoc.org/github.com/coredns/coredns)\n![CodeQL](https://github.com/coredns/coredns/actions/workflows/codeql-analysis.yml/badge.svg)\n![Go Tests](https://github.com/coredns/coredns/actions/workflows/go.test.yml/badge.svg)\n[![CircleCI](https://circleci.com/gh/coredns/coredns.svg?style=shield)](https://circleci.com/gh/coredns/coredns)\n[![Code Coverage](https://img.shields.io/codecov/c/github/coredns/coredns/master.svg)](https://codecov.io/github/coredns/coredns?branch=master)\n[![Docker Pulls](https://img.shields.io/docker/pulls/coredns/coredns.svg)](https://hub.docker.com/r/coredns/coredns)\n[![Go Report Card](https://goreportcard.com/badge/github.com/coredns/coredns)](https://goreportcard.com/report/coredns/coredns)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/1250/badge)](https://bestpractices.coreinfrastructure.org/projects/1250)\n[![OpenSSF Scorecard](https://api.scorecard.dev/projects/github.com/coredns/coredns/badge)](https://scorecard.dev/viewer/?uri=github.com/coredns/coredns)\n\nCoreDNS is a DNS server/forwarder, written in Go, that chains [plugins](https://coredns.io/plugins).\nEach plugin performs a (DNS) function.\n\nCoreDNS is a [Cloud Native Computing Foundation](https://cncf.io) graduated project.\n\nCoreDNS is a fast and flexible DNS server. The key word here is *flexible*: with CoreDNS you\nare able to do what you want with your DNS data by utilizing plugins. If some functionality is not\nprovided out of the box you can add it by [writing a plugin](https://coredns.io/explugins).\n\nCoreDNS can listen for DNS requests coming in over:\n* UDP/TCP (go'old DNS).\n* TLS - DoT ([RFC 7858](https://tools.ietf.org/html/rfc7858)).\n* DNS over HTTP/2 - DoH ([RFC 8484](https://tools.ietf.org/html/rfc8484)).\n* DNS over QUIC - DoQ ([RFC 9250](https://tools.ietf.org/html/rfc9250)). \n* [gRPC](https://grpc.io) (not a standard).\n\nCurrently CoreDNS is able to:\n\n* Serve zone data from a file; both DNSSEC (NSEC only) and DNS are supported (*file* and *auto*).\n* Retrieve zone data from primaries, i.e., act as a secondary server (AXFR only) (*secondary*).\n* Sign zone data on-the-fly (*dnssec*).\n* Load balancing of responses (*loadbalance*).\n* Allow for zone transfers, i.e., act as a primary server (*file* + *transfer*).\n* Automatically load zone files from disk (*auto*).\n* Caching of DNS responses (*cache*).\n* Use etcd as a backend (replacing [SkyDNS](https://github.com/skynetservices/skydns)) (*etcd*).\n* Use k8s (kubernetes) as a backend (*kubernetes*).\n* Serve as a proxy to forward queries to some other (recursive) nameserver (*forward*).\n* Provide metrics (by using Prometheus) (*prometheus*).\n* Provide query (*log*) and error (*errors*) logging.\n* Integrate with cloud providers (*route53*).\n* Support the CH class: `version.bind` and friends (*chaos*).\n* Support the RFC 5001 DNS name server identifier (NSID) option (*nsid*).\n* Profiling support (*pprof*).\n* Rewrite queries (qtype, qclass and qname) (*rewrite* and *template*).\n* Block ANY queries (*any*).\n* Provide DNS64 IPv6 Translation (*dns64*).\n\nAnd more. Each of the plugins is documented. See [coredns.io/plugins](https://coredns.io/plugins)\nfor all in-tree plugins, and [coredns.io/explugins](https://coredns.io/explugins) for all\nout-of-tree plugins.\n\n## Compilation from Source\n\nTo compile CoreDNS, we assume you have a working Go setup. See various tutorials if you don\u2019t have\nthat already configured.\n\nFirst, make sure your golang version is 1.21 or higher as `go mod` support and other api is needed.\nSee [here](https://github.com/golang/go/wiki/Modules) for `go mod` details.\nThen, check out the project and run `make` to compile the binary:\n\n~~~\n$ git clone https://github.com/coredns/coredns\n$ cd coredns\n$ make\n~~~\n\nThis should yield a `coredns` binary.\n\n## Compilation with Docker\n\nCoreDNS requires Go to compile. However, if you already have docker installed and prefer not to\nsetup a Go environment, you could build CoreDNS easily:\n\n```\ndocker run --rm -i -t \\\n    -v $PWD:/go/src/github.com/coredns/coredns -w /go/src/github.com/coredns/coredns \\\n        golang:1.22 sh -c 'GOFLAGS=\"-buildvcs=false\" make gen && GOFLAGS=\"-buildvcs=false\" make'\n```\n\nThe above command alone will have `coredns` binary generated.\n\n## Examples\n\nWhen starting CoreDNS without any configuration, it loads the\n[*whoami*](https://coredns.io/plugins/whoami) and [*log*](https://coredns.io/plugins/log) plugins\nand starts listening on port 53 (override with `-dns.port`), it should show the following:\n\n~~~ txt\n.:53\nCoreDNS-1.6.6\nlinux/amd64, go1.16.10, aa8c32\n~~~\n\nThe following could be used to query the CoreDNS server that is running now:\n\n~~~ txt\ndig @127.0.0.1 -p 53 www.example.com\n~~~\n\nAny query sent to port 53 should return some information; your sending address, port and protocol\nused. The query should also be logged to standard output.\n\nThe configuration of CoreDNS is done through a file named `Corefile`. When CoreDNS starts, it will\nlook for the `Corefile` from the current working directory. A `Corefile` for CoreDNS server that listens\non port `53` and enables `whoami` plugin is:\n\n~~~ corefile\n.:53 {\n    whoami\n}\n~~~\n\nSometimes port number 53 is occupied by system processes. In that case you can start the CoreDNS server\nwhile modifying the `Corefile` as given below so that the CoreDNS server starts on port 1053.\n\n~~~ corefile\n.:1053 {\n    whoami\n}\n~~~\n\nIf you have a `Corefile` without a port number specified it will, by default, use port 53, but you can\noverride the port with the `-dns.port` flag: `coredns -dns.port 1053`, runs the server on port 1053.\n\nYou may import other text files into the `Corefile` using the _import_ directive.  You can use globs to match multiple\nfiles with a single _import_ directive.\n\n~~~ txt\n.:53 {\n    import example1.txt\n}\nimport example2.txt\n~~~\n\nYou can use environment variables in the `Corefile` with `{$VARIABLE}`.  Note that each environment variable is inserted\ninto the `Corefile` as a single token. For example, an environment variable with a space in it will be treated as a single\ntoken, not as two separate tokens.\n\n~~~ txt\n.:53 {\n    {$ENV_VAR}\n}\n~~~\n\nA Corefile for a CoreDNS server that forward any queries to an upstream DNS (e.g., `8.8.8.8`) is as follows:\n\n~~~ corefile\n.:53 {\n    forward . 8.8.8.8:53\n    log\n}\n~~~\n\nStart CoreDNS and then query on that port (53). The query should be forwarded to 8.8.8.8 and the\nresponse will be returned. Each query should also show up in the log which is printed on standard\noutput.\n\nTo serve the (NSEC) DNSSEC-signed `example.org` on port 1053, with errors and logging sent to standard\noutput. Allow zone transfers to everybody, but specifically mention 1 IP address so that CoreDNS can\nsend notifies to it.\n\n~~~ txt\nexample.org:1053 {\n    file /var/lib/coredns/example.org.signed\n    transfer {\n        to * 2001:500:8f::53\n    }\n    errors\n    log\n}\n~~~\n\nServe `example.org` on port 1053, but forward everything that does *not* match `example.org` to a\nrecursive nameserver *and* rewrite ANY queries to HINFO.\n\n~~~ txt\nexample.org:1053 {\n    file /var/lib/coredns/example.org.signed\n    transfer {\n        to * 2001:500:8f::53\n    }\n    errors\n    log\n}\n\n. {\n    any\n    forward . 8.8.8.8:53\n    errors\n    log\n}\n~~~\n\nIP addresses are also allowed. They are automatically converted to reverse zones:\n\n~~~ corefile\n10.0.0.0/24 {\n    whoami\n}\n~~~\nMeans you are authoritative for `0.0.10.in-addr.arpa.`.\n\nThis also works for IPv6 addresses. If for some reason you want to serve a zone named `10.0.0.0/24`\nadd the closing dot: `10.0.0.0/24.` as this also stops the conversion.\n\nThis even works for CIDR (See RFC 1518 and 1519) addressing, i.e. `10.0.0.0/25`, CoreDNS will then\ncheck if the `in-addr` request falls in the correct range.\n\nListening on TLS (DoT) and for gRPC? Use:\n\n~~~ corefile\ntls://example.org grpc://example.org {\n    whoami\n}\n~~~\n\nSimilarly, for QUIC (DoQ):\n\n~~~ corefile\nquic://example.org {\n    whoami\n    tls mycert mykey\n}\n~~~\n\nAnd for DNS over HTTP/2 (DoH) use:\n\n~~~ corefile\nhttps://example.org {\n    whoami\n    tls mycert mykey\n}\n~~~\nin this setup, the CoreDNS will be responsible for TLS termination\n\nyou can also start DNS server serving DoH without TLS termination (plain HTTP), but beware that in such scenario there has to be some kind\nof TLS termination proxy before CoreDNS instance, which forwards DNS requests otherwise clients will not be able to communicate via DoH with the server\n~~~ corefile\nhttps://example.org {\n    whoami\n}\n~~~\n\nSpecifying ports works in the same way:\n\n~~~ txt\ngrpc://example.org:1443 https://example.org:1444 {\n    # ...\n}\n~~~\n\nWhen no transport protocol is specified the default `dns://` is assumed.\n\n## Community\n\nWe're most active on GitHub (and Slack):\n\n- GitHub: <https://github.com/coredns/coredns>\n- Slack: #coredns on <https://slack.cncf.io>\n\nMore resources can be found:\n\n- Website: <https://coredns.io>\n- Blog: <https://coredns.io/blog/>\n- Twitter: [@corednsio](https://twitter.com/corednsio)\n- Mailing list/group: <coredns-discuss@googlegroups.com> (not very active)\n\n## Contribution guidelines\n\nIf you want to contribute to CoreDNS, be sure to review the [contribution\nguidelines](./.github/CONTRIBUTING.md).\n\n## Deployment\n\nExamples for deployment via systemd and other use cases can be found in the [deployment\nrepository](https://github.com/coredns/deployment).\n\n## Deprecation Policy\n\nWhen there is a backwards incompatible change in CoreDNS the following process is followed:\n\n*  Release x.y.z: Announce that in the next release we will make backward incompatible changes.\n*  Release x.y+1.0: Increase the minor version and set the patch version to 0. Make the changes,\n   but allow the old configuration to be parsed. I.e. CoreDNS will start from an unchanged\n   Corefile.\n*  Release x.y+1.1: Increase the patch version to 1. Remove the lenient parsing, so CoreDNS will\n   not start if those features are still used.\n\nE.g. 1.3.1 announce a change. 1.4.0 a new release with the change but backward compatible config.\nAnd finally 1.4.1 that removes the config workarounds.\n\n## Security\n\n### Security Audits\n\nThird party security audits have been performed by:\n* [Cure53](https://cure53.de) in March 2018. [Full Report](https://coredns.io/assets/DNS-01-report.pdf)\n* [Trail of Bits](https://www.trailofbits.com) in March 2022. [Full Report](https://github.com/trailofbits/publications/blob/master/reviews/CoreDNS.pdf)\n\n### Reporting security vulnerabilities\n\nIf you find a security vulnerability or any security related issues, please DO NOT file a public\nissue, instead send your report privately to `security@coredns.io`. Security reports are greatly\nappreciated and we will publicly thank you for it.\n\nPlease consult [security vulnerability disclosures and security fix and release process\ndocument](https://github.com/coredns/coredns/blob/master/.github/SECURITY.md)\n",
        "releases": [
            {
                "name": "v1.12.0",
                "date": "2024-11-21T19:41:27Z"
            },
            {
                "name": "v1.11.4",
                "date": "2024-11-13T03:07:13Z"
            },
            {
                "name": "v1.11.3",
                "date": "2024-07-29T17:29:13Z"
            },
            {
                "name": "v1.11.1",
                "date": "2023-08-15T20:00:30Z"
            },
            {
                "name": "v1.11.0",
                "date": "2023-08-08T14:15:16Z"
            },
            {
                "name": "v1.10.1",
                "date": "2023-02-06T18:30:04Z"
            },
            {
                "name": "v1.10.0",
                "date": "2022-09-19T12:48:39Z"
            },
            {
                "name": "v1.9.4",
                "date": "2022-09-08T17:51:20Z"
            },
            {
                "name": "v1.9.3",
                "date": "2022-05-27T15:44:59Z"
            },
            {
                "name": "v1.9.2",
                "date": "2022-05-10T15:52:31Z"
            },
            {
                "name": "v1.9.1",
                "date": "2022-03-11T18:27:27Z"
            },
            {
                "name": "v1.9.0",
                "date": "2022-02-09T19:30:26Z"
            },
            {
                "name": "v1.8.7",
                "date": "2022-01-14T14:13:58Z"
            },
            {
                "name": "v1.8.6",
                "date": "2021-10-07T12:43:12Z"
            },
            {
                "name": "v1.8.5",
                "date": "2021-09-21T14:57:08Z"
            },
            {
                "name": "v1.8.4",
                "date": "2021-05-28T10:35:15Z"
            },
            {
                "name": "v1.8.3",
                "date": "2021-02-24T13:59:30Z"
            },
            {
                "name": "v1.8.2",
                "date": "2021-02-24T12:26:31Z"
            },
            {
                "name": "v1.8.1",
                "date": "2021-01-21T08:39:17Z"
            },
            {
                "name": "v1.8.0",
                "date": "2020-10-22T08:59:20Z"
            },
            {
                "name": "v1.7.1",
                "date": "2020-09-21T15:23:26Z"
            },
            {
                "name": "v1.7.0",
                "date": "2020-06-18T00:52:22Z"
            },
            {
                "name": "v1.6.9",
                "date": "2020-03-24T15:36:42Z"
            },
            {
                "name": "v1.6.8",
                "date": "2020-03-24T14:56:26Z"
            },
            {
                "name": "v1.6.7",
                "date": "2020-01-28T19:16:55Z"
            },
            {
                "name": "v1.6.6",
                "date": "2019-12-12T15:50:22Z"
            },
            {
                "name": "v1.6.5",
                "date": "2019-11-05T13:59:36Z"
            },
            {
                "name": "v1.6.4",
                "date": "2019-09-27T13:52:20Z"
            },
            {
                "name": "v1.6.3",
                "date": "2019-08-31T09:15:37Z"
            },
            {
                "name": "v1.6.2",
                "date": "2019-08-14T08:34:30Z"
            },
            {
                "name": "v1.6.1",
                "date": "2019-08-01T13:57:28Z"
            },
            {
                "name": "v1.6.0",
                "date": "2019-07-28T20:24:12Z"
            },
            {
                "name": "v1.5.2",
                "date": "2019-07-03T18:56:56Z"
            },
            {
                "name": "v1.5.1",
                "date": "2019-06-26T11:56:32Z"
            },
            {
                "name": "v1.5.0",
                "date": "2019-04-07T12:15:42Z"
            },
            {
                "name": "v1.4.0",
                "date": "2019-03-03T10:45:32Z"
            },
            {
                "name": "v1.3.1",
                "date": "2019-01-13T14:53:39Z"
            },
            {
                "name": "v1.3.0",
                "date": "2018-12-15T15:54:03Z"
            },
            {
                "name": "v1.2.6",
                "date": "2018-11-04T18:10:19Z"
            },
            {
                "name": "v1.2.5",
                "date": "2018-10-24T20:12:01Z"
            },
            {
                "name": "v1.2.4",
                "date": "2018-10-17T21:56:29Z"
            },
            {
                "name": "v1.2.3",
                "date": "2018-10-16T06:40:16Z"
            },
            {
                "name": "v1.2.2",
                "date": "2018-08-29T06:55:24Z"
            },
            {
                "name": "v1.2.1",
                "date": "2018-08-27T19:14:14Z"
            },
            {
                "name": "v1.2.0",
                "date": "2018-07-11T09:01:08Z"
            },
            {
                "name": "",
                "date": "2018-06-19T16:59:42Z"
            },
            {
                "name": "",
                "date": "2018-05-24T07:05:04Z"
            },
            {
                "name": "",
                "date": "2018-04-23T12:51:59Z"
            },
            {
                "name": "",
                "date": "2018-03-25T16:27:54Z"
            },
            {
                "name": "",
                "date": "2018-03-13T14:52:11Z"
            },
            {
                "name": "",
                "date": "2018-02-22T09:14:14Z"
            },
            {
                "name": "",
                "date": "2018-01-25T20:42:14Z"
            },
            {
                "name": "v1.0.4",
                "date": "2018-01-18T13:53:31Z"
            },
            {
                "name": "",
                "date": "2018-01-10T19:51:37Z"
            },
            {
                "name": "",
                "date": "2017-12-31T09:19:34Z"
            },
            {
                "name": "",
                "date": "2017-12-11T16:53:52Z"
            },
            {
                "name": "",
                "date": "2017-12-01T23:40:26Z"
            },
            {
                "name": "",
                "date": "2017-11-03T20:37:33Z"
            },
            {
                "name": "",
                "date": "2017-10-18T10:25:10Z"
            },
            {
                "name": "",
                "date": "2017-09-10T18:31:27Z"
            },
            {
                "name": "",
                "date": "2017-07-25T15:18:14Z"
            },
            {
                "name": "",
                "date": "2017-07-17T14:53:21Z"
            },
            {
                "name": "",
                "date": "2017-06-14T21:49:01Z"
            },
            {
                "name": "",
                "date": "2017-05-03T18:45:41Z"
            },
            {
                "name": "",
                "date": "2017-02-22T21:24:21Z"
            },
            {
                "name": "",
                "date": "2017-02-09T18:49:33Z"
            },
            {
                "name": "",
                "date": "2017-01-01T10:46:25Z"
            },
            {
                "name": "",
                "date": "2016-11-11T16:42:36Z"
            },
            {
                "name": "",
                "date": "2016-10-19T19:51:53Z"
            },
            {
                "name": "",
                "date": "2016-09-18T13:37:04Z"
            }
        ]
    }
}