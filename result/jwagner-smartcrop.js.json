{
    "https://api.github.com/repos/jwagner/smartcrop.js": {
        "forks": 578,
        "watchers": 12857,
        "stars": 12857,
        "languages": {
            "JavaScript": 33458,
            "HTML": 1156,
            "Shell": 860,
            "Dockerfile": 842,
            "Vim Script": 91,
            "TypeScript": 57
        },
        "commits": [
            "2024-03-16T12:45:28Z",
            "2024-01-23T20:07:34Z",
            "2024-01-23T19:47:06Z",
            "2022-07-10T19:53:54Z",
            "2022-05-31T16:50:07Z",
            "2021-09-30T22:49:55Z",
            "2021-09-01T18:01:37Z",
            "2021-07-24T17:34:34Z",
            "2021-07-24T17:26:45Z",
            "2021-07-24T17:12:45Z",
            "2021-07-04T14:57:16Z",
            "2021-07-04T14:44:15Z",
            "2021-04-26T21:40:08Z",
            "2020-11-17T17:12:17Z",
            "2020-09-24T16:31:11Z",
            "2020-09-19T00:06:22Z",
            "2019-10-23T17:29:59Z",
            "2019-05-25T21:44:17Z",
            "2019-05-11T10:41:51Z",
            "2019-04-09T22:32:27Z",
            "2019-01-02T11:28:35Z",
            "2018-12-29T15:30:40Z",
            "2018-12-18T14:16:06Z",
            "2018-05-24T22:06:05Z",
            "2018-04-25T21:12:51Z",
            "2018-04-25T21:09:17Z",
            "2018-04-23T22:38:16Z",
            "2018-02-10T19:54:12Z",
            "2018-02-10T15:34:33Z",
            "2018-02-10T15:38:18Z"
        ],
        "creation_date": "2014-04-03T14:21:19Z",
        "contributors": 14,
        "topics": [
            "image-processing",
            "javascript",
            "nodejs",
            "smartcrop"
        ],
        "subscribers": 214,
        "readme": "# smartcrop.js\n\n![example workflow](https://github.com/jwagner/smartcrop.js/actions/workflows/tests.yml/badge.svg)\n\nSmartcrop.js implements an algorithm to find good crops for images.\nIt can be used in the browser, in node or via a CLI.\n\n![Example](https://29a.ch/sandbox/2014/smartcrop/example.jpg)\nImage: [https://www.flickr.com/photos/endogamia/5682480447/](https://www.flickr.com/photos/endogamia/5682480447) by Leon F. Cabeiro (N. Feans), licensed under CC-BY-2.0\n\n> **Note**\n> I'm currently working on a more advanced version of smartcrop.js based on machine learning. As part of that I'm looking for a large dataset of manually cropped images. If you know of such a dataset, please [let me know](https://29a.ch/about).\n\n## Demos\n\n- [Smartcrop.js Test Suite](https://29a.ch/sandbox/2014/smartcrop/examples/testsuite.html), contains over 100 images, **heavy**.\n- [Smartcrop.js Test Bed](https://29a.ch/sandbox/2014/smartcrop/examples/testbed.html), allows you to test smartcrop with your own images and different face detection libraries.\n- [Automatic Photo transitions](https://29a.ch/sandbox/2014/smartcrop/examples/slideshow.html), automatically creates Ken Burns transitions for a slide show.\n\n## Simple Example\n\n```javascript\n// you pass in an image as well as the width & height of the crop you\n// want to optimize.\nsmartcrop.crop(image, { width: 100, height: 100 }).then(function(result) {\n  console.log(result);\n});\n```\n\nOutput:\n\n```javascript\n// smartcrop will output you its best guess for a crop\n// you can now use this data to crop the image.\n{topCrop: {x: 300, y: 200, height: 200, width: 200}}\n```\n\n## Download/ Installation\n\n`npm install smartcrop`\nor just download [smartcrop.js](https://raw.githubusercontent.com/jwagner/smartcrop.js/master/smartcrop.js) from the git repository.\n\nSmarcrop requires support for [Promises](http://caniuse.com/#feat=promises),\nuse a [polyfill](https://github.com/taylorhakes/promise-polyfill) for unsupported browsers or set `smartcrop.Promise` to your favorite promise implementation\n(I recommend [bluebird](http://bluebirdjs.com/)).\n\n\n## Consider avoiding crops using dont-crop\n\nIf you are interested in using smartcrop.js to crop your images you should also consider to avoid cropping them by using [dont-crop](https://github.com/jwagner/dont-crop/).\nDont-crop gives you matching gradients and colors to pad and complement your images.\n\n![Example](https://29a.ch/images/dont-crop.cache-399897619c3de2e0.jpg)\n\n## Command Line Interface\n\nThe [smartcrop-cli](https://github.com/jwagner/smartcrop-cli) offers command line interface to smartcrop.js.\n\n## Node\n\nYou can use smartcrop from nodejs via either [smartcrop-gm](https://github.com/jwagner/smartcrop-gm) (which is using image magick via gm) or [smartcrop-sharp](https://github.com/jwagner/smartcrop-sharp) (which is using libvips via sharp).\nThe [smartcrop-cli](https://github.com/jwagner/smartcrop-cli) can be used as an example of using smartcrop from node.\n\n## Stability\n\nWhile _smartcrop.js_ is a small personal project it is currently being used on high traffic production sites.\nIt has a basic set of automated tests and a test coverage of close to 100%.\nThe tests run in all modern browsers thanks to [saucelabs](https://saucelabs.com/).\nIf in any doubt the code is short enough to perform a quick review yourself.\n\n## Algorithm Overview\n\nSmartcrop.js works using fairly dumb image processing. In short:\n\n1. Find edges using laplace\n1. Find regions with a color like skin\n1. Find regions high in saturation\n1. Boost regions as specified by options (for example detected faces)\n1. Generate a set of candidate crops using a sliding window\n1. Rank them using an importance function to focus the detail in the center\n   and avoid it in the edges.\n1. Output the candidate crop with the highest rank\n\n## Face detection\n\nThe smartcrop algorithm itself is designed to be simple, relatively fast, small and generic.\n\nIn many cases it does make sense to add face detection to it to ensure faces get the priority they deserve.\n\nThere are multiple javascript libraries which can be easily integrated into smartcrop.js.\n\n- [ccv js](https://github.com/liuliu/ccv) / [jquery.facedetection](http://facedetection.jaysalvat.com/)\n- [tracking.js](https://trackingjs.com/examples/face_hello_world.html)\n- [opencv.js](https://docs.opencv.org/3.3.1/d5/d10/tutorial_js_root.html)\n- [node-opencv](https://github.com/peterbraden/node-opencv)\n\nYou can experiment with all of these in the [smartcrop.js testbed](https://29a.ch/sandbox/2014/smartcrop/examples/testbed.html)\n\nOn the client side I would recommend using tracking.js because it's small and simple. Opencv.js is compiled from c++ and very heavy (~7.6MB of javascript + 900kb of data).\njquery.facedetection has dependency on jquery and from my limited experience seems to perform worse than the others.\n\nOn the server side node-opencv can be quicker but comes with some [annoying issues](https://github.com/peterbraden/node-opencv/issues/415) as well.\n\nIt's also worth noting that all of these libraries are based on the now dated [viola-jones](https://en.wikipedia.org/wiki/Viola%E2%80%93Jones_object_detection_framework) object detection framework.\nIt would be interesting to see how more [state of the art](http://mmlab.ie.cuhk.edu.hk/projects/WIDERFace/WiderFace_Results.html) techniques could be implemented in browser friendly javascript.\n\n## Supported Module Formats\n\n- CommonJS\n- AMD\n- global export / window\n\n## Supported Browsers\n\nSee [caniuse.com/canvas](http://caniuse.com/canvas).\nA [polyfill](https://github.com/taylorhakes/promise-polyfill) for\n[Promises](http://caniuse.com/#feat=promises) is recommended if you need to support old browsers.\n\n## API\n\n### smartcrop.crop(image, options)\n\nFind the best crop for _image_ using _options_.\n\n**image:** anything ctx.drawImage() accepts, usually HTMLImageElement, HTMLCanvasElement or HTMLVideoElement.\n\nKeep in mind that [origin policies](https://en.wikipedia.org/wiki/Same-origin_policy) apply to the image source.\nYou may not use cross-domain images without [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing) clearance.\n\n**options:** [cropOptions](#cropOptions)\n\n**returns:** A promise for a [cropResult](#cropResult).\n\n### cropOptions\n\n**minScale:** minimal scale of the crop rect, set to 1.0 to prevent smaller than necessary crops (lowers the risk of chopping things off).\n\n**width:** width of the crop you want to use.\n\n**height:** height of the crop you want to use.\n\n**boost:** optional array of regions whose 'interestingness' you want to boost (for example faces). See [boost](#boost);\n\n**ruleOfThirds:** optional boolean if set to false it will turn off the rule of thirds composition weight.\n\n**debug _(internal)_:** if true, cropResults will contain a debugCanvas and the complete results array.\n\nThere are many more (for now undocumented) options available.\nCheck the [source](smartcrop.js#L32) and be advised that they might change in the future.\n\n### cropResult\n\nResult of the promise returned by smartcrop.crop.\n\n```javascript\n{\n  topCrop: crop;\n}\n```\n\n### crop\n\nAn individual crop.\n\n```javascript\n{\n  x: 11, // pixels from the left side\n  y: 20, // pixels from the top\n  width: 1, // pixels\n  height: 1 // pixels\n}\n```\n\n### boost\n\nDescribes a region to boost. A usage example of this is to take\ninto account faces in the image. See [smartcrop-cli](https://github.com/jwagner/smartcrop-cli) for an example on how to integrate face detection.\n\n```javascript\n{\n  x: 11, // pixels from the left side\n  y: 20, // pixels from the top\n  width: 32, // pixels\n  height: 32, // pixels\n  weight: 1 // in the range [0, 1]\n}\n```\n\nNote that the impact the boost has is proportional to it's weight and area.\n\n## Tests\n\nYou can run the tests using `grunt test`. Alternatively you can also just run grunt (the default task) and open <http://localhost:8000/test/.>\n\n## Benchmark\n\nThere are benchmarks for both the browser (test/benchmark.html) and node (node test/benchmark-node.js [requires node-canvas])\nboth powered by [benchmark.js](http://benchmarkjs.com).\n\nIf you just want some rough numbers: It takes **< 20 ms** to find a **square crop** of a **640x427px** picture on an i7.\nIn other words, it's fine to run it on one image, it's suboptimal to run it on an entire gallery on page load.\n\n## Contributors\n\n- [Christian Muehlhaeuser](https://github.com/muesli)\n\n## Ports, Alternatives\n\n- [connect-thumbs](https://github.com/inadarei/connect-thumbs) Middleware for connect.js that supports smartcrop.js by [Irakli Nadareishvili](https://github.com/inadarei/connect-thumbs)\n- [smartcrop-java](https://github.com/QuadFlask/smartcrop-java) by [QuadFlask](https://github.com/QuadFlask/)\n- [smartcrop-android](https://github.com/QuadFlask/smartcrop-android) by [QuadFlask](https://github.com/QuadFlask/)\n- [smartcrop.go](https://github.com/muesli/smartcrop) by [Christian Muehlhaeuser](https://github.com/muesli)\n- [smartcrop.py](https://github.com/hhatto/smartcrop.py) by [Hideo Hattori](http://www.hexacosa.net/about/)\n- [smartcrop-rails](https://github.com/sadiqmmm/smartcrop-rails) smartcrop wrapped in a ruby gem by [Mohammed Sadiq](https://github.com/sadiqmmm/)\n- [smartcrop.net](https://github.com/softawaregmbh/smartcrop.net) c# .net port by [softaware gmbh](https://www.softaware.at/)\n- [dont-crop](https://github.com/jwagner/dont-crop/) a library to avoid cropping by padding images with matching colors or gradients\n\n## Version history\n\n### 2.0.5\nFix `TS1046: Top-level declarations in .d.ts files must start with either a 'declare' or 'export' modifier.`.\n\n### 2.0.4\nTypescript type definitions.\n\n### 2.0.2\n\nIn short: It's a lot faster when calculating bigger crops.\nThe quality of the crops should be comparable but the results\nare going to be different so this will be a major release.\n\n### 1.1.1\n\nRemoved useless files from npm package.\n\n### 1.1\n\nCreating github releases. Added options.input which is getting passed along to iop.open.\n\n### 1.0\n\nRefactoring/cleanup to make it easier to use with node.js (dropping the node-canvas dependency) and enable support for boosts which can be used to do face detection.\nThis is a 1.0 in the semantic meaning (denoting backwards incompatible API changes).\nIt does not denote a finished product.\n\n## License\n\nCopyright (c) 2018 Jonas Wagner, licensed under the MIT License (enclosed)\n",
        "releases": [
            {
                "name": "v2.0.5",
                "date": "2021-09-01T18:04:39Z"
            },
            {
                "name": "Type Definitions",
                "date": "2021-07-24T17:39:09Z"
            },
            {
                "name": null,
                "date": "2018-04-25T21:13:10Z"
            },
            {
                "name": "",
                "date": "2018-02-10T15:37:46Z"
            },
            {
                "name": "Getting rid of useless files in npm package",
                "date": "2016-09-16T19:38:19Z"
            },
            {
                "name": null,
                "date": "2016-07-11T20:53:01Z"
            }
        ]
    }
}