{
    "https://api.github.com/repos/tj/commander.js": {
        "forks": 1698,
        "watchers": 26971,
        "stars": 26971,
        "languages": {
            "JavaScript": 538874,
            "TypeScript": 25188
        },
        "commits": [
            "2025-01-20T23:28:00Z",
            "2025-01-20T23:25:54Z",
            "2025-01-17T08:44:30Z",
            "2025-01-13T04:30:14Z",
            "2025-01-10T03:01:07Z",
            "2024-12-30T05:25:32Z",
            "2024-12-30T05:24:17Z",
            "2024-12-30T02:09:12Z",
            "2024-12-27T01:51:31Z",
            "2024-12-14T21:16:03Z",
            "2024-12-08T01:47:27Z",
            "2024-12-08T01:45:29Z",
            "2024-12-06T23:10:32Z",
            "2024-12-06T19:51:46Z",
            "2024-11-26T19:40:18Z",
            "2024-11-26T19:39:37Z",
            "2024-11-21T23:43:30Z",
            "2024-11-10T09:33:28Z",
            "2024-11-05T00:04:30Z",
            "2024-11-05T00:04:21Z",
            "2024-11-05T00:04:11Z",
            "2024-11-05T00:03:55Z",
            "2024-11-03T00:30:07Z",
            "2024-10-29T08:34:23Z",
            "2024-10-13T01:29:47Z",
            "2024-10-11T23:37:39Z",
            "2024-10-06T02:04:18Z",
            "2024-10-06T01:34:18Z",
            "2024-10-06T01:33:41Z",
            "2024-10-06T01:33:30Z"
        ],
        "creation_date": "2011-08-14T21:33:58Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 233,
        "readme": "# Commander.js\n\n[![Build Status](https://github.com/tj/commander.js/workflows/build/badge.svg)](https://github.com/tj/commander.js/actions?query=workflow%3A%22build%22)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Install Size](https://packagephobia.now.sh/badge?p=commander)](https://packagephobia.now.sh/result?p=commander)\n\nThe complete solution for [node.js](http://nodejs.org) command-line interfaces.\n\nRead this in other languages: English | [\u7b80\u4f53\u4e2d\u6587](./Readme_zh-CN.md)\n\n- [Commander.js](#commanderjs)\n  - [Installation](#installation)\n  - [Quick Start](#quick-start)\n  - [Declaring _program_ variable](#declaring-program-variable)\n  - [Options](#options)\n    - [Common option types, boolean and value](#common-option-types-boolean-and-value)\n    - [Default option value](#default-option-value)\n    - [Other option types, negatable boolean and boolean|value](#other-option-types-negatable-boolean-and-booleanvalue)\n    - [Required option](#required-option)\n    - [Variadic option](#variadic-option)\n    - [Version option](#version-option)\n    - [More configuration](#more-configuration)\n    - [Custom option processing](#custom-option-processing)\n  - [Commands](#commands)\n    - [Command-arguments](#command-arguments)\n      - [More configuration](#more-configuration-1)\n      - [Custom argument processing](#custom-argument-processing)\n    - [Action handler](#action-handler)\n    - [Stand-alone executable (sub)commands](#stand-alone-executable-subcommands)\n    - [Life cycle hooks](#life-cycle-hooks)\n  - [Automated help](#automated-help)\n    - [Custom help](#custom-help)\n    - [Display help after errors](#display-help-after-errors)\n    - [Display help from code](#display-help-from-code)\n    - [.name](#name)\n    - [.usage](#usage)\n    - [.description and .summary](#description-and-summary)\n    - [.helpOption(flags, description)](#helpoptionflags-description)\n    - [.helpCommand()](#helpcommand)\n    - [More configuration](#more-configuration-2)\n  - [Custom event listeners](#custom-event-listeners)\n  - [Bits and pieces](#bits-and-pieces)\n    - [.parse() and .parseAsync()](#parse-and-parseasync)\n    - [Parsing Configuration](#parsing-configuration)\n    - [Legacy options as properties](#legacy-options-as-properties)\n    - [TypeScript](#typescript)\n    - [createCommand()](#createcommand)\n    - [Node options such as `--harmony`](#node-options-such-as---harmony)\n    - [Debugging stand-alone executable subcommands](#debugging-stand-alone-executable-subcommands)\n    - [npm run-script](#npm-run-script)\n    - [Display error](#display-error)\n    - [Override exit and output handling](#override-exit-and-output-handling)\n    - [Additional documentation](#additional-documentation)\n  - [Support](#support)\n    - [Commander for enterprise](#commander-for-enterprise)\n\nFor information about terms used in this document see: [terminology](./docs/terminology.md)\n\n## Installation\n\n```sh\nnpm install commander\n```\n\n## Quick Start\n\nYou write code to describe your command line interface.\nCommander looks after parsing the arguments into options and command-arguments,\ndisplays usage errors for problems, and implements a help system.\n\nCommander is strict and displays an error for unrecognised options.\nThe two most used option types are a boolean option, and an option which takes its value from the following argument.\n\nExample file: [split.js](./examples/split.js)\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .option('--first')\n  .option('-s, --separator <char>')\n  .argument('<string>');\n\nprogram.parse();\n\nconst options = program.opts();\nconst limit = options.first ? 1 : undefined;\nconsole.log(program.args[0].split(options.separator, limit));\n```\n\n```console\n$ node split.js -s / --fits a/b/c\nerror: unknown option '--fits'\n(Did you mean --first?)\n$ node split.js -s / --first a/b/c\n[ 'a' ]\n```\n\nHere is a more complete program using a subcommand and with descriptions for the help. In a multi-command program, you have an action handler for each command (or stand-alone executables for the commands).\n\nExample file: [string-util.js](./examples/string-util.js)\n\n```js\nconst { Command } = require('commander');\nconst program = new Command();\n\nprogram\n  .name('string-util')\n  .description('CLI to some JavaScript string utilities')\n  .version('0.8.0');\n\nprogram.command('split')\n  .description('Split a string into substrings and display as an array')\n  .argument('<string>', 'string to split')\n  .option('--first', 'display just the first substring')\n  .option('-s, --separator <char>', 'separator character', ',')\n  .action((str, options) => {\n    const limit = options.first ? 1 : undefined;\n    console.log(str.split(options.separator, limit));\n  });\n\nprogram.parse();\n```\n\n```console\n$ node string-util.js help split\nUsage: string-util split [options] <string>\n\nSplit a string into substrings and display as an array.\n\nArguments:\n  string                  string to split\n\nOptions:\n  --first                 display just the first substring\n  -s, --separator <char>  separator character (default: \",\")\n  -h, --help              display help for command\n\n$ node string-util.js split --separator=/ a/b/c\n[ 'a', 'b', 'c' ]\n```\n\nMore samples can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## Declaring _program_ variable\n\nCommander exports a global object which is convenient for quick programs.\nThis is used in the examples in this README for brevity.\n\n```js\n// CommonJS (.cjs)\nconst { program } = require('commander');\n```\n\nFor larger programs which may use commander in multiple ways, including unit testing, it is better to create a local Command object to use.\n\n```js\n// CommonJS (.cjs)\nconst { Command } = require('commander');\nconst program = new Command();\n```\n\n```js\n// ECMAScript (.mjs)\nimport { Command } from 'commander';\nconst program = new Command();\n```\n\n```ts\n// TypeScript (.ts)\nimport { Command } from 'commander';\nconst program = new Command();\n```\n\n## Options\n\nOptions are defined with the `.option()` method, also serving as documentation for the options. Each option can have a short flag (single character) and a long name, separated by a comma or space or vertical bar ('|'). To allow a wider range of short-ish flags than just\nsingle characters, you may also have two long options. Examples:\n\n```js\nprogram\n  .option('-p, --port <number>', 'server port number')\n  .option('--trace', 'add extra debugging output')\n  .option('--ws, --workspace <name>', 'use a custom workspace')\n```\n\nThe parsed options can be accessed by calling `.opts()` on a `Command` object, and are passed to the action handler.\n\nMulti-word options such as \"--template-engine\" are camel-cased, becoming `program.opts().templateEngine` etc.\n\nAn option and its option-argument can be separated by a space, or combined into the same argument. The option-argument can follow the short option directly or follow an `=` for a long option.\n\n```sh\nserve -p 80\nserve -p80\nserve --port 80\nserve --port=80\n```\n\nYou can use `--` to indicate the end of the options, and any remaining arguments will be used without being interpreted.\n\nBy default, options on the command line are not positional, and can be specified before or after other arguments.\n\nThere are additional related routines for when `.opts()` is not enough:\n\n- `.optsWithGlobals()` returns merged local and global option values\n- `.getOptionValue()` and `.setOptionValue()` work with a single option value\n- `.getOptionValueSource()` and `.setOptionValueWithSource()` include where the option value came from\n\n### Common option types, boolean and value\n\nThe two most used option types are a boolean option, and an option which takes its value\nfrom the following argument (declared with angle brackets like `--expect <value>`). Both are `undefined` unless specified on command line.\n\nExample file: [options-common.js](./examples/options-common.js)\n\n```js\nprogram\n  .option('-d, --debug', 'output extra debugging')\n  .option('-s, --small', 'small pizza size')\n  .option('-p, --pizza-type <type>', 'flavour of pizza');\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\nif (options.debug) console.log(options);\nconsole.log('pizza details:');\nif (options.small) console.log('- small pizza size');\nif (options.pizzaType) console.log(`- ${options.pizzaType}`);\n```\n\n```console\n$ pizza-options -p\nerror: option '-p, --pizza-type <type>' argument missing\n$ pizza-options -d -s -p vegetarian\n{ debug: true, small: true, pizzaType: 'vegetarian' }\npizza details:\n- small pizza size\n- vegetarian\n$ pizza-options --pizza-type=cheese\npizza details:\n- cheese\n```\n\nMultiple boolean short options may be combined following the dash, and may be followed by a single short option taking a value.\nFor example `-d -s -p cheese` may be written as `-ds -p cheese` or even `-dsp cheese`.\n\nOptions with an expected option-argument are greedy and will consume the following argument whatever the value.\nSo `--id -xyz` reads `-xyz` as the option-argument.\n\n`program.parse(arguments)` processes the arguments, leaving any args not consumed by the program options in the `program.args` array. The parameter is optional and defaults to `process.argv`.\n\n### Default option value\n\nYou can specify a default value for an option.\n\nExample file: [options-defaults.js](./examples/options-defaults.js)\n\n```js\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\n\nprogram.parse();\n\nconsole.log(`cheese: ${program.opts().cheese}`);\n```\n\n```console\n$ pizza-options\ncheese: blue\n$ pizza-options --cheese stilton\ncheese: stilton\n```\n\n### Other option types, negatable boolean and boolean|value\n\nYou can define a boolean option long name with a leading `no-` to set the option value to false when used.\nDefined alone this also makes the option true by default.\n\nIf you define `--foo` first, adding `--no-foo` does not change the default value from what it would\notherwise be.\n\nExample file: [options-negatable.js](./examples/options-negatable.js)\n\n```js\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')\n  .option('--no-cheese', 'plain with no cheese')\n  .parse();\n\nconst options = program.opts();\nconst sauceStr = options.sauce ? 'sauce' : 'no sauce';\nconst cheeseStr = (options.cheese === false) ? 'no cheese' : `${options.cheese} cheese`;\nconsole.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);\n```\n\n```console\n$ pizza-options\nYou ordered a pizza with sauce and mozzarella cheese\n$ pizza-options --sauce\nerror: unknown option '--sauce'\n$ pizza-options --cheese=blue\nYou ordered a pizza with sauce and blue cheese\n$ pizza-options --no-sauce --no-cheese\nYou ordered a pizza with no sauce and no cheese\n```\n\nYou can specify an option which may be used as a boolean option but may optionally take an option-argument\n(declared with square brackets like `--optional [value]`).\n\nExample file: [options-boolean-or-value.js](./examples/options-boolean-or-value.js)\n\n```js\nprogram\n  .option('-c, --cheese [type]', 'Add cheese with optional type');\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\nif (options.cheese === undefined) console.log('no cheese');\nelse if (options.cheese === true) console.log('add cheese');\nelse console.log(`add cheese type ${options.cheese}`);\n```\n\n```console\n$ pizza-options\nno cheese\n$ pizza-options --cheese\nadd cheese\n$ pizza-options --cheese mozzarella\nadd cheese type mozzarella\n```\n\nOptions with an optional option-argument are not greedy and will ignore arguments starting with a dash.\nSo `id` behaves as a boolean option for `--id -5`, but you can use a combined form if needed like `--id=-5`.\n\nFor information about possible ambiguous cases, see [options taking varying arguments](./docs/options-in-depth.md).\n\n### Required option\n\nYou may specify a required (mandatory) option using `.requiredOption()`. The option must have a value after parsing, usually specified on the command line, or perhaps from a default value (say from environment). The method is otherwise the same as `.option()` in format, taking flags and description, and optional default value or custom processing.\n\nExample file: [options-required.js](./examples/options-required.js)\n\n```js\nprogram\n  .requiredOption('-c, --cheese <type>', 'pizza must have cheese');\n\nprogram.parse();\n```\n\n```console\n$ pizza\nerror: required option '-c, --cheese <type>' not specified\n```\n\n### Variadic option\n\nYou may make an option variadic by appending `...` to the value placeholder when declaring the option. On the command line you\ncan then specify multiple option-arguments, and the parsed option value will be an array. The extra arguments\nare read until the first argument starting with a dash. The special argument `--` stops option processing entirely. If a value\nis specified in the same argument as the option then no further values are read.\n\nExample file: [options-variadic.js](./examples/options-variadic.js)\n\n```js\nprogram\n  .option('-n, --number <numbers...>', 'specify numbers')\n  .option('-l, --letter [letters...]', 'specify letters');\n\nprogram.parse();\n\nconsole.log('Options: ', program.opts());\nconsole.log('Remaining arguments: ', program.args);\n```\n\n```console\n$ collect -n 1 2 3 --letter a b c\nOptions:  { number: [ '1', '2', '3' ], letter: [ 'a', 'b', 'c' ] }\nRemaining arguments:  []\n$ collect --letter=A -n80 operand\nOptions:  { number: [ '80' ], letter: [ 'A' ] }\nRemaining arguments:  [ 'operand' ]\n$ collect --letter -n 1 -n 2 3 -- operand\nOptions:  { number: [ '1', '2', '3' ], letter: true }\nRemaining arguments:  [ 'operand' ]\n```\n\nFor information about possible ambiguous cases, see [options taking varying arguments](./docs/options-in-depth.md).\n\n### Version option\n\nThe optional `version` method adds handling for displaying the command version. The default option flags are `-V` and `--version`, and when present the command prints the version number and exits.\n\n```js\nprogram.version('0.0.1');\n```\n\n```console\n$ ./examples/pizza -V\n0.0.1\n```\n\nYou may change the flags and description by passing additional parameters to the `version` method, using\nthe same syntax for flags as the `option` method.\n\n```js\nprogram.version('0.0.1', '-v, --vers', 'output the current version');\n```\n\n### More configuration\n\nYou can add most options using the `.option()` method, but there are some additional features available\nby constructing an `Option` explicitly for less common cases.\n\nExample files: [options-extra.js](./examples/options-extra.js), [options-env.js](./examples/options-env.js), [options-conflicts.js](./examples/options-conflicts.js), [options-implies.js](./examples/options-implies.js)\n\n```js\nprogram\n  .addOption(new Option('-s, --secret').hideHelp())\n  .addOption(new Option('-t, --timeout <delay>', 'timeout in seconds').default(60, 'one minute'))\n  .addOption(new Option('-d, --drink <size>', 'drink size').choices(['small', 'medium', 'large']))\n  .addOption(new Option('-p, --port <number>', 'port number').env('PORT'))\n  .addOption(new Option('--donate [amount]', 'optional donation in dollars').preset('20').argParser(parseFloat))\n  .addOption(new Option('--disable-server', 'disables the server').conflicts('port'))\n  .addOption(new Option('--free-drink', 'small drink included free ').implies({ drink: 'small' }));\n```\n\n```console\n$ extra --help\nUsage: help [options]\n\nOptions:\n  -t, --timeout <delay>  timeout in seconds (default: one minute)\n  -d, --drink <size>     drink cup size (choices: \"small\", \"medium\", \"large\")\n  -p, --port <number>    port number (env: PORT)\n  --donate [amount]      optional donation in dollars (preset: \"20\")\n  --disable-server       disables the server\n  --free-drink           small drink included free\n  -h, --help             display help for command\n\n$ extra --drink huge\nerror: option '-d, --drink <size>' argument 'huge' is invalid. Allowed choices are small, medium, large.\n\n$ PORT=80 extra --donate --free-drink\nOptions:  { timeout: 60, donate: 20, port: '80', freeDrink: true, drink: 'small' }\n\n$ extra --disable-server --port 8000\nerror: option '--disable-server' cannot be used with option '-p, --port <number>'\n```\n\nSpecify a required (mandatory) option using the `Option` method `.makeOptionMandatory()`. This matches the `Command` method [.requiredOption()](#required-option).\n\n### Custom option processing\n\nYou may specify a function to do custom processing of option-arguments. The callback function receives two parameters,\nthe user specified option-argument and the previous value for the option. It returns the new value for the option.\n\nThis allows you to coerce the option-argument to the desired type, or accumulate values, or do entirely custom processing.\n\nYou can optionally specify the default/starting value for the option after the function parameter.\n\nExample file: [options-custom-processing.js](./examples/options-custom-processing.js)\n\n```js\nfunction myParseInt(value, dummyPrevious) {\n  // parseInt takes a string and a radix\n  const parsedValue = parseInt(value, 10);\n  if (isNaN(parsedValue)) {\n    throw new commander.InvalidArgumentError('Not a number.');\n  }\n  return parsedValue;\n}\n\nfunction increaseVerbosity(dummyValue, previous) {\n  return previous + 1;\n}\n\nfunction collect(value, previous) {\n  return previous.concat([value]);\n}\n\nfunction commaSeparatedList(value, dummyPrevious) {\n  return value.split(',');\n}\n\nprogram\n  .option('-f, --float <number>', 'float argument', parseFloat)\n  .option('-i, --integer <number>', 'integer argument', myParseInt)\n  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)\n  .option('-c, --collect <value>', 'repeatable value', collect, [])\n  .option('-l, --list <items>', 'comma separated list', commaSeparatedList)\n;\n\nprogram.parse();\n\nconst options = program.opts();\nif (options.float !== undefined) console.log(`float: ${options.float}`);\nif (options.integer !== undefined) console.log(`integer: ${options.integer}`);\nif (options.verbose > 0) console.log(`verbosity: ${options.verbose}`);\nif (options.collect.length > 0) console.log(options.collect);\nif (options.list !== undefined) console.log(options.list);\n```\n\n```console\n$ custom -f 1e2\nfloat: 100\n$ custom --integer 2\ninteger: 2\n$ custom -v -v -v\nverbose: 3\n$ custom -c a -c b -c c\n[ 'a', 'b', 'c' ]\n$ custom --list x,y,z\n[ 'x', 'y', 'z' ]\n```\n\n## Commands\n\nYou can specify (sub)commands using `.command()` or `.addCommand()`. There are two ways these can be implemented: using an action handler attached to the command, or as a stand-alone executable file (described in more detail later). The subcommands may be nested ([example](./examples/nestedCommands.js)).\n\nIn the first parameter to `.command()` you specify the command name. You may append the command-arguments after the command name, or specify them separately using `.argument()`. The arguments may be `<required>` or `[optional]`, and the last argument may also be `variadic...`.\n\nYou can use `.addCommand()` to add an already configured subcommand to the program.\n\nFor example:\n\n```js\n// Command implemented using action handler (description is supplied separately to `.command`)\n// Returns new command for configuring.\nprogram\n  .command('clone <source> [destination]')\n  .description('clone a repository into a newly created directory')\n  .action((source, destination) => {\n    console.log('clone command called');\n  });\n\n// Command implemented using stand-alone executable file, indicated by adding description as second parameter to `.command`.\n// Returns `this` for adding more commands.\nprogram\n  .command('start <service>', 'start named service')\n  .command('stop [service]', 'stop named service, or all if no name supplied');\n\n// Command prepared separately.\n// Returns `this` for adding more commands.\nprogram\n  .addCommand(build.makeBuildCommand());\n```\n\nConfiguration options can be passed with the call to `.command()` and `.addCommand()`. Specifying `hidden: true` will\nremove the command from the generated help output. Specifying `isDefault: true` will run the subcommand if no other\nsubcommand is specified ([example](./examples/defaultCommand.js)).\n\nYou can add alternative names for a command with `.alias()`. ([example](./examples/alias.js))\n\n`.command()` automatically copies the inherited settings from the parent command to the newly created subcommand. This is only done during creation, any later setting changes to the parent are not inherited.\n\nFor safety, `.addCommand()` does not automatically copy the inherited settings from the parent command. There is a helper routine `.copyInheritedSettings()` for copying the settings when they are wanted.\n\n### Command-arguments\n\nFor subcommands, you can specify the argument syntax in the call to `.command()` (as shown above). This\nis the only method usable for subcommands implemented using a stand-alone executable, but for other subcommands\nyou can instead use the following method.\n\nTo configure a command, you can use `.argument()` to specify each expected command-argument.\nYou supply the argument name and an optional description. The argument may be `<required>` or `[optional]`.\nYou can specify a default value for an optional command-argument.\n\nExample file: [argument.js](./examples/argument.js)\n\n```js\nprogram\n  .version('0.1.0')\n  .argument('<username>', 'user to login')\n  .argument('[password]', 'password for user, if required', 'no password given')\n  .action((username, password) => {\n    console.log('username:', username);\n    console.log('password:', password);\n  });\n```\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you\n append `...` to the argument name. A variadic argument is passed to the action handler as an array. For example:\n\n```js\nprogram\n  .version('0.1.0')\n  .command('rmdir')\n  .argument('<dirs...>')\n  .action(function (dirs) {\n    dirs.forEach((dir) => {\n      console.log('rmdir %s', dir);\n    });\n  });\n```\n\nThere is a convenience method to add multiple arguments at once, but without descriptions:\n\n```js\nprogram\n  .arguments('<username> <password>');\n```\n\n#### More configuration\n\nThere are some additional features available by constructing an `Argument` explicitly for less common cases.\n\nExample file: [arguments-extra.js](./examples/arguments-extra.js)\n\n```js\nprogram\n  .addArgument(new commander.Argument('<drink-size>', 'drink cup size').choices(['small', 'medium', 'large']))\n  .addArgument(new commander.Argument('[timeout]', 'timeout in seconds').default(60, 'one minute'))\n```\n\n#### Custom argument processing\n\nYou may specify a function to do custom processing of command-arguments (like for option-arguments).\nThe callback function receives two parameters, the user specified command-argument and the previous value for the argument.\nIt returns the new value for the argument.\n\nThe processed argument values are passed to the action handler, and saved as `.processedArgs`.\n\nYou can optionally specify the default/starting value for the argument after the function parameter.\n\nExample file: [arguments-custom-processing.js](./examples/arguments-custom-processing.js)\n\n```js\nprogram\n  .command('add')\n  .argument('<first>', 'integer argument', myParseInt)\n  .argument('[second]', 'integer argument', myParseInt, 1000)\n  .action((first, second) => {\n    console.log(`${first} + ${second} = ${first + second}`);\n  })\n;\n```\n\n### Action handler\n\nThe action handler gets passed a parameter for each command-argument you declared, and two additional parameters\nwhich are the parsed options and the command object itself.\n\nExample file: [thank.js](./examples/thank.js)\n\n```js\nprogram\n  .argument('<name>')\n  .option('-t, --title <honorific>', 'title to use before name')\n  .option('-d, --debug', 'display some debugging')\n  .action((name, options, command) => {\n    if (options.debug) {\n      console.error('Called %s with options %o', command.name(), options);\n    }\n    const title = options.title ? `${options.title} ` : '';\n    console.log(`Thank-you ${title}${name}`);\n  });\n```\n\nIf you prefer, you can work with the command directly and skip declaring the parameters for the action handler. The `this` keyword is set to the running command and can be used from a function expression (but not from an arrow function).\n\nExample file: [action-this.js](./examples/action-this.js)\n\n```js\nprogram\n  .command('serve')\n  .argument('<script>')\n  .option('-p, --port <number>', 'port number', 80)\n  .action(function() {\n    console.error('Run script %s on port %s', this.args[0], this.opts().port);\n  });\n```\n\nYou may supply an `async` action handler, in which case you call `.parseAsync` rather than `.parse`.\n\n```js\nasync function run() { /* code goes here */ }\n\nasync function main() {\n  program\n    .command('run')\n    .action(run);\n  await program.parseAsync(process.argv);\n}\n```\n\nA command's options and arguments on the command line are validated when the command is used. Any unknown options or missing arguments or excess arguments will be reported as an error. You can suppress the unknown option check with `.allowUnknownOption()`. You can suppress the excess arguments check with `.allowExcessArguments()`.\n\n### Stand-alone executable (sub)commands\n\nWhen `.command()` is invoked with a description argument, this tells Commander that you're going to use stand-alone executables for subcommands.\nCommander will search the files in the directory of the entry script for a file with the name combination `command-subcommand`, like `pm-install` or `pm-search` in the example below. The search includes trying common file extensions, like `.js`.\nYou may specify a custom name (and path) with the `executableFile` configuration option.\nYou may specify a custom search directory for subcommands with `.executableDir()`.\n\nYou handle the options for an executable (sub)command in the executable, and don't declare them at the top-level.\n\nExample file: [pm](./examples/pm)\n\n```js\nprogram\n  .name('pm')\n  .version('0.1.0')\n  .command('install [package-names...]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('update', 'update installed packages', { executableFile: 'myUpdateSubCommand' })\n  .command('list', 'list packages installed', { isDefault: true });\n\nprogram.parse(process.argv);\n```\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n### Life cycle hooks\n\nYou can add callback hooks to a command for life cycle events.\n\nExample file: [hook.js](./examples/hook.js)\n\n```js\nprogram\n  .option('-t, --trace', 'display trace statements for commands')\n  .hook('preAction', (thisCommand, actionCommand) => {\n    if (thisCommand.opts().trace) {\n      console.log(`About to call action handler for subcommand: ${actionCommand.name()}`);\n      console.log('arguments: %O', actionCommand.args);\n      console.log('options: %o', actionCommand.opts());\n    }\n  });\n```\n\nThe callback hook can be `async`, in which case you call `.parseAsync` rather than `.parse`. You can add multiple hooks per event.\n\nThe supported events are:\n\n| event name | when hook called | callback parameters |\n| :-- | :-- | :-- |\n| `preAction`, `postAction` |  before/after action handler for this command and its nested subcommands |   `(thisCommand, actionCommand)` |\n| `preSubcommand` | before parsing direct subcommand  | `(thisCommand, subcommand)` |\n\nFor an overview of the life cycle events see [parsing life cycle and hooks](./docs/parsing-and-hooks.md).\n\n## Automated help\n\nThe help information is auto-generated based on the information commander already knows about your program. The default\nhelp option is `-h,--help`.\n\nExample file: [pizza](./examples/pizza)\n\n```console\n$ node ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizza ordering\n\nOptions:\n  -p, --peppers        Add peppers\n  -c, --cheese <type>  Add the specified type of cheese (default: \"marble\")\n  -C, --no-cheese      You do not want any cheese\n  -h, --help           display help for command\n```\n\nA `help` command is added by default if your command has subcommands. It can be used alone, or with a subcommand name to show\nfurther help for the subcommand. These are effectively the same if the `shell` program has implicit help:\n\n```sh\nshell help\nshell --help\n\nshell help spawn\nshell spawn --help\n```\n\nLong descriptions are wrapped to fit the available width. (However, a description that includes a line-break followed by whitespace is assumed to be pre-formatted and not wrapped.)\n\n### Custom help\n\nYou can add extra text to be displayed along with the built-in help.\n\nExample file: [custom-help](./examples/custom-help)\n\n```js\nprogram\n  .option('-f, --foo', 'enable some foo');\n\nprogram.addHelpText('after', `\n\nExample call:\n  $ custom-help --help`);\n```\n\nYields the following help output:\n\n```Text\nUsage: custom-help [options]\n\nOptions:\n  -f, --foo   enable some foo\n  -h, --help  display help for command\n\nExample call:\n  $ custom-help --help\n```\n\nThe positions in order displayed are:\n\n- `beforeAll`: add to the program for a global banner or header\n- `before`: display extra information before built-in help\n- `after`: display extra information after built-in help\n- `afterAll`: add to the program for a global footer (epilog)\n\nThe positions \"beforeAll\" and \"afterAll\" apply to the command and all its subcommands.\n\nThe second parameter can be a string, or a function returning a string. The function is passed a context object for your convenience. The properties are:\n\n- error: a boolean for whether the help is being displayed due to a usage error\n- command: the Command which is displaying the help\n\n### Display help after errors\n\nThe default behaviour for usage errors is to just display a short error message.\nYou can change the behaviour to show the full help or a custom help message after an error.\n\n```js\nprogram.showHelpAfterError();\n// or\nprogram.showHelpAfterError('(add --help for additional information)');\n```\n\n```console\n$ pizza --unknown\nerror: unknown option '--unknown'\n(add --help for additional information)\n```\n\nThe default behaviour is to suggest correct spelling after an error for an unknown command or option. You\ncan disable this.\n\n```js\nprogram.showSuggestionAfterError(false);\n```\n\n```console\n$ pizza --hepl\nerror: unknown option '--hepl'\n(Did you mean --help?)\n```\n\n### Display help from code\n\n`.help()`: display help information and exit immediately. You can optionally pass `{ error: true }` to display on stderr and exit with an error status.\n\n`.outputHelp()`: output help information without exiting. You can optionally pass `{ error: true }` to display on stderr.\n\n`.helpInformation()`: get the built-in command help information as a string for processing or displaying yourself.\n\n### .name\n\nThe command name appears in the help, and is also used for locating stand-alone executable subcommands.\n\nYou may specify the program name using `.name()` or in the Command constructor. For the program, Commander will\nfall back to using the script name from the full arguments passed into `.parse()`. However, the script name varies\ndepending on how your program is launched, so you may wish to specify it explicitly.\n\n```js\nprogram.name('pizza');\nconst pm = new Command('pm');\n```\n\nSubcommands get a name when specified using `.command()`. If you create the subcommand yourself to use with `.addCommand()`,\nthen set the name using `.name()` or in the Command constructor.\n\n### .usage\n\nThis allows you to customise the usage description in the first line of the help. Given:\n\n```js\nprogram\n  .name(\"my-command\")\n  .usage(\"[global options] command\")\n```\n\nThe help will start with:\n\n```Text\nUsage: my-command [global options] command\n```\n\n### .description and .summary\n\nThe description appears in the help for the command. You can optionally supply a shorter\nsummary to use when listed as a subcommand of the program.\n\n```js\nprogram\n  .command(\"duplicate\")\n  .summary(\"make a copy\")\n  .description(`Make a copy of the current project.\nThis may require additional disk space.\n  `);\n```\n\n### .helpOption(flags, description)\n\nBy default, every command has a help option. You may change the default help flags and description. Pass false to disable the built-in help option.\n\n```js\nprogram\n  .helpOption('-e, --HELP', 'read more information');\n```\n\n(Or use `.addHelpOption()` to add an option you construct yourself.)\n\n### .helpCommand()\n\nA help command is added by default if your command has subcommands. You can explicitly turn on or off the implicit help command with `.helpCommand(true)` and `.helpCommand(false)`.\n\nYou can both turn on and customise the help command by supplying the name and description:\n\n```js\nprogram.helpCommand('assist [command]', 'show assistance');\n```\n\n(Or use `.addHelpCommand()` to add a command you construct yourself.)\n\n### More configuration\n\nThe built-in help is formatted using the Help class.\nYou can configure the help by modifying data properties and methods using `.configureHelp()`, or by subclassing Help using `.createHelp()` .\n\nSimple properties include `sortSubcommands`, `sortOptions`, and `showGlobalOptions`. You can add color using the style methods like `styleTitle()`.\n\nFor more detail and examples of changing the displayed text, color, and layout see (./docs/help-in-depth.md)\n\n## Custom event listeners\n\nYou can execute custom actions by listening to command and option events.\n\n```js\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.opts().verbose;\n});\n```\n\n## Bits and pieces\n\n### .parse() and .parseAsync()\n\nCall with no parameters to parse `process.argv`. Detects Electron and special node options like `node --eval`. Easy mode!\n\nOr call with an array of strings to parse, and optionally where the user arguments start by specifying where the arguments are `from`:\n\n- `'node'`: default, `argv[0]` is the application and `argv[1]` is the script being run, with user arguments after that\n- `'electron'`: `argv[0]` is the application and `argv[1]` varies depending on whether the electron application is packaged\n- `'user'`: just user arguments\n\nFor example:\n\n```js\nprogram.parse(); // parse process.argv and auto-detect electron and special node flags\nprogram.parse(process.argv); // assume argv[0] is app and argv[1] is script\nprogram.parse(['--port', '80'], { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n```\n\nUse parseAsync instead of parse if any of your action handlers are async.\n\n### Parsing Configuration\n\nIf the default parsing does not suit your needs, there are some behaviours to support other usage patterns.\n\nBy default, program options are recognised before and after subcommands. To only look for program options before subcommands, use `.enablePositionalOptions()`. This lets you use\nan option for a different purpose in subcommands.\n\nExample file: [positional-options.js](./examples/positional-options.js)\n\nWith positional options, the `-b` is a program option in the first line and a subcommand option in the second line:\n\n```sh\nprogram -b subcommand\nprogram subcommand -b\n```\n\nBy default, options are recognised before and after command-arguments. To only process options that come\nbefore the command-arguments, use `.passThroughOptions()`. This lets you pass the arguments and following options through to another program\nwithout needing to use `--` to end the option processing.\nTo use pass through options in a subcommand, the program needs to enable positional options.\n\nExample file: [pass-through-options.js](./examples/pass-through-options.js)\n\nWith pass through options, the `--port=80` is a program option in the first line and passed through as a command-argument in the second line:\n\n```sh\nprogram --port=80 arg\nprogram arg --port=80\n```\n\nBy default, the option processing shows an error for an unknown option. To have an unknown option treated as an ordinary command-argument and continue looking for options, use `.allowUnknownOption()`. This lets you mix known and unknown options.\n\nBy default, the argument processing does not display an error for more command-arguments than expected.\nTo display an error for excess arguments, use`.allowExcessArguments(false)`.\n\n### Legacy options as properties\n\nBefore Commander 7, the option values were stored as properties on the command.\nThis was convenient to code, but the downside was possible clashes with\nexisting properties of `Command`. You can revert to the old behaviour to run unmodified legacy code by using `.storeOptionsAsProperties()`.\n\n```js\nprogram\n  .storeOptionsAsProperties()\n  .option('-d, --debug')\n  .action((commandAndOptions) => {\n    if (commandAndOptions.debug) {\n      console.error(`Called ${commandAndOptions.name()}`);\n    }\n  });\n```\n\n### TypeScript\n\nextra-typings: There is an optional project to infer extra type information from the option and argument definitions.\nThis adds strong typing to the options returned by `.opts()` and the parameters to `.action()`.\nSee [commander-js/extra-typings](https://github.com/commander-js/extra-typings) for more.\n\n```\nimport { Command } from '@commander-js/extra-typings';\n```\n\nts-node: If you use `ts-node` and stand-alone executable subcommands written as `.ts` files, you need to call your program through node to get the subcommands called correctly. e.g.\n\n```sh\nnode -r ts-node/register pm.ts\n```\n\n### createCommand()\n\nThis factory function creates a new command. It is exported and may be used instead of using `new`, like:\n\n```js\nconst { createCommand } = require('commander');\nconst program = createCommand();\n```\n\n`createCommand` is also a method of the Command object, and creates a new command rather than a subcommand. This gets used internally\nwhen creating subcommands using `.command()`, and you may override it to\ncustomise the new subcommand (example file [custom-command-class.js](./examples/custom-command-class.js)).\n\n### Node options such as `--harmony`\n\nYou can enable `--harmony` option in two ways:\n\n- Use `#! /usr/bin/env node --harmony` in the subcommands scripts. (Note Windows does not support this pattern.)\n- Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning subcommand process.\n\n### Debugging stand-alone executable subcommands\n\nAn executable subcommand is launched as a separate child process.\n\nIf you are using the node inspector for [debugging](https://nodejs.org/en/docs/guides/debugging-getting-started/) executable subcommands using `node --inspect` et al.,\nthe inspector port is incremented by 1 for the spawned subcommand.\n\nIf you are using VSCode to debug executable subcommands you need to set the `\"autoAttachChildProcesses\": true` flag in your launch.json configuration.\n\n### npm run-script\n\nBy default, when you call your program using run-script, `npm` will parse any options on the command-line and they will not reach your program. Use\n `--` to stop the npm option parsing and pass through all the arguments.\n\n The synopsis for [npm run-script](https://docs.npmjs.com/cli/v9/commands/npm-run-script) explicitly shows the `--` for this reason:\n\n```console\nnpm run-script <command> [-- <args>]\n```\n\n### Display error\n\nThis routine is available to invoke the Commander error handling for your own error conditions. (See also the next section about exit handling.)\n\nAs well as the error message, you can optionally specify the `exitCode` (used with `process.exit`)\nand `code` (used with `CommanderError`).\n\n```js\nprogram.error('Password must be longer than four characters');\nprogram.error('Custom processing has failed', { exitCode: 2, code: 'my.custom.error' });\n```\n\n### Override exit and output handling\n\nBy default, Commander calls `process.exit` when it detects errors, or after displaying the help or version. You can override\nthis behaviour and optionally supply a callback. The default override throws a `CommanderError`.\n\nThe override callback is passed a `CommanderError` with properties `exitCode` number, `code` string, and `message`.\nCommander expects the callback to terminate the normal program flow, and will call `process.exit` if the callback returns.\nThe normal display of error messages or version or help is not affected by the override which is called after the display.\n\n```js\nprogram.exitOverride();\n\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  // custom processing...\n}\n```\n\nBy default, Commander is configured for a command-line application and writes to stdout and stderr.\nYou can modify this behaviour for custom applications. In addition, you can modify the display of error messages.\n\nExample file: [configure-output.js](./examples/configure-output.js)\n\n```js\nfunction errorColor(str) {\n  // Add ANSI escape codes to display text in red.\n  return `\\x1b[31m${str}\\x1b[0m`;\n}\n\nprogram\n  .configureOutput({\n    // Visibly override write routines as example!\n    writeOut: (str) => process.stdout.write(`[OUT] ${str}`),\n    writeErr: (str) => process.stdout.write(`[ERR] ${str}`),\n    // Highlight errors in color.\n    outputError: (str, write) => write(errorColor(str))\n  });\n```\n\n### Additional documentation\n\nThere is more information available about:\n\n- [deprecated](./docs/deprecated.md) features still supported for backwards compatibility\n- [options taking varying arguments](./docs/options-in-depth.md)\n- [parsing life cycle and hooks](./docs/parsing-and-hooks.md)\n\n## Support\n\nThe current version of Commander is fully supported on Long Term Support versions of Node.js, and requires at least v18.\n(For older versions of Node.js, use an older version of Commander.)\n\nThe main forum for free and community support is the project [Issues](https://github.com/tj/commander.js/issues) on GitHub.\n\n### Commander for enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of Commander and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-commander?utm_source=npm-commander&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n",
        "releases": [
            {
                "name": "",
                "date": "2025-01-20T23:31:01Z"
            },
            {
                "name": "",
                "date": "2024-12-30T05:30:34Z"
            },
            {
                "name": "v13.0.0-0",
                "date": "2024-12-06T23:14:45Z"
            },
            {
                "name": "",
                "date": "2024-05-18T11:18:57Z"
            },
            {
                "name": "v12.0.0",
                "date": "2024-02-03T09:46:10Z"
            },
            {
                "name": "v12.0.0-1",
                "date": "2024-01-19T20:17:25Z"
            },
            {
                "name": "v12.0.0-0 Prerelease",
                "date": "2023-11-11T05:46:25Z"
            },
            {
                "name": "v11.1.0",
                "date": "2023-10-13T00:32:47Z"
            },
            {
                "name": "v11.0.0",
                "date": "2023-06-16T00:50:24Z"
            },
            {
                "name": "v10.0.1",
                "date": "2023-04-15T05:02:58Z"
            },
            {
                "name": "v10.0.0",
                "date": "2023-01-14T01:54:42Z"
            },
            {
                "name": "v9.5.0",
                "date": "2023-01-07T07:07:23Z"
            },
            {
                "name": "v9.4.1",
                "date": "2022-09-30T07:29:16Z"
            },
            {
                "name": "v9.4.0",
                "date": "2022-07-15T06:21:02Z"
            },
            {
                "name": "v9.3.0",
                "date": "2022-05-28T02:49:03Z"
            },
            {
                "name": "v9.2.0",
                "date": "2022-04-15T07:12:21Z"
            },
            {
                "name": "v9.1.0",
                "date": "2022-03-18T05:57:17Z"
            },
            {
                "name": "v9.0.0",
                "date": "2022-01-29T00:32:05Z"
            },
            {
                "name": "9.0.0-1",
                "date": "2022-01-14T20:35:03Z"
            },
            {
                "name": "9.0.0-0",
                "date": "2021-12-22T05:47:49Z"
            },
            {
                "name": "v8.3.0",
                "date": "2021-10-22T07:03:47Z"
            },
            {
                "name": "v8.2.0",
                "date": "2021-09-10T07:01:39Z"
            },
            {
                "name": "v8.1.0",
                "date": "2021-07-27T03:57:15Z"
            },
            {
                "name": "v8.0.0",
                "date": "2021-06-25T08:25:57Z"
            },
            {
                "name": "8.0.0-2",
                "date": "2021-06-06T04:37:45Z"
            },
            {
                "name": "8.0.0-1",
                "date": "2021-05-31T07:33:17Z"
            },
            {
                "name": "8.0.0-0",
                "date": "2021-05-22T23:34:10Z"
            },
            {
                "name": "v7.2.0",
                "date": "2021-03-21T21:57:26Z"
            },
            {
                "name": "v7.1.0",
                "date": "2021-02-15T07:25:30Z"
            },
            {
                "name": "v7.0.0",
                "date": "2021-01-15T09:49:29Z"
            },
            {
                "name": "7.0.0-2",
                "date": "2020-12-14T07:54:11Z"
            },
            {
                "name": "v6.2.1",
                "date": "2020-12-14T00:48:09Z"
            },
            {
                "name": "v7.0.0-1",
                "date": "2020-11-21T21:33:21Z"
            },
            {
                "name": "v7.0.0-0",
                "date": "2020-10-25T04:53:55Z"
            },
            {
                "name": "v6.2.0",
                "date": "2020-10-25T02:38:51Z"
            },
            {
                "name": "v6.1.0",
                "date": "2020-08-28T01:24:08Z"
            },
            {
                "name": "v6.0.0",
                "date": "2020-07-19T14:02:27Z"
            },
            {
                "name": "v6.0.0-0",
                "date": "2020-06-20T06:06:27Z"
            },
            {
                "name": "v5.1.0",
                "date": "2020-04-25T02:29:58Z"
            },
            {
                "name": "v5.0.0",
                "date": "2020-03-14T01:10:22Z"
            },
            {
                "name": "v5.0.0-4",
                "date": "2020-03-03T05:37:03Z"
            },
            {
                "name": "v5.0.0-3",
                "date": "2020-02-20T07:38:26Z"
            },
            {
                "name": "v5.0.0-2",
                "date": "2020-02-11T10:00:42Z"
            },
            {
                "name": "v5.0.0-1 Prerelease",
                "date": "2020-02-08T20:52:49Z"
            },
            {
                "name": "v4.1.1",
                "date": "2020-02-03T06:16:53Z"
            },
            {
                "name": "v5.0.0-0 Pre-release",
                "date": "2020-02-01T03:48:07Z"
            },
            {
                "name": "v4.1.0",
                "date": "2020-01-06T09:18:51Z"
            },
            {
                "name": "v4.0.1",
                "date": "2019-11-11T09:20:29Z"
            },
            {
                "name": "v4.0.0",
                "date": "2019-11-01T10:11:17Z"
            },
            {
                "name": "v2.20.3",
                "date": "2019-10-11T05:44:27Z"
            },
            {
                "name": "v4.0.0-1 Prerelease",
                "date": "2019-10-08T01:30:08Z"
            },
            {
                "name": "v4.0.0-0 Prerelease",
                "date": "2019-10-01T08:49:07Z"
            },
            {
                "name": "v2.20.1",
                "date": "2019-09-28T22:08:11Z"
            },
            {
                "name": "v3.0.2",
                "date": "2019-09-26T09:18:55Z"
            },
            {
                "name": "v3.0.1",
                "date": "2019-08-30T08:44:38Z"
            },
            {
                "name": "v3.0.0",
                "date": "2019-08-08T06:32:27Z"
            },
            {
                "name": "v3.0.0-0 Prerelease",
                "date": "2019-07-28T08:46:51Z"
            },
            {
                "name": "v2.20.0",
                "date": "2019-04-03T00:41:10Z"
            },
            {
                "name": "v2.19.0",
                "date": "2018-10-08T21:50:59Z"
            },
            {
                "name": "v2.18.0",
                "date": "2018-09-07T10:28:11Z"
            },
            {
                "name": "v2.17.1",
                "date": "2018-08-07T11:20:15Z"
            },
            {
                "name": "v2.17.0",
                "date": "2018-08-04T00:09:19Z"
            },
            {
                "name": "v2.16.0",
                "date": "2018-06-29T09:41:36Z"
            },
            {
                "name": "v2.15.1",
                "date": "2018-03-20T01:48:57Z"
            },
            {
                "name": "v2.15.0",
                "date": "2018-03-08T01:12:41Z"
            },
            {
                "name": "v2.14.1",
                "date": "2018-02-07T07:43:40Z"
            },
            {
                "name": "v2.14.0",
                "date": "2018-02-06T01:24:32Z"
            },
            {
                "name": "v2.13.0",
                "date": "2018-01-11T07:10:58Z"
            },
            {
                "name": "v2.12.2",
                "date": "2017-11-28T07:08:48Z"
            },
            {
                "name": "v2.12.1",
                "date": "2017-11-23T10:20:47Z"
            },
            {
                "name": "v2.12.0",
                "date": "2017-11-22T23:06:57Z"
            },
            {
                "name": "Release V2.11.0",
                "date": "2017-07-03T10:08:15Z"
            },
            {
                "name": "Release V2.10.0",
                "date": "2017-06-23T09:34:25Z"
            },
            {
                "name": "Release V2.9.0",
                "date": "2015-10-13T15:21:24Z"
            },
            {
                "name": "Release V2.8.1",
                "date": "2015-04-24T20:28:16Z"
            },
            {
                "name": "Release V2.8.0",
                "date": "2015-04-14T19:39:49Z"
            },
            {
                "name": "Release v2.7.1",
                "date": "2015-03-11T00:46:33Z"
            },
            {
                "name": "Release v2.7.0",
                "date": "2015-03-09T15:29:05Z"
            },
            {
                "name": "Release v2.6.0",
                "date": "2014-12-29T16:14:50Z"
            },
            {
                "name": "Release 2.5.1",
                "date": "2014-12-15T12:52:10Z"
            },
            {
                "name": "Release 2.5.0",
                "date": "2014-10-24T07:38:40Z"
            },
            {
                "name": "Release v2.4.0",
                "date": "2014-10-17T14:06:34Z"
            }
        ]
    }
}