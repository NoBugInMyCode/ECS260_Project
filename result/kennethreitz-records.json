{
    "https://api.github.com/repos/kennethreitz/records": {
        "forks": 571,
        "watchers": 7177,
        "stars": 7177,
        "languages": {
            "Python": 29001,
            "Makefile": 244
        },
        "commits": [
            "2024-07-09T11:26:42Z",
            "2024-07-07T18:12:21Z",
            "2024-03-30T00:01:36Z",
            "2024-03-29T23:50:46Z",
            "2024-03-29T23:50:40Z",
            "2024-03-29T23:45:21Z",
            "2024-03-29T23:37:25Z",
            "2024-03-29T23:23:13Z",
            "2024-03-29T23:23:03Z",
            "2024-03-29T23:20:56Z",
            "2024-03-29T23:17:47Z",
            "2024-03-29T23:14:22Z",
            "2024-03-29T23:13:53Z",
            "2024-03-29T23:13:31Z",
            "2024-03-29T23:07:25Z",
            "2024-03-29T23:07:18Z",
            "2024-03-29T23:06:25Z",
            "2024-03-29T23:05:30Z",
            "2024-03-29T23:05:18Z",
            "2024-03-29T23:04:47Z",
            "2024-03-29T23:04:34Z",
            "2024-03-29T23:04:28Z",
            "2024-03-29T23:02:30Z",
            "2024-03-29T23:01:35Z",
            "2024-03-29T23:01:22Z",
            "2024-03-29T23:01:05Z",
            "2024-03-29T23:00:51Z",
            "2024-03-29T23:00:38Z",
            "2024-03-29T23:00:16Z",
            "2023-05-02T15:11:47Z"
        ],
        "creation_date": "2014-12-24T15:20:23Z",
        "contributors": 30,
        "topics": [
            "forhumans",
            "kennethreitz",
            "orm",
            "postgres",
            "python",
            "schemas",
            "sql",
            "sqlalchemy"
        ],
        "subscribers": 186,
        "readme": "# Records: SQL for Humans\u2122\n\n[![image](https://img.shields.io/pypi/v/records.svg)](https://pypi.python.org/pypi/records)\n\n**Records is a very simple, but powerful, library for making raw SQL\nqueries to most relational databases.**\n\n![image](https://farm1.staticflickr.com/569/33085227621_7e8da49b90_k_d.jpg)\n\nJust write SQL. No bells, no whistles. This common task can be\nsurprisingly difficult with the standard tools available. This library\nstrives to make this workflow as simple as possible, while providing an\nelegant interface to work with your query results.\n\n*Database support includes RedShift, Postgres, MySQL, SQLite, Oracle,\nand MS-SQL (drivers not included).*\n\n## \u2624 The Basics\n\nWe know how to write SQL, so let's send some to our database:\n\n``` python\nimport records\n\ndb = records.Database('postgres://...')\nrows = db.query('select * from active_users')    # or db.query_file('sqls/active-users.sql')\n```\n\nGrab one row at a time:\n\n``` python\n>>> rows[0]\n<Record {\"username\": \"model-t\", \"active\": true, \"name\": \"Henry Ford\", \"user_email\": \"model-t@gmail.com\", \"timezone\": \"2016-02-06 22:28:23.894202\"}>\n```\n\nOr iterate over them:\n\n``` python\nfor r in rows:\n    print(r.name, r.user_email)\n```\n\nValues can be accessed many ways: `row.user_email`, `row['user_email']`,\nor `row[3]`.\n\nFields with non-alphanumeric characters (like spaces) are also fully\nsupported.\n\nOr store a copy of your record collection for later reference:\n\n``` python\n>>> rows.all()\n[<Record {\"username\": ...}>, <Record {\"username\": ...}>, <Record {\"username\": ...}>, ...]\n```\n\nIf you're only expecting one result:\n\n``` python\n>>> rows.first()\n<Record {\"username\": ...}>\n```\n\nOther options include `rows.as_dict()` and `rows.as_dict(ordered=True)`.\n\n## \u2624 Features\n\n-   Iterated rows are cached for future reference.\n-   `$DATABASE_URL` environment variable support.\n-   Convenience `Database.get_table_names` method.\n-   Command-line <span class=\"title-ref\">records</span> tool for\n    exporting queries.\n-   Safe parameterization:\n    `Database.query('life=:everything', everything=42)`.\n-   Queries can be passed as strings or filenames, parameters supported.\n-   Transactions: `t = Database.transaction(); t.commit()`.\n-   Bulk actions: `Database.bulk_query()` &\n    `Database.bulk_query_file()`.\n\nRecords is proudly powered by [SQLAlchemy](http://www.sqlalchemy.org)\nand [Tablib](https://tablib.readthedocs.io/en/latest/).\n\n## \u2624 Data Export Functionality\n\nRecords also features full Tablib integration, and allows you to export\nyour results to CSV, XLS, JSON, HTML Tables, YAML, or Pandas DataFrames\nwith a single line of code. Excellent for sharing data with friends, or\ngenerating reports.\n\n``` pycon\n>>> print(rows.dataset)\nusername|active|name      |user_email       |timezone\n--------|------|----------|-----------------|--------------------------\nmodel-t |True  |Henry Ford|model-t@gmail.com|2016-02-06 22:28:23.894202\n...\n```\n\n**Comma Separated Values (CSV)**\n\n``` pycon\n>>> print(rows.export('csv'))\nusername,active,name,user_email,timezone\nmodel-t,True,Henry Ford,model-t@gmail.com,2016-02-06 22:28:23.894202\n...\n```\n\n**YAML Ain't Markup Language (YAML)**\n\n``` python\n>>> print(rows.export('yaml'))\n- {active: true, name: Henry Ford, timezone: '2016-02-06 22:28:23.894202', user_email: model-t@gmail.com, username: model-t}\n...\n```\n\n**JavaScript Object Notation (JSON)**\n\n``` python\n>>> print(rows.export('json'))\n[{\"username\": \"model-t\", \"active\": true, \"name\": \"Henry Ford\", \"user_email\": \"model-t@gmail.com\", \"timezone\": \"2016-02-06 22:28:23.894202\"}, ...]\n```\n\n**Microsoft Excel (xls, xlsx)**\n\n``` python\nwith open('report.xls', 'wb') as f:\n    f.write(rows.export('xls'))\n```\n\n**Pandas DataFrame**\n\n``` python\n>>> rows.export('df')\n    username  active       name        user_email                   timezone\n0    model-t    True Henry Ford model-t@gmail.com 2016-02-06 22:28:23.894202\n```\n\nYou get the point. All other features of Tablib are also available, so\nyou can sort results, add/remove columns/rows, remove duplicates,\ntranspose the table, add separators, slice data by column, and more.\n\nSee the [Tablib Documentation](https://tablib.readthedocs.io/) for more\ndetails.\n\n## \u2624 Installation\n\nOf course, the recommended installation method is\n[pipenv](http://pipenv.org):\n\n    $ pipenv install records[pandas]\n    \u2728\ud83c\udf70\u2728\n\n## \u2624 Thank You\n\nThanks for checking this library out! I hope you find it useful.\n\nOf course, there's always room for improvement. Feel free to [open an\nissue](https://github.com/kennethreitz/records/issues) so we can make\nRecords better, stronger, faster.\n\n--------------\n\n[![Star History Chart](https://api.star-history.com/svg?repos=kennethreitz/records&type=Date)](https://star-history.com/#kennethreitz/records&Date)\n",
        "releases": [
            {
                "name": "SQLAlchemy v2 Support",
                "date": "2024-03-29T23:53:56Z"
            }
        ]
    }
}