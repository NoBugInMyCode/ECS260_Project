{
    "https://api.github.com/repos/carlhuda/janus": {
        "forks": 814,
        "watchers": 7875,
        "stars": 7875,
        "languages": {
            "Vim Script": 24743,
            "Ruby": 9268,
            "Shell": 930
        },
        "commits": [
            "2018-01-20T00:43:26Z",
            "2017-07-27T06:26:05Z",
            "2017-05-21T15:17:03Z",
            "2017-02-20T23:52:30Z",
            "2017-02-09T18:36:59Z",
            "2017-02-08T00:25:57Z",
            "2017-01-23T19:16:48Z",
            "2017-01-16T17:13:50Z",
            "2017-01-10T18:07:04Z",
            "2016-12-20T07:10:20Z",
            "2016-12-07T18:22:45Z",
            "2016-11-18T02:01:00Z",
            "2016-11-01T00:29:48Z",
            "2016-10-05T23:15:15Z",
            "2016-09-07T16:32:31Z",
            "2016-08-10T14:38:42Z",
            "2016-07-21T04:00:57Z",
            "2016-07-07T06:42:43Z",
            "2013-09-14T16:55:20Z",
            "2016-06-23T02:06:33Z",
            "2016-06-23T02:01:46Z",
            "2016-06-23T02:01:34Z",
            "2016-04-01T05:42:22Z",
            "2016-04-01T02:28:13Z",
            "2016-03-08T06:49:55Z",
            "2016-03-08T06:49:42Z",
            "2016-03-07T08:46:30Z",
            "2016-03-05T00:03:41Z",
            "2016-02-26T19:16:51Z",
            "2016-02-26T19:16:31Z"
        ],
        "creation_date": "2010-08-08T21:13:48Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 206,
        "readme": "# Janus: Vim Distribution\n\nThis is a distribution of plug-ins and mappings for Vim, Gvim and\nMacVim.\n\nIt is designed to provide minimal working environment using the most\npopular plug-ins and the most common mappings.\n\nThe distribution is completely customisable using a `~/.vimrc.before`\nand `~/.vimrc.after` Vim RC files.\n\n## Updating to the latest version\n\nTo update to the latest version of the distribution, just run `rake`\ninside your `~/.vim` directory.\n\nNOTE: If you ever have an error updating Janus relating to a\nmissing commit in a submodule, please try running `rake` again before\nsubmitting an issue.\n\n## Mailing list\n\nThe mailing list is hosted at [Google\nGroups](http://groups.google.com/group/janus-vimius), please join it for\ndiscussion and announcements.\n\n## Pre-requisites\n\nThe distribution is designed to work with Vim >= 7.3.\n\nThe distribution also requires `ack`, `ctags`, `git`, `ruby` and `rake`.\nFor the most comfortable experience, use the GUI version of Vim. Linux\nusers should install `gvim`, OSX users should install\n[MacVim](http://code.google.com/p/macvim/). The recommended way of\ninstalling MacVim is using\n[Homebrew](http://mxcl.github.com/homebrew/), but before installing\nMacVim you need to use system-wide Python (If you are using python that\nis):\n\n* If you're using **pythonbrew**: do `pythonbrew off`\n\n```bash\n$ brew install macvim\n```\n\nIf you don't use Homebrew, you can still download MacVim\n[here](https://github.com/b4winckler/macvim/releases).\n\nTake a look at the [Pre-requisites wiki\npage](https://github.com/carlhuda/janus/wiki/Pre-requisites) for more\ninformation.\n\n\n## Installation\n\nTo install Janus, please use our [automatic\ninstaller](https://github.com/carlhuda/janus/blob/master/bootstrap.sh)\n, which backs up any Vim files found in your home folder and installs\nJanus.\n\n```bash\n$ curl -L https://bit.ly/janus-bootstrap | bash\n```\n\n## Customization\n\nYou can use `~/.gvimrc.before` and `~/.vimrc.before` for settings Janus itself uses,\nsuch as the __leader__ setting. You may also use `~/.gvimrc.after` and\n`~/.vimrc.after` for any additional settings; it is also a good place for\noverriding Janus settings, as both files will be loaded at the end of\nJanus.\n\nFor example, to override the default color schemes:\n\n```bash\n$ echo 'color desert'  >> ~/.vimrc.after\n$ echo 'color molokai' >> ~/.gvimrc.after\n```\n\nIf you want to do additional customization or add more Vim plugins,\ncreate a `~/.janus` directory and add your plugins there, either with a\n`git clone` or by adding submodules to your own git repository there.\nThis directory is treated like a normal pathogen directory. For example:\n\n```bash\n$ cd ~/.janus\n$ git clone https://github.com/vim-scripts/Rename2.git rename2\n```\n\nOr, if you have a git repository in `~/.janus`, you can use a submodule:\n\n```bash\n$ cd ~/.janus\n$ git submodule add https://github.com/vim-scripts/Rename2.git rename2\n```\n\nIf you would like to disable an included plug-in, you can do that with\nthe `janus#disable_plugin()` function from inside your\n`~/.vimrc.before`. This function takes a plug-in name as an argument\nwithout the group. For example, if you would like to disable the\nNERDCommenter plug-in, you can do that with the command:\n\n```bash\n$ echo \"call janus#disable_plugin('nerdcommenter')\" >> ~/.vimrc.before\n```\n\n**WARNING**: We've noticed over and over, that people fork Janus just to\ncustomize it. This is bad practice for several reasons and you should\nnot do that, and here's why:\n\n- Janus is fully customisable and there's no need to change the core for\n  using a different plugin fork or using a different mapping.\n- Forking means maintenance; maintenance means burden. Do not burden\n  yourself with maintaining a fork; that's what the `~/.janus` folder\n  is for.\n\nIf you find yourself needing a customisation that is not possible with\nthe current setup, then please open an issue or consider submitting a\npull request to make it possible to continue using/improving the official repo.\n\n**WARNING**: Any **uncommited** files inside the **janus** folder will be\nremoved the next time you run `rake` so make sure to either put them in\nthe custom folder (`~/.janus`), or commit them. We clean the janus\nfolder in case we replace a manually installed plugin (using rake tasks)\nwith a submodule.\n\nFor more information on how to customize Janus, you might want to take\na look at the [Customization wiki\npage](https://github.com/carlhuda/janus/wiki/Customization).\nAdditional you can see [Example](https://github.com/khusnetdinov/.janus) of customization.\n\n# Intro to VIM\n\nHere're some tips in case you've never used VIM before:\n\n## Tutorials\n\n* Type `vimtutor` into a shell to go through a brief interactive\n  tutorial inside VIM.\n* Watch this presentation at [VIM: Walking Without Crutches](https://vimeo.com/16458939) or read the [slides on Speaker Deck](https://speakerdeck.com/nelstrom/vim-precision-editing-at-the-speed-of-thought).\n* Watch the screencasts at [vimcasts.org](http://vimcasts.org/)\n* Watch Derek Wyatt's energetic tutorial videos at [his site](http://derekwyatt.org/vim/tutorials/)\n* Read wycats' perspective on learning Vim at\n  [Everyone who tried to convince me to use vim was wrong](http://yehudakatz.com/2010/07/29/everyone-who-tried-to-convince-me-to-use-vim-was-wrong/)\n* Read this and other answers to a question about vim at StackOverflow:\n  [Your problem with Vim is that you don't grok vi](http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim/1220118#1220118)\n* Read the [Getting Started with Vim](http://www.sitepoint.com/getting-started-vim/) tutorial on SitePoint\n* Read the [Effective Rails Development with Vim](http://www.sitepoint.com/effective-rails-development-vim/) tutorial on SitePoint\n\n## Modes\n\n* VIM has three modes:\n  * insert mode- stuff you type is added to the buffer\n  * normal mode- keys you hit are interpreted as commands\n  * visual mode- allows you to select blocks of text\n* To enter insert mode, hit `i`\n* To exit insert mode, hit `<ESC>`\n* To enter visual mode, hit `v`\n* To exit visual mode, hit `<ESC>`\n\n## Useful commands\n\n* Use `:q` to exit vim\n* Certain commands are prefixed with a `<Leader>` key, which maps to `\\`\n  by default. You can, for example, use `let mapleader = \",\"` to change this to a comma. If you want this\n  to be in effect for uses of `<Leader>` in the .vimrc file, make sure to define\n  this in `~/.vimrc.before`\n* Keyboard [cheat sheet](http://vim.rtorr.com/).\n\n# Features\n\nThis Vim distribution includes a number of packages built by others.\n\n## Base Customizations\n\nJanus ships with a number of basic customizations for vim:\n\n* Line numbers\n* Ruler (line and column numbers)\n* No wrap (turn off per-buffer via :set wrap)\n* Soft 2-space tabs, and default hard tabs to 2 spaces\n* Show trailing whitespace as `.`\n* Make searching highlighted, incremental, and case insensitive unless a\n  capital letter is used\n* Always show a status line\n* Allow backspacing over everything (indentations, eol, and start\n  characters) in insert mode\n* `<C-P>` inserts the directory of the current file into a command\n* Automatically resize splits when resizing the Vim window (GUI only)\n* `<leader>ew` expands to `:e (directory of current file)/` (open in the\n  current buffer)\n* `<leader>es` expands to `:sp (directory of current file)/` (open in a\n  horizontal split)\n* `<leader>ev` expands to `:vsp (directory of current file)/` (open in\n  a vertical split)\n* `<leader>et` expands to `:tabe (directory of current file)/` (open in\n  a new tab)\n* Write a privileged file with `:SudoW` or `:SudoWrite`, it will prompt\n  for sudo password when writing\n* `<F4>` toggles paste mode\n* `<leader>fef` formats the entire file\n* `<leader>u` converts the entire word to uppercase\n* `<leader>l` converts the entire word to lowercase\n* `<leader>U` converts the first char of a word to uppercase\n* `<leader>L` converts the first char of a word to lowercase\n* `<leader>cd` changes the path to the active buffer's file\n* `<leader>md` creates the directory of the active buffer's file\n  (For example, when editing a new file for which the path does not\nexist.)\n* `gw` swaps the current word with the following word\n* `<leader>ul` underlines the current line with `=`\n* `<leader>tw` toggles wrap\n* `<leader>fc` finds the next conflict marker (tested with Git\n  conflicted files)\n* Remap `<Down>` and `<Up>` to `gj` and `gk` (Wrapped text is not\n  considered a single long line of text.)\n* `<leader>hs` toggles highlight search\n* `<leader>=` adjusts viewports to the same size (`<C-w>=`)\n* `<A-[` (`<D-[` on MacVim) shifts current line or selected lines\n  rightwards\n* `<A-]` (`<D-]` on MacVim) shifts current line or selected lines\n  leftwards\n* `<C-W>!` invokes kwbd plugin; it closes all open buffers in the open\n  windows but keeps the windows open\n\n## [Ack.vim](http://github.com/mileszs/ack.vim)\n\nAck.vim uses ack to search inside the current directory for a pattern.\nYou can learn more about it with :help Ack.\n\n**Customizations**: Janus rebinds command-shift-f (`<D-F>`) to bring up\n`:Ack `.\n\n## [CtrlP](https://github.com/ctrlpvim/ctrlp.vim)\n\nFuzzy file, buffer, mru and tag finder. Replaces [Command-T](https://github.com/wincent/Command-T)\n\n**Customizations**: For users of Command-T Janus maps CtrlP to command-t (`<D-t>`)\n\n## [NERDCommenter](http://github.com/ddollar/nerdcommenter)\n\nNERDCommenter allows you to wrangle your code comments, regardless of\nfiletype. View `:help NERDCommenter` for all the details.\n\n**Customizations**: Janus binds command-/ (`<D-/>`) to toggle comments.\n\n## [NERDTree](https://github.com/scrooloose/nerdtree)\n\nNERDTree is a file explorer plugin that provides \"project drawer\"\nfunctionality to your vim projects.  You can learn more about it with\n:help NERDTree.\n\n**Customizations**: Janus adds a number of customizations to the core\nNERDTree:\n\n* Use `<Leader>n` to toggle NERDTree\n* Ignore compiled ruby, python, and java files\n* When opening vim with vim /path, open the left NERDTree to that\n  directory, set the vim pwd, and clear the right buffer\n* In general, assume that there is a single NERDTree buffer on the left\n  and one or more editing buffers on the right\n\n## [Unimpaired](https://github.com/tpope/vim-unimpaired)\n\nThis plugin provides a lot of useful mappings, here's a brief example of\nwhat it does provide:\n\n* `[b` to go to the previous buffer\n* `]b` to go to the next buffer\n* `[n` to go to the previous SCM conflict marker\n* `]n` to go to the next SCM conflict marker\n\nPlease check [`:help\nunimpaired`](https://github.com/tpope/vim-unimpaired/blob/master/doc/unimpaired.txt)\nfor a complete list\n\n## [SuperTab](http://github.com/ervandew/supertab)\n\nIn insert mode, start typing something and hit `<TAB>` to tab-complete\nbased on the current context.\n\n## [Syntastic](https://github.com/scrooloose/syntastic/)\n\nSyntastic is a syntax checking plugin that runs files through external syntax\ncheckers as they are saved and opened. If syntax errors are detected, the user\nis notified and is happy because they didn't have to compile their code or\nexecute their script to find them.\n\nPlease see [`:help\nsyntastic`](https://github.com/vim-syntastic/syntastic/blob/master/doc/syntastic.txt)\nfor more information.\n\n## [Tagbar](https://github.com/majutsushi/tagbar)\n\nTagbar is a vim plugin for browsing the tags of source code files.\n\n**Customizations**: Janus binds `<Leader>rt` to toggle Tagbar.\n\n## [SnipMate](https://github.com/garbas/vim-snipmate)\nSnipMate defines text snippets (a series of characters) that expand to\na useful piece of code when tab is pressed.  For example, in a Ruby\nfile, def`<TAB>` expands to:\n```ruby\ndef method_name\n\nend\n```\nAfter typing in the method name, press tab again to put the cursor right\nwhere you want it on the next line.  [This repository](https://github.com/honza/vim-snippets/tree/master/snippets)\nhas a full list of the Snippets that are available in Janus.\n\n## [EasyMotion](https://github.com/Lokaltog/vim-easymotion)\n\nEasyMotion provides a much simpler way to use some motions in vim. It\ntakes the `<number>` out of `<number>w` or `<number>f{char}` by highlighting\nall possible choices and allowing you to press one key to jump directly\nto the target.\n\nWhen one of the available motions is triggered, all visible text\npreceding or following the cursor is faded, and motion targets are\nhighlighted.\n\nEasyMotion is triggered by one of the provided mappings.\n\ncheck EasyMotion's [home\npage](https://github.com/Lokaltog/vim-easymotion) for more information.\n\n## [NrrwRgn](https://github.com/chrisbra/NrrwRgn)\n\nNarrowing means focussing on a region and making the rest inaccessible.\nYou simply select the region, call :NarrowRegion and the selected part\nwill open in a new scratch buffer. The rest of the file will be\nprotected, so you won't accidentally modify that buffer. In the new\nbuffer, you can do a global replace, search or anything else to modify\nthat part. When you are finished, simply write that buffer (e.g. by\n|:w|) and your modifications will be put in the original buffer making\nit accessible again.\n\n## Git Support ([Fugitive](http://github.com/tpope/vim-fugitive))\n\nFugitive adds pervasive git support to git directories in vim. For more\ninformation, use `:help fugitive`\n\nUse `:Gstatus` to view `git status` and type `-` on any file to stage or\nunstage it. Type `p` on a file to enter `git add -p` and stage specific\nhunks in the file.\n\nUse `:Gdiff` on an open file to see what changes have been made to that\nfile\n\n**customizations**:\n\n* `<leader>gb` maps to `:Gblame<CR>`\n* `<leader>gs` maps to `:Gstatus<CR>`\n* `<leader>gd` maps to `:Gdiff<CR>`\n* `<leader>gl` maps to `:Glog<CR>`\n* `<leader>gc` maps to `:Gcommit<CR>`\n* `<leader>gp` maps to `:Git push<CR>`\n\n## [Git Gutter](http://github.com/airblade/vim-gitgutter)\n\nA Vim plugin which shows a git diff in the 'gutter' (sign column). It\nshows whether each line has been added, modified, and where lines have\nbeen removed. You can also stage and revert individual hunks.\n\n## [ZoomWin](http://github.com/vim-scripts/ZoomWin)\n\nWhen working with split windows, ZoomWin lets you zoom into a window and\nout again using `Ctrl-W o`\n\n**Customizations**: Janus binds `<leader>zw` to `:ZoomWin`\n\n## [JSON](https://github.com/elzr/vim-json)\n\nBetter JSON and JSONP with distinct highlighting for keywords versus\nvalues, strings colored differently from numbers and booleans and double\nquotes concealed (disable with `let g:vim_json_syntax_conceal = 0` in\n`~/.vimrc.after`, folding of {...} and [...] blocks (enable with\n`:setlocal foldmethod=syntax`, and JSON-specific warnings highlighted in\nred.\n\n## [BufferGator](https://github.com/jeetsukumaran/vim-buffergator)\n\nBuffergator is a plugin for listing, navigating between, and selecting\nbuffers to edit. Upon invocation (using the command, `:BuffergatorOpen`\nor `BuffergatorToggle`, or the provided key mapping, `<Leader>b`), a\n`catalog` of listed buffers are displayed in a separate new window split\n(vertical or horizontal, based on user options; default = vertical).\nFrom this \"buffer catalog\", a buffer can be selected and opened in an\nexisting window, a new window split (vertical or horizontal), or a new\ntab page.\n\nSelected buffers can be \"previewed\", i.e. opened in a window or tab\npage, but with focus remaining in the buffer catalog. Even better, you\ncan \"walk\" up and down the list of buffers shown in the catalog by using\n`<C-N>` (or `<SPACE>`) / `<C-P>` (or `<C-SPACE>`). These keys select the\nnext/previous buffer in succession, respectively, opening it for preview\nwithout leaving the buffer catalog viewer.\n\n## [Vroom](https://github.com/skalnik/vim-vroom)\n\nVRoom is a plugin inspired by [Gary Bernhardt's vim\nconfig](https://github.com/garybernhardt/dotfiles/blob/69330074b7a15c67efa4594a71fa91592f1ce4f9/.vimrc#L286-342)\nfor running your ruby tests/specs/features.\n\nImagine you're hacking on a Rails controller, when you switch to the\ntest or specs for the controller, you can use `<leader>r` to run all the\nspecs or `<leader>R` to run the closest spec, then you can jump back to\nthe controller hack on it and use `<leader>r` to run the last spec you\nran last time, so you don't need to open the test again.\n\nThen benefits of this plugin are to centralize your workflow in one\nwindow, one software to do it all, which is a huge speedup over using\n`tmux` or multiple terminal tabs.\n\n## [vim-multiple-cursors](https://github.com/terryma/vim-multiple-cursors)\nOut of the box, all you need to know is a single key `Ctrl-n`. Pressing the key\nin Normal mode highlights the current word under the cursor in Visual mode and\nplaces a virtual cursor at the end of it. Pressing it again finds the next\noccurrence and places another virtual cursor at the end of the visual selection.\nIf you select multiple lines in Visual mode, pressing the key puts a virtual\ncursor at every line and leaves you in Normal mode.\n\nMore at [QuickStart](https://github.com/terryma/vim-multiple-cursors/blob/master/README.md#quick-start)\n\n## [vim-trailing-whitespace](https://github.com/bronson/vim-trailing-whitespace)\nThis plugin causes all trailing whitespace to be highlighted in red.\n\nTo fix the whitespace errors, just call :FixWhitespace.  By default it\noperates on the entire file.  Pass a range (or use V to select some lines)\nto restrict the portion of the file that gets fixed.\n\n## Additional Syntaxes\n\nJanus ships with a few additional syntaxes:\n\n* Markdown (bound to \\*.markdown, \\*.md, and \\*.mk)\n* Markdown auto styling (disabled by setting\n  `g:disable_markdown_autostyle` in `~/.vimrc.before` => `let\n  g:disable_markdown_autostyle = 1`)\n* Mustache (bound to \\*.mustache)\n* Haml (bound to \\*.haml)\n* Sass (bound to \\*.sass)\n* SCSS (bound to \\*.scss)\n* An improved JavaScript syntax (bound to \\*.js)\n* Javascript for any file having `nodejs` in the shebang.\n* Map Gemfile, Rakefile, Vagrantfile, Procfile, Thorfile, config.ru and\n  *.rake to Ruby.\n* Git commits (set your `EDITOR` to `vim -f` or  `mvim -f` on OSX)\n  `$ echo \"export EDITOR='vim -f'\" >> ~/.bashrc`, you can also use Git\n  global config to set this if you have EDITOR set to something else\n  `$ git config --global core.editor 'vim -f'`\n\n# License\n\n### This code is free to use under the terms of the MIT license.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
        "releases": []
    }
}