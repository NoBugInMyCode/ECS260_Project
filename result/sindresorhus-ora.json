{
    "https://api.github.com/repos/sindresorhus/ora": {
        "forks": 272,
        "watchers": 9228,
        "stars": 9228,
        "languages": {
            "JavaScript": 37582,
            "TypeScript": 2070
        },
        "commits": [
            "2024-11-01T16:18:48Z",
            "2024-10-12T08:51:16Z",
            "2024-11-01T16:16:16Z",
            "2024-08-25T17:51:40Z",
            "2024-08-25T17:47:59Z",
            "2024-08-25T17:36:40Z",
            "2023-12-23T11:38:15Z",
            "2023-12-23T11:36:10Z",
            "2023-12-22T20:23:18Z",
            "2023-12-22T20:18:09Z",
            "2023-08-01T14:50:17Z",
            "2023-08-01T14:49:12Z",
            "2023-07-28T18:39:09Z",
            "2023-05-15T08:02:40Z",
            "2023-05-15T07:56:36Z",
            "2023-05-15T07:46:06Z",
            "2023-03-24T07:21:05Z",
            "2023-03-24T07:18:51Z",
            "2023-03-19T10:13:09Z",
            "2023-03-19T10:10:50Z",
            "2022-07-26T12:39:53Z",
            "2022-07-08T12:35:46Z",
            "2022-06-27T23:11:48Z",
            "2022-06-27T23:11:00Z",
            "2022-06-26T10:35:31Z",
            "2022-06-26T10:34:48Z",
            "2022-02-21T08:00:57Z",
            "2022-02-21T06:03:22Z",
            "2022-02-21T06:01:22Z",
            "2021-09-13T18:05:50Z"
        ],
        "creation_date": "2016-03-03T18:17:16Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 47,
        "readme": "# ora\n\n> Elegant terminal spinner\n\n<p align=\"center\">\n\t<br>\n\t<img src=\"screenshot.svg\" width=\"500\">\n\t<br>\n</p>\n\n## Install\n\n```sh\nnpm install ora\n```\n\n*Check out [`yocto-spinner`](https://github.com/sindresorhus/yocto-spinner) for a smaller alternative.*\n\n## Usage\n\n```js\nimport ora from 'ora';\n\nconst spinner = ora('Loading unicorns').start();\n\nsetTimeout(() => {\n\tspinner.color = 'yellow';\n\tspinner.text = 'Loading rainbows';\n}, 1000);\n```\n\n## API\n\n### ora(text)\n### ora(options)\n\nIf a string is provided, it is treated as a shortcut for [`options.text`](#text).\n\n#### options\n\nType: `object`\n\n##### text\n\nType: `string`\n\nThe text to display next to the spinner.\n\n##### prefixText\n\nType: `string | () => string`\n\nText or a function that returns text to display before the spinner. No prefix text will be displayed if set to an empty string.\n\n##### suffixText\n\nType: `string | () => string`\n\nText or a function that returns text to display after the spinner text. No suffix text will be displayed if set to an empty string.\n\n##### spinner\n\nType: `string | object`\\\nDefault: `'dots'` <img src=\"screenshot-spinner.gif\" width=\"14\">\n\nThe name of one of the [provided spinners](#spinners). See `example.js` in this repo if you want to test out different spinners. On Windows (except for Windows Terminal), it will always use the `line` spinner as the Windows command-line doesn't have proper Unicode support.\n\nOr an object like:\n\n```js\n{\n\tframes: ['-', '+', '-'],\n\tinterval: 80 // Optional\n}\n```\n\n##### color\n\nType: `string`\\\nDefault: `'cyan'`\\\nValues: `'black' | 'red' | 'green' | 'yellow' | 'blue' | 'magenta' | 'cyan' | 'white' | 'gray'`\n\nThe color of the spinner.\n\n##### hideCursor\n\nType: `boolean`\\\nDefault: `true`\n\nSet to `false` to stop Ora from hiding the cursor.\n\n##### indent\n\nType: `number`\\\nDefault: `0`\n\nIndent the spinner with the given number of spaces.\n\n##### interval\n\nType: `number`\\\nDefault: Provided by the spinner or `100`\n\nInterval between each frame.\n\nSpinners provide their own recommended interval, so you don't really need to specify this.\n\n##### stream\n\nType: `stream.Writable`\\\nDefault: `process.stderr`\n\nStream to write the output.\n\nYou could for example set this to `process.stdout` instead.\n\n##### isEnabled\n\nType: `boolean`\n\nForce enable/disable the spinner. If not specified, the spinner will be enabled if the `stream` is being run inside a TTY context (not spawned or piped) and/or not in a CI environment.\n\nNote that `{isEnabled: false}` doesn't mean it won't output anything. It just means it won't output the spinner, colors, and other ansi escape codes. It will still log text.\n\n##### isSilent\n\nType: `boolean`\\\nDefault: `false`\n\nDisable the spinner and all log text. All output is suppressed and `isEnabled` will be considered `false`.\n\n##### discardStdin\n\nType: `boolean`\\\nDefault: `true`\n\nDiscard stdin input (except Ctrl+C) while running if it's TTY. This prevents the spinner from twitching on input, outputting broken lines on <kbd>Enter</kbd> key presses, and prevents buffering of input while the spinner is running.\n\nThis has no effect on Windows as there is no good way to implement discarding stdin properly there.\n\n### Instance\n\n#### .text <sup>get/set</sup>\n\nChange the text displayed after the spinner.\n\n#### .prefixText <sup>get/set</sup>\n\nChange the text before the spinner.\n\nNo prefix text will be displayed if set to an empty string.\n\n#### .suffixText <sup>get/set</sup>\n\nChange the text after the spinner text.\n\nNo suffix text will be displayed if set to an empty string.\n\n#### .color <sup>get/set</sup>\n\nChange the spinner color.\n\n#### .spinner <sup>get/set</sup>\n\nChange the spinner.\n\n#### .indent <sup>get/set</sup>\n\nChange the spinner indent.\n\n#### .isSpinning <sup>get</sup>\n\nA boolean indicating whether the instance is currently spinning.\n\n#### .interval <sup>get</sup>\n\nThe interval between each frame.\n\nThe interval is decided by the chosen spinner.\n\n#### .start(text?)\n\nStart the spinner. Returns the instance. Set the current text if `text` is provided.\n\n#### .stop()\n\nStop and clear the spinner. Returns the instance.\n\n#### .succeed(text?)\n\nStop the spinner, change it to a green `\u2714` and persist the current text, or `text` if provided. Returns the instance. See the GIF below.\n\n#### .fail(text?)\n\nStop the spinner, change it to a red `\u2716` and persist the current text, or `text` if provided. Returns the instance. See the GIF below.\n\n#### .warn(text?)\n\nStop the spinner, change it to a yellow `\u26a0` and persist the current text, or `text` if provided. Returns the instance.\n\n#### .info(text?)\n\nStop the spinner, change it to a blue `\u2139` and persist the current text, or `text` if provided. Returns the instance.\n\n#### .stopAndPersist(options?)\n\nStop the spinner and change the symbol or text. Returns the instance. See the GIF below.\n\n##### options\n\nType: `object`\n\n###### symbol\n\nType: `string`\\\nDefault: `' '`\n\nSymbol to replace the spinner with.\n\n###### text\n\nType: `string`\\\nDefault: Current `'text'`\n\nText to be persisted after the symbol.\n\n###### prefixText\n\nType: `string | () => string`\\\nDefault: Current `prefixText`\n\nText or a function that returns text to be persisted before the symbol. No prefix text will be displayed if set to an empty string.\n\n###### suffixText\n\nType: `string | () => string`\\\nDefault: Current `suffixText`\n\nText or a function that returns text to be persisted after the text after the symbol. No suffix text will be displayed if set to an empty string.\n\n<img src=\"screenshot-2.gif\" width=\"480\">\n\n#### .clear()\n\nClear the spinner. Returns the instance.\n\n#### .render()\n\nManually render a new frame. Returns the instance.\n\n#### .frame()\n\nGet a new frame.\n\n### oraPromise(action, text)\n### oraPromise(action, options)\n\nStarts a spinner for a promise or promise-returning function. The spinner is stopped with `.succeed()` if the promise fulfills or with `.fail()` if it rejects. Returns the promise.\n\n```js\nimport {oraPromise} from 'ora';\n\nawait oraPromise(somePromise);\n```\n\n#### action\n\nType: `Promise | ((spinner: ora.Ora) => Promise)`\n\n#### options\n\nType: `object`\n\nAll of the [options](#options) plus the following:\n\n##### successText\n\nType: `string | ((result: T) => string) | undefined`\n\nThe new text of the spinner when the promise is resolved.\n\nKeeps the existing text if `undefined`.\n\n##### failText\n\nType: `string | ((error: Error) => string) | undefined`\n\nThe new text of the spinner when the promise is rejected.\n\nKeeps the existing text if `undefined`.\n\n### spinners\n\nType: `Record<string, Spinner>`\n\nAll [provided spinners](https://github.com/sindresorhus/cli-spinners/blob/main/spinners.json).\n\n## FAQ\n\n### How do I change the color of the text?\n\nUse [`chalk`](https://github.com/chalk/chalk) or [`yoctocolors`](https://github.com/sindresorhus/yoctocolors):\n\n```js\nimport ora from 'ora';\nimport chalk from 'chalk';\n\nconst spinner = ora(`Loading ${chalk.red('unicorns')}`).start();\n```\n\n### Why does the spinner freeze?\n\nJavaScript is single-threaded, so any synchronous operations will block the spinner's animation. To avoid this, prefer using asynchronous operations.\n\n## Related\n\n- [yocto-spinner](https://github.com/sindresorhus/yocto-spinner) - Tiny terminal spinner\n- [cli-spinners](https://github.com/sindresorhus/cli-spinners) - Spinners for use in the terminal\n\n**Ports**\n\n- [CLISpinner](https://github.com/kiliankoe/CLISpinner) - Terminal spinner library for Swift\n- [halo](https://github.com/ManrajGrover/halo) - Python port\n- [spinners](https://github.com/FGRibreau/spinners) - Terminal spinners for Rust\n- [marquee-ora](https://github.com/joeycozza/marquee-ora) - Scrolling marquee spinner for Ora\n- [briandowns/spinner](https://github.com/briandowns/spinner) - Terminal spinner/progress indicator for Go\n- [tj/go-spin](https://github.com/tj/go-spin) - Terminal spinner package for Go\n- [observablehq.com/@victordidenko/ora](https://observablehq.com/@victordidenko/ora) - Ora port to Observable notebooks\n- [kia](https://github.com/HarryPeach/kia) - Simple terminal spinners for Deno \ud83e\udd95\n",
        "releases": [
            {
                "name": "",
                "date": "2024-11-01T18:00:45Z"
            },
            {
                "name": "",
                "date": "2024-08-25T17:48:22Z"
            },
            {
                "name": "",
                "date": "2023-12-23T11:39:45Z"
            },
            {
                "name": "",
                "date": "2023-12-22T20:23:45Z"
            },
            {
                "name": "",
                "date": "2023-08-01T15:51:20Z"
            },
            {
                "name": "",
                "date": "2023-07-28T18:40:17Z"
            },
            {
                "name": "",
                "date": "2023-05-15T08:01:17Z"
            },
            {
                "name": "",
                "date": "2023-03-24T07:22:21Z"
            },
            {
                "name": "",
                "date": "2023-03-19T10:13:31Z"
            },
            {
                "name": "",
                "date": "2022-06-27T23:12:28Z"
            },
            {
                "name": "",
                "date": "2022-06-26T10:36:40Z"
            },
            {
                "name": "",
                "date": "2022-02-21T08:03:03Z"
            },
            {
                "name": "",
                "date": "2021-09-13T18:06:52Z"
            },
            {
                "name": "",
                "date": "2021-08-23T21:51:55Z"
            },
            {
                "name": "",
                "date": "2021-06-08T07:39:00Z"
            },
            {
                "name": "",
                "date": "2021-03-17T11:49:34Z"
            },
            {
                "name": "",
                "date": "2021-01-20T10:03:05Z"
            },
            {
                "name": "",
                "date": "2020-12-29T08:24:55Z"
            },
            {
                "name": "",
                "date": "2020-09-06T20:39:40Z"
            },
            {
                "name": "",
                "date": "2020-08-07T15:29:07Z"
            },
            {
                "name": "",
                "date": "2020-07-17T14:51:54Z"
            },
            {
                "name": "",
                "date": "2020-04-21T15:03:32Z"
            },
            {
                "name": "",
                "date": "2019-11-13T10:24:12Z"
            },
            {
                "name": "",
                "date": "2019-09-29T05:23:50Z"
            },
            {
                "name": "",
                "date": "2019-09-23T08:58:10Z"
            },
            {
                "name": "",
                "date": "2019-09-22T09:01:31Z"
            },
            {
                "name": "",
                "date": "2019-04-03T05:11:59Z"
            },
            {
                "name": "",
                "date": "2019-04-02T19:51:36Z"
            },
            {
                "name": "",
                "date": "2019-04-02T07:26:34Z"
            },
            {
                "name": "",
                "date": "2019-03-02T19:29:24Z"
            },
            {
                "name": "",
                "date": "2019-02-11T05:24:14Z"
            },
            {
                "name": "",
                "date": "2018-07-17T21:38:01Z"
            },
            {
                "name": "",
                "date": "2018-02-22T03:32:37Z"
            }
        ]
    }
}