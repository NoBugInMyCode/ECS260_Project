{
    "https://api.github.com/repos/josdejong/mathjs": {
        "forks": 1247,
        "watchers": 14564,
        "stars": 14564,
        "languages": {
            "JavaScript": 4100551,
            "TypeScript": 72017,
            "Python": 4102,
            "HTML": 1533,
            "MATLAB": 1451
        },
        "commits": [
            "2025-01-06T08:31:00Z",
            "2024-12-18T16:59:43Z",
            "2024-12-18T16:58:30Z",
            "2024-12-18T11:28:07Z",
            "2024-12-18T10:50:46Z",
            "2024-12-18T10:45:16Z",
            "2024-12-18T10:43:39Z",
            "2024-12-13T14:07:11Z",
            "2024-12-13T14:05:37Z",
            "2024-12-13T13:53:41Z",
            "2024-12-13T13:52:09Z",
            "2024-12-13T13:50:50Z",
            "2024-12-13T13:48:14Z",
            "2024-12-13T13:46:14Z",
            "2024-12-13T13:44:43Z",
            "2024-12-13T13:41:12Z",
            "2024-12-13T13:35:13Z",
            "2024-12-13T13:26:42Z",
            "2024-12-13T13:26:15Z",
            "2024-12-13T13:13:15Z",
            "2024-12-13T13:11:16Z",
            "2024-12-11T17:05:00Z",
            "2024-12-11T17:03:26Z",
            "2024-12-11T14:53:39Z",
            "2024-12-11T13:03:40Z",
            "2024-12-11T11:26:33Z",
            "2024-12-11T10:33:42Z",
            "2024-12-11T07:42:14Z",
            "2024-12-04T14:11:23Z",
            "2024-12-04T14:07:39Z"
        ],
        "creation_date": "2013-02-15T19:46:01Z",
        "contributors": 30,
        "topics": [
            "bignumbers",
            "complex-numbers",
            "expression-evaluator",
            "javascript",
            "math",
            "matrices",
            "units"
        ],
        "subscribers": 223,
        "readme": "![math.js](https://raw.github.com/josdejong/mathjs/master/misc/img/mathjs.png)\n\n[https://mathjs.org](https://mathjs.org)\n\nMath.js is an extensive math library for JavaScript and Node.js. It features a flexible expression parser with support for symbolic computation, comes with a large set of built-in functions and constants, and offers an integrated solution to work with different data types like numbers, big numbers, complex numbers, fractions, units, and matrices. Powerful and easy to use.\n\n[![Version](https://img.shields.io/npm/v/mathjs.svg)](https://www.npmjs.com/package/mathjs)\n[![Downloads](https://img.shields.io/npm/dm/mathjs.svg)](https://www.npmjs.com/package/mathjs)\n[![Build Status](https://github.com/josdejong/mathjs/workflows/Node.js%20CI/badge.svg)](https://github.com/josdejong/mathjs/actions)\n[![Maintenance](https://img.shields.io/maintenance/yes/2025.svg)](https://github.com/josdejong/mathjs/graphs/commit-activity)\n[![License](https://img.shields.io/github/license/josdejong/mathjs.svg)](https://github.com/josdejong/mathjs/blob/master/LICENSE)\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fjosdejong%2Fmathjs.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fjosdejong%2Fmathjs?ref=badge_shield)\n[![Codecov](https://codecov.io/gh/josdejong/mathjs/branch/develop/graph/badge.svg)](https://codecov.io/gh/josdejong/mathjs)\n[![Github Sponsor](https://img.shields.io/github/sponsors/josdejong\n)](https://github.com/sponsors/josdejong)\n\n## Features\n\n- Supports numbers, bignumbers, bigints, complex numbers, fractions, units, strings, arrays, and matrices.\n- Is compatible with JavaScript's built-in Math library.\n- Contains a flexible expression parser.\n- Does symbolic computation.\n- Comes with a large set of built-in functions and constants.\n- Can be used as a command line application as well.\n- Runs on any JavaScript engine.\n- Is easily extensible.\n- Open source.\n\n## Usage\n\nMath.js can be used in both node.js and in the browser.\n\nInstall math.js using [npm](https://www.npmjs.com/package/mathjs):\n\n    npm install mathjs\n\nOr download mathjs via one of the CDN's listed on the downloads page:\n\n&nbsp;&nbsp;&nbsp;&nbsp;[https://mathjs.org/download.html](https://mathjs.org/download.html#download)\n\nMath.js can be used similar to JavaScript's built-in Math library. Besides that,\nmath.js can evaluate\n[expressions](https://mathjs.org/docs/expressions/index.html)\nand supports\n[chained operations](https://mathjs.org/docs/core/chaining.html).\n\n```js\nimport {\n  atan2, chain, derivative, e, evaluate, log, pi, pow, round, sqrt\n} from 'mathjs'\n\n// functions and constants\nround(e, 3)                    // 2.718\natan2(3, -3) / pi              // 0.75\nlog(10000, 10)                 // 4\nsqrt(-4)                       // 2i\npow([[-1, 2], [3, 1]], 2)      // [[7, 0], [0, 7]]\nderivative('x^2 + x', 'x')     // 2 * x + 1\n\n// expressions\nevaluate('12 / (2.3 + 0.7)')   // 4\nevaluate('12.7 cm to inch')    // 5 inch\nevaluate('sin(45 deg) ^ 2')    // 0.5\nevaluate('9 / 3 + 2i')         // 3 + 2i\nevaluate('det([-1, 2; 3, 1])') // -7\n\n// chaining\nchain(3)\n    .add(4)\n    .multiply(2)\n    .done()  // 14\n```\n\nSee the [Getting Started](https://mathjs.org/docs/getting_started.html) for a more detailed tutorial.\n\n\n## Browser support\n\nMath.js works on any [ES2020](https://262.ecma-international.org/11.0/) compatible JavaScript engine, including node.js, Chrome, Firefox, Safari, and Edge.\n\n\n## Documentation\n\n- [Getting Started](https://mathjs.org/docs/getting_started.html)\n- [Examples](https://mathjs.org/examples/index.html)\n- [Overview](https://mathjs.org/docs/index.html)\n- [History](https://mathjs.org/history.html)\n\n\n## Build\n\nFirst clone the project from github:\n\n    git clone git@github.com:josdejong/mathjs.git\n    cd mathjs\n\nInstall the project dependencies:\n\n    npm install\n\nThen, the project can be build by executing the build script via npm:\n\n    npm run build\n\nThis will build ESM output, CommonJS output, and the bundle math.js\nfrom the source files and put them in the folder lib.\n\n\n## Develop\n\nWhen developing new features for mathjs, it is good to be aware of the following background information.\n\n### Code\n\nThe code of `mathjs` is written in ES modules, and requires all files to have a real, relative path, meaning the files must have a `*.js` extension. Please configure adding file extensions on auto import in your IDE.\n\n### Architecture\n\nWhat mathjs tries to achieve is to offer an environment where you can do calculations with mixed data types,\nlike multiplying a regular `number` with a `Complex` number or a `BigNumber`, and work with all of those in matrices.\nMathjs also allows to add a new data type with little effort.\n\nThe solution that mathjs uses has two main ingredients:\n\n- **Typed functions**. All functions are created using [`typed-function`](https://github.com/josdejong/typed-function/). This makes it easier to (dynamically) create and extend a single function with new data types, automatically do type conversions on function inputs, etc. So, if you create function multiply for two `number`s, you can extend it with support for multiplying your own data type, say `MyDecimal`. If you define a conversion from `MyDecimal` to `number`, the typed-function will automatically allow you to multiply a `MyDecimal` with a `number`.\n\n- **Dependency injection**. When we have a function `multiply` with support for `MyDecimal`, thanks to the dependency injection, other functions using `multiply` under the hood, like `prod`, will automatically support `MyDecimal` too. This also works the other way around: if you don't need the heavyweight `multiply` (which supports BigNumbers, matrices, etc), and you just need a plain and simple number support, you can use a lightweight implementation of `multiply` just for numbers, and inject that in `prod` and other functions.\n\nAt the lowest level, mathjs has immutable factory functions which create immutable functions. The core function `math.create(...)` creates a new instance having functions created from all passed factory functions. A mathjs instance is a collection of created functions. It contains a function like `math.import` to allow extending the instance with new functions, which can then be used in the expression parser.\n\n### Implementing a new function\n\nA common case is to implement a new function. This involves the following steps:\n\n- Implement the function in the right category, for example `./src/function/arithmetic/myNewFunction.js`, where you can replace `arithmetic` with the proper category, and `myNewFunction` with the name of the new function. Add the new function to the index files `./src/factoriesAny.js` and possibly `./src/factoriesNumber.js`.\n- Write documentation on the function in the source code comment of `myNewFunction.js`. This documentation is used to auto generate documentation on the website.\n- Write embedded documentation for the new function in `./src/expression/embeddedDocs/function/arithmetic/myNewFunction.js`. Add the new documentation to the index file `./src/expression/embeddedDocs/embeddedDocs.js`.\n- Write unit tests for the function in `./test/unit-tests/function/arithmetic/myNewFunction.test.js`.\n- Write the necessary TypeScript definitions for the new function in `./types/index.d.ts`, and write tests for it in `./test/typescript-tests/testTypes.ts`. This is described in [./types/EXPLANATION.md](./types/EXPLANATION.md).\n- Ensure the code style is ok by running `npm run lint` (run `npm run format` to fix the code style automatically).\n\n\n### Build scripts\n\nThe build script currently generates two types of output:\n\n- **any**, generate entry points to create full versions of all functions\n- **number**: generating and entry points to create lightweight functions just supporting `number`\n\nFor each function, an object is generated containing the factory functions of all dependencies of the function. This allows to just load a specific set of functions, and not load or bundle any other functionality. So for example, to just create function `add` you can do `math.create(addDependencies)`.\n\n\n## Test\n\nTo execute tests for the library, install the project dependencies once:\n\n    npm install\n\nThen, the tests can be executed:\n\n    npm test\n\nTo test the type definitions:\n\n    npm run test:types\n\nAdditionally, the tests can be run on FireFox using [headless mode](https://developer.mozilla.org/en-US/Firefox/Headless_mode):\n\n    npm run test:browser\n\nTo run the tests remotely on LambdaTest, first set the environment variables `LT_USERNAME` and `LT_ACCESS_KEY` with your username and access key and then execute:\n\n    npm run test:lambdatest\n\nYou can separately run the code linter, though it is also executed with `npm test`:\n\n    npm run lint\n\nTo automatically fix linting issue, run:\n\n    npm run format\n\nTo test code coverage of the tests:\n\n    npm run coverage\n\nTo see the coverage results, open the generated report in your browser:\n\n    ./coverage/lcov-report/index.html\n\n\n### Continuous integration testing\n\nContinuous integration tests are run on [Github Actions](https://github.com/josdejong/mathjs/actions) and [LambdaTest](https://www.lambdatest.com) every time a commit is pushed to github. Github Actions runs the tests for different versions of node.js, and LambdaTest runs the tests on all major browsers.\n\n[![LambdaTest](https://raw.github.com/josdejong/mathjs/master/misc/lambdatest.svg)](https://www.lambdatest.com)\n\nThanks, GitHub Actions and LambdaTest for the generous free hosting of this open source project!\n\n## License\n\nmathjs is published under the Apache 2.0 license:\n\n```\nCopyright (C) 2013-2025 Jos de Jong <wjosdejong@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\nmathjs contains a JavaScript port of the [CSparse](https://github.com/DrTimothyAldenDavis/SuiteSparse/tree/dev/CSparse/Source) library, published under the LGPL-2.1+ license:\n\n```\nCSparse: a Concise Sparse matrix package.\nCopyright (c) 2006, Timothy A. Davis.\nhttp://www.suitesparse.com\n\n--------------------------------------------------------------------------------\n\nCSparse is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nCSparse is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this Module; if not, write to the Free Software\nFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n```\n",
        "releases": []
    }
}