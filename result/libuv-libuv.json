{
    "https://api.github.com/repos/libuv/libuv": {
        "forks": 3631,
        "watchers": 24693,
        "stars": 24693,
        "languages": {
            "C": 3060282,
            "M4": 36963,
            "CMake": 28623,
            "Makefile": 21982,
            "Python": 2623,
            "Shell": 2489,
            "Batchfile": 1312
        },
        "commits": [
            "2025-01-15T18:11:00Z",
            "2025-01-15T18:05:30Z",
            "2025-01-15T18:05:29Z",
            "2025-01-14T13:50:26Z",
            "2025-01-08T12:58:28Z",
            "2024-12-16T12:41:36Z",
            "2024-12-16T08:05:09Z",
            "2024-11-23T22:59:49Z",
            "2024-12-15T19:24:20Z",
            "2024-12-10T22:36:32Z",
            "2024-12-10T22:36:32Z",
            "2024-12-13T20:30:17Z",
            "2024-12-12T23:23:36Z",
            "2024-12-12T20:05:53Z",
            "2024-12-12T14:59:30Z",
            "2024-12-12T13:04:13Z",
            "2024-12-12T12:19:47Z",
            "2024-12-12T11:41:08Z",
            "2022-11-30T22:59:10Z",
            "2024-12-09T20:14:01Z",
            "2024-12-08T21:32:49Z",
            "2024-12-05T23:11:05Z",
            "2024-12-02T23:31:06Z",
            "2024-11-28T21:02:41Z",
            "2024-11-28T20:06:05Z",
            "2024-11-27T11:52:18Z",
            "2024-11-26T17:58:45Z",
            "2024-11-26T13:44:38Z",
            "2024-11-25T21:42:38Z",
            "2024-11-25T14:10:47Z"
        ],
        "creation_date": "2013-11-30T00:29:56Z",
        "contributors": 30,
        "topics": [
            "asynchronous",
            "deep-io",
            "io",
            "networking",
            "unicorns",
            "unix",
            "velociraptors",
            "windows"
        ],
        "subscribers": 723,
        "readme": "![libuv][libuv_banner]\n\n## Overview\n\nlibuv is a multi-platform support library with a focus on asynchronous I/O. It\nwas primarily developed for use by [Node.js][], but it's also\nused by [Luvit](http://luvit.io/), [Julia](http://julialang.org/),\n[uvloop](https://github.com/MagicStack/uvloop), and [others](https://github.com/libuv/libuv/blob/v1.x/LINKS.md).\n\n## Feature highlights\n\n * Full-featured event loop backed by epoll, kqueue, IOCP, event ports.\n\n * Asynchronous TCP and UDP sockets\n\n * Asynchronous DNS resolution\n\n * Asynchronous file and file system operations\n\n * File system events\n\n * ANSI escape code controlled TTY\n\n * IPC with socket sharing, using Unix domain sockets or named pipes (Windows)\n\n * Child processes\n\n * Thread pool\n\n * Signal handling\n\n * High resolution clock\n\n * Threading and synchronization primitives\n\n## Versioning\n\nStarting with version 1.0.0 libuv follows the [semantic versioning](http://semver.org/)\nscheme. The API change and backwards compatibility rules are those indicated by\nSemVer. libuv will keep a stable ABI across major releases.\n\nThe ABI/API changes can be tracked [here](http://abi-laboratory.pro/tracker/timeline/libuv/).\n\n## Licensing\n\nlibuv is licensed under the MIT license. Check the [LICENSE](LICENSE) and\n[LICENSE-extra](LICENSE-extra) files.\n\nThe documentation is licensed under the CC BY 4.0 license. Check the\n[LICENSE-docs file](LICENSE-docs).\n\n## Community\n\n * [Support](https://github.com/libuv/libuv/discussions)\n * [Mailing list](http://groups.google.com/group/libuv)\n\n## Documentation\n\n### Official documentation\n\nLocated in the docs/ subdirectory. It uses the [Sphinx](http://sphinx-doc.org/)\nframework, which makes it possible to build the documentation in multiple\nformats.\n\nShow different supported building options:\n\n```bash\n$ make help\n```\n\nBuild documentation as HTML:\n\n```bash\n$ make html\n```\n\nBuild documentation as HTML and live reload it when it changes (this requires\nsphinx-autobuild to be installed and is only supported on Unix):\n\n```bash\n$ make livehtml\n```\n\nBuild documentation as man pages:\n\n```bash\n$ make man\n```\n\nBuild documentation as ePub:\n\n```bash\n$ make epub\n```\n\nNOTE: Windows users need to use make.bat instead of plain 'make'.\n\nDocumentation can be browsed online [here](http://docs.libuv.org).\n\nThe [tests and benchmarks](https://github.com/libuv/libuv/tree/master/test)\nalso serve as API specification and usage examples.\n\n### Other resources\n\n * [LXJS 2012 talk](http://www.youtube.com/watch?v=nGn60vDSxQ4)\n   &mdash; High-level introductory talk about libuv.\n * [libuv-dox](https://github.com/thlorenz/libuv-dox)\n   &mdash; Documenting types and methods of libuv, mostly by reading uv.h.\n * [learnuv](https://github.com/thlorenz/learnuv)\n   &mdash; Learn uv for fun and profit, a self guided workshop to libuv.\n\nThese resources are not handled by libuv maintainers and might be out of\ndate. Please verify it before opening new issues.\n\n## Downloading\n\nlibuv can be downloaded either from the\n[GitHub repository](https://github.com/libuv/libuv)\nor from the [downloads site](http://dist.libuv.org/dist/).\n\nBefore verifying the git tags or signature files, importing the relevant keys\nis necessary. Key IDs are listed in the\n[MAINTAINERS](https://github.com/libuv/libuv/blob/master/MAINTAINERS.md)\nfile, but are also available as git blob objects for easier use.\n\nImporting a key the usual way:\n\n```bash\n$ gpg --keyserver pool.sks-keyservers.net --recv-keys AE9BC059\n```\n\nImporting a key from a git blob object:\n\n```bash\n$ git show pubkey-saghul | gpg --import\n```\n\n### Verifying releases\n\nGit tags are signed with the developer's key, they can be verified as follows:\n\n```bash\n$ git verify-tag v1.6.1\n```\n\nStarting with libuv 1.7.0, the tarballs stored in the\n[downloads site](http://dist.libuv.org/dist/) are signed and an accompanying\nsignature file sit alongside each. Once both the release tarball and the\nsignature file are downloaded, the file can be verified as follows:\n\n```bash\n$ gpg --verify libuv-1.7.0.tar.gz.sign\n```\n\n## Build Instructions\n\nFor UNIX-like platforms, including macOS, there are two build methods:\nautotools or [CMake][].\n\nFor Windows, [CMake][] is the only supported build method and has the\nfollowing prerequisites:\n\n<details>\n\n* One of:\n  * [Visual C++ Build Tools][]\n  * [Visual Studio 2015 Update 3][], all editions\n    including the Community edition (remember to select\n    \"Common Tools for Visual C++ 2015\" feature during installation).\n  * [Visual Studio 2017][], any edition (including the Build Tools SKU).\n    **Required Components:** \"MSbuild\", \"VC++ 2017 v141 toolset\" and one of the\n    Windows SDKs (10 or 8.1).\n* Basic Unix tools required for some tests,\n  [Git for Windows][] includes Git Bash\n  and tools which can be included in the global `PATH`.\n\n</details>\n\nTo build with autotools:\n\n```bash\n$ sh autogen.sh\n$ ./configure\n$ make\n$ make check\n$ make install\n```\n\nTo build with [CMake][]:\n\n```bash\n$ mkdir -p build\n\n$ (cd build && cmake .. -DBUILD_TESTING=ON) # generate project with tests\n$ cmake --build build                       # add `-j <n>` with cmake >= 3.12\n\n# Run tests:\n$ (cd build && ctest -C Debug --output-on-failure)\n\n# Or manually run tests:\n$ build/uv_run_tests                        # shared library build\n$ build/uv_run_tests_a                      # static library build\n```\n\nTo cross-compile with [CMake][] (unsupported but generally works):\n\n```bash\n$ cmake ../..                 \\\n  -DCMAKE_SYSTEM_NAME=Windows \\\n  -DCMAKE_SYSTEM_VERSION=6.1  \\\n  -DCMAKE_C_COMPILER=i686-w64-mingw32-gcc\n```\n\n### Install with Homebrew\n\n```bash\n$ brew install --HEAD libuv\n```\n\nNote to OS X users:\n\nMake sure that you specify the architecture you wish to build for in the\n\"ARCHS\" flag. You can specify more than one by delimiting with a space\n(e.g. \"x86_64 i386\").\n\n### Install with vcpkg\n\n```bash\n$ git clone https://github.com/microsoft/vcpkg.git\n$ ./bootstrap-vcpkg.bat # for powershell\n$ ./bootstrap-vcpkg.sh # for bash\n$ ./vcpkg install libuv\n```\n\n### Install with Conan\n\nYou can install pre-built binaries for libuv or build it from source using [Conan](https://conan.io/). Use the following command:\n\n```bash\nconan install --requires=\"libuv/[*]\" --build=missing\n```\n\nThe libuv Conan recipe is kept up to date by Conan maintainers and community contributors.\nIf the version is out of date, please [create an issue or pull request](https://github.com/conan-io/conan-center-index) on the ConanCenterIndex repository.\n\n\n### Running tests\n\nSome tests are timing sensitive. Relaxing test timeouts may be necessary\non slow or overloaded machines:\n\n```bash\n$ env UV_TEST_TIMEOUT_MULTIPLIER=2 build/uv_run_tests # 10s instead of 5s\n```\n\n#### Run one test\n\nThe list of all tests is in `test/test-list.h`.\n\nThis invocation will cause the test driver to fork and execute `TEST_NAME` in\na child process:\n\n```bash\n$ build/uv_run_tests_a TEST_NAME\n```\n\nThis invocation will cause the test driver to execute the test in\nthe same process:\n\n```bash\n$ build/uv_run_tests_a TEST_NAME TEST_NAME\n```\n\n#### Debugging tools\n\nWhen running the test from within the test driver process\n(`build/uv_run_tests_a TEST_NAME TEST_NAME`), tools like gdb and valgrind\nwork normally.\n\nWhen running the test from a child of the test driver process\n(`build/uv_run_tests_a TEST_NAME`), use these tools in a fork-aware manner.\n\n##### Fork-aware gdb\n\nUse the [follow-fork-mode](https://sourceware.org/gdb/onlinedocs/gdb/Forks.html) setting:\n\n```\n$ gdb --args build/uv_run_tests_a TEST_NAME\n\n(gdb) set follow-fork-mode child\n...\n```\n\n##### Fork-aware valgrind\n\nUse the `--trace-children=yes` parameter:\n\n```bash\n$ valgrind --trace-children=yes -v --tool=memcheck --leak-check=full --track-origins=yes --leak-resolution=high --show-reachable=yes --log-file=memcheck-%p.log build/uv_run_tests_a TEST_NAME\n```\n\n### Running benchmarks\n\nSee the section on running tests.\nThe benchmark driver is `./uv_run_benchmarks_a` and the benchmarks are\nlisted in `test/benchmark-list.h`.\n\n## Supported Platforms\n\nCheck the [SUPPORTED_PLATFORMS file](SUPPORTED_PLATFORMS.md).\n\n### `-fno-strict-aliasing`\n\nIt is recommended to turn on the `-fno-strict-aliasing` compiler flag in\nprojects that use libuv. The use of ad hoc \"inheritance\" in the libuv API\nmay not be safe in the presence of compiler optimizations that depend on\nstrict aliasing.\n\nMSVC does not have an equivalent flag but it also does not appear to need it\nat the time of writing (December 2019.)\n\n### AIX Notes\n\nAIX compilation using IBM XL C/C++ requires version 12.1 or greater.\n\nAIX support for filesystem events requires the non-default IBM `bos.ahafs`\npackage to be installed.  This package provides the AIX Event Infrastructure\nthat is detected by `autoconf`.\n[IBM documentation](http://www.ibm.com/developerworks/aix/library/au-aix_event_infrastructure/)\ndescribes the package in more detail.\n\n### z/OS Notes\n\nz/OS compilation requires [ZOSLIB](https://github.com/ibmruntimes/zoslib) to be installed. When building with [CMake][], use the flag `-DZOSLIB_DIR` to specify the path to [ZOSLIB](https://github.com/ibmruntimes/zoslib):\n\n```bash\n$ (cd build && cmake .. -DBUILD_TESTING=ON -DZOSLIB_DIR=/path/to/zoslib)\n$ cmake --build build\n```\n\nz/OS creates System V semaphores and message queues. These persist on the system\nafter the process terminates unless the event loop is closed.\n\nUse the `ipcrm` command to manually clear up System V resources.\n\n## Patches\n\nSee the [guidelines for contributing][].\n\n[CMake]: https://cmake.org/\n[node.js]: http://nodejs.org/\n[guidelines for contributing]: https://github.com/libuv/libuv/blob/master/CONTRIBUTING.md\n[libuv_banner]: https://raw.githubusercontent.com/libuv/libuv/master/img/banner.png\n[Visual C++ Build Tools]: https://visualstudio.microsoft.com/visual-cpp-build-tools/\n[Visual Studio 2015 Update 3]: https://www.visualstudio.com/vs/older-downloads/\n[Visual Studio 2017]: https://www.visualstudio.com/downloads/\n[Git for Windows]: http://git-scm.com/download/win\n",
        "releases": [
            {
                "name": "v1.50.0: 2025.01.15, Version 1.50.0 (Stable)",
                "date": "2025-01-15T18:23:22Z"
            },
            {
                "name": "v1.49.2: 2024.10.18, Version 1.49.2 (Stable)",
                "date": "2024-10-18T19:15:00Z"
            },
            {
                "name": "v1.49.1: 2024.10.11, Version 1.49.1 (Stable)",
                "date": "2024-10-11T07:27:22Z"
            },
            {
                "name": "v1.49.0: 2024.09.25, Version 1.49.0 (Stable)",
                "date": "2024-09-25T09:00:23Z"
            },
            {
                "name": "v1.48.0: 2024.02.07, Version 1.48.0 (Stable)",
                "date": "2024-02-07T21:49:50Z"
            },
            {
                "name": "v1.47.0: 2023.11.06, Version 1.47.0 (Stable)",
                "date": "2023-11-06T18:33:24Z"
            },
            {
                "name": "v1.46.0: 2023.06.30, Version 1.46.0 (Stable)",
                "date": "2023-06-30T21:10:20Z"
            },
            {
                "name": "v1.45.0: 2023.05.19, Version 1.45.0 (Stable)",
                "date": "2023-05-19T11:44:38Z"
            },
            {
                "name": "",
                "date": "2022-07-12T17:15:38Z"
            },
            {
                "name": "",
                "date": "2022-03-09T19:17:22Z"
            },
            {
                "name": "",
                "date": "2022-03-07T17:17:17Z"
            },
            {
                "name": "v1.43.0: 2022.01.05, Version 1.43.0 (Stable)",
                "date": "2022-01-04T14:30:00Z"
            },
            {
                "name": "",
                "date": "2021-07-22T16:24:10Z"
            }
        ]
    }
}