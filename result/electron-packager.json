{
    "https://api.github.com/repos/electron/electron-packager": {
        "forks": 22,
        "watchers": 197,
        "stars": 197,
        "languages": {
            "TypeScript": 102739,
            "JavaScript": 98851,
            "Shell": 1657
        },
        "commits": [
            "2025-01-07T19:15:09Z",
            "2024-12-18T03:59:26Z",
            "2024-11-20T23:57:24Z",
            "2024-11-12T22:00:57Z",
            "2024-11-01T12:41:59Z",
            "2024-11-01T12:41:39Z",
            "2024-11-01T12:41:12Z",
            "2024-10-26T14:00:15Z",
            "2024-10-03T14:23:37Z",
            "2024-10-01T15:43:44Z",
            "2024-10-01T15:42:00Z",
            "2024-09-21T05:00:34Z",
            "2024-09-11T03:25:56Z",
            "2024-09-01T17:48:53Z",
            "2024-09-01T15:40:26Z",
            "2024-08-20T18:06:02Z",
            "2024-08-13T23:10:11Z",
            "2024-07-30T05:17:05Z",
            "2024-07-29T18:03:23Z",
            "2024-07-22T15:55:06Z",
            "2024-07-17T13:53:49Z",
            "2024-07-16T03:26:29Z",
            "2024-07-15T21:43:25Z",
            "2024-07-10T22:27:26Z",
            "2024-07-10T22:15:19Z",
            "2024-07-10T21:08:16Z",
            "2024-07-01T16:36:18Z",
            "2024-06-28T15:45:20Z",
            "2024-06-25T22:16:56Z",
            "2024-06-25T20:22:10Z"
        ],
        "creation_date": "2015-03-23T02:54:14Z",
        "contributors": 30,
        "topics": [
            "electron",
            "electron-packager",
            "hacktoberfest",
            "javascript"
        ],
        "subscribers": 3,
        "readme": "# @electron/packager\n\nPackage your [Electron](https://electronjs.org) app into OS-specific bundles (`.app`, `.exe`, etc.) via JavaScript or the command line.\n\n[![Test](https://github.com/electron/packager/actions/workflows/test.yml/badge.svg)](https://github.com/electron/packager/actions/workflows/test.yml)\n[![electron-nightly Canary](https://github.com/electron/packager/actions/workflows/canary.yml/badge.svg)](https://github.com/electron/packager/actions/workflows/canary.yml)\n[![Coverage Status](https://codecov.io/gh/electron/packager/branch/main/graph/badge.svg)](https://codecov.io/gh/electron/packager)\n[![npm](https://img.shields.io/npm/v/@electron/packager.svg?style=flat)](https://npm.im/@electron/packager)\n[![Discord](https://img.shields.io/discord/745037351163527189?color=blueviolet&logo=discord)](https://discord.com/invite/APGC3k5yaH)\n\n[Supported Platforms](#supported-platforms) |\n[Installation](#installation) |\n[Usage](#usage) |\n[API](https://electron.github.io/packager/main/) |\n[Contributing](https://github.com/electron/packager/blob/main/CONTRIBUTING.md) |\n[Support](https://github.com/electron/packager/blob/main/SUPPORT.md) |\n[Related Apps/Libraries](#related) |\n[FAQ](https://github.com/electron/packager/blob/main/docs/faq.md) |\n[Release Notes](https://github.com/electron/packager/blob/main/NEWS.md)\n\n----\n\n## About\n\nElectron Packager is a command line tool and Node.js library that bundles Electron-based application\nsource code with a renamed Electron executable and supporting files into folders ready for distribution.\n\nFor creating distributables like installers and Linux packages, consider using either [Electron\nForge](https://github.com/electron/forge) (which uses Electron Packager\ninternally), or one of the [related Electron tools](#distributable-creators), which utilizes\nElectron Packager-created folders as a basis.\n\nNote that packaged Electron applications can be relatively large. A zipped, minimal Electron\napplication is approximately the same size as the zipped prebuilt binary for a given target\nplatform, target arch, and [Electron version](https://github.com/electron/electron/releases)\n_(files named `electron-v${version}-${platform}-${arch}.zip`)_.\n\n## Supported Platforms\n\nElectron Packager is known to run on the following **host** platforms:\n\n* Windows (32/64 bit)\n* macOS (formerly known as OS X)\n* Linux (x86/x86_64)\n\nIt generates executables/bundles for the following **target** platforms:\n\n* Windows (also known as `win32`, for x86, x86_64, and arm64 architectures)\n* macOS (also known as `darwin`) / [Mac App Store](https://electronjs.org/docs/tutorial/mac-app-store-submission-guide/) (also known as `mas`)<sup>*</sup> (for x86_64, arm64, and universal architectures)\n* Linux (for x86, x86_64, armv7l, arm64, and mips64el architectures)\n\n<sup>*</sup> *Note for macOS / Mac App Store target bundles: the `.app` bundle can only be signed when building on a host macOS platform.*\n\n## Installation\n\nThis module requires Node.js 16.13.0 or higher to run.\n\n```sh\nnpm install --save-dev @electron/packager\n```\n\nIt is **not** recommended to install `@electron/packager` globally.\n\n## Usage\n\n### Via JavaScript\n\nJavaScript API usage can be found in the [API documentation](https://electron.github.io/packager/main/).\n\n### From the command line\n\nRunning Electron Packager from the command line has this basic form:\n\n```\nnpx @electron/packager <sourcedir> <appname> --platform=<platform> --arch=<arch> [optional flags...]\n```\n\n> **Note**:\n> `npx` can be substituted for `yarn` or `npm exec` depending on what package manager and\n> the version you have installed.\n\nThis will:\n\n* Find or download the correct release of Electron\n* Use that version of Electron to create an app in `<out>/<appname>-<platform>-<arch>` *(this can be customized via an optional flag)*\n\n`--platform` and `--arch` can be omitted, in two cases:\n\n* If you specify `--all` instead, bundles for all valid combinations of target\n  platforms/architectures will be created.\n* Otherwise, a single bundle for the host platform/architecture will be created.\n\nFor an overview of the other optional flags, run `electron-packager --help` or see\n[usage.txt](https://github.com/electron/packager/blob/main/usage.txt). For\ndetailed descriptions, see the [API documentation](https://electron.github.io/packager/main/).\n\nFor flags that are structured as objects, you can pass each option as via dot notation as such:\n\n```sh\nnpx @electron/packager --flag.foo=\"bar\"\n# will pass in { flag: { foo: \"bar\"} } as an option to the Electron Packager API\n```\n\nIf `appname` is omitted, this will use the name specified by \"productName\" or \"name\" in the nearest package.json.\n\n**Characters in the Electron app name which are not allowed in all target platforms' filenames\n(e.g., `/`), will be replaced by hyphens (`-`).**\n\nYou should be able to launch the app on the platform you built for. If not, check your settings and try again.\n\n**Be careful** not to include `node_modules` you don't want into your final app. If you put them in\nthe `devDependencies` section of `package.json`, by default none of the modules related to those\ndependencies will be copied in the app bundles. (This behavior can be turned off with the\n`prune: false` API option or `--no-prune` CLI flag.) In addition, folders like `.git` and\n`node_modules/.bin` will be ignored by default. You can use `--ignore` to ignore files and folders\nvia a regular expression (*not* a [glob pattern](https://en.wikipedia.org/wiki/Glob_%28programming%29)).\nExamples include `--ignore=\\.gitignore` or `--ignore=\"\\.git(ignore|modules)\"`.\n\n#### Example\n\nLet's assume that you have made an app based on the [electron-quick-start](https://github.com/electron/electron-quick-start) repository on a macOS host platform with the following file structure:\n\n```\nfoobar\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 [\u2026other files, like the app's LICENSE\u2026]\n\u2514\u2500\u2500 script.js\n```\n\n\u2026and that the following is true:\n\n* `@electron/packager` is installed locally\n* `productName` in `package.json` has been set to `Foo Bar`\n* The `electron` module is in the `devDependencies` section of `package.json`, and set to the exact version of `1.4.15`.\n* `npm install` for the `Foo Bar` app has been run at least once\n\nWhen one runs the following command for the first time in the `foobar` directory:\n\n```\nnpx @electron/packager .\n```\n\n`@electron/packager` will do the following:\n\n* Use the current directory for the `sourcedir`\n* Infer the `appname` from the `productName` in `package.json`\n* Infer the `appVersion` from the `version` in `package.json`\n* Infer the `platform` and `arch` from the host, in this example, `darwin` platform and `x64` arch.\n* Download the darwin x64 build of Electron 1.4.15 (and cache the downloads in `~/.electron`)\n* Build the macOS `Foo Bar.app`\n* Place `Foo Bar.app` in `foobar/Foo Bar-darwin-x64/` (since an `out` directory was not specified, it used the current working directory)\n\nThe file structure now looks like:\n\n```\nfoobar\n\u251c\u2500\u2500 Foo Bar-darwin-x64\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Foo Bar.app\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [\u2026Mac app contents\u2026]\n\u2502   \u251c\u2500\u2500 LICENSE [the Electron license]\n\u2502   \u2514\u2500\u2500 version\n\u251c\u2500\u2500 [\u2026other application bundles, like \"Foo Bar-win32-x64\" (sans quotes)\u2026]\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 [\u2026other files, like the app's LICENSE\u2026]\n\u2514\u2500\u2500 script.js\n```\n\nThe `Foo Bar.app` folder generated can be executed by a system running macOS, which will start the packaged Electron app. This is also true of the Windows x64 build on a system running a new enough version of Windows for a 64-bit system (via `Foo Bar-win32-x64/Foo Bar.exe`), and so on.\n\n## Related\n\n- [Electron Forge](https://github.com/electron/forge) - creates, builds, and distributes modern Electron applications\n- [electron-packager-interactive](https://github.com/Urucas/electron-packager-interactive) - an interactive CLI for electron-packager\n- [grunt-electron](https://github.com/sindresorhus/grunt-electron) - grunt plugin for electron-packager\n\n### Distributable Creators\n\n* [electron-installer-zip](https://github.com/electron-userland/electron-installer-zip) - creates symlink-compatible ZIP files\n\nWindows:\n\n* [electron-winstaller](https://github.com/electron/windows-installer) - Squirrel.Windows-based installer from the Electron maintainers group\n* [electron-windows-store](https://github.com/felixrieseberg/electron-windows-store) - creates an AppX package for the Windows Store\n* [electron-wix-msi](https://github.com/felixrieseberg/electron-wix-msi) - creates traditional MSI installers\n* [electron-installer-windows](https://github.com/electron-userland/electron-installer-windows) - alternative Squirrel.Windows-based installer\n\nmacOS:\n\n* [electron-installer-dmg](https://github.com/electron-userland/electron-installer-dmg) - creates a DMG\n\nLinux:\n\n* [electron-installer-debian](https://github.com/electron-userland/electron-installer-debian) - creates a DEB file\n* [electron-installer-redhat](https://github.com/electron-userland/electron-installer-redhat) - creates an RPM\n* [electron-installer-flatpak](https://github.com/endlessm/electron-installer-flatpak) - creates a Flatpak file\n* [electron-installer-snap](https://github.com/electron-userland/electron-installer-snap) - creates a Snap file\n\n### Plugins\n\nThese Node modules utilize Electron Packager API hooks:\n\n- [electron-packager-languages](https://npm.im/electron-packager-languages) - sets the locales\n  available to Electron when packaged, which is used by the Mac App Store, among other places\n- [electron-packager-plugin-non-proprietary-codecs-ffmpeg](https://www.npmjs.com/package/electron-packager-plugin-non-proprietary-codecs-ffmpeg) - replaces the normal version of FFmpeg in Electron with a version without proprietary codecs\n- [@electron/rebuild](https://github.com/electron/rebuild) - rebuilds native Node.js modules\n  against the packaged Electron version\n",
        "releases": [
            {
                "name": "v18.3.6",
                "date": "2024-11-12T22:10:41Z"
            },
            {
                "name": "v18.3.5",
                "date": "2024-09-11T03:33:01Z"
            },
            {
                "name": "v18.3.4",
                "date": "2024-08-20T18:13:28Z"
            },
            {
                "name": "v18.3.3",
                "date": "2024-06-18T17:01:20Z"
            },
            {
                "name": "v18.3.2",
                "date": "2024-04-02T03:23:44Z"
            },
            {
                "name": "v18.3.1",
                "date": "2024-03-28T16:42:42Z"
            },
            {
                "name": "v18.3.0",
                "date": "2024-03-27T23:24:20Z"
            },
            {
                "name": "v18.2.0",
                "date": "2024-03-27T20:49:16Z"
            },
            {
                "name": "v18.1.3",
                "date": "2023-12-19T15:19:48Z"
            },
            {
                "name": "v18.1.2",
                "date": "2023-12-18T20:35:57Z"
            },
            {
                "name": "v18.1.1",
                "date": "2023-12-05T00:20:48Z"
            },
            {
                "name": "v18.1.0",
                "date": "2023-11-30T17:41:48Z"
            },
            {
                "name": "v18.0.0",
                "date": "2023-11-08T01:33:54Z"
            },
            {
                "name": "17.1.2",
                "date": "2023-08-18T23:16:03Z"
            },
            {
                "name": "v17.1.1",
                "date": "2022-11-01T21:39:53Z"
            },
            {
                "name": "v17.1.0",
                "date": "2022-10-31T19:50:49Z"
            },
            {
                "name": "17.0.0",
                "date": "2022-10-19T20:55:43Z"
            },
            {
                "name": "16.0.0",
                "date": "2022-08-23T21:01:51Z"
            },
            {
                "name": "15.5.2",
                "date": "2022-08-22T23:54:03Z"
            },
            {
                "name": "15.5.0",
                "date": "2022-04-19T17:27:56Z"
            },
            {
                "name": "15.4.0",
                "date": "2021-09-10T18:11:29Z"
            },
            {
                "name": "15.3.0",
                "date": "2021-07-18T04:21:59Z"
            },
            {
                "name": "15.2.0",
                "date": "2020-12-24T08:34:39Z"
            },
            {
                "name": "15.1.0",
                "date": "2020-08-21T15:47:19Z"
            },
            {
                "name": "15.0.0",
                "date": "2020-06-27T16:32:21Z"
            },
            {
                "name": "14.2.1",
                "date": "2020-02-07T22:39:20Z"
            },
            {
                "name": "14.2.0",
                "date": "2020-01-13T19:46:29Z"
            },
            {
                "name": "14.1.1",
                "date": "2019-11-20T00:26:59Z"
            },
            {
                "name": "14.1.0",
                "date": "2019-11-20T00:18:55Z"
            },
            {
                "name": "14.0.6",
                "date": "2019-10-04T14:45:04Z"
            },
            {
                "name": "14.0.5",
                "date": "2019-08-29T05:47:55Z"
            },
            {
                "name": "14.0.4",
                "date": "2019-07-30T16:28:24Z"
            },
            {
                "name": "14.0.3",
                "date": "2019-07-25T05:49:29Z"
            },
            {
                "name": "14.0.2",
                "date": "2019-07-18T15:09:33Z"
            },
            {
                "name": "14.0.1",
                "date": "2019-07-11T17:23:50Z"
            },
            {
                "name": "14.0.0",
                "date": "2019-06-20T16:06:48Z"
            },
            {
                "name": "13.1.1",
                "date": "2019-06-20T17:29:12Z"
            },
            {
                "name": "13.1.0",
                "date": "2019-06-20T17:29:34Z"
            },
            {
                "name": "11.2.1",
                "date": "2019-01-02T08:37:13Z"
            },
            {
                "name": "13.0.1",
                "date": "2018-12-13T02:44:30Z"
            },
            {
                "name": "13.0.0",
                "date": "2018-12-06T02:53:01Z"
            },
            {
                "name": "12.2.0",
                "date": "2018-10-03T02:12:40Z"
            },
            {
                "name": "12.1.2",
                "date": "2018-10-03T02:12:24Z"
            },
            {
                "name": "12.1.1",
                "date": "2018-10-03T02:11:50Z"
            },
            {
                "name": "12.1.0",
                "date": "2018-10-03T02:11:14Z"
            },
            {
                "name": "12.0.2",
                "date": "2018-10-03T02:10:40Z"
            },
            {
                "name": "12.0.1",
                "date": "2018-10-03T02:09:59Z"
            },
            {
                "name": "12.0.0",
                "date": "2018-04-03T14:00:04Z"
            },
            {
                "name": "11.2.0",
                "date": "2018-03-24T18:57:37Z"
            },
            {
                "name": "11.1.0",
                "date": "2018-03-04T23:01:29Z"
            },
            {
                "name": "11.0.1",
                "date": "2018-02-13T06:26:23Z"
            },
            {
                "name": "11.0.0",
                "date": "2018-02-07T05:22:54Z"
            },
            {
                "name": "10.1.2",
                "date": "2018-01-27T02:08:13Z"
            },
            {
                "name": "10.1.1",
                "date": "2018-01-27T02:07:52Z"
            },
            {
                "name": "10.1.0",
                "date": "2017-11-20T07:46:07Z"
            },
            {
                "name": "10.0.0",
                "date": "2017-11-20T02:57:42Z"
            },
            {
                "name": "9.1.0",
                "date": "2017-09-16T04:52:36Z"
            },
            {
                "name": "9.0.1",
                "date": "2017-09-02T17:20:06Z"
            },
            {
                "name": "9.0.0",
                "date": "2017-08-24T04:56:00Z"
            },
            {
                "name": "8.7.2",
                "date": "2017-08-24T04:55:43Z"
            },
            {
                "name": "8.7.1",
                "date": "2017-06-06T06:03:45Z"
            },
            {
                "name": "8.7.0",
                "date": "2017-05-02T04:56:59Z"
            },
            {
                "name": "8.6.0",
                "date": "2017-03-30T14:46:15Z"
            },
            {
                "name": "8.5.2",
                "date": "2017-02-20T03:38:18Z"
            },
            {
                "name": "8.5.1",
                "date": "2017-01-22T23:51:06Z"
            },
            {
                "name": "8.5.0",
                "date": "2017-01-11T03:24:39Z"
            },
            {
                "name": "8.4.0",
                "date": "2016-12-17T22:15:08Z"
            },
            {
                "name": "8.3.0",
                "date": "2016-11-17T07:05:05Z"
            },
            {
                "name": "8.2.0",
                "date": "2016-10-30T06:12:14Z"
            },
            {
                "name": "8.1.0",
                "date": "2016-10-30T06:11:50Z"
            },
            {
                "name": "8.0.0",
                "date": "2016-09-03T19:51:07Z"
            },
            {
                "name": "7.7.0",
                "date": "2016-08-20T15:41:33Z"
            },
            {
                "name": "7.6.0",
                "date": "2016-08-14T21:56:20Z"
            },
            {
                "name": "7.5.1",
                "date": "2016-08-06T18:48:33Z"
            },
            {
                "name": "7.5.0",
                "date": "2016-08-05T01:08:53Z"
            },
            {
                "name": "7.4.0",
                "date": "2016-07-31T19:16:16Z"
            },
            {
                "name": "7.3.0",
                "date": "2016-07-10T19:33:14Z"
            },
            {
                "name": "7.2.0",
                "date": "2016-07-04T01:05:45Z"
            },
            {
                "name": "7.1.0",
                "date": "2016-06-23T02:21:37Z"
            },
            {
                "name": "7.0.4",
                "date": "2016-06-14T17:08:56Z"
            },
            {
                "name": "7.0.3",
                "date": "2016-06-01T04:25:34Z"
            },
            {
                "name": "7.0.2",
                "date": "2016-05-18T16:22:30Z"
            },
            {
                "name": "7.0.1",
                "date": "2016-04-21T15:42:07Z"
            },
            {
                "name": "7.0.0",
                "date": "2016-04-18T03:19:13Z"
            },
            {
                "name": "6.0.2",
                "date": "2016-04-10T01:23:34Z"
            },
            {
                "name": "6.0.1",
                "date": "2016-04-08T07:42:54Z"
            },
            {
                "name": "6.0.0",
                "date": "2016-03-28T15:00:16Z"
            }
        ]
    }
}