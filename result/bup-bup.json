{
    "https://api.github.com/repos/bup/bup": {
        "forks": 421,
        "watchers": 7179,
        "stars": 7179,
        "languages": {
            "Python": 790811,
            "Shell": 210500,
            "C": 141108,
            "Makefile": 11670,
            "HTML": 4042,
            "CSS": 500,
            "Emacs Lisp": 283
        },
        "commits": [
            "2025-01-08T19:55:07Z",
            "2025-01-03T22:17:10Z",
            "2025-01-04T19:55:03Z",
            "2025-01-04T23:00:01Z",
            "2024-12-16T09:48:11Z",
            "2025-01-11T21:14:00Z",
            "2024-12-28T22:09:14Z",
            "2024-12-28T21:46:41Z",
            "2024-12-28T21:35:45Z",
            "2025-01-11T18:50:10Z",
            "2024-12-17T01:39:06Z",
            "2024-12-11T18:54:52Z",
            "2024-06-03T18:30:43Z",
            "2020-01-23T22:54:19Z",
            "2020-06-07T19:05:46Z",
            "2021-11-25T20:46:28Z",
            "2021-11-25T20:47:50Z",
            "2021-11-25T20:47:14Z",
            "2024-10-25T22:59:05Z",
            "2024-10-25T22:59:05Z",
            "2024-10-25T22:39:30Z",
            "2024-12-12T22:07:53Z",
            "2024-12-12T22:06:34Z",
            "2024-12-12T22:05:48Z",
            "2024-12-12T19:18:31Z",
            "2024-09-27T15:46:34Z",
            "2024-10-25T18:46:42Z",
            "2024-10-23T19:57:17Z",
            "2024-10-26T08:58:38Z",
            "2024-10-24T20:31:49Z"
        ],
        "creation_date": "2012-09-03T22:51:40Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 210,
        "readme": "bup: It backs things up\n=======================\n\nbup is a program that backs things up.  It's short for \"backup.\" Can you\nbelieve that nobody else has named an open source program \"bup\" after all\nthis time?  Me neither.\n\nDespite its unassuming name, bup is pretty cool.  To give you an idea of\njust how cool it is, I wrote you this poem:\n\n                             Bup is teh awesome\n                          What rhymes with awesome?\n                            I guess maybe possum\n                           But that's irrelevant.\n\t\t\t\nHmm.  Did that help?  Maybe prose is more useful after all.\n\n\nReasons bup is awesome\n----------------------\n\nbup has a few advantages over other backup software:\n\n - It uses a rolling checksum algorithm (similar to rsync) to split large\n   files into chunks.  The most useful result of this is you can backup huge\n   virtual machine (VM) disk images, databases, and XML files incrementally,\n   even though they're typically all in one huge file, and not use tons of\n   disk space for multiple versions.\n   \n - It uses the packfile format from git (the open source version control\n   system), so you can access the stored data even if you don't like bup's\n   user interface.\n   \n - Unlike git, it writes packfiles *directly* (instead of having a separate\n   garbage collection / repacking stage) so it's fast even with gratuitously\n   huge amounts of data.  bup's improved index formats also allow you to\n   track far more filenames than git (millions) and keep track of far more\n   objects (hundreds or thousands of gigabytes).\n   \n - Data is \"automagically\" shared between incremental backups without having\n   to know which backup is based on which other one - even if the backups\n   are made from two different computers that don't even know about each\n   other.  You just tell bup to back stuff up, and it saves only the minimum\n   amount of data needed.\n   \n - You can back up directly to a remote bup server, without needing tons of\n   temporary disk space on the computer being backed up.  And if your backup\n   is interrupted halfway through, the next run will pick up where you left\n   off.  And it's easy to set up a bup server: just install bup on any\n   machine where you have ssh access.\n   \n - Bup can use \"par2\" redundancy to recover corrupted backups even if your\n   disk has undetected bad sectors.\n   \n - Even when a backup is incremental, you don't have to worry about\n   restoring the full backup, then each of the incrementals in turn; an\n   incremental backup *acts* as if it's a full backup, it just takes less\n   disk space.\n   \n - You can mount your bup repository as a FUSE filesystem and access the\n   content that way, and even export it over Samba.\n   \n - It's written in python (with some C parts to make it faster) so it's easy\n   for you to extend and maintain.\n\n\nReasons you might want to avoid bup\n-----------------------------------\n\n - It's not remotely as well tested as something like tar, so it's\n   more likely to eat your data.  It's also missing some\n   probably-critical features, though fewer than it used to be.\n   \n - It requires python 3.7 or newer, a C compiler, and an installed git\n   version >= 1.7.2.  It also requires par2 if you want fsck to be\n   able to generate the information needed to recover from some types\n   of corruption.\n \n - It currently only works on Linux, FreeBSD, NetBSD, OS X >= 10.4,\n   Solaris, or Windows (with Cygwin, and WSL).  Patches to support\n   other platforms are welcome.\n\n - Any items in \"Things that are stupid\" below.\n\n\nNotable changes introduced by a release\n=======================================\n\n - <a href=\"note/0.33.7-from-0.33.6.md\">Changes in 0.33.7 as compared to 0.33.6</a>\n - <a href=\"note/0.33.6-from-0.33.5.md\">Changes in 0.33.6 as compared to 0.33.5</a>\n - <a href=\"note/0.33.5-from-0.33.4.md\">Changes in 0.33.5 as compared to 0.33.4</a>\n - <a href=\"note/0.33.4-from-0.33.3.md\">Changes in 0.33.4 as compared to 0.33.3</a>\n - <a href=\"note/0.33.3-from-0.33.2.md\">Changes in 0.33.3 as compared to 0.33.2</a>\n - <a href=\"note/0.33.2-from-0.33.1.md\">Changes in 0.33.2 as compared to 0.33.1</a>\n - <a href=\"note/0.33.1-from-0.33.md\">Changes in 0.33.1 as compared to 0.33</a>\n - <a href=\"note/0.33-from-0.32.md\">Changes in 0.33 as compared to 0.32</a>\n - <a href=\"note/0.32.1-from-0.32.md\">Changes in 0.32.1 as compared to 0.32</a>\n - <a href=\"note/0.32-from-0.31.md\">Changes in 0.32 as compared to 0.31</a>\n - <a href=\"note/0.31-from-0.30.1.md\">Changes in 0.31 as compared to 0.30.1</a>\n - <a href=\"note/0.30.1-from-0.30.md\">Changes in 0.30.1 as compared to 0.30</a>\n - <a href=\"note/0.30-from-0.29.3.md\">Changes in 0.30 as compared to 0.29.3</a>\n - <a href=\"note/0.29.3-from-0.29.2.md\">Changes in 0.29.3 as compared to 0.29.2</a>\n - <a href=\"note/0.29.2-from-0.29.1.md\">Changes in 0.29.2 as compared to 0.29.1</a>\n - <a href=\"note/0.29.1-from-0.29.md\">Changes in 0.29.1 as compared to 0.29</a>\n - <a href=\"note/0.29-from-0.28.1.md\">Changes in 0.29 as compared to 0.28.1</a>\n - <a href=\"note/0.28.1-from-0.28.md\">Changes in 0.28.1 as compared to 0.28</a>\n - <a href=\"note/0.28-from-0.27.1.md\">Changes in 0.28 as compared to 0.27.1</a>\n - <a href=\"note/0.27.1-from-0.27.md\">Changes in 0.27.1 as compared to 0.27</a>\n\n\nTest status\n===========\n\n| main |\n|--------|\n| [![main branch test status](https://api.cirrus-ci.com/github/bup/bup.svg?branch=main)](https://cirrus-ci.com/github/bup/bup) |\n\nGetting started\n===============\n\nFrom source\n-----------\n\n - Check out the bup source code using git (for Cygwin, use a Cygwin\n   installed git so that symlinks will work by defaul):\n\n    ```sh\n    git clone https://github.com/bup/bup\n    ```\n\n - This will leave you on the main branch, which is perfect if you\n   would like to help with development, but if you'd just like to use\n   bup, please check out the latest stable release like this:\n\n    ```sh\n    git checkout 0.33.7\n    ```\n\n   You can see the latest stable release here:\n   https://github.com/bup/bup/tags\n\n - Ensure you have a Python 3.7+ development environment available and\n   install the required python libraries (including the development\n   libraries).\n\n   See the relevant [platform specific information](#platform-specific-information)\n   below, if available, and if not, refer to the [Debian notes](#notes-on-debian)\n   to get a general idea of what's required.  You might also want to\n   look at the `dev/prep-for-*` scripts.  Those include all the\n   commands used to prepare to build bup for testing on the platform.\n\n   For `bup fuse` you will need to install\n   [python-fuse](https://github.com/libfuse/python-fuse) rather than\n   [fusepy](https://github.com/fusepy/fusepy).  For example, in\n   Debian, install python3-fuse rather than python3-fusepy.\n\n   If you would like to use the optional bup web server on systems\n   without a tornado package, you may want to try this:\n\n    ```sh\n    pip install tornado\n    ```\n\n - Build (below, replace `make` with whatever GNU make is called on\n   the current system if it isn't `make`, e.g. commonly `gmake`):\n\n    ```sh\n    make\n    ```\n\n   At the moment the build treats compiler warnings as errors.  If the\n   build fails as a result, try this:\n\n   ```sh\n   CFLAGS=-Wno-error ./configure\n   make\n   ```\n\n - Run the tests:\n\n    ```sh\n    make long-check\n    ```\n\n    or if you're in a bit more of a hurry:\n\n    ```sh\n    make check\n    ```\n \t\n    If you have the Python xdist module installed, then you can\n    probably run the tests faster by adding the make -j option (see <a\n    href=\"HACKING\">./HACKING</a> for additional information):\n\n    ```sh\n    make -j check\n    ```\n\n    The tests should pass (with some skipped tests that weren't\n    applicable in your environment).  If they don't pass for you, stop\n    here and send an email to bup-list@googlegroups.com.  Though if\n    there are symbolic links along the current working directory path,\n    the tests may fail.  Running something like this before \"make\n    test\" should sidestep the problem:\n\n    ```sh\n    cd \"$(pwd -P)\"\n    ```\n\n - You can install bup via \"make install\", and override the default\n   destination with DESTDIR and PREFIX.\n\n   Files are normally installed to \"$DESTDIR/$PREFIX\" where DESTDIR is\n   empty by default, and PREFIX is set to /usr/local.  So if you wanted to\n   install bup to /opt/bup, you might do something like this:\n\n    ```sh\n    make install DESTDIR=/opt/bup PREFIX=''\n    ```\n\n - The Python version that bup will use is determined by the\n   `python-config` program chosen by `./configure`, which will search\n   for a reasonable version unless `BUP_PYTHON_CONFIG` is set in the\n   environment.  You can see which Python executable was chosen by\n   looking at the configure output, or examining\n   `config/config.var/bup-python-config`, and you can change the\n   selection by re-running `./configure`.\n\n- If you want to specify your own `CPPFLAGS`, `CFLAGS`, or `LDFLAGS`,\n  you can set them for individual `make` invocations, e.g. `make\n  CFLAGS=-O0 check`, or persistently via `./configure` with\n  `CFLAGS=-O0 ./configure`.  At the moment, `make clean` clears the\n  configuration, but we may change that at some point, perhaps by\n  adding and requiring a `make distclean` to clear the configuration.\n\nFrom binary packages\n--------------------\n\nBinary packages of bup are known to be built for the following OSes:\n\n - [Debian](https://packages.debian.org/bup)\n - [Ubuntu](https://packages.ubuntu.com/bup)\n - [pkgsrc.se (NetBSD, Dragonfly, and others)](https://pkgsrc.se/sysutils/bup)\n - [NetBSD](https://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/sysutils/bup/)\n - [Arch Linux](https://www.archlinux.org/packages/?sort=&q=bup)\n - [macOS (Homebrew)](https://formulae.brew.sh/formula/bup)\n\n\nUsing bup\n---------\n\n - Get help for any bup command:\n\n    ```sh\n    bup help\n    bup help init\n    bup help index\n    bup help save\n    bup help restore\n    ...\n    ```\n\n - Initialize the default bup repository (~/.bup -- you can choose\n   another by either specifying `bup -d DIR ...` or setting the\n   `BUP_DIR` environment variable for a command):\n\n    ```sh\n    bup init\n    ```\n\n - Make a local backup (-v or -vv will increase the verbosity):\n\n    ```sh\n    bup index /etc\n    bup save -n local-etc /etc\n    ```\n\n - Restore a local backup to ./dest:\n\n    ```sh\n    bup restore -C ./dest local-etc/latest/etc\n    ls -l dest/etc\n    ```\n\n - Look at how much disk space your backup took:\n\n    ```sh\n    du -s ~/.bup\n    ```\n\n - Make another backup (which should be mostly identical to the last one;\n   notice that you don't have to *specify* that this backup is incremental,\n   it just saves space automatically):\n\n    ```sh\n    bup index /etc\n    bup save -n local-etc /etc\n    ```\n\n - Look how little extra space your second backup used (on top of the first):\n\n    ```sh\n    du -s ~/.bup\n    ```\n\n - Get a list of your previous backups:\n\n    ```sh\n    bup ls local-etc\n    ```\n\n - Restore your first backup again:\n\n    ```sh\n    bup restore -C ./dest-2 local-etc/2013-11-23-11195/etc\n    ```\n\n - Make a backup to a remote server which must already have the 'bup' command\n   somewhere in its PATH (see /etc/profile, etc/environment, ~/.profile, or\n   ~/.bashrc), and be accessible via ssh.\n   Make sure to replace SERVERNAME with the actual hostname of your server:\n\n    ```sh\n    bup init -r SERVERNAME:path/to/remote-bup-dir\n    bup index /etc\n    bup save -r SERVERNAME:path/to/remote-bup-dir -n local-etc /etc\n    ```\n\n - Make a remote backup to ~/.bup on SERVER:\n\n    ```sh\n    bup index /etc\n    bup save -r SERVER: -n local-etc /etc\n    ```\n\n - See what saves are available in ~/.bup on SERVER:\n\n    ```sh\n    bup ls -r SERVER:\n    ```\n\n - Restore the remote backup to ./dest:\n\n    ```sh\n    bup restore -r SERVER: -C ./dest local-etc/latest/etc\n    ls -l dest/etc\n    ```\n\n - Defend your backups from death rays (OK fine, more likely from the\n   occasional bad disk block).  This writes parity information\n   (currently via par2) for all of the existing data so that bup may\n   be able to recover from some amount of repository corruption:\n\n    ```sh\n    bup fsck -g\n    ```\n\n - Use split/join instead of index/save/restore.  Try making a local\n   backup using tar:\n\n    ```sh\n    tar -cvf - /etc | bup split -n local-etc -vv\n    ```\n \t\n - Try restoring the tarball:\n\n    ```sh\n    bup join local-etc | tar -tf -\n    ```\n \t\n - Look at how much disk space your backup took:\n\n    ```sh\n    du -s ~/.bup\n    ```\n \t\n - Make another tar backup:\n\n    ```sh\n    tar -cvf - /etc | bup split -n local-etc -vv\n    ```\n \t\n - Look at how little extra space your second backup used on top of\n   the first:\n\n    ```sh\n    du -s ~/.bup\n    ```\n \t\n - Restore the first tar backup again (the ~1 is git notation for \"one\n   older than the most recent\"):\n\n    ```sh\n    bup join local-etc~1 | tar -tf -\n    ```\n \n - Get a list of your previous split-based backups:\n\n    ```sh\n    GIT_DIR=~/.bup git log local-etc\n    ```\n\t\n - Save a tar archive to a remote server (without tar -z to facilitate\n   deduplication):\n\n    ```sh\n    tar -cvf - /etc | bup split -r SERVERNAME: -n local-etc -vv\n    ```\n \n - Restore the archive:\n\n    ```sh\n    bup join -r SERVERNAME: local-etc | tar -tf -\n    ```\n \t\nThat's all there is to it!\n\n\nPlatform specific information\n=============================\n\nNotes on Debian (and likely, on derivatives like Ubuntu)\n--------------------------------------------------------\n\nIf your distribution is recent enough, or includes new enough `apt`\nsources, this may be sufficient (run as root):\n\n  ```sh\n  apt-get build-dep bup\n  ```\n\nOtherwise try this:\n\n  ```sh\n  apt-get install python3-dev python3-fuse\n  apt-get install python3-pyxattr python3-pytest\n  apt-get install python3-distutils\n  apt-get install pkg-config linux-libc-dev libacl1-dev\n  apt-get install gcc make acl attr rsync\n  apt-get isntall python3-pytest-xdist # optional (parallel tests)\n  apt-get install par2 # optional (error correction)\n  apt-get install libreadline-dev # optional (bup ftp)\n  apt-get install python3-tornado # optional (bup web)\n  ```\n\nNotes on FreeBSD\n----------------\n\n- In order to compile the code, run tests and install bup, you need to\n  install and run GNU Make from the `gmake` port.\n\n- Python's development headers are automatically installed with the 'python'\n  port so there's no need to install them separately.\n\n- To use the 'bup fuse' command, you need to install the fuse kernel module\n  from the 'fusefs-kmod' port in the 'sysutils' section and the libraries from\n  the port named 'py-fusefs' in the 'devel' section.\n\n- The 'par2' command can be found in the port named 'par2cmdline'.\n\n- In order to compile the documentation, you need pandoc which can be found in\n  the port named 'hs-pandoc' in the 'textproc' section.\n\n\nNotes on NetBSD/pkgsrc\n----------------------\n\n - See pkgsrc/sysutils/bup, which should be the most recent stable\n   release and includes man pages.  It also has a reasonable set of\n   dependencies (git, par2, py-fuse-bindings).\n\n - The \"fuse-python\" package referred to is hard to locate, and is a\n   separate tarball for the python language binding distributed by the\n   fuse project on sourceforge.  It is available as\n   pkgsrc/filesystems/py-fuse-bindings and on NetBSD 5, \"bup fuse\"\n   works with it.\n\n - \"bup fuse\" presents every directory/file as inode 0.  The directory\n   traversal code (\"fts\") in NetBSD's libc will interpret this as a\n   cycle and error out, so \"ls -R\" and \"find\" will not work.\n\n - There is no support for ACLs.  If/when some enterprising person\n   fixes this, adjust dev/compare-trees.\n\n\nNotes on Cygwin\n---------------\n\n- To prepare to build build bup, install the gcc-core, git,\n  python3-devel, make, and rsync packages.  Optionally, install\n  libreadline-devel (for `bup ftp`) and par2.  To generate the help\n  pages, install pandoc (outside of Cygwin).\n\n  Use a Cygwin installed git so that symlinks will work by default.\n  If you try some other git version, ensure that the symlinks (e.g.\n  `./bup`) are not converted to text files.\n\n - There is no support for ACLs.  If/when some enterprising person\n   fixes this, adjust dev/compare-trees.\n\n - In test/ext/test-misc, two tests have been disabled.  These tests\n   check to see that repeated saves produce identical trees and that\n   an intervening index doesn't change the SHA1.  Apparently Cygwin\n   has some unusual behaviors with respect to access times (that\n   probably warrant further investigation).  Possibly related:\n   http://cygwin.com/ml/cygwin/2007-06/msg00436.html\n\n\nNotes on OS X\n-------------\n\n - There is no support for ACLs.  If/when some enterprising person\n   fixes this, adjust dev/compare-trees.\n\n\nHow it works\n============\n\nBasic storage:\n--------------\n\nbup stores its data in a git-formatted repository.  Unfortunately, git\nitself doesn't actually behave very well for bup's use case (huge numbers of\nfiles, files with huge sizes, retaining file permissions/ownership are\nimportant), so we mostly don't use git's *code* except for a few helper\nprograms.  For example, bup has its own git packfile writer written in\npython.\n\nBasically, 'bup split' reads the data on stdin (or from files specified on\nthe command line), breaks it into chunks using a rolling checksum (similar to\nrsync), and saves those chunks into a new git packfile.  There is at least one\ngit packfile per backup.\n\nWhen deciding whether to write a particular chunk into the new packfile, bup\nfirst checks all the other packfiles that exist to see if they already have that\nchunk.  If they do, the chunk is skipped.\n\ngit packs come in two parts: the pack itself (*.pack) and the index (*.idx).\nThe index is pretty small, and contains a list of all the objects in the\npack.  Thus, when generating a remote backup, we don't have to have a copy\nof the packfiles from the remote server: the local end just downloads a copy\nof the server's *index* files, and compares objects against those when\ngenerating the new pack, which it sends directly to the server.\n\nThe \"-n\" option to 'bup split' and 'bup save' is the name of the backup you\nwant to create, but it's actually implemented as a git branch.  So you can\ndo cute things like checkout a particular branch using git, and receive a\nbunch of chunk files corresponding to the file you split.\n\nIf you use '-b' or '-t' or '-c' instead of '-n', bup split will output a\nlist of blobs, a tree containing that list of blobs, or a commit containing\nthat tree, respectively, to stdout.  You can use this to construct your own\nscripts that do something with those values.\n\nThe bup index:\n--------------\n\n'bup index' walks through your filesystem and updates a file (whose name is,\nby default, ~/.bup/bupindex) to contain the name, attributes, and an\noptional git SHA1 (blob id) of each file and directory.\n\n'bup save' basically just runs the equivalent of 'bup split' a whole bunch\nof times, once per file in the index, and assembles a git tree\nthat contains all the resulting objects.  Among other things, that makes\n'git diff' much more useful (compared to splitting a tarball, which is\nessentially a big binary blob).  However, since bup splits large files into\nsmaller chunks, the resulting tree structure doesn't *exactly* correspond to\nwhat git itself would have stored.  Also, the tree format used by 'bup save'\nwill probably change in the future to support storing file ownership, more\ncomplex file permissions, and so on.\n\nIf a file has previously been written by 'bup save', then its git blob/tree\nid is stored in the index.  This lets 'bup save' avoid reading that file to\nproduce future incremental backups, which means it can go *very* fast unless\na lot of files have changed.\n\n \nThings that are stupid for now but which we'll fix later\n========================================================\n\nHelp with any of these problems, or others, is very welcome.  Join the\nmailing list (see below) if you'd like to help.\n\n - 'bup save' and 'bup restore' have immature metadata support.\n \n    On the plus side, they actually do have support now, but it's new,\n    and not remotely as well tested as tar/rsync/whatever's.  However,\n    you have to start somewhere, and as of 0.25, we think it's ready\n    for more general use.  Please let us know if you have any trouble.\n\n    Also, if any strip or graft-style options are specified to 'bup\n    save', then no metadata will be written for the root directory.\n    That's obviously less than ideal.\n\n - bup is overly optimistic about mmap.  Right now bup just assumes\n   that it can mmap as large a block as it likes, and that mmap will\n   never fail.  Yeah, right... If nothing else, this has failed on\n   32-bit architectures (and 31-bit is even worse -- looking at you,\n   s390).\n\n   To fix this, we might just implement a FakeMmap[1] class that uses\n   normal file IO and handles all of the mmap methods[2] that bup\n   actually calls.  Then we'd swap in one of those whenever mmap\n   fails.\n\n   This would also require implementing some of the methods needed to\n   support \"[]\" array access, probably at a minimum __getitem__,\n   __setitem__, and __setslice__ [3].\n\n     [1] http://comments.gmane.org/gmane.comp.sysutils.backup.bup/613\n     [2] http://docs.python.org/3/library/mmap.html\n     [3] http://docs.python.org/3/reference/datamodel.html#emulating-container-types\n\n - 'bup index' is slower than it should be.\n \n    It's still rather fast: it can iterate through all the filenames on my\n    600,000 file filesystem in a few seconds.  But it still needs to rewrite\n    the entire index file just to add a single filename, which is pretty\n    nasty; it should just leave the new files in a second \"extra index\" file\n    or something.\n   \n - bup could use inotify for *really* efficient incremental backups.\n\n    You could even have your system doing \"continuous\" backups: whenever a\n    file changes, we immediately send an image of it to the server.  We could\n    give the continuous-backup process a really low CPU and I/O priority so\n    you wouldn't even know it was running.\n\n - bup has never been tested on anything but Linux, FreeBSD, NetBSD,\n   OS X, and Windows+Cygwin.\n \n    There's nothing that makes it *inherently* non-portable, though, so\n    that's mostly a matter of someone putting in some effort.  (For a\n    \"native\" Windows port, the most annoying thing is the absence of ssh in\n    a default Windows installation.)\n    \n - bup needs better documentation.\n \n    According to an article about bup in Linux Weekly News\n    (https://lwn.net/Articles/380983/), \"it's a bit short on examples and\n    a user guide would be nice.\"  Documentation is the sort of thing that\n    will never be great unless someone from outside contributes it (since\n    the developers can never remember which parts are hard to understand).\n    \n - bup is \"relatively speedy\" and has \"pretty good\" compression.\n \n    ...according to the same LWN article.  Clearly neither of those is good\n    enough.  We should have awe-inspiring speed and crazy-good compression. \n    Must work on that.  Writing more parts in C might help with the speed.\n   \n - bup has no GUI.\n \n   Actually, that's not stupid, but you might consider it a\n   limitation.  See the [\"Related Projects\"](https://bup.github.io/)\n   list for some possible options.\n    \nMore Documentation\n==================\n\nbup has an extensive set of man pages.  Try using 'bup help' to get\nstarted, or use 'bup help SUBCOMMAND' for any bup subcommand (like split,\njoin, index, save, etc.) to get details on that command.\n\nFor further technical details, please see ./DESIGN.\n\n\nHow you can help\n================\n\nbup is a work in progress and there are many ways it can still be improved.\nIf you'd like to contribute patches, ideas, or bug reports, please join the\n<a href=\"mailto:bup-list@googlegroups.com\">bup mailing list</a>:\n\nYou can find the mailing list archives here:\n\n\thttp://groups.google.com/group/bup-list\n\t\nand you can subscribe by sending a message to:\n\n\tbup-list+subscribe@googlegroups.com\n\nYou can also reach us via the\n\\#bup IRC channel at ircs://irc.libera.chat:6697/bup\non the [libera.chat](https://libera.chat/) network or via this\n[web interface](https://web.libera.chat/?channels=bup).\n\nPlease see <a href=\"HACKING\">./HACKING</a> for\nadditional information, i.e. how to submit patches (hint - no pull\nrequests), how we handle branches, etc.\n\n\nHave fun,\n\nAvery\n\n<!--\nLocal Variables:\nmode: markdown\nEnd:\n-->\n",
        "releases": []
    }
}