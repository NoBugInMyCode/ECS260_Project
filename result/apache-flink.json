{
    "https://api.github.com/repos/apache/flink": {
        "forks": 13482,
        "watchers": 24432,
        "stars": 24432,
        "languages": {
            "Java": 99995236,
            "Scala": 9484805,
            "Python": 3100522,
            "Shell": 553982,
            "TypeScript": 421993,
            "HiveQL": 410848,
            "HTML": 212466,
            "GAP": 139876,
            "Cython": 137989,
            "Less": 88346,
            "FreeMarker": 86777,
            "ANTLR": 20596,
            "q": 9445,
            "JavaScript": 6913,
            "Dockerfile": 6775,
            "Makefile": 5134,
            "Batchfile": 1863,
            "C": 847
        },
        "commits": [
            "2025-01-21T15:11:50Z",
            "2025-01-20T17:58:14Z",
            "2025-01-21T14:36:31Z",
            "2025-01-21T08:52:41Z",
            "2025-01-20T14:56:28Z",
            "2025-01-21T08:08:39Z",
            "2025-01-20T03:20:56Z",
            "2025-01-19T20:01:22Z",
            "2025-01-20T12:29:02Z",
            "2025-01-20T12:15:21Z",
            "2025-01-20T12:14:33Z",
            "2025-01-17T10:12:21Z",
            "2025-01-10T09:53:42Z",
            "2025-01-19T13:10:30Z",
            "2025-01-19T13:02:40Z",
            "2025-01-19T12:49:53Z",
            "2025-01-19T12:48:17Z",
            "2025-01-20T09:56:46Z",
            "2025-01-20T07:15:23Z",
            "2025-01-20T05:39:49Z",
            "2025-01-20T01:54:23Z",
            "2025-01-18T04:48:01Z",
            "2025-01-18T04:44:48Z",
            "2025-01-16T07:28:00Z",
            "2025-01-16T04:43:33Z",
            "2025-01-20T01:27:07Z",
            "2025-01-19T15:51:35Z",
            "2025-01-19T15:47:04Z",
            "2025-01-17T18:33:52Z",
            "2025-01-17T18:31:12Z"
        ],
        "creation_date": "2014-06-07T07:00:10Z",
        "contributors": 30,
        "topics": [
            "big-data",
            "flink",
            "java",
            "python",
            "scala",
            "sql"
        ],
        "subscribers": 936,
        "readme": "# Apache Flink\n\nApache Flink is an open source stream processing framework with powerful stream- and batch-processing capabilities.\n\nLearn more about Flink at [https://flink.apache.org/](https://flink.apache.org/)\n\n\n### Features\n\n* A streaming-first runtime that supports both batch processing and data streaming programs\n\n* Elegant and fluent APIs in Java\n\n* A runtime that supports very high throughput and low event latency at the same time\n\n* Support for *event time* and *out-of-order* processing in the DataStream API, based on the *Dataflow Model*\n\n* Flexible windowing (time, count, sessions, custom triggers) across different time semantics (event time, processing time)\n\n* Fault-tolerance with *exactly-once* processing guarantees\n\n* Natural back-pressure in streaming programs\n\n* Libraries for Graph processing (batch), Machine Learning (batch), and Complex Event Processing (streaming)\n\n* Custom memory management for efficient and robust switching between in-memory and out-of-core data processing algorithms\n\n* Compatibility layers for Apache Hadoop MapReduce\n\n* Integration with YARN, HDFS, HBase, and other components of the Apache Hadoop ecosystem\n\n\n### Streaming Example\n```java\n// pojo class WordWithCount\npublic class WordWithCount {\n    public String word;\n    public int count;\n\n    public WordWithCount() {}\n    \n    public WordWithCount(String word, int count) {\n        this.word = word;\n        this.count = count;\n    }\n}\n\n// main method\nStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\nDataStreamSource<String> text = env.socketTextStream(host, port);\nDataStream<WordWithCount> windowCounts = text\n    .flatMap(\n        (FlatMapFunction<String, String>) (line, collector) \n            -> Arrays.stream(line.split(\"\\\\s\")).forEach(collector::collect)\n    ).returns(String.class)\n    .map(word -> new WordWithCount(word, 1)).returns(TypeInformation.of(WordWithCount.class))\n    .keyBy(wordWithCnt -> wordWithCnt.word)\n    .window(TumblingProcessingTimeWindows.of(Duration.ofSeconds(5)))\n    .sum(\"count\").returns(TypeInformation.of(WordWithCount.class));\n\nwindowCounts.print();\nenv.execute();\n}\n```\n\n### Batch Example\n```java\n// pojo class WordWithCount\npublic class WordWithCount {\n    public String word;\n    public int count;\n\n    public WordWithCount() {}\n\n    public WordWithCount(String word, int count) {\n        this.word = word;\n        this.count = count;\n    }\n}\n\n// main method\nStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\nenv.setRuntimeMode(RuntimeExecutionMode.BATCH);\nFileSource<String> source = FileSource.forRecordStreamFormat(new TextLineInputFormat(), new Path(\"MyInput.txt\")).build();\nDataStreamSource<String> text = env.fromSource(source, WatermarkStrategy.noWatermarks(), \"MySource\");\nDataStream<WordWithCount> windowCounts = text\n        .flatMap((FlatMapFunction<String, String>) (line, collector) -> Arrays\n                .stream(line.split(\"\\\\s\"))\n                .forEach(collector::collect)).returns(String.class)\n        .map(word -> new WordWithCount(word, 1)).returns(TypeInformation.of(WordWithCount.class))\n        .keyBy(wordWintCount -> wordWintCount.word)\n        .sum(\"count\").returns(TypeInformation.of(WordWithCount.class));\n\nwindowCounts.print();\nenv.execute();\n```\n\n\n\n## Building Apache Flink from Source\n\nPrerequisites for building Flink:\n\n* Unix-like environment (we use Linux, Mac OS X, Cygwin, WSL)\n* Git\n* Maven (we require version 3.8.6)\n* Java (version 11, 17, or 21)\n\n### Basic Build Instructions\n\nFirst, clone the repository:\n\n```\ngit clone https://github.com/apache/flink.git\ncd flink\n```\n\nThen, choose one of the following commands based on your preferred Java version:\n\n**For Java 11**\n\n```\n./mvnw clean package -DskipTests -Djdk11 -Pjava11-target\n```\n\n**For Java 17 (Default)**\n\n```\n./mvnw clean package -DskipTests -Djdk17 -Pjava17-target\n```\n\n**For Java 21**\n\n```\n./mvnw clean package -DskipTests -Djdk21 -Pjava21-target\n```\n\nThe build process will take approximately 10 minutes to complete.\nFlink will be installed in `build-target`.\n\n### Notes\n\n* Make sure your JAVA_HOME environment variable points to the correct JDK version\n* The build command uses Maven wrapper (mvnw) which ensures the correct Maven version is used\n* The -DskipTests flag skips running tests to speed up the build process\n* Each Java version requires its corresponding profile (-Pjava<version>-target) and JDK flag (-Djdk<version>)\n\n## Developing Flink\n\nThe Flink committers use IntelliJ IDEA to develop the Flink codebase.\nWe recommend IntelliJ IDEA for developing projects that involve Scala code.\n\nMinimal requirements for an IDE are:\n* Support for Java and Scala (also mixed projects)\n* Support for Maven with Java and Scala\n\n\n### IntelliJ IDEA\n\nThe IntelliJ IDE supports Maven out of the box and offers a plugin for Scala development.\n\n* IntelliJ download: [https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)\n* IntelliJ Scala Plugin: [https://plugins.jetbrains.com/plugin/?id=1347](https://plugins.jetbrains.com/plugin/?id=1347)\n\nCheck out our [Setting up IntelliJ](https://nightlies.apache.org/flink/flink-docs-master/flinkDev/ide_setup.html#intellij-idea) guide for details.\n\n### Eclipse Scala IDE\n\n**NOTE:** From our experience, this setup does not work with Flink\ndue to deficiencies of the old Eclipse version bundled with Scala IDE 3.0.3 or\ndue to version incompatibilities with the bundled Scala version in Scala IDE 4.4.1.\n\n**We recommend to use IntelliJ instead (see above)**\n\n## Support\n\nDon\u2019t hesitate to ask!\n\nContact the developers and community on the [mailing lists](https://flink.apache.org/community.html#mailing-lists) if you need any help.\n\n[Open an issue](https://issues.apache.org/jira/browse/FLINK) if you find a bug in Flink.\n\n\n## Documentation\n\nThe documentation of Apache Flink is located on the website: [https://flink.apache.org](https://flink.apache.org)\nor in the `docs/` directory of the source code.\n\n\n## Fork and Contribute\n\nThis is an active open-source project. We are always open to people who want to use the system or contribute to it.\nContact us if you are looking for implementation tasks that fit your skills.\nThis article describes [how to contribute to Apache Flink](https://flink.apache.org/contributing/how-to-contribute.html).\n\n## Externalized Connectors\n\nMost Flink connectors have been externalized to individual repos under the [Apache Software Foundation](https://github.com/apache):\n\n* [flink-connector-aws](https://github.com/apache/flink-connector-aws)\n* [flink-connector-cassandra](https://github.com/apache/flink-connector-cassandra)\n* [flink-connector-elasticsearch](https://github.com/apache/flink-connector-elasticsearch)\n* [flink-connector-gcp-pubsub](https://github.com/apache/flink-connector-gcp-pubsub)\n* [flink-connector-hbase](https://github.com/apache/flink-connector-hbase)\n* [flink-connector-jdbc](https://github.com/apache/flink-connector-jdbc)\n* [flink-connector-kafka](https://github.com/apache/flink-connector-kafka)\n* [flink-connector-mongodb](https://github.com/apache/flink-connector-mongodb)\n* [flink-connector-opensearch](https://github.com/apache/flink-connector-opensearch)\n* [flink-connector-prometheus](https://github.com/apache/flink-connector-prometheus)\n* [flink-connector-pulsar](https://github.com/apache/flink-connector-pulsar)\n* [flink-connector-rabbitmq](https://github.com/apache/flink-connector-rabbitmq)\n\n## About\n\nApache Flink is an open source project of The Apache Software Foundation (ASF).\nThe Apache Flink project originated from the [Stratosphere](http://stratosphere.eu) research project.\n",
        "releases": []
    }
}