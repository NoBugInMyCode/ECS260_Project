{
    "https://api.github.com/repos/sogou/workflow": {
        "forks": 2446,
        "watchers": 13422,
        "stars": 13422,
        "languages": {
            "C++": 1059292,
            "C": 288382,
            "CMake": 18889,
            "Lua": 11075,
            "Starlark": 7796,
            "Makefile": 4022
        },
        "commits": [
            "2025-01-15T12:52:59Z",
            "2025-01-15T12:51:32Z",
            "2025-01-14T10:09:59Z",
            "2025-01-13T15:16:01Z",
            "2025-01-13T13:47:33Z",
            "2025-01-13T12:37:07Z",
            "2025-01-13T09:52:20Z",
            "2025-01-08T12:40:24Z",
            "2025-01-06T17:57:22Z",
            "2025-01-03T14:49:04Z",
            "2025-01-02T14:29:40Z",
            "2025-01-02T13:15:16Z",
            "2025-01-01T12:55:42Z",
            "2025-01-01T12:54:43Z",
            "2024-12-28T11:13:44Z",
            "2024-12-27T18:51:55Z",
            "2024-12-27T11:53:45Z",
            "2024-12-25T19:26:43Z",
            "2024-12-25T19:11:52Z",
            "2024-12-24T15:06:45Z",
            "2024-12-15T16:50:47Z",
            "2024-12-13T13:30:55Z",
            "2024-12-13T08:25:28Z",
            "2024-12-12T12:14:10Z",
            "2024-12-07T19:46:15Z",
            "2024-12-01T17:04:06Z",
            "2024-11-29T19:11:47Z",
            "2024-11-28T08:24:08Z",
            "2024-11-24T11:34:55Z",
            "2024-11-23T17:07:12Z"
        ],
        "creation_date": "2020-07-29T05:47:01Z",
        "contributors": 30,
        "topics": [
            "consul",
            "dag",
            "http",
            "kafka",
            "mysql",
            "redis",
            "sogou",
            "tasking"
        ],
        "subscribers": 237,
        "readme": "[\u7b80\u4f53\u4e2d\u6587\u7248\uff08\u63a8\u8350\uff09](README_cn.md)\n\n## Sogou C++ Workflow\n\n[![License](https://img.shields.io/badge/License-Apache%202.0-green.svg)](https://github.com/sogou/workflow/blob/master/LICENSE)\n[![Language](https://img.shields.io/badge/language-c++-red.svg)](https://en.cppreference.com/) \n[![Platform](https://img.shields.io/badge/platform-linux%20%7C%20macos%20%7C%20windows-lightgrey.svg)](https://img.shields.io/badge/platform-linux%20%7C%20macos20%7C%20windows-lightgrey.svg)\n[![Build Status](https://img.shields.io/github/actions/workflow/status/sogou/workflow/ci.yml?branch=master)](https://github.com/sogou/workflow/actions?query=workflow%3A%22ci+build%22++)\n\nAs **Sogou\\`s C++ server engine**, Sogou C++ Workflow supports almost all **back-end C++ online services** of Sogou, including all search services, cloud input method, online advertisements, etc., handling more than **10 billion** requests every day. This is an **enterprise-level programming engine** in light and elegant design which can satisfy most C++ back-end development requirements.\n\n#### You can use it:\n\n* To quickly build an **HTTP server**:\n\n~~~cpp\n#include <stdio.h>\n#include \"workflow/WFHttpServer.h\"\n\nint main()\n{\n    WFHttpServer server([](WFHttpTask *task) {\n        task->get_resp()->append_output_body(\"<html>Hello World!</html>\");\n    });\n\n    if (server.start(8888) == 0) { // start server on port 8888\n        getchar(); // press \"Enter\" to end.\n        server.stop();\n    }\n\n    return 0;\n}\n~~~\n\n* As a **multifunctional asynchronous client**, it currently supports `HTTP`, `Redis`, `MySQL` and `Kafka` protocols.\n  * ``MySQL`` protocol supports ``MariaDB``, ``TiDB`` as well.\n* To implement **client/server on user-defined protocol** and build your own **RPC system**.\n  * [srpc](https://github.com/sogou/srpc) is based on it and it is an independent open source project, which supports srpc, brpc, trpc and thrift protocols.\n* To build **asynchronous workflow**; support common **series** and **parallel** structures, and also support any **DAG** structures.\n* As a **parallel computing tool**. In addition to **networking tasks**, Sogou C++ Workflow also includes **the scheduling of computing tasks**. All types of tasks can be put into **the same** flow.\n* As an **asynchronous file IO tool** in `Linux` system, with high performance exceeding any system call. Disk file IO is also a task.\n* To realize any **high-performance** and **high-concurrency** back-end service with a very complex relationship between computing and networking.\n* To build a **micro service** system.\n  * This project has built-in **service governance** and **load balancing** features.\n* Wiki link : [PaaS Architecture](https://github.com/sogou/workflow/wiki)\n\n#### Compiling and running environment\n\n* This project supports `Linux`, `macOS`, `Windows`, `Android` and other operating systems.\n  * `Windows` version is currently released as an independent [branch](https://github.com/sogou/workflow/tree/windows), using `iocp` to implement asynchronous networking. All user interfaces are consistent with the `Linux` version.\n* Supports all CPU platforms, including 32 or 64-bit `x86` processors, big-endian or little-endian `arm` processors, `loongson` processors.\n* Master branch requires SSL and `OpenSSL 1.1` or above is recommended. Fully compatible with BoringSSL. If you don't like SSL, you may checkout the [nossl](https://github.com/sogou/workflow/tree/nossl) branch.\n* Uses the `C++11` standard and therefore, it should be compiled with a compiler which supports `C++11`. Does not rely on `boost` or `asio`.\n* No other dependencies. However, if you need `Kafka` protocol, some compression libraries should be installed, including `lz4`, `zstd` and `snappy`.\n\n### Get started (Linux, macOS):\n~~~sh\ngit clone https://github.com/sogou/workflow\ncd workflow\nmake\ncd tutorial\nmake\n~~~~\n\n#### With SRPC Tool (NEW!)\uff1a\nhttps://github.com/sogou/srpc/blob/master/tools/README.md\n\n#### With [apt-get](https://launchpad.net/ubuntu/+source/workflow) on Debian Linux, ubuntu:\nSogou C++ Workflow has been packaged for Debian Linux and ubuntu 22.04.  \nTo install the Workflow library for development purposes:\n~~~~sh\nsudo apt-get install libworkflow-dev\n~~~~\n\nTo install the Workflow library for deployment:\n~~~~sh\nsudo apt-get install libworkflow1\n~~~~\n\n#### With [dnf](https://packages.fedoraproject.org/pkgs/workflow) on Fedora Linux:\nSogou C++ Workflow has been packaged for Fedora Linux.  \nTo install the Workflow library for development purposes:\n~~~~sh\nsudo dnf install workflow-devel\n~~~~\n\nTo install the Workflow library for deployment:\n~~~~sh\nsudo dnf install workflow\n~~~~\n\n#### With xmake\n\nIf you want to use xmake to build workflow, you can see [xmake build document](docs/en/xmake.md)\n\n# Tutorials\n\n* Client\n  * [Creating your first task\uff1awget](docs/en/tutorial-01-wget.md)\n  * [Implementing Redis set and get\uff1aredis\\_cli](docs/en/tutorial-02-redis_cli.md)\n  * [More features about series\uff1awget\\_to\\_redis](docs/en/tutorial-03-wget_to_redis.md)\n* Server\n  * [First server\uff1ahttp\\_echo\\_server](docs/en/tutorial-04-http_echo_server.md)\n  * [Asynchronous server\uff1ahttp\\_proxy](docs/en/tutorial-05-http_proxy.md)\n* Parallel tasks and Series\u3000\n  * [A simple parallel wget\uff1aparallel\\_wget](docs/en/tutorial-06-parallel_wget.md)\n* Important topics\n  * [About error](docs/en/about-error.md)\n  * [About timeout](docs/en/about-timeout.md)\n  * [About global configuration](docs/en/about-config.md)\n  * [About DNS](docs/en/about-dns.md)\n  * [About exit](docs/en/about-exit.md)\n* Computing tasks\n  * [Using the build-in algorithm factory\uff1asort\\_task](docs/en/tutorial-07-sort_task.md)\n  * [User-defined computing task\uff1amatrix\\_multiply](docs/en/tutorial-08-matrix_multiply.md)\n  * [Use computing task in a simple way: go task](docs/en/about-go-task.md)\n* Asynchronous File IO tasks\n  * [Http server with file IO\uff1ahttp\\_file\\_server](docs/en/tutorial-09-http_file_server.md)\n* User-defined protocol\n  * [A simple user-defined protocol: client/server](docs/en/tutorial-10-user_defined_protocol.md)\n  * [Use TLV message](docs/en/about-tlv-message.md)\n* Other important tasks/components\n  * [About timer](docs/en/about-timer.md)\n  * [About counter](docs/en/about-counter.md)\n  * [About resource pool](docs/en/about-resource-pool.md)\n  * [About module](docs/en/about-module.md)\n  * [About DAG](docs/en/tutorial-11-graph_task.md)\n* Service governance\n  * [About service governance](docs/en/about-service-governance.md)\n  * [More documents about upstream](docs/en/about-upstream.md)\n* Connection context\n  * [About connection context](docs/en/about-connection-context.md)\n* Built-in clients\n  * [Asynchronous MySQL client\uff1amysql\\_cli](docs/en/tutorial-12-mysql_cli.md)\n  * [Asynchronous Kafka client: kafka\\_cli](docs/en/tutorial-13-kafka_cli.md)\n\n#### Programming paradigm\n\nWe believe that a typical back-end program=protocol+algorithm+workflow and should be developed completely independently.\n\n* Protocol\n  * In most cases, users use built-in common network protocols, such as HTTP, Redis or various rpc.\n  * Users can also easily customize user-defined network protocol. In the customization, they only need to provide serialization and deserialization functions to define their own client/server.\n* Algorithm\n  * In our design, the algorithm is a concept symmetrical to the protocol.\n    * If protocol call is rpc, then algorithm call is an apc (Async Procedure Call).\n  * We have provided some general algorithms, such as sort, merge, psort, reduce, which can be used directly.\n  * Compared with a user-defined protocol, a user-defined algorithm is much more common. Any complicated computation with clear boundaries should be packaged into an algorithm.\n* Workflow\n  * Workflow is the actual business logic, which is to put the protocols and algorithms into the flow graph for use.\n  * The typical workflow is a closed series-parallel graph. Complex business logic may be a non-closed DAG.\n  * The workflow graph can be constructed directly or dynamically generated based on the results of each step. All tasks are executed asynchronously.\n\nBasic task, task factory and complex task\n\n* Our system contains six basic tasks: networking, file IO, CPU, GPU, timer, and counter.\n* All tasks are generated by the task factory and automatically recycled after callback.\n  * Server task is one kind of special networking task, generated by the framework which calls the task factory, and handed over to the user through the process function.\n* In most cases, the task generated by the user through the task factory is a complex task, which is transparent to the user.\n  * For example, an HTTP request may include many asynchronous processes (DNS, redirection), but for user, it is just a networking task.\n  * File sorting seems to be an algorithm, but it actually includes many complex interaction processes between file IO and CPU computation.\n  * If you think of business logic as building circuits with well-designed electronic components, then each electronic component may be a complex circuit.\n\nAsynchrony and encapsulation based on `C++11 std::function`\n\n* Not based on user mode coroutines. Users need to know that they are writing asynchronous programs.\n* All calls are executed asynchronously, and there is almost no operation that occupies a thread.\n  * Although we also provide some facilities with semi-synchronous interfaces, they are not core features.\n* We try to avoid user's derivations, and encapsulate user behavior with `std::function` instead, including:\n  * The callback of any task.\n  * Any server's process. This conforms to the `FaaS` (Function as a Service) idea.\n  * The realization of an algorithm is simply a `std::function`. But the algorithm can also be implemented by derivation.\n\nMemory reclamation mechanism\n\n* Every task will be automatically reclaimed after the callback. If a task is created but a user does not want to run it, the user needs to release it through the dismiss method.\n* Any data in the task, such as the response of the network request, will also be recycled with the task. At this time, the user can use `std::move()` to move the required data.\n* SeriesWork and ParallelWork are two kinds of framework objects, which are also recycled after their callback.\n  * When a series is a branch of a parallel, it will be recycled after the callback of the parallel that it belongs to.\n* This project doesn\u2019t use `std::shared_ptr` to manage memory.\n\n#### Any other questions?\n\nYou may check the [FAQ](https://github.com/sogou/workflow/issues/406) and [issues](https://github.com/sogou/workflow/issues) list first to see if you can find the answer.\n\nYou are very welcome to send the problems you encounter in use to [issues](https://github.com/sogou/workflow/issues), and we will answer them as soon as possible. At the same time, more issues will also help new users.\n\n",
        "releases": [
            {
                "name": "workflow v0.11.7",
                "date": "2025-01-06T18:27:27Z"
            },
            {
                "name": "workflow v0.11.6",
                "date": "2024-09-30T15:08:40Z"
            },
            {
                "name": "workflow v0.11.5",
                "date": "2024-07-29T08:48:54Z"
            },
            {
                "name": "workflow v0.11.4",
                "date": "2024-05-22T10:12:21Z"
            },
            {
                "name": "workflow v0.11.3",
                "date": "2024-03-14T14:36:42Z"
            },
            {
                "name": "workflow v0.11.2",
                "date": "2024-01-03T09:25:07Z"
            },
            {
                "name": "workflow v0.11.1",
                "date": "2023-11-01T08:35:04Z"
            },
            {
                "name": "workflow v0.10.9",
                "date": "2023-09-04T12:29:17Z"
            },
            {
                "name": "workflow v0.10.8",
                "date": "2023-07-06T09:35:29Z"
            },
            {
                "name": "workflow v0.10.7",
                "date": "2023-05-05T15:00:33Z"
            },
            {
                "name": "workflow v0.10.6",
                "date": "2023-02-24T17:39:47Z"
            },
            {
                "name": "workflow v0.10.5",
                "date": "2023-01-03T18:46:52Z"
            },
            {
                "name": "workflow v0.10.4",
                "date": "2022-11-04T16:12:43Z"
            },
            {
                "name": "workflow v0.10.3",
                "date": "2022-08-26T14:55:31Z"
            },
            {
                "name": "workflow v0.10.2",
                "date": "2022-06-26T12:53:23Z"
            },
            {
                "name": "workflow v0.10.1",
                "date": "2022-04-29T11:49:34Z"
            },
            {
                "name": "workflow v0.9.11",
                "date": "2022-03-09T14:21:06Z"
            },
            {
                "name": "workflow v0.9.10",
                "date": "2022-01-21T12:23:32Z"
            },
            {
                "name": "workflow v0.9.9",
                "date": "2021-12-03T17:19:56Z"
            },
            {
                "name": "workflow v0.9.8",
                "date": "2021-09-30T05:52:58Z"
            },
            {
                "name": "workflow v0.9.7",
                "date": "2021-08-08T08:06:01Z"
            },
            {
                "name": "workflow v0.9.6",
                "date": "2021-06-03T14:22:51Z"
            },
            {
                "name": "workflow v0.9.5",
                "date": "2021-04-12T12:41:41Z"
            },
            {
                "name": "workflow v0.9.4",
                "date": "2021-03-17T13:41:34Z"
            },
            {
                "name": "workflow v0.9.3",
                "date": "2021-01-13T11:55:57Z"
            },
            {
                "name": "workflow v0.9.2",
                "date": "2020-11-13T08:31:39Z"
            },
            {
                "name": "workflow v0.9.1",
                "date": "2020-09-30T11:51:39Z"
            },
            {
                "name": "workflow v0.9.0",
                "date": "2020-08-17T07:51:47Z"
            }
        ]
    }
}