{
    "https://api.github.com/repos/myclabs/DeepCopy": {
        "forks": 104,
        "watchers": 8797,
        "stars": 8797,
        "languages": {
            "PHP": 63842
        },
        "commits": [
            "2024-11-26T13:04:49Z",
            "2024-11-25T18:44:07Z",
            "2024-11-08T17:47:46Z",
            "2024-11-07T10:48:22Z",
            "2024-11-06T13:34:57Z",
            "2024-06-12T14:39:25Z",
            "2024-06-12T13:05:32Z",
            "2024-06-03T13:22:29Z",
            "2024-06-03T13:20:54Z",
            "2024-06-03T12:59:24Z",
            "2024-02-10T11:10:03Z",
            "2024-02-07T14:35:31Z",
            "2023-11-01T08:01:43Z",
            "2023-07-30T10:01:33Z",
            "2023-07-30T10:00:32Z",
            "2023-03-08T17:24:01Z",
            "2023-03-08T15:43:25Z",
            "2023-03-08T15:43:24Z",
            "2023-03-08T15:37:57Z",
            "2023-03-08T15:35:19Z",
            "2023-03-08T15:16:33Z",
            "2023-03-08T15:08:03Z",
            "2023-03-08T14:39:31Z",
            "2023-03-08T14:02:21Z",
            "2023-03-08T13:26:56Z",
            "2023-03-07T09:55:10Z",
            "2022-03-03T13:19:32Z",
            "2022-03-03T08:18:48Z",
            "2022-03-03T08:17:42Z",
            "2022-03-03T08:17:33Z"
        ],
        "creation_date": "2013-07-22T15:28:03Z",
        "contributors": 30,
        "topics": [
            "clone",
            "clone-deep"
        ],
        "subscribers": 26,
        "readme": "# DeepCopy\n\nDeepCopy helps you create deep copies (clones) of your objects. It is designed to handle cycles in the association graph.\n\n[![Total Downloads](https://poser.pugx.org/myclabs/deep-copy/downloads.svg)](https://packagist.org/packages/myclabs/deep-copy)\n[![Integrate](https://github.com/myclabs/DeepCopy/actions/workflows/ci.yaml/badge.svg?branch=1.x)](https://github.com/myclabs/DeepCopy/actions/workflows/ci.yaml)\n\n## Table of Contents\n\n1. [How](#how)\n1. [Why](#why)\n    1. [Using simply `clone`](#using-simply-clone)\n    1. [Overriding `__clone()`](#overriding-__clone)\n    1. [With `DeepCopy`](#with-deepcopy)\n1. [How it works](#how-it-works)\n1. [Going further](#going-further)\n    1. [Matchers](#matchers)\n        1. [Property name](#property-name)\n        1. [Specific property](#specific-property)\n        1. [Type](#type)\n    1. [Filters](#filters)\n        1. [`SetNullFilter`](#setnullfilter-filter)\n        1. [`KeepFilter`](#keepfilter-filter)\n        1. [`DoctrineCollectionFilter`](#doctrinecollectionfilter-filter)\n        1. [`DoctrineEmptyCollectionFilter`](#doctrineemptycollectionfilter-filter)\n        1. [`DoctrineProxyFilter`](#doctrineproxyfilter-filter)\n        1. [`ReplaceFilter`](#replacefilter-type-filter)\n        1. [`ShallowCopyFilter`](#shallowcopyfilter-type-filter)\n1. [Edge cases](#edge-cases)\n1. [Contributing](#contributing)\n    1. [Tests](#tests)\n\n\n## How?\n\nInstall with Composer:\n\n```\ncomposer require myclabs/deep-copy\n```\n\nUse it:\n\n```php\nuse DeepCopy\\DeepCopy;\n\n$copier = new DeepCopy();\n$myCopy = $copier->copy($myObject);\n```\n\n\n## Why?\n\n- How do you create copies of your objects?\n\n```php\n$myCopy = clone $myObject;\n```\n\n- How do you create **deep** copies of your objects (i.e. copying also all the objects referenced in the properties)?\n\nYou use [`__clone()`](http://www.php.net/manual/en/language.oop5.cloning.php#object.clone) and implement the behavior\nyourself.\n\n- But how do you handle **cycles** in the association graph?\n\nNow you're in for a big mess :(\n\n![association graph](doc/graph.png)\n\n\n### Using simply `clone`\n\n![Using clone](doc/clone.png)\n\n\n### Overriding `__clone()`\n\n![Overriding __clone](doc/deep-clone.png)\n\n\n### With `DeepCopy`\n\n![With DeepCopy](doc/deep-copy.png)\n\n\n## How it works\n\nDeepCopy recursively traverses all the object's properties and clones them. To avoid cloning the same object twice it\nkeeps a hash map of all instances and thus preserves the object graph.\n\nTo use it:\n\n```php\nuse function DeepCopy\\deep_copy;\n\n$copy = deep_copy($var);\n```\n\nAlternatively, you can create your own `DeepCopy` instance to configure it differently for example:\n\n```php\nuse DeepCopy\\DeepCopy;\n\n$copier = new DeepCopy(true);\n\n$copy = $copier->copy($var);\n```\n\nYou may want to roll your own deep copy function:\n\n```php\nnamespace Acme;\n\nuse DeepCopy\\DeepCopy;\n\nfunction deep_copy($var)\n{\n    static $copier = null;\n    \n    if (null === $copier) {\n        $copier = new DeepCopy(true);\n    }\n    \n    return $copier->copy($var);\n}\n```\n\n\n## Going further\n\nYou can add filters to customize the copy process.\n\nThe method to add a filter is `DeepCopy\\DeepCopy::addFilter($filter, $matcher)`,\nwith `$filter` implementing `DeepCopy\\Filter\\Filter`\nand `$matcher` implementing `DeepCopy\\Matcher\\Matcher`.\n\nWe provide some generic filters and matchers.\n\n\n### Matchers\n\n  - `DeepCopy\\Matcher` applies on a object attribute.\n  - `DeepCopy\\TypeMatcher` applies on any element found in graph, including array elements.\n\n\n#### Property name\n\nThe `PropertyNameMatcher` will match a property by its name:\n\n```php\nuse DeepCopy\\Matcher\\PropertyNameMatcher;\n\n// Will apply a filter to any property of any objects named \"id\"\n$matcher = new PropertyNameMatcher('id');\n```\n\n\n#### Specific property\n\nThe `PropertyMatcher` will match a specific property of a specific class:\n\n```php\nuse DeepCopy\\Matcher\\PropertyMatcher;\n\n// Will apply a filter to the property \"id\" of any objects of the class \"MyClass\"\n$matcher = new PropertyMatcher('MyClass', 'id');\n```\n\n\n#### Type\n\nThe `TypeMatcher` will match any element by its type (instance of a class or any value that could be parameter of\n[gettype()](http://php.net/manual/en/function.gettype.php) function):\n\n```php\nuse DeepCopy\\TypeMatcher\\TypeMatcher;\n\n// Will apply a filter to any object that is an instance of Doctrine\\Common\\Collections\\Collection\n$matcher = new TypeMatcher('Doctrine\\Common\\Collections\\Collection');\n```\n\n\n### Filters\n\n- `DeepCopy\\Filter` applies a transformation to the object attribute matched by `DeepCopy\\Matcher`\n- `DeepCopy\\TypeFilter` applies a transformation to any element matched by `DeepCopy\\TypeMatcher`\n\nBy design, matching a filter will stop the chain of filters (i.e. the next ones will not be applied).\nUsing the ([`ChainableFilter`](#chainablefilter-filter)) won't stop the chain of filters.\n\n\n#### `SetNullFilter` (filter)\n\nLet's say for example that you are copying a database record (or a Doctrine entity), so you want the copy not to have\nany ID:\n\n```php\nuse DeepCopy\\DeepCopy;\nuse DeepCopy\\Filter\\SetNullFilter;\nuse DeepCopy\\Matcher\\PropertyNameMatcher;\n\n$object = MyClass::load(123);\necho $object->id; // 123\n\n$copier = new DeepCopy();\n$copier->addFilter(new SetNullFilter(), new PropertyNameMatcher('id'));\n\n$copy = $copier->copy($object);\n\necho $copy->id; // null\n```\n\n\n#### `KeepFilter` (filter)\n\nIf you want a property to remain untouched (for example, an association to an object):\n\n```php\nuse DeepCopy\\DeepCopy;\nuse DeepCopy\\Filter\\KeepFilter;\nuse DeepCopy\\Matcher\\PropertyMatcher;\n\n$copier = new DeepCopy();\n$copier->addFilter(new KeepFilter(), new PropertyMatcher('MyClass', 'category'));\n\n$copy = $copier->copy($object);\n// $copy->category has not been touched\n```\n\n\n#### `ChainableFilter` (filter)\n\nIf you use cloning on proxy classes, you might want to apply two filters for:\n1. loading the data\n2. applying a transformation\n\nYou can use the `ChainableFilter` as a decorator of the proxy loader filter, which won't stop the chain of filters (i.e. \nthe next ones may be applied).\n\n\n```php\nuse DeepCopy\\DeepCopy;\nuse DeepCopy\\Filter\\ChainableFilter;\nuse DeepCopy\\Filter\\Doctrine\\DoctrineProxyFilter;\nuse DeepCopy\\Filter\\SetNullFilter;\nuse DeepCopy\\Matcher\\Doctrine\\DoctrineProxyMatcher;\nuse DeepCopy\\Matcher\\PropertyNameMatcher;\n\n$copier = new DeepCopy();\n$copier->addFilter(new ChainableFilter(new DoctrineProxyFilter()), new DoctrineProxyMatcher());\n$copier->addFilter(new SetNullFilter(), new PropertyNameMatcher('id'));\n\n$copy = $copier->copy($object);\n\necho $copy->id; // null\n```\n\n\n#### `DoctrineCollectionFilter` (filter)\n\nIf you use Doctrine and want to copy an entity, you will need to use the `DoctrineCollectionFilter`:\n\n```php\nuse DeepCopy\\DeepCopy;\nuse DeepCopy\\Filter\\Doctrine\\DoctrineCollectionFilter;\nuse DeepCopy\\Matcher\\PropertyTypeMatcher;\n\n$copier = new DeepCopy();\n$copier->addFilter(new DoctrineCollectionFilter(), new PropertyTypeMatcher('Doctrine\\Common\\Collections\\Collection'));\n\n$copy = $copier->copy($object);\n```\n\n\n#### `DoctrineEmptyCollectionFilter` (filter)\n\nIf you use Doctrine and want to copy an entity who contains a `Collection` that you want to be reset, you can use the\n`DoctrineEmptyCollectionFilter`\n\n```php\nuse DeepCopy\\DeepCopy;\nuse DeepCopy\\Filter\\Doctrine\\DoctrineEmptyCollectionFilter;\nuse DeepCopy\\Matcher\\PropertyMatcher;\n\n$copier = new DeepCopy();\n$copier->addFilter(new DoctrineEmptyCollectionFilter(), new PropertyMatcher('MyClass', 'myProperty'));\n\n$copy = $copier->copy($object);\n\n// $copy->myProperty will return an empty collection\n```\n\n\n#### `DoctrineProxyFilter` (filter)\n\nIf you use Doctrine and use cloning on lazy loaded entities, you might encounter errors mentioning missing fields on a\nDoctrine proxy class (...\\\\\\_\\_CG\\_\\_\\Proxy).\nYou can use the `DoctrineProxyFilter` to load the actual entity behind the Doctrine proxy class.\n**Make sure, though, to put this as one of your very first filters in the filter chain so that the entity is loaded\nbefore other filters are applied!**\nWe recommend to decorate the `DoctrineProxyFilter` with the `ChainableFilter` to allow applying other filters to the\ncloned lazy loaded entities.\n\n```php\nuse DeepCopy\\DeepCopy;\nuse DeepCopy\\Filter\\Doctrine\\DoctrineProxyFilter;\nuse DeepCopy\\Matcher\\Doctrine\\DoctrineProxyMatcher;\n\n$copier = new DeepCopy();\n$copier->addFilter(new ChainableFilter(new DoctrineProxyFilter()), new DoctrineProxyMatcher());\n\n$copy = $copier->copy($object);\n\n// $copy should now contain a clone of all entities, including those that were not yet fully loaded.\n```\n\n\n#### `ReplaceFilter` (type filter)\n\n1. If you want to replace the value of a property:\n\n```php\nuse DeepCopy\\DeepCopy;\nuse DeepCopy\\Filter\\ReplaceFilter;\nuse DeepCopy\\Matcher\\PropertyMatcher;\n\n$copier = new DeepCopy();\n$callback = function ($currentValue) {\n  return $currentValue . ' (copy)'\n};\n$copier->addFilter(new ReplaceFilter($callback), new PropertyMatcher('MyClass', 'title'));\n\n$copy = $copier->copy($object);\n\n// $copy->title will contain the data returned by the callback, e.g. 'The title (copy)'\n```\n\n2. If you want to replace whole element:\n\n```php\nuse DeepCopy\\DeepCopy;\nuse DeepCopy\\TypeFilter\\ReplaceFilter;\nuse DeepCopy\\TypeMatcher\\TypeMatcher;\n\n$copier = new DeepCopy();\n$callback = function (MyClass $myClass) {\n  return get_class($myClass);\n};\n$copier->addTypeFilter(new ReplaceFilter($callback), new TypeMatcher('MyClass'));\n\n$copy = $copier->copy([new MyClass, 'some string', new MyClass]);\n\n// $copy will contain ['MyClass', 'some string', 'MyClass']\n```\n\n\nThe `$callback` parameter of the `ReplaceFilter` constructor accepts any PHP callable.\n\n\n#### `ShallowCopyFilter` (type filter)\n\nStop *DeepCopy* from recursively copying element, using standard `clone` instead:\n\n```php\nuse DeepCopy\\DeepCopy;\nuse DeepCopy\\TypeFilter\\ShallowCopyFilter;\nuse DeepCopy\\TypeMatcher\\TypeMatcher;\nuse Mockery as m;\n\n$this->deepCopy = new DeepCopy();\n$this->deepCopy->addTypeFilter(\n\tnew ShallowCopyFilter,\n\tnew TypeMatcher(m\\MockInterface::class)\n);\n\n$myServiceWithMocks = new MyService(m::mock(MyDependency1::class), m::mock(MyDependency2::class));\n// All mocks will be just cloned, not deep copied\n```\n\n\n## Edge cases\n\nThe following structures cannot be deep-copied with PHP Reflection. As a result they are shallow cloned and filters are\nnot applied. There is two ways for you to handle them:\n\n- Implement your own `__clone()` method\n- Use a filter with a type matcher\n\n\n## Contributing\n\nDeepCopy is distributed under the MIT license.\n\n\n### Tests\n\nRunning the tests is simple:\n\n```php\nvendor/bin/phpunit\n```\n\n### Support\n\nGet professional support via [the Tidelift Subscription](https://tidelift.com/subscription/pkg/packagist-myclabs-deep-copy?utm_source=packagist-myclabs-deep-copy&utm_medium=referral&utm_campaign=readme).\n",
        "releases": [
            {
                "name": "1.12.1",
                "date": "2024-11-08T17:48:02Z"
            },
            {
                "name": "1.12.0",
                "date": "2024-06-12T14:40:45Z"
            },
            {
                "name": "1.11.1",
                "date": "2023-03-08T13:27:20Z"
            },
            {
                "name": "1.11.0",
                "date": "2022-03-03T13:19:58Z"
            },
            {
                "name": "1.10.3",
                "date": "2022-03-02T14:17:27Z"
            },
            {
                "name": "1.10.2",
                "date": "2020-11-13T09:41:36Z"
            },
            {
                "name": "1.10.1",
                "date": "2020-06-29T13:23:14Z"
            },
            {
                "name": "1.10.0",
                "date": "2020-06-28T07:04:14Z"
            },
            {
                "name": "1.9.5",
                "date": "2020-01-17T21:12:59Z"
            },
            {
                "name": "1.9.4",
                "date": "2019-12-15T19:14:15Z"
            },
            {
                "name": "1.9.3",
                "date": "2019-08-10T13:54:22Z"
            },
            {
                "name": "1.9.2",
                "date": "2019-08-09T19:49:34Z"
            },
            {
                "name": "1.9.1",
                "date": "2019-04-10T11:17:39Z"
            },
            {
                "name": "1.9.0",
                "date": "2019-04-07T13:19:14Z"
            },
            {
                "name": "1.8.1",
                "date": "2018-06-11T23:11:20Z"
            },
            {
                "name": "1.8.0",
                "date": "2018-05-29T17:40:32Z"
            },
            {
                "name": "1.7.0",
                "date": "2017-10-20T10:39:51Z"
            },
            {
                "name": "1.6.1",
                "date": "2017-04-12T18:53:24Z"
            },
            {
                "name": "1.6.0",
                "date": "2017-01-26T22:08:50Z"
            },
            {
                "name": "1.5.5",
                "date": "2016-10-31T17:21:38Z"
            },
            {
                "name": "1.5.4",
                "date": "2016-09-16T13:38:23Z"
            },
            {
                "name": "1.5.3",
                "date": "2016-09-13T07:07:41Z"
            },
            {
                "name": "1.5.2",
                "date": "2016-09-06T16:09:45Z"
            },
            {
                "name": "1.5.1",
                "date": "2016-04-30T20:34:45Z"
            },
            {
                "name": "1.5.0",
                "date": "2015-11-07T22:22:22Z"
            },
            {
                "name": "1.4.0",
                "date": "2015-10-05T15:11:02Z"
            },
            {
                "name": "1.3.1",
                "date": "2015-07-19T19:58:01Z"
            },
            {
                "name": "1.3.0",
                "date": "2015-03-21T22:41:27Z"
            },
            {
                "name": "1.2.1",
                "date": "2014-11-20T05:11:57Z"
            },
            {
                "name": "1.2.0",
                "date": "2014-08-29T00:01:57Z"
            },
            {
                "name": "1.1.0",
                "date": "2014-03-21T12:53:50Z"
            },
            {
                "name": "1.0.1",
                "date": "2014-02-14T09:00:28Z"
            },
            {
                "name": "1.0.0",
                "date": "2013-10-01T10:32:39Z"
            }
        ]
    }
}