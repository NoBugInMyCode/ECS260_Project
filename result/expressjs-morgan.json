{
    "https://api.github.com/repos/expressjs/morgan": {
        "forks": 536,
        "watchers": 7994,
        "stars": 7994,
        "languages": {
            "JavaScript": 57278
        },
        "commits": [
            "2024-12-20T20:45:00Z",
            "2024-05-14T16:39:32Z",
            "2024-05-14T16:20:34Z",
            "2020-04-10T00:06:16Z",
            "2020-04-10T00:25:03Z",
            "2020-04-13T00:18:16Z",
            "2020-04-13T00:12:07Z",
            "2020-04-13T00:08:55Z",
            "2020-04-13T00:05:51Z",
            "2020-04-05T00:31:38Z",
            "2020-03-28T23:28:48Z",
            "2020-03-23T02:34:28Z",
            "2020-03-20T17:51:13Z",
            "2018-11-05T03:59:58Z",
            "2020-03-20T04:23:17Z",
            "2020-03-20T04:22:53Z",
            "2020-03-19T18:09:19Z",
            "2020-03-19T13:44:42Z",
            "2019-07-08T08:21:56Z",
            "2019-12-24T22:00:30Z",
            "2020-02-27T22:55:52Z",
            "2020-03-05T23:31:43Z",
            "2020-03-05T23:27:15Z",
            "2020-03-04T05:02:53Z",
            "2020-03-04T01:45:48Z",
            "2020-03-04T01:39:40Z",
            "2020-03-04T01:33:01Z",
            "2020-02-04T05:26:24Z",
            "2020-02-04T00:39:18Z",
            "2020-02-04T00:32:43Z"
        ],
        "creation_date": "2014-02-08T19:19:14Z",
        "contributors": 22,
        "topics": [
            "express",
            "javascript",
            "logger",
            "nodejs"
        ],
        "subscribers": 94,
        "readme": "# morgan\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Build Status][ci-image]][ci-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\nHTTP request logger middleware for node.js\n\n> Named after [Dexter](http://en.wikipedia.org/wiki/Dexter_Morgan), a show you should not watch until completion.\n\n## Installation\n\nThis is a [Node.js](https://nodejs.org/en/) module available through the\n[npm registry](https://www.npmjs.com/). Installation is done using the\n[`npm install` command](https://docs.npmjs.com/getting-started/installing-npm-packages-locally):\n\n```sh\n$ npm install morgan\n```\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar morgan = require('morgan')\n```\n\n### morgan(format, options)\n\nCreate a new morgan logger middleware function using the given `format` and `options`.\nThe `format` argument may be a string of a predefined name (see below for the names),\na string of a format string, or a function that will produce a log entry.\n\nThe `format` function will be called with three arguments `tokens`, `req`, and `res`,\nwhere `tokens` is an object with all defined tokens, `req` is the HTTP request and `res`\nis the HTTP response. The function is expected to return a string that will be the log\nline, or `undefined` / `null` to skip logging.\n\n#### Using a predefined format string\n\n<!-- eslint-disable no-undef -->\n\n```js\nmorgan('tiny')\n```\n\n#### Using format string of predefined tokens\n\n<!-- eslint-disable no-undef -->\n\n```js\nmorgan(':method :url :status :res[content-length] - :response-time ms')\n```\n\n#### Using a custom format function\n\n<!-- eslint-disable no-undef -->\n\n``` js\nmorgan(function (tokens, req, res) {\n  return [\n    tokens.method(req, res),\n    tokens.url(req, res),\n    tokens.status(req, res),\n    tokens.res(req, res, 'content-length'), '-',\n    tokens['response-time'](req, res), 'ms'\n  ].join(' ')\n})\n```\n\n#### Options\n\nMorgan accepts these properties in the options object.\n\n##### immediate\n\nWrite log line on request instead of response. This means that a requests will\nbe logged even if the server crashes, _but data from the response (like the\nresponse code, content length, etc.) cannot be logged_.\n\n##### skip\n\nFunction to determine if logging is skipped, defaults to `false`. This function\nwill be called as `skip(req, res)`.\n\n<!-- eslint-disable no-undef -->\n\n```js\n// EXAMPLE: only log error responses\nmorgan('combined', {\n  skip: function (req, res) { return res.statusCode < 400 }\n})\n```\n\n##### stream\n\nOutput stream for writing log lines, defaults to `process.stdout`.\n\n#### Predefined Formats\n\nThere are various pre-defined formats provided:\n\n##### combined\n\nStandard Apache combined log output.\n```\n:remote-addr - :remote-user [:date[clf]] \":method :url HTTP/:http-version\" :status :res[content-length] \":referrer\" \":user-agent\"\n# will output\n::1 - - [27/Nov/2024:06:21:42 +0000] \"GET /combined HTTP/1.1\" 200 2 \"-\" \"curl/8.7.1\"\n```\n\n##### common\n\nStandard Apache common log output.\n\n```\n:remote-addr - :remote-user [:date[clf]] \":method :url HTTP/:http-version\" :status :res[content-length]\n# will output\n::1 - - [27/Nov/2024:06:21:46 +0000] \"GET /common HTTP/1.1\" 200 2\n```\n\n##### dev\n\nConcise output colored by response status for development use. The `:status`\ntoken will be colored green for success codes, red for server error codes,\nyellow for client error codes, cyan for redirection codes, and uncolored\nfor information codes.\n\n```\n:method :url :status :response-time ms - :res[content-length]\n# will output\nGET /dev 200 0.224 ms - 2\n```\n\n##### short\n\nShorter than default, also including response time.\n\n```\n:remote-addr :remote-user :method :url HTTP/:http-version :status :res[content-length] - :response-time ms\n# will output\n::1 - GET /short HTTP/1.1 200 2 - 0.283 ms\n```\n\n##### tiny\n\nThe minimal output.\n\n```\n:method :url :status :res[content-length] - :response-time ms\n# will output\nGET /tiny 200 2 - 0.188 ms\n```\n\n#### Tokens\n\n##### Creating new tokens\n\nTo define a token, simply invoke `morgan.token()` with the name and a callback function.\nThis callback function is expected to return a string value. The value returned is then\navailable as \":type\" in this case:\n\n<!-- eslint-disable no-undef -->\n\n```js\nmorgan.token('type', function (req, res) { return req.headers['content-type'] })\n```\n\nCalling `morgan.token()` using the same name as an existing token will overwrite that\ntoken definition.\n\nThe token function is expected to be called with the arguments `req` and `res`, representing\nthe HTTP request and HTTP response. Additionally, the token can accept further arguments of\nit's choosing to customize behavior.\n\n##### :date[format]\n\nThe current date and time in UTC. The available formats are:\n\n  - `clf` for the common log format (`\"10/Oct/2000:13:55:36 +0000\"`)\n  - `iso` for the common ISO 8601 date time format (`2000-10-10T13:55:36.000Z`)\n  - `web` for the common RFC 1123 date time format (`Tue, 10 Oct 2000 13:55:36 GMT`)\n\nIf no format is given, then the default is `web`.\n\n##### :http-version\n\nThe HTTP version of the request.\n\n##### :method\n\nThe HTTP method of the request.\n\n##### :referrer\n\nThe Referrer header of the request. This will use the standard mis-spelled Referer header if exists, otherwise Referrer.\n\n##### :remote-addr\n\nThe remote address of the request. This will use `req.ip`, otherwise the standard `req.connection.remoteAddress` value (socket address).\n\n##### :remote-user\n\nThe user authenticated as part of Basic auth for the request.\n\n##### :req[header]\n\nThe given `header` of the request. If the header is not present, the\nvalue will be displayed as `\"-\"` in the log.\n\n##### :res[header]\n\nThe given `header` of the response. If the header is not present, the\nvalue will be displayed as `\"-\"` in the log.\n\n##### :response-time[digits]\n\nThe time between the request coming into `morgan` and when the response\nheaders are written, in milliseconds.\n\nThe `digits` argument is a number that specifies the number of digits to\ninclude on the number, defaulting to `3`, which provides microsecond precision.\n\n##### :status\n\nThe status code of the response.\n\nIf the request/response cycle completes before a response was sent to the\nclient (for example, the TCP socket closed prematurely by a client aborting\nthe request), then the status will be empty (displayed as `\"-\"` in the log).\n\n##### :total-time[digits]\n\nThe time between the request coming into `morgan` and when the response\nhas finished being written out to the connection, in milliseconds.\n\nThe `digits` argument is a number that specifies the number of digits to\ninclude on the number, defaulting to `3`, which provides microsecond precision.\n\n##### :url\n\nThe URL of the request. This will use `req.originalUrl` if exists, otherwise `req.url`.\n\n##### :user-agent\n\nThe contents of the User-Agent header of the request.\n\n### morgan.compile(format)\n\nCompile a format string into a `format` function for use by `morgan`. A format string\nis a string that represents a single log line and can utilize token syntax.\nTokens are references by `:token-name`. If tokens accept arguments, they can\nbe passed using `[]`, for example: `:token-name[pretty]` would pass the string\n`'pretty'` as an argument to the token `token-name`.\n\nThe function returned from `morgan.compile` takes three arguments `tokens`, `req`, and\n`res`, where `tokens` is object with all defined tokens, `req` is the HTTP request and\n`res` is the HTTP response. The function will return a string that will be the log line,\nor `undefined` / `null` to skip logging.\n\nNormally formats are defined using `morgan.format(name, format)`, but for certain\nadvanced uses, this compile function is directly available.\n\n## Examples\n\n### express/connect\n\nSample app that will log all request in the Apache combined format to STDOUT\n\n```js\nvar express = require('express')\nvar morgan = require('morgan')\n\nvar app = express()\n\napp.use(morgan('combined'))\n\napp.get('/', function (req, res) {\n  res.send('hello, world!')\n})\n```\n\n### vanilla http server\n\nSample app that will log all request in the Apache combined format to STDOUT\n\n```js\nvar finalhandler = require('finalhandler')\nvar http = require('http')\nvar morgan = require('morgan')\n\n// create \"middleware\"\nvar logger = morgan('combined')\n\nhttp.createServer(function (req, res) {\n  var done = finalhandler(req, res)\n  logger(req, res, function (err) {\n    if (err) return done(err)\n\n    // respond to request\n    res.setHeader('content-type', 'text/plain')\n    res.end('hello, world!')\n  })\n})\n```\n\n### write logs to a file\n\n#### single file\n\nSample app that will log all requests in the Apache combined format to the file\n`access.log`.\n\n```js\nvar express = require('express')\nvar fs = require('fs')\nvar morgan = require('morgan')\nvar path = require('path')\n\nvar app = express()\n\n// create a write stream (in append mode)\nvar accessLogStream = fs.createWriteStream(path.join(__dirname, 'access.log'), { flags: 'a' })\n\n// setup the logger\napp.use(morgan('combined', { stream: accessLogStream }))\n\napp.get('/', function (req, res) {\n  res.send('hello, world!')\n})\n```\n\n#### log file rotation\n\nSample app that will log all requests in the Apache combined format to one log\nfile per day in the `log/` directory using the\n[rotating-file-stream module](https://www.npmjs.com/package/rotating-file-stream).\n\n```js\nvar express = require('express')\nvar morgan = require('morgan')\nvar path = require('path')\nvar rfs = require('rotating-file-stream') // version 2.x\n\nvar app = express()\n\n// create a rotating write stream\nvar accessLogStream = rfs.createStream('access.log', {\n  interval: '1d', // rotate daily\n  path: path.join(__dirname, 'log')\n})\n\n// setup the logger\napp.use(morgan('combined', { stream: accessLogStream }))\n\napp.get('/', function (req, res) {\n  res.send('hello, world!')\n})\n```\n\n### split / dual logging\n\nThe `morgan` middleware can be used as many times as needed, enabling\ncombinations like:\n\n  * Log entry on request and one on response\n  * Log all requests to file, but errors to console\n  * ... and more!\n\nSample app that will log all requests to a file using Apache format, but\nerror responses are logged to the console:\n\n```js\nvar express = require('express')\nvar fs = require('fs')\nvar morgan = require('morgan')\nvar path = require('path')\n\nvar app = express()\n\n// log only 4xx and 5xx responses to console\napp.use(morgan('dev', {\n  skip: function (req, res) { return res.statusCode < 400 }\n}))\n\n// log all requests to access.log\napp.use(morgan('common', {\n  stream: fs.createWriteStream(path.join(__dirname, 'access.log'), { flags: 'a' })\n}))\n\napp.get('/', function (req, res) {\n  res.send('hello, world!')\n})\n```\n\n### use custom token formats\n\nSample app that will use custom token formats. This adds an ID to all requests and displays it using the `:id` token.\n\n```js\nvar express = require('express')\nvar morgan = require('morgan')\nvar uuid = require('node-uuid')\n\nmorgan.token('id', function getId (req) {\n  return req.id\n})\n\nvar app = express()\n\napp.use(assignId)\napp.use(morgan(':id :method :url :response-time'))\n\napp.get('/', function (req, res) {\n  res.send('hello, world!')\n})\n\nfunction assignId (req, res, next) {\n  req.id = uuid.v4()\n  next()\n}\n```\n\n## License\n\n[MIT](LICENSE)\n\n[ci-image]: https://badgen.net/github/checks/expressjs/morgan/master?label=ci\n[ci-url]: https://github.com/expressjs/morgan/actions/workflows/ci.yml\n[coveralls-image]: https://badgen.net/coveralls/c/github/expressjs/morgan/master\n[coveralls-url]: https://coveralls.io/r/expressjs/morgan?branch=master\n[npm-downloads-image]: https://badgen.net/npm/dm/morgan\n[npm-url]: https://npmjs.org/package/morgan\n[npm-version-image]: https://badgen.net/npm/v/morgan\n",
        "releases": [
            {
                "name": "1.10.0",
                "date": "2020-03-20T17:51:49Z"
            },
            {
                "name": "1.9.1",
                "date": "2018-09-11T01:17:34Z"
            },
            {
                "name": "1.9.0",
                "date": "2017-09-27T02:32:46Z"
            },
            {
                "name": "1.8.2",
                "date": "2017-05-24T01:54:23Z"
            },
            {
                "name": "1.8.1",
                "date": "2017-02-11T01:46:31Z"
            },
            {
                "name": "1.8.0",
                "date": "2017-02-05T00:35:29Z"
            },
            {
                "name": "1.7.0",
                "date": "2016-02-19T04:59:43Z"
            },
            {
                "name": "1.6.1",
                "date": "2015-07-04T03:03:53Z"
            },
            {
                "name": "1.6.0",
                "date": "2015-07-04T03:01:15Z"
            },
            {
                "name": "1.5.3",
                "date": "2015-05-11T06:43:07Z"
            },
            {
                "name": "1.5.2",
                "date": "2015-03-15T20:09:54Z"
            },
            {
                "name": "1.5.1",
                "date": "2014-12-31T19:16:53Z"
            },
            {
                "name": "1.5.0",
                "date": "2014-11-07T06:11:39Z"
            },
            {
                "name": "1.4.1",
                "date": "2014-11-07T06:11:23Z"
            },
            {
                "name": "1.4.0",
                "date": "2014-10-17T01:15:05Z"
            },
            {
                "name": "1.3.2",
                "date": "2014-09-28T03:32:24Z"
            },
            {
                "name": "1.3.1",
                "date": "2014-09-14T16:54:06Z"
            },
            {
                "name": "1.3.0",
                "date": "2014-09-02T04:36:34Z"
            },
            {
                "name": "1.2.3",
                "date": "2014-09-02T04:15:26Z"
            },
            {
                "name": "1.2.2",
                "date": "2014-07-27T19:23:43Z"
            },
            {
                "name": "1.2.1",
                "date": "2014-07-26T20:36:45Z"
            },
            {
                "name": "1.2.0",
                "date": "2014-07-23T01:43:26Z"
            },
            {
                "name": "1.1.1",
                "date": "2014-07-20T04:24:27Z"
            },
            {
                "name": "1.1.0",
                "date": "2014-05-19T02:58:11Z"
            },
            {
                "name": "1.0.1",
                "date": "2014-05-05T02:26:04Z"
            },
            {
                "name": "1.0.0",
                "date": "2014-05-19T02:55:27Z"
            }
        ]
    }
}