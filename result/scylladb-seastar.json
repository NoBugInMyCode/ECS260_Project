{
    "https://api.github.com/repos/scylladb/seastar": {
        "forks": 1576,
        "watchers": 8494,
        "stars": 8494,
        "languages": {
            "C++": 4506642,
            "Python": 271667,
            "CMake": 146853,
            "Shell": 40694,
            "Ragel": 21673,
            "Dockerfile": 1495
        },
        "commits": [
            "2025-01-21T17:40:02Z",
            "2025-01-09T06:28:56Z",
            "2025-01-20T10:02:11Z",
            "2024-12-24T11:47:33Z",
            "2025-01-17T08:00:40Z",
            "2025-01-17T07:28:32Z",
            "2025-01-16T16:25:06Z",
            "2025-01-16T16:25:05Z",
            "2025-01-16T03:38:04Z",
            "2025-01-16T02:30:04Z",
            "2025-01-08T21:41:23Z",
            "2025-01-15T15:46:56Z",
            "2024-12-14T18:34:34Z",
            "2025-01-12T13:34:27Z",
            "2025-01-15T10:58:45Z",
            "2024-12-12T10:09:47Z",
            "2025-01-10T17:25:49Z",
            "2024-12-27T16:25:32Z",
            "2024-12-19T18:36:10Z",
            "2025-01-07T17:25:35Z",
            "2024-12-25T18:57:18Z",
            "2024-12-26T06:40:25Z",
            "2025-01-09T10:03:15Z",
            "2024-12-26T07:58:07Z",
            "2024-12-26T07:53:57Z",
            "2024-12-26T06:38:29Z",
            "2024-12-26T05:49:55Z",
            "2024-12-26T05:31:28Z",
            "2025-01-02T00:07:22Z",
            "2025-01-03T03:48:58Z"
        ],
        "creation_date": "2014-08-18T07:01:07Z",
        "contributors": 30,
        "topics": [
            "aio",
            "async",
            "c-plus-plus",
            "dpdk",
            "seastar"
        ],
        "subscribers": 394,
        "readme": "Seastar\n=======\n\n[![Test](https://github.com/scylladb/seastar/actions/workflows/tests.yaml/badge.svg)](https://github.com/scylladb/seastar/actions/workflows/tests.yaml)\n[![Version](https://img.shields.io/github/tag/scylladb/seastar.svg?label=version&colorB=green)](https://github.com/scylladb/seastar/releases)\n[![License: Apache2](https://img.shields.io/github/license/scylladb/seastar.svg)](https://github.com/scylladb/seastar/blob/master/LICENSE)\n[![n00b issues](https://img.shields.io/github/issues/scylladb/seastar/n00b.svg?colorB=green)](https://github.com/scylladb/seastar/labels/n00b)\n\nIntroduction\n------------\n\nSeaStar is an event-driven framework allowing you to write non-blocking,\nasynchronous code in a relatively straightforward manner (once understood).\nIt is based on [futures](http://en.wikipedia.org/wiki/Futures_and_promises).\n\nBuilding Seastar\n--------------------\n\nFor more details and alternative work-flows, read [HACKING.md](./HACKING.md).\n\nAssuming that you would like to use system packages (RPMs or DEBs) for Seastar's dependencies, first install them:\n\n```\n$ sudo ./install-dependencies.sh\n```\n\nthen configure (in \"release\" mode):\n\n```\n$ ./configure.py --mode=release\n```\nthen compile:\n\n```\n$ ninja -C build/release\n```\n\nIn case there are compilation issues, especially like ```g++: internal compiler error: Killed (program cc1plus)```\ntry giving more memory to gcc, either by limiting the amount of threads ( -j1 ) and/or allowing at least 4g ram to your\nmachine.\n\nIf you're missing a dependency of Seastar, then it is possible to have the configuration process fetch a version of the dependency locally for development.\n\nFor example, to fetch `fmt` locally, configure Seastar like this:\n\n```\n$ ./configure.py --mode=dev --cook fmt\n```\n\n`--cook` can be repeated many times for selecting multiple dependencies.\n\n\nBuild modes\n----------------------------------------------------------------------------\n\nThe configure.py script is a wrapper around cmake. The --mode argument\nmaps to CMAKE_BUILD_TYPE, and supports the following modes\n\n|          | CMake mode          | Debug info | Optimi&shy;zations | Sanitizers   | Allocator | Checks   | Use for                                |\n| -------- | ------------------- | ---------- | ------------------ |------------- | --------- | -------- | -------------------------------------- |\n| debug    | `Debug`             | Yes        | `-O0`              | ASAN, UBSAN  | System    | All      | gdb                                    |\n| release  | `RelWithDebInfo`    | Yes        | `-O3`              | None         | Seastar   | Asserts  | production                             |\n| dev      | `Dev` (Custom)      | No         | `-O1`              | None         | Seastar   | Asserts  | build and test cycle                   |\n| sanitize | `Sanitize` (Custom) | Yes        | `-Os`              | ASAN, UBSAN  | System    | All      | second level of tests, track down bugs |\n\nNote that seastar is more sensitive to allocators and optimizations than\nusual. A quick rule of the thumb of the relative performances is that\nrelease is 2 times faster than dev, 150 times faster than sanitize and\n300 times faster than debug.\n\nUsing Seastar from its build directory (without installation)\n----------------------------------------------------------------------------\n\nIt's possible to consume Seastar directly from its build directory with CMake or `pkg-config`.\n\nWe'll assume that the Seastar repository is located in a directory at `$seastar_dir`.\n\n\nVia `pkg-config`:\n\n```\n$ g++ my_app.cc $(pkg-config --libs --cflags --static $seastar_dir/build/release/seastar.pc) -o my_app\n```\n\nand with CMake using the `Seastar` package:\n\n\n`CMakeLists.txt` for `my_app`:\n\n```\nset (CMAKE_CXX_STANDARD 23)\n\nfind_package (Seastar REQUIRED)\n\nadd_executable (my_app\n  my_app.cc)\n\ntarget_link_libraries (my_app\n  Seastar::seastar)\n```\n\n```\n$ mkdir $my_app_dir/build\n$ cd $my_app_dir/build\n$ cmake -DCMAKE_PREFIX_PATH=\"$seastar_dir/build/release;$seastar_dir/build/release/_cooking/installed\" -DCMAKE_MODULE_PATH=$seastar_dir/cmake $my_app_dir\n```\n\nThe `CMAKE_PREFIX_PATH` values ensure that CMake can locate Seastar and its compiled submodules. The `CMAKE_MODULE_PATH` value ensures that CMake can uses Seastar's CMake scripts for locating its dependencies.\n\nUsing an installed Seastar\n--------------------------------\n\nYou can also consume Seastar after it has been installed to the file-system.\n\n**Important:**\n\n- Seastar works with a customized version of DPDK, so by default builds and installs the DPDK submodule to `$build_dir/_cooking/installed`\n\nFirst, configure the installation path:\n\n```\n$ ./configure.py --mode=release --prefix=/usr/local\n```\n\nthen run the `install` target:\n\n```\n$ ninja -C build/release install\n```\n\nthen consume it from `pkg-config`:\n\n```\n$ g++ my_app.cc $(pkg-config --libs --cflags --static seastar) -o my_app\n```\n\nor consume it with the same `CMakeLists.txt` as before but with a simpler CMake invocation:\n\n```\n$ cmake ..\n```\n\n(If Seastar has not been installed to a \"standard\" location like `/usr` or `/usr/local`, then you can invoke CMake with `-DCMAKE_PREFIX_PATH=$my_install_root`.)\n\nThere are also instructions for building on any host that supports [Docker](doc/building-docker.md).\n\nUse of the [DPDK](http://dpdk.org) is [optional](doc/building-dpdk.md).\n\n#### Seastar's C++ standard: C++20 or C++23\n\nSeastar supports both C++20, and C++23. The build defaults to the latest\nstandard supported by your compiler, but can be explicitly selected with\nthe `--c++-standard` configure option, e.g., `--c++-standard=20`,\nor if using CMake directly, by setting on the `CMAKE_CXX_STANDARD` CMake\nvariable.\n\nSee the [compatibity statement](doc/compatibility.md) for more information.\n\nGetting started\n---------------\n\nThere is a [mini tutorial](doc/mini-tutorial.md) and a [more comprehensive one](doc/tutorial.md).\n\nThe documentation is available on the [web](http://docs.seastar.io/master/index.html).\n\n\nResources\n---------\n\n* Seasatar Development Mailing List: Discuss challenges, propose improvements with\n  sending code contributions (patches), and get help from experienced developers.\n  Subscribe or browse archives: [here](https://groups.google.com/forum/#!forum/seastar-dev)\n  (or email seastar-dev@googlegroups.com).\n* GitHub Discussions: For more casual conversations and quick questions, consider\n  using the Seastar project's [discussions on Github](https://github.com/scylladb/seastar/discussions).\n* Issue Tracker: File bug reports on the project's [issue tracker](https://github.com/scylladb/seastar/issues).\n\nLearn more about Seastar on the main [project website](http://seastar.io).\n\nThe Native TCP/IP Stack\n-----------------------\n\nSeastar comes with its own [userspace TCP/IP stack](doc/native-stack.md) for better performance.\n\nRecommended hardware configuration for SeaStar\n----------------------------------------------\n\n* CPUs - As much as you need. SeaStar is highly friendly for multi-core and NUMA\n* NICs - As fast as possible, we recommend 10G or 40G cards. It's possible to use\n       1G too but you may be limited by their capacity.\n       In addition, the more hardware queue per cpu the better for SeaStar.\n       Otherwise we have to emulate that in software.\n* Disks - Fast SSDs with high number of IOPS.\n* Client machines - Usually a single client machine can't load our servers.\n       Both memaslap (memcached) and WRK (httpd) cannot over load their matching\n       server counter parts. We recommend running the client on different machine\n       than the servers and use several of them.\n\nProjects using Seastar\n----------------------------------------------\n\n* [cpv-cql-driver](https://github.com/cpv-project/cpv-cql-driver): C++ driver for Cassandra/Scylla based on seastar framework\n* [cpv-framework](https://github.com/cpv-project/cpv-framework): A web framework written in c++ based on seastar framework\n* [redpanda](https://vectorized.io/): A Kafka replacement for mission critical systems\n* [Scylla](https://github.com/scylladb/scylla): A fast and reliable NoSQL data store compatible with Cassandra and DynamoDB\n* [smf](https://github.com/smfrpc/smf): The fastest RPC in the West\n* [Ceph - Crimson](https://github.com/ceph/ceph): Next-generation OSD (Object Storage Daemon) implementation based on the Seastar framework\n",
        "releases": []
    }
}