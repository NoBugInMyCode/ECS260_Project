{
    "https://api.github.com/repos/dnSpy/dnSpy": {
        "forks": 5182,
        "watchers": 26973,
        "stars": 26973,
        "languages": {
            "C#": 19981441,
            "Visual Basic .NET": 43076,
            "PowerShell": 2996,
            "Batchfile": 673
        },
        "commits": [
            "2020-12-07T21:07:17Z",
            "2020-12-07T21:07:09Z",
            "2020-11-19T22:24:47Z",
            "2020-11-19T07:22:42Z",
            "2020-11-12T12:21:24Z",
            "2020-11-11T19:56:44Z",
            "2020-11-11T19:48:37Z",
            "2020-11-11T19:46:39Z",
            "2020-11-11T19:44:14Z",
            "2020-11-11T19:14:11Z",
            "2020-11-11T17:08:12Z",
            "2020-11-11T16:15:52Z",
            "2020-11-08T20:29:55Z",
            "2020-10-26T18:44:39Z",
            "2020-10-18T21:01:41Z",
            "2020-10-16T18:21:09Z",
            "2020-09-22T19:41:20Z",
            "2020-09-21T21:31:07Z",
            "2020-09-15T16:58:30Z",
            "2020-09-15T13:19:50Z",
            "2020-09-03T20:16:04Z",
            "2020-08-30T09:17:28Z",
            "2020-08-29T21:47:27Z",
            "2020-08-29T21:40:09Z",
            "2020-08-29T21:31:40Z",
            "2020-08-29T08:22:09Z",
            "2020-08-28T17:47:42Z",
            "2020-08-22T17:54:15Z",
            "2020-08-22T17:52:49Z",
            "2020-08-20T08:58:55Z"
        ],
        "creation_date": "2015-07-01T16:05:10Z",
        "contributors": 25,
        "topics": [],
        "subscribers": 992,
        "readme": "# dnSpy - [Latest release](https://github.com/dnSpy/dnSpy/releases)\n\ndnSpy is a debugger and .NET assembly editor. You can use it to edit and debug assemblies even if you don't have any source code available. Main features:\n\n- Debug .NET and Unity assemblies\n- Edit .NET and Unity assemblies\n- Light and dark themes\n\nSee below for more features\n\n![debug-animated](images/debug-animated.gif)\n\n![edit-code-animated](images/edit-code-animated.gif)\n\n## Binaries\n\nhttps://github.com/dnSpy/dnSpy/releases\n\n## Building\n\n```PS\ngit clone --recursive https://github.com/dnSpy/dnSpy.git\ncd dnSpy\n# or dotnet build\n./build.ps1 -NoMsbuild\n```\n\nTo debug Unity games, you need this repo too: https://github.com/dnSpy/dnSpy-Unity-mono (or get the binaries from https://github.com/dnSpy/dnSpy/releases/unity)\n\n# Debugger\n\n- Debug .NET Framework, .NET and Unity game assemblies, no source code required\n- Set breakpoints and step into any assembly\n- Locals, watch, autos windows\n- Variables windows support saving variables (eg. decrypted byte arrays) to disk or view them in the hex editor (memory window)\n- Object IDs\n- Multiple processes can be debugged at the same time\n- Break on module load\n- Tracepoints and conditional breakpoints\n- Export/import breakpoints and tracepoints\n- Call stack, threads, modules, processes windows\n- Break on thrown exceptions (1st chance)\n- Variables windows support evaluating C# / Visual Basic expressions\n- Dynamic modules can be debugged (but not dynamic methods due to CLR limitations)\n- Output window logs various debugging events, and it shows timestamps by default :)\n- Assemblies that decrypt themselves at runtime can be debugged, dnSpy will use the in-memory image. You can also force dnSpy to always use in-memory images instead of disk files.\n- Public API, you can write an extension or use the C# Interactive window to control the debugger\n\n# Assembly Editor\n\n- All metadata can be edited\n- Edit methods and classes in C# or Visual Basic with IntelliSense, no source code required\n- Add new methods, classes or members in C# or Visual Basic\n- IL editor for low-level IL method body editing\n- Low-level metadata tables can be edited. This uses the hex editor internally.\n\n# Hex Editor\n\n- Click on an address in the decompiled code to go to its IL code in the hex editor\n- The reverse of the above, press F12 in an IL body in the hex editor to go to the decompiled code or other high-level representation of the bits. It's great to find out which statement a patch modified.\n- Highlights .NET metadata structures and PE structures\n- Tooltips show more info about the selected .NET metadata / PE field\n- Go to position, file, RVA\n- Go to .NET metadata token, method body, #Blob / #Strings / #US heap offset or #GUID heap index\n- Follow references (Ctrl+F12)\n\n# Other\n\n- BAML decompiler\n- Blue, light and dark themes (and a dark high contrast theme)\n- Bookmarks\n- C# Interactive window can be used to script dnSpy\n- Search assemblies for classes, methods, strings, etc\n- Analyze class and method usage, find callers, etc\n- Multiple tabs and tab groups\n- References are highlighted, use Tab / Shift+Tab to move to the next reference\n- Go to the entry point and module initializer commands\n- Go to metadata token or metadata row commands\n- Code tooltips (C# and Visual Basic)\n- Export to project\n\n# List of other open source libraries used by dnSpy\n\n- [ILSpy decompiler engine](https://github.com/icsharpcode/ILSpy) (C# and Visual Basic decompilers)\n- [Roslyn](https://github.com/dotnet/roslyn) (C# and Visual Basic compilers)\n- [dnlib](https://github.com/0xd4d/dnlib) (.NET metadata reader/writer which can also read obfuscated assemblies)\n- [VS MEF](https://github.com/microsoft/vs-mef) (Faster MEF equals faster startup)\n- [ClrMD](https://github.com/microsoft/clrmd) (Access to lower level debugging info not provided by the CorDebug API)\n- [Iced](https://github.com/0xd4d/iced) (x86/x64 disassembler)\n\n# Translating dnSpy\n\n[Click here](https://crowdin.com/project/dnspy) if you want to help with translating dnSpy to your native language.\n\n# Wiki\n\nSee the [Wiki](https://github.com/dnSpy/dnSpy/wiki) for build instructions and other documentation.\n\n# License\n\ndnSpy is licensed under [GPLv3](dnSpy/dnSpy/LicenseInfo/GPLv3.txt).\n\n# [Credits](dnSpy/dnSpy/LicenseInfo/CREDITS.txt)\n",
        "releases": [
            {
                "name": "v6.1.8",
                "date": "2020-12-07T21:21:10Z"
            }
        ]
    }
}