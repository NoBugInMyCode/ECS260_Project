{
    "https://api.github.com/repos/MortimerGoro/MGSwipeTableCell": {
        "forks": 1074,
        "watchers": 6959,
        "stars": 6959,
        "languages": {
            "Objective-C": 82434,
            "Ruby": 587,
            "Swift": 587
        },
        "commits": [
            "2022-05-17T21:15:42Z",
            "2022-05-17T21:04:46Z",
            "2022-05-17T20:38:30Z",
            "2022-05-17T20:40:07Z",
            "2022-05-17T20:35:20Z",
            "2022-05-17T20:32:09Z",
            "2022-04-30T13:34:36Z",
            "2021-05-23T16:55:45Z",
            "2020-11-24T02:45:06Z",
            "2020-11-24T02:35:29Z",
            "2020-11-24T02:33:59Z",
            "2019-11-24T20:55:23Z",
            "2019-10-16T10:12:10Z",
            "2019-10-16T10:11:09Z",
            "2019-10-16T09:57:00Z",
            "2019-10-16T09:53:34Z",
            "2019-09-26T02:33:46Z",
            "2019-09-26T01:50:23Z",
            "2019-08-25T21:51:41Z",
            "2019-08-25T21:50:11Z",
            "2019-08-25T21:48:27Z",
            "2019-08-19T23:09:13Z",
            "2018-11-27T21:02:25Z",
            "2018-11-27T20:46:08Z",
            "2018-11-25T15:14:20Z",
            "2018-09-24T14:12:26Z",
            "2018-08-11T18:48:04Z",
            "2018-04-29T14:26:56Z",
            "2018-04-29T14:25:07Z",
            "2018-04-29T14:17:51Z"
        ],
        "creation_date": "2014-08-09T13:56:25Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 212,
        "readme": "MGSwipeTableCell\n================\n\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\n\nMGSwipeTableCell is an easy to use UITableViewCell subclass that allows to display swipeable buttons with a variety of transitions.\n\nThis library is compatible with all the different ways to create a UITableViewCell: system predefined styles, programmatically created cells, cells loaded from a xib and prototype cells within a storyboard. You can use autolayout if you want.\n\nWorks on iOS >= 5.0. Tested on all iOS versions on iPhone and iPad: iOS 7, iOS 8, iOS 9, iOS 10, iOS 11, iOS 12, iOS 13, iOS 14.\n\n## Transitions demo\n\n### Border transition\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/MortimerGoro/MGSwipeTableCell/master/readme-assets/border.gif\" /></p>\n\n### Clip transition\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/MortimerGoro/MGSwipeTableCell/master/readme-assets/clip.gif\" /></p>\n\n### 3D transition\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/MortimerGoro/MGSwipeTableCell/master/readme-assets/3d.gif\" /></p>\n\n### Static transition\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/MortimerGoro/MGSwipeTableCell/master/readme-assets/static.gif\" /></p>\n\n### Drag transition\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/MortimerGoro/MGSwipeTableCell/master/readme-assets/drag.gif\" /></p>\n\n## API Reference\nSee [`MGSwipeTableCell.h`](MGSwipeTableCell/MGSwipeTableCell.h) header file for a complete overview of the capabilities of the class.\n\nSee [`MailAppDemo`](demo/MailAppDemo) for a complete project which mimics Apple's Mail App (written in Objective-C)\n\nSee [`MailAppDemoSwift`](demo/MailAppDemoSwift) for a complete project which mimics Apple's Mail App (Written in Swift)\n\nSee [`SpotifyDemo`](demo/SpotifyDemo) for a complete project which mimics Spotify App swipe style\n\nSee [`MGSwipeDemo`](demo/MGSwipeDemo) for a complete project where you can test the variety of transitions on a real device/simulator.\n\n## Setup your project\n\nYou can use CocoaPods to include MGSwipeTableCell into you project:\n\n    pod 'MGSwipeTableCell'\n    \nYou can use Carthage to include MGSwipeTableCell into your project. Just add this dependency to your Cartfile:\n    \n    github \"MortimerGoro/MGSwipeTableCell\"\n\nYou can use Swift Package Manager to include MGSwipeTableCell into you project:\n\n    .package(url: \"https://github.com/MortimerGoro/MGSwipeTableCell.git\", from: \"1.6.0\")\n\n## Usage\n\n### Basic\nIntegrating MGSwipeTableCell in your project is very easy. Basically, you only have to inherit from MGSwipeTableCell instead of UITableViewCell, or directly instantiate MGSwipeTableCell instances with iOS predefined cell styles. You can layout your cell content as you are used to do, MGSwipeTableCell doesn't force you to change layouts.\n\nHere is a example of a MGSwipeTableCell using iOS predefined styles. You can set an array of buttons to cell.leftButtons and/or cell.rightButtons properties. MGSwipeButton is a convenience class, you are not forced to use it. You can use your own UIButtons or UIViews. You can configure transitions (and swipe thresholds) with the leftSwipeSettings and/or rightSwipeSettings properties\n\n##### Objective-C\n```objc\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    static NSString * reuseIdentifier = @\"programmaticCell\";\n    MGSwipeTableCell * cell = [self.tableView dequeueReusableCellWithIdentifier:reuseIdentifier];\n    if (!cell) {\n        cell = [[MGSwipeTableCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:reuseIdentifier];\n    }\n\n    cell.textLabel.text = @\"Title\";\n    cell.detailTextLabel.text = @\"Detail text\";\n    cell.delegate = self; //optional\n\n\n    //configure left buttons\n    cell.leftButtons = @[[MGSwipeButton buttonWithTitle:@\"\" icon:[UIImage imageNamed:@\"check.png\"] backgroundColor:[UIColor greenColor]],\n                          [MGSwipeButton buttonWithTitle:@\"\" icon:[UIImage imageNamed:@\"fav.png\"] backgroundColor:[UIColor blueColor]]];\n    cell.leftSwipeSettings.transition = MGSwipeTransition3D;\n\n    //configure right buttons\n    cell.rightButtons = @[[MGSwipeButton buttonWithTitle:@\"Delete\" backgroundColor:[UIColor redColor]],\n                           [MGSwipeButton buttonWithTitle:@\"More\" backgroundColor:[UIColor lightGrayColor]]];\n    cell.rightSwipeSettings.transition = MGSwipeTransition3D;\n    return cell;\n}\n```\n##### Swift\n```swift\nfunc tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell\n{\n    let reuseIdentifier = \"programmaticCell\"\n    var cell = tableView.dequeueReusableCell(withIdentifier: reuseIdentifier, for: indexPath) as! MGSwipeTableCell\n\n    cell.textLabel!.text = \"Title\"\n    cell.detailTextLabel!.text = \"Detail text\"\n    cell.delegate = self //optional\n\n    //configure left buttons\n    cell.leftButtons = [MGSwipeButton(title: \"\", icon: UIImage(named:\"check.png\"), backgroundColor: .green),\n                        MGSwipeButton(title: \"\", icon: UIImage(named:\"fav.png\"), backgroundColor: .blue)]\n    cell.leftSwipeSettings.transition = .rotate3D\n\n    //configure right buttons\n    cell.rightButtons = [MGSwipeButton(title: \"Delete\", backgroundColor: .red),\n                         MGSwipeButton(title: \"More\",backgroundColor: .lightGray)]\n    cell.rightSwipeSettings.transition = .rotate3D\n\n    return cell\n}\n```\n\nIn order to listen for button click events you can implement the optional MGSwipeTableCellDelegate, or if you are too lazy to do that, the MGSwipeButton class comes with a convenience block callback ;)\n\n##### Objective-c\n```objc\n[MGSwipeButton buttonWithTitle:@\"More\" backgroundColor:[UIColor lightGrayColor] callback:^BOOL(MGSwipeTableCell *sender) {\n      NSLog(@\"Convenience callback for swipe buttons!\");\n}]\n```\n##### Swift\n```swift\nMGSwipeButton(title: \"Delete\", backgroundColor: .red) {\n      (sender: MGSwipeTableCell!) -> Bool in\n      print(\"Convenience callback for swipe buttons!\")\n      return true\n    }\n```\n\n### Delegate\n\nMGSwipeTableCellDelegate is an optional delegate to configure swipe buttons or to receive triggered actions or another events. Buttons can be configured inline when the cell is created instead of using this delegate, but using the delegate improves memory usage since buttons are only created on demand.\n\n```objc\n@protocol MGSwipeTableCellDelegate <NSObject>\n\n@optional\n/**\n * Delegate method to enable/disable swipe gestures\n * @return YES if swipe is allowed\n **/\n-(BOOL) swipeTableCell:(MGSwipeTableCell*) cell canSwipe:(MGSwipeDirection) direction;\n/**\n * Delegate method invoked when the current swipe state changes\n @param state the current Swipe State\n @param gestureIsActive YES if the user swipe gesture is active. No if the uses has already ended the gesture\n **/\n-(void) swipeTableCell:(MGSwipeTableCell*) cell didChangeSwipeState:(MGSwipeState) state gestureIsActive:(BOOL) gestureIsActive;\n/**\n * Called when the user clicks a swipe button or when a expandable button is automatically triggered\n * @return YES to autohide the current swipe buttons\n **/\n-(BOOL) swipeTableCell:(MGSwipeTableCell*) cell tappedButtonAtIndex:(NSInteger) index direction:(MGSwipeDirection)direction fromExpansion:(BOOL) fromExpansion;\n/**\n * Delegate method to setup the swipe buttons and swipe/expansion settings\n * Buttons can be any kind of UIView but it's recommended to use the convenience MGSwipeButton class\n * Setting up buttons with this delegate instead of using cell properties improves memory usage because buttons are only created in demand\n * @param swipeTableCell the UITableViewCell to configure. You can get the indexPath using [tableView indexPathForCell:cell]\n * @param direction The swipe direction (left to right or right to left)\n * @param swipeSettings instance to configure the swipe transition and setting (optional)\n * @param expansionSettings instance to configure button expansions (optional)\n * @return Buttons array\n **/\n-(NSArray*) swipeTableCell:(MGSwipeTableCell*) cell swipeButtonsForDirection:(MGSwipeDirection)direction\n             swipeSettings:(MGSwipeSettings*) swipeSettings expansionSettings:(MGSwipeExpansionSettings*) expansionSettings;\n\n@end\n```\n\n### Expandable buttons\n\nButtons are not expandable by default. You can set up expandable buttons using cell.leftExpansion and cell.rightExpansion properties\n\nExpandable button events are triggered automatically when the user ends the swipe gesture and the expansion is active (configurable via threshold value). Triggered expandable buttons can bounce back to their initial position or fill the entire UITableViewCell, you can select the desired animation using fillOnTrigger property.\n\n```objc\n@interface MGSwipeExpansionSettings: NSObject\n/** index of the expandable button (in the left or right buttons arrays) */\n@property (nonatomic, assign) NSInteger buttonIndex;\n/** if true the button fills the cell on trigger, else it bounces back to its initial position */\n@property (nonatomic, assign) BOOL fillOnTrigger;\n/** Size proportional threshold to trigger the expansion button. Default value 1.5 */\n@property (nonatomic, assign) CGFloat threshold;\n@end\n```\n### Rounded corners and swipe buttons\nMGSwipeTableCell supports rounded corners. Example: \n\n```objc\ncell.layer.cornerRadius = 50\ncell.backgroundColor = UIColor.gray\ncell.clipsToBounds = true\ncell.swipeBackgroundColor = UIColor.gray\n```\n<p align=\"center\"><img src=\"https://github.com/MortimerGoro/MGSwipeTableCell/blob/master/readme-assets/RoundTableViewCell.png\" width=\"30%\" /></p>\n\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Imanol Fernandez @MortimerGoro\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
        "releases": []
    }
}