{
    "https://api.github.com/repos/openai/triton": {
        "forks": 1728,
        "watchers": 14105,
        "stars": 14105,
        "languages": {
            "C++": 1803113,
            "MLIR": 1554870,
            "Python": 1211086,
            "CMake": 36419,
            "C": 6443,
            "Makefile": 1703,
            "LLVM": 1165
        },
        "commits": [
            "2025-01-22T02:24:24Z",
            "2025-01-22T00:53:02Z",
            "2025-01-21T23:26:49Z",
            "2025-01-21T21:22:43Z",
            "2025-01-21T21:22:24Z",
            "2025-01-21T18:19:17Z",
            "2025-01-21T17:29:51Z",
            "2025-01-21T17:15:33Z",
            "2025-01-21T15:05:41Z",
            "2025-01-21T14:05:52Z",
            "2025-01-21T13:52:58Z",
            "2025-01-21T09:13:28Z",
            "2025-01-21T07:09:37Z",
            "2025-01-21T03:00:09Z",
            "2025-01-20T23:31:15Z",
            "2025-01-20T20:21:02Z",
            "2025-01-20T18:32:16Z",
            "2025-01-19T23:49:57Z",
            "2025-01-19T22:17:46Z",
            "2025-01-19T09:02:55Z",
            "2025-01-19T00:16:15Z",
            "2025-01-17T18:24:42Z",
            "2025-01-17T15:22:35Z",
            "2025-01-17T03:35:39Z",
            "2025-01-16T23:49:46Z",
            "2025-01-16T22:25:02Z",
            "2025-01-16T18:35:41Z",
            "2025-01-15T20:56:22Z",
            "2025-01-15T20:06:21Z",
            "2025-01-15T20:02:37Z"
        ],
        "creation_date": "2014-08-30T17:07:16Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 196,
        "readme": "<div align=\"center\">\n  <img src=\"https://lh5.googleusercontent.com/wzQKEsTFkrgNQO9JjhGH5wFvslJr1saLtLaJ_a6Fp_gNENpvt3VG7BmztwngU9hFJaU4CPwGiw1opQtDvTkLrxWRbO_a12Q-pdESWHgtmheIHcPbOL5ZMC4TSiJVe5ty1w=w3517\" alt=\"Triton logo\">\n</div>\n\n| **`Documentation`** | **`Nightly Wheels`** |\n|-------------------- | -------------------- |\n| [![Documentation](https://github.com/triton-lang/triton/actions/workflows/documentation.yml/badge.svg)](https://triton-lang.org/) | [![Wheels](https://github.com/triton-lang/triton/actions/workflows/wheels.yml/badge.svg?branch=release/2.0.x)](https://github.com/triton-lang/triton/actions/workflows/wheels.yml) |\n\n# Triton\n\nThis is the development repository of Triton, a language and compiler for writing highly efficient custom Deep-Learning primitives. The aim of Triton is to provide an open-source environment to write fast code at higher productivity than CUDA, but also with higher flexibility than other existing DSLs.\n\nThe foundations of this project are described in the following MAPL2019 publication: [Triton: An Intermediate Language and Compiler for Tiled Neural Network Computations](http://www.eecs.harvard.edu/~htk/publication/2019-mapl-tillet-kung-cox.pdf). Please consider citing this work if you use Triton!\n\nThe [official documentation](https://triton-lang.org) contains installation instructions and tutorials.  See also these third-party [Triton puzzles](https://github.com/srush/Triton-Puzzles), which can all be run using the Triton interpreter -- no GPU required.\n\n# Quick Installation\n\nYou can install the latest stable release of Triton from pip:\n\n```shell\npip install triton\n```\n\nBinary wheels are available for CPython 3.8-3.12 and PyPy 3.8-3.9.\n\nAnd the latest nightly release:\n\n```shell\npip install -U --index-url https://aiinfra.pkgs.visualstudio.com/PublicPackages/_packaging/Triton-Nightly/pypi/simple/ triton-nightly\n```\n\n# Install from source\n\n```shell\ngit clone https://github.com/triton-lang/triton.git;\ncd triton;\n\npip install ninja cmake wheel pybind11; # build-time dependencies\npip install -e python\n```\n\nOr with a virtualenv:\n\n```shell\ngit clone https://github.com/triton-lang/triton.git;\ncd triton;\n\npython -m venv .venv --prompt triton;\nsource .venv/bin/activate;\n\npip install ninja cmake wheel pybind11; # build-time dependencies\npip install -e python\n```\n\n# Building with a custom LLVM\n\nTriton uses LLVM to generate code for GPUs and CPUs.  Normally, the Triton build\ndownloads a prebuilt LLVM, but you can also build LLVM from source and use that.\n\nLLVM does not have a stable API, so the Triton build will not work at an\narbitrary LLVM version.\n\n1. Find the version of LLVM that Triton builds against.  Check\n`cmake/llvm-hash.txt` to see the current version. For example, if it says:\n       49af6502c6dcb4a7f7520178bd14df396f78240c\n\n   This means that the version of Triton you have builds against\n   [LLVM](https://github.com/llvm/llvm-project) 49af6502.\n\n2. `git checkout` LLVM at this revision.  Optionally, make additional\n   modifications to LLVM.\n\n3. [Build LLVM](https://llvm.org/docs/CMake.html).  For example, you might run\n\n       $ cd $HOME/llvm-project  # your clone of LLVM.\n       $ mkdir build\n       $ cd build\n       $ cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON ../llvm -DLLVM_ENABLE_PROJECTS=\"mlir;llvm\" -DLLVM_TARGETS_TO_BUILD=\"host;NVPTX;AMDGPU\"\n       $ ninja\n\n4. Grab a snack, this will take a while.\n\n5. Build Triton as above, but set the following environment variables.\n\n       # Modify as appropriate to point to your LLVM build.\n       $ export LLVM_BUILD_DIR=$HOME/llvm-project/build\n\n       $ cd <triton install>\n       $ LLVM_INCLUDE_DIRS=$LLVM_BUILD_DIR/include \\\n         LLVM_LIBRARY_DIR=$LLVM_BUILD_DIR/lib \\\n         LLVM_SYSPATH=$LLVM_BUILD_DIR \\\n         pip install -e python\n\n# Tips for building\n\n- Set `TRITON_BUILD_WITH_CLANG_LLD=true` as an environment variable to use clang\n  and lld.  lld in particular results in faster builds.\n\n- Set `TRITON_BUILD_WITH_CCACHE=true` to build with ccache.\n\n- Set `TRITON_HOME=/some/path` to change the location of the `.triton`\n  directory where Triton's cache is located and downloads are stored\n  during the build. By default, this is the user's home directory. It\n  can be changed anytime.\n\n- Pass `--no-build-isolation` to `pip install` to make nop builds faster.\n  Without this, every invocation of `pip install` uses a different symlink to\n  cmake, and this forces ninja to rebuild most of the `.a` files.\n\n- vscode intellisense has some difficulty figuring out how to build Triton's C++\n  (probably because, in our build, users don't invoke cmake directly, but\n  instead use setup.py).  Teach vscode how to compile Triton as follows.\n\n    - Do a local build. Run command `pip install -e python`\n    - Get the full path to the `compile_commands.json` file produced by the build:\n      `find python/build -name 'compile_commands.json' | xargs readlink -f`.\n      You might get a full path similar to `/Users/{username}/triton/python/build/cmake.macosx-11.1-arm64-cpython-3.12/compile_commands.json`\n    - In vscode, install the\n      [C/C++\n      extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools),\n      then open the command palette (`Shift + Command + P` on Mac, or `Shift +\n      Ctrl + P` on Windows/Linux) and open `C/C++: Edit Configurations (UI)`.\n    - Open \"Advanced Settings\" and paste the full path to\n      `compile_commands.json` into the \"Compile Commands\" textbox.\n\n# Running tests\n\nThere currently isn't a turnkey way to run all the Triton tests, but you can\nfollow the following recipe.\n\n```shell\n# One-time setup.  Note this will reinstall local Triton because torch\n# overwrites it with the public version.\n$ make dev-install\n\n# To run all tests (requires a GPU)\n$ make test\n\n# Or, to run tests without a gpu\n$ make test-cpp test-lit\n```\n\n# Tips for hacking\n\nFor detailed instructions on how to debug Triton's frontend, please refer to this [tutorial](https://triton-lang.org/main/programming-guide/chapter-3/debugging.html). The following includes additional tips for hacking on Triton's backend.\n\n**Helpful environment variables**\n\n- `MLIR_ENABLE_DUMP=1` dumps the IR before every MLIR pass Triton runs, for all\n   kernels. Use `MLIR_ENABLE_DUMP=kernelName` to dump for a specific kernel only.\n  - Triton cache can interfere with the dump. In cases where `MLIR_ENABLE_DUMP=1` does not work, try cleaning your triton cache: `rm -r ~/.triton/cache/*`\n- `MLIR_DUMP_PATH` specifies where `MLIR_ENABLE_DUMP` will dump to. If unset will dump to stderr.\n- `LLVM_IR_ENABLE_DUMP=1` dumps the IR before every pass run over the LLVM IR.\n- `TRITON_REPRODUCER_PATH=<reproducer_path>` will generate an MLIR reproducer file\n  at `<reproducer_path>` before each MLIR compiler stage. If any of the stages fail,\n  `<reproducer_path>` will be a local MLIR reproducer captured right before the failing pass.\n- `TRITON_INTERPRET=1` uses the Triton interpreter instead of running on the\n  GPU.  You can insert Python breakpoints in your kernel code!\n- `TRITON_ENABLE_LLVM_DEBUG=1` passes `-debug` to LLVM, printing a lot of\n  debugging information to stdout.  If this is too noisy, run with just\n  `TRITON_LLVM_DEBUG_ONLY` instead to limit the output.\n\n  An alternative way to reduce output noisiness is running with\n  `LLVM_IR_ENABLE_DUMP=1`, extract the IR before the LLVM pass of interest, and\n  then run LLVM's `opt` standalone, perhaps passing `-debug-only=foo` on the\n  command line.\n- `TRITON_LLVM_DEBUG_ONLY=<comma-separated>` is the equivalent of LLVM's\n  `-debug-only` command-line option. This limits the LLVM debug output to\n  specific pass or component names (which are specified using `#define\n  DEBUG_TYPE` throughout LLVM and Triton) in order to allow the debug output to\n  be less noisy. `TRITON_LLVM_DEBUG_ONLY` allows for one or more comma\n  separated values to be specified (eg\n  `TRITON_LLVM_DEBUG_ONLY=\"tritongpu-remove-layout-conversions\"` or\n  `TRITON_LLVM_DEBUG_ONLY=\"tritongpu-remove-layout-conversions,regalloc\"`).\n- `TRITON_ENABLE_ASAN=1` invokes the LLVM address sanitizer for\n  memory leak and out of bounds access detection. Currently only supported on the AMD\n  backend. This must be run using the ASAN libraries documented [here](https://rocm.docs.amd.com/projects/llvm-project/en/latest/conceptual/using-gpu-sanitizer.html).\n\n  When enabling the address sanitizer it is recommended to disable various memory caching strategies\n  both within the ROCm stack and PyTorch. This will give the address sanitizer the best chance at finding the\n  memory fault where it originates. See this [test](https://github.com/triton-lang/triton/blob/main/third_party/amd/python/test/test_address_sanitizer.py) for more details.\n\n- `USE_IR_LOC={ttir,ttgir}` reparses the IR such that the location information\n  will be the line number of the IR file with that particular extension,\n  instead of line number of the python file. This can provide a direct mapping\n  from the IR to llir/ptx. When used with performance tools, it can provide a\n  breakdown on IR instructions.\n- `TRITON_PRINT_AUTOTUNING=1` prints out the best autotuning config and total time\n  spent for each kernel after autotuning is complete.\n- `DISABLE_LLVM_OPT` will disable llvm optimizations for make_llir and make_ptx\n  if its value is true when parsing as Bool. Otherwise, it will be parsed as a list\n  of flags to disable llvm optimizations. One usage case is\n  `DISABLE_LLVM_OPT=\"disable-lsr\"`\n  Loop strength reduction is known to cause up to 10% performance changes for\n  certain kernels with register pressure.\n- `TRITON_ALWAYS_COMPILE=1` forces to compile kernels regardless of cache hit.\n- `MLIR_ENABLE_TIMING` dumps the timing information for each MLIR pass.\n- `LLVM_ENABLE_TIMING` dumps the timing information for each LLVM pass.\n- `TRITON_DEFAULT_FP_FUSION` overrides the default behavior of allowing fp fusion (mul+add->fma).\n- `MLIR_ENABLE_DIAGNOSTICS` enables dumping the stack trace and the related IR operation of diagnostics (e.g., errors and warnings).\n- `MLIR_ENABLE_REMARK` enables the performance warnings that are emitted as remarks.\n- `TRITON_KERNEL_DUMP` enables the dumping of the IR from each compilation stage and the final ptx/amdgcn.\n- `TRITON_DUMP_DIR` specifies the directory to save the dumped IR and ptx/amdgcn when `TRITON_KERNEL_DUMP` is set to 1.\n- `TRITON_KERNEL_OVERRIDE` enables the override of the compiled kernel with a user-specified IR/ptx/amdgcn at the beginning of each compilation stage.\n- `TRITON_OVERRIDE_DIR` specifies the directory from which to load the IR/ptx/amdgcn files when `TRITON_KERNEL_OVERRIDE` is set to 1.\n\n**Kernel Override Steps**\n\n```bash\nexport TRITON_ALWAYS_COMPILE=1\nexport TRITON_KERNEL_DUMP=1\nexport TRITON_DUMP_DIR=<dump_dir>\nexport TRITON_KERNEL_OVERRIDE=1\nexport TRITON_OVERRIDE_DIR=<override_dir>\n# Step 1: Run the kernel once to dump kernel's IRs and ptx/amdgcn in $TRITON_DUMP_DIR\n# Step 2: Copy $TRITON_DUMP_DIR/<kernel_hash> to $TRITON_OVERRIDE_DIR\n# Step 3: Delete the stages that you do not want to override and modify the stage you do want to override\n# Step 4: Run the kernel again to see the overridden result\n```\n\n\n# Changelog\n\nVersion 2.0 is out! New features include:\n\n- Many, many bug fixes\n- Performance improvements\n- Backend rewritten to use MLIR\n- Support for kernels that contain back-to-back matmuls (e.g., flash attention)\n\n# Contributing\n\nCommunity contributions are more than welcome, whether it be to fix bugs or to add new features at [github](https://github.com/triton-lang/triton/). For more detailed instructions, please visit our [contributor's guide](CONTRIBUTING.md).\n\n# Compatibility\n\nSupported Platforms:\n\n- Linux\n\nSupported Hardware:\n\n- NVIDIA GPUs (Compute Capability 8.0+)\n- AMD GPUs (ROCm 6.2+)\n- Under development: CPUs\n",
        "releases": []
    }
}