{
    "https://api.github.com/repos/xmartlabs/XLPagerTabStrip": {
        "forks": 1326,
        "watchers": 6991,
        "stars": 6991,
        "languages": {
            "Swift": 157834,
            "Objective-C": 20900,
            "Ruby": 790
        },
        "commits": [
            "2023-07-26T18:11:37Z",
            "2023-03-17T21:21:09Z",
            "2023-03-17T21:19:53Z",
            "2023-03-17T21:16:00Z",
            "2023-02-06T12:54:41Z",
            "2023-02-06T12:44:45Z",
            "2022-09-01T16:09:13Z",
            "2022-07-15T12:38:40Z",
            "2021-08-10T13:59:28Z",
            "2021-08-10T13:58:05Z",
            "2021-08-05T16:50:14Z",
            "2021-08-05T16:49:13Z",
            "2019-11-13T13:24:28Z",
            "2019-04-02T18:58:25Z",
            "2019-04-02T18:57:33Z",
            "2019-04-02T18:45:06Z",
            "2019-04-01T19:51:50Z",
            "2019-04-01T19:49:22Z",
            "2019-04-01T18:01:30Z",
            "2019-03-29T08:08:30Z",
            "2019-03-29T08:06:28Z",
            "2019-03-29T08:04:17Z",
            "2019-03-29T08:00:06Z",
            "2018-12-21T20:48:58Z",
            "2018-12-21T20:46:15Z",
            "2018-12-21T15:27:14Z",
            "2018-12-21T15:13:05Z",
            "2018-12-20T21:29:10Z",
            "2018-12-20T20:06:45Z",
            "2018-12-20T21:27:57Z"
        ],
        "creation_date": "2014-12-20T12:05:22Z",
        "contributors": 30,
        "topics": [
            "carthage",
            "cocoapods",
            "ios-libraries",
            "ios-ui",
            "pager-controller",
            "swift",
            "swift-library"
        ],
        "subscribers": 129,
        "readme": "![XLPagerTabStripView](https://raw.githubusercontent.com/xmartlabs/XLPagerTabStrip/master/XLPagerTabTrip.png)\n\n<p align=\"left\">\n<a href=\"https://travis-ci.org/xmartlabs/XLPagerTabStrip\"><img src=\"https://travis-ci.org/xmartlabs/XLPagerTabStrip.svg?branch=master\" alt=\"Build status\" /></a>\n<img src=\"https://img.shields.io/badge/platform-iOS-blue.svg?style=flat\" alt=\"Platform iOS\" />\n<a href=\"https://developer.apple.com/swift\"><img src=\"https://img.shields.io/badge/swift5-compatible-4BC51D.svg?style=flat\" alt=\"Swift 5 compatible\" /></a>\n<a href=\"https://github.com/Carthage/Carthage\"><img src=\"https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat\" alt=\"Carthage compatible\" /></a>\n<a href=\"https://cocoapods.org/pods/XLPagerTabStrip\"><img src=\"https://img.shields.io/cocoapods/v/XLPagerTabStrip.svg\" alt=\"CocoaPods compatible\" /></a>\n<a href=\"https://raw.githubusercontent.com/xmartlabs/XLPagerTabStrip/master/LICENSE\"><img src=\"http://img.shields.io/badge/license-MIT-blue.svg?style=flat\" alt=\"License: MIT\" />\n</a>\n<!-- <a href=\"https://codebeat.co/projects/github-com-xmartlabs-xlpagertabstrip\"><img alt=\"codebeat badge\" src=\"https://codebeat.co/badges/f32c9ad3-0aa1-4b40-a632-9421211bd39e\" /></a> -->\n\n</p>\n\nMade with \u2764\ufe0f by [XMARTLABS](http://xmartlabs.com).\n\nAndroid [PagerTabStrip](http://developer.android.com/reference/android/support/v4/view/PagerTabStrip.html) for iOS!\n\n\ud83d\udc49 Looking for a SwiftUI version? Check out [PagerTabStripView](https://github.com/xmartlabs/PagerTabStripView), it's fully written in pure SwiftUI. \ud83d\udc48\n\n**XLPagerTabStrip** is a *Container View Controller* that allows us to switch easily among a collection of view controllers. Pan gesture can be used to move on to next or previous view controller. It shows a interactive indicator of the current, previous, next child view controllers.\n\n<table>\n  <tr>\n    <th><img src=\"Example/instagram.gif\" width=\"250\"/></th>\n    <th><img src=\"Example/spotify.gif\" width=\"250\"/></th>\n    <th><img src=\"Example/youtube.gif\" width=\"250\"/></th>\n    <th><img src=\"Example/pagerTabStripTypes.gif\" width=\"250\"/></th>\n  </tr>\n</table>\n\n## Getting involved\n\n* If you **want to contribute** please feel free to **submit pull requests**.\n* If you **have a feature request** please **open an issue**.\n* If you **found a bug** or **need help** please **check older issues, [FAQ](#faq) and threads on [StackOverflow](http://stackoverflow.com/questions/tagged/XLPagerTabStrip) (Tag 'XLPagerTabStrip') before submitting an issue**.\n\n**Before contribute check the [CONTRIBUTING](CONTRIBUTING.md) file for more info.**\n\nIf you use **XLPagerTabStrip** in your app we would love to hear about it! Drop us a line on [twitter](https://twitter.com/xmartlabs).\n\n## Pager Types\n\nThe library provides 4 different ways to show the view controllers.\n\n### Button Bar\n\nThis is likely the most common pager type. It's used by many well-known apps such as instagram, youtube, skype, and many others.\n\n<img src=\"Example/barButton.gif\" width=\"250\"/>\n\n### Bar\n\nThis mode doesn't show a title neither an image. It only shows a bar that indicates the current view controller.\n\n<img src=\"Example/bar.gif\" width=\"250\"/>\n\n### Twitter\n\nA long time ago, the twitter app made use of this type of pager in the app main screen.\n\n<img src=\"Example/twitter.gif\" width=\"250\"/>\n\n### Segmented\n\nThis mode uses a `UISegmentedControl` to indicate which view controller is being displayed.\n\n<img src=\"Example/segmented.gif\" width=\"250\"/>\n\n## Usage\n\nBasically, we just need to provide the list of child view controllers to show, and these view controllers should provide the information (title or image) that will be shown in the associated indicator.\n\nLet's see the steps to do this:\n\n##### Choose which type of pager we want to create\n\nFirst, we must choose the type of pager we want to create.  Depending on our choice, we will have to create a view controller that extends from one of the following controllers: `TwitterPagerTabStripViewController`, `ButtonBarPagerTabStripViewController`, `SegmentedPagerTabStripViewController`, `BarPagerTabStripViewController`.\n\n> All these built-in pager controllers extend from the base class `PagerTabStripViewController`.\n> You can also make your custom pager controller by extending directly from `PagerTabStripViewController` in the event that no pager menu type fits your needs.\n\n```swift\nimport XLPagerTabStrip\n\nclass MyPagerTabStripName: ButtonBarPagerTabStripViewController {\n  ..\n}\n```\n\n##### Connect outlets and add layout constraints\n\nWe strongly recommend using IB to set up our page controller views.\n\nDrag a `UIViewController` into the storyboard and set up its class with your pager controller (`MyPagerTabStripName`).\nDrag a `UIScrollView` into your view controller view and connect `PagerTabStripViewController` `containerView` outlet with the scroll view.\n\nDepending on which type of paging view controller you are working with you may have to connect more outlets.\n\nFor `BarPagerTabStripViewController`, we should connect `barView` outlet. barView type is UIView. `ButtonBarPagerTabStripViewController` requires us to connect `buttonBarView` outlet. `buttonBarView` type is `ButtonBarView` which extends from `UICollectionView`. `SegmentedPagerTabStripViewController` has a `segmentedControl` outlet; if the outlet is not connected the library try to set up the navigationItem `titleView` property using a `UISegmentedControl`. `TwitterPagerTabStripViewController` doesn't require us to connect any additional outlet.\n\n> The example project contains a example for each pager controller type and we can look into it to see how views were added and how outlets were connected.\n\n##### Provide the view controllers that will appear embedded into the PagerTabStrip view controller\n\nYou can provide the view controllers by overriding `func viewControllers(for: pagerTabStripController: PagerTabStripViewController) -> [UIViewController]` method.\n\n```swift\noverride public func viewControllers(for pagerTabStripController: PagerTabStripViewController) -> [UIViewController] {\n  return [MyEmbeddedViewController(), MySecondEmbeddedViewController()]\n}\n```\n\n> The method above is the only method declared in `PagerTabStripDataSource` protocol. We don't need to explicitly conform to it since base pager class already does it.\n\n\n##### Provide information to show in each indicator\n\nEvery UIViewController that will appear within the PagerTabStrip needs to provide either a title or an image.\nIn order to do so they should conform to `IndicatorInfoProvider` by implementing `func indicatorInfo(for pagerTabStripController: PagerTabStripViewController) -> IndicatorInfo`\n which provides the information required to show the PagerTabStrip menu (indicator) associated with the view controller.\n\n```swift\nclass MyEmbeddedViewController: UITableViewController, IndicatorInfoProvider {\n\n  func indicatorInfo(for pagerTabStripController: PagerTabStripViewController) -> IndicatorInfo {\n    return IndicatorInfo(title: \"My Child title\")\n  }\n}\n```\n\n**For a detailed step-by-step guide about how to use the library, please check out this community [blog post](https://medium.com/michaeladeyeri/how-to-implement-android-like-tab-layouts-in-ios-using-swift-3-578516c3aa9).**\n\nThat's it! We're done! \ud83c\udf7b\ud83c\udf7b\n\n\n## Customization\n\n##### Pager Behaviour\n\nThe pager indicator can be updated progressive as we swipe or at once in the middle of the transition between the view controllers.\nBy setting up `pagerBehaviour` property we can choose how the indicator should be updated.\n\n```swift\npublic var pagerBehaviour: PagerTabStripBehaviour\n```\n\n```swift\npublic enum PagerTabStripBehaviour {\n    case common(skipIntermediteViewControllers: Bool)\n    case progressive(skipIntermediteViewControllers: Bool, elasticIndicatorLimit: Bool)\n}\n```\n\nDefault Values:\n```swift\n// Twitter Type\nPagerTabStripBehaviour.common(skipIntermediateViewControllers: true)\n// Segmented Type\nPagerTabStripBehaviour.common(skipIntermediateViewControllers: true)\n// Bar Type\nPagerTabStripBehaviour.progressive(skipIntermediateViewControllers: true, elasticIndicatorLimit: true)\n// ButtonBar Type\nPagerTabStripBehaviour.progressive(skipIntermediateViewControllers: true, elasticIndicatorLimit: true)\n```\n\nAs you might have noticed, `common` and `progressive` enumeration cases have `skipIntermediateViewControllers` and `elasticIndicatorLimit` associated values.\n\n`skipIntermediateViewControllers` allows us to skip intermediate view controllers when a tab indicator is tapped.\n\n`elasticIndicatorLimit` allows us to tension the indicator when we reach a limit, I mean when we try to move forward from last indicator or move back from first indicator.\n\n##### PagerTabStripDelegate & PagerTabStripIsProgressiveDelegate\n\nNormally we don't need to implement these protocols because each pager type already conforms to it in order to properly update its indicator. However, there may be some scenarios when overriding a method may come in handy.\n\n```swift\npublic protocol PagerTabStripDelegate: class {\n\n    func updateIndicator(for viewController: PagerTabStripViewController, fromIndex: Int, toIndex: Int)\n}\n\npublic protocol PagerTabStripIsProgressiveDelegate : PagerTabStripDelegate {\n\n    func updateIndicator(for viewController: PagerTabStripViewController, fromIndex: Int, toIndex: Int, withProgressPercentage progressPercentage: CGFloat, indexWasChanged: Bool)\n}\n```\n\n> Again, the method invoked by the library depends on the `pagerBehaviour` value.\n\n\n\n\n### ButtonBar Customization\n\n```swift\n\nsettings.style.buttonBarBackgroundColor: UIColor?\n// buttonBar minimumInteritemSpacing value, note that button bar extends from UICollectionView\nsettings.style.buttonBarMinimumInteritemSpacing: CGFloat?\n// buttonBar minimumLineSpacing value\nsettings.style.buttonBarMinimumLineSpacing: CGFloat?\n// buttonBar flow layout left content inset value\nsettings.style.buttonBarLeftContentInset: CGFloat?\n// buttonBar flow layout right content inset value\nsettings.style.buttonBarRightContentInset: CGFloat?\n\n// selected bar view is created programmatically so it's important to set up the following 2 properties properly\nsettings.style.selectedBarBackgroundColor = UIColor.black\nsettings.style.selectedBarHeight: CGFloat = 5\n\n// each buttonBar item is a UICollectionView cell of type ButtonBarViewCell\nsettings.style.buttonBarItemBackgroundColor: UIColor?\nsettings.style.buttonBarItemFont = UIFont.systemFont(ofSize: 18)\n// helps to determine the cell width, it represent the space before and after the title label\nsettings.style.buttonBarItemLeftRightMargin: CGFloat = 8\nsettings.style.buttonBarItemTitleColor: UIColor?\n// in case the barView items do not fill the screen width this property stretch the cells to fill the screen\nsettings.style.buttonBarItemsShouldFillAvailableWidth = true\n// only used if button bar is created programmatically and not using storyboards or nib files as recommended.\npublic var buttonBarHeight: CGFloat?\n```\n\n**Important:** Settings should be called before `viewDidLoad` is called.\n```swift\noverride func viewDidLoad() {\n   self.settings.style.selectedBarHeight = 2\n   self.settings.style.selectedBarBackgroundColor = UIColor.white\n\n   super.viewDidLoad()\n}\n```\n\n#####  Update cells when selected indicator changes\n\nWe may need to update the indicator cell when the displayed view controller changes. The following function properties help to accomplish that. Depending on our pager `pagerBehaviour` value we will have to set up `changeCurrentIndex` or `changeCurrentIndexProgressive`.\n\n```swift\npublic var changeCurrentIndex: ((oldCell: ButtonBarViewCell?, newCell: ButtonBarViewCell?, animated: Bool) -> Void)?\npublic var changeCurrentIndexProgressive: ((oldCell: ButtonBarViewCell?, newCell: ButtonBarViewCell?, progressPercentage: CGFloat, changeCurrentIndex: Bool, animated: Bool) -> Void)?\n```\n\nLet's see an example:\n\n```swift\nchangeCurrentIndexProgressive = { (oldCell: ButtonBarViewCell?, newCell: ButtonBarViewCell?, progressPercentage: CGFloat, changeCurrentIndex: Bool, animated: Bool) -> Void in\n    guard changeCurrentIndex == true else { return }\n\n    oldCell?.label.textColor = UIColor(white: 1, alpha: 0.6)\n    newCell?.label.textColor = UIColor.white\n\n    if animated {\n        UIView.animate(withDuration: 0.1, animations: { () -> Void in\n            newCell?.transform = CGAffineTransform(scaleX: 1.0, y: 1.0)\n            oldCell?.transform = CGAffineTransform(scaleX: 0.8, y: 0.8)\n        })\n    }\n    else {\n        newCell?.transform = CGAffineTransform(scaleX: 1.0, y: 1.0)\n        oldCell?.transform = CGAffineTransform(scaleX: 0.8, y: 0.8)\n    }\n}\n```\n\n### Bar Type Customization\n\n```swift\nsettings.style.barBackgroundColor: UIColor?\nsettings.style.selectedBarBackgroundColor: UIColor?\n// barHeight is only set up when the bar is created programmatically and not using storyboards or xib files as recommended.\nsettings.style.barHeight: CGFloat = 5\n```\n\n### Twitter Type Customization\n\n```swift\nsettings.style.dotColor = UIColor(white: 1, alpha: 0.4)\nsettings.style.selectedDotColor = UIColor.white\nsettings.style.portraitTitleFont = UIFont.systemFont(ofSize: 18)\nsettings.style.landscapeTitleFont = UIFont.systemFont(ofSize: 15)\nsettings.style.titleColor = UIColor.white\n```\n\n### Segmented Type Customization\n\n```swift\nsettings.style.segmentedControlColor: UIColor?\n```\n\n\n\n## Requirements\n\n* iOS 9.3+\n* Xcode 10.2+\n\n## Examples\n\nFollow these 3 steps to run Example project: Clone XLPagerTabStrip repository, open XLPagerTabStrip workspace and run the *Example* project.\n\n## Installation\n\n### CocoaPods\n\n[CocoaPods](https://cocoapods.org/) is a dependency manager for Cocoa projects.\n\nTo install XLPagerTabStrip, simply add the following line to your Podfile:\n\n```ruby\npod 'XLPagerTabStrip', '~> 9.0'\n```\n\n### Carthage\n\n[Carthage](https://github.com/Carthage/Carthage) is a simple, decentralized dependency manager for Cocoa.\n\nTo install XLPagerTabStrip, simply add the following line to your Cartfile:\n\n```ogdl\ngithub \"xmartlabs/XLPagerTabStrip\" ~> 9.0\n```\n\n### SPM\n\n- File > Swift Packages > Add Package Dependency\n- Add `https://github.com/xmartlabs/XLPagerTabStrip.git`\n- Select \"Up to Next Major\" with \"9.0.0\"\n\n## FAQ\n\n#### How to change the visible child view controller programmatically\n\n`PagerTabStripViewController` provides the following methods to programmatically change the visible child view controller:\n\n```swift\nfunc moveToViewController(at index: Int)\nfunc moveToViewController(at index: Int, animated: Bool)\nfunc moveTo(viewController: UIViewController)\nfunc moveTo(viewController: UIViewController, animated: Bool)\n```\n\n\n#### How to migrate from Swift 2 to Swift 3 <a name=\"migrate\"></a>\n\nCheck out [our migration guide](https://github.com/xmartlabs/XLPagerTabStrip/blob/master/Migration.md)\n\n## Author\n\n* [Martin Barreto](https://github.com/mtnBarreto) ([@mtnBarreto](https://twitter.com/mtnBarreto))\n\n## Change Log\n\nThis can be found in the [CHANGELOG.md](CHANGELOG.md) file.\n",
        "releases": [
            {
                "name": "9.1.0",
                "date": "2023-07-27T11:37:57Z"
            },
            {
                "name": "9.0.0",
                "date": "2019-04-02T18:59:42Z"
            },
            {
                "name": "8.1.1",
                "date": "2018-12-21T20:49:37Z"
            },
            {
                "name": "8.1.0",
                "date": "2018-10-16T13:41:12Z"
            },
            {
                "name": "8.0.1",
                "date": "2018-03-28T20:53:23Z"
            },
            {
                "name": "8.0.0",
                "date": "2017-10-05T17:21:56Z"
            },
            {
                "name": "7.0.0",
                "date": "2017-01-27T16:49:10Z"
            },
            {
                "name": "6.0.0",
                "date": "2016-09-16T20:59:54Z"
            },
            {
                "name": "5.1.0",
                "date": "2016-09-14T17:44:07Z"
            },
            {
                "name": "5.0.0",
                "date": "2016-03-23T01:30:47Z"
            },
            {
                "name": "4.0.2",
                "date": "2016-03-15T14:52:41Z"
            },
            {
                "name": "",
                "date": "2016-02-15T22:18:22Z"
            },
            {
                "name": "Migration to Swift",
                "date": "2016-01-30T04:25:03Z"
            },
            {
                "name": "",
                "date": "2016-01-11T13:32:07Z"
            },
            {
                "name": "",
                "date": "2015-08-18T23:24:04Z"
            }
        ]
    }
}