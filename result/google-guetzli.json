{
    "https://api.github.com/repos/google/guetzli": {
        "forks": 978,
        "watchers": 12930,
        "stars": 12930,
        "languages": {
            "C++": 252203,
            "Makefile": 15213,
            "PHP": 4360,
            "Shell": 3604,
            "Python": 2678,
            "Lua": 1475
        },
        "commits": [
            "2019-10-25T12:45:01Z",
            "2019-10-23T17:53:11Z",
            "2019-10-22T21:04:03Z",
            "2019-10-22T20:36:35Z",
            "2018-06-22T20:54:55Z",
            "2017-08-30T08:54:08Z",
            "2017-08-29T23:50:19Z",
            "2017-08-29T08:34:07Z",
            "2017-08-29T08:30:29Z",
            "2017-06-02T16:37:05Z",
            "2017-06-02T14:56:26Z",
            "2017-06-02T14:39:27Z",
            "2017-06-02T14:17:02Z",
            "2017-04-21T12:15:56Z",
            "2017-04-03T13:54:38Z",
            "2017-04-03T13:54:06Z",
            "2017-04-03T13:29:07Z",
            "2017-04-01T06:32:57Z",
            "2017-04-03T11:53:09Z",
            "2017-03-30T07:32:01Z",
            "2017-03-31T15:38:36Z",
            "2017-03-31T12:27:01Z",
            "2017-03-31T12:13:41Z",
            "2017-03-31T10:27:05Z",
            "2017-03-31T10:07:37Z",
            "2017-03-31T09:04:28Z",
            "2017-03-30T12:55:36Z",
            "2017-03-30T12:13:49Z",
            "2017-03-30T11:56:05Z",
            "2017-03-18T09:04:13Z"
        ],
        "creation_date": "2016-10-21T15:13:18Z",
        "contributors": 17,
        "topics": [
            "jpeg-encoder"
        ],
        "subscribers": 477,
        "readme": "<p align=\"center\"><img src=\"https://cloud.githubusercontent.com/assets/203457/24553916/1f3f88b6-162c-11e7-990a-731b2560f15c.png\" alt=\"Guetzli\" width=\"64\"></p>\n\n# Introduction\n\nGuetzli is a JPEG encoder that aims for excellent compression density at high\nvisual quality. Guetzli-generated images are typically 20-30% smaller than\nimages of equivalent quality generated by libjpeg. Guetzli generates only\nsequential (nonprogressive) JPEGs due to faster decompression speeds they offer.\n\n[![Build Status](https://travis-ci.org/google/guetzli.svg?branch=master)](https://travis-ci.org/google/guetzli)\n\n# Building\n\n## On POSIX systems\n\n1.  Get a copy of the source code, either by cloning this repository, or by\n    downloading an\n    [archive](https://github.com/google/guetzli/archive/master.zip) and\n    unpacking it.\n2.  Install [libpng](http://www.libpng.org/pub/png/libpng.html).\n    If using your operating system\n    package manager, install development versions of the packages if the\n    distinction exists.\n    *   On Ubuntu, do `apt-get install libpng-dev`.\n    *   On Fedora, do `dnf install libpng-devel`. \n    *   On Arch Linux, do `pacman -S libpng`.\n    *   On Alpine Linux, do `apk add libpng-dev`.\n3.  Run `make` and expect the binary to be created in `bin/Release/guetzli`.\n\n## On Windows\n\n1.  Get a copy of the source code, either by cloning this repository, or by\n    downloading an\n    [archive](https://github.com/google/guetzli/archive/master.zip) and\n    unpacking it.\n2.  Install [Visual Studio 2015](https://www.visualstudio.com) and\n    [vcpkg](https://github.com/Microsoft/vcpkg)\n3.  Install `libpng` using vcpkg: `.\\vcpkg install libpng`.\n4.  Cause the installed packages to be available system-wide: `.\\vcpkg integrate\n    install`. If you prefer not to do this, refer to [vcpkg's\n    documentation](https://github.com/Microsoft/vcpkg/blob/master/docs/EXAMPLES.md#example-1-2).\n5.  Open the Visual Studio project enclosed in the repository and build it.\n\n## On macOS\n\nTo install using [Homebrew](https://brew.sh/):\n1. Install [Homebrew](https://brew.sh/)\n2. `brew install guetzli`\n\nTo install using the repository:\n1.  Get a copy of the source code, either by cloning this repository, or by\n    downloading an\n    [archive](https://github.com/google/guetzli/archive/master.zip) and\n    unpacking it.\n2.  Install [Homebrew](https://brew.sh/) or [MacPorts](https://www.macports.org/)\n3.  Install `libpng`\n    *   Using [Homebrew](https://brew.sh/): `brew install libpng`.\n    *   Using [MacPorts](https://www.macports.org/): `port install libpng` (You may need to use `sudo`).\n4.  Run the following command to build the binary in `bin/Release/guetzli`.\n    *   If you installed using [Homebrew](https://brew.sh/) simply use `make`\n    *   If you installed using [MacPorts](https://www.macports.org/) use `CFLAGS='-I/opt/local/include' LDFLAGS='-L/opt/local/lib' make`\n\n## With Bazel\n\nThere's also a [Bazel](https://bazel.build) build configuration provided. If you\nhave Bazel installed, you can also compile Guetzli by running `bazel build -c opt //:guetzli`.\n\n# Using\n\n**Note:** Guetzli uses a large amount of memory. You should provide 300MB of\nmemory per 1MPix of the input image.\n\n**Note:** Guetzli uses a significant amount of CPU time. You should count on\nusing about 1 minute of CPU per 1 MPix of input image.\n\n**Note:** Guetzli assumes that input is in **sRGB profile** with a **gamma of\n2.2**. Guetzli will ignore any color-profile metadata in the image.\n\nTo try out Guetzli you need to [build](#building) or\n[download](https://github.com/google/guetzli/releases) the Guetzli binary. The\nbinary reads a PNG or JPEG image and creates an optimized JPEG image:\n\n```bash\nguetzli [--quality Q] [--verbose] original.png output.jpg\nguetzli [--quality Q] [--verbose] original.jpg output.jpg\n```\n\nNote that Guetzli is designed to work on high quality images. You should always\nprefer providing uncompressed input images (e.g. that haven't been already\ncompressed with any JPEG encoders, including Guetzli). While it will work on other\nimages too, results will be poorer. You can try compressing an enclosed [sample\nhigh quality\nimage](https://github.com/google/guetzli/releases/download/v0/bees.png).\n\nYou can pass a `--quality Q` parameter to set quality in units equivalent to\nlibjpeg quality. You can also pass a `--verbose` flag to see a trace of encoding\nattempts made.\n\nPlease note that JPEG images do not support alpha channel (transparency). If the\ninput is a PNG with an alpha channel, it will be overlaid on black background\nbefore encoding.\n",
        "releases": [
            {
                "name": "Release",
                "date": "2017-03-21T18:15:58Z"
            },
            {
                "name": "Release",
                "date": "2017-03-15T15:06:29Z"
            },
            {
                "name": "Release",
                "date": "2017-01-17T17:15:22Z"
            },
            {
                "name": "Release",
                "date": "2016-12-21T16:57:45Z"
            },
            {
                "name": "Initial release",
                "date": "2016-10-24T11:53:17Z"
            }
        ]
    }
}