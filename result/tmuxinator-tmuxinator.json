{
    "https://api.github.com/repos/tmuxinator/tmuxinator": {
        "forks": 628,
        "watchers": 12863,
        "stars": 12863,
        "languages": {
            "Ruby": 131878,
            "HTML": 4543,
            "Shell": 2539
        },
        "commits": [
            "2024-11-19T13:43:47Z",
            "2024-10-18T21:50:19Z",
            "2024-10-24T00:35:20Z",
            "2024-10-05T11:03:03Z",
            "2024-09-29T14:13:34Z",
            "2024-07-15T23:23:39Z",
            "2024-09-27T19:31:34Z",
            "2024-09-27T11:36:48Z",
            "2024-07-05T09:29:43Z",
            "2024-06-17T12:14:47Z",
            "2024-06-17T11:50:01Z",
            "2024-06-07T23:18:11Z",
            "2024-06-08T14:54:30Z",
            "2024-06-08T15:04:19Z",
            "2024-06-04T00:49:55Z",
            "2024-05-23T10:33:29Z",
            "2024-05-02T23:40:22Z",
            "2024-04-27T18:20:32Z",
            "2024-04-18T10:27:50Z",
            "2024-03-31T19:32:58Z",
            "2024-03-31T18:49:34Z",
            "2024-03-30T22:01:36Z",
            "2024-03-30T16:29:52Z",
            "2024-03-30T16:13:30Z",
            "2024-03-30T16:05:47Z",
            "2024-03-30T21:59:34Z",
            "2024-03-30T15:27:58Z",
            "2024-03-16T12:13:21Z",
            "2024-03-16T11:59:10Z",
            "2024-03-15T21:12:47Z"
        ],
        "creation_date": "2010-12-10T21:49:50Z",
        "contributors": 30,
        "topics": [],
        "subscribers": 147,
        "readme": "# Tmuxinator\n\n[![Gem Version](https://badge.fury.io/rb/tmuxinator.svg)](http://badge.fury.io/rb/tmuxinator) [![Integration Tests](https://github.com/tmuxinator/tmuxinator/actions/workflows/ci.yaml/badge.svg)](https://github.com/tmuxinator/tmuxinator/actions/workflows/ci.yaml) [![Coverage Status](https://img.shields.io/coveralls/tmuxinator/tmuxinator.svg)](https://coveralls.io/r/tmuxinator/tmuxinator?branch=master) [![Code Climate](https://codeclimate.com/github/tmuxinator/tmuxinator/badges/gpa.svg)](https://codeclimate.com/github/tmuxinator/tmuxinator) [![Dependency Status](https://gemnasium.com/tmuxinator/tmuxinator.svg)](https://gemnasium.com/tmuxinator/tmuxinator) [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/tmuxinator/tmuxinator?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\nCreate and manage tmux sessions easily.\n\n<table>\n    <tbody>\n        <tr align=\"center\">\n            <td>\n                <img src=\"https://user-images.githubusercontent.com/289949/44366875-1a6cee00-a49c-11e8-9322-76e70df0c88b.gif\" alt=\"Screenshot\" width=\"80%\" />\n            </td>\n        </tr>\n    </tbody>\n</table>\n\n## Installation\n\n### RubyGems\n```\ngem install tmuxinator\n```\n\n### Homebrew\n```\nbrew install tmuxinator\n```\n\nSome users have [reported issues](https://github.com/tmuxinator/tmuxinator/issues/841) when installing via Homebrew, so the RubyGems installation is preferred until these are resolved.\n\ntmuxinator aims to be compatible with [the currently maintained versions of Ruby](https://www.ruby-lang.org/en/downloads/).\n\nSome operating systems may provide an unsupported version of Ruby as their \"system ruby\". In these cases, users should use [RVM](https://rvm.io/) or [rbenv](https://github.com/rbenv/rbenv) to install a supported Ruby version and use that version's `gem` binary to install tmuxinator.\n\n## Editor and Shell\n\ntmuxinator uses your shell's default editor for opening files. If you're not\nsure what that is type:\n\n``` bash\necho $EDITOR\n```\n\nFor me that produces \"vim\". If you want to change your default editor simply\nput a line in ~/.bashrc that changes it. Mine looks like this:\n\n```bash\nexport EDITOR='vim'\n```\n\n## tmux\n\nThe recommended version of tmux to use is 1.8 or later, with the exception of 2.5, which is **not** supported (see [issue 536](https://github.com/tmuxinator/tmuxinator/issues/536) for details). Your mileage may vary for\nearlier versions. Refer to the FAQ for any odd behaviour.\n\n## Completion\n\nYour distribution's package manager may install the completion files in the\nappropriate location for the completion to load automatically on startup. But,\nif you installed tmuxinator via Ruby's `gem`, you'll need to run the following\ncommands to put the completion files where they'll be loaded by your shell.\n\n### bash\n```bash\nwget https://raw.githubusercontent.com/tmuxinator/tmuxinator/master/completion/tmuxinator.bash -O /etc/bash_completion.d/tmuxinator.bash\n```\n### zsh\n```bash\nwget https://raw.githubusercontent.com/tmuxinator/tmuxinator/master/completion/tmuxinator.zsh -O /usr/local/share/zsh/site-functions/_tmuxinator\n```\nNote: ZSH's completion files can be put in other locations in your `$fpath`. Please refer to the [manual](http://zsh.sourceforge.net/Doc/Release/Functions.html) for more details.\n\n### fish\n```bash\nwget https://raw.githubusercontent.com/tmuxinator/tmuxinator/master/completion/tmuxinator.fish -O ~/.config/fish/completions/tmuxinator.fish\n```\n## Usage\n\nA working knowledge of tmux is assumed. You should understand what windows and\npanes are in tmux. If not please consult the [man pages](https://web.archive.org/web/20220308205829/https://man.openbsd.org/OpenBSD-current/man1/tmux.1) for tmux.\n\n### Create a project\n\nCreate or edit your projects with:\n\n```\ntmuxinator new [project]\n```\n\nCreate or edit a local project where the config file will be stored in the\ncurrent working directory (in `.tmuxinator.yml`) instead of the default\nproject configuration file location (e.g. `~/.config/tmuxinator`):\n\n```\ntmuxinator new --local [project]\n```\n\nFor editing you can also use `tmuxinator open [project]`. `new` is aliased to\n`n`,`open` to `o`, and `edit` to `e`. Please note that dots can't be used in project\nnames as tmux uses them internally to delimit between windows and panes.\nYour default editor (`$EDITOR`) is used to open the file.\nIf this is a new project you will see this default config:\n\n```yaml\n# ~/.tmuxinator/sample.yml\n\nname: sample\nroot: ~/\n\n# Optional tmux socket\n# socket_name: foo\n\n# Note that the pre and post options have been deprecated and will be replaced by\n# project hooks.\n\n# Project hooks\n\n# Runs on project start, always\n# on_project_start: command\n\n# Run on project start, the first time\n# on_project_first_start: command\n\n# Run on project start, after the first time\n# on_project_restart: command\n\n# Run on project exit ( detaching from tmux session )\n# on_project_exit: command\n\n# Run on project stop\n# on_project_stop: command\n\n# Runs in each window and pane before window/pane specific commands. Useful for setting up interpreter versions.\n# pre_window: rbenv shell 2.0.0-p247\n\n# Pass command line options to tmux. Useful for specifying a different tmux.conf.\n# tmux_options: -f ~/.tmux.mac.conf\n\n# Change the command to call tmux. This can be used by derivatives/wrappers like byobu.\n# tmux_command: byobu\n\n# Specifies (by name or index) which window will be selected on project startup. If not set, the first window is used.\n# startup_window: editor\n\n# Specifies (by index) which pane of the specified window will be selected on project startup. If not set, the first pane is used.\n# startup_pane: 1\n\n# Controls whether the tmux session should be attached to automatically. Defaults to true.\n# attach: false\n\n# Enables the display of pane titles. For example \"editor\" below. Defaults to false.\n# enable_pane_titles: true\n\n# Configures pane title position. Can be: bottom, top, or \"off\". Note: \"off\" must be provided in quotes to avoid being interpreted as a boolean false. Defaults to top.\n# pane_title_position: bottom\n\n# Configures pane title format. Defaults to \"#{pane_index}: #{pane_title}\".\n# Please see the tmux manpage for details, on valid formats.\n# pane_title_format: \" [ #T ] \"\n\nwindows:\n  - editor:\n      layout: main-vertical\n      # Synchronize all panes of this window, can be enabled before or after the pane commands run.\n      # 'before' represents legacy functionality and will be deprecated in a future release, in favour of 'after'\n      # synchronize: after\n      panes:\n        - editor:\n          - vim\n        - guard\n  - server: bundle exec rails s\n  - logs: tail -f log/development.log\n```\n\n## Windows\n\nThe windows option allows the specification of any number of tmux windows. Each window is denoted by a YAML array entry, followed by a name* and command to be run.\n\n*Users may optionally provide a null YAML value (e.g. `null` or `~`) in place of a named window key, which will cause the window to use its default name (usually the name of their shell).\n\n```yaml\nwindows:\n  - editor: vim\n```\n\n### Window specific root\n\nAn optional root option can be specified per window:\n\n```yaml\nname: test\nroot: ~/projects/company\n\nwindows:\n  - small_project:\n      root: ~/projects/company/small_project\n      panes:\n        - start this\n        - start that\n```\n\nThis takes precedence over the main root option.\n\n## Panes\n\n**_Note that if you wish to use panes, make sure that you do not have `.` in your project name. tmux uses `.` to delimit between window and pane indices,\nand tmuxinator uses the project name in combination with these indices to target the correct pane or window._**\n\nPanes are optional and are children of window entries, but unlike windows, they do not need a name. In the following example, the `editor` window has 2 panes, one running vim, the other guard.\n\n```yaml\nwindows:\n  - editor:\n      layout: main-vertical\n      panes:\n        - vim\n        - guard\n```\n\nThe layout setting gets handed down to tmux directly, so you can choose from\none of [the five standard layouts](https://web.archive.org/web/20220308205829/https://man.openbsd.org/OpenBSD-current/man1/tmux.1#even-horizontal)\nor [specify your own](http://stackoverflow.com/a/9976282/183537).\n\n**Please note the indentation here is deliberate. YAML's indentation rules can be confusing, so if your config isn't working as expected, please check the indentation.** For a more detailed explanation of _why_ YAML behaves this way, see [this](https://stackoverflow.com/questions/50594758/why-isnt-two-spaced-yaml-parsed-like-four-spaced-yaml/50600253#50600253) Stack Overflow question.\n\n**Note:** If you're noticing inconsistencies when using a custom layout it may\nbe due [#651](https://github.com/tmuxinator/tmuxinator/issues/651). See [this\ncomment](https://github.com/tmuxinator/tmuxinator/issues/651#issuecomment-497780424)\nfor a workaround.\n\n### Pane titles\n\nIt is also possible (starting with tmux v2.6) to give a title to panes.\n\n```yaml\nenable_pane_titles: true\n\nwindows:\n  - editor:\n      layout: main-vertical\n      panes:\n        - editor:\n          - vim\n        - guard\n```\n\n## Interpreter Managers & Environment Variables\n\nTo use tmuxinator with rbenv, RVM, NVM etc, use the `pre_window` option.\n\n```yaml\npre_window: rbenv shell 2.0.0-p247\n```\n\nThese command(s) will run before any subsequent commands in all panes and windows.\n\n## Custom session attachment\n\nYou can set tmuxinator to skip auto-attaching to the session by using the `attach` option.\n\n```yaml\nattach: false\n```\nIf you want to attach to tmux in a non-standard way (e.g. for a program that makes use of tmux control mode like iTerm2), you can run arbitrary commands by using a project hook:\n\n```yaml\non_project_exit: tmux -CC attach\n```\n\n## Passing directly to send-keys\n\ntmuxinator passes commands directly to send keys. This differs from simply chaining commands together using `&&` or `;`, in that\ntmux will directly send the commands to a shell as if you typed them in. This allows commands to be executed on a remote server over\nSSH for example.\n\nTo support this both the window and pane options can take an array as an argument:\n\n```yaml\nname: sample\nroot: ~/\n\nwindows:\n  - stats:\n    - ssh stats@example.com\n    - tail -f /var/log/stats.log\n  - logs:\n      layout: main-vertical\n      panes:\n        - logs:\n          - ssh logs@example.com\n          - cd /var/logs\n          - tail -f development.log\n```\n\n## ERB\n\nProject files support [ERB](https://en.wikipedia.org/wiki/ERuby#erb) for reusability across environments. Eg:\n\n```yaml\nroot: <%= ENV[\"MY_CUSTOM_DIR\"] %>\n```\n\nYou can also pass arguments to your projects, and access them with ERB. Simple arguments are available in an array named `@args`.\n\nEg:\n```bash\n$ tmuxinator start project foo\n```\n\n```yaml\n# ~/.tmuxinator/project.yml\n\nname: project\nroot: ~/<%= @args[0] %>\n\n...\n```\n\nYou can also pass key-value pairs using the format `key=value`. These will be available in a hash named `@settings`.\n\nEg:\n```bash\n$ tmuxinator start project workspace=~/workspace/todo\n```\n\n```yaml\n# ~/.tmuxinator/project.yml\n\nname: project\nroot: ~/<%= @settings[\"workspace\"] %>\n\n...\n```\n\n## Starting a session\n\nThis will fire up tmux with all the tabs and panes you configured, `start` is aliased to `s`.\n\n```\ntmuxinator start [project] -n [name] -p [project-config]\n```\n\nIf you use the optional `[name]` argument, it will start a new tmux session with the custom name provided. This is to enable reuse of a project without tmux session name collision.\n\nIf there is a `./.tmuxinator.yml` file in the current working directory but not a named project file in `~/.tmuxinator`, tmuxinator will use the local file. This is primarily intended to be used for sharing tmux configurations in complex development environments.\n\nYou can provide tmuxinator with a project config file using the optional `[project-config]` argument (e.g. `--project-config=path/to/my-project.yaml` or `-p path/to/my-project.yaml`). This option will override a `[project]` name (if provided) and a local tmuxinator file (if present).\n\n## Shorthand\n\nThe [shell completion files](#completion) also include a shorthand alias for tmuxinator that can be used in place of the full name*.\n\n```\nmux [command]\n```\n\n*The `mux` alias has been removed from the Zsh completion script because it was resulting in unexpected behavior in some setups. Including aliases in completion scripts is not standard practice and the Bash and Fish aliases may be removed in a future release. Going forward, users should create their own aliases in their shell's RC file (e.g. `alias mux=tmuxinator`).\n\n## Other Commands\n\nCopy an existing project. Aliased to `c` and `cp`\n```\ntmuxinator copy [existing] [new]\n```\n\nList all the projects you have configured. Aliased to `l` and `ls`\n```\ntmuxinator list\n```\n\nRemove a project. Aliased to `rm`\n```\ntmuxinator delete [project]\n```\n\nRemove all tmuxinator configs, aliases and scripts. Aliased to `i`\n```\ntmuxinator implode\n```\n\nExamines your environment and identifies problems with your configuration\n```\ntmuxinator doctor\n```\n\nShows tmuxinator's help. Aliased to `h`\n```\ntmuxinator help\n```\n\nShows the shell commands that get executed for a project\n```\ntmuxinator debug [project]\n```\n\nShows tmuxinator's version.\n```\ntmuxinator version\n```\n\n## Project Configuration Location\n\nUsing environment variables, it's possible to define which directory\ntmuxinator will use when creating or searching for project config\nfiles. (See [PR #511](https://github.com/tmuxinator/tmuxinator/pull/511).)\n\nTmuxinator will attempt to use the following locations (in this order) when\ncreating or searching for existing project configuration files:\n\n- `$TMUXINATOR_CONFIG`\n- `$XDG_CONFIG_HOME/tmuxinator`\n- `~/.tmuxinator`\n\n## FAQ\n\n### Window names are not displaying properly?\n\nAdd `export DISABLE_AUTO_TITLE=true` to your `.zshrc` or `.bashrc`\n\n### Commands being lost or corrupted\n\nIf a lot of commands or long commands are sent to a pane, and commands or characters seem to be lost or corrupted, it could be that the TTY typeahead buffer is full and losing new characters. This may happen when an earlier command takes a long time to complete. This seems to affect macOS with zsh more than other platforms.\n\nWhen this occurs, try putting your commands in a separate script and calling that from your tmuxinator configuration using e.g.: `source`.\n\n## Contributing\n\nTo contribute, please read the [contributing guide](https://github.com/tmuxinator/tmuxinator/blob/master/CONTRIBUTING.md).\n\n## Copyright\n\nCopyright (c) 2010-2020 Allen Bargi, Christopher Chow. See LICENSE for further details.\n",
        "releases": [
            {
                "name": "v3.3.3",
                "date": "2024-11-19T13:53:48Z"
            },
            {
                "name": "v3.3.2",
                "date": "2024-10-24T00:46:34Z"
            },
            {
                "name": "v3.3.1",
                "date": "2024-09-29T14:44:45Z"
            },
            {
                "name": "v3.3.0",
                "date": "2024-06-17T12:21:41Z"
            },
            {
                "name": "v3.2.1",
                "date": "2024-05-23T10:44:30Z"
            },
            {
                "name": "v3.2.0",
                "date": "2024-04-18T12:50:19Z"
            },
            {
                "name": "v3.1.2",
                "date": "2024-02-16T23:40:17Z"
            },
            {
                "name": "v3.1.1",
                "date": "2024-02-15T00:49:13Z"
            },
            {
                "name": "v3.1.0",
                "date": "2024-01-08T18:42:26Z"
            },
            {
                "name": "v3.0.5",
                "date": "2022-06-09T14:28:00Z"
            },
            {
                "name": "v3.0.4",
                "date": "2022-06-03T15:55:41Z"
            },
            {
                "name": "v3.0.3",
                "date": "2022-06-02T13:24:37Z"
            },
            {
                "name": "v3.0.2",
                "date": "2022-02-16T18:15:38Z"
            },
            {
                "name": "v3.0.1",
                "date": "2021-06-15T17:35:53Z"
            },
            {
                "name": "v3.0.0",
                "date": "2021-06-07T16:12:03Z"
            },
            {
                "name": "v2.0.3",
                "date": "2021-04-14T13:18:25Z"
            },
            {
                "name": "v2.0.2",
                "date": "2020-11-04T20:55:59Z"
            },
            {
                "name": "v2.0.1",
                "date": "2020-05-04T13:17:46Z"
            },
            {
                "name": "v2.0.0",
                "date": "2020-04-29T22:50:38Z"
            },
            {
                "name": "v1.1.5",
                "date": "2020-04-25T16:29:31Z"
            },
            {
                "name": "v1.1.4",
                "date": "2019-12-29T01:28:38Z"
            },
            {
                "name": "v1.1.3",
                "date": "2019-12-02T01:12:39Z"
            },
            {
                "name": "v1.1.2",
                "date": "2019-09-30T13:19:06Z"
            },
            {
                "name": "v1.1.1",
                "date": "2019-05-23T04:24:11Z"
            },
            {
                "name": "v1.1.0",
                "date": "2019-05-02T22:37:02Z"
            },
            {
                "name": "v1.0.0",
                "date": "2019-04-29T14:47:56Z"
            },
            {
                "name": "v0.16.0",
                "date": "2019-04-18T15:37:58Z"
            },
            {
                "name": "v0.15.0",
                "date": "2018-12-27T05:37:55Z"
            },
            {
                "name": "v0.14.0",
                "date": "2018-12-09T20:42:49Z"
            },
            {
                "name": "0.13.0",
                "date": "2018-10-23T16:41:01Z"
            },
            {
                "name": "",
                "date": "2018-07-03T15:27:28Z"
            },
            {
                "name": "",
                "date": "2018-06-12T13:38:21Z"
            },
            {
                "name": "v0.11.2",
                "date": "2018-05-09T13:38:07Z"
            },
            {
                "name": "v0.11.1",
                "date": "2018-04-16T19:21:19Z"
            },
            {
                "name": "v0.11.0",
                "date": "2018-03-30T20:32:16Z"
            },
            {
                "name": "",
                "date": "2017-12-07T21:59:18Z"
            },
            {
                "name": "v0.10.0",
                "date": "2017-11-15T00:07:45Z"
            },
            {
                "name": "v0.9.0",
                "date": "2016-10-08T05:16:27Z"
            },
            {
                "name": "v0.8.0",
                "date": "2016-04-13T13:04:35Z"
            },
            {
                "name": "v0.7.0",
                "date": "2016-04-01T14:16:59Z"
            },
            {
                "name": "v0.6.11",
                "date": "2015-06-06T12:08:44Z"
            },
            {
                "name": "Bump to v0.6.10",
                "date": "2015-02-27T12:47:31Z"
            },
            {
                "name": "Bump to 0.6.9",
                "date": "2015-02-27T12:35:12Z"
            },
            {
                "name": "Bump to 0.6.8",
                "date": "2014-06-03T06:53:02Z"
            },
            {
                "name": "Bump to 0.6.7",
                "date": "2014-02-26T11:09:13Z"
            },
            {
                "name": "Bump to 0.6.6",
                "date": "2013-11-08T00:12:27Z"
            },
            {
                "name": "Bump to 0.6.5",
                "date": "2013-08-12T11:52:38Z"
            },
            {
                "name": "Bump to 0.6.4.",
                "date": "2013-08-12T11:27:41Z"
            },
            {
                "name": "Bump to 0.6.3.",
                "date": "2013-08-05T12:35:37Z"
            },
            {
                "name": "",
                "date": "2013-07-27T01:04:48Z"
            },
            {
                "name": "",
                "date": "2013-07-27T01:04:24Z"
            },
            {
                "name": "",
                "date": "2013-07-27T01:03:50Z"
            }
        ]
    }
}