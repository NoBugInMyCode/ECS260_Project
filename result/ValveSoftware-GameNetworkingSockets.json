{
    "https://api.github.com/repos/ValveSoftware/GameNetworkingSockets": {
        "forks": 630,
        "watchers": 8414,
        "stars": 8414,
        "languages": {
            "C++": 2289979,
            "C": 64082,
            "CMake": 60298,
            "Python": 14633,
            "Shell": 2011
        },
        "commits": [
            "2022-12-29T11:23:57Z",
            "2024-09-29T20:55:53Z",
            "2024-09-29T20:33:45Z",
            "2024-09-22T22:14:15Z",
            "2024-09-29T20:14:54Z",
            "2023-07-30T21:55:40Z",
            "2023-07-30T12:48:39Z",
            "2023-07-30T11:49:09Z",
            "2022-09-07T09:18:12Z",
            "2024-09-09T00:50:08Z",
            "2024-09-08T23:33:56Z",
            "2024-09-08T23:32:40Z",
            "2024-09-08T23:29:23Z",
            "2024-09-08T18:24:09Z",
            "2024-09-01T17:16:19Z",
            "2024-09-07T23:47:58Z",
            "2024-09-07T23:43:33Z",
            "2024-08-31T00:32:34Z",
            "2024-08-31T00:27:31Z",
            "2024-08-30T22:10:28Z",
            "2024-08-30T22:01:54Z",
            "2024-08-30T20:33:29Z",
            "2024-08-30T20:12:58Z",
            "2024-08-30T18:28:19Z",
            "2024-08-12T02:32:44Z",
            "2024-08-30T00:55:43Z",
            "2024-08-30T00:50:12Z",
            "2024-08-30T00:36:32Z",
            "2024-08-30T00:32:06Z",
            "2024-08-30T00:02:59Z"
        ],
        "creation_date": "2018-03-21T18:43:20Z",
        "contributors": 30,
        "topics": [
            "game-development",
            "networking",
            "peer-to-peer",
            "realtime-messaging",
            "reliable-messages"
        ],
        "subscribers": 291,
        "readme": "# GameNetworkingSockets\n[![Windows, Ubuntu](https://github.com/ValveSoftware/GameNetworkingSockets/actions/workflows/build.yml/badge.svg)](https://github.com/ValveSoftware/GameNetworkingSockets/actions)  [![MacOS](https://github.com/ValveSoftware/GameNetworkingSockets/actions/workflows/macos.yml/badge.svg)](https://github.com/ValveSoftware/GameNetworkingSockets/actions) [![Linux flavors](https://github.com/ValveSoftware/GameNetworkingSockets/actions/workflows/linux-flavors.yml/badge.svg)](https://github.com/ValveSoftware/GameNetworkingSockets/actions)\n\nGameNetworkingSockets is a basic transport layer for games.  The features are:\n\n* Connection-oriented API (like TCP)\n* ... but message-oriented (like UDP), not stream-oriented.\n* Supports both reliable and unreliable message types\n* Messages can be larger than underlying MTU.  The protocol performs\n  fragmentation, reassembly, and retransmission for reliable messages.\n* A [reliability layer](src/steamnetworkingsockets/clientlib/SNP_WIRE_FORMAT.md)\n  significantly more sophisticated than a basic TCP-style sliding window.\n  It is based on the \"ack vector\" model from DCCP (RFC 4340, section 11.4)\n  and Google QUIC and discussed in the context of games by\n  [Glenn Fiedler](https://gafferongames.com/post/reliable_ordered_messages/).\n  The basic idea is for the receiver to efficiently communicate to the sender\n  the status of every packet number (whether or not a packet was received\n  with that number).  By remembering which segments were sent in each packet,\n  the sender can deduce which segments need to be retransmitted.\n* Encryption. AES-GCM-256 per packet, [Curve25519](https://cr.yp.to/ecdh.html) for\n  key exchange and cert signatures. The details for shared key derivation and\n  per-packet IV are based on the [design](https://docs.google.com/document/d/1g5nIXAIkN_Y-7XJW5K45IblHd_L2f5LTaDUDwvZ5L6g/edit?usp=sharing)\n  used by Google's QUIC protocol.\n* Tools for simulating packet latency/loss, and detailed stats measurement\n* Head-of-line blocking control and bandwidth sharing of multiple message\n  streams (\"lanes\") on the same connection.  You can use strict priority\n  values, softer [weight values](https://en.wikipedia.org/wiki/Weighted_fair_queueing)\n  that control how bandwidth is shared, or some combination of the two methods.\n  See [``ISteamNetworkingSockets::ConfigureConnectionLanes``](include/steam/isteamnetworkingsockets.h).\n* IPv6 support\n* Peer-to-peer networking:\n  * NAT traversal through google WebRTC's ICE implementation.\n  * Plug in your own signaling service.\n  * Unique \"symmetric connect\" mode.\n  * [``ISteamNetworkingMessages``](include/steam/isteamnetworkingmessages.h) is an\n    interface designed to make it easy to port UDP-based code to P2P use cases.  (By\n    UDP-based, we mean non-connection-oriented code, where each time you send a\n    packet, you specify the recipient's address.)\n  * See [README_P2P.md](README_P2P.md) for more info\n* Cross platform.  This library has shipped on consoles, mobile platforms, and non-Steam\n  stores, and has been used to facilitate cross-platform connectivity.  Contact us to get\n  access to the code.  (We are not allowed to distribute it here.)\n\nWhat it does *not* do:\n\n* Higher level serialization of entities, delta encoding of changed state\n  variables, etc\n* Compression\n\n## Quick API overview\n\nTo get an idea of what the API is like, here are a few things to check out:\n\n* The [include/steam](include/steam) folder has the public API headers.\n  * [``ISteamNetworkingSockets``](include/steam/isteamnetworkingsockets.h) is the\n    most important interface.\n  * [``steamnetworkingtypes.h``](include/steam/steamnetworkingtypes.h) has misc\n    types and declarations.\n* The\n  [Steamworks SDK documentation](https://partner.steamgames.com/doc/api/ISteamNetworkingSockets)\n  offers web-based documentation for these APIs.  Note that some features\n  are only available on Steam, such as Steam's authentication service,\n  signaling service, and the SDR relay service.\n* Look at these examples:\n  * [example_chat.cpp](examples/example_chat.cpp).  Very simple client/server\n    program using all reliable messages over ordinary IPv4.\n  * [test_p2p.cpp](tests/test_p2p.cpp).  Shows how to get two hosts to connect\n    to each other using P2P connectivity.  Also an example of how to write a\n    signaling service plugin.\n\n## Building\n\nSee [BUILDING](BUILDING.md) for more information.\n\n## Language bindings\n\nThe library was written in C++, but there is also a plain C interface\nto facilitate binding to other languages.\n\nThird party language bindings:\n\n* C#:\n  * <https://github.com/nxrighthere/ValveSockets-CSharp>\n  * <https://github.com/Facepunch/Facepunch.Steamworks>\n* Go:\n  * <https://github.com/nielsAD/gns/>\n* Rust:\n  * <https://github.com/hussein-aitlahcen/gns-rs>\n\n## Why do I see \"Steam\" everywhere?\n\nThe main interface class is named SteamNetworkingSockets, and many files have\n\"steam\" in their name.  But *Steam is not needed*.  If you don't make games or\naren't on Steam, feel free to use this code for whatever purpose you want.\n\nThe reason for \"Steam\" in the names is that this provides a subset of the\nfunctionality of the [API](https://partner.steamgames.com/doc/api/ISteamNetworkingSockets)\nwith the same name in the Steamworks SDK.  Our main\nreason for releasing this code is so that developers won't have any hesitation\ncoding to the API in the Steamworks SDK.  On Steam, you will link against the\nSteamworks version, and you can access the additional services provided by\nthe [Steam Datagram Relay](https://partner.steamgames.com/doc/features/multiplayer/steamdatagramrelay)\nnetwork.  On other platforms and stores, as long as you ship a version of your\ngame on Steam, you might be able to take advantage of these services.  See\nthe Steamworks documentation for more information.  Because this is a live\nservice, and we need to control our security and backward compatibility burden,\nat this time we are not able to offer access to SDR on other platforms to all\npartners.\n\nIf you aren't a Steam partner, or don't have a version of your game on Steam,\nthen use this opensource version of the API and take advantage of the permissive\nlicense to do whatever you want.  We want you to take maximum advantage of the\nfeatures in the Steamworks version.  That won't happen if this API is a weird\n\"wart\" that's hidden behind `#ifdef STEAM`, which is why we're making this\nopensource version available.\n\nThe desire to match the Steamworks SDK also explains a somewhat anachronistic\ncoding style and weird directory layout.  This project is kept in sync with the\nSteam code here at Valve.  When we extracted the code from the much larger\ncodebase, we had to do some relatively gross hackery.  The files in folders\nnamed  `tier0`, `tier1`, `vstdlib`, `common`, etc have especially suffered\ntrauma.  Also if you see code that appears to have unnecessary layers of\nabstraction, it's probably because those layers are needed to support relayed\nconnection types or some part of the Steamworks SDK.\n\n## Security\n\nDid you find a security vulnerability?  Please inform us responsibly; you may\nbe eligible for a bug bounty.  See the [security policy](SECURITY.md) for more\ninformation.\n",
        "releases": [
            {
                "name": "v1.4.1 Native ICE client (beta), misc bugfixes",
                "date": "2022-06-16T19:46:17Z"
            },
            {
                "name": "v1.4.0 Multi-lane support",
                "date": "2022-01-27T23:48:35Z"
            },
            {
                "name": "v1.3.0 Performance improvements, ISteamNetworkingMessages, and more",
                "date": "2021-05-30T19:40:53Z"
            },
            {
                "name": "v1.2.0 Peer-to-peer support",
                "date": "2020-09-04T00:08:32Z"
            },
            {
                "name": "v1.1.0 Poll groups, no-copy message send, sync with Steamworks SDK 1.48",
                "date": "2020-02-28T17:08:26Z"
            },
            {
                "name": "1.0.0",
                "date": "2019-03-14T23:10:37Z"
            }
        ]
    }
}