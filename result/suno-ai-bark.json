{
    "https://api.github.com/repos/suno-ai/bark": {
        "forks": 4322,
        "watchers": 36720,
        "stars": 36720,
        "languages": {
            "Jupyter Notebook": 70322,
            "Python": 50747
        },
        "commits": [
            "2024-04-05T13:14:16Z",
            "2023-09-28T19:35:51Z",
            "2023-09-28T19:33:23Z",
            "2023-09-15T20:54:51Z",
            "2023-09-15T20:20:28Z",
            "2023-09-15T20:11:48Z",
            "2023-09-15T20:03:44Z",
            "2023-09-09T20:05:00Z",
            "2023-08-31T23:37:49Z",
            "2023-08-24T20:40:24Z",
            "2023-07-19T15:01:42Z",
            "2023-07-05T12:58:08Z",
            "2023-06-23T16:33:23Z",
            "2023-06-23T15:39:37Z",
            "2023-06-21T17:12:27Z",
            "2023-06-20T18:37:21Z",
            "2023-06-20T16:11:58Z",
            "2023-06-19T12:53:39Z",
            "2023-06-14T12:22:58Z",
            "2023-05-25T14:52:56Z",
            "2023-05-24T21:29:03Z",
            "2023-05-20T04:14:03Z",
            "2023-05-16T01:12:21Z",
            "2023-05-15T23:16:36Z",
            "2023-05-09T13:16:22Z",
            "2023-05-04T03:25:21Z",
            "2023-05-04T01:58:21Z",
            "2023-05-03T20:21:35Z",
            "2023-05-02T14:57:58Z",
            "2023-05-02T14:32:52Z"
        ],
        "creation_date": "2023-04-07T19:34:48Z",
        "contributors": 16,
        "topics": [],
        "subscribers": 332,
        "readme": "> Notice: Bark is Suno's open-source text-to-speech+ model. If you are looking for our text-to-music models, please visit us on our [web page](https://suno.ai) and join our community on [Discord](https://suno.ai/discord). \n\n     \n# \ud83d\udc36 Bark\n\n[![](https://dcbadge.vercel.app/api/server/J2B2vsjKuE?style=flat&compact=True)](https://suno.ai/discord)\n[![Twitter](https://img.shields.io/twitter/url/https/twitter.com/FM.svg?style=social&label=@suno_ai_)](https://twitter.com/suno_ai_)\n\n> \ud83d\udd17 [Examples](https://suno.ai/examples/bark-v0) \u2022 [Suno Studio Waitlist](https://suno-ai.typeform.com/suno-studio) \u2022 [Updates](#-updates) \u2022 [How to Use](#-usage-in-python) \u2022 [Installation](#-installation) \u2022 [FAQ](#-faq)\n\n[//]: <br> (vertical spaces around image)\n<br>\n<p align=\"center\">\n<img src=\"https://user-images.githubusercontent.com/5068315/235310676-a4b3b511-90ec-4edf-8153-7ccf14905d73.png\" width=\"500\"></img>\n</p>\n<br>\n\nBark is a transformer-based text-to-audio model created by [Suno](https://suno.ai). Bark can generate highly realistic, multilingual speech as well as other audio - including music, background noise and simple sound effects. The model can also produce nonverbal communications like laughing, sighing and crying. To support the research community, we are providing access to pretrained model checkpoints, which are ready for inference and available for commercial use.\n\n## \u26a0 Disclaimer\nBark was developed for research purposes. It is not a conventional text-to-speech model but instead a fully generative text-to-audio model, which can deviate in unexpected ways from provided prompts. Suno does not take responsibility for any output generated. Use at your own risk, and please act responsibly.\n\n## \ud83d\udcd6 Quick Index\n* [\ud83d\ude80 Updates](#-updates)\n* [\ud83d\udcbb Installation](#-installation)\n* [\ud83d\udc0d Usage](#-usage-in-python)\n* [\ud83c\udf00 Live Examples](https://suno.ai/examples/bark-v0)\n* [\u2753 FAQ](#-faq)\n\n## \ud83c\udfa7 Demos  \n\n[![Open in Spaces](https://img.shields.io/badge/\ud83e\udd17-Open%20in%20Spaces-blue.svg)](https://huggingface.co/spaces/suno/bark)\n[![Open on Replicate](https://img.shields.io/badge/\u00ae\ufe0f-Open%20on%20Replicate-blue.svg)](https://replicate.com/suno-ai/bark)\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1eJfA2XUa-mXwdMy7DoYKVYHI1iTd9Vkt?usp=sharing)\n\n## \ud83d\ude80 Updates\n\n**2023.05.01**\n- \u00a9\ufe0f Bark is now licensed under the MIT License, meaning it's now available for commercial use!  \n- \u26a1 2x speed-up on GPU. 10x speed-up on CPU. We also added an option for a smaller version of Bark, which offers additional speed-up with the trade-off of slightly lower quality. \n- \ud83d\udcd5 [Long-form generation](notebooks/long_form_generation.ipynb), voice consistency enhancements and other examples are now documented in a new [notebooks](./notebooks) section.\n- \ud83d\udc65 We created a [voice prompt library](https://suno-ai.notion.site/8b8e8749ed514b0cbf3f699013548683?v=bc67cff786b04b50b3ceb756fd05f68c). We hope this resource helps you find useful prompts for your use cases! You can also join us on [Discord](https://suno.ai/discord), where the community actively shares useful prompts in the **#audio-prompts** channel.  \n- \ud83d\udcac Growing community support and access to new features here: \n\n     [![](https://dcbadge.vercel.app/api/server/J2B2vsjKuE)](https://suno.ai/discord)\n\n- \ud83d\udcbe You can now use Bark with GPUs that have low VRAM (<4GB).\n\n**2023.04.20**\n- \ud83d\udc36 Bark release!\n\n## \ud83d\udc0d Usage in Python\n\n<details open>\n  <summary><h3>\ud83e\ude91 Basics</h3></summary>\n\n```python\nfrom bark import SAMPLE_RATE, generate_audio, preload_models\nfrom scipy.io.wavfile import write as write_wav\nfrom IPython.display import Audio\n\n# download and load all models\npreload_models()\n\n# generate audio from text\ntext_prompt = \"\"\"\n     Hello, my name is Suno. And, uh \u2014 and I like pizza. [laughs] \n     But I also have other interests such as playing tic tac toe.\n\"\"\"\naudio_array = generate_audio(text_prompt)\n\n# save audio to disk\nwrite_wav(\"bark_generation.wav\", SAMPLE_RATE, audio_array)\n  \n# play text in notebook\nAudio(audio_array, rate=SAMPLE_RATE)\n```\n     \n[pizza1.webm](https://user-images.githubusercontent.com/34592747/cfa98e54-721c-4b9c-b962-688e09db684f.webm)\n\n</details>\n\n<details open>\n  <summary><h3>\ud83c\udf0e Foreign Language</h3></summary>\n<br>\nBark supports various languages out-of-the-box and automatically determines language from input text. When prompted with code-switched text, Bark will attempt to employ the native accent for the respective languages. English quality is best for the time being, and we expect other languages to further improve with scaling. \n<br>\n<br>\n\n```python\n\ntext_prompt = \"\"\"\n    \ucd94\uc11d\uc740 \ub0b4\uac00 \uac00\uc7a5 \uc88b\uc544\ud558\ub294 \uba85\uc808\uc774\ub2e4. \ub098\ub294 \uba70\uce60 \ub3d9\uc548 \ud734\uc2dd\uc744 \ucde8\ud558\uace0 \uce5c\uad6c \ubc0f \uac00\uc871\uacfc \uc2dc\uac04\uc744 \ubcf4\ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\"\"\"\naudio_array = generate_audio(text_prompt)\n```\n[suno_korean.webm](https://user-images.githubusercontent.com/32879321/235313033-dc4477b9-2da0-4b94-9c8b-a8c2d8f5bb5e.webm)\n  \n*Note: since Bark recognizes languages automatically from input text, it is possible to use, for example, a german history prompt with english text. This usually leads to english audio with a german accent.*\n```python\ntext_prompt = \"\"\"\n    Der Drei\u00dfigj\u00e4hrige Krieg (1618-1648) war ein verheerender Konflikt, der Europa stark gepr\u00e4gt hat.\n    This is a beginning of the history. If you want to hear more, please continue.\n\"\"\"\naudio_array = generate_audio(text_prompt)\n```\n[suno_german_accent.webm](https://user-images.githubusercontent.com/34592747/3f96ab3e-02ec-49cb-97a6-cf5af0b3524a.webm)\n\n\n     \n\n</details>\n\n<details open>\n  <summary><h3>\ud83c\udfb6 Music</h3></summary>\nBark can generate all types of audio, and, in principle, doesn't see a difference between speech and music. Sometimes Bark chooses to generate text as music, but you can help it out by adding music notes around your lyrics.\n<br>\n<br>\n\n```python\ntext_prompt = \"\"\"\n    \u266a In the jungle, the mighty jungle, the lion barks tonight \u266a\n\"\"\"\naudio_array = generate_audio(text_prompt)\n```\n[lion.webm](https://user-images.githubusercontent.com/5068315/230684766-97f5ea23-ad99-473c-924b-66b6fab24289.webm)\n</details>\n\n<details open>\n<summary><h3>\ud83c\udfa4 Voice Presets</h3></summary>\n  \nBark supports 100+ speaker presets across [supported languages](#supported-languages). You can browse the library of supported voice presets [HERE](https://suno-ai.notion.site/8b8e8749ed514b0cbf3f699013548683?v=bc67cff786b04b50b3ceb756fd05f68c), or in the [code](bark/assets/prompts). The community also often shares presets in [Discord](https://discord.gg/J2B2vsjKuE).\n\n> Bark tries to match the tone, pitch, emotion and prosody of a given preset, but does not currently support custom voice cloning. The model also attempts to preserve music, ambient noise, etc.\n\n```python\ntext_prompt = \"\"\"\n    I have a silky smooth voice, and today I will tell you about \n    the exercise regimen of the common sloth.\n\"\"\"\naudio_array = generate_audio(text_prompt, history_prompt=\"v2/en_speaker_1\")\n```\n\n[sloth.webm](https://user-images.githubusercontent.com/5068315/230684883-a344c619-a560-4ff5-8b99-b4463a34487b.webm)\n</details>\n\n### \ud83d\udcc3 Generating Longer Audio\n  \nBy default, `generate_audio` works well with around 13 seconds of spoken text. For an example of how to do long-form generation, see \ud83d\udc49 **[Notebook](notebooks/long_form_generation.ipynb)** \ud83d\udc48\n\n<details>\n<summary>Click to toggle example long-form generations (from the example notebook)</summary>\n\n[dialog.webm](https://user-images.githubusercontent.com/2565833/235463539-f57608da-e4cb-4062-8771-148e29512b01.webm)\n\n[longform_advanced.webm](https://user-images.githubusercontent.com/2565833/235463547-1c0d8744-269b-43fe-9630-897ea5731652.webm)\n\n[longform_basic.webm](https://user-images.githubusercontent.com/2565833/235463559-87efe9f8-a2db-4d59-b764-57db83f95270.webm)\n\n</details>\n\n\n## Command line\n```commandline\npython -m bark --text \"Hello, my name is Suno.\" --output_filename \"example.wav\"\n```\n\n## \ud83d\udcbb Installation\n*\u203c\ufe0f CAUTION \u203c\ufe0f Do NOT use `pip install bark`. It installs a different package, which is not managed by Suno.*\n```bash\npip install git+https://github.com/suno-ai/bark.git\n```\n\nor\n\n```bash\ngit clone https://github.com/suno-ai/bark\ncd bark && pip install . \n```\n\n\n## \ud83e\udd17 Transformers Usage\n\nBark is available in the \ud83e\udd17 Transformers library from version 4.31.0 onwards, requiring minimal dependencies \nand additional packages. Steps to get started:\n\n1. First install the \ud83e\udd17 [Transformers library](https://github.com/huggingface/transformers) from main:\n\n```\npip install git+https://github.com/huggingface/transformers.git\n```\n\n2. Run the following Python code to generate speech samples:\n\n```py\nfrom transformers import AutoProcessor, BarkModel\n\nprocessor = AutoProcessor.from_pretrained(\"suno/bark\")\nmodel = BarkModel.from_pretrained(\"suno/bark\")\n\nvoice_preset = \"v2/en_speaker_6\"\n\ninputs = processor(\"Hello, my dog is cute\", voice_preset=voice_preset)\n\naudio_array = model.generate(**inputs)\naudio_array = audio_array.cpu().numpy().squeeze()\n```\n\n3. Listen to the audio samples either in an ipynb notebook:\n\n```py\nfrom IPython.display import Audio\n\nsample_rate = model.generation_config.sample_rate\nAudio(audio_array, rate=sample_rate)\n```\n\nOr save them as a `.wav` file using a third-party library, e.g. `scipy`:\n\n```py\nimport scipy\n\nsample_rate = model.generation_config.sample_rate\nscipy.io.wavfile.write(\"bark_out.wav\", rate=sample_rate, data=audio_array)\n```\n\nFor more details on using the Bark model for inference using the \ud83e\udd17 Transformers library, refer to the \n[Bark docs](https://huggingface.co/docs/transformers/main/en/model_doc/bark) or the hands-on \n[Google Colab](https://colab.research.google.com/drive/1dWWkZzvu7L9Bunq9zvD-W02RFUXoW-Pd?usp=sharing).\n\n\n## \ud83d\udee0\ufe0f Hardware and Inference Speed\n\nBark has been tested and works on both CPU and GPU (`pytorch 2.0+`, CUDA 11.7 and CUDA 12.0).\n\nOn enterprise GPUs and PyTorch nightly, Bark can generate audio in roughly real-time. On older GPUs, default colab, or CPU, inference time might be significantly slower. For older GPUs or CPU you might want to consider using smaller models. Details can be found in out tutorial sections here.\n\nThe full version of Bark requires around 12GB of VRAM to hold everything on GPU at the same time. \nTo use a smaller version of the models, which should fit into 8GB VRAM, set the environment flag `SUNO_USE_SMALL_MODELS=True`.\n\nIf you don't have hardware available or if you want to play with bigger versions of our models, you can also sign up for early access to our model playground [here](https://suno-ai.typeform.com/suno-studio).\n\n## \u2699\ufe0f Details\n\nBark is fully generative text-to-audio model devolved for research and demo purposes. It follows a GPT style architecture similar to [AudioLM](https://arxiv.org/abs/2209.03143) and [Vall-E](https://arxiv.org/abs/2301.02111) and a quantized Audio representation from [EnCodec](https://github.com/facebookresearch/encodec). It is not a conventional TTS model, but instead a fully generative text-to-audio model capable of deviating in unexpected ways from any given script. Different to previous approaches, the input text prompt is converted directly to audio without the intermediate use of phonemes. It can therefore generalize to arbitrary instructions beyond speech such as music lyrics, sound effects or other non-speech sounds.\n\nBelow is a list of some known non-speech sounds, but we are finding more every day. Please let us know if you find patterns that work particularly well on [Discord](https://suno.ai/discord)!\n\n- `[laughter]`\n- `[laughs]`\n- `[sighs]`\n- `[music]`\n- `[gasps]`\n- `[clears throat]`\n- `\u2014` or `...` for hesitations\n- `\u266a` for song lyrics\n- CAPITALIZATION for emphasis of a word\n- `[MAN]` and `[WOMAN]` to bias Bark toward male and female speakers, respectively\n\n### Supported Languages\n\n| Language | Status |\n| --- | :---: |\n| English (en) | \u2705 |\n| German (de) | \u2705 |\n| Spanish (es) | \u2705 |\n| French (fr) | \u2705 |\n| Hindi (hi) | \u2705 |\n| Italian (it) | \u2705 |\n| Japanese (ja) | \u2705 |\n| Korean (ko) | \u2705 |\n| Polish (pl) | \u2705 |\n| Portuguese (pt) | \u2705 |\n| Russian (ru) | \u2705 |\n| Turkish (tr) | \u2705 |\n| Chinese, simplified (zh) | \u2705 |\n\nRequests for future language support [here](https://github.com/suno-ai/bark/discussions/111) or in the **#forums** channel on [Discord](https://suno.ai/discord). \n\n## \ud83d\ude4f Appreciation\n\n- [nanoGPT](https://github.com/karpathy/nanoGPT) for a dead-simple and blazing fast implementation of GPT-style models\n- [EnCodec](https://github.com/facebookresearch/encodec) for a state-of-the-art implementation of a fantastic audio codec\n- [AudioLM](https://github.com/lucidrains/audiolm-pytorch) for related training and inference code\n- [Vall-E](https://arxiv.org/abs/2301.02111), [AudioLM](https://arxiv.org/abs/2209.03143) and many other ground-breaking papers that enabled the development of Bark\n\n## \u00a9 License\n\nBark is licensed under the MIT License. \n\n## \ud83d\udcf1\u00a0Community\n\n- [Twitter](https://twitter.com/suno_ai_)\n- [Discord](https://suno.ai/discord)\n\n## \ud83c\udfa7\u00a0Suno Studio (Early Access)\n\nWe\u2019re developing a playground for our models, including Bark. \n\nIf you are interested, you can sign up for early access [here](https://suno-ai.typeform.com/suno-studio).\n\n## \u2753 FAQ\n\n#### How do I specify where models are downloaded and cached?\n* Bark uses Hugging Face to download and store models. You can see find more info [here](https://huggingface.co/docs/huggingface_hub/package_reference/environment_variables#hfhome). \n\n\n#### Bark's generations sometimes differ from my prompts. What's happening?\n* Bark is a GPT-style model. As such, it may take some creative liberties in its generations, resulting in higher-variance model outputs than traditional text-to-speech approaches.\n\n#### What voices are supported by Bark?  \n* Bark supports 100+ speaker presets across [supported languages](#supported-languages). You can browse the library of speaker presets [here](https://suno-ai.notion.site/8b8e8749ed514b0cbf3f699013548683?v=bc67cff786b04b50b3ceb756fd05f68c). The community also shares presets in [Discord](https://suno.ai/discord). Bark also supports generating unique random voices that fit the input text. Bark does not currently support custom voice cloning.\n\n#### Why is the output limited to ~13-14 seconds?\n* Bark is a GPT-style model, and its architecture/context window is optimized to output generations with roughly this length.\n\n#### How much VRAM do I need?\n* The full version of Bark requires around 12Gb of memory to hold everything on GPU at the same time. However, even smaller cards down to ~2Gb work with some additional settings. Simply add the following code snippet before your generation: \n\n```python\nimport os\nos.environ[\"SUNO_OFFLOAD_CPU\"] = \"True\"\nos.environ[\"SUNO_USE_SMALL_MODELS\"] = \"True\"\n```\n\n#### My generated audio sounds like a 1980s phone call. What's happening?\n* Bark generates audio from scratch. It is not meant to create only high-fidelity, studio-quality speech. Rather, outputs could be anything from perfect speech to multiple people arguing at a baseball game recorded with bad microphones.\n",
        "releases": []
    }
}