{
    "https://api.github.com/repos/golang/groupcache": {
        "forks": 1397,
        "watchers": 13043,
        "stars": 13043,
        "languages": {
            "Go": 67206
        },
        "commits": [
            "2024-11-29T21:07:26Z",
            "2021-03-31T22:47:55Z",
            "2020-01-21T04:51:36Z",
            "2019-12-27T05:28:52Z",
            "2019-10-27T21:21:12Z",
            "2019-02-13T00:48:11Z",
            "2019-10-02T19:53:25Z",
            "2019-07-01T10:44:52Z",
            "2019-01-29T15:46:38Z",
            "2018-10-24T23:09:25Z",
            "2018-10-19T23:13:27Z",
            "2018-09-24T19:05:50Z",
            "2018-09-24T18:43:12Z",
            "2018-05-13T04:43:58Z",
            "2018-05-13T00:39:11Z",
            "2018-02-03T14:35:32Z",
            "2017-11-01T20:31:31Z",
            "2017-10-31T14:00:35Z",
            "2017-09-01T11:37:39Z",
            "2017-04-21T00:56:42Z",
            "2017-02-24T16:27:23Z",
            "2017-01-09T20:54:48Z",
            "2017-01-09T20:49:55Z",
            "2017-01-04T20:20:46Z",
            "2016-11-29T20:48:59Z",
            "2016-12-16T00:27:18Z",
            "2016-08-03T20:04:08Z",
            "2016-08-03T19:31:13Z",
            "2016-05-16T00:07:52Z",
            "2016-05-15T07:45:38Z"
        ],
        "creation_date": "2013-07-22T21:55:07Z",
        "contributors": 26,
        "topics": [],
        "subscribers": 473,
        "readme": "# groupcache\n\n## Summary\n\ngroupcache is a distributed caching and cache-filling library, intended as a\nreplacement for a pool of memcached nodes in many cases.\n\nFor API docs and examples, see http://godoc.org/github.com/golang/groupcache\n\n## Comparison to memcached\n\n### **Like memcached**, groupcache:\n\n * shards by key to select which peer is responsible for that key\n\n### **Unlike memcached**, groupcache:\n\n * does not require running a separate set of servers, thus massively\n   reducing deployment/configuration pain.  groupcache is a client\n   library as well as a server.  It connects to its own peers, forming\n   a distributed cache.\n\n * comes with a cache filling mechanism.  Whereas memcached just says\n   \"Sorry, cache miss\", often resulting in a thundering herd of\n   database (or whatever) loads from an unbounded number of clients\n   (which has resulted in several fun outages), groupcache coordinates\n   cache fills such that only one load in one process of an entire\n   replicated set of processes populates the cache, then multiplexes\n   the loaded value to all callers.\n\n * does not support versioned values.  If key \"foo\" is value \"bar\",\n   key \"foo\" must always be \"bar\".  There are neither cache expiration\n   times, nor explicit cache evictions.  Thus there is also no CAS,\n   nor Increment/Decrement.  This also means that groupcache....\n\n * ... supports automatic mirroring of super-hot items to multiple\n   processes.  This prevents memcached hot spotting where a machine's\n   CPU and/or NIC are overloaded by very popular keys/values.\n\n * is currently only available for Go.  It's very unlikely that I\n   (bradfitz@) will port the code to any other language.\n\n## Loading process\n\nIn a nutshell, a groupcache lookup of **Get(\"foo\")** looks like:\n\n(On machine #5 of a set of N machines running the same code)\n\n 1. Is the value of \"foo\" in local memory because it's super hot?  If so, use it.\n\n 2. Is the value of \"foo\" in local memory because peer #5 (the current\n    peer) is the owner of it?  If so, use it.\n\n 3. Amongst all the peers in my set of N, am I the owner of the key\n    \"foo\"?  (e.g. does it consistent hash to 5?)  If so, load it.  If\n    other callers come in, via the same process or via RPC requests\n    from peers, they block waiting for the load to finish and get the\n    same answer.  If not, RPC to the peer that's the owner and get\n    the answer.  If the RPC fails, just load it locally (still with\n    local dup suppression).\n\n## Users\n\ngroupcache is in production use by dl.google.com (its original user),\nparts of Blogger, parts of Google Code, parts of Google Fiber, parts\nof Google production monitoring systems, etc.\n\n## Presentations\n\nSee http://talks.golang.org/2013/oscon-dl.slide\n\n## Help\n\nUse the golang-nuts mailing list for any discussion or questions.\n",
        "releases": []
    }
}