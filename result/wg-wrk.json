{
    "https://api.github.com/repos/wg/wrk": {
        "forks": 2958,
        "watchers": 38300,
        "stars": 38300,
        "languages": {
            "C": 202017,
            "Lua": 4956,
            "Makefile": 2674,
            "C++": 878
        },
        "commits": [
            "2021-02-05T23:39:55Z",
            "2021-02-05T23:38:22Z",
            "2021-02-05T23:26:51Z",
            "2021-02-07T06:54:17Z",
            "2019-04-18T01:51:16Z",
            "2019-04-18T01:48:58Z",
            "2019-04-17T11:04:18Z",
            "2019-04-17T11:02:40Z",
            "2018-01-21T06:00:58Z",
            "2018-01-21T05:47:53Z",
            "2018-01-21T05:47:22Z",
            "2018-01-21T05:15:56Z",
            "2018-01-21T05:05:34Z",
            "2017-02-05T05:43:13Z",
            "2017-02-05T05:05:52Z",
            "2016-03-26T00:18:07Z",
            "2016-03-20T08:03:36Z",
            "2016-03-20T07:26:48Z",
            "2016-03-20T06:55:25Z",
            "2015-11-04T12:59:11Z",
            "2015-11-04T12:40:57Z",
            "2015-05-16T11:03:12Z",
            "2015-05-08T05:54:10Z",
            "2015-03-24T10:03:52Z",
            "2015-03-18T12:18:33Z",
            "2015-03-15T05:08:55Z",
            "2015-02-21T02:31:44Z",
            "2015-02-15T05:01:35Z",
            "2015-02-11T11:11:41Z",
            "2015-02-11T02:31:55Z"
        ],
        "creation_date": "2012-03-20T11:12:28Z",
        "contributors": 1,
        "topics": [],
        "subscribers": 752,
        "readme": "# wrk - a HTTP benchmarking tool\n\n  wrk is a modern HTTP benchmarking tool capable of generating significant\n  load when run on a single multi-core CPU. It combines a multithreaded\n  design with scalable event notification systems such as epoll and kqueue.\n\n  An optional LuaJIT script can perform HTTP request generation, response\n  processing, and custom reporting. Details are available in SCRIPTING and\n  several examples are located in [scripts/](scripts/).\n\n## Basic Usage\n\n    wrk -t12 -c400 -d30s http://127.0.0.1:8080/index.html\n\n  This runs a benchmark for 30 seconds, using 12 threads, and keeping\n  400 HTTP connections open.\n\n  Output:\n\n    Running 30s test @ http://127.0.0.1:8080/index.html\n      12 threads and 400 connections\n      Thread Stats   Avg      Stdev     Max   +/- Stdev\n        Latency   635.91us    0.89ms  12.92ms   93.69%\n        Req/Sec    56.20k     8.07k   62.00k    86.54%\n      22464657 requests in 30.00s, 17.76GB read\n    Requests/sec: 748868.53\n    Transfer/sec:    606.33MB\n\n## Command Line Options\n\n    -c, --connections: total number of HTTP connections to keep open with\n                       each thread handling N = connections/threads\n\n    -d, --duration:    duration of the test, e.g. 2s, 2m, 2h\n\n    -t, --threads:     total number of threads to use\n\n    -s, --script:      LuaJIT script, see SCRIPTING\n\n    -H, --header:      HTTP header to add to request, e.g. \"User-Agent: wrk\"\n\n        --latency:     print detailed latency statistics\n\n        --timeout:     record a timeout if a response is not received within\n                       this amount of time.\n\n## Benchmarking Tips\n\n  The machine running wrk must have a sufficient number of ephemeral ports\n  available and closed sockets should be recycled quickly. To handle the\n  initial connection burst the server's listen(2) backlog should be greater\n  than the number of concurrent connections being tested.\n\n  A user script that only changes the HTTP method, path, adds headers or\n  a body, will have no performance impact. Per-request actions, particularly\n  building a new HTTP request, and use of response() will necessarily reduce\n  the amount of load that can be generated.\n\n## Acknowledgements\n\n  wrk contains code from a number of open source projects including the\n  'ae' event loop from redis, the nginx/joyent/node.js 'http-parser',\n  and Mike Pall's LuaJIT. Please consult the NOTICE file for licensing\n  details.\n\n## Cryptography Notice\n\n  This distribution includes cryptographic software. The country in\n  which you currently reside may have restrictions on the import,\n  possession, use, and/or re-export to another country, of encryption\n  software. BEFORE using any encryption software, please check your\n  country's laws, regulations and policies concerning the import,\n  possession, or use, and re-export of encryption software, to see if\n  this is permitted. See <http://www.wassenaar.org/> for more\n  information.\n\n  The U.S. Government Department of Commerce, Bureau of Industry and\n  Security (BIS), has classified this software as Export Commodity\n  Control Number (ECCN) 5D002.C.1, which includes information security\n  software using or performing cryptographic functions with symmetric\n  algorithms. The form and manner of this distribution makes it\n  eligible for export under the License Exception ENC Technology\n  Software Unrestricted (TSU) exception (see the BIS Export\n  Administration Regulations, Section 740.13) for both object code and\n  source code.\n",
        "releases": []
    }
}