{
    "https://api.github.com/repos/BrainJS/brain.js": {
        "forks": 1079,
        "watchers": 14528,
        "stars": 14528,
        "languages": {
            "TypeScript": 916359
        },
        "commits": [
            "2024-07-09T16:06:13Z",
            "2024-07-09T15:46:07Z",
            "2024-07-08T14:57:29Z",
            "2024-06-13T13:54:36Z",
            "2023-12-07T17:11:19Z",
            "2023-12-06T18:06:45Z",
            "2023-12-06T16:30:40Z",
            "2023-12-06T16:30:03Z",
            "2023-12-06T15:00:06Z",
            "2023-12-06T14:58:45Z",
            "2023-04-24T19:15:51Z",
            "2023-04-12T14:06:23Z",
            "2023-04-12T13:57:11Z",
            "2023-04-12T13:55:22Z",
            "2023-04-12T13:51:18Z",
            "2023-04-12T13:51:00Z",
            "2023-04-12T13:49:56Z",
            "2023-04-12T13:49:22Z",
            "2023-04-12T13:33:42Z",
            "2023-04-12T13:32:05Z",
            "2023-04-06T19:48:37Z",
            "2023-03-24T21:26:51Z",
            "2023-03-22T21:57:48Z",
            "2023-02-22T02:06:30Z",
            "2023-01-03T20:13:04Z",
            "2023-01-03T19:45:03Z",
            "2022-11-16T22:28:59Z",
            "2022-09-14T15:22:59Z",
            "2022-09-14T15:20:14Z",
            "2022-08-22T14:58:33Z"
        ],
        "creation_date": "2016-02-13T18:09:44Z",
        "contributors": 30,
        "topics": [
            "api",
            "brain",
            "browser",
            "convolutional-neural-networks",
            "easy-to-use",
            "hacktoberfest",
            "neural-network",
            "node",
            "nodejs",
            "recurrent-neural-networks",
            "stream",
            "web"
        ],
        "subscribers": 243,
        "readme": "<p align=\"center\">\n  <img src=\"https://cdn.rawgit.com/harthur-org/brain.js/ff595242/logo.svg\" alt=\"Logo\" width=200px/>\n</p>\n\n# brain.js\n\nGPU accelerated Neural networks in JavaScript for Browsers and Node.js\n\n<p style=\"text-align: center\" align=\"center\">\n\n  <a href=\"https://brain.js.org\"><img src=\"https://img.shields.io/website?up_message=brain.js.org&url=https%3A%2F%2Fbrain.js.org\" alt=\"GitHub\"></a>\n  [![npm](https://img.shields.io/npm/dt/brain.js.svg?style=flat-square)](https://npmjs.com/package/brain.js) [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com)\n  [![Backers on Open Collective](https://opencollective.com/brainjs/backers/badge.svg)](#backers)\n  [![Sponsors on Open Collective](https://opencollective.com/brainjs/sponsors/badge.svg)](#sponsors)\n  [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/brain-js/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n  [![Slack](https://slack.bri.im/badge.svg)](https://slack.bri.im)\n  ![CI](https://github.com/BrainJS/brain.js/workflows/CI/badge.svg)\n  [![codecov](https://codecov.io/gh/BrainJS/brain.js/branch/master/graph/badge.svg?token=3SJIBJ1679)](https://codecov.io/gh/BrainJS/brain.js)\n  <a href=\"https://twitter.com/brainjsfnd\"><img src=\"https://img.shields.io/twitter/follow/brainjsfnd?label=Twitter&style=social\" alt=\"Twitter\"></a>\n\n  [![NPM](https://nodei.co/npm/brain.js.png?compact=true)](https://nodei.co/npm/brain.js/)\n\n</p>\n\n## About\n\n`brain.js` is a GPU accelerated library for [Neural Networks](http://en.wikipedia.org/wiki/Artificial_neural_network) written in JavaScript.\n\n:bulb: This is a continuation of the [**harthur/brain**](https://github.com/harthur/brain), which is not maintained anymore. [More info](https://github.com/harthur/brain/issues/72)\n\n## Table of Contents\n\n- [Installation and Usage](#Installation-and-Usage)\n  - [NPM](#NPM)\n  - [CDN](#CDN)\n  - [Download](#Download)\n  - [Installation note](#Installation-note)\n  - [Building from source](#Building-from-source)\n- [Examples](#examples)\n  - [More Examples](#more-examples)\n- [Training](#training)\n  - [Data format](#data-format)\n    - [For training with NeuralNetwork](#for-training-with-neuralnetwork)\n    - [For training with `RNNTimeStep`, `LSTMTimeStep` and `GRUTimeStep`](#for-training-with-rnntimestep-lstmtimestep-and-grutimestep)\n    - [For training with `RNN`, `LSTM` and `GRU`](#for-training-with-rnn-lstm-and-gru)\n    - [For training with `AE`](#for-training-with-ae)\n  - [Training Options](#training-options)\n  - [Async Training](#async-training)\n  - [Cross Validation](#cross-validation)\n  - [Train Stream](#streams)\n- [Methods](#methods)\n  - [train](#traintrainingdata---trainingstatus)\n  - [run](#runinput---prediction)\n  - [forecast](#forecastinput-count---predictions)\n- [Failing](#failing)\n- [JSON](#json)\n- [Standalone Function](#standalone-function)\n- [Options](#options)\n  - [activation](#activation)\n  - [hiddenLayers](#hiddenlayers)\n- [Streams](#streams)\n- [Utilities](#utilities)\n  - [`likely`](#likely)\n  - [`toSVG`](#toSVG)\n- [Neural Network Types](#neural-network-types)\n  - [Why different Neural Network Types?](#why-different-neural-network-types)\n\n## Installation and Usage\n\n### NPM\n\nIf you can install `brain.js` with [npm](http://npmjs.org):\n\n```bash\nnpm install brain.js\n```\n\n### CDN\n\n```html\n<script src=\"//unpkg.com/brain.js\"></script>\n```\n\n### Download\n\n[Download the latest brain.js for browser](https://unpkg.com/brain.js)\n\n### Installation note\n\n`Brain.js` depends on a native module [`headless-gl`](https://www.npmjs.com/package/headless-gl) for GPU support. In most cases installing `brain.js` from npm should just work. However, if you run into problems, this means prebuilt binaries are not able to download from GitHub repositories and you might need to build it yourself.\n\n#### Building from source\n\nPlease make sure the following dependencies are installed and up to date and then run:\n\n```bash\nnpm rebuild\n```\n\n##### System dependencies\n\n###### Mac OS X\n\n- [A supported version of Python](https://devguide.python.org/versions)\n- [XCode](https://developer.apple.com/xcode/)\n\n###### Ubuntu/Debian\n\n- [A supported version of Python](https://devguide.python.org/versions)\n- A GNU C++ environment (available via the `build-essential` package on `apt`)\n- [libxi-dev](http://www.x.org/wiki/)\n- Working and up-to-date OpenGL drivers\n- [GLEW](http://glew.sourceforge.net/)\n- [pkg-config](https://www.freedesktop.org/wiki/Software/pkg-config/)\n\n```bash\nsudo apt-get install -y build-essential libglew-dev libglu1-mesa-dev libxi-dev pkg-config\n```\n\n###### Windows\n\n- [A supported version of Python](https://devguide.python.org/versions)  __See:__ https://apps.microsoft.com/store/search/python\n- [Microsoft Visual Studio Build Tools 2022](https://visualstudio.microsoft.com/downloads)\n- run in cmd: `npm config set msvs_version 2022`  __Note: This no longer works in modern versions of npm.__\n- run in cmd: `npm config set python python3`  __Note: This no longer works in modern versions of npm.__\n\n\\* If you are using `Build Tools 2017` then run `npm config set msvs_version 2017`  __Note: This no longer works in modern versions of npm.__\n\n## Examples\n\nHere's an example showcasing how to approximate the XOR function using `brain.js`:\nmore info on config [here](https://github.com/BrainJS/brain.js/blob/develop/src/neural-network.js#L31).\n\n:bulb: [A fun and practical introduction to Brain.js](https://scrimba.com/g/gneuralnetworks)\n\n```javascript\n// provide optional config object (or undefined). Defaults shown.\nconst config = {\n  binaryThresh: 0.5,\n  hiddenLayers: [3], // array of ints for the sizes of the hidden layers in the network\n  activation: 'sigmoid', // supported activation types: ['sigmoid', 'relu', 'leaky-relu', 'tanh'],\n  leakyReluAlpha: 0.01, // supported for activation type 'leaky-relu'\n};\n\n// create a simple feed-forward neural network with backpropagation\nconst net = new brain.NeuralNetwork(config);\n\nnet.train([\n  { input: [0, 0], output: [0] },\n  { input: [0, 1], output: [1] },\n  { input: [1, 0], output: [1] },\n  { input: [1, 1], output: [0] },\n]);\n\nconst output = net.run([1, 0]); // [0.987]\n```\n\nor\nmore info on config [here](https://github.com/BrainJS/brain.js/blob/develop/src/recurrent/rnn.js#L726).\n\n```javascript\n// provide optional config object, defaults shown.\nconst config = {\n  inputSize: 20,\n  inputRange: 20,\n  hiddenLayers: [20, 20],\n  outputSize: 20,\n  learningRate: 0.01,\n  decayRate: 0.999,\n};\n\n// create a simple recurrent neural network\nconst net = new brain.recurrent.RNN(config);\n\nnet.train([\n  { input: [0, 0], output: [0] },\n  { input: [0, 1], output: [1] },\n  { input: [1, 0], output: [1] },\n  { input: [1, 1], output: [0] },\n]);\n\nlet output = net.run([0, 0]); // [0]\noutput = net.run([0, 1]); // [1]\noutput = net.run([1, 0]); // [1]\noutput = net.run([1, 1]); // [0]\n```\n\nHowever, there is no reason to use a neural network to figure out XOR. (-: So, here is a more involved, realistic example:\n[Demo: training a neural network to recognize color contrast](https://brain.js.org/).\n\n## More Examples\n\n[Brain.js Examples Repo](https://github.com/BrainJS/brain.js-examples)\n\nYou can check out this fantastic screencast, which explains how to train a simple neural network using a real-world dataset: [How to create a neural network in the browser using Brain.js](https://scrimba.com/c/c36zkcb).\n\n## Training\n\nUse `train()` to train the network with an array of training data. The network has to be trained with all the data in bulk in one call to `train()`. More training patterns will probably take longer to train, but will usually result in a network better at classifying new patterns.\n\n### Note\n\nTraining is computationally expensive, so you should try to train the network offline (or on a Worker) and use the `toFunction()` or `toJSON()` options to plug the pre-trained network into your website.\n\n### Data format\n\n#### For training with `NeuralNetwork`\n\nEach training pattern should have an `input` and an `output`, both of which can be either an array of numbers from `0` to `1` or a hash of numbers from `0` to `1`. For the [color contrast demo](https://brain.js.org/) it looks something like this:\n\n```javascript\nconst net = new brain.NeuralNetwork();\n\nnet.train([\n  { input: { r: 0.03, g: 0.7, b: 0.5 }, output: { black: 1 } },\n  { input: { r: 0.16, g: 0.09, b: 0.2 }, output: { white: 1 } },\n  { input: { r: 0.5, g: 0.5, b: 1.0 }, output: { white: 1 } },\n]);\n\nconst output = net.run({ r: 1, g: 0.4, b: 0 }); // { white: 0.99, black: 0.002 }\n```\n\nHere's another variation of the above example. (_Note_ that input objects do not need to be similar.)\n\n```javascript\nnet.train([\n  { input: { r: 0.03, g: 0.7 }, output: { black: 1 } },\n  { input: { r: 0.16, b: 0.2 }, output: { white: 1 } },\n  { input: { r: 0.5, g: 0.5, b: 1.0 }, output: { white: 1 } },\n]);\n\nconst output = net.run({ r: 1, g: 0.4, b: 0 }); // { white: 0.81, black: 0.18 }\n```\n\n#### For training with `RNNTimeStep`, `LSTMTimeStep` and `GRUTimeStep`\n\nEach training pattern can either:\n\n- Be an array of numbers\n- Be an array of arrays of numbers\n\nExample using an array of numbers:\n\n```javascript\nconst net = new brain.recurrent.LSTMTimeStep();\n\nnet.train([[1, 2, 3]]);\n\nconst output = net.run([1, 2]); // 3\n```\n\nExample using an array of arrays of numbers:\n\n```javascript\nconst net = new brain.recurrent.LSTMTimeStep({\n  inputSize: 2,\n  hiddenLayers: [10],\n  outputSize: 2,\n});\n\nnet.train([\n  [1, 3],\n  [2, 2],\n  [3, 1],\n]);\n\nconst output = net.run([\n  [1, 3],\n  [2, 2],\n]); // [3, 1]\n```\n\n#### For training with `RNN`, `LSTM` and `GRU`\n\nEach training pattern can either:\n\n- Be an array of values\n- Be a string\n- Have an `input` and an `output`\n  - Either of which can have an array of values or a string\n\nCAUTION: When using an array of values, you can use ANY value, however, the values are represented in the neural network by a single input. So the more _distinct values_ has _the larger your input layer_. If you have a hundreds, thousands, or millions of floating point values _THIS IS NOT THE RIGHT CLASS FOR THE JOB_. Also, when deviating from strings, this gets into beta\n\nExample using direct strings:\nHello World Using Brainjs\n```javascript\n\n  const net = new brain.recurrent.LSTM();\n\n  net.train(['I am brainjs, Hello World!']);\n\n  const output = net.run('I am brainjs');\n  alert(output);\n```\n\n```javascript\nconst net = new brain.recurrent.LSTM();\n\nnet.train([\n  'doe, a deer, a female deer',\n  'ray, a drop of golden sun',\n  'me, a name I call myself',\n]);\n\nconst output = net.run('doe'); // ', a deer, a female deer'\n```\n\nExample using strings with inputs and outputs:\n\n```javascript\nconst net = new brain.recurrent.LSTM();\n\nnet.train([\n  { input: 'I feel great about the world!', output: 'happy' },\n  { input: 'The world is a terrible place!', output: 'sad' },\n]);\n\nconst output = net.run('I feel great about the world!'); // 'happy'\n```\n\n#### For training with `AE`\n\nEach training pattern can either:\n\n- Be an array of numbers\n- Be an array of arrays of numbers\n\nTraining an autoencoder to compress the values of a XOR calculation:\n\n```javascript\nconst net = new brain.AE(\n  {\n    hiddenLayers: [ 5, 2, 5 ]\n  }\n);\n\nnet.train([\n  [ 0, 0, 0 ],\n  [ 0, 1, 1 ],\n  [ 1, 0, 1 ],\n  [ 1, 1, 0 ]\n]);\n```\n\nEncoding/decoding:\n\n```javascript\nconst input = [ 0, 1, 1 ];\n\nconst encoded = net.encode(input);\nconst decoded = net.decode(encoded);\n```\n\nDenoise noisy data:\n\n```javascript\nconst noisyData = [ 0, 1, 0 ];\n\nconst data = net.denoise(noisyData);\n```\n\nTest for anomalies in data samples:\n\n```javascript\nconst shouldBeFalse = net.includesAnomalies([0, 1, 1]);\nconst shouldBeTrue = net.includesAnomalies([0, 1, 0]);\n```\n\n### Training Options\n\n`train()` takes a hash of options as its second argument:\n\n```javascript\nnet.train(data, {\n  // Defaults values --> expected validation\n  iterations: 20000, // the maximum times to iterate the training data --> number greater than 0\n  errorThresh: 0.005, // the acceptable error percentage from training data --> number between 0 and 1\n  log: false, // true to use console.log, when a function is supplied it is used --> Either true or a function\n  logPeriod: 10, // iterations between logging out --> number greater than 0\n  learningRate: 0.3, // scales with delta to effect training rate --> number between 0 and 1\n  momentum: 0.1, // scales with next layer's change value --> number between 0 and 1\n  callback: null, // a periodic call back that can be triggered while training --> null or function\n  callbackPeriod: 10, // the number of iterations through the training data between callback calls --> number greater than 0\n  timeout: number, // the max number of milliseconds to train for --> number greater than 0. Default --> Infinity\n});\n```\n\nThe network will stop training whenever one of the two criteria is met: the training error has gone below the threshold (default `0.005`), or the max number of iterations (default `20000`) has been reached.\n\nBy default, training will not let you know how it's doing until the end, but set `log` to `true` to get periodic updates on the current training error of the network. The training error should decrease every time. The updates will be printed to the console. If you set `log` to a function, this function will be called with the updates instead of printing to the console.\nHowever, if you want to use the values of the updates in your own output, the `callback` can be set to a function to do so instead.\n\nThe learning rate is a parameter that influences how quickly the network trains. It's a number from `0` to `1`. If the learning rate is close to `0`, it will take longer to train. If the learning rate is closer to `1`, it will train faster, but training results may be constrained to a local minimum and perform badly on new data.(_Overfitting_) The default learning rate is `0.3`.\n\nThe momentum is similar to learning rate, expecting a value from `0` to `1` as well, but it is multiplied against the next level's change value. The default value is `0.1`\n\nAny of these training options can be passed into the constructor or passed into the `updateTrainingOptions(opts)` method and they will be saved on the network and used during the training time. If you save your network to json, these training options are saved and restored as well (except for callback and log, callback will be forgotten and log will be restored using console.log).\n\nA boolean property called `invalidTrainOptsShouldThrow` is set to `true` by default. While the option is `true`, if you enter a training option that is outside the normal range, an error will be thrown with a message about the abnormal option. When the option is set to `false`, no error will be sent, but a message will still be sent to `console.warn` with the related information.\n\n### Async Training\n\n`trainAsync()` takes the same arguments as train (data and options). Instead of returning the results object from training, it returns a promise that when resolved will return the training results object.  Does NOT work with:\n* `brain.recurrent.RNN`\n* `brain.recurrent.GRU`\n* `brain.recurrent.LSTM`\n* `brain.recurrent.RNNTimeStep`\n* `brain.recurrent.GRUTimeStep`\n* `brain.recurrent.LSTMTimeStep`\n\n```javascript\nconst net = new brain.NeuralNetwork();\nnet\n  .trainAsync(data, options)\n  .then((res) => {\n    // do something with my trained network\n  })\n  .catch(handleError);\n```\n\nWith multiple networks you can train in parallel like this:\n\n```javascript\nconst net = new brain.NeuralNetwork();\nconst net2 = new brain.NeuralNetwork();\n\nconst p1 = net.trainAsync(data, options);\nconst p2 = net2.trainAsync(data, options);\n\nPromise.all([p1, p2])\n  .then((values) => {\n    const res = values[0];\n    const res2 = values[1];\n    console.log(\n      `net trained in ${res.iterations} and net2 trained in ${res2.iterations}`\n    );\n    // do something super cool with my 2 trained networks\n  })\n  .catch(handleError);\n```\n\n### Cross Validation\n\n[Cross Validation](<https://en.wikipedia.org/wiki/Cross-validation_(statistics)>) can provide a less fragile way of training on larger data sets. The brain.js api provides Cross Validation in this example:\n\n```js\nconst crossValidate = new brain.CrossValidate(() => new brain.NeuralNetwork(networkOptions));\ncrossValidate.train(data, trainingOptions, k); //note k (or KFolds) is optional\nconst json = crossValidate.toJSON(); // all stats in json as well as neural networks\nconst net = crossValidate.toNeuralNetwork(); // get top performing net out of `crossValidate`\n\n// optionally later\nconst json = crossValidate.toJSON();\nconst net = crossValidate.fromJSON(json);\n```\n\nUse `CrossValidate` with these classes:\n\n- `brain.NeuralNetwork`\n- `brain.RNNTimeStep`\n- `brain.LSTMTimeStep`\n- `brain.GRUTimeStep`\n\nAn example of using cross validate can be found in [cross-validate.ts](https://github.com/BrainJS/brain.js-examples/blob/main/src/cross-validate.ts)\n\n## Methods\n\n### `train(trainingData)` -> trainingStatus\n\nThe output of `train()` is a hash of information about how the training went:\n\n```javascript\n{\n  error: 0.0039139985510105032,  // training error\n  iterations: 406                // training iterations\n}\n```\n\n### `run(input)` -> prediction\n\nSupported on classes:\n\n- `brain.NeuralNetwork`\n- `brain.NeuralNetworkGPU` -> All the functionality of `brain.NeuralNetwork` but, ran on GPU (via gpu.js in WebGL2, WebGL1, or fallback to CPU)\n- `brain.recurrent.RNN`\n- `brain.recurrent.LSTM`\n- `brain.recurrent.GRU`\n- `brain.recurrent.RNNTimeStep`\n- `brain.recurrent.LSTMTimeStep`\n- `brain.recurrent.GRUTimeStep`\n\nExample:\n\n```js\n// feed forward\nconst net = new brain.NeuralNetwork();\nnet.fromJSON(json);\nnet.run(input);\n\n// time step\nconst net = new brain.LSTMTimeStep();\nnet.fromJSON(json);\nnet.run(input);\n\n// recurrent\nconst net = new brain.LSTM();\nnet.fromJSON(json);\nnet.run(input);\n```\n\n### `forecast(input, count)` -> predictions\n\nAvailable with the following classes. Outputs a array of predictions. Predictions being a continuation of the inputs.\n\n- `brain.recurrent.RNNTimeStep`\n- `brain.recurrent.LSTMTimeStep`\n- `brain.recurrent.GRUTimeStep`\n\nExample:\n\n```js\nconst net = new brain.LSTMTimeStep();\nnet.fromJSON(json);\nnet.forecast(input, 3);\n```\n\n### `toJSON() -> json`\n\nSerialize neural network to json\n\n### `fromJSON(json)`\n\nDeserialize neural network from json\n\n## Failing\n\nIf the network failed to train, the error will be above the error threshold. This could happen if the training data is too noisy (most likely), the network does not have enough hidden layers or nodes to handle the complexity of the data, or it has not been trained for enough iterations.\n\nIf the training error is still something huge like `0.4` after 20000 iterations, it's a good sign that the network can't make sense of the given data.\n\n### RNN, LSTM, or GRU Output too short or too long\n\nThe instance of the net's property `maxPredictionLength` (default 100) can be set to adjust the output of the net;\n\nExample:\n\n```js\nconst net = new brain.recurrent.LSTM();\n\n// later in code, after training on a few novels, write me a new one!\nnet.maxPredictionLength = 1000000000; // Be careful!\nnet.run('Once upon a time');\n```\n\n## JSON\n\nSerialize or load in the state of a trained network with JSON:\n\n```javascript\nconst json = net.toJSON();\nnet.fromJSON(json);\n```\n\n## Standalone Function\n\nYou can also get a custom standalone function from a trained network that acts just like `run()`:\n\n```javascript\nconst run = net.toFunction();\nconst output = run({ r: 1, g: 0.4, b: 0 });\nconsole.log(run.toString()); // copy and paste! no need to import brain.js\n```\n\n## Options\n\n`NeuralNetwork()` takes a hash of options:\n\n```javascript\nconst net = new brain.NeuralNetwork({\n  activation: 'sigmoid', // activation function\n  hiddenLayers: [4],\n  learningRate: 0.6, // global learning rate, useful when training using streams\n});\n```\n\n### activation\n\nThis parameter lets you specify which activation function your neural network should use. There are currently four supported activation functions, **sigmoid** being the default:\n\n- [sigmoid](https://www.wikiwand.com/en/Sigmoid_function)\n- [relu](<https://www.wikiwand.com/en/Rectifier_(neural_networks)>)\n- [leaky-relu](<https://www.wikiwand.com/en/Rectifier_(neural_networks)>)\n  - related option - 'leakyReluAlpha' optional number, defaults to 0.01\n- [tanh](https://theclevermachine.wordpress.com/tag/tanh-function/)\n\nHere's a table (thanks, Wikipedia!) summarizing a plethora of activation functions \u2014 [Activation Function](https://www.wikiwand.com/en/Activation_function)\n\n### hiddenLayers\n\nYou can use this to specify the number of hidden layers in the network and the size of each layer. For example, if you want two hidden layers - the first with 3 nodes and the second with 4 nodes, you'd give:\n\n```js\nhiddenLayers: [3, 4];\n```\n\nBy default `brain.js` uses one hidden layer with size proportionate to the size of the input array.\n\n## Streams\n\nUse https://www.npmjs.com/package/train-stream to stream data to a NeuralNetwork\n\n## Utilities\n\n### `likely`\n\n```js\nconst likely = require('brain/likely');\nconst key = likely(input, net);\n```\n\nLikely example see: [simple letter detection](https://github.com/BrainJS/brain.js-examples/blob/main/src/which-letter-simple.ts)\n\n### `toSVG`\n\n```js\n<script src=\"../../src/utilities/svg.js\"></script>\n```\n\nRenders the network topology of a feedforward network\n\n```js\ndocument.getElementById('result').innerHTML = brain.utilities.toSVG(\n  network,\n  options\n);\n```\n\ntoSVG example see: [network rendering](https://github.com/BrainJS/brain.js-examples/blob/main/src/rendering-svg/index.html)\n\nThe user interface used:\n![screenshot1](https://user-images.githubusercontent.com/43925925/48969024-e526ed80-f000-11e8-85bd-e10967cfaee2.png)\n\n## Neural Network Types\n\n- [`brain.NeuralNetwork`](src/neural-network.ts) - [Feedforward Neural Network](https://en.wikipedia.org/wiki/Feedforward_neural_network) with backpropagation\n- [`brain.NeuralNetworkGPU`](src/neural-network-gpu.ts) - [Feedforward Neural Network](https://en.wikipedia.org/wiki/Feedforward_neural_network) with backpropagation, GPU version\n- [`brain.AE`](src/autoencoder.ts) - [Autoencoder or \"AE\"](https://en.wikipedia.org/wiki/Autoencoder) with backpropogation and GPU support\n- [`brain.recurrent.RNNTimeStep`](src/recurrent/rnn-time-step.ts) - [Time Step Recurrent Neural Network or \"RNN\"](https://en.wikipedia.org/wiki/Recurrent_neural_network)\n- [`brain.recurrent.LSTMTimeStep`](src/recurrent/lstm-time-step.ts) - [Time Step Long Short Term Memory Neural Network or \"LSTM\"](https://en.wikipedia.org/wiki/Long_short-term_memory)\n- [`brain.recurrent.GRUTimeStep`](src/recurrent/gru-time-step.ts) - [Time Step Gated Recurrent Unit or \"GRU\"](https://en.wikipedia.org/wiki/Gated_recurrent_unit)\n- [`brain.recurrent.RNN`](src/recurrent/rnn.ts) - [Recurrent Neural Network or \"RNN\"](https://en.wikipedia.org/wiki/Recurrent_neural_network)\n- [`brain.recurrent.LSTM`](src/recurrent/lstm.ts) - [Long Short Term Memory Neural Network or \"LSTM\"](https://en.wikipedia.org/wiki/Long_short-term_memory)\n- [`brain.recurrent.GRU`](src/recurrent/gru.ts) - [Gated Recurrent Unit or \"GRU\"](https://en.wikipedia.org/wiki/Gated_recurrent_unit)\n- [`brain.FeedForward`](src/feed-forward.ts) - [Highly Customizable Feedforward Neural Network](https://en.wikipedia.org/wiki/Feedforward_neural_network) with backpropagation\n- [`brain.Recurrent`](src/recurrent.ts) - [Highly Customizable Recurrent Neural Network](https://en.wikipedia.org/wiki/Recurrent_neural_network) with backpropagation\n\n### Why different Neural Network Types\n\nDifferent neural nets do different things well. For example:\n\n- A Feedforward Neural Network can classify simple things very well, but it has no memory of previous actions and has infinite variation of results.\n- A Time Step Recurrent Neural Network _remembers_, and can predict future values.\n- A Recurrent Neural Network _remembers_, and has a finite set of results.\n\n## Get Involved\n\n### W3C machine learning standardization process\n\nIf you are a developer or if you just care about how ML API should look like - please take a part and join W3C community and share your opinions or simply support opinions you like or agree with.\n\nBrain.js is a widely adopted open source machine learning library in the javascript world. There are several reasons for it, but most notable is **simplicity of usage while not sacrificing performance**.\nWe would like to keep it also simple to learn, simple to use and performant when it comes to W3C standard. We think that current brain.js API is quite close to what we could expect to become a standard.\nAnd since supporting doesn't require much effort and still can make a huge difference feel free to join W3C community group and support us with brain.js like API.\n\nGet involved into W3C machine learning ongoing standardization process [here](https://www.w3.org/community/webmachinelearning/).\nYou can also join our open discussion about standardization [here](https://github.com/BrainJS/brain.js/issues/337).\n\n## Issues\n\nIf you have an issue, either a bug or a feature you think would benefit your project let us know and we will do our best.\n\nCreate issues [here](https://github.com/BrainJS/brain.js/issues) and follow the template.\n\n### brain.js.org\n\nSource for `brain.js.org` is available at [Brain.js.org Repository](https://github.com/BrainJS/brain.js.org). Built using awesome `vue.js` & `bulma`. Contributions are always welcome.\n\n## Contributors\n\nThis project exists thanks to all the people who contribute. [[Contribute](/.github/CONTRIBUTING.md)].\n<a href=\"https://github.com/BrainJS/brain.js/graphs/contributors\"><img src=\"https://opencollective.com/brainjs/contributors.svg?width=890&button=false\" /></a>\n\n## Backers\n\nThank you to all our backers! \ud83d\ude4f [[Become a backer](https://opencollective.com/brainjs#backer)]\n\n<a href=\"https://opencollective.com/brainjs#backers\" target=\"_blank\"><img src=\"https://opencollective.com/brainjs/backers.svg?width=890\"></a>\n\n## Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/brainjs#sponsor)]\n\n<a href=\"https://opencollective.com/brainjs/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/brainjs/sponsor/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/brainjs/sponsor/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/brainjs/sponsor/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/brainjs/sponsor/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/brainjs/sponsor/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/brainjs/sponsor/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/brainjs/sponsor/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/brainjs/sponsor/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/brainjs/sponsor/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/brainjs/sponsor/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/brainjs/sponsor/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/brainjs/sponsor/6/website\" target=\"_blank\"><img src=\"https://opencollective.com/brainjs/sponsor/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/brainjs/sponsor/7/website\" target=\"_blank\"><img src=\"https://opencollective.com/brainjs/sponsor/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/brainjs/sponsor/8/website\" target=\"_blank\"><img src=\"https://opencollective.com/brainjs/sponsor/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/brainjs/sponsor/9/website\" target=\"_blank\"><img src=\"https://opencollective.com/brainjs/sponsor/9/avatar.svg\"></a>\n",
        "releases": [
            {
                "name": "Expose leakyReluAlpha as NeuralNetwork option",
                "date": "2018-11-13T15:03:21Z"
            },
            {
                "name": "RNN toJSON fix",
                "date": "2018-11-13T15:02:51Z"
            },
            {
                "name": "Maintenance release",
                "date": "2018-11-04T20:31:19Z"
            },
            {
                "name": "Maintenance release",
                "date": "2018-11-04T20:02:23Z"
            },
            {
                "name": "Maintenance Release",
                "date": "2018-10-04T17:23:07Z"
            },
            {
                "name": "Refine TrainStream and CrossValidate",
                "date": "2018-09-21T12:21:55Z"
            },
            {
                "name": "maintenance release",
                "date": "2018-08-10T12:39:35Z"
            },
            {
                "name": "maintenance release",
                "date": "2018-08-10T12:32:54Z"
            },
            {
                "name": "maintenance release + adding Typescript typings",
                "date": "2018-06-11T20:53:14Z"
            },
            {
                "name": "Fix es5 module export for new TimeStep neural networks",
                "date": "2018-04-25T17:09:20Z"
            },
            {
                "name": "maintenance release + Recurrent TimeStep Networks & join BRIIM Movement",
                "date": "2018-04-21T18:45:57Z"
            },
            {
                "name": "maintenance release",
                "date": "2018-03-05T18:56:00Z"
            },
            {
                "name": "",
                "date": "2018-03-04T20:54:56Z"
            },
            {
                "name": "maintenance release",
                "date": "2018-03-03T18:58:30Z"
            },
            {
                "name": "",
                "date": "2018-02-11T22:12:50Z"
            },
            {
                "name": "",
                "date": "2018-02-02T15:59:32Z"
            },
            {
                "name": "",
                "date": "2018-01-26T21:16:48Z"
            },
            {
                "name": "",
                "date": "2018-01-19T21:29:44Z"
            },
            {
                "name": "",
                "date": "2018-01-14T12:49:04Z"
            },
            {
                "name": "Yasny",
                "date": "2017-12-31T23:43:08Z"
            }
        ]
    }
}